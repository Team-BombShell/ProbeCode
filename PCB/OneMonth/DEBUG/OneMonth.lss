
OneMonth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00802000  00003f66  00003ffa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  00802082  00802082  0000407c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000040d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00004118  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000feec  00000000  00000000  000045b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005891  00000000  00000000  000144a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007f19  00000000  00000000  00019d35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000018e0  00000000  00000000  00021c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000333c0  00000000  00000000  00023530  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005557  00000000  00000000  000568f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e0  00000000  00000000  0005be48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c5fe  00000000  00000000  0005c228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ab c1       	rjmp	.+854    	; 0x358 <__ctors_end>
       2:	00 00       	nop
       4:	cf c1       	rjmp	.+926    	; 0x3a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c1       	rjmp	.+922    	; 0x3a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c1       	rjmp	.+918    	; 0x3a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c1       	rjmp	.+914    	; 0x3a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c1       	rjmp	.+910    	; 0x3a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c1       	rjmp	.+906    	; 0x3a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c1       	rjmp	.+902    	; 0x3a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c1       	rjmp	.+898    	; 0x3a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c1       	rjmp	.+894    	; 0x3a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	bd c1       	rjmp	.+890    	; 0x3a4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bb c1       	rjmp	.+886    	; 0x3a4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b9 c1       	rjmp	.+882    	; 0x3a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	b7 c1       	rjmp	.+878    	; 0x3a4 <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c4       	rjmp	.+2120   	; 0x882 <__vector_14>
      3a:	00 00       	nop
      3c:	5a c4       	rjmp	.+2228   	; 0x8f2 <__vector_15>
      3e:	00 00       	nop
      40:	90 c4       	rjmp	.+2336   	; 0x962 <__vector_16>
      42:	00 00       	nop
      44:	c6 c4       	rjmp	.+2444   	; 0x9d2 <__vector_17>
      46:	00 00       	nop
      48:	fc c4       	rjmp	.+2552   	; 0xa42 <__vector_18>
      4a:	00 00       	nop
      4c:	32 c5       	rjmp	.+2660   	; 0xab2 <__vector_19>
      4e:	00 00       	nop
      50:	68 c5       	rjmp	.+2768   	; 0xb22 <__vector_20>
      52:	00 00       	nop
      54:	9e c5       	rjmp	.+2876   	; 0xb92 <__vector_21>
      56:	00 00       	nop
      58:	d4 c5       	rjmp	.+2984   	; 0xc02 <__vector_22>
      5a:	00 00       	nop
      5c:	0a c6       	rjmp	.+3092   	; 0xc72 <__vector_23>
      5e:	00 00       	nop
      60:	a1 c1       	rjmp	.+834    	; 0x3a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	9f c1       	rjmp	.+830    	; 0x3a4 <__bad_interrupt>
      66:	00 00       	nop
      68:	9d c1       	rjmp	.+826    	; 0x3a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c1       	rjmp	.+822    	; 0x3a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c1       	rjmp	.+818    	; 0x3a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c1       	rjmp	.+814    	; 0x3a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c1       	rjmp	.+810    	; 0x3a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c1       	rjmp	.+806    	; 0x3a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c1       	rjmp	.+802    	; 0x3a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c1       	rjmp	.+798    	; 0x3a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c1       	rjmp	.+794    	; 0x3a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c1       	rjmp	.+790    	; 0x3a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c1       	rjmp	.+786    	; 0x3a4 <__bad_interrupt>
      92:	00 00       	nop
      94:	87 c1       	rjmp	.+782    	; 0x3a4 <__bad_interrupt>
      96:	00 00       	nop
      98:	85 c1       	rjmp	.+778    	; 0x3a4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ee c2       	rjmp	.+1500   	; 0x67a <__vector_39>
      9e:	00 00       	nop
      a0:	29 c3       	rjmp	.+1618   	; 0x6f4 <__vector_40>
      a2:	00 00       	nop
      a4:	64 c3       	rjmp	.+1736   	; 0x76e <__vector_41>
      a6:	00 00       	nop
      a8:	9f c3       	rjmp	.+1854   	; 0x7e8 <__vector_42>
      aa:	00 00       	nop
      ac:	7b c1       	rjmp	.+758    	; 0x3a4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	79 c1       	rjmp	.+754    	; 0x3a4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	77 c1       	rjmp	.+750    	; 0x3a4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	75 c1       	rjmp	.+746    	; 0x3a4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__vector_47>
      c0:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__vector_48>
      c4:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__vector_49>
      c8:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__vector_50>
      cc:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__vector_51>
      d0:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__vector_52>
      d4:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__vector_53>
      d8:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__vector_54>
      dc:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__vector_55>
      e0:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <__vector_56>
      e4:	5f c1       	rjmp	.+702    	; 0x3a4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	5d c1       	rjmp	.+698    	; 0x3a4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	5b c1       	rjmp	.+694    	; 0x3a4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	59 c1       	rjmp	.+690    	; 0x3a4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	57 c1       	rjmp	.+686    	; 0x3a4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	55 c1       	rjmp	.+682    	; 0x3a4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	53 c1       	rjmp	.+678    	; 0x3a4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	51 c1       	rjmp	.+674    	; 0x3a4 <__bad_interrupt>
     102:	00 00       	nop
     104:	4f c1       	rjmp	.+670    	; 0x3a4 <__bad_interrupt>
     106:	00 00       	nop
     108:	4d c1       	rjmp	.+666    	; 0x3a4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	4b c1       	rjmp	.+662    	; 0x3a4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	49 c1       	rjmp	.+658    	; 0x3a4 <__bad_interrupt>
     112:	00 00       	nop
     114:	47 c1       	rjmp	.+654    	; 0x3a4 <__bad_interrupt>
     116:	00 00       	nop
     118:	45 c1       	rjmp	.+650    	; 0x3a4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ba c1       	rjmp	.+884    	; 0x492 <__vector_71>
     11e:	00 00       	nop
     120:	f5 c1       	rjmp	.+1002   	; 0x50c <__vector_72>
     122:	00 00       	nop
     124:	30 c2       	rjmp	.+1120   	; 0x586 <__vector_73>
     126:	00 00       	nop
     128:	6b c2       	rjmp	.+1238   	; 0x600 <__vector_74>
     12a:	00 00       	nop
     12c:	3b c1       	rjmp	.+630    	; 0x3a4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	39 c1       	rjmp	.+626    	; 0x3a4 <__bad_interrupt>
     132:	00 00       	nop
     134:	d6 c5       	rjmp	.+2988   	; 0xce2 <__vector_77>
     136:	00 00       	nop
     138:	0c c6       	rjmp	.+3096   	; 0xd52 <__vector_78>
     13a:	00 00       	nop
     13c:	42 c6       	rjmp	.+3204   	; 0xdc2 <__vector_79>
     13e:	00 00       	nop
     140:	78 c6       	rjmp	.+3312   	; 0xe32 <__vector_80>
     142:	00 00       	nop
     144:	ae c6       	rjmp	.+3420   	; 0xea2 <__vector_81>
     146:	00 00       	nop
     148:	e4 c6       	rjmp	.+3528   	; 0xf12 <__vector_82>
     14a:	00 00       	nop
     14c:	1a c7       	rjmp	.+3636   	; 0xf82 <__vector_83>
     14e:	00 00       	nop
     150:	50 c7       	rjmp	.+3744   	; 0xff2 <__vector_84>
     152:	00 00       	nop
     154:	86 c7       	rjmp	.+3852   	; 0x1062 <__vector_85>
     156:	00 00       	nop
     158:	bc c7       	rjmp	.+3960   	; 0x10d2 <__vector_86>
     15a:	00 00       	nop
     15c:	23 c1       	rjmp	.+582    	; 0x3a4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	21 c1       	rjmp	.+578    	; 0x3a4 <__bad_interrupt>
     162:	00 00       	nop
     164:	1f c1       	rjmp	.+574    	; 0x3a4 <__bad_interrupt>
     166:	00 00       	nop
     168:	1d c1       	rjmp	.+570    	; 0x3a4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	1b c1       	rjmp	.+566    	; 0x3a4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	19 c1       	rjmp	.+562    	; 0x3a4 <__bad_interrupt>
     172:	00 00       	nop
     174:	17 c1       	rjmp	.+558    	; 0x3a4 <__bad_interrupt>
     176:	00 00       	nop
     178:	15 c1       	rjmp	.+554    	; 0x3a4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	13 c1       	rjmp	.+550    	; 0x3a4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	11 c1       	rjmp	.+546    	; 0x3a4 <__bad_interrupt>
     182:	00 00       	nop
     184:	0f c1       	rjmp	.+542    	; 0x3a4 <__bad_interrupt>
     186:	00 00       	nop
     188:	0d c1       	rjmp	.+538    	; 0x3a4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	0b c1       	rjmp	.+534    	; 0x3a4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	09 c1       	rjmp	.+530    	; 0x3a4 <__bad_interrupt>
     192:	00 00       	nop
     194:	07 c1       	rjmp	.+526    	; 0x3a4 <__bad_interrupt>
     196:	00 00       	nop
     198:	05 c1       	rjmp	.+522    	; 0x3a4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	03 c1       	rjmp	.+518    	; 0x3a4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	01 c1       	rjmp	.+514    	; 0x3a4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ff c0       	rjmp	.+510    	; 0x3a4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	fd c0       	rjmp	.+506    	; 0x3a4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	fb c0       	rjmp	.+502    	; 0x3a4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__vector_108>
     1b4:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__vector_109>
     1b8:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__vector_110>
     1bc:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__vector_111>
     1c0:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__vector_112>
     1c4:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__vector_113>
     1c8:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__vector_114>
     1cc:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__vector_115>
     1d0:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__vector_116>
     1d4:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__vector_117>
     1d8:	e5 c0       	rjmp	.+458    	; 0x3a4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	e3 c0       	rjmp	.+454    	; 0x3a4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	e1 c0       	rjmp	.+450    	; 0x3a4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	df c0       	rjmp	.+446    	; 0x3a4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	dd c0       	rjmp	.+442    	; 0x3a4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	db c0       	rjmp	.+438    	; 0x3a4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	d9 c0       	rjmp	.+434    	; 0x3a4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	d7 c0       	rjmp	.+430    	; 0x3a4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	d5 c0       	rjmp	.+426    	; 0x3a4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 00       	.word	0x0008	; ????
     1fe:	00 00       	nop
     200:	be 92       	st	-X, r11
     202:	24 49       	sbci	r18, 0x94	; 148
     204:	12 3e       	cpi	r17, 0xE2	; 226
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	be cd       	rjmp	.-1156   	; 0xfffffd88 <__eeprom_end+0xff7efd88>
     20c:	cc cc       	rjmp	.-1640   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     20e:	4c 3e       	cpi	r20, 0xEC	; 236
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	be ab       	std	Y+54, r27	; 0x36
     216:	aa aa       	std	Y+50, r10	; 0x32
     218:	aa 3e       	cpi	r26, 0xEA	; 234
     21a:	00 00       	nop
     21c:	00 00       	nop
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	00 00       	nop
     226:	00 00       	nop
     228:	00 08       	sbc	r0, r0
     22a:	41 78       	andi	r20, 0x81	; 129
     22c:	d3 bb       	out	0x13, r29	; 19
     22e:	43 87       	std	Z+11, r20	; 0x0b
     230:	d1 13       	cpse	r29, r17
     232:	3d 19       	sub	r19, r13
     234:	0e 3c       	cpi	r16, 0xCE	; 206
     236:	c3 bd       	out	0x23, r28	; 35
     238:	42 82       	std	Z+2, r4	; 0x02
     23a:	ad 2b       	or	r26, r29
     23c:	3e 68       	ori	r19, 0x8E	; 142
     23e:	ec 82       	std	Y+4, r14	; 0x04
     240:	76 be       	out	0x36, r7	; 54
     242:	d9 8f       	std	Y+25, r29	; 0x19
     244:	e1 a9       	ldd	r30, Z+49	; 0x31
     246:	3e 4c       	sbci	r19, 0xCE	; 206
     248:	80 ef       	ldi	r24, 0xF0	; 240
     24a:	ff be       	out	0x3f, r15	; 63
     24c:	01 c4       	rjmp	.+2050   	; 0xa50 <__vector_18+0xe>
     24e:	ff 7f       	andi	r31, 0xFF	; 255
     250:	3f 00       	.word	0x003f	; ????
     252:	00 00       	nop
	...

00000256 <__trampolines_end>:
     256:	6e 61       	ori	r22, 0x1E	; 30
     258:	6e 00       	.word	0x006e	; ????

0000025a <__c.2332>:
     25a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     26a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     27a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     28a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     29a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2aa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2ba:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2ca:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2da:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2ea:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2fa:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     30a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     31a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     32a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     33a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     34a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000358 <__ctors_end>:
     358:	11 24       	eor	r1, r1
     35a:	1f be       	out	0x3f, r1	; 63
     35c:	cf ef       	ldi	r28, 0xFF	; 255
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df e3       	ldi	r29, 0x3F	; 63
     362:	de bf       	out	0x3e, r29	; 62
     364:	00 e0       	ldi	r16, 0x00	; 0
     366:	0c bf       	out	0x3c, r16	; 60
     368:	18 be       	out	0x38, r1	; 56
     36a:	19 be       	out	0x39, r1	; 57
     36c:	1a be       	out	0x3a, r1	; 58
     36e:	1b be       	out	0x3b, r1	; 59

00000370 <__do_copy_data>:
     370:	10 e2       	ldi	r17, 0x20	; 32
     372:	a0 e0       	ldi	r26, 0x00	; 0
     374:	b0 e2       	ldi	r27, 0x20	; 32
     376:	e6 e6       	ldi	r30, 0x66	; 102
     378:	ff e3       	ldi	r31, 0x3F	; 63
     37a:	00 e0       	ldi	r16, 0x00	; 0
     37c:	0b bf       	out	0x3b, r16	; 59
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x14>
     380:	07 90       	elpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 38       	cpi	r26, 0x82	; 130
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0x10>
     38a:	1b be       	out	0x3b, r1	; 59

0000038c <__do_clear_bss>:
     38c:	20 e2       	ldi	r18, 0x20	; 32
     38e:	a2 e8       	ldi	r26, 0x82	; 130
     390:	b0 e2       	ldi	r27, 0x20	; 32
     392:	01 c0       	rjmp	.+2      	; 0x396 <.do_clear_bss_start>

00000394 <.do_clear_bss_loop>:
     394:	1d 92       	st	X+, r1

00000396 <.do_clear_bss_start>:
     396:	a6 3f       	cpi	r26, 0xF6	; 246
     398:	b2 07       	cpc	r27, r18
     39a:	e1 f7       	brne	.-8      	; 0x394 <.do_clear_bss_loop>
     39c:	0e 94 b8 14 	call	0x2970	; 0x2970 <main>
     3a0:	0c 94 b1 1f 	jmp	0x3f62	; 0x3f62 <_exit>

000003a4 <__bad_interrupt>:
     3a4:	2d ce       	rjmp	.-934    	; 0x0 <__vectors>

000003a6 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	1f 92       	push	r1
     3ac:	1f 92       	push	r1
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     3b2:	8f ef       	ldi	r24, 0xFF	; 255
     3b4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     3b8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     3bc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     3c0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     3c4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     3c8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     3cc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3d0:	8f b7       	in	r24, 0x3f	; 63
     3d2:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     3d4:	f8 94       	cli
	return flags;
     3d6:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     3d8:	e0 e5       	ldi	r30, 0x50	; 80
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 81       	ld	r24, Z
     3de:	82 60       	ori	r24, 0x02	; 2
     3e0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3e2:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     3e4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     3e6:	81 ff       	sbrs	r24, 1
     3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     3ea:	61 e0       	ldi	r22, 0x01	; 1
     3ec:	80 e4       	ldi	r24, 0x40	; 64
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	38 d2       	rcall	.+1136   	; 0x862 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3f2:	8f b7       	in	r24, 0x3f	; 63
     3f4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     3f6:	f8 94       	cli
	return flags;
     3f8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     3fa:	e0 e5       	ldi	r30, 0x50	; 80
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 81       	ld	r24, Z
     400:	8e 7f       	andi	r24, 0xFE	; 254
     402:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     404:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	1f 92       	push	r1
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     41a:	9f b7       	in	r25, 0x3f	; 63
     41c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     41e:	f8 94       	cli
	return flags;
     420:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     422:	e8 2f       	mov	r30, r24
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	e0 59       	subi	r30, 0x90	; 144
     428:	ff 4f       	sbci	r31, 0xFF	; 255
     42a:	60 95       	com	r22
     42c:	80 81       	ld	r24, Z
     42e:	68 23       	and	r22, r24
     430:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     432:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     434:	0f 90       	pop	r0
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	1f 92       	push	r1
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     446:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <stdio_base>
     44a:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <stdio_base+0x1>
     44e:	e0 91 d2 20 	lds	r30, 0x20D2	; 0x8020d2 <ptr_get>
     452:	f0 91 d3 20 	lds	r31, 0x20D3	; 0x8020d3 <ptr_get+0x1>
     456:	be 01       	movw	r22, r28
     458:	6f 5f       	subi	r22, 0xFF	; 255
     45a:	7f 4f       	sbci	r23, 0xFF	; 255
     45c:	19 95       	eicall
	return c;
     45e:	89 81       	ldd	r24, Y+1	; 0x01
}
     460:	08 2e       	mov	r0, r24
     462:	00 0c       	add	r0, r0
     464:	99 0b       	sbc	r25, r25
     466:	0f 90       	pop	r0
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     46e:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     470:	80 91 d6 20 	lds	r24, 0x20D6	; 0x8020d6 <stdio_base>
     474:	90 91 d7 20 	lds	r25, 0x20D7	; 0x8020d7 <stdio_base+0x1>
     478:	e0 91 d4 20 	lds	r30, 0x20D4	; 0x8020d4 <ptr_put>
     47c:	f0 91 d5 20 	lds	r31, 0x20D5	; 0x8020d5 <ptr_put+0x1>
     480:	19 95       	eicall
     482:	99 23       	and	r25, r25
     484:	1c f0       	brlt	.+6      	; 0x48c <_write+0x1e>
		return -1;
	}
	return 1;
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     48c:	8f ef       	ldi	r24, 0xFF	; 255
     48e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     490:	08 95       	ret

00000492 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	0f 92       	push	r0
     49a:	11 24       	eor	r1, r1
     49c:	08 b6       	in	r0, 0x38	; 56
     49e:	0f 92       	push	r0
     4a0:	18 be       	out	0x38, r1	; 56
     4a2:	09 b6       	in	r0, 0x39	; 57
     4a4:	0f 92       	push	r0
     4a6:	19 be       	out	0x39, r1	; 57
     4a8:	0b b6       	in	r0, 0x3b	; 59
     4aa:	0f 92       	push	r0
     4ac:	1b be       	out	0x3b, r1	; 59
     4ae:	2f 93       	push	r18
     4b0:	3f 93       	push	r19
     4b2:	4f 93       	push	r20
     4b4:	5f 93       	push	r21
     4b6:	6f 93       	push	r22
     4b8:	7f 93       	push	r23
     4ba:	8f 93       	push	r24
     4bc:	9f 93       	push	r25
     4be:	af 93       	push	r26
     4c0:	bf 93       	push	r27
     4c2:	ef 93       	push	r30
     4c4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     4c6:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     4ca:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     4ce:	e0 91 da 20 	lds	r30, 0x20DA	; 0x8020da <adca_callback>
     4d2:	f0 91 db 20 	lds	r31, 0x20DB	; 0x8020db <adca_callback+0x1>
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	19 95       	eicall
}
     4de:	ff 91       	pop	r31
     4e0:	ef 91       	pop	r30
     4e2:	bf 91       	pop	r27
     4e4:	af 91       	pop	r26
     4e6:	9f 91       	pop	r25
     4e8:	8f 91       	pop	r24
     4ea:	7f 91       	pop	r23
     4ec:	6f 91       	pop	r22
     4ee:	5f 91       	pop	r21
     4f0:	4f 91       	pop	r20
     4f2:	3f 91       	pop	r19
     4f4:	2f 91       	pop	r18
     4f6:	0f 90       	pop	r0
     4f8:	0b be       	out	0x3b, r0	; 59
     4fa:	0f 90       	pop	r0
     4fc:	09 be       	out	0x39, r0	; 57
     4fe:	0f 90       	pop	r0
     500:	08 be       	out	0x38, r0	; 56
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	08 b6       	in	r0, 0x38	; 56
     518:	0f 92       	push	r0
     51a:	18 be       	out	0x38, r1	; 56
     51c:	09 b6       	in	r0, 0x39	; 57
     51e:	0f 92       	push	r0
     520:	19 be       	out	0x39, r1	; 57
     522:	0b b6       	in	r0, 0x3b	; 59
     524:	0f 92       	push	r0
     526:	1b be       	out	0x3b, r1	; 59
     528:	2f 93       	push	r18
     52a:	3f 93       	push	r19
     52c:	4f 93       	push	r20
     52e:	5f 93       	push	r21
     530:	6f 93       	push	r22
     532:	7f 93       	push	r23
     534:	8f 93       	push	r24
     536:	9f 93       	push	r25
     538:	af 93       	push	r26
     53a:	bf 93       	push	r27
     53c:	ef 93       	push	r30
     53e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     540:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     544:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     548:	e0 91 da 20 	lds	r30, 0x20DA	; 0x8020da <adca_callback>
     54c:	f0 91 db 20 	lds	r31, 0x20DB	; 0x8020db <adca_callback+0x1>
     550:	62 e0       	ldi	r22, 0x02	; 2
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	19 95       	eicall
}
     558:	ff 91       	pop	r31
     55a:	ef 91       	pop	r30
     55c:	bf 91       	pop	r27
     55e:	af 91       	pop	r26
     560:	9f 91       	pop	r25
     562:	8f 91       	pop	r24
     564:	7f 91       	pop	r23
     566:	6f 91       	pop	r22
     568:	5f 91       	pop	r21
     56a:	4f 91       	pop	r20
     56c:	3f 91       	pop	r19
     56e:	2f 91       	pop	r18
     570:	0f 90       	pop	r0
     572:	0b be       	out	0x3b, r0	; 59
     574:	0f 90       	pop	r0
     576:	09 be       	out	0x39, r0	; 57
     578:	0f 90       	pop	r0
     57a:	08 be       	out	0x38, r0	; 56
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
     580:	0f 90       	pop	r0
     582:	1f 90       	pop	r1
     584:	18 95       	reti

00000586 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     586:	1f 92       	push	r1
     588:	0f 92       	push	r0
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	0f 92       	push	r0
     58e:	11 24       	eor	r1, r1
     590:	08 b6       	in	r0, 0x38	; 56
     592:	0f 92       	push	r0
     594:	18 be       	out	0x38, r1	; 56
     596:	09 b6       	in	r0, 0x39	; 57
     598:	0f 92       	push	r0
     59a:	19 be       	out	0x39, r1	; 57
     59c:	0b b6       	in	r0, 0x3b	; 59
     59e:	0f 92       	push	r0
     5a0:	1b be       	out	0x3b, r1	; 59
     5a2:	2f 93       	push	r18
     5a4:	3f 93       	push	r19
     5a6:	4f 93       	push	r20
     5a8:	5f 93       	push	r21
     5aa:	6f 93       	push	r22
     5ac:	7f 93       	push	r23
     5ae:	8f 93       	push	r24
     5b0:	9f 93       	push	r25
     5b2:	af 93       	push	r26
     5b4:	bf 93       	push	r27
     5b6:	ef 93       	push	r30
     5b8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     5ba:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     5be:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     5c2:	e0 91 da 20 	lds	r30, 0x20DA	; 0x8020da <adca_callback>
     5c6:	f0 91 db 20 	lds	r31, 0x20DB	; 0x8020db <adca_callback+0x1>
     5ca:	64 e0       	ldi	r22, 0x04	; 4
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	19 95       	eicall
}
     5d2:	ff 91       	pop	r31
     5d4:	ef 91       	pop	r30
     5d6:	bf 91       	pop	r27
     5d8:	af 91       	pop	r26
     5da:	9f 91       	pop	r25
     5dc:	8f 91       	pop	r24
     5de:	7f 91       	pop	r23
     5e0:	6f 91       	pop	r22
     5e2:	5f 91       	pop	r21
     5e4:	4f 91       	pop	r20
     5e6:	3f 91       	pop	r19
     5e8:	2f 91       	pop	r18
     5ea:	0f 90       	pop	r0
     5ec:	0b be       	out	0x3b, r0	; 59
     5ee:	0f 90       	pop	r0
     5f0:	09 be       	out	0x39, r0	; 57
     5f2:	0f 90       	pop	r0
     5f4:	08 be       	out	0x38, r0	; 56
     5f6:	0f 90       	pop	r0
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	0f 90       	pop	r0
     5fc:	1f 90       	pop	r1
     5fe:	18 95       	reti

00000600 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     600:	1f 92       	push	r1
     602:	0f 92       	push	r0
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	0f 92       	push	r0
     608:	11 24       	eor	r1, r1
     60a:	08 b6       	in	r0, 0x38	; 56
     60c:	0f 92       	push	r0
     60e:	18 be       	out	0x38, r1	; 56
     610:	09 b6       	in	r0, 0x39	; 57
     612:	0f 92       	push	r0
     614:	19 be       	out	0x39, r1	; 57
     616:	0b b6       	in	r0, 0x3b	; 59
     618:	0f 92       	push	r0
     61a:	1b be       	out	0x3b, r1	; 59
     61c:	2f 93       	push	r18
     61e:	3f 93       	push	r19
     620:	4f 93       	push	r20
     622:	5f 93       	push	r21
     624:	6f 93       	push	r22
     626:	7f 93       	push	r23
     628:	8f 93       	push	r24
     62a:	9f 93       	push	r25
     62c:	af 93       	push	r26
     62e:	bf 93       	push	r27
     630:	ef 93       	push	r30
     632:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     634:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     638:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     63c:	e0 91 da 20 	lds	r30, 0x20DA	; 0x8020da <adca_callback>
     640:	f0 91 db 20 	lds	r31, 0x20DB	; 0x8020db <adca_callback+0x1>
     644:	68 e0       	ldi	r22, 0x08	; 8
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	19 95       	eicall
}
     64c:	ff 91       	pop	r31
     64e:	ef 91       	pop	r30
     650:	bf 91       	pop	r27
     652:	af 91       	pop	r26
     654:	9f 91       	pop	r25
     656:	8f 91       	pop	r24
     658:	7f 91       	pop	r23
     65a:	6f 91       	pop	r22
     65c:	5f 91       	pop	r21
     65e:	4f 91       	pop	r20
     660:	3f 91       	pop	r19
     662:	2f 91       	pop	r18
     664:	0f 90       	pop	r0
     666:	0b be       	out	0x3b, r0	; 59
     668:	0f 90       	pop	r0
     66a:	09 be       	out	0x39, r0	; 57
     66c:	0f 90       	pop	r0
     66e:	08 be       	out	0x38, r0	; 56
     670:	0f 90       	pop	r0
     672:	0f be       	out	0x3f, r0	; 63
     674:	0f 90       	pop	r0
     676:	1f 90       	pop	r1
     678:	18 95       	reti

0000067a <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     67a:	1f 92       	push	r1
     67c:	0f 92       	push	r0
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	0f 92       	push	r0
     682:	11 24       	eor	r1, r1
     684:	08 b6       	in	r0, 0x38	; 56
     686:	0f 92       	push	r0
     688:	18 be       	out	0x38, r1	; 56
     68a:	09 b6       	in	r0, 0x39	; 57
     68c:	0f 92       	push	r0
     68e:	19 be       	out	0x39, r1	; 57
     690:	0b b6       	in	r0, 0x3b	; 59
     692:	0f 92       	push	r0
     694:	1b be       	out	0x3b, r1	; 59
     696:	2f 93       	push	r18
     698:	3f 93       	push	r19
     69a:	4f 93       	push	r20
     69c:	5f 93       	push	r21
     69e:	6f 93       	push	r22
     6a0:	7f 93       	push	r23
     6a2:	8f 93       	push	r24
     6a4:	9f 93       	push	r25
     6a6:	af 93       	push	r26
     6a8:	bf 93       	push	r27
     6aa:	ef 93       	push	r30
     6ac:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     6ae:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     6b2:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     6b6:	e0 91 d8 20 	lds	r30, 0x20D8	; 0x8020d8 <adcb_callback>
     6ba:	f0 91 d9 20 	lds	r31, 0x20D9	; 0x8020d9 <adcb_callback+0x1>
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	80 e4       	ldi	r24, 0x40	; 64
     6c2:	92 e0       	ldi	r25, 0x02	; 2
     6c4:	19 95       	eicall
}
     6c6:	ff 91       	pop	r31
     6c8:	ef 91       	pop	r30
     6ca:	bf 91       	pop	r27
     6cc:	af 91       	pop	r26
     6ce:	9f 91       	pop	r25
     6d0:	8f 91       	pop	r24
     6d2:	7f 91       	pop	r23
     6d4:	6f 91       	pop	r22
     6d6:	5f 91       	pop	r21
     6d8:	4f 91       	pop	r20
     6da:	3f 91       	pop	r19
     6dc:	2f 91       	pop	r18
     6de:	0f 90       	pop	r0
     6e0:	0b be       	out	0x3b, r0	; 59
     6e2:	0f 90       	pop	r0
     6e4:	09 be       	out	0x39, r0	; 57
     6e6:	0f 90       	pop	r0
     6e8:	08 be       	out	0x38, r0	; 56
     6ea:	0f 90       	pop	r0
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	0f 90       	pop	r0
     6f0:	1f 90       	pop	r1
     6f2:	18 95       	reti

000006f4 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	0f 92       	push	r0
     6fc:	11 24       	eor	r1, r1
     6fe:	08 b6       	in	r0, 0x38	; 56
     700:	0f 92       	push	r0
     702:	18 be       	out	0x38, r1	; 56
     704:	09 b6       	in	r0, 0x39	; 57
     706:	0f 92       	push	r0
     708:	19 be       	out	0x39, r1	; 57
     70a:	0b b6       	in	r0, 0x3b	; 59
     70c:	0f 92       	push	r0
     70e:	1b be       	out	0x3b, r1	; 59
     710:	2f 93       	push	r18
     712:	3f 93       	push	r19
     714:	4f 93       	push	r20
     716:	5f 93       	push	r21
     718:	6f 93       	push	r22
     71a:	7f 93       	push	r23
     71c:	8f 93       	push	r24
     71e:	9f 93       	push	r25
     720:	af 93       	push	r26
     722:	bf 93       	push	r27
     724:	ef 93       	push	r30
     726:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     728:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     72c:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     730:	e0 91 d8 20 	lds	r30, 0x20D8	; 0x8020d8 <adcb_callback>
     734:	f0 91 d9 20 	lds	r31, 0x20D9	; 0x8020d9 <adcb_callback+0x1>
     738:	62 e0       	ldi	r22, 0x02	; 2
     73a:	80 e4       	ldi	r24, 0x40	; 64
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	19 95       	eicall
}
     740:	ff 91       	pop	r31
     742:	ef 91       	pop	r30
     744:	bf 91       	pop	r27
     746:	af 91       	pop	r26
     748:	9f 91       	pop	r25
     74a:	8f 91       	pop	r24
     74c:	7f 91       	pop	r23
     74e:	6f 91       	pop	r22
     750:	5f 91       	pop	r21
     752:	4f 91       	pop	r20
     754:	3f 91       	pop	r19
     756:	2f 91       	pop	r18
     758:	0f 90       	pop	r0
     75a:	0b be       	out	0x3b, r0	; 59
     75c:	0f 90       	pop	r0
     75e:	09 be       	out	0x39, r0	; 57
     760:	0f 90       	pop	r0
     762:	08 be       	out	0x38, r0	; 56
     764:	0f 90       	pop	r0
     766:	0f be       	out	0x3f, r0	; 63
     768:	0f 90       	pop	r0
     76a:	1f 90       	pop	r1
     76c:	18 95       	reti

0000076e <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     76e:	1f 92       	push	r1
     770:	0f 92       	push	r0
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	0f 92       	push	r0
     776:	11 24       	eor	r1, r1
     778:	08 b6       	in	r0, 0x38	; 56
     77a:	0f 92       	push	r0
     77c:	18 be       	out	0x38, r1	; 56
     77e:	09 b6       	in	r0, 0x39	; 57
     780:	0f 92       	push	r0
     782:	19 be       	out	0x39, r1	; 57
     784:	0b b6       	in	r0, 0x3b	; 59
     786:	0f 92       	push	r0
     788:	1b be       	out	0x3b, r1	; 59
     78a:	2f 93       	push	r18
     78c:	3f 93       	push	r19
     78e:	4f 93       	push	r20
     790:	5f 93       	push	r21
     792:	6f 93       	push	r22
     794:	7f 93       	push	r23
     796:	8f 93       	push	r24
     798:	9f 93       	push	r25
     79a:	af 93       	push	r26
     79c:	bf 93       	push	r27
     79e:	ef 93       	push	r30
     7a0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     7a2:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     7a6:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     7aa:	e0 91 d8 20 	lds	r30, 0x20D8	; 0x8020d8 <adcb_callback>
     7ae:	f0 91 d9 20 	lds	r31, 0x20D9	; 0x8020d9 <adcb_callback+0x1>
     7b2:	64 e0       	ldi	r22, 0x04	; 4
     7b4:	80 e4       	ldi	r24, 0x40	; 64
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	19 95       	eicall
}
     7ba:	ff 91       	pop	r31
     7bc:	ef 91       	pop	r30
     7be:	bf 91       	pop	r27
     7c0:	af 91       	pop	r26
     7c2:	9f 91       	pop	r25
     7c4:	8f 91       	pop	r24
     7c6:	7f 91       	pop	r23
     7c8:	6f 91       	pop	r22
     7ca:	5f 91       	pop	r21
     7cc:	4f 91       	pop	r20
     7ce:	3f 91       	pop	r19
     7d0:	2f 91       	pop	r18
     7d2:	0f 90       	pop	r0
     7d4:	0b be       	out	0x3b, r0	; 59
     7d6:	0f 90       	pop	r0
     7d8:	09 be       	out	0x39, r0	; 57
     7da:	0f 90       	pop	r0
     7dc:	08 be       	out	0x38, r0	; 56
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     7e8:	1f 92       	push	r1
     7ea:	0f 92       	push	r0
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	0f 92       	push	r0
     7f0:	11 24       	eor	r1, r1
     7f2:	08 b6       	in	r0, 0x38	; 56
     7f4:	0f 92       	push	r0
     7f6:	18 be       	out	0x38, r1	; 56
     7f8:	09 b6       	in	r0, 0x39	; 57
     7fa:	0f 92       	push	r0
     7fc:	19 be       	out	0x39, r1	; 57
     7fe:	0b b6       	in	r0, 0x3b	; 59
     800:	0f 92       	push	r0
     802:	1b be       	out	0x3b, r1	; 59
     804:	2f 93       	push	r18
     806:	3f 93       	push	r19
     808:	4f 93       	push	r20
     80a:	5f 93       	push	r21
     80c:	6f 93       	push	r22
     80e:	7f 93       	push	r23
     810:	8f 93       	push	r24
     812:	9f 93       	push	r25
     814:	af 93       	push	r26
     816:	bf 93       	push	r27
     818:	ef 93       	push	r30
     81a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     81c:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     820:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     824:	e0 91 d8 20 	lds	r30, 0x20D8	; 0x8020d8 <adcb_callback>
     828:	f0 91 d9 20 	lds	r31, 0x20D9	; 0x8020d9 <adcb_callback+0x1>
     82c:	68 e0       	ldi	r22, 0x08	; 8
     82e:	80 e4       	ldi	r24, 0x40	; 64
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	19 95       	eicall
}
     834:	ff 91       	pop	r31
     836:	ef 91       	pop	r30
     838:	bf 91       	pop	r27
     83a:	af 91       	pop	r26
     83c:	9f 91       	pop	r25
     83e:	8f 91       	pop	r24
     840:	7f 91       	pop	r23
     842:	6f 91       	pop	r22
     844:	5f 91       	pop	r21
     846:	4f 91       	pop	r20
     848:	3f 91       	pop	r19
     84a:	2f 91       	pop	r18
     84c:	0f 90       	pop	r0
     84e:	0b be       	out	0x3b, r0	; 59
     850:	0f 90       	pop	r0
     852:	09 be       	out	0x39, r0	; 57
     854:	0f 90       	pop	r0
     856:	08 be       	out	0x38, r0	; 56
     858:	0f 90       	pop	r0
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	0f 90       	pop	r0
     85e:	1f 90       	pop	r1
     860:	18 95       	reti

00000862 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     862:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     864:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     866:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     868:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     86a:	60 83       	st	Z, r22
	ret                             // Return to caller
     86c:	08 95       	ret

0000086e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     86e:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     872:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     874:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     876:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     87a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     87c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     880:	08 95       	ret

00000882 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     882:	1f 92       	push	r1
     884:	0f 92       	push	r0
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	0f 92       	push	r0
     88a:	11 24       	eor	r1, r1
     88c:	08 b6       	in	r0, 0x38	; 56
     88e:	0f 92       	push	r0
     890:	18 be       	out	0x38, r1	; 56
     892:	09 b6       	in	r0, 0x39	; 57
     894:	0f 92       	push	r0
     896:	19 be       	out	0x39, r1	; 57
     898:	0b b6       	in	r0, 0x3b	; 59
     89a:	0f 92       	push	r0
     89c:	1b be       	out	0x3b, r1	; 59
     89e:	2f 93       	push	r18
     8a0:	3f 93       	push	r19
     8a2:	4f 93       	push	r20
     8a4:	5f 93       	push	r21
     8a6:	6f 93       	push	r22
     8a8:	7f 93       	push	r23
     8aa:	8f 93       	push	r24
     8ac:	9f 93       	push	r25
     8ae:	af 93       	push	r26
     8b0:	bf 93       	push	r27
     8b2:	ef 93       	push	r30
     8b4:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     8b6:	e0 91 d0 20 	lds	r30, 0x20D0	; 0x8020d0 <tc_tcc0_ovf_callback>
     8ba:	f0 91 d1 20 	lds	r31, 0x20D1	; 0x8020d1 <tc_tcc0_ovf_callback+0x1>
     8be:	30 97       	sbiw	r30, 0x00	; 0
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     8c2:	19 95       	eicall
	}
}
     8c4:	ff 91       	pop	r31
     8c6:	ef 91       	pop	r30
     8c8:	bf 91       	pop	r27
     8ca:	af 91       	pop	r26
     8cc:	9f 91       	pop	r25
     8ce:	8f 91       	pop	r24
     8d0:	7f 91       	pop	r23
     8d2:	6f 91       	pop	r22
     8d4:	5f 91       	pop	r21
     8d6:	4f 91       	pop	r20
     8d8:	3f 91       	pop	r19
     8da:	2f 91       	pop	r18
     8dc:	0f 90       	pop	r0
     8de:	0b be       	out	0x3b, r0	; 59
     8e0:	0f 90       	pop	r0
     8e2:	09 be       	out	0x39, r0	; 57
     8e4:	0f 90       	pop	r0
     8e6:	08 be       	out	0x38, r0	; 56
     8e8:	0f 90       	pop	r0
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	0f 90       	pop	r0
     8ee:	1f 90       	pop	r1
     8f0:	18 95       	reti

000008f2 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     8f2:	1f 92       	push	r1
     8f4:	0f 92       	push	r0
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	0f 92       	push	r0
     8fa:	11 24       	eor	r1, r1
     8fc:	08 b6       	in	r0, 0x38	; 56
     8fe:	0f 92       	push	r0
     900:	18 be       	out	0x38, r1	; 56
     902:	09 b6       	in	r0, 0x39	; 57
     904:	0f 92       	push	r0
     906:	19 be       	out	0x39, r1	; 57
     908:	0b b6       	in	r0, 0x3b	; 59
     90a:	0f 92       	push	r0
     90c:	1b be       	out	0x3b, r1	; 59
     90e:	2f 93       	push	r18
     910:	3f 93       	push	r19
     912:	4f 93       	push	r20
     914:	5f 93       	push	r21
     916:	6f 93       	push	r22
     918:	7f 93       	push	r23
     91a:	8f 93       	push	r24
     91c:	9f 93       	push	r25
     91e:	af 93       	push	r26
     920:	bf 93       	push	r27
     922:	ef 93       	push	r30
     924:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     926:	e0 91 ce 20 	lds	r30, 0x20CE	; 0x8020ce <tc_tcc0_err_callback>
     92a:	f0 91 cf 20 	lds	r31, 0x20CF	; 0x8020cf <tc_tcc0_err_callback+0x1>
     92e:	30 97       	sbiw	r30, 0x00	; 0
     930:	09 f0       	breq	.+2      	; 0x934 <__vector_15+0x42>
		tc_tcc0_err_callback();
     932:	19 95       	eicall
	}
}
     934:	ff 91       	pop	r31
     936:	ef 91       	pop	r30
     938:	bf 91       	pop	r27
     93a:	af 91       	pop	r26
     93c:	9f 91       	pop	r25
     93e:	8f 91       	pop	r24
     940:	7f 91       	pop	r23
     942:	6f 91       	pop	r22
     944:	5f 91       	pop	r21
     946:	4f 91       	pop	r20
     948:	3f 91       	pop	r19
     94a:	2f 91       	pop	r18
     94c:	0f 90       	pop	r0
     94e:	0b be       	out	0x3b, r0	; 59
     950:	0f 90       	pop	r0
     952:	09 be       	out	0x39, r0	; 57
     954:	0f 90       	pop	r0
     956:	08 be       	out	0x38, r0	; 56
     958:	0f 90       	pop	r0
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	0f 90       	pop	r0
     95e:	1f 90       	pop	r1
     960:	18 95       	reti

00000962 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     962:	1f 92       	push	r1
     964:	0f 92       	push	r0
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	0f 92       	push	r0
     96a:	11 24       	eor	r1, r1
     96c:	08 b6       	in	r0, 0x38	; 56
     96e:	0f 92       	push	r0
     970:	18 be       	out	0x38, r1	; 56
     972:	09 b6       	in	r0, 0x39	; 57
     974:	0f 92       	push	r0
     976:	19 be       	out	0x39, r1	; 57
     978:	0b b6       	in	r0, 0x3b	; 59
     97a:	0f 92       	push	r0
     97c:	1b be       	out	0x3b, r1	; 59
     97e:	2f 93       	push	r18
     980:	3f 93       	push	r19
     982:	4f 93       	push	r20
     984:	5f 93       	push	r21
     986:	6f 93       	push	r22
     988:	7f 93       	push	r23
     98a:	8f 93       	push	r24
     98c:	9f 93       	push	r25
     98e:	af 93       	push	r26
     990:	bf 93       	push	r27
     992:	ef 93       	push	r30
     994:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     996:	e0 91 cc 20 	lds	r30, 0x20CC	; 0x8020cc <tc_tcc0_cca_callback>
     99a:	f0 91 cd 20 	lds	r31, 0x20CD	; 0x8020cd <tc_tcc0_cca_callback+0x1>
     99e:	30 97       	sbiw	r30, 0x00	; 0
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     9a2:	19 95       	eicall
	}
}
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	bf 91       	pop	r27
     9aa:	af 91       	pop	r26
     9ac:	9f 91       	pop	r25
     9ae:	8f 91       	pop	r24
     9b0:	7f 91       	pop	r23
     9b2:	6f 91       	pop	r22
     9b4:	5f 91       	pop	r21
     9b6:	4f 91       	pop	r20
     9b8:	3f 91       	pop	r19
     9ba:	2f 91       	pop	r18
     9bc:	0f 90       	pop	r0
     9be:	0b be       	out	0x3b, r0	; 59
     9c0:	0f 90       	pop	r0
     9c2:	09 be       	out	0x39, r0	; 57
     9c4:	0f 90       	pop	r0
     9c6:	08 be       	out	0x38, r0	; 56
     9c8:	0f 90       	pop	r0
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	0f 90       	pop	r0
     9ce:	1f 90       	pop	r1
     9d0:	18 95       	reti

000009d2 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     9d2:	1f 92       	push	r1
     9d4:	0f 92       	push	r0
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	0f 92       	push	r0
     9da:	11 24       	eor	r1, r1
     9dc:	08 b6       	in	r0, 0x38	; 56
     9de:	0f 92       	push	r0
     9e0:	18 be       	out	0x38, r1	; 56
     9e2:	09 b6       	in	r0, 0x39	; 57
     9e4:	0f 92       	push	r0
     9e6:	19 be       	out	0x39, r1	; 57
     9e8:	0b b6       	in	r0, 0x3b	; 59
     9ea:	0f 92       	push	r0
     9ec:	1b be       	out	0x3b, r1	; 59
     9ee:	2f 93       	push	r18
     9f0:	3f 93       	push	r19
     9f2:	4f 93       	push	r20
     9f4:	5f 93       	push	r21
     9f6:	6f 93       	push	r22
     9f8:	7f 93       	push	r23
     9fa:	8f 93       	push	r24
     9fc:	9f 93       	push	r25
     9fe:	af 93       	push	r26
     a00:	bf 93       	push	r27
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     a06:	e0 91 ca 20 	lds	r30, 0x20CA	; 0x8020ca <tc_tcc0_ccb_callback>
     a0a:	f0 91 cb 20 	lds	r31, 0x20CB	; 0x8020cb <tc_tcc0_ccb_callback+0x1>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	09 f0       	breq	.+2      	; 0xa14 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     a12:	19 95       	eicall
	}
}
     a14:	ff 91       	pop	r31
     a16:	ef 91       	pop	r30
     a18:	bf 91       	pop	r27
     a1a:	af 91       	pop	r26
     a1c:	9f 91       	pop	r25
     a1e:	8f 91       	pop	r24
     a20:	7f 91       	pop	r23
     a22:	6f 91       	pop	r22
     a24:	5f 91       	pop	r21
     a26:	4f 91       	pop	r20
     a28:	3f 91       	pop	r19
     a2a:	2f 91       	pop	r18
     a2c:	0f 90       	pop	r0
     a2e:	0b be       	out	0x3b, r0	; 59
     a30:	0f 90       	pop	r0
     a32:	09 be       	out	0x39, r0	; 57
     a34:	0f 90       	pop	r0
     a36:	08 be       	out	0x38, r0	; 56
     a38:	0f 90       	pop	r0
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	0f 90       	pop	r0
     a3e:	1f 90       	pop	r1
     a40:	18 95       	reti

00000a42 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     a42:	1f 92       	push	r1
     a44:	0f 92       	push	r0
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	0f 92       	push	r0
     a4a:	11 24       	eor	r1, r1
     a4c:	08 b6       	in	r0, 0x38	; 56
     a4e:	0f 92       	push	r0
     a50:	18 be       	out	0x38, r1	; 56
     a52:	09 b6       	in	r0, 0x39	; 57
     a54:	0f 92       	push	r0
     a56:	19 be       	out	0x39, r1	; 57
     a58:	0b b6       	in	r0, 0x3b	; 59
     a5a:	0f 92       	push	r0
     a5c:	1b be       	out	0x3b, r1	; 59
     a5e:	2f 93       	push	r18
     a60:	3f 93       	push	r19
     a62:	4f 93       	push	r20
     a64:	5f 93       	push	r21
     a66:	6f 93       	push	r22
     a68:	7f 93       	push	r23
     a6a:	8f 93       	push	r24
     a6c:	9f 93       	push	r25
     a6e:	af 93       	push	r26
     a70:	bf 93       	push	r27
     a72:	ef 93       	push	r30
     a74:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     a76:	e0 91 c8 20 	lds	r30, 0x20C8	; 0x8020c8 <tc_tcc0_ccc_callback>
     a7a:	f0 91 c9 20 	lds	r31, 0x20C9	; 0x8020c9 <tc_tcc0_ccc_callback+0x1>
     a7e:	30 97       	sbiw	r30, 0x00	; 0
     a80:	09 f0       	breq	.+2      	; 0xa84 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     a82:	19 95       	eicall
	}
}
     a84:	ff 91       	pop	r31
     a86:	ef 91       	pop	r30
     a88:	bf 91       	pop	r27
     a8a:	af 91       	pop	r26
     a8c:	9f 91       	pop	r25
     a8e:	8f 91       	pop	r24
     a90:	7f 91       	pop	r23
     a92:	6f 91       	pop	r22
     a94:	5f 91       	pop	r21
     a96:	4f 91       	pop	r20
     a98:	3f 91       	pop	r19
     a9a:	2f 91       	pop	r18
     a9c:	0f 90       	pop	r0
     a9e:	0b be       	out	0x3b, r0	; 59
     aa0:	0f 90       	pop	r0
     aa2:	09 be       	out	0x39, r0	; 57
     aa4:	0f 90       	pop	r0
     aa6:	08 be       	out	0x38, r0	; 56
     aa8:	0f 90       	pop	r0
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	0f 90       	pop	r0
     aae:	1f 90       	pop	r1
     ab0:	18 95       	reti

00000ab2 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     ab2:	1f 92       	push	r1
     ab4:	0f 92       	push	r0
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	0f 92       	push	r0
     aba:	11 24       	eor	r1, r1
     abc:	08 b6       	in	r0, 0x38	; 56
     abe:	0f 92       	push	r0
     ac0:	18 be       	out	0x38, r1	; 56
     ac2:	09 b6       	in	r0, 0x39	; 57
     ac4:	0f 92       	push	r0
     ac6:	19 be       	out	0x39, r1	; 57
     ac8:	0b b6       	in	r0, 0x3b	; 59
     aca:	0f 92       	push	r0
     acc:	1b be       	out	0x3b, r1	; 59
     ace:	2f 93       	push	r18
     ad0:	3f 93       	push	r19
     ad2:	4f 93       	push	r20
     ad4:	5f 93       	push	r21
     ad6:	6f 93       	push	r22
     ad8:	7f 93       	push	r23
     ada:	8f 93       	push	r24
     adc:	9f 93       	push	r25
     ade:	af 93       	push	r26
     ae0:	bf 93       	push	r27
     ae2:	ef 93       	push	r30
     ae4:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     ae6:	e0 91 c6 20 	lds	r30, 0x20C6	; 0x8020c6 <tc_tcc0_ccd_callback>
     aea:	f0 91 c7 20 	lds	r31, 0x20C7	; 0x8020c7 <tc_tcc0_ccd_callback+0x1>
     aee:	30 97       	sbiw	r30, 0x00	; 0
     af0:	09 f0       	breq	.+2      	; 0xaf4 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     af2:	19 95       	eicall
	}
}
     af4:	ff 91       	pop	r31
     af6:	ef 91       	pop	r30
     af8:	bf 91       	pop	r27
     afa:	af 91       	pop	r26
     afc:	9f 91       	pop	r25
     afe:	8f 91       	pop	r24
     b00:	7f 91       	pop	r23
     b02:	6f 91       	pop	r22
     b04:	5f 91       	pop	r21
     b06:	4f 91       	pop	r20
     b08:	3f 91       	pop	r19
     b0a:	2f 91       	pop	r18
     b0c:	0f 90       	pop	r0
     b0e:	0b be       	out	0x3b, r0	; 59
     b10:	0f 90       	pop	r0
     b12:	09 be       	out	0x39, r0	; 57
     b14:	0f 90       	pop	r0
     b16:	08 be       	out	0x38, r0	; 56
     b18:	0f 90       	pop	r0
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	0f 90       	pop	r0
     b1e:	1f 90       	pop	r1
     b20:	18 95       	reti

00000b22 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     b22:	1f 92       	push	r1
     b24:	0f 92       	push	r0
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	0f 92       	push	r0
     b2a:	11 24       	eor	r1, r1
     b2c:	08 b6       	in	r0, 0x38	; 56
     b2e:	0f 92       	push	r0
     b30:	18 be       	out	0x38, r1	; 56
     b32:	09 b6       	in	r0, 0x39	; 57
     b34:	0f 92       	push	r0
     b36:	19 be       	out	0x39, r1	; 57
     b38:	0b b6       	in	r0, 0x3b	; 59
     b3a:	0f 92       	push	r0
     b3c:	1b be       	out	0x3b, r1	; 59
     b3e:	2f 93       	push	r18
     b40:	3f 93       	push	r19
     b42:	4f 93       	push	r20
     b44:	5f 93       	push	r21
     b46:	6f 93       	push	r22
     b48:	7f 93       	push	r23
     b4a:	8f 93       	push	r24
     b4c:	9f 93       	push	r25
     b4e:	af 93       	push	r26
     b50:	bf 93       	push	r27
     b52:	ef 93       	push	r30
     b54:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     b56:	e0 91 c4 20 	lds	r30, 0x20C4	; 0x8020c4 <tc_tcc1_ovf_callback>
     b5a:	f0 91 c5 20 	lds	r31, 0x20C5	; 0x8020c5 <tc_tcc1_ovf_callback+0x1>
     b5e:	30 97       	sbiw	r30, 0x00	; 0
     b60:	09 f0       	breq	.+2      	; 0xb64 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     b62:	19 95       	eicall
	}
}
     b64:	ff 91       	pop	r31
     b66:	ef 91       	pop	r30
     b68:	bf 91       	pop	r27
     b6a:	af 91       	pop	r26
     b6c:	9f 91       	pop	r25
     b6e:	8f 91       	pop	r24
     b70:	7f 91       	pop	r23
     b72:	6f 91       	pop	r22
     b74:	5f 91       	pop	r21
     b76:	4f 91       	pop	r20
     b78:	3f 91       	pop	r19
     b7a:	2f 91       	pop	r18
     b7c:	0f 90       	pop	r0
     b7e:	0b be       	out	0x3b, r0	; 59
     b80:	0f 90       	pop	r0
     b82:	09 be       	out	0x39, r0	; 57
     b84:	0f 90       	pop	r0
     b86:	08 be       	out	0x38, r0	; 56
     b88:	0f 90       	pop	r0
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	0f 90       	pop	r0
     b8e:	1f 90       	pop	r1
     b90:	18 95       	reti

00000b92 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     b92:	1f 92       	push	r1
     b94:	0f 92       	push	r0
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	0f 92       	push	r0
     b9a:	11 24       	eor	r1, r1
     b9c:	08 b6       	in	r0, 0x38	; 56
     b9e:	0f 92       	push	r0
     ba0:	18 be       	out	0x38, r1	; 56
     ba2:	09 b6       	in	r0, 0x39	; 57
     ba4:	0f 92       	push	r0
     ba6:	19 be       	out	0x39, r1	; 57
     ba8:	0b b6       	in	r0, 0x3b	; 59
     baa:	0f 92       	push	r0
     bac:	1b be       	out	0x3b, r1	; 59
     bae:	2f 93       	push	r18
     bb0:	3f 93       	push	r19
     bb2:	4f 93       	push	r20
     bb4:	5f 93       	push	r21
     bb6:	6f 93       	push	r22
     bb8:	7f 93       	push	r23
     bba:	8f 93       	push	r24
     bbc:	9f 93       	push	r25
     bbe:	af 93       	push	r26
     bc0:	bf 93       	push	r27
     bc2:	ef 93       	push	r30
     bc4:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     bc6:	e0 91 c2 20 	lds	r30, 0x20C2	; 0x8020c2 <tc_tcc1_err_callback>
     bca:	f0 91 c3 20 	lds	r31, 0x20C3	; 0x8020c3 <tc_tcc1_err_callback+0x1>
     bce:	30 97       	sbiw	r30, 0x00	; 0
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <__vector_21+0x42>
		tc_tcc1_err_callback();
     bd2:	19 95       	eicall
	}
}
     bd4:	ff 91       	pop	r31
     bd6:	ef 91       	pop	r30
     bd8:	bf 91       	pop	r27
     bda:	af 91       	pop	r26
     bdc:	9f 91       	pop	r25
     bde:	8f 91       	pop	r24
     be0:	7f 91       	pop	r23
     be2:	6f 91       	pop	r22
     be4:	5f 91       	pop	r21
     be6:	4f 91       	pop	r20
     be8:	3f 91       	pop	r19
     bea:	2f 91       	pop	r18
     bec:	0f 90       	pop	r0
     bee:	0b be       	out	0x3b, r0	; 59
     bf0:	0f 90       	pop	r0
     bf2:	09 be       	out	0x39, r0	; 57
     bf4:	0f 90       	pop	r0
     bf6:	08 be       	out	0x38, r0	; 56
     bf8:	0f 90       	pop	r0
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	0f 90       	pop	r0
     bfe:	1f 90       	pop	r1
     c00:	18 95       	reti

00000c02 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	08 b6       	in	r0, 0x38	; 56
     c0e:	0f 92       	push	r0
     c10:	18 be       	out	0x38, r1	; 56
     c12:	09 b6       	in	r0, 0x39	; 57
     c14:	0f 92       	push	r0
     c16:	19 be       	out	0x39, r1	; 57
     c18:	0b b6       	in	r0, 0x3b	; 59
     c1a:	0f 92       	push	r0
     c1c:	1b be       	out	0x3b, r1	; 59
     c1e:	2f 93       	push	r18
     c20:	3f 93       	push	r19
     c22:	4f 93       	push	r20
     c24:	5f 93       	push	r21
     c26:	6f 93       	push	r22
     c28:	7f 93       	push	r23
     c2a:	8f 93       	push	r24
     c2c:	9f 93       	push	r25
     c2e:	af 93       	push	r26
     c30:	bf 93       	push	r27
     c32:	ef 93       	push	r30
     c34:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     c36:	e0 91 c0 20 	lds	r30, 0x20C0	; 0x8020c0 <tc_tcc1_cca_callback>
     c3a:	f0 91 c1 20 	lds	r31, 0x20C1	; 0x8020c1 <tc_tcc1_cca_callback+0x1>
     c3e:	30 97       	sbiw	r30, 0x00	; 0
     c40:	09 f0       	breq	.+2      	; 0xc44 <__vector_22+0x42>
		tc_tcc1_cca_callback();
     c42:	19 95       	eicall
	}
}
     c44:	ff 91       	pop	r31
     c46:	ef 91       	pop	r30
     c48:	bf 91       	pop	r27
     c4a:	af 91       	pop	r26
     c4c:	9f 91       	pop	r25
     c4e:	8f 91       	pop	r24
     c50:	7f 91       	pop	r23
     c52:	6f 91       	pop	r22
     c54:	5f 91       	pop	r21
     c56:	4f 91       	pop	r20
     c58:	3f 91       	pop	r19
     c5a:	2f 91       	pop	r18
     c5c:	0f 90       	pop	r0
     c5e:	0b be       	out	0x3b, r0	; 59
     c60:	0f 90       	pop	r0
     c62:	09 be       	out	0x39, r0	; 57
     c64:	0f 90       	pop	r0
     c66:	08 be       	out	0x38, r0	; 56
     c68:	0f 90       	pop	r0
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	0f 90       	pop	r0
     c6e:	1f 90       	pop	r1
     c70:	18 95       	reti

00000c72 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     c72:	1f 92       	push	r1
     c74:	0f 92       	push	r0
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	0f 92       	push	r0
     c7a:	11 24       	eor	r1, r1
     c7c:	08 b6       	in	r0, 0x38	; 56
     c7e:	0f 92       	push	r0
     c80:	18 be       	out	0x38, r1	; 56
     c82:	09 b6       	in	r0, 0x39	; 57
     c84:	0f 92       	push	r0
     c86:	19 be       	out	0x39, r1	; 57
     c88:	0b b6       	in	r0, 0x3b	; 59
     c8a:	0f 92       	push	r0
     c8c:	1b be       	out	0x3b, r1	; 59
     c8e:	2f 93       	push	r18
     c90:	3f 93       	push	r19
     c92:	4f 93       	push	r20
     c94:	5f 93       	push	r21
     c96:	6f 93       	push	r22
     c98:	7f 93       	push	r23
     c9a:	8f 93       	push	r24
     c9c:	9f 93       	push	r25
     c9e:	af 93       	push	r26
     ca0:	bf 93       	push	r27
     ca2:	ef 93       	push	r30
     ca4:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     ca6:	e0 91 be 20 	lds	r30, 0x20BE	; 0x8020be <tc_tcc1_ccb_callback>
     caa:	f0 91 bf 20 	lds	r31, 0x20BF	; 0x8020bf <tc_tcc1_ccb_callback+0x1>
     cae:	30 97       	sbiw	r30, 0x00	; 0
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     cb2:	19 95       	eicall
	}
}
     cb4:	ff 91       	pop	r31
     cb6:	ef 91       	pop	r30
     cb8:	bf 91       	pop	r27
     cba:	af 91       	pop	r26
     cbc:	9f 91       	pop	r25
     cbe:	8f 91       	pop	r24
     cc0:	7f 91       	pop	r23
     cc2:	6f 91       	pop	r22
     cc4:	5f 91       	pop	r21
     cc6:	4f 91       	pop	r20
     cc8:	3f 91       	pop	r19
     cca:	2f 91       	pop	r18
     ccc:	0f 90       	pop	r0
     cce:	0b be       	out	0x3b, r0	; 59
     cd0:	0f 90       	pop	r0
     cd2:	09 be       	out	0x39, r0	; 57
     cd4:	0f 90       	pop	r0
     cd6:	08 be       	out	0x38, r0	; 56
     cd8:	0f 90       	pop	r0
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	0f 90       	pop	r0
     cde:	1f 90       	pop	r1
     ce0:	18 95       	reti

00000ce2 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     ce2:	1f 92       	push	r1
     ce4:	0f 92       	push	r0
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	0f 92       	push	r0
     cea:	11 24       	eor	r1, r1
     cec:	08 b6       	in	r0, 0x38	; 56
     cee:	0f 92       	push	r0
     cf0:	18 be       	out	0x38, r1	; 56
     cf2:	09 b6       	in	r0, 0x39	; 57
     cf4:	0f 92       	push	r0
     cf6:	19 be       	out	0x39, r1	; 57
     cf8:	0b b6       	in	r0, 0x3b	; 59
     cfa:	0f 92       	push	r0
     cfc:	1b be       	out	0x3b, r1	; 59
     cfe:	2f 93       	push	r18
     d00:	3f 93       	push	r19
     d02:	4f 93       	push	r20
     d04:	5f 93       	push	r21
     d06:	6f 93       	push	r22
     d08:	7f 93       	push	r23
     d0a:	8f 93       	push	r24
     d0c:	9f 93       	push	r25
     d0e:	af 93       	push	r26
     d10:	bf 93       	push	r27
     d12:	ef 93       	push	r30
     d14:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     d16:	e0 91 bc 20 	lds	r30, 0x20BC	; 0x8020bc <tc_tcd0_ovf_callback>
     d1a:	f0 91 bd 20 	lds	r31, 0x20BD	; 0x8020bd <tc_tcd0_ovf_callback+0x1>
     d1e:	30 97       	sbiw	r30, 0x00	; 0
     d20:	09 f0       	breq	.+2      	; 0xd24 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     d22:	19 95       	eicall
	}
}
     d24:	ff 91       	pop	r31
     d26:	ef 91       	pop	r30
     d28:	bf 91       	pop	r27
     d2a:	af 91       	pop	r26
     d2c:	9f 91       	pop	r25
     d2e:	8f 91       	pop	r24
     d30:	7f 91       	pop	r23
     d32:	6f 91       	pop	r22
     d34:	5f 91       	pop	r21
     d36:	4f 91       	pop	r20
     d38:	3f 91       	pop	r19
     d3a:	2f 91       	pop	r18
     d3c:	0f 90       	pop	r0
     d3e:	0b be       	out	0x3b, r0	; 59
     d40:	0f 90       	pop	r0
     d42:	09 be       	out	0x39, r0	; 57
     d44:	0f 90       	pop	r0
     d46:	08 be       	out	0x38, r0	; 56
     d48:	0f 90       	pop	r0
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	0f 90       	pop	r0
     d4e:	1f 90       	pop	r1
     d50:	18 95       	reti

00000d52 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     d52:	1f 92       	push	r1
     d54:	0f 92       	push	r0
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	0f 92       	push	r0
     d5a:	11 24       	eor	r1, r1
     d5c:	08 b6       	in	r0, 0x38	; 56
     d5e:	0f 92       	push	r0
     d60:	18 be       	out	0x38, r1	; 56
     d62:	09 b6       	in	r0, 0x39	; 57
     d64:	0f 92       	push	r0
     d66:	19 be       	out	0x39, r1	; 57
     d68:	0b b6       	in	r0, 0x3b	; 59
     d6a:	0f 92       	push	r0
     d6c:	1b be       	out	0x3b, r1	; 59
     d6e:	2f 93       	push	r18
     d70:	3f 93       	push	r19
     d72:	4f 93       	push	r20
     d74:	5f 93       	push	r21
     d76:	6f 93       	push	r22
     d78:	7f 93       	push	r23
     d7a:	8f 93       	push	r24
     d7c:	9f 93       	push	r25
     d7e:	af 93       	push	r26
     d80:	bf 93       	push	r27
     d82:	ef 93       	push	r30
     d84:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     d86:	e0 91 ba 20 	lds	r30, 0x20BA	; 0x8020ba <tc_tcd0_err_callback>
     d8a:	f0 91 bb 20 	lds	r31, 0x20BB	; 0x8020bb <tc_tcd0_err_callback+0x1>
     d8e:	30 97       	sbiw	r30, 0x00	; 0
     d90:	09 f0       	breq	.+2      	; 0xd94 <__vector_78+0x42>
		tc_tcd0_err_callback();
     d92:	19 95       	eicall
	}
}
     d94:	ff 91       	pop	r31
     d96:	ef 91       	pop	r30
     d98:	bf 91       	pop	r27
     d9a:	af 91       	pop	r26
     d9c:	9f 91       	pop	r25
     d9e:	8f 91       	pop	r24
     da0:	7f 91       	pop	r23
     da2:	6f 91       	pop	r22
     da4:	5f 91       	pop	r21
     da6:	4f 91       	pop	r20
     da8:	3f 91       	pop	r19
     daa:	2f 91       	pop	r18
     dac:	0f 90       	pop	r0
     dae:	0b be       	out	0x3b, r0	; 59
     db0:	0f 90       	pop	r0
     db2:	09 be       	out	0x39, r0	; 57
     db4:	0f 90       	pop	r0
     db6:	08 be       	out	0x38, r0	; 56
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     dc2:	1f 92       	push	r1
     dc4:	0f 92       	push	r0
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	0f 92       	push	r0
     dca:	11 24       	eor	r1, r1
     dcc:	08 b6       	in	r0, 0x38	; 56
     dce:	0f 92       	push	r0
     dd0:	18 be       	out	0x38, r1	; 56
     dd2:	09 b6       	in	r0, 0x39	; 57
     dd4:	0f 92       	push	r0
     dd6:	19 be       	out	0x39, r1	; 57
     dd8:	0b b6       	in	r0, 0x3b	; 59
     dda:	0f 92       	push	r0
     ddc:	1b be       	out	0x3b, r1	; 59
     dde:	2f 93       	push	r18
     de0:	3f 93       	push	r19
     de2:	4f 93       	push	r20
     de4:	5f 93       	push	r21
     de6:	6f 93       	push	r22
     de8:	7f 93       	push	r23
     dea:	8f 93       	push	r24
     dec:	9f 93       	push	r25
     dee:	af 93       	push	r26
     df0:	bf 93       	push	r27
     df2:	ef 93       	push	r30
     df4:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     df6:	e0 91 b8 20 	lds	r30, 0x20B8	; 0x8020b8 <tc_tcd0_cca_callback>
     dfa:	f0 91 b9 20 	lds	r31, 0x20B9	; 0x8020b9 <tc_tcd0_cca_callback+0x1>
     dfe:	30 97       	sbiw	r30, 0x00	; 0
     e00:	09 f0       	breq	.+2      	; 0xe04 <__vector_79+0x42>
		tc_tcd0_cca_callback();
     e02:	19 95       	eicall
	}
}
     e04:	ff 91       	pop	r31
     e06:	ef 91       	pop	r30
     e08:	bf 91       	pop	r27
     e0a:	af 91       	pop	r26
     e0c:	9f 91       	pop	r25
     e0e:	8f 91       	pop	r24
     e10:	7f 91       	pop	r23
     e12:	6f 91       	pop	r22
     e14:	5f 91       	pop	r21
     e16:	4f 91       	pop	r20
     e18:	3f 91       	pop	r19
     e1a:	2f 91       	pop	r18
     e1c:	0f 90       	pop	r0
     e1e:	0b be       	out	0x3b, r0	; 59
     e20:	0f 90       	pop	r0
     e22:	09 be       	out	0x39, r0	; 57
     e24:	0f 90       	pop	r0
     e26:	08 be       	out	0x38, r0	; 56
     e28:	0f 90       	pop	r0
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	0f 90       	pop	r0
     e2e:	1f 90       	pop	r1
     e30:	18 95       	reti

00000e32 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     e32:	1f 92       	push	r1
     e34:	0f 92       	push	r0
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	0f 92       	push	r0
     e3a:	11 24       	eor	r1, r1
     e3c:	08 b6       	in	r0, 0x38	; 56
     e3e:	0f 92       	push	r0
     e40:	18 be       	out	0x38, r1	; 56
     e42:	09 b6       	in	r0, 0x39	; 57
     e44:	0f 92       	push	r0
     e46:	19 be       	out	0x39, r1	; 57
     e48:	0b b6       	in	r0, 0x3b	; 59
     e4a:	0f 92       	push	r0
     e4c:	1b be       	out	0x3b, r1	; 59
     e4e:	2f 93       	push	r18
     e50:	3f 93       	push	r19
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     e66:	e0 91 b6 20 	lds	r30, 0x20B6	; 0x8020b6 <tc_tcd0_ccb_callback>
     e6a:	f0 91 b7 20 	lds	r31, 0x20B7	; 0x8020b7 <tc_tcd0_ccb_callback+0x1>
     e6e:	30 97       	sbiw	r30, 0x00	; 0
     e70:	09 f0       	breq	.+2      	; 0xe74 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     e72:	19 95       	eicall
	}
}
     e74:	ff 91       	pop	r31
     e76:	ef 91       	pop	r30
     e78:	bf 91       	pop	r27
     e7a:	af 91       	pop	r26
     e7c:	9f 91       	pop	r25
     e7e:	8f 91       	pop	r24
     e80:	7f 91       	pop	r23
     e82:	6f 91       	pop	r22
     e84:	5f 91       	pop	r21
     e86:	4f 91       	pop	r20
     e88:	3f 91       	pop	r19
     e8a:	2f 91       	pop	r18
     e8c:	0f 90       	pop	r0
     e8e:	0b be       	out	0x3b, r0	; 59
     e90:	0f 90       	pop	r0
     e92:	09 be       	out	0x39, r0	; 57
     e94:	0f 90       	pop	r0
     e96:	08 be       	out	0x38, r0	; 56
     e98:	0f 90       	pop	r0
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	0f 90       	pop	r0
     e9e:	1f 90       	pop	r1
     ea0:	18 95       	reti

00000ea2 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     ea2:	1f 92       	push	r1
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	08 b6       	in	r0, 0x38	; 56
     eae:	0f 92       	push	r0
     eb0:	18 be       	out	0x38, r1	; 56
     eb2:	09 b6       	in	r0, 0x39	; 57
     eb4:	0f 92       	push	r0
     eb6:	19 be       	out	0x39, r1	; 57
     eb8:	0b b6       	in	r0, 0x3b	; 59
     eba:	0f 92       	push	r0
     ebc:	1b be       	out	0x3b, r1	; 59
     ebe:	2f 93       	push	r18
     ec0:	3f 93       	push	r19
     ec2:	4f 93       	push	r20
     ec4:	5f 93       	push	r21
     ec6:	6f 93       	push	r22
     ec8:	7f 93       	push	r23
     eca:	8f 93       	push	r24
     ecc:	9f 93       	push	r25
     ece:	af 93       	push	r26
     ed0:	bf 93       	push	r27
     ed2:	ef 93       	push	r30
     ed4:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     ed6:	e0 91 b4 20 	lds	r30, 0x20B4	; 0x8020b4 <tc_tcd0_ccc_callback>
     eda:	f0 91 b5 20 	lds	r31, 0x20B5	; 0x8020b5 <tc_tcd0_ccc_callback+0x1>
     ede:	30 97       	sbiw	r30, 0x00	; 0
     ee0:	09 f0       	breq	.+2      	; 0xee4 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     ee2:	19 95       	eicall
	}
}
     ee4:	ff 91       	pop	r31
     ee6:	ef 91       	pop	r30
     ee8:	bf 91       	pop	r27
     eea:	af 91       	pop	r26
     eec:	9f 91       	pop	r25
     eee:	8f 91       	pop	r24
     ef0:	7f 91       	pop	r23
     ef2:	6f 91       	pop	r22
     ef4:	5f 91       	pop	r21
     ef6:	4f 91       	pop	r20
     ef8:	3f 91       	pop	r19
     efa:	2f 91       	pop	r18
     efc:	0f 90       	pop	r0
     efe:	0b be       	out	0x3b, r0	; 59
     f00:	0f 90       	pop	r0
     f02:	09 be       	out	0x39, r0	; 57
     f04:	0f 90       	pop	r0
     f06:	08 be       	out	0x38, r0	; 56
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	0f 90       	pop	r0
     f0e:	1f 90       	pop	r1
     f10:	18 95       	reti

00000f12 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	08 b6       	in	r0, 0x38	; 56
     f1e:	0f 92       	push	r0
     f20:	18 be       	out	0x38, r1	; 56
     f22:	09 b6       	in	r0, 0x39	; 57
     f24:	0f 92       	push	r0
     f26:	19 be       	out	0x39, r1	; 57
     f28:	0b b6       	in	r0, 0x3b	; 59
     f2a:	0f 92       	push	r0
     f2c:	1b be       	out	0x3b, r1	; 59
     f2e:	2f 93       	push	r18
     f30:	3f 93       	push	r19
     f32:	4f 93       	push	r20
     f34:	5f 93       	push	r21
     f36:	6f 93       	push	r22
     f38:	7f 93       	push	r23
     f3a:	8f 93       	push	r24
     f3c:	9f 93       	push	r25
     f3e:	af 93       	push	r26
     f40:	bf 93       	push	r27
     f42:	ef 93       	push	r30
     f44:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     f46:	e0 91 b2 20 	lds	r30, 0x20B2	; 0x8020b2 <tc_tcd0_ccd_callback>
     f4a:	f0 91 b3 20 	lds	r31, 0x20B3	; 0x8020b3 <tc_tcd0_ccd_callback+0x1>
     f4e:	30 97       	sbiw	r30, 0x00	; 0
     f50:	09 f0       	breq	.+2      	; 0xf54 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     f52:	19 95       	eicall
	}
}
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0b be       	out	0x3b, r0	; 59
     f70:	0f 90       	pop	r0
     f72:	09 be       	out	0x39, r0	; 57
     f74:	0f 90       	pop	r0
     f76:	08 be       	out	0x38, r0	; 56
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     f82:	1f 92       	push	r1
     f84:	0f 92       	push	r0
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	08 b6       	in	r0, 0x38	; 56
     f8e:	0f 92       	push	r0
     f90:	18 be       	out	0x38, r1	; 56
     f92:	09 b6       	in	r0, 0x39	; 57
     f94:	0f 92       	push	r0
     f96:	19 be       	out	0x39, r1	; 57
     f98:	0b b6       	in	r0, 0x3b	; 59
     f9a:	0f 92       	push	r0
     f9c:	1b be       	out	0x3b, r1	; 59
     f9e:	2f 93       	push	r18
     fa0:	3f 93       	push	r19
     fa2:	4f 93       	push	r20
     fa4:	5f 93       	push	r21
     fa6:	6f 93       	push	r22
     fa8:	7f 93       	push	r23
     faa:	8f 93       	push	r24
     fac:	9f 93       	push	r25
     fae:	af 93       	push	r26
     fb0:	bf 93       	push	r27
     fb2:	ef 93       	push	r30
     fb4:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     fb6:	e0 91 b0 20 	lds	r30, 0x20B0	; 0x8020b0 <tc_tcd1_ovf_callback>
     fba:	f0 91 b1 20 	lds	r31, 0x20B1	; 0x8020b1 <tc_tcd1_ovf_callback+0x1>
     fbe:	30 97       	sbiw	r30, 0x00	; 0
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
     fc2:	19 95       	eicall
	}
}
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	bf 91       	pop	r27
     fca:	af 91       	pop	r26
     fcc:	9f 91       	pop	r25
     fce:	8f 91       	pop	r24
     fd0:	7f 91       	pop	r23
     fd2:	6f 91       	pop	r22
     fd4:	5f 91       	pop	r21
     fd6:	4f 91       	pop	r20
     fd8:	3f 91       	pop	r19
     fda:	2f 91       	pop	r18
     fdc:	0f 90       	pop	r0
     fde:	0b be       	out	0x3b, r0	; 59
     fe0:	0f 90       	pop	r0
     fe2:	09 be       	out	0x39, r0	; 57
     fe4:	0f 90       	pop	r0
     fe6:	08 be       	out	0x38, r0	; 56
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	1f 90       	pop	r1
     ff0:	18 95       	reti

00000ff2 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     ff2:	1f 92       	push	r1
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	0f 92       	push	r0
     ffa:	11 24       	eor	r1, r1
     ffc:	08 b6       	in	r0, 0x38	; 56
     ffe:	0f 92       	push	r0
    1000:	18 be       	out	0x38, r1	; 56
    1002:	09 b6       	in	r0, 0x39	; 57
    1004:	0f 92       	push	r0
    1006:	19 be       	out	0x39, r1	; 57
    1008:	0b b6       	in	r0, 0x3b	; 59
    100a:	0f 92       	push	r0
    100c:	1b be       	out	0x3b, r1	; 59
    100e:	2f 93       	push	r18
    1010:	3f 93       	push	r19
    1012:	4f 93       	push	r20
    1014:	5f 93       	push	r21
    1016:	6f 93       	push	r22
    1018:	7f 93       	push	r23
    101a:	8f 93       	push	r24
    101c:	9f 93       	push	r25
    101e:	af 93       	push	r26
    1020:	bf 93       	push	r27
    1022:	ef 93       	push	r30
    1024:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1026:	e0 91 ae 20 	lds	r30, 0x20AE	; 0x8020ae <tc_tcd1_err_callback>
    102a:	f0 91 af 20 	lds	r31, 0x20AF	; 0x8020af <tc_tcd1_err_callback+0x1>
    102e:	30 97       	sbiw	r30, 0x00	; 0
    1030:	09 f0       	breq	.+2      	; 0x1034 <__vector_84+0x42>
		tc_tcd1_err_callback();
    1032:	19 95       	eicall
	}
}
    1034:	ff 91       	pop	r31
    1036:	ef 91       	pop	r30
    1038:	bf 91       	pop	r27
    103a:	af 91       	pop	r26
    103c:	9f 91       	pop	r25
    103e:	8f 91       	pop	r24
    1040:	7f 91       	pop	r23
    1042:	6f 91       	pop	r22
    1044:	5f 91       	pop	r21
    1046:	4f 91       	pop	r20
    1048:	3f 91       	pop	r19
    104a:	2f 91       	pop	r18
    104c:	0f 90       	pop	r0
    104e:	0b be       	out	0x3b, r0	; 59
    1050:	0f 90       	pop	r0
    1052:	09 be       	out	0x39, r0	; 57
    1054:	0f 90       	pop	r0
    1056:	08 be       	out	0x38, r0	; 56
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	0f 90       	pop	r0
    105e:	1f 90       	pop	r1
    1060:	18 95       	reti

00001062 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1062:	1f 92       	push	r1
    1064:	0f 92       	push	r0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	0f 92       	push	r0
    106a:	11 24       	eor	r1, r1
    106c:	08 b6       	in	r0, 0x38	; 56
    106e:	0f 92       	push	r0
    1070:	18 be       	out	0x38, r1	; 56
    1072:	09 b6       	in	r0, 0x39	; 57
    1074:	0f 92       	push	r0
    1076:	19 be       	out	0x39, r1	; 57
    1078:	0b b6       	in	r0, 0x3b	; 59
    107a:	0f 92       	push	r0
    107c:	1b be       	out	0x3b, r1	; 59
    107e:	2f 93       	push	r18
    1080:	3f 93       	push	r19
    1082:	4f 93       	push	r20
    1084:	5f 93       	push	r21
    1086:	6f 93       	push	r22
    1088:	7f 93       	push	r23
    108a:	8f 93       	push	r24
    108c:	9f 93       	push	r25
    108e:	af 93       	push	r26
    1090:	bf 93       	push	r27
    1092:	ef 93       	push	r30
    1094:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1096:	e0 91 ac 20 	lds	r30, 0x20AC	; 0x8020ac <tc_tcd1_cca_callback>
    109a:	f0 91 ad 20 	lds	r31, 0x20AD	; 0x8020ad <tc_tcd1_cca_callback+0x1>
    109e:	30 97       	sbiw	r30, 0x00	; 0
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <__vector_85+0x42>
		tc_tcd1_cca_callback();
    10a2:	19 95       	eicall
	}
}
    10a4:	ff 91       	pop	r31
    10a6:	ef 91       	pop	r30
    10a8:	bf 91       	pop	r27
    10aa:	af 91       	pop	r26
    10ac:	9f 91       	pop	r25
    10ae:	8f 91       	pop	r24
    10b0:	7f 91       	pop	r23
    10b2:	6f 91       	pop	r22
    10b4:	5f 91       	pop	r21
    10b6:	4f 91       	pop	r20
    10b8:	3f 91       	pop	r19
    10ba:	2f 91       	pop	r18
    10bc:	0f 90       	pop	r0
    10be:	0b be       	out	0x3b, r0	; 59
    10c0:	0f 90       	pop	r0
    10c2:	09 be       	out	0x39, r0	; 57
    10c4:	0f 90       	pop	r0
    10c6:	08 be       	out	0x38, r0	; 56
    10c8:	0f 90       	pop	r0
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	0f 90       	pop	r0
    10ce:	1f 90       	pop	r1
    10d0:	18 95       	reti

000010d2 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	0f 92       	push	r0
    10da:	11 24       	eor	r1, r1
    10dc:	08 b6       	in	r0, 0x38	; 56
    10de:	0f 92       	push	r0
    10e0:	18 be       	out	0x38, r1	; 56
    10e2:	09 b6       	in	r0, 0x39	; 57
    10e4:	0f 92       	push	r0
    10e6:	19 be       	out	0x39, r1	; 57
    10e8:	0b b6       	in	r0, 0x3b	; 59
    10ea:	0f 92       	push	r0
    10ec:	1b be       	out	0x3b, r1	; 59
    10ee:	2f 93       	push	r18
    10f0:	3f 93       	push	r19
    10f2:	4f 93       	push	r20
    10f4:	5f 93       	push	r21
    10f6:	6f 93       	push	r22
    10f8:	7f 93       	push	r23
    10fa:	8f 93       	push	r24
    10fc:	9f 93       	push	r25
    10fe:	af 93       	push	r26
    1100:	bf 93       	push	r27
    1102:	ef 93       	push	r30
    1104:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1106:	e0 91 aa 20 	lds	r30, 0x20AA	; 0x8020aa <tc_tcd1_ccb_callback>
    110a:	f0 91 ab 20 	lds	r31, 0x20AB	; 0x8020ab <tc_tcd1_ccb_callback+0x1>
    110e:	30 97       	sbiw	r30, 0x00	; 0
    1110:	09 f0       	breq	.+2      	; 0x1114 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    1112:	19 95       	eicall
	}
}
    1114:	ff 91       	pop	r31
    1116:	ef 91       	pop	r30
    1118:	bf 91       	pop	r27
    111a:	af 91       	pop	r26
    111c:	9f 91       	pop	r25
    111e:	8f 91       	pop	r24
    1120:	7f 91       	pop	r23
    1122:	6f 91       	pop	r22
    1124:	5f 91       	pop	r21
    1126:	4f 91       	pop	r20
    1128:	3f 91       	pop	r19
    112a:	2f 91       	pop	r18
    112c:	0f 90       	pop	r0
    112e:	0b be       	out	0x3b, r0	; 59
    1130:	0f 90       	pop	r0
    1132:	09 be       	out	0x39, r0	; 57
    1134:	0f 90       	pop	r0
    1136:	08 be       	out	0x38, r0	; 56
    1138:	0f 90       	pop	r0
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	0f 90       	pop	r0
    113e:	1f 90       	pop	r1
    1140:	18 95       	reti

00001142 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    1142:	1f 92       	push	r1
    1144:	0f 92       	push	r0
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	0f 92       	push	r0
    114a:	11 24       	eor	r1, r1
    114c:	08 b6       	in	r0, 0x38	; 56
    114e:	0f 92       	push	r0
    1150:	18 be       	out	0x38, r1	; 56
    1152:	09 b6       	in	r0, 0x39	; 57
    1154:	0f 92       	push	r0
    1156:	19 be       	out	0x39, r1	; 57
    1158:	0b b6       	in	r0, 0x3b	; 59
    115a:	0f 92       	push	r0
    115c:	1b be       	out	0x3b, r1	; 59
    115e:	2f 93       	push	r18
    1160:	3f 93       	push	r19
    1162:	4f 93       	push	r20
    1164:	5f 93       	push	r21
    1166:	6f 93       	push	r22
    1168:	7f 93       	push	r23
    116a:	8f 93       	push	r24
    116c:	9f 93       	push	r25
    116e:	af 93       	push	r26
    1170:	bf 93       	push	r27
    1172:	ef 93       	push	r30
    1174:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1176:	e0 91 a8 20 	lds	r30, 0x20A8	; 0x8020a8 <tc_tce0_ovf_callback>
    117a:	f0 91 a9 20 	lds	r31, 0x20A9	; 0x8020a9 <tc_tce0_ovf_callback+0x1>
    117e:	30 97       	sbiw	r30, 0x00	; 0
    1180:	09 f0       	breq	.+2      	; 0x1184 <__vector_47+0x42>
		tc_tce0_ovf_callback();
    1182:	19 95       	eicall
	}
}
    1184:	ff 91       	pop	r31
    1186:	ef 91       	pop	r30
    1188:	bf 91       	pop	r27
    118a:	af 91       	pop	r26
    118c:	9f 91       	pop	r25
    118e:	8f 91       	pop	r24
    1190:	7f 91       	pop	r23
    1192:	6f 91       	pop	r22
    1194:	5f 91       	pop	r21
    1196:	4f 91       	pop	r20
    1198:	3f 91       	pop	r19
    119a:	2f 91       	pop	r18
    119c:	0f 90       	pop	r0
    119e:	0b be       	out	0x3b, r0	; 59
    11a0:	0f 90       	pop	r0
    11a2:	09 be       	out	0x39, r0	; 57
    11a4:	0f 90       	pop	r0
    11a6:	08 be       	out	0x38, r0	; 56
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    11b2:	1f 92       	push	r1
    11b4:	0f 92       	push	r0
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	0f 92       	push	r0
    11ba:	11 24       	eor	r1, r1
    11bc:	08 b6       	in	r0, 0x38	; 56
    11be:	0f 92       	push	r0
    11c0:	18 be       	out	0x38, r1	; 56
    11c2:	09 b6       	in	r0, 0x39	; 57
    11c4:	0f 92       	push	r0
    11c6:	19 be       	out	0x39, r1	; 57
    11c8:	0b b6       	in	r0, 0x3b	; 59
    11ca:	0f 92       	push	r0
    11cc:	1b be       	out	0x3b, r1	; 59
    11ce:	2f 93       	push	r18
    11d0:	3f 93       	push	r19
    11d2:	4f 93       	push	r20
    11d4:	5f 93       	push	r21
    11d6:	6f 93       	push	r22
    11d8:	7f 93       	push	r23
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	af 93       	push	r26
    11e0:	bf 93       	push	r27
    11e2:	ef 93       	push	r30
    11e4:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    11e6:	e0 91 a6 20 	lds	r30, 0x20A6	; 0x8020a6 <tc_tce0_err_callback>
    11ea:	f0 91 a7 20 	lds	r31, 0x20A7	; 0x8020a7 <tc_tce0_err_callback+0x1>
    11ee:	30 97       	sbiw	r30, 0x00	; 0
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <__vector_48+0x42>
		tc_tce0_err_callback();
    11f2:	19 95       	eicall
	}
}
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	bf 91       	pop	r27
    11fa:	af 91       	pop	r26
    11fc:	9f 91       	pop	r25
    11fe:	8f 91       	pop	r24
    1200:	7f 91       	pop	r23
    1202:	6f 91       	pop	r22
    1204:	5f 91       	pop	r21
    1206:	4f 91       	pop	r20
    1208:	3f 91       	pop	r19
    120a:	2f 91       	pop	r18
    120c:	0f 90       	pop	r0
    120e:	0b be       	out	0x3b, r0	; 59
    1210:	0f 90       	pop	r0
    1212:	09 be       	out	0x39, r0	; 57
    1214:	0f 90       	pop	r0
    1216:	08 be       	out	0x38, r0	; 56
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	0f 90       	pop	r0
    121e:	1f 90       	pop	r1
    1220:	18 95       	reti

00001222 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1222:	1f 92       	push	r1
    1224:	0f 92       	push	r0
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	0f 92       	push	r0
    122a:	11 24       	eor	r1, r1
    122c:	08 b6       	in	r0, 0x38	; 56
    122e:	0f 92       	push	r0
    1230:	18 be       	out	0x38, r1	; 56
    1232:	09 b6       	in	r0, 0x39	; 57
    1234:	0f 92       	push	r0
    1236:	19 be       	out	0x39, r1	; 57
    1238:	0b b6       	in	r0, 0x3b	; 59
    123a:	0f 92       	push	r0
    123c:	1b be       	out	0x3b, r1	; 59
    123e:	2f 93       	push	r18
    1240:	3f 93       	push	r19
    1242:	4f 93       	push	r20
    1244:	5f 93       	push	r21
    1246:	6f 93       	push	r22
    1248:	7f 93       	push	r23
    124a:	8f 93       	push	r24
    124c:	9f 93       	push	r25
    124e:	af 93       	push	r26
    1250:	bf 93       	push	r27
    1252:	ef 93       	push	r30
    1254:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1256:	e0 91 a4 20 	lds	r30, 0x20A4	; 0x8020a4 <tc_tce0_cca_callback>
    125a:	f0 91 a5 20 	lds	r31, 0x20A5	; 0x8020a5 <tc_tce0_cca_callback+0x1>
    125e:	30 97       	sbiw	r30, 0x00	; 0
    1260:	09 f0       	breq	.+2      	; 0x1264 <__vector_49+0x42>
		tc_tce0_cca_callback();
    1262:	19 95       	eicall
	}
}
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0b be       	out	0x3b, r0	; 59
    1280:	0f 90       	pop	r0
    1282:	09 be       	out	0x39, r0	; 57
    1284:	0f 90       	pop	r0
    1286:	08 be       	out	0x38, r0	; 56
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

00001292 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1292:	1f 92       	push	r1
    1294:	0f 92       	push	r0
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	0f 92       	push	r0
    129a:	11 24       	eor	r1, r1
    129c:	08 b6       	in	r0, 0x38	; 56
    129e:	0f 92       	push	r0
    12a0:	18 be       	out	0x38, r1	; 56
    12a2:	09 b6       	in	r0, 0x39	; 57
    12a4:	0f 92       	push	r0
    12a6:	19 be       	out	0x39, r1	; 57
    12a8:	0b b6       	in	r0, 0x3b	; 59
    12aa:	0f 92       	push	r0
    12ac:	1b be       	out	0x3b, r1	; 59
    12ae:	2f 93       	push	r18
    12b0:	3f 93       	push	r19
    12b2:	4f 93       	push	r20
    12b4:	5f 93       	push	r21
    12b6:	6f 93       	push	r22
    12b8:	7f 93       	push	r23
    12ba:	8f 93       	push	r24
    12bc:	9f 93       	push	r25
    12be:	af 93       	push	r26
    12c0:	bf 93       	push	r27
    12c2:	ef 93       	push	r30
    12c4:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    12c6:	e0 91 a2 20 	lds	r30, 0x20A2	; 0x8020a2 <tc_tce0_ccb_callback>
    12ca:	f0 91 a3 20 	lds	r31, 0x20A3	; 0x8020a3 <tc_tce0_ccb_callback+0x1>
    12ce:	30 97       	sbiw	r30, 0x00	; 0
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <__vector_50+0x42>
		tc_tce0_ccb_callback();
    12d2:	19 95       	eicall
	}
}
    12d4:	ff 91       	pop	r31
    12d6:	ef 91       	pop	r30
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	7f 91       	pop	r23
    12e2:	6f 91       	pop	r22
    12e4:	5f 91       	pop	r21
    12e6:	4f 91       	pop	r20
    12e8:	3f 91       	pop	r19
    12ea:	2f 91       	pop	r18
    12ec:	0f 90       	pop	r0
    12ee:	0b be       	out	0x3b, r0	; 59
    12f0:	0f 90       	pop	r0
    12f2:	09 be       	out	0x39, r0	; 57
    12f4:	0f 90       	pop	r0
    12f6:	08 be       	out	0x38, r0	; 56
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	0f 90       	pop	r0
    12fe:	1f 90       	pop	r1
    1300:	18 95       	reti

00001302 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1302:	1f 92       	push	r1
    1304:	0f 92       	push	r0
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	0f 92       	push	r0
    130a:	11 24       	eor	r1, r1
    130c:	08 b6       	in	r0, 0x38	; 56
    130e:	0f 92       	push	r0
    1310:	18 be       	out	0x38, r1	; 56
    1312:	09 b6       	in	r0, 0x39	; 57
    1314:	0f 92       	push	r0
    1316:	19 be       	out	0x39, r1	; 57
    1318:	0b b6       	in	r0, 0x3b	; 59
    131a:	0f 92       	push	r0
    131c:	1b be       	out	0x3b, r1	; 59
    131e:	2f 93       	push	r18
    1320:	3f 93       	push	r19
    1322:	4f 93       	push	r20
    1324:	5f 93       	push	r21
    1326:	6f 93       	push	r22
    1328:	7f 93       	push	r23
    132a:	8f 93       	push	r24
    132c:	9f 93       	push	r25
    132e:	af 93       	push	r26
    1330:	bf 93       	push	r27
    1332:	ef 93       	push	r30
    1334:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1336:	e0 91 a0 20 	lds	r30, 0x20A0	; 0x8020a0 <tc_tce0_ccc_callback>
    133a:	f0 91 a1 20 	lds	r31, 0x20A1	; 0x8020a1 <tc_tce0_ccc_callback+0x1>
    133e:	30 97       	sbiw	r30, 0x00	; 0
    1340:	09 f0       	breq	.+2      	; 0x1344 <__vector_51+0x42>
		tc_tce0_ccc_callback();
    1342:	19 95       	eicall
	}
}
    1344:	ff 91       	pop	r31
    1346:	ef 91       	pop	r30
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	0f 90       	pop	r0
    135e:	0b be       	out	0x3b, r0	; 59
    1360:	0f 90       	pop	r0
    1362:	09 be       	out	0x39, r0	; 57
    1364:	0f 90       	pop	r0
    1366:	08 be       	out	0x38, r0	; 56
    1368:	0f 90       	pop	r0
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	0f 90       	pop	r0
    136e:	1f 90       	pop	r1
    1370:	18 95       	reti

00001372 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1372:	1f 92       	push	r1
    1374:	0f 92       	push	r0
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	0f 92       	push	r0
    137a:	11 24       	eor	r1, r1
    137c:	08 b6       	in	r0, 0x38	; 56
    137e:	0f 92       	push	r0
    1380:	18 be       	out	0x38, r1	; 56
    1382:	09 b6       	in	r0, 0x39	; 57
    1384:	0f 92       	push	r0
    1386:	19 be       	out	0x39, r1	; 57
    1388:	0b b6       	in	r0, 0x3b	; 59
    138a:	0f 92       	push	r0
    138c:	1b be       	out	0x3b, r1	; 59
    138e:	2f 93       	push	r18
    1390:	3f 93       	push	r19
    1392:	4f 93       	push	r20
    1394:	5f 93       	push	r21
    1396:	6f 93       	push	r22
    1398:	7f 93       	push	r23
    139a:	8f 93       	push	r24
    139c:	9f 93       	push	r25
    139e:	af 93       	push	r26
    13a0:	bf 93       	push	r27
    13a2:	ef 93       	push	r30
    13a4:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    13a6:	e0 91 9e 20 	lds	r30, 0x209E	; 0x80209e <tc_tce0_ccd_callback>
    13aa:	f0 91 9f 20 	lds	r31, 0x209F	; 0x80209f <tc_tce0_ccd_callback+0x1>
    13ae:	30 97       	sbiw	r30, 0x00	; 0
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <__vector_52+0x42>
		tc_tce0_ccd_callback();
    13b2:	19 95       	eicall
	}
}
    13b4:	ff 91       	pop	r31
    13b6:	ef 91       	pop	r30
    13b8:	bf 91       	pop	r27
    13ba:	af 91       	pop	r26
    13bc:	9f 91       	pop	r25
    13be:	8f 91       	pop	r24
    13c0:	7f 91       	pop	r23
    13c2:	6f 91       	pop	r22
    13c4:	5f 91       	pop	r21
    13c6:	4f 91       	pop	r20
    13c8:	3f 91       	pop	r19
    13ca:	2f 91       	pop	r18
    13cc:	0f 90       	pop	r0
    13ce:	0b be       	out	0x3b, r0	; 59
    13d0:	0f 90       	pop	r0
    13d2:	09 be       	out	0x39, r0	; 57
    13d4:	0f 90       	pop	r0
    13d6:	08 be       	out	0x38, r0	; 56
    13d8:	0f 90       	pop	r0
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	0f 90       	pop	r0
    13de:	1f 90       	pop	r1
    13e0:	18 95       	reti

000013e2 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    13e2:	1f 92       	push	r1
    13e4:	0f 92       	push	r0
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	0f 92       	push	r0
    13ea:	11 24       	eor	r1, r1
    13ec:	08 b6       	in	r0, 0x38	; 56
    13ee:	0f 92       	push	r0
    13f0:	18 be       	out	0x38, r1	; 56
    13f2:	09 b6       	in	r0, 0x39	; 57
    13f4:	0f 92       	push	r0
    13f6:	19 be       	out	0x39, r1	; 57
    13f8:	0b b6       	in	r0, 0x3b	; 59
    13fa:	0f 92       	push	r0
    13fc:	1b be       	out	0x3b, r1	; 59
    13fe:	2f 93       	push	r18
    1400:	3f 93       	push	r19
    1402:	4f 93       	push	r20
    1404:	5f 93       	push	r21
    1406:	6f 93       	push	r22
    1408:	7f 93       	push	r23
    140a:	8f 93       	push	r24
    140c:	9f 93       	push	r25
    140e:	af 93       	push	r26
    1410:	bf 93       	push	r27
    1412:	ef 93       	push	r30
    1414:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1416:	e0 91 9c 20 	lds	r30, 0x209C	; 0x80209c <tc_tce1_ovf_callback>
    141a:	f0 91 9d 20 	lds	r31, 0x209D	; 0x80209d <tc_tce1_ovf_callback+0x1>
    141e:	30 97       	sbiw	r30, 0x00	; 0
    1420:	09 f0       	breq	.+2      	; 0x1424 <__vector_53+0x42>
		tc_tce1_ovf_callback();
    1422:	19 95       	eicall
	}
}
    1424:	ff 91       	pop	r31
    1426:	ef 91       	pop	r30
    1428:	bf 91       	pop	r27
    142a:	af 91       	pop	r26
    142c:	9f 91       	pop	r25
    142e:	8f 91       	pop	r24
    1430:	7f 91       	pop	r23
    1432:	6f 91       	pop	r22
    1434:	5f 91       	pop	r21
    1436:	4f 91       	pop	r20
    1438:	3f 91       	pop	r19
    143a:	2f 91       	pop	r18
    143c:	0f 90       	pop	r0
    143e:	0b be       	out	0x3b, r0	; 59
    1440:	0f 90       	pop	r0
    1442:	09 be       	out	0x39, r0	; 57
    1444:	0f 90       	pop	r0
    1446:	08 be       	out	0x38, r0	; 56
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0f 90       	pop	r0
    144e:	1f 90       	pop	r1
    1450:	18 95       	reti

00001452 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1452:	1f 92       	push	r1
    1454:	0f 92       	push	r0
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	0f 92       	push	r0
    145a:	11 24       	eor	r1, r1
    145c:	08 b6       	in	r0, 0x38	; 56
    145e:	0f 92       	push	r0
    1460:	18 be       	out	0x38, r1	; 56
    1462:	09 b6       	in	r0, 0x39	; 57
    1464:	0f 92       	push	r0
    1466:	19 be       	out	0x39, r1	; 57
    1468:	0b b6       	in	r0, 0x3b	; 59
    146a:	0f 92       	push	r0
    146c:	1b be       	out	0x3b, r1	; 59
    146e:	2f 93       	push	r18
    1470:	3f 93       	push	r19
    1472:	4f 93       	push	r20
    1474:	5f 93       	push	r21
    1476:	6f 93       	push	r22
    1478:	7f 93       	push	r23
    147a:	8f 93       	push	r24
    147c:	9f 93       	push	r25
    147e:	af 93       	push	r26
    1480:	bf 93       	push	r27
    1482:	ef 93       	push	r30
    1484:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1486:	e0 91 9a 20 	lds	r30, 0x209A	; 0x80209a <tc_tce1_err_callback>
    148a:	f0 91 9b 20 	lds	r31, 0x209B	; 0x80209b <tc_tce1_err_callback+0x1>
    148e:	30 97       	sbiw	r30, 0x00	; 0
    1490:	09 f0       	breq	.+2      	; 0x1494 <__vector_54+0x42>
		tc_tce1_err_callback();
    1492:	19 95       	eicall
	}
}
    1494:	ff 91       	pop	r31
    1496:	ef 91       	pop	r30
    1498:	bf 91       	pop	r27
    149a:	af 91       	pop	r26
    149c:	9f 91       	pop	r25
    149e:	8f 91       	pop	r24
    14a0:	7f 91       	pop	r23
    14a2:	6f 91       	pop	r22
    14a4:	5f 91       	pop	r21
    14a6:	4f 91       	pop	r20
    14a8:	3f 91       	pop	r19
    14aa:	2f 91       	pop	r18
    14ac:	0f 90       	pop	r0
    14ae:	0b be       	out	0x3b, r0	; 59
    14b0:	0f 90       	pop	r0
    14b2:	09 be       	out	0x39, r0	; 57
    14b4:	0f 90       	pop	r0
    14b6:	08 be       	out	0x38, r0	; 56
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	0f 90       	pop	r0
    14be:	1f 90       	pop	r1
    14c0:	18 95       	reti

000014c2 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    14c2:	1f 92       	push	r1
    14c4:	0f 92       	push	r0
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	0f 92       	push	r0
    14ca:	11 24       	eor	r1, r1
    14cc:	08 b6       	in	r0, 0x38	; 56
    14ce:	0f 92       	push	r0
    14d0:	18 be       	out	0x38, r1	; 56
    14d2:	09 b6       	in	r0, 0x39	; 57
    14d4:	0f 92       	push	r0
    14d6:	19 be       	out	0x39, r1	; 57
    14d8:	0b b6       	in	r0, 0x3b	; 59
    14da:	0f 92       	push	r0
    14dc:	1b be       	out	0x3b, r1	; 59
    14de:	2f 93       	push	r18
    14e0:	3f 93       	push	r19
    14e2:	4f 93       	push	r20
    14e4:	5f 93       	push	r21
    14e6:	6f 93       	push	r22
    14e8:	7f 93       	push	r23
    14ea:	8f 93       	push	r24
    14ec:	9f 93       	push	r25
    14ee:	af 93       	push	r26
    14f0:	bf 93       	push	r27
    14f2:	ef 93       	push	r30
    14f4:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    14f6:	e0 91 98 20 	lds	r30, 0x2098	; 0x802098 <tc_tce1_cca_callback>
    14fa:	f0 91 99 20 	lds	r31, 0x2099	; 0x802099 <tc_tce1_cca_callback+0x1>
    14fe:	30 97       	sbiw	r30, 0x00	; 0
    1500:	09 f0       	breq	.+2      	; 0x1504 <__vector_55+0x42>
		tc_tce1_cca_callback();
    1502:	19 95       	eicall
	}
}
    1504:	ff 91       	pop	r31
    1506:	ef 91       	pop	r30
    1508:	bf 91       	pop	r27
    150a:	af 91       	pop	r26
    150c:	9f 91       	pop	r25
    150e:	8f 91       	pop	r24
    1510:	7f 91       	pop	r23
    1512:	6f 91       	pop	r22
    1514:	5f 91       	pop	r21
    1516:	4f 91       	pop	r20
    1518:	3f 91       	pop	r19
    151a:	2f 91       	pop	r18
    151c:	0f 90       	pop	r0
    151e:	0b be       	out	0x3b, r0	; 59
    1520:	0f 90       	pop	r0
    1522:	09 be       	out	0x39, r0	; 57
    1524:	0f 90       	pop	r0
    1526:	08 be       	out	0x38, r0	; 56
    1528:	0f 90       	pop	r0
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	0f 90       	pop	r0
    152e:	1f 90       	pop	r1
    1530:	18 95       	reti

00001532 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1532:	1f 92       	push	r1
    1534:	0f 92       	push	r0
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	0f 92       	push	r0
    153a:	11 24       	eor	r1, r1
    153c:	08 b6       	in	r0, 0x38	; 56
    153e:	0f 92       	push	r0
    1540:	18 be       	out	0x38, r1	; 56
    1542:	09 b6       	in	r0, 0x39	; 57
    1544:	0f 92       	push	r0
    1546:	19 be       	out	0x39, r1	; 57
    1548:	0b b6       	in	r0, 0x3b	; 59
    154a:	0f 92       	push	r0
    154c:	1b be       	out	0x3b, r1	; 59
    154e:	2f 93       	push	r18
    1550:	3f 93       	push	r19
    1552:	4f 93       	push	r20
    1554:	5f 93       	push	r21
    1556:	6f 93       	push	r22
    1558:	7f 93       	push	r23
    155a:	8f 93       	push	r24
    155c:	9f 93       	push	r25
    155e:	af 93       	push	r26
    1560:	bf 93       	push	r27
    1562:	ef 93       	push	r30
    1564:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1566:	e0 91 96 20 	lds	r30, 0x2096	; 0x802096 <tc_tce1_ccb_callback>
    156a:	f0 91 97 20 	lds	r31, 0x2097	; 0x802097 <tc_tce1_ccb_callback+0x1>
    156e:	30 97       	sbiw	r30, 0x00	; 0
    1570:	09 f0       	breq	.+2      	; 0x1574 <__vector_56+0x42>
		tc_tce1_ccb_callback();
    1572:	19 95       	eicall
	}
}
    1574:	ff 91       	pop	r31
    1576:	ef 91       	pop	r30
    1578:	bf 91       	pop	r27
    157a:	af 91       	pop	r26
    157c:	9f 91       	pop	r25
    157e:	8f 91       	pop	r24
    1580:	7f 91       	pop	r23
    1582:	6f 91       	pop	r22
    1584:	5f 91       	pop	r21
    1586:	4f 91       	pop	r20
    1588:	3f 91       	pop	r19
    158a:	2f 91       	pop	r18
    158c:	0f 90       	pop	r0
    158e:	0b be       	out	0x3b, r0	; 59
    1590:	0f 90       	pop	r0
    1592:	09 be       	out	0x39, r0	; 57
    1594:	0f 90       	pop	r0
    1596:	08 be       	out	0x38, r0	; 56
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    15a2:	1f 92       	push	r1
    15a4:	0f 92       	push	r0
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	0f 92       	push	r0
    15aa:	11 24       	eor	r1, r1
    15ac:	08 b6       	in	r0, 0x38	; 56
    15ae:	0f 92       	push	r0
    15b0:	18 be       	out	0x38, r1	; 56
    15b2:	09 b6       	in	r0, 0x39	; 57
    15b4:	0f 92       	push	r0
    15b6:	19 be       	out	0x39, r1	; 57
    15b8:	0b b6       	in	r0, 0x3b	; 59
    15ba:	0f 92       	push	r0
    15bc:	1b be       	out	0x3b, r1	; 59
    15be:	2f 93       	push	r18
    15c0:	3f 93       	push	r19
    15c2:	4f 93       	push	r20
    15c4:	5f 93       	push	r21
    15c6:	6f 93       	push	r22
    15c8:	7f 93       	push	r23
    15ca:	8f 93       	push	r24
    15cc:	9f 93       	push	r25
    15ce:	af 93       	push	r26
    15d0:	bf 93       	push	r27
    15d2:	ef 93       	push	r30
    15d4:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    15d6:	e0 91 94 20 	lds	r30, 0x2094	; 0x802094 <tc_tcf0_ovf_callback>
    15da:	f0 91 95 20 	lds	r31, 0x2095	; 0x802095 <tc_tcf0_ovf_callback+0x1>
    15de:	30 97       	sbiw	r30, 0x00	; 0
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    15e2:	19 95       	eicall
	}
}
    15e4:	ff 91       	pop	r31
    15e6:	ef 91       	pop	r30
    15e8:	bf 91       	pop	r27
    15ea:	af 91       	pop	r26
    15ec:	9f 91       	pop	r25
    15ee:	8f 91       	pop	r24
    15f0:	7f 91       	pop	r23
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	0f 90       	pop	r0
    15fe:	0b be       	out	0x3b, r0	; 59
    1600:	0f 90       	pop	r0
    1602:	09 be       	out	0x39, r0	; 57
    1604:	0f 90       	pop	r0
    1606:	08 be       	out	0x38, r0	; 56
    1608:	0f 90       	pop	r0
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	0f 90       	pop	r0
    160e:	1f 90       	pop	r1
    1610:	18 95       	reti

00001612 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1612:	1f 92       	push	r1
    1614:	0f 92       	push	r0
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	0f 92       	push	r0
    161a:	11 24       	eor	r1, r1
    161c:	08 b6       	in	r0, 0x38	; 56
    161e:	0f 92       	push	r0
    1620:	18 be       	out	0x38, r1	; 56
    1622:	09 b6       	in	r0, 0x39	; 57
    1624:	0f 92       	push	r0
    1626:	19 be       	out	0x39, r1	; 57
    1628:	0b b6       	in	r0, 0x3b	; 59
    162a:	0f 92       	push	r0
    162c:	1b be       	out	0x3b, r1	; 59
    162e:	2f 93       	push	r18
    1630:	3f 93       	push	r19
    1632:	4f 93       	push	r20
    1634:	5f 93       	push	r21
    1636:	6f 93       	push	r22
    1638:	7f 93       	push	r23
    163a:	8f 93       	push	r24
    163c:	9f 93       	push	r25
    163e:	af 93       	push	r26
    1640:	bf 93       	push	r27
    1642:	ef 93       	push	r30
    1644:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1646:	e0 91 92 20 	lds	r30, 0x2092	; 0x802092 <tc_tcf0_err_callback>
    164a:	f0 91 93 20 	lds	r31, 0x2093	; 0x802093 <tc_tcf0_err_callback+0x1>
    164e:	30 97       	sbiw	r30, 0x00	; 0
    1650:	09 f0       	breq	.+2      	; 0x1654 <__vector_109+0x42>
		tc_tcf0_err_callback();
    1652:	19 95       	eicall
	}
}
    1654:	ff 91       	pop	r31
    1656:	ef 91       	pop	r30
    1658:	bf 91       	pop	r27
    165a:	af 91       	pop	r26
    165c:	9f 91       	pop	r25
    165e:	8f 91       	pop	r24
    1660:	7f 91       	pop	r23
    1662:	6f 91       	pop	r22
    1664:	5f 91       	pop	r21
    1666:	4f 91       	pop	r20
    1668:	3f 91       	pop	r19
    166a:	2f 91       	pop	r18
    166c:	0f 90       	pop	r0
    166e:	0b be       	out	0x3b, r0	; 59
    1670:	0f 90       	pop	r0
    1672:	09 be       	out	0x39, r0	; 57
    1674:	0f 90       	pop	r0
    1676:	08 be       	out	0x38, r0	; 56
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	0f 90       	pop	r0
    167e:	1f 90       	pop	r1
    1680:	18 95       	reti

00001682 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1682:	1f 92       	push	r1
    1684:	0f 92       	push	r0
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	0f 92       	push	r0
    168a:	11 24       	eor	r1, r1
    168c:	08 b6       	in	r0, 0x38	; 56
    168e:	0f 92       	push	r0
    1690:	18 be       	out	0x38, r1	; 56
    1692:	09 b6       	in	r0, 0x39	; 57
    1694:	0f 92       	push	r0
    1696:	19 be       	out	0x39, r1	; 57
    1698:	0b b6       	in	r0, 0x3b	; 59
    169a:	0f 92       	push	r0
    169c:	1b be       	out	0x3b, r1	; 59
    169e:	2f 93       	push	r18
    16a0:	3f 93       	push	r19
    16a2:	4f 93       	push	r20
    16a4:	5f 93       	push	r21
    16a6:	6f 93       	push	r22
    16a8:	7f 93       	push	r23
    16aa:	8f 93       	push	r24
    16ac:	9f 93       	push	r25
    16ae:	af 93       	push	r26
    16b0:	bf 93       	push	r27
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    16b6:	e0 91 90 20 	lds	r30, 0x2090	; 0x802090 <tc_tcf0_cca_callback>
    16ba:	f0 91 91 20 	lds	r31, 0x2091	; 0x802091 <tc_tcf0_cca_callback+0x1>
    16be:	30 97       	sbiw	r30, 0x00	; 0
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <__vector_110+0x42>
		tc_tcf0_cca_callback();
    16c2:	19 95       	eicall
	}
}
    16c4:	ff 91       	pop	r31
    16c6:	ef 91       	pop	r30
    16c8:	bf 91       	pop	r27
    16ca:	af 91       	pop	r26
    16cc:	9f 91       	pop	r25
    16ce:	8f 91       	pop	r24
    16d0:	7f 91       	pop	r23
    16d2:	6f 91       	pop	r22
    16d4:	5f 91       	pop	r21
    16d6:	4f 91       	pop	r20
    16d8:	3f 91       	pop	r19
    16da:	2f 91       	pop	r18
    16dc:	0f 90       	pop	r0
    16de:	0b be       	out	0x3b, r0	; 59
    16e0:	0f 90       	pop	r0
    16e2:	09 be       	out	0x39, r0	; 57
    16e4:	0f 90       	pop	r0
    16e6:	08 be       	out	0x38, r0	; 56
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    16f2:	1f 92       	push	r1
    16f4:	0f 92       	push	r0
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	0f 92       	push	r0
    16fa:	11 24       	eor	r1, r1
    16fc:	08 b6       	in	r0, 0x38	; 56
    16fe:	0f 92       	push	r0
    1700:	18 be       	out	0x38, r1	; 56
    1702:	09 b6       	in	r0, 0x39	; 57
    1704:	0f 92       	push	r0
    1706:	19 be       	out	0x39, r1	; 57
    1708:	0b b6       	in	r0, 0x3b	; 59
    170a:	0f 92       	push	r0
    170c:	1b be       	out	0x3b, r1	; 59
    170e:	2f 93       	push	r18
    1710:	3f 93       	push	r19
    1712:	4f 93       	push	r20
    1714:	5f 93       	push	r21
    1716:	6f 93       	push	r22
    1718:	7f 93       	push	r23
    171a:	8f 93       	push	r24
    171c:	9f 93       	push	r25
    171e:	af 93       	push	r26
    1720:	bf 93       	push	r27
    1722:	ef 93       	push	r30
    1724:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1726:	e0 91 8e 20 	lds	r30, 0x208E	; 0x80208e <tc_tcf0_ccb_callback>
    172a:	f0 91 8f 20 	lds	r31, 0x208F	; 0x80208f <tc_tcf0_ccb_callback+0x1>
    172e:	30 97       	sbiw	r30, 0x00	; 0
    1730:	09 f0       	breq	.+2      	; 0x1734 <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    1732:	19 95       	eicall
	}
}
    1734:	ff 91       	pop	r31
    1736:	ef 91       	pop	r30
    1738:	bf 91       	pop	r27
    173a:	af 91       	pop	r26
    173c:	9f 91       	pop	r25
    173e:	8f 91       	pop	r24
    1740:	7f 91       	pop	r23
    1742:	6f 91       	pop	r22
    1744:	5f 91       	pop	r21
    1746:	4f 91       	pop	r20
    1748:	3f 91       	pop	r19
    174a:	2f 91       	pop	r18
    174c:	0f 90       	pop	r0
    174e:	0b be       	out	0x3b, r0	; 59
    1750:	0f 90       	pop	r0
    1752:	09 be       	out	0x39, r0	; 57
    1754:	0f 90       	pop	r0
    1756:	08 be       	out	0x38, r0	; 56
    1758:	0f 90       	pop	r0
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	0f 90       	pop	r0
    175e:	1f 90       	pop	r1
    1760:	18 95       	reti

00001762 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1762:	1f 92       	push	r1
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	0f 92       	push	r0
    176a:	11 24       	eor	r1, r1
    176c:	08 b6       	in	r0, 0x38	; 56
    176e:	0f 92       	push	r0
    1770:	18 be       	out	0x38, r1	; 56
    1772:	09 b6       	in	r0, 0x39	; 57
    1774:	0f 92       	push	r0
    1776:	19 be       	out	0x39, r1	; 57
    1778:	0b b6       	in	r0, 0x3b	; 59
    177a:	0f 92       	push	r0
    177c:	1b be       	out	0x3b, r1	; 59
    177e:	2f 93       	push	r18
    1780:	3f 93       	push	r19
    1782:	4f 93       	push	r20
    1784:	5f 93       	push	r21
    1786:	6f 93       	push	r22
    1788:	7f 93       	push	r23
    178a:	8f 93       	push	r24
    178c:	9f 93       	push	r25
    178e:	af 93       	push	r26
    1790:	bf 93       	push	r27
    1792:	ef 93       	push	r30
    1794:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1796:	e0 91 8c 20 	lds	r30, 0x208C	; 0x80208c <tc_tcf0_ccc_callback>
    179a:	f0 91 8d 20 	lds	r31, 0x208D	; 0x80208d <tc_tcf0_ccc_callback+0x1>
    179e:	30 97       	sbiw	r30, 0x00	; 0
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    17a2:	19 95       	eicall
	}
}
    17a4:	ff 91       	pop	r31
    17a6:	ef 91       	pop	r30
    17a8:	bf 91       	pop	r27
    17aa:	af 91       	pop	r26
    17ac:	9f 91       	pop	r25
    17ae:	8f 91       	pop	r24
    17b0:	7f 91       	pop	r23
    17b2:	6f 91       	pop	r22
    17b4:	5f 91       	pop	r21
    17b6:	4f 91       	pop	r20
    17b8:	3f 91       	pop	r19
    17ba:	2f 91       	pop	r18
    17bc:	0f 90       	pop	r0
    17be:	0b be       	out	0x3b, r0	; 59
    17c0:	0f 90       	pop	r0
    17c2:	09 be       	out	0x39, r0	; 57
    17c4:	0f 90       	pop	r0
    17c6:	08 be       	out	0x38, r0	; 56
    17c8:	0f 90       	pop	r0
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	0f 90       	pop	r0
    17ce:	1f 90       	pop	r1
    17d0:	18 95       	reti

000017d2 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    17d2:	1f 92       	push	r1
    17d4:	0f 92       	push	r0
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	0f 92       	push	r0
    17da:	11 24       	eor	r1, r1
    17dc:	08 b6       	in	r0, 0x38	; 56
    17de:	0f 92       	push	r0
    17e0:	18 be       	out	0x38, r1	; 56
    17e2:	09 b6       	in	r0, 0x39	; 57
    17e4:	0f 92       	push	r0
    17e6:	19 be       	out	0x39, r1	; 57
    17e8:	0b b6       	in	r0, 0x3b	; 59
    17ea:	0f 92       	push	r0
    17ec:	1b be       	out	0x3b, r1	; 59
    17ee:	2f 93       	push	r18
    17f0:	3f 93       	push	r19
    17f2:	4f 93       	push	r20
    17f4:	5f 93       	push	r21
    17f6:	6f 93       	push	r22
    17f8:	7f 93       	push	r23
    17fa:	8f 93       	push	r24
    17fc:	9f 93       	push	r25
    17fe:	af 93       	push	r26
    1800:	bf 93       	push	r27
    1802:	ef 93       	push	r30
    1804:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1806:	e0 91 8a 20 	lds	r30, 0x208A	; 0x80208a <tc_tcf0_ccd_callback>
    180a:	f0 91 8b 20 	lds	r31, 0x208B	; 0x80208b <tc_tcf0_ccd_callback+0x1>
    180e:	30 97       	sbiw	r30, 0x00	; 0
    1810:	09 f0       	breq	.+2      	; 0x1814 <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    1812:	19 95       	eicall
	}
}
    1814:	ff 91       	pop	r31
    1816:	ef 91       	pop	r30
    1818:	bf 91       	pop	r27
    181a:	af 91       	pop	r26
    181c:	9f 91       	pop	r25
    181e:	8f 91       	pop	r24
    1820:	7f 91       	pop	r23
    1822:	6f 91       	pop	r22
    1824:	5f 91       	pop	r21
    1826:	4f 91       	pop	r20
    1828:	3f 91       	pop	r19
    182a:	2f 91       	pop	r18
    182c:	0f 90       	pop	r0
    182e:	0b be       	out	0x3b, r0	; 59
    1830:	0f 90       	pop	r0
    1832:	09 be       	out	0x39, r0	; 57
    1834:	0f 90       	pop	r0
    1836:	08 be       	out	0x38, r0	; 56
    1838:	0f 90       	pop	r0
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	0f 90       	pop	r0
    183e:	1f 90       	pop	r1
    1840:	18 95       	reti

00001842 <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    1842:	1f 92       	push	r1
    1844:	0f 92       	push	r0
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	0f 92       	push	r0
    184a:	11 24       	eor	r1, r1
    184c:	08 b6       	in	r0, 0x38	; 56
    184e:	0f 92       	push	r0
    1850:	18 be       	out	0x38, r1	; 56
    1852:	09 b6       	in	r0, 0x39	; 57
    1854:	0f 92       	push	r0
    1856:	19 be       	out	0x39, r1	; 57
    1858:	0b b6       	in	r0, 0x3b	; 59
    185a:	0f 92       	push	r0
    185c:	1b be       	out	0x3b, r1	; 59
    185e:	2f 93       	push	r18
    1860:	3f 93       	push	r19
    1862:	4f 93       	push	r20
    1864:	5f 93       	push	r21
    1866:	6f 93       	push	r22
    1868:	7f 93       	push	r23
    186a:	8f 93       	push	r24
    186c:	9f 93       	push	r25
    186e:	af 93       	push	r26
    1870:	bf 93       	push	r27
    1872:	ef 93       	push	r30
    1874:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    1876:	e0 91 88 20 	lds	r30, 0x2088	; 0x802088 <tc_tcf1_ovf_callback>
    187a:	f0 91 89 20 	lds	r31, 0x2089	; 0x802089 <tc_tcf1_ovf_callback+0x1>
    187e:	30 97       	sbiw	r30, 0x00	; 0
    1880:	09 f0       	breq	.+2      	; 0x1884 <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    1882:	19 95       	eicall
	}
}
    1884:	ff 91       	pop	r31
    1886:	ef 91       	pop	r30
    1888:	bf 91       	pop	r27
    188a:	af 91       	pop	r26
    188c:	9f 91       	pop	r25
    188e:	8f 91       	pop	r24
    1890:	7f 91       	pop	r23
    1892:	6f 91       	pop	r22
    1894:	5f 91       	pop	r21
    1896:	4f 91       	pop	r20
    1898:	3f 91       	pop	r19
    189a:	2f 91       	pop	r18
    189c:	0f 90       	pop	r0
    189e:	0b be       	out	0x3b, r0	; 59
    18a0:	0f 90       	pop	r0
    18a2:	09 be       	out	0x39, r0	; 57
    18a4:	0f 90       	pop	r0
    18a6:	08 be       	out	0x38, r0	; 56
    18a8:	0f 90       	pop	r0
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	0f 90       	pop	r0
    18ae:	1f 90       	pop	r1
    18b0:	18 95       	reti

000018b2 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    18b2:	1f 92       	push	r1
    18b4:	0f 92       	push	r0
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	0f 92       	push	r0
    18ba:	11 24       	eor	r1, r1
    18bc:	08 b6       	in	r0, 0x38	; 56
    18be:	0f 92       	push	r0
    18c0:	18 be       	out	0x38, r1	; 56
    18c2:	09 b6       	in	r0, 0x39	; 57
    18c4:	0f 92       	push	r0
    18c6:	19 be       	out	0x39, r1	; 57
    18c8:	0b b6       	in	r0, 0x3b	; 59
    18ca:	0f 92       	push	r0
    18cc:	1b be       	out	0x3b, r1	; 59
    18ce:	2f 93       	push	r18
    18d0:	3f 93       	push	r19
    18d2:	4f 93       	push	r20
    18d4:	5f 93       	push	r21
    18d6:	6f 93       	push	r22
    18d8:	7f 93       	push	r23
    18da:	8f 93       	push	r24
    18dc:	9f 93       	push	r25
    18de:	af 93       	push	r26
    18e0:	bf 93       	push	r27
    18e2:	ef 93       	push	r30
    18e4:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    18e6:	e0 91 86 20 	lds	r30, 0x2086	; 0x802086 <tc_tcf1_err_callback>
    18ea:	f0 91 87 20 	lds	r31, 0x2087	; 0x802087 <tc_tcf1_err_callback+0x1>
    18ee:	30 97       	sbiw	r30, 0x00	; 0
    18f0:	09 f0       	breq	.+2      	; 0x18f4 <__vector_115+0x42>
		tc_tcf1_err_callback();
    18f2:	19 95       	eicall
	}
}
    18f4:	ff 91       	pop	r31
    18f6:	ef 91       	pop	r30
    18f8:	bf 91       	pop	r27
    18fa:	af 91       	pop	r26
    18fc:	9f 91       	pop	r25
    18fe:	8f 91       	pop	r24
    1900:	7f 91       	pop	r23
    1902:	6f 91       	pop	r22
    1904:	5f 91       	pop	r21
    1906:	4f 91       	pop	r20
    1908:	3f 91       	pop	r19
    190a:	2f 91       	pop	r18
    190c:	0f 90       	pop	r0
    190e:	0b be       	out	0x3b, r0	; 59
    1910:	0f 90       	pop	r0
    1912:	09 be       	out	0x39, r0	; 57
    1914:	0f 90       	pop	r0
    1916:	08 be       	out	0x38, r0	; 56
    1918:	0f 90       	pop	r0
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	0f 90       	pop	r0
    191e:	1f 90       	pop	r1
    1920:	18 95       	reti

00001922 <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1922:	1f 92       	push	r1
    1924:	0f 92       	push	r0
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	0f 92       	push	r0
    192a:	11 24       	eor	r1, r1
    192c:	08 b6       	in	r0, 0x38	; 56
    192e:	0f 92       	push	r0
    1930:	18 be       	out	0x38, r1	; 56
    1932:	09 b6       	in	r0, 0x39	; 57
    1934:	0f 92       	push	r0
    1936:	19 be       	out	0x39, r1	; 57
    1938:	0b b6       	in	r0, 0x3b	; 59
    193a:	0f 92       	push	r0
    193c:	1b be       	out	0x3b, r1	; 59
    193e:	2f 93       	push	r18
    1940:	3f 93       	push	r19
    1942:	4f 93       	push	r20
    1944:	5f 93       	push	r21
    1946:	6f 93       	push	r22
    1948:	7f 93       	push	r23
    194a:	8f 93       	push	r24
    194c:	9f 93       	push	r25
    194e:	af 93       	push	r26
    1950:	bf 93       	push	r27
    1952:	ef 93       	push	r30
    1954:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1956:	e0 91 84 20 	lds	r30, 0x2084	; 0x802084 <tc_tcf1_cca_callback>
    195a:	f0 91 85 20 	lds	r31, 0x2085	; 0x802085 <tc_tcf1_cca_callback+0x1>
    195e:	30 97       	sbiw	r30, 0x00	; 0
    1960:	09 f0       	breq	.+2      	; 0x1964 <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1962:	19 95       	eicall
	}
}
    1964:	ff 91       	pop	r31
    1966:	ef 91       	pop	r30
    1968:	bf 91       	pop	r27
    196a:	af 91       	pop	r26
    196c:	9f 91       	pop	r25
    196e:	8f 91       	pop	r24
    1970:	7f 91       	pop	r23
    1972:	6f 91       	pop	r22
    1974:	5f 91       	pop	r21
    1976:	4f 91       	pop	r20
    1978:	3f 91       	pop	r19
    197a:	2f 91       	pop	r18
    197c:	0f 90       	pop	r0
    197e:	0b be       	out	0x3b, r0	; 59
    1980:	0f 90       	pop	r0
    1982:	09 be       	out	0x39, r0	; 57
    1984:	0f 90       	pop	r0
    1986:	08 be       	out	0x38, r0	; 56
    1988:	0f 90       	pop	r0
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	0f 90       	pop	r0
    198e:	1f 90       	pop	r1
    1990:	18 95       	reti

00001992 <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1992:	1f 92       	push	r1
    1994:	0f 92       	push	r0
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	0f 92       	push	r0
    199a:	11 24       	eor	r1, r1
    199c:	08 b6       	in	r0, 0x38	; 56
    199e:	0f 92       	push	r0
    19a0:	18 be       	out	0x38, r1	; 56
    19a2:	09 b6       	in	r0, 0x39	; 57
    19a4:	0f 92       	push	r0
    19a6:	19 be       	out	0x39, r1	; 57
    19a8:	0b b6       	in	r0, 0x3b	; 59
    19aa:	0f 92       	push	r0
    19ac:	1b be       	out	0x3b, r1	; 59
    19ae:	2f 93       	push	r18
    19b0:	3f 93       	push	r19
    19b2:	4f 93       	push	r20
    19b4:	5f 93       	push	r21
    19b6:	6f 93       	push	r22
    19b8:	7f 93       	push	r23
    19ba:	8f 93       	push	r24
    19bc:	9f 93       	push	r25
    19be:	af 93       	push	r26
    19c0:	bf 93       	push	r27
    19c2:	ef 93       	push	r30
    19c4:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    19c6:	e0 91 82 20 	lds	r30, 0x2082	; 0x802082 <__data_end>
    19ca:	f0 91 83 20 	lds	r31, 0x2083	; 0x802083 <__data_end+0x1>
    19ce:	30 97       	sbiw	r30, 0x00	; 0
    19d0:	09 f0       	breq	.+2      	; 0x19d4 <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    19d2:	19 95       	eicall
	}
}
    19d4:	ff 91       	pop	r31
    19d6:	ef 91       	pop	r30
    19d8:	bf 91       	pop	r27
    19da:	af 91       	pop	r26
    19dc:	9f 91       	pop	r25
    19de:	8f 91       	pop	r24
    19e0:	7f 91       	pop	r23
    19e2:	6f 91       	pop	r22
    19e4:	5f 91       	pop	r21
    19e6:	4f 91       	pop	r20
    19e8:	3f 91       	pop	r19
    19ea:	2f 91       	pop	r18
    19ec:	0f 90       	pop	r0
    19ee:	0b be       	out	0x3b, r0	; 59
    19f0:	0f 90       	pop	r0
    19f2:	09 be       	out	0x39, r0	; 57
    19f4:	0f 90       	pop	r0
    19f6:	08 be       	out	0x38, r0	; 56
    19f8:	0f 90       	pop	r0
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	0f 90       	pop	r0
    19fe:	1f 90       	pop	r1
    1a00:	18 95       	reti

00001a02 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1a02:	fc 01       	movw	r30, r24
    1a04:	91 81       	ldd	r25, Z+1	; 0x01
    1a06:	95 ff       	sbrs	r25, 5
    1a08:	fd cf       	rjmp	.-6      	; 0x1a04 <usart_putchar+0x2>
    1a0a:	60 83       	st	Z, r22
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	08 95       	ret

00001a12 <usart_getchar>:
    1a12:	fc 01       	movw	r30, r24
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	99 23       	and	r25, r25
    1a18:	ec f7       	brge	.-6      	; 0x1a14 <usart_getchar+0x2>
    1a1a:	80 81       	ld	r24, Z
    1a1c:	08 95       	ret

00001a1e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1a1e:	4f 92       	push	r4
    1a20:	5f 92       	push	r5
    1a22:	6f 92       	push	r6
    1a24:	7f 92       	push	r7
    1a26:	8f 92       	push	r8
    1a28:	9f 92       	push	r9
    1a2a:	af 92       	push	r10
    1a2c:	bf 92       	push	r11
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	7c 01       	movw	r14, r24
    1a3a:	4a 01       	movw	r8, r20
    1a3c:	5b 01       	movw	r10, r22
    1a3e:	28 01       	movw	r4, r16
    1a40:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1a42:	fc 01       	movw	r30, r24
    1a44:	84 81       	ldd	r24, Z+4	; 0x04
    1a46:	82 ff       	sbrs	r24, 2
    1a48:	16 c0       	rjmp	.+44     	; 0x1a76 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1a4a:	d9 01       	movw	r26, r18
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	68 94       	set
    1a50:	12 f8       	bld	r1, 2
    1a52:	b6 95       	lsr	r27
    1a54:	a7 95       	ror	r26
    1a56:	97 95       	ror	r25
    1a58:	87 95       	ror	r24
    1a5a:	16 94       	lsr	r1
    1a5c:	d1 f7       	brne	.-12     	; 0x1a52 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1a5e:	b9 01       	movw	r22, r18
    1a60:	a8 01       	movw	r20, r16
    1a62:	03 2e       	mov	r0, r19
    1a64:	36 e1       	ldi	r19, 0x16	; 22
    1a66:	76 95       	lsr	r23
    1a68:	67 95       	ror	r22
    1a6a:	57 95       	ror	r21
    1a6c:	47 95       	ror	r20
    1a6e:	3a 95       	dec	r19
    1a70:	d1 f7       	brne	.-12     	; 0x1a66 <usart_set_baudrate+0x48>
    1a72:	30 2d       	mov	r19, r0
    1a74:	15 c0       	rjmp	.+42     	; 0x1aa0 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1a76:	d9 01       	movw	r26, r18
    1a78:	c8 01       	movw	r24, r16
    1a7a:	68 94       	set
    1a7c:	13 f8       	bld	r1, 3
    1a7e:	b6 95       	lsr	r27
    1a80:	a7 95       	ror	r26
    1a82:	97 95       	ror	r25
    1a84:	87 95       	ror	r24
    1a86:	16 94       	lsr	r1
    1a88:	d1 f7       	brne	.-12     	; 0x1a7e <usart_set_baudrate+0x60>
		min_rate /= 2;
    1a8a:	b9 01       	movw	r22, r18
    1a8c:	a8 01       	movw	r20, r16
    1a8e:	03 2e       	mov	r0, r19
    1a90:	37 e1       	ldi	r19, 0x17	; 23
    1a92:	76 95       	lsr	r23
    1a94:	67 95       	ror	r22
    1a96:	57 95       	ror	r21
    1a98:	47 95       	ror	r20
    1a9a:	3a 95       	dec	r19
    1a9c:	d1 f7       	brne	.-12     	; 0x1a92 <usart_set_baudrate+0x74>
    1a9e:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1aa0:	88 15       	cp	r24, r8
    1aa2:	99 05       	cpc	r25, r9
    1aa4:	aa 05       	cpc	r26, r10
    1aa6:	bb 05       	cpc	r27, r11
    1aa8:	08 f4       	brcc	.+2      	; 0x1aac <usart_set_baudrate+0x8e>
    1aaa:	a6 c0       	rjmp	.+332    	; 0x1bf8 <usart_set_baudrate+0x1da>
    1aac:	84 16       	cp	r8, r20
    1aae:	95 06       	cpc	r9, r21
    1ab0:	a6 06       	cpc	r10, r22
    1ab2:	b7 06       	cpc	r11, r23
    1ab4:	08 f4       	brcc	.+2      	; 0x1ab8 <usart_set_baudrate+0x9a>
    1ab6:	a2 c0       	rjmp	.+324    	; 0x1bfc <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1ab8:	f7 01       	movw	r30, r14
    1aba:	84 81       	ldd	r24, Z+4	; 0x04
    1abc:	82 fd       	sbrc	r24, 2
    1abe:	04 c0       	rjmp	.+8      	; 0x1ac8 <usart_set_baudrate+0xaa>
		baud *= 2;
    1ac0:	88 0c       	add	r8, r8
    1ac2:	99 1c       	adc	r9, r9
    1ac4:	aa 1c       	adc	r10, r10
    1ac6:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1ac8:	c3 01       	movw	r24, r6
    1aca:	b2 01       	movw	r22, r4
    1acc:	a5 01       	movw	r20, r10
    1ace:	94 01       	movw	r18, r8
    1ad0:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1ad4:	2f 3f       	cpi	r18, 0xFF	; 255
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	41 05       	cpc	r20, r1
    1ada:	51 05       	cpc	r21, r1
    1adc:	08 f4       	brcc	.+2      	; 0x1ae0 <usart_set_baudrate+0xc2>
    1ade:	90 c0       	rjmp	.+288    	; 0x1c00 <usart_set_baudrate+0x1e2>
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	a0 e0       	ldi	r26, 0x00	; 0
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	c9 ef       	ldi	r28, 0xF9	; 249
    1aea:	05 c0       	rjmp	.+10     	; 0x1af6 <usart_set_baudrate+0xd8>
    1aec:	28 17       	cp	r18, r24
    1aee:	39 07       	cpc	r19, r25
    1af0:	4a 07       	cpc	r20, r26
    1af2:	5b 07       	cpc	r21, r27
    1af4:	58 f0       	brcs	.+22     	; 0x1b0c <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	aa 1f       	adc	r26, r26
    1afc:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1afe:	cd 3f       	cpi	r28, 0xFD	; 253
    1b00:	0c f4       	brge	.+2      	; 0x1b04 <usart_set_baudrate+0xe6>
			limit |= 1;
    1b02:	81 60       	ori	r24, 0x01	; 1
    1b04:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1b06:	c7 30       	cpi	r28, 0x07	; 7
    1b08:	89 f7       	brne	.-30     	; 0x1aec <usart_set_baudrate+0xce>
    1b0a:	4f c0       	rjmp	.+158    	; 0x1baa <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1b0c:	cc 23       	and	r28, r28
    1b0e:	0c f0       	brlt	.+2      	; 0x1b12 <usart_set_baudrate+0xf4>
    1b10:	4c c0       	rjmp	.+152    	; 0x1baa <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1b12:	d5 01       	movw	r26, r10
    1b14:	c4 01       	movw	r24, r8
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	aa 1f       	adc	r26, r26
    1b1c:	bb 1f       	adc	r27, r27
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	aa 1f       	adc	r26, r26
    1b24:	bb 1f       	adc	r27, r27
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	aa 1f       	adc	r26, r26
    1b2c:	bb 1f       	adc	r27, r27
    1b2e:	48 1a       	sub	r4, r24
    1b30:	59 0a       	sbc	r5, r25
    1b32:	6a 0a       	sbc	r6, r26
    1b34:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1b36:	ce 3f       	cpi	r28, 0xFE	; 254
    1b38:	f4 f4       	brge	.+60     	; 0x1b76 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1b3a:	8d ef       	ldi	r24, 0xFD	; 253
    1b3c:	9f ef       	ldi	r25, 0xFF	; 255
    1b3e:	8c 1b       	sub	r24, r28
    1b40:	91 09       	sbc	r25, r1
    1b42:	c7 fd       	sbrc	r28, 7
    1b44:	93 95       	inc	r25
    1b46:	04 c0       	rjmp	.+8      	; 0x1b50 <usart_set_baudrate+0x132>
    1b48:	44 0c       	add	r4, r4
    1b4a:	55 1c       	adc	r5, r5
    1b4c:	66 1c       	adc	r6, r6
    1b4e:	77 1c       	adc	r7, r7
    1b50:	8a 95       	dec	r24
    1b52:	d2 f7       	brpl	.-12     	; 0x1b48 <usart_set_baudrate+0x12a>
    1b54:	d5 01       	movw	r26, r10
    1b56:	c4 01       	movw	r24, r8
    1b58:	b6 95       	lsr	r27
    1b5a:	a7 95       	ror	r26
    1b5c:	97 95       	ror	r25
    1b5e:	87 95       	ror	r24
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	64 0d       	add	r22, r4
    1b66:	75 1d       	adc	r23, r5
    1b68:	86 1d       	adc	r24, r6
    1b6a:	97 1d       	adc	r25, r7
    1b6c:	a5 01       	movw	r20, r10
    1b6e:	94 01       	movw	r18, r8
    1b70:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodsi4>
    1b74:	37 c0       	rjmp	.+110    	; 0x1be4 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    1b76:	83 e0       	ldi	r24, 0x03	; 3
    1b78:	8c 0f       	add	r24, r28
    1b7a:	a5 01       	movw	r20, r10
    1b7c:	94 01       	movw	r18, r8
    1b7e:	04 c0       	rjmp	.+8      	; 0x1b88 <usart_set_baudrate+0x16a>
    1b80:	22 0f       	add	r18, r18
    1b82:	33 1f       	adc	r19, r19
    1b84:	44 1f       	adc	r20, r20
    1b86:	55 1f       	adc	r21, r21
    1b88:	8a 95       	dec	r24
    1b8a:	d2 f7       	brpl	.-12     	; 0x1b80 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    1b8c:	da 01       	movw	r26, r20
    1b8e:	c9 01       	movw	r24, r18
    1b90:	b6 95       	lsr	r27
    1b92:	a7 95       	ror	r26
    1b94:	97 95       	ror	r25
    1b96:	87 95       	ror	r24
    1b98:	bc 01       	movw	r22, r24
    1b9a:	cd 01       	movw	r24, r26
    1b9c:	64 0d       	add	r22, r4
    1b9e:	75 1d       	adc	r23, r5
    1ba0:	86 1d       	adc	r24, r6
    1ba2:	97 1d       	adc	r25, r7
    1ba4:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodsi4>
    1ba8:	1d c0       	rjmp	.+58     	; 0x1be4 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1baa:	83 e0       	ldi	r24, 0x03	; 3
    1bac:	8c 0f       	add	r24, r28
    1bae:	a5 01       	movw	r20, r10
    1bb0:	94 01       	movw	r18, r8
    1bb2:	04 c0       	rjmp	.+8      	; 0x1bbc <usart_set_baudrate+0x19e>
    1bb4:	22 0f       	add	r18, r18
    1bb6:	33 1f       	adc	r19, r19
    1bb8:	44 1f       	adc	r20, r20
    1bba:	55 1f       	adc	r21, r21
    1bbc:	8a 95       	dec	r24
    1bbe:	d2 f7       	brpl	.-12     	; 0x1bb4 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    1bc0:	da 01       	movw	r26, r20
    1bc2:	c9 01       	movw	r24, r18
    1bc4:	b6 95       	lsr	r27
    1bc6:	a7 95       	ror	r26
    1bc8:	97 95       	ror	r25
    1bca:	87 95       	ror	r24
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	64 0d       	add	r22, r4
    1bd2:	75 1d       	adc	r23, r5
    1bd4:	86 1d       	adc	r24, r6
    1bd6:	97 1d       	adc	r25, r7
    1bd8:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodsi4>
    1bdc:	21 50       	subi	r18, 0x01	; 1
    1bde:	31 09       	sbc	r19, r1
    1be0:	41 09       	sbc	r20, r1
    1be2:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1be4:	83 2f       	mov	r24, r19
    1be6:	8f 70       	andi	r24, 0x0F	; 15
    1be8:	c2 95       	swap	r28
    1bea:	c0 7f       	andi	r28, 0xF0	; 240
    1bec:	c8 2b       	or	r28, r24
    1bee:	f7 01       	movw	r30, r14
    1bf0:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1bf2:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	18 c0       	rjmp	.+48     	; 0x1c28 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	16 c0       	rjmp	.+44     	; 0x1c28 <usart_set_baudrate+0x20a>
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	14 c0       	rjmp	.+40     	; 0x1c28 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1c00:	d5 01       	movw	r26, r10
    1c02:	c4 01       	movw	r24, r8
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	aa 1f       	adc	r26, r26
    1c0a:	bb 1f       	adc	r27, r27
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	aa 1f       	adc	r26, r26
    1c12:	bb 1f       	adc	r27, r27
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	aa 1f       	adc	r26, r26
    1c1a:	bb 1f       	adc	r27, r27
    1c1c:	48 1a       	sub	r4, r24
    1c1e:	59 0a       	sbc	r5, r25
    1c20:	6a 0a       	sbc	r6, r26
    1c22:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1c24:	c9 ef       	ldi	r28, 0xF9	; 249
    1c26:	89 cf       	rjmp	.-238    	; 0x1b3a <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1c28:	cf 91       	pop	r28
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	bf 90       	pop	r11
    1c34:	af 90       	pop	r10
    1c36:	9f 90       	pop	r9
    1c38:	8f 90       	pop	r8
    1c3a:	7f 90       	pop	r7
    1c3c:	6f 90       	pop	r6
    1c3e:	5f 90       	pop	r5
    1c40:	4f 90       	pop	r4
    1c42:	08 95       	ret

00001c44 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1c44:	0f 93       	push	r16
    1c46:	1f 93       	push	r17
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	ec 01       	movw	r28, r24
    1c4e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <usart_init_rs232+0x12>
    1c54:	5d c1       	rjmp	.+698    	; 0x1f10 <usart_init_rs232+0x2cc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1c56:	80 3c       	cpi	r24, 0xC0	; 192
    1c58:	91 05       	cpc	r25, r1
    1c5a:	29 f4       	brne	.+10     	; 0x1c66 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1c5c:	60 e1       	ldi	r22, 0x10	; 16
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1c64:	55 c1       	rjmp	.+682    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1c66:	c0 34       	cpi	r28, 0x40	; 64
    1c68:	84 e0       	ldi	r24, 0x04	; 4
    1c6a:	d8 07       	cpc	r29, r24
    1c6c:	29 f4       	brne	.+10     	; 0x1c78 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1c6e:	68 e0       	ldi	r22, 0x08	; 8
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1c76:	4c c1       	rjmp	.+664    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1c78:	c1 15       	cp	r28, r1
    1c7a:	e4 e0       	ldi	r30, 0x04	; 4
    1c7c:	de 07       	cpc	r29, r30
    1c7e:	29 f4       	brne	.+10     	; 0x1c8a <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1c80:	64 e0       	ldi	r22, 0x04	; 4
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1c88:	43 c1       	rjmp	.+646    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1c8a:	c0 38       	cpi	r28, 0x80	; 128
    1c8c:	f1 e0       	ldi	r31, 0x01	; 1
    1c8e:	df 07       	cpc	r29, r31
    1c90:	29 f4       	brne	.+10     	; 0x1c9c <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1c92:	62 e0       	ldi	r22, 0x02	; 2
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1c9a:	3a c1       	rjmp	.+628    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1c9c:	c1 15       	cp	r28, r1
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	d8 07       	cpc	r29, r24
    1ca2:	29 f4       	brne	.+10     	; 0x1cae <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1ca4:	61 e0       	ldi	r22, 0x01	; 1
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1cac:	31 c1       	rjmp	.+610    	; 0x1f10 <usart_init_rs232+0x2cc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1cae:	c0 38       	cpi	r28, 0x80	; 128
    1cb0:	e3 e0       	ldi	r30, 0x03	; 3
    1cb2:	de 07       	cpc	r29, r30
    1cb4:	29 f4       	brne	.+10     	; 0x1cc0 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1cbe:	28 c1       	rjmp	.+592    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1cc0:	c0 39       	cpi	r28, 0x90	; 144
    1cc2:	f3 e0       	ldi	r31, 0x03	; 3
    1cc4:	df 07       	cpc	r29, r31
    1cc6:	29 f4       	brne	.+10     	; 0x1cd2 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1cc8:	61 e0       	ldi	r22, 0x01	; 1
    1cca:	82 e0       	ldi	r24, 0x02	; 2
    1ccc:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1cd0:	1f c1       	rjmp	.+574    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1cd2:	c1 15       	cp	r28, r1
    1cd4:	82 e0       	ldi	r24, 0x02	; 2
    1cd6:	d8 07       	cpc	r29, r24
    1cd8:	29 f4       	brne	.+10     	; 0x1ce4 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1cda:	62 e0       	ldi	r22, 0x02	; 2
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1ce2:	16 c1       	rjmp	.+556    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1ce4:	c0 34       	cpi	r28, 0x40	; 64
    1ce6:	e2 e0       	ldi	r30, 0x02	; 2
    1ce8:	de 07       	cpc	r29, r30
    1cea:	29 f4       	brne	.+10     	; 0x1cf6 <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1cec:	62 e0       	ldi	r22, 0x02	; 2
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1cf4:	0d c1       	rjmp	.+538    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1cf6:	c1 15       	cp	r28, r1
    1cf8:	f3 e0       	ldi	r31, 0x03	; 3
    1cfa:	df 07       	cpc	r29, r31
    1cfc:	29 f4       	brne	.+10     	; 0x1d08 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1cfe:	64 e0       	ldi	r22, 0x04	; 4
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d06:	04 c1       	rjmp	.+520    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1d08:	c0 32       	cpi	r28, 0x20	; 32
    1d0a:	83 e0       	ldi	r24, 0x03	; 3
    1d0c:	d8 07       	cpc	r29, r24
    1d0e:	29 f4       	brne	.+10     	; 0x1d1a <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1d10:	64 e0       	ldi	r22, 0x04	; 4
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d18:	fb c0       	rjmp	.+502    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1d1a:	c1 15       	cp	r28, r1
    1d1c:	e8 e0       	ldi	r30, 0x08	; 8
    1d1e:	de 07       	cpc	r29, r30
    1d20:	29 f4       	brne	.+10     	; 0x1d2c <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1d22:	61 e0       	ldi	r22, 0x01	; 1
    1d24:	83 e0       	ldi	r24, 0x03	; 3
    1d26:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d2a:	f2 c0       	rjmp	.+484    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1d2c:	c1 15       	cp	r28, r1
    1d2e:	f9 e0       	ldi	r31, 0x09	; 9
    1d30:	df 07       	cpc	r29, r31
    1d32:	29 f4       	brne	.+10     	; 0x1d3e <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1d34:	61 e0       	ldi	r22, 0x01	; 1
    1d36:	84 e0       	ldi	r24, 0x04	; 4
    1d38:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d3c:	e9 c0       	rjmp	.+466    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1d3e:	c1 15       	cp	r28, r1
    1d40:	8a e0       	ldi	r24, 0x0A	; 10
    1d42:	d8 07       	cpc	r29, r24
    1d44:	29 f4       	brne	.+10     	; 0x1d50 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1d46:	61 e0       	ldi	r22, 0x01	; 1
    1d48:	85 e0       	ldi	r24, 0x05	; 5
    1d4a:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d4e:	e0 c0       	rjmp	.+448    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1d50:	c1 15       	cp	r28, r1
    1d52:	eb e0       	ldi	r30, 0x0B	; 11
    1d54:	de 07       	cpc	r29, r30
    1d56:	29 f4       	brne	.+10     	; 0x1d62 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1d58:	61 e0       	ldi	r22, 0x01	; 1
    1d5a:	86 e0       	ldi	r24, 0x06	; 6
    1d5c:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d60:	d7 c0       	rjmp	.+430    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1d62:	c0 34       	cpi	r28, 0x40	; 64
    1d64:	f8 e0       	ldi	r31, 0x08	; 8
    1d66:	df 07       	cpc	r29, r31
    1d68:	29 f4       	brne	.+10     	; 0x1d74 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1d6a:	62 e0       	ldi	r22, 0x02	; 2
    1d6c:	83 e0       	ldi	r24, 0x03	; 3
    1d6e:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d72:	ce c0       	rjmp	.+412    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1d74:	c0 34       	cpi	r28, 0x40	; 64
    1d76:	89 e0       	ldi	r24, 0x09	; 9
    1d78:	d8 07       	cpc	r29, r24
    1d7a:	29 f4       	brne	.+10     	; 0x1d86 <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1d7c:	62 e0       	ldi	r22, 0x02	; 2
    1d7e:	84 e0       	ldi	r24, 0x04	; 4
    1d80:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d84:	c5 c0       	rjmp	.+394    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1d86:	c0 34       	cpi	r28, 0x40	; 64
    1d88:	ea e0       	ldi	r30, 0x0A	; 10
    1d8a:	de 07       	cpc	r29, r30
    1d8c:	29 f4       	brne	.+10     	; 0x1d98 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1d8e:	62 e0       	ldi	r22, 0x02	; 2
    1d90:	85 e0       	ldi	r24, 0x05	; 5
    1d92:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d96:	bc c0       	rjmp	.+376    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1d98:	c0 34       	cpi	r28, 0x40	; 64
    1d9a:	fb e0       	ldi	r31, 0x0B	; 11
    1d9c:	df 07       	cpc	r29, r31
    1d9e:	29 f4       	brne	.+10     	; 0x1daa <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1da0:	62 e0       	ldi	r22, 0x02	; 2
    1da2:	86 e0       	ldi	r24, 0x06	; 6
    1da4:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1da8:	b3 c0       	rjmp	.+358    	; 0x1f10 <usart_init_rs232+0x2cc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1daa:	c0 39       	cpi	r28, 0x90	; 144
    1dac:	88 e0       	ldi	r24, 0x08	; 8
    1dae:	d8 07       	cpc	r29, r24
    1db0:	29 f4       	brne	.+10     	; 0x1dbc <usart_init_rs232+0x178>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1db2:	64 e0       	ldi	r22, 0x04	; 4
    1db4:	83 e0       	ldi	r24, 0x03	; 3
    1db6:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1dba:	aa c0       	rjmp	.+340    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1dbc:	c0 39       	cpi	r28, 0x90	; 144
    1dbe:	e9 e0       	ldi	r30, 0x09	; 9
    1dc0:	de 07       	cpc	r29, r30
    1dc2:	29 f4       	brne	.+10     	; 0x1dce <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1dc4:	64 e0       	ldi	r22, 0x04	; 4
    1dc6:	84 e0       	ldi	r24, 0x04	; 4
    1dc8:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1dcc:	a1 c0       	rjmp	.+322    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1dce:	c0 39       	cpi	r28, 0x90	; 144
    1dd0:	fa e0       	ldi	r31, 0x0A	; 10
    1dd2:	df 07       	cpc	r29, r31
    1dd4:	29 f4       	brne	.+10     	; 0x1de0 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1dd6:	64 e0       	ldi	r22, 0x04	; 4
    1dd8:	85 e0       	ldi	r24, 0x05	; 5
    1dda:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1dde:	98 c0       	rjmp	.+304    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1de0:	c0 39       	cpi	r28, 0x90	; 144
    1de2:	8b e0       	ldi	r24, 0x0B	; 11
    1de4:	d8 07       	cpc	r29, r24
    1de6:	29 f4       	brne	.+10     	; 0x1df2 <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1de8:	64 e0       	ldi	r22, 0x04	; 4
    1dea:	86 e0       	ldi	r24, 0x06	; 6
    1dec:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1df0:	8f c0       	rjmp	.+286    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1df2:	c0 3c       	cpi	r28, 0xC0	; 192
    1df4:	e8 e0       	ldi	r30, 0x08	; 8
    1df6:	de 07       	cpc	r29, r30
    1df8:	29 f4       	brne	.+10     	; 0x1e04 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1dfa:	68 e0       	ldi	r22, 0x08	; 8
    1dfc:	83 e0       	ldi	r24, 0x03	; 3
    1dfe:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e02:	86 c0       	rjmp	.+268    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1e04:	c0 3c       	cpi	r28, 0xC0	; 192
    1e06:	f9 e0       	ldi	r31, 0x09	; 9
    1e08:	df 07       	cpc	r29, r31
    1e0a:	29 f4       	brne	.+10     	; 0x1e16 <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1e0c:	68 e0       	ldi	r22, 0x08	; 8
    1e0e:	84 e0       	ldi	r24, 0x04	; 4
    1e10:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e14:	7d c0       	rjmp	.+250    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1e16:	c0 3c       	cpi	r28, 0xC0	; 192
    1e18:	8a e0       	ldi	r24, 0x0A	; 10
    1e1a:	d8 07       	cpc	r29, r24
    1e1c:	29 f4       	brne	.+10     	; 0x1e28 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1e1e:	68 e0       	ldi	r22, 0x08	; 8
    1e20:	85 e0       	ldi	r24, 0x05	; 5
    1e22:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e26:	74 c0       	rjmp	.+232    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1e28:	c0 3c       	cpi	r28, 0xC0	; 192
    1e2a:	eb e0       	ldi	r30, 0x0B	; 11
    1e2c:	de 07       	cpc	r29, r30
    1e2e:	29 f4       	brne	.+10     	; 0x1e3a <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1e30:	68 e0       	ldi	r22, 0x08	; 8
    1e32:	86 e0       	ldi	r24, 0x06	; 6
    1e34:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e38:	6b c0       	rjmp	.+214    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1e3a:	c0 3a       	cpi	r28, 0xA0	; 160
    1e3c:	f8 e0       	ldi	r31, 0x08	; 8
    1e3e:	df 07       	cpc	r29, r31
    1e40:	29 f4       	brne	.+10     	; 0x1e4c <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1e42:	60 e1       	ldi	r22, 0x10	; 16
    1e44:	83 e0       	ldi	r24, 0x03	; 3
    1e46:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e4a:	62 c0       	rjmp	.+196    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1e4c:	c0 3a       	cpi	r28, 0xA0	; 160
    1e4e:	89 e0       	ldi	r24, 0x09	; 9
    1e50:	d8 07       	cpc	r29, r24
    1e52:	29 f4       	brne	.+10     	; 0x1e5e <usart_init_rs232+0x21a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1e54:	60 e1       	ldi	r22, 0x10	; 16
    1e56:	84 e0       	ldi	r24, 0x04	; 4
    1e58:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e5c:	59 c0       	rjmp	.+178    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1e5e:	c0 3a       	cpi	r28, 0xA0	; 160
    1e60:	ea e0       	ldi	r30, 0x0A	; 10
    1e62:	de 07       	cpc	r29, r30
    1e64:	29 f4       	brne	.+10     	; 0x1e70 <usart_init_rs232+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1e66:	60 e1       	ldi	r22, 0x10	; 16
    1e68:	85 e0       	ldi	r24, 0x05	; 5
    1e6a:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e6e:	50 c0       	rjmp	.+160    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1e70:	c0 3a       	cpi	r28, 0xA0	; 160
    1e72:	fb e0       	ldi	r31, 0x0B	; 11
    1e74:	df 07       	cpc	r29, r31
    1e76:	29 f4       	brne	.+10     	; 0x1e82 <usart_init_rs232+0x23e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1e78:	60 e1       	ldi	r22, 0x10	; 16
    1e7a:	86 e0       	ldi	r24, 0x06	; 6
    1e7c:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e80:	47 c0       	rjmp	.+142    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1e82:	c0 3b       	cpi	r28, 0xB0	; 176
    1e84:	88 e0       	ldi	r24, 0x08	; 8
    1e86:	d8 07       	cpc	r29, r24
    1e88:	29 f4       	brne	.+10     	; 0x1e94 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1e8a:	60 e2       	ldi	r22, 0x20	; 32
    1e8c:	83 e0       	ldi	r24, 0x03	; 3
    1e8e:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e92:	3e c0       	rjmp	.+124    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1e94:	c0 3b       	cpi	r28, 0xB0	; 176
    1e96:	e9 e0       	ldi	r30, 0x09	; 9
    1e98:	de 07       	cpc	r29, r30
    1e9a:	29 f4       	brne	.+10     	; 0x1ea6 <usart_init_rs232+0x262>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1e9c:	60 e2       	ldi	r22, 0x20	; 32
    1e9e:	84 e0       	ldi	r24, 0x04	; 4
    1ea0:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1ea4:	35 c0       	rjmp	.+106    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1ea6:	c0 3b       	cpi	r28, 0xB0	; 176
    1ea8:	fa e0       	ldi	r31, 0x0A	; 10
    1eaa:	df 07       	cpc	r29, r31
    1eac:	29 f4       	brne	.+10     	; 0x1eb8 <usart_init_rs232+0x274>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1eae:	60 e2       	ldi	r22, 0x20	; 32
    1eb0:	85 e0       	ldi	r24, 0x05	; 5
    1eb2:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1eb6:	2c c0       	rjmp	.+88     	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1eb8:	c0 3b       	cpi	r28, 0xB0	; 176
    1eba:	8b e0       	ldi	r24, 0x0B	; 11
    1ebc:	d8 07       	cpc	r29, r24
    1ebe:	29 f4       	brne	.+10     	; 0x1eca <usart_init_rs232+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1ec0:	60 e2       	ldi	r22, 0x20	; 32
    1ec2:	86 e0       	ldi	r24, 0x06	; 6
    1ec4:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1ec8:	23 c0       	rjmp	.+70     	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1eca:	c0 38       	cpi	r28, 0x80	; 128
    1ecc:	e4 e0       	ldi	r30, 0x04	; 4
    1ece:	de 07       	cpc	r29, r30
    1ed0:	29 f4       	brne	.+10     	; 0x1edc <usart_init_rs232+0x298>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1ed2:	60 e4       	ldi	r22, 0x40	; 64
    1ed4:	83 e0       	ldi	r24, 0x03	; 3
    1ed6:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1eda:	1a c0       	rjmp	.+52     	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1edc:	c0 39       	cpi	r28, 0x90	; 144
    1ede:	f4 e0       	ldi	r31, 0x04	; 4
    1ee0:	df 07       	cpc	r29, r31
    1ee2:	29 f4       	brne	.+10     	; 0x1eee <usart_init_rs232+0x2aa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1ee4:	60 e4       	ldi	r22, 0x40	; 64
    1ee6:	84 e0       	ldi	r24, 0x04	; 4
    1ee8:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1eec:	11 c0       	rjmp	.+34     	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1eee:	c0 3a       	cpi	r28, 0xA0	; 160
    1ef0:	84 e0       	ldi	r24, 0x04	; 4
    1ef2:	d8 07       	cpc	r29, r24
    1ef4:	29 f4       	brne	.+10     	; 0x1f00 <usart_init_rs232+0x2bc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1ef6:	60 e4       	ldi	r22, 0x40	; 64
    1ef8:	85 e0       	ldi	r24, 0x05	; 5
    1efa:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1efe:	08 c0       	rjmp	.+16     	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1f00:	c0 3b       	cpi	r28, 0xB0	; 176
    1f02:	e4 e0       	ldi	r30, 0x04	; 4
    1f04:	de 07       	cpc	r29, r30
    1f06:	21 f4       	brne	.+8      	; 0x1f10 <usart_init_rs232+0x2cc>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1f08:	60 e4       	ldi	r22, 0x40	; 64
    1f0a:	86 e0       	ldi	r24, 0x06	; 6
    1f0c:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	8f 73       	andi	r24, 0x3F	; 63
    1f14:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1f16:	f8 01       	movw	r30, r16
    1f18:	95 81       	ldd	r25, Z+5	; 0x05
    1f1a:	84 81       	ldd	r24, Z+4	; 0x04
    1f1c:	89 2b       	or	r24, r25
    1f1e:	96 81       	ldd	r25, Z+6	; 0x06
    1f20:	91 11       	cpse	r25, r1
    1f22:	98 e0       	ldi	r25, 0x08	; 8
    1f24:	89 2b       	or	r24, r25
    1f26:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1f28:	f8 01       	movw	r30, r16
    1f2a:	40 81       	ld	r20, Z
    1f2c:	51 81       	ldd	r21, Z+1	; 0x01
    1f2e:	62 81       	ldd	r22, Z+2	; 0x02
    1f30:	73 81       	ldd	r23, Z+3	; 0x03
    1f32:	00 e0       	ldi	r16, 0x00	; 0
    1f34:	18 e4       	ldi	r17, 0x48	; 72
    1f36:	28 ee       	ldi	r18, 0xE8	; 232
    1f38:	31 e0       	ldi	r19, 0x01	; 1
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	70 dd       	rcall	.-1312   	; 0x1a1e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	98 60       	ori	r25, 0x08	; 8
    1f42:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	90 61       	ori	r25, 0x10	; 16
    1f48:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	1f 91       	pop	r17
    1f50:	0f 91       	pop	r16
    1f52:	08 95       	ret

00001f54 <Get_altitude>:
#include "pressure.h"
#include <math.h>

extern int32_t TEMP;

float Get_altitude(uint32_t initial, uint32_t pressure){
    1f54:	4f 92       	push	r4
    1f56:	5f 92       	push	r5
    1f58:	6f 92       	push	r6
    1f5a:	7f 92       	push	r7
    1f5c:	8f 92       	push	r8
    1f5e:	9f 92       	push	r9
    1f60:	af 92       	push	r10
    1f62:	bf 92       	push	r11
    1f64:	cf 92       	push	r12
    1f66:	df 92       	push	r13
    1f68:	ef 92       	push	r14
    1f6a:	ff 92       	push	r15
    1f6c:	4b 01       	movw	r8, r22
    1f6e:	5c 01       	movw	r10, r24
	printf("pressure = %lu \n", pressure);
    1f70:	5f 93       	push	r21
    1f72:	4f 93       	push	r20
    1f74:	3f 93       	push	r19
    1f76:	2f 93       	push	r18
    1f78:	8d e0       	ldi	r24, 0x0D	; 13
    1f7a:	90 e2       	ldi	r25, 0x20	; 32
    1f7c:	9f 93       	push	r25
    1f7e:	8f 93       	push	r24
    1f80:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <printf>
	printf("temperature = %i \n", (uint16_t) TEMP);
    1f84:	ec ed       	ldi	r30, 0xDC	; 220
    1f86:	f0 e2       	ldi	r31, 0x20	; 32
    1f88:	81 81       	ldd	r24, Z+1	; 0x01
    1f8a:	8f 93       	push	r24
    1f8c:	80 81       	ld	r24, Z
    1f8e:	8f 93       	push	r24
    1f90:	8e e1       	ldi	r24, 0x1E	; 30
    1f92:	90 e2       	ldi	r25, 0x20	; 32
    1f94:	9f 93       	push	r25
    1f96:	8f 93       	push	r24
    1f98:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <printf>
	float altitude = (((287.058 * (((float)(TEMP)/100)+273.15)/9.8))*log((float)initial/get_pressure())*3.28);
    1f9c:	60 91 dc 20 	lds	r22, 0x20DC	; 0x8020dc <TEMP>
    1fa0:	70 91 dd 20 	lds	r23, 0x20DD	; 0x8020dd <TEMP+0x1>
    1fa4:	80 91 de 20 	lds	r24, 0x20DE	; 0x8020de <TEMP+0x2>
    1fa8:	90 91 df 20 	lds	r25, 0x20DF	; 0x8020df <TEMP+0x3>
    1fac:	b8 d6       	rcall	.+3440   	; 0x2d1e <__floatsisf>
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	48 ec       	ldi	r20, 0xC8	; 200
    1fb4:	52 e4       	ldi	r21, 0x42	; 66
    1fb6:	18 d6       	rcall	.+3120   	; 0x2be8 <__divsf3>
    1fb8:	23 e3       	ldi	r18, 0x33	; 51
    1fba:	33 e9       	ldi	r19, 0x93	; 147
    1fbc:	48 e8       	ldi	r20, 0x88	; 136
    1fbe:	53 e4       	ldi	r21, 0x43	; 67
    1fc0:	af d5       	rcall	.+2910   	; 0x2b20 <__addsf3>
    1fc2:	2d e6       	ldi	r18, 0x6D	; 109
    1fc4:	37 e8       	ldi	r19, 0x87	; 135
    1fc6:	4f e8       	ldi	r20, 0x8F	; 143
    1fc8:	53 e4       	ldi	r21, 0x43	; 67
    1fca:	7a d7       	rcall	.+3828   	; 0x2ec0 <__mulsf3>
    1fcc:	2d ec       	ldi	r18, 0xCD	; 205
    1fce:	3c ec       	ldi	r19, 0xCC	; 204
    1fd0:	4c e1       	ldi	r20, 0x1C	; 28
    1fd2:	51 e4       	ldi	r21, 0x41	; 65
    1fd4:	09 d6       	rcall	.+3090   	; 0x2be8 <__divsf3>
    1fd6:	6b 01       	movw	r12, r22
    1fd8:	7c 01       	movw	r14, r24
    1fda:	fa d0       	rcall	.+500    	; 0x21d0 <get_pressure>
    1fdc:	2b 01       	movw	r4, r22
    1fde:	3c 01       	movw	r6, r24
    1fe0:	c5 01       	movw	r24, r10
    1fe2:	b4 01       	movw	r22, r8
    1fe4:	9a d6       	rcall	.+3380   	; 0x2d1a <__floatunsisf>
    1fe6:	4b 01       	movw	r8, r22
    1fe8:	5c 01       	movw	r10, r24
    1fea:	c3 01       	movw	r24, r6
    1fec:	b2 01       	movw	r22, r4
    1fee:	95 d6       	rcall	.+3370   	; 0x2d1a <__floatunsisf>
    1ff0:	9b 01       	movw	r18, r22
    1ff2:	ac 01       	movw	r20, r24
    1ff4:	c5 01       	movw	r24, r10
    1ff6:	b4 01       	movw	r22, r8
    1ff8:	f7 d5       	rcall	.+3054   	; 0x2be8 <__divsf3>
    1ffa:	22 d7       	rcall	.+3652   	; 0x2e40 <log>
    1ffc:	9b 01       	movw	r18, r22
    1ffe:	ac 01       	movw	r20, r24
    2000:	c7 01       	movw	r24, r14
    2002:	b6 01       	movw	r22, r12
    2004:	5d d7       	rcall	.+3770   	; 0x2ec0 <__mulsf3>
    2006:	25 e8       	ldi	r18, 0x85	; 133
    2008:	3b ee       	ldi	r19, 0xEB	; 235
    200a:	41 e5       	ldi	r20, 0x51	; 81
    200c:	50 e4       	ldi	r21, 0x40	; 64
    200e:	58 d7       	rcall	.+3760   	; 0x2ec0 <__mulsf3>
    2010:	6b 01       	movw	r12, r22
	printf("altitude = %i \n", (int16_t)altitude);
    2012:	7c 01       	movw	r14, r24
    2014:	51 d6       	rcall	.+3234   	; 0x2cb8 <__fixsfsi>
    2016:	7f 93       	push	r23
    2018:	6f 93       	push	r22
    201a:	81 e3       	ldi	r24, 0x31	; 49
    201c:	90 e2       	ldi	r25, 0x20	; 32
    201e:	9f 93       	push	r25
    2020:	8f 93       	push	r24
    2022:	0e 94 ce 1d 	call	0x3b9c	; 0x3b9c <printf>
	return altitude;
    2026:	8d b7       	in	r24, 0x3d	; 61
    2028:	9e b7       	in	r25, 0x3e	; 62
    202a:	0e 96       	adiw	r24, 0x0e	; 14
    202c:	8d bf       	out	0x3d, r24	; 61
    202e:	9e bf       	out	0x3e, r25	; 62
}
    2030:	c7 01       	movw	r24, r14
    2032:	b6 01       	movw	r22, r12
    2034:	ff 90       	pop	r15
    2036:	ef 90       	pop	r14
    2038:	df 90       	pop	r13
    203a:	cf 90       	pop	r12
    203c:	bf 90       	pop	r11
    203e:	af 90       	pop	r10
    2040:	9f 90       	pop	r9
    2042:	8f 90       	pop	r8
    2044:	7f 90       	pop	r7
    2046:	6f 90       	pop	r6
    2048:	5f 90       	pop	r5
    204a:	4f 90       	pop	r4
    204c:	08 95       	ret

0000204e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    204e:	04 c0       	rjmp	.+8      	; 0x2058 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2050:	61 50       	subi	r22, 0x01	; 1
    2052:	71 09       	sbc	r23, r1
    2054:	81 09       	sbc	r24, r1
    2056:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2058:	61 15       	cp	r22, r1
    205a:	71 05       	cpc	r23, r1
    205c:	81 05       	cpc	r24, r1
    205e:	91 05       	cpc	r25, r1
    2060:	b9 f7       	brne	.-18     	; 0x2050 <__portable_avr_delay_cycles+0x2>
    2062:	08 95       	ret

00002064 <SPI_init>:
uint16_t c5;
uint16_t c6;


void SPI_init(void){
	PORTC.DIRSET = 0b10110000;
    2064:	e0 e4       	ldi	r30, 0x40	; 64
    2066:	f6 e0       	ldi	r31, 0x06	; 6
    2068:	80 eb       	ldi	r24, 0xB0	; 176
    206a:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = 0b01000000;
    206c:	90 e4       	ldi	r25, 0x40	; 64
    206e:	92 83       	std	Z+2, r25	; 0x02
	PORTC.OUTSET = 0b10110000;
    2070:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0b01010011;
    2072:	83 e5       	ldi	r24, 0x53	; 83
    2074:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    2078:	08 95       	ret

0000207a <SPI_write>:
}

void SPI_write(uint8_t data){
	SPIC.DATA = data;
    207a:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
    207e:	e0 ec       	ldi	r30, 0xC0	; 192
    2080:	f8 e0       	ldi	r31, 0x08	; 8
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	88 23       	and	r24, r24
    2086:	ec f7       	brge	.-6      	; 0x2082 <SPI_write+0x8>
}
    2088:	08 95       	ret

0000208a <spi_read>:

uint8_t spi_read (void){
	SPI_write(0xFF);
    208a:	8f ef       	ldi	r24, 0xFF	; 255
    208c:	f6 df       	rcall	.-20     	; 0x207a <SPI_write>
	return SPIC.DATA;
    208e:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    2092:	08 95       	ret

00002094 <prom_read>:
	//printf("c5: %u \n", c5);
	c6 = prom_read(0xAC);
	//printf("c6: %u \n", c6);
}

uint16_t prom_read(uint8_t command){
    2094:	ff 92       	push	r15
    2096:	0f 93       	push	r16
    2098:	1f 93       	push	r17
    209a:	cf 93       	push	r28
    209c:	df 93       	push	r29
	uint16_t data;
	PORTC.OUTCLR = 0b00010000;
    209e:	00 e4       	ldi	r16, 0x40	; 64
    20a0:	16 e0       	ldi	r17, 0x06	; 6
    20a2:	68 94       	set
    20a4:	ff 24       	eor	r15, r15
    20a6:	f4 f8       	bld	r15, 4
    20a8:	f8 01       	movw	r30, r16
	SPI_write(command);
	data = ((uint16_t)spi_read())<<8;	//Bitshifting
    20aa:	f6 82       	std	Z+6, r15	; 0x06
    20ac:	e6 df       	rcall	.-52     	; 0x207a <SPI_write>
    20ae:	ed df       	rcall	.-38     	; 0x208a <spi_read>
    20b0:	c8 2f       	mov	r28, r24
    20b2:	d0 e0       	ldi	r29, 0x00	; 0
	data += spi_read();
    20b4:	dc 2f       	mov	r29, r28
    20b6:	cc 27       	eor	r28, r28
    20b8:	e8 df       	rcall	.-48     	; 0x208a <spi_read>
    20ba:	c8 0f       	add	r28, r24
	PORTC.OUTSET = 0b00010000;
    20bc:	d1 1d       	adc	r29, r1
    20be:	f8 01       	movw	r30, r16
	delay_ms(1);
    20c0:	f5 82       	std	Z+5, r15	; 0x05
    20c2:	66 ed       	ldi	r22, 0xD6	; 214
    20c4:	74 e1       	ldi	r23, 0x14	; 20
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	90 e0       	ldi	r25, 0x00	; 0
	//printf("data: %lu \n", data);
	return data;
}
    20ca:	c1 df       	rcall	.-126    	; 0x204e <__portable_avr_delay_cycles>
    20cc:	ce 01       	movw	r24, r28
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	ff 90       	pop	r15
    20d8:	08 95       	ret

000020da <ms5607_init>:
uint8_t spi_read (void){
	SPI_write(0xFF);
	return SPIC.DATA;
}

void ms5607_init(void){
    20da:	1f 93       	push	r17
    20dc:	cf 93       	push	r28
    20de:	df 93       	push	r29
	PORTC.OUTCLR = 0b00010000;
    20e0:	c0 e4       	ldi	r28, 0x40	; 64
    20e2:	d6 e0       	ldi	r29, 0x06	; 6
    20e4:	10 e1       	ldi	r17, 0x10	; 16
    20e6:	1e 83       	std	Y+6, r17	; 0x06
	SPI_write(0x1E);
    20e8:	8e e1       	ldi	r24, 0x1E	; 30
    20ea:	c7 df       	rcall	.-114    	; 0x207a <SPI_write>
	PORTC.OUTSET = 0b00010000;
    20ec:	1d 83       	std	Y+5, r17	; 0x05
	delay_ms(10);
    20ee:	66 e5       	ldi	r22, 0x56	; 86
    20f0:	70 ed       	ldi	r23, 0xD0	; 208
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
	c1 = prom_read(0xA2);
    20f6:	ab df       	rcall	.-170    	; 0x204e <__portable_avr_delay_cycles>
    20f8:	82 ea       	ldi	r24, 0xA2	; 162
    20fa:	cc df       	rcall	.-104    	; 0x2094 <prom_read>
    20fc:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <c1>
    2100:	90 93 e9 20 	sts	0x20E9, r25	; 0x8020e9 <c1+0x1>
	//printf("c1: %u \n", c1);
	c2 = prom_read(0xA4);
    2104:	84 ea       	ldi	r24, 0xA4	; 164
    2106:	c6 df       	rcall	.-116    	; 0x2094 <prom_read>
    2108:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <c2>
    210c:	90 93 e5 20 	sts	0x20E5, r25	; 0x8020e5 <c2+0x1>
	//printf("c2: %u \n", c2);
	c3 = prom_read(0xA6);
    2110:	86 ea       	ldi	r24, 0xA6	; 166
    2112:	c0 df       	rcall	.-128    	; 0x2094 <prom_read>
    2114:	80 93 ea 20 	sts	0x20EA, r24	; 0x8020ea <c3>
    2118:	90 93 eb 20 	sts	0x20EB, r25	; 0x8020eb <c3+0x1>
	//printf("c3: %u \n", c3);
	c4 = prom_read(0xA8);
    211c:	88 ea       	ldi	r24, 0xA8	; 168
    211e:	ba df       	rcall	.-140    	; 0x2094 <prom_read>
    2120:	80 93 e2 20 	sts	0x20E2, r24	; 0x8020e2 <c4>
    2124:	90 93 e3 20 	sts	0x20E3, r25	; 0x8020e3 <c4+0x1>
	//printf("c4: %u \n", c4);
	c5 = prom_read(0xAA);
    2128:	8a ea       	ldi	r24, 0xAA	; 170
    212a:	b4 df       	rcall	.-152    	; 0x2094 <prom_read>
    212c:	80 93 e6 20 	sts	0x20E6, r24	; 0x8020e6 <c5>
    2130:	90 93 e7 20 	sts	0x20E7, r25	; 0x8020e7 <c5+0x1>
	//printf("c5: %u \n", c5);
	c6 = prom_read(0xAC);
    2134:	8c ea       	ldi	r24, 0xAC	; 172
    2136:	ae df       	rcall	.-164    	; 0x2094 <prom_read>
    2138:	80 93 e0 20 	sts	0x20E0, r24	; 0x8020e0 <c6>
    213c:	90 93 e1 20 	sts	0x20E1, r25	; 0x8020e1 <c6+0x1>
	//printf("c6: %u \n", c6);
}
    2140:	df 91       	pop	r29
    2142:	cf 91       	pop	r28
    2144:	1f 91       	pop	r17
    2146:	08 95       	ret

00002148 <data_read>:
	delay_ms(1);
	//printf("data: %lu \n", data);
	return data;
}

uint32_t data_read(uint8_t command){
    2148:	8f 92       	push	r8
    214a:	9f 92       	push	r9
    214c:	af 92       	push	r10
    214e:	bf 92       	push	r11
    2150:	cf 92       	push	r12
    2152:	df 92       	push	r13
    2154:	ef 92       	push	r14
    2156:	ff 92       	push	r15
    2158:	1f 93       	push	r17
    215a:	cf 93       	push	r28
    215c:	df 93       	push	r29
	uint32_t data;
	PORTC.OUTCLR = 0b00010000;
    215e:	c0 e4       	ldi	r28, 0x40	; 64
    2160:	d6 e0       	ldi	r29, 0x06	; 6
    2162:	10 e1       	ldi	r17, 0x10	; 16
	SPI_write(command);
    2164:	1e 83       	std	Y+6, r17	; 0x06
	PORTC.OUTSET = 0b00010000;
    2166:	89 df       	rcall	.-238    	; 0x207a <SPI_write>
	delay_ms(9);
    2168:	1d 83       	std	Y+5, r17	; 0x05
    216a:	61 e8       	ldi	r22, 0x81	; 129
    216c:	7b eb       	ldi	r23, 0xBB	; 187
    216e:	80 e0       	ldi	r24, 0x00	; 0
	PORTC.OUTCLR = 0b00010000;
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	6d df       	rcall	.-294    	; 0x204e <__portable_avr_delay_cycles>
    2174:	1e 83       	std	Y+6, r17	; 0x06
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	80 df       	rcall	.-256    	; 0x207a <SPI_write>
    217a:	87 df       	rcall	.-242    	; 0x208a <spi_read>
    217c:	c8 2e       	mov	r12, r24
    217e:	d1 2c       	mov	r13, r1
    2180:	e1 2c       	mov	r14, r1
    2182:	f1 2c       	mov	r15, r1
    2184:	56 01       	movw	r10, r12
    2186:	99 24       	eor	r9, r9
    2188:	88 24       	eor	r8, r8
    218a:	7f df       	rcall	.-258    	; 0x208a <spi_read>
    218c:	c8 2e       	mov	r12, r24
    218e:	d1 2c       	mov	r13, r1
    2190:	e1 2c       	mov	r14, r1
    2192:	f1 2c       	mov	r15, r1
    2194:	fe 2c       	mov	r15, r14
    2196:	ed 2c       	mov	r14, r13
    2198:	dc 2c       	mov	r13, r12
    219a:	cc 24       	eor	r12, r12
    219c:	c8 0c       	add	r12, r8
    219e:	d9 1c       	adc	r13, r9
    21a0:	ea 1c       	adc	r14, r10
    21a2:	fb 1c       	adc	r15, r11
    21a4:	72 df       	rcall	.-284    	; 0x208a <spi_read>
    21a6:	1d 83       	std	Y+5, r17	; 0x05
    21a8:	a7 01       	movw	r20, r14
    21aa:	96 01       	movw	r18, r12
    21ac:	28 0f       	add	r18, r24
    21ae:	31 1d       	adc	r19, r1
    21b0:	41 1d       	adc	r20, r1
    21b2:	51 1d       	adc	r21, r1
    21b4:	ca 01       	movw	r24, r20
    21b6:	b9 01       	movw	r22, r18
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	1f 91       	pop	r17
    21be:	ff 90       	pop	r15
    21c0:	ef 90       	pop	r14
    21c2:	df 90       	pop	r13
    21c4:	cf 90       	pop	r12
    21c6:	bf 90       	pop	r11
    21c8:	af 90       	pop	r10
    21ca:	9f 90       	pop	r9
    21cc:	8f 90       	pop	r8
    21ce:	08 95       	ret

000021d0 <get_pressure>:
    21d0:	2f 92       	push	r2
    21d2:	3f 92       	push	r3
    21d4:	4f 92       	push	r4
    21d6:	5f 92       	push	r5
    21d8:	6f 92       	push	r6
    21da:	7f 92       	push	r7
    21dc:	8f 92       	push	r8
    21de:	9f 92       	push	r9
    21e0:	af 92       	push	r10
    21e2:	bf 92       	push	r11
    21e4:	cf 92       	push	r12
    21e6:	df 92       	push	r13
    21e8:	ef 92       	push	r14
    21ea:	ff 92       	push	r15
    21ec:	0f 93       	push	r16
    21ee:	1f 93       	push	r17
    21f0:	cf 93       	push	r28
    21f2:	df 93       	push	r29
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
    21f8:	61 97       	sbiw	r28, 0x11	; 17
    21fa:	cd bf       	out	0x3d, r28	; 61
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	88 e4       	ldi	r24, 0x48	; 72
    2200:	a3 df       	rcall	.-186    	; 0x2148 <data_read>
    2202:	6d 83       	std	Y+5, r22	; 0x05
    2204:	7e 83       	std	Y+6, r23	; 0x06
    2206:	8f 83       	std	Y+7, r24	; 0x07
    2208:	98 87       	std	Y+8, r25	; 0x08
    220a:	88 e5       	ldi	r24, 0x58	; 88
    220c:	9d df       	rcall	.-198    	; 0x2148 <data_read>
    220e:	20 91 e6 20 	lds	r18, 0x20E6	; 0x8020e6 <c5>
    2212:	30 91 e7 20 	lds	r19, 0x20E7	; 0x8020e7 <c5+0x1>
    2216:	89 01       	movw	r16, r18
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	32 2f       	mov	r19, r18
    221e:	21 2f       	mov	r18, r17
    2220:	10 2f       	mov	r17, r16
    2222:	00 27       	eor	r16, r16
    2224:	6b 01       	movw	r12, r22
    2226:	7c 01       	movw	r14, r24
    2228:	c0 1a       	sub	r12, r16
    222a:	d1 0a       	sbc	r13, r17
    222c:	e2 0a       	sbc	r14, r18
    222e:	f3 0a       	sbc	r15, r19
    2230:	c9 82       	std	Y+1, r12	; 0x01
    2232:	da 82       	std	Y+2, r13	; 0x02
    2234:	eb 82       	std	Y+3, r14	; 0x03
    2236:	fc 82       	std	Y+4, r15	; 0x04
    2238:	20 90 e0 20 	lds	r2, 0x20E0	; 0x8020e0 <c6>
    223c:	30 90 e1 20 	lds	r3, 0x20E1	; 0x8020e1 <c6+0x1>
    2240:	d7 01       	movw	r26, r14
    2242:	c6 01       	movw	r24, r12
    2244:	bb 0f       	add	r27, r27
    2246:	88 0b       	sbc	r24, r24
    2248:	98 2f       	mov	r25, r24
    224a:	dc 01       	movw	r26, r24
    224c:	a9 80       	ldd	r10, Y+1	; 0x01
    224e:	ba 80       	ldd	r11, Y+2	; 0x02
    2250:	cb 80       	ldd	r12, Y+3	; 0x03
    2252:	dc 80       	ldd	r13, Y+4	; 0x04
    2254:	e8 2e       	mov	r14, r24
    2256:	f8 2e       	mov	r15, r24
    2258:	08 2f       	mov	r16, r24
    225a:	18 2f       	mov	r17, r24
    225c:	22 2d       	mov	r18, r2
    225e:	33 2d       	mov	r19, r3
    2260:	40 e0       	ldi	r20, 0x00	; 0
    2262:	50 e0       	ldi	r21, 0x00	; 0
    2264:	60 e0       	ldi	r22, 0x00	; 0
    2266:	70 e0       	ldi	r23, 0x00	; 0
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	0e 94 a5 1b 	call	0x374a	; 0x374a <__muldi3>
    2270:	89 8b       	std	Y+17, r24	; 0x11
    2272:	b2 2f       	mov	r27, r18
    2274:	f3 2f       	mov	r31, r19
    2276:	e4 2f       	mov	r30, r20
    2278:	95 2e       	mov	r9, r21
    227a:	86 2e       	mov	r8, r22
    227c:	77 2e       	mov	r7, r23
    227e:	a8 2e       	mov	r10, r24
    2280:	b9 2e       	mov	r11, r25
    2282:	a0 e0       	ldi	r26, 0x00	; 0
    2284:	0e 94 3f 1c 	call	0x387e	; 0x387e <__cmpdi2_s8>
    2288:	84 f4       	brge	.+32     	; 0x22aa <get_pressure+0xda>
    228a:	21 50       	subi	r18, 0x01	; 1
    228c:	31 09       	sbc	r19, r1
    228e:	40 48       	sbci	r20, 0x80	; 128
    2290:	5f 4f       	sbci	r21, 0xFF	; 255
    2292:	6f 4f       	sbci	r22, 0xFF	; 255
    2294:	7f 4f       	sbci	r23, 0xFF	; 255
    2296:	8f 4f       	sbci	r24, 0xFF	; 255
    2298:	9f 4f       	sbci	r25, 0xFF	; 255
    229a:	b2 2f       	mov	r27, r18
    229c:	f3 2f       	mov	r31, r19
    229e:	e4 2f       	mov	r30, r20
    22a0:	95 2e       	mov	r9, r21
    22a2:	86 2e       	mov	r8, r22
    22a4:	77 2e       	mov	r7, r23
    22a6:	a8 2e       	mov	r10, r24
    22a8:	b9 2e       	mov	r11, r25
    22aa:	2b 2f       	mov	r18, r27
    22ac:	3f 2f       	mov	r19, r31
    22ae:	4e 2f       	mov	r20, r30
    22b0:	59 2d       	mov	r21, r9
    22b2:	68 2d       	mov	r22, r8
    22b4:	77 2d       	mov	r23, r7
    22b6:	8a 2d       	mov	r24, r10
    22b8:	9b 2d       	mov	r25, r11
    22ba:	07 e1       	ldi	r16, 0x17	; 23
    22bc:	0e 94 0f 1c 	call	0x381e	; 0x381e <__ashrdi3>
    22c0:	82 2e       	mov	r8, r18
    22c2:	93 2e       	mov	r9, r19
    22c4:	00 e3       	ldi	r16, 0x30	; 48
    22c6:	80 1a       	sub	r8, r16
    22c8:	08 ef       	ldi	r16, 0xF8	; 248
    22ca:	90 0a       	sbc	r9, r16
    22cc:	09 2c       	mov	r0, r9
    22ce:	00 0c       	add	r0, r0
    22d0:	aa 08       	sbc	r10, r10
    22d2:	bb 08       	sbc	r11, r11
    22d4:	80 92 dc 20 	sts	0x20DC, r8	; 0x8020dc <TEMP>
    22d8:	90 92 dd 20 	sts	0x20DD, r9	; 0x8020dd <TEMP+0x1>
    22dc:	a0 92 de 20 	sts	0x20DE, r10	; 0x8020de <TEMP+0x2>
    22e0:	b0 92 df 20 	sts	0x20DF, r11	; 0x8020df <TEMP+0x3>
    22e4:	a0 91 ea 20 	lds	r26, 0x20EA	; 0x8020ea <c3>
    22e8:	b0 91 eb 20 	lds	r27, 0x20EB	; 0x8020eb <c3+0x1>
    22ec:	29 81       	ldd	r18, Y+1	; 0x01
    22ee:	3a 81       	ldd	r19, Y+2	; 0x02
    22f0:	4b 81       	ldd	r20, Y+3	; 0x03
    22f2:	5c 81       	ldd	r21, Y+4	; 0x04
    22f4:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__muluhisi3>
    22f8:	4b 01       	movw	r8, r22
    22fa:	5c 01       	movw	r10, r24
    22fc:	99 23       	and	r25, r25
    22fe:	2c f4       	brge	.+10     	; 0x230a <get_pressure+0x13a>
    2300:	1f e7       	ldi	r17, 0x7F	; 127
    2302:	81 0e       	add	r8, r17
    2304:	91 1c       	adc	r9, r1
    2306:	a1 1c       	adc	r10, r1
    2308:	b1 1c       	adc	r11, r1
    230a:	24 01       	movw	r4, r8
    230c:	35 01       	movw	r6, r10
    230e:	68 94       	set
    2310:	16 f8       	bld	r1, 6
    2312:	75 94       	asr	r7
    2314:	67 94       	ror	r6
    2316:	57 94       	ror	r5
    2318:	47 94       	ror	r4
    231a:	16 94       	lsr	r1
    231c:	d1 f7       	brne	.-12     	; 0x2312 <get_pressure+0x142>
    231e:	bb 0c       	add	r11, r11
    2320:	88 08       	sbc	r8, r8
    2322:	98 2c       	mov	r9, r8
    2324:	54 01       	movw	r10, r8
    2326:	80 91 e8 20 	lds	r24, 0x20E8	; 0x8020e8 <c1>
    232a:	90 91 e9 20 	lds	r25, 0x20E9	; 0x8020e9 <c1+0x1>
    232e:	6c 01       	movw	r12, r24
    2330:	e1 2c       	mov	r14, r1
    2332:	f1 2c       	mov	r15, r1
    2334:	00 e0       	ldi	r16, 0x00	; 0
    2336:	10 e0       	ldi	r17, 0x00	; 0
    2338:	98 01       	movw	r18, r16
    233a:	89 87       	std	Y+9, r24	; 0x09
    233c:	da 86       	std	Y+10, r13	; 0x0a
    233e:	eb 86       	std	Y+11, r14	; 0x0b
    2340:	fc 86       	std	Y+12, r15	; 0x0c
    2342:	0d 87       	std	Y+13, r16	; 0x0d
    2344:	1e 87       	std	Y+14, r17	; 0x0e
    2346:	2f 87       	std	Y+15, r18	; 0x0f
    2348:	38 8b       	std	Y+16, r19	; 0x10
    234a:	28 2f       	mov	r18, r24
    234c:	3d 2d       	mov	r19, r13
    234e:	40 e0       	ldi	r20, 0x00	; 0
    2350:	50 e0       	ldi	r21, 0x00	; 0
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	70 e0       	ldi	r23, 0x00	; 0
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	00 e1       	ldi	r16, 0x10	; 16
    235c:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__ashldi3>
    2360:	f2 2f       	mov	r31, r18
    2362:	e3 2f       	mov	r30, r19
    2364:	c4 2e       	mov	r12, r20
    2366:	d5 2e       	mov	r13, r21
    2368:	e6 2e       	mov	r14, r22
    236a:	f7 2e       	mov	r15, r23
    236c:	08 2f       	mov	r16, r24
    236e:	19 2f       	mov	r17, r25
    2370:	24 2d       	mov	r18, r4
    2372:	35 2d       	mov	r19, r5
    2374:	46 2d       	mov	r20, r6
    2376:	57 2d       	mov	r21, r7
    2378:	68 2d       	mov	r22, r8
    237a:	78 2d       	mov	r23, r8
    237c:	88 2d       	mov	r24, r8
    237e:	98 2d       	mov	r25, r8
    2380:	af 2e       	mov	r10, r31
    2382:	be 2e       	mov	r11, r30
    2384:	0e 94 2d 1c 	call	0x385a	; 0x385a <__adddi3>
    2388:	ed 80       	ldd	r14, Y+5	; 0x05
    238a:	fe 80       	ldd	r15, Y+6	; 0x06
    238c:	0f 81       	ldd	r16, Y+7	; 0x07
    238e:	18 85       	ldd	r17, Y+8	; 0x08
    2390:	17 01       	movw	r2, r14
    2392:	28 01       	movw	r4, r16
    2394:	ae 2c       	mov	r10, r14
    2396:	b3 2c       	mov	r11, r3
    2398:	c4 2c       	mov	r12, r4
    239a:	d5 2c       	mov	r13, r5
    239c:	e1 2c       	mov	r14, r1
    239e:	f1 2c       	mov	r15, r1
    23a0:	00 e0       	ldi	r16, 0x00	; 0
    23a2:	10 e0       	ldi	r17, 0x00	; 0
    23a4:	0e 94 a5 1b 	call	0x374a	; 0x374a <__muldi3>
    23a8:	12 2f       	mov	r17, r18
    23aa:	39 87       	std	Y+9, r19	; 0x09
    23ac:	4d 83       	std	Y+5, r20	; 0x05
    23ae:	b5 2f       	mov	r27, r21
    23b0:	f6 2f       	mov	r31, r22
    23b2:	e7 2f       	mov	r30, r23
    23b4:	78 2e       	mov	r7, r24
    23b6:	89 2e       	mov	r8, r25
    23b8:	a0 e0       	ldi	r26, 0x00	; 0
    23ba:	0e 94 3f 1c 	call	0x387e	; 0x387e <__cmpdi2_s8>
    23be:	84 f4       	brge	.+32     	; 0x23e0 <get_pressure+0x210>
    23c0:	21 50       	subi	r18, 0x01	; 1
    23c2:	31 09       	sbc	r19, r1
    23c4:	40 4e       	sbci	r20, 0xE0	; 224
    23c6:	5f 4f       	sbci	r21, 0xFF	; 255
    23c8:	6f 4f       	sbci	r22, 0xFF	; 255
    23ca:	7f 4f       	sbci	r23, 0xFF	; 255
    23cc:	8f 4f       	sbci	r24, 0xFF	; 255
    23ce:	9f 4f       	sbci	r25, 0xFF	; 255
    23d0:	12 2f       	mov	r17, r18
    23d2:	39 87       	std	Y+9, r19	; 0x09
    23d4:	4d 83       	std	Y+5, r20	; 0x05
    23d6:	b5 2f       	mov	r27, r21
    23d8:	f6 2f       	mov	r31, r22
    23da:	e7 2f       	mov	r30, r23
    23dc:	78 2e       	mov	r7, r24
    23de:	89 2e       	mov	r8, r25
    23e0:	21 2f       	mov	r18, r17
    23e2:	39 85       	ldd	r19, Y+9	; 0x09
    23e4:	4d 81       	ldd	r20, Y+5	; 0x05
    23e6:	5b 2f       	mov	r21, r27
    23e8:	6f 2f       	mov	r22, r31
    23ea:	7e 2f       	mov	r23, r30
    23ec:	87 2d       	mov	r24, r7
    23ee:	98 2d       	mov	r25, r8
    23f0:	05 e1       	ldi	r16, 0x15	; 21
    23f2:	0e 94 0f 1c 	call	0x381e	; 0x381e <__ashrdi3>
    23f6:	52 2e       	mov	r5, r18
    23f8:	63 2e       	mov	r6, r19
    23fa:	74 2e       	mov	r7, r20
    23fc:	59 8b       	std	Y+17, r21	; 0x11
    23fe:	69 87       	std	Y+9, r22	; 0x09
    2400:	f7 2f       	mov	r31, r23
    2402:	e8 2f       	mov	r30, r24
    2404:	49 2e       	mov	r4, r25
    2406:	a0 91 e2 20 	lds	r26, 0x20E2	; 0x8020e2 <c4>
    240a:	b0 91 e3 20 	lds	r27, 0x20E3	; 0x8020e3 <c4+0x1>
    240e:	29 81       	ldd	r18, Y+1	; 0x01
    2410:	3a 81       	ldd	r19, Y+2	; 0x02
    2412:	4b 81       	ldd	r20, Y+3	; 0x03
    2414:	5c 81       	ldd	r21, Y+4	; 0x04
    2416:	0e 94 9b 1b 	call	0x3736	; 0x3736 <__muluhisi3>
    241a:	4b 01       	movw	r8, r22
    241c:	5c 01       	movw	r10, r24
    241e:	99 23       	and	r25, r25
    2420:	2c f4       	brge	.+10     	; 0x242c <get_pressure+0x25c>
    2422:	0f e3       	ldi	r16, 0x3F	; 63
    2424:	80 0e       	add	r8, r16
    2426:	91 1c       	adc	r9, r1
    2428:	a1 1c       	adc	r10, r1
    242a:	b1 1c       	adc	r11, r1
    242c:	75 01       	movw	r14, r10
    242e:	64 01       	movw	r12, r8
    2430:	68 94       	set
    2432:	15 f8       	bld	r1, 5
    2434:	f5 94       	asr	r15
    2436:	e7 94       	ror	r14
    2438:	d7 94       	ror	r13
    243a:	c7 94       	ror	r12
    243c:	16 94       	lsr	r1
    243e:	d1 f7       	brne	.-12     	; 0x2434 <get_pressure+0x264>
    2440:	bb 0c       	add	r11, r11
    2442:	88 08       	sbc	r8, r8
    2444:	98 2c       	mov	r9, r8
    2446:	54 01       	movw	r10, r8
    2448:	20 91 e4 20 	lds	r18, 0x20E4	; 0x8020e4 <c2>
    244c:	30 91 e5 20 	lds	r19, 0x20E5	; 0x8020e5 <c2+0x1>
    2450:	a9 01       	movw	r20, r18
    2452:	35 2f       	mov	r19, r21
    2454:	40 e0       	ldi	r20, 0x00	; 0
    2456:	50 e0       	ldi	r21, 0x00	; 0
    2458:	60 e0       	ldi	r22, 0x00	; 0
    245a:	70 e0       	ldi	r23, 0x00	; 0
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	01 e1       	ldi	r16, 0x11	; 17
    2462:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__ashldi3>
    2466:	22 2e       	mov	r2, r18
    2468:	33 2e       	mov	r3, r19
    246a:	49 83       	std	Y+1, r20	; 0x01
    246c:	5d 83       	std	Y+5, r21	; 0x05
    246e:	b6 2f       	mov	r27, r22
    2470:	a7 2f       	mov	r26, r23
    2472:	08 2f       	mov	r16, r24
    2474:	19 2f       	mov	r17, r25
    2476:	2c 2d       	mov	r18, r12
    2478:	3d 2d       	mov	r19, r13
    247a:	4e 2d       	mov	r20, r14
    247c:	5f 2d       	mov	r21, r15
    247e:	68 2d       	mov	r22, r8
    2480:	78 2d       	mov	r23, r8
    2482:	88 2d       	mov	r24, r8
    2484:	98 2d       	mov	r25, r8
    2486:	a2 2c       	mov	r10, r2
    2488:	b3 2c       	mov	r11, r3
    248a:	c9 80       	ldd	r12, Y+1	; 0x01
    248c:	dd 80       	ldd	r13, Y+5	; 0x05
    248e:	eb 2e       	mov	r14, r27
    2490:	fa 2e       	mov	r15, r26
    2492:	0e 94 2d 1c 	call	0x385a	; 0x385a <__adddi3>
    2496:	a2 2e       	mov	r10, r18
    2498:	b3 2e       	mov	r11, r19
    249a:	c4 2e       	mov	r12, r20
    249c:	d5 2e       	mov	r13, r21
    249e:	e6 2e       	mov	r14, r22
    24a0:	f7 2e       	mov	r15, r23
    24a2:	08 2f       	mov	r16, r24
    24a4:	19 2f       	mov	r17, r25
    24a6:	25 2d       	mov	r18, r5
    24a8:	36 2d       	mov	r19, r6
    24aa:	47 2d       	mov	r20, r7
    24ac:	59 89       	ldd	r21, Y+17	; 0x11
    24ae:	69 85       	ldd	r22, Y+9	; 0x09
    24b0:	7f 2f       	mov	r23, r31
    24b2:	8e 2f       	mov	r24, r30
    24b4:	94 2d       	mov	r25, r4
    24b6:	0e 94 36 1c 	call	0x386c	; 0x386c <__subdi3>
    24ba:	12 2f       	mov	r17, r18
    24bc:	3d 83       	std	Y+5, r19	; 0x05
    24be:	49 83       	std	Y+1, r20	; 0x01
    24c0:	b5 2f       	mov	r27, r21
    24c2:	f6 2f       	mov	r31, r22
    24c4:	e7 2f       	mov	r30, r23
    24c6:	78 2e       	mov	r7, r24
    24c8:	89 2e       	mov	r8, r25
    24ca:	a0 e0       	ldi	r26, 0x00	; 0
    24cc:	0e 94 3f 1c 	call	0x387e	; 0x387e <__cmpdi2_s8>
    24d0:	84 f4       	brge	.+32     	; 0x24f2 <get_pressure+0x322>
    24d2:	21 50       	subi	r18, 0x01	; 1
    24d4:	30 48       	sbci	r19, 0x80	; 128
    24d6:	4f 4f       	sbci	r20, 0xFF	; 255
    24d8:	5f 4f       	sbci	r21, 0xFF	; 255
    24da:	6f 4f       	sbci	r22, 0xFF	; 255
    24dc:	7f 4f       	sbci	r23, 0xFF	; 255
    24de:	8f 4f       	sbci	r24, 0xFF	; 255
    24e0:	9f 4f       	sbci	r25, 0xFF	; 255
    24e2:	12 2f       	mov	r17, r18
    24e4:	3d 83       	std	Y+5, r19	; 0x05
    24e6:	49 83       	std	Y+1, r20	; 0x01
    24e8:	b5 2f       	mov	r27, r21
    24ea:	f6 2f       	mov	r31, r22
    24ec:	e7 2f       	mov	r30, r23
    24ee:	78 2e       	mov	r7, r24
    24f0:	89 2e       	mov	r8, r25
    24f2:	21 2f       	mov	r18, r17
    24f4:	3d 81       	ldd	r19, Y+5	; 0x05
    24f6:	49 81       	ldd	r20, Y+1	; 0x01
    24f8:	5b 2f       	mov	r21, r27
    24fa:	6f 2f       	mov	r22, r31
    24fc:	7e 2f       	mov	r23, r30
    24fe:	87 2d       	mov	r24, r7
    2500:	98 2d       	mov	r25, r8
    2502:	0f e0       	ldi	r16, 0x0F	; 15
    2504:	0e 94 0f 1c 	call	0x381e	; 0x381e <__ashrdi3>
    2508:	62 2f       	mov	r22, r18
    250a:	73 2f       	mov	r23, r19
    250c:	84 2f       	mov	r24, r20
    250e:	95 2f       	mov	r25, r21
    2510:	61 96       	adiw	r28, 0x11	; 17
    2512:	cd bf       	out	0x3d, r28	; 61
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	df 91       	pop	r29
    2518:	cf 91       	pop	r28
    251a:	1f 91       	pop	r17
    251c:	0f 91       	pop	r16
    251e:	ff 90       	pop	r15
    2520:	ef 90       	pop	r14
    2522:	df 90       	pop	r13
    2524:	cf 90       	pop	r12
    2526:	bf 90       	pop	r11
    2528:	af 90       	pop	r10
    252a:	9f 90       	pop	r9
    252c:	8f 90       	pop	r8
    252e:	7f 90       	pop	r7
    2530:	6f 90       	pop	r6
    2532:	5f 90       	pop	r5
    2534:	4f 90       	pop	r4
    2536:	3f 90       	pop	r3
    2538:	2f 90       	pop	r2
    253a:	08 95       	ret

0000253c <adc_init>:
#include <asf.h>
#include <math.h>
#include "thermistor.h"


void adc_init(void){	//This is for PA0
    253c:	ff 92       	push	r15
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
	PORTA.DIRCLR = 0b00000001;
    2546:	e0 e0       	ldi	r30, 0x00	; 0
    2548:	f6 e0       	ldi	r31, 0x06	; 6
    254a:	ff 24       	eor	r15, r15
    254c:	f3 94       	inc	r15
    254e:	f2 82       	std	Z+2, r15	; 0x02
	PORTA.DIR = 0b11111110;
    2550:	8e ef       	ldi	r24, 0xFE	; 254
    2552:	80 83       	st	Z, r24
	ADCA.CTRLA = 0b00000001;
    2554:	c0 e0       	ldi	r28, 0x00	; 0
    2556:	d2 e0       	ldi	r29, 0x02	; 2
    2558:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000;
    255a:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000;
    255c:	80 e1       	ldi	r24, 0x10	; 16
    255e:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101;
    2560:	85 e0       	ldi	r24, 0x05	; 5
    2562:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    2564:	61 e2       	ldi	r22, 0x21	; 33
    2566:	70 e0       	ldi	r23, 0x00	; 0
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	0e 94 37 04 	call	0x86e	; 0x86e <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    256e:	08 2f       	mov	r16, r24
    2570:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    2572:	10 2f       	mov	r17, r16
    2574:	00 27       	eor	r16, r16
    2576:	60 e2       	ldi	r22, 0x20	; 32
    2578:	70 e0       	ldi	r23, 0x00	; 0
    257a:	82 e0       	ldi	r24, 0x02	; 2
    257c:	0e 94 37 04 	call	0x86e	; 0x86e <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    2580:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    2582:	0c 87       	std	Y+12, r16	; 0x0c
    2584:	1d 87       	std	Y+13, r17	; 0x0d
	
	ADCA.CH0.CTRL = 0b00000001;
    2586:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000000;
    2588:	19 a2       	std	Y+33, r1	; 0x21
}
    258a:	df 91       	pop	r29
    258c:	cf 91       	pop	r28
    258e:	1f 91       	pop	r17
    2590:	0f 91       	pop	r16
    2592:	ff 90       	pop	r15
    2594:	08 95       	ret

00002596 <timer_founter_init>:
 */ 

#include "Drivers/timer_counter.h"
#include <asf.h>

void timer_founter_init(uint16_t period, uint16_t duty_cycle){
    2596:	cf 92       	push	r12
    2598:	df 92       	push	r13
    259a:	ef 92       	push	r14
    259c:	ff 92       	push	r15
    259e:	0f 93       	push	r16
    25a0:	1f 93       	push	r17
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
	PORTF.DIRSET = 0b00000001;
    25a6:	21 e0       	ldi	r18, 0x01	; 1
    25a8:	20 93 a1 06 	sts	0x06A1, r18	; 0x8006a1 <__TEXT_REGION_LENGTH__+0x7006a1>
	TCF0.CTRLA = 0b00000111;
    25ac:	c0 e0       	ldi	r28, 0x00	; 0
    25ae:	db e0       	ldi	r29, 0x0B	; 11
    25b0:	27 e0       	ldi	r18, 0x07	; 7
    25b2:	28 83       	st	Y, r18
	TCF0.CTRLB = 0b00010011;
    25b4:	23 e1       	ldi	r18, 0x13	; 19
    25b6:	29 83       	std	Y+1, r18	; 0x01
	TCF0.PER = (uint16_t)(period);
    25b8:	8e a3       	std	Y+38, r24	; 0x26
    25ba:	9f a3       	std	Y+39, r25	; 0x27
	TCF0.CCA = TCF0.PER*((float)duty_cycle/100);
    25bc:	0e a1       	ldd	r16, Y+38	; 0x26
    25be:	1f a1       	ldd	r17, Y+39	; 0x27
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	aa d3       	rcall	.+1876   	; 0x2d1a <__floatunsisf>
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	48 ec       	ldi	r20, 0xC8	; 200
    25cc:	52 e4       	ldi	r21, 0x42	; 66
    25ce:	0c d3       	rcall	.+1560   	; 0x2be8 <__divsf3>
    25d0:	6b 01       	movw	r12, r22
    25d2:	7c 01       	movw	r14, r24
    25d4:	b8 01       	movw	r22, r16
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	9f d3       	rcall	.+1854   	; 0x2d1a <__floatunsisf>
    25dc:	9b 01       	movw	r18, r22
    25de:	ac 01       	movw	r20, r24
    25e0:	c7 01       	movw	r24, r14
    25e2:	b6 01       	movw	r22, r12
    25e4:	6d d4       	rcall	.+2266   	; 0x2ec0 <__mulsf3>
    25e6:	6d d3       	rcall	.+1754   	; 0x2cc2 <__fixunssfsi>
    25e8:	68 a7       	std	Y+40, r22	; 0x28
    25ea:	79 a7       	std	Y+41, r23	; 0x29
	//TCF0.CCB = TCF0.PER-(TCF0.PER/10);
	//TCF0.CCC = TCF0.PER-(TCF0.PER/10);
	//TCF0.CCD = TCF0.PER-(TCF0.PER/10);
}
    25ec:	df 91       	pop	r29
    25ee:	cf 91       	pop	r28
    25f0:	1f 91       	pop	r17
    25f2:	0f 91       	pop	r16
    25f4:	ff 90       	pop	r15
    25f6:	ef 90       	pop	r14
    25f8:	df 90       	pop	r13
    25fa:	cf 90       	pop	r12
    25fc:	08 95       	ret

000025fe <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
	*data = usart_getchar(usart);
    2602:	eb 01       	movw	r28, r22
    2604:	06 da       	rcall	.-3060   	; 0x1a12 <usart_getchar>
}
    2606:	88 83       	st	Y, r24
    2608:	df 91       	pop	r29
    260a:	cf 91       	pop	r28
    260c:	08 95       	ret

0000260e <usart_serial_putchar>:
 * \param c       Character to write.
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
    260e:	f9 c9       	rjmp	.-3086   	; 0x1a02 <usart_putchar>
    2610:	08 95       	ret

00002612 <usart_init>:
    2612:	cf 93       	push	r28
    2614:	df 93       	push	r29
    2616:	cd b7       	in	r28, 0x3d	; 61
    2618:	de b7       	in	r29, 0x3e	; 62
    261a:	27 97       	sbiw	r28, 0x07	; 7
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	de bf       	out	0x3e, r29	; 62
    2620:	e0 e4       	ldi	r30, 0x40	; 64
    2622:	f6 e0       	ldi	r31, 0x06	; 6
    2624:	88 e0       	ldi	r24, 0x08	; 8
    2626:	81 83       	std	Z+1, r24	; 0x01
    2628:	85 83       	std	Z+5, r24	; 0x05
    262a:	80 ea       	ldi	r24, 0xA0	; 160
    262c:	98 e0       	ldi	r25, 0x08	; 8
    262e:	80 93 d6 20 	sts	0x20D6, r24	; 0x8020d6 <stdio_base>
    2632:	90 93 d7 20 	sts	0x20D7, r25	; 0x8020d7 <stdio_base+0x1>
    2636:	87 e0       	ldi	r24, 0x07	; 7
    2638:	93 e1       	ldi	r25, 0x13	; 19
    263a:	80 93 d4 20 	sts	0x20D4, r24	; 0x8020d4 <ptr_put>
    263e:	90 93 d5 20 	sts	0x20D5, r25	; 0x8020d5 <ptr_put+0x1>
    2642:	8f ef       	ldi	r24, 0xFF	; 255
    2644:	92 e1       	ldi	r25, 0x12	; 18
    2646:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <ptr_get>
    264a:	90 93 d3 20 	sts	0x20D3, r25	; 0x8020d3 <ptr_get+0x1>
    264e:	e6 e0       	ldi	r30, 0x06	; 6
    2650:	f0 e2       	ldi	r31, 0x20	; 32
    2652:	84 81       	ldd	r24, Z+4	; 0x04
    2654:	8d 83       	std	Y+5, r24	; 0x05
    2656:	85 81       	ldd	r24, Z+5	; 0x05
    2658:	8e 83       	std	Y+6, r24	; 0x06
    265a:	86 81       	ldd	r24, Z+6	; 0x06
    265c:	8f 83       	std	Y+7, r24	; 0x07
    265e:	80 81       	ld	r24, Z
    2660:	91 81       	ldd	r25, Z+1	; 0x01
    2662:	a2 81       	ldd	r26, Z+2	; 0x02
    2664:	b3 81       	ldd	r27, Z+3	; 0x03
    2666:	89 83       	std	Y+1, r24	; 0x01
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	ab 83       	std	Y+3, r26	; 0x03
    266c:	bc 83       	std	Y+4, r27	; 0x04
    266e:	60 e1       	ldi	r22, 0x10	; 16
    2670:	83 e0       	ldi	r24, 0x03	; 3
    2672:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    2676:	be 01       	movw	r22, r28
    2678:	6f 5f       	subi	r22, 0xFF	; 255
    267a:	7f 4f       	sbci	r23, 0xFF	; 255
    267c:	80 ea       	ldi	r24, 0xA0	; 160
    267e:	98 e0       	ldi	r25, 0x08	; 8
    2680:	e1 da       	rcall	.-2622   	; 0x1c44 <usart_init_rs232>
    2682:	6e e1       	ldi	r22, 0x1E	; 30
    2684:	72 e0       	ldi	r23, 0x02	; 2
    2686:	87 e3       	ldi	r24, 0x37	; 55
    2688:	92 e0       	ldi	r25, 0x02	; 2
    268a:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <fdevopen>
    268e:	27 96       	adiw	r28, 0x07	; 7
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	08 95       	ret

0000269a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    269a:	04 c0       	rjmp	.+8      	; 0x26a4 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    269c:	61 50       	subi	r22, 0x01	; 1
    269e:	71 09       	sbc	r23, r1
    26a0:	81 09       	sbc	r24, r1
    26a2:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    26a4:	61 15       	cp	r22, r1
    26a6:	71 05       	cpc	r23, r1
    26a8:	81 05       	cpc	r24, r1
    26aa:	91 05       	cpc	r25, r1
    26ac:	b9 f7       	brne	.-18     	; 0x269c <__portable_avr_delay_cycles+0x2>
    26ae:	08 95       	ret

000026b0 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    26b0:	00 97       	sbiw	r24, 0x00	; 0
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <sysclk_enable_peripheral_clock+0x6>
    26b4:	5c c1       	rjmp	.+696    	; 0x296e <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    26b6:	80 3c       	cpi	r24, 0xC0	; 192
    26b8:	91 05       	cpc	r25, r1
    26ba:	29 f4       	brne	.+10     	; 0x26c6 <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    26bc:	60 e1       	ldi	r22, 0x10	; 16
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    26c4:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    26c6:	80 34       	cpi	r24, 0x40	; 64
    26c8:	24 e0       	ldi	r18, 0x04	; 4
    26ca:	92 07       	cpc	r25, r18
    26cc:	29 f4       	brne	.+10     	; 0x26d8 <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    26ce:	68 e0       	ldi	r22, 0x08	; 8
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    26d6:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    26d8:	81 15       	cp	r24, r1
    26da:	24 e0       	ldi	r18, 0x04	; 4
    26dc:	92 07       	cpc	r25, r18
    26de:	29 f4       	brne	.+10     	; 0x26ea <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    26e0:	64 e0       	ldi	r22, 0x04	; 4
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    26e8:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    26ea:	80 38       	cpi	r24, 0x80	; 128
    26ec:	21 e0       	ldi	r18, 0x01	; 1
    26ee:	92 07       	cpc	r25, r18
    26f0:	29 f4       	brne	.+10     	; 0x26fc <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    26f2:	62 e0       	ldi	r22, 0x02	; 2
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    26fa:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    26fc:	81 15       	cp	r24, r1
    26fe:	21 e0       	ldi	r18, 0x01	; 1
    2700:	92 07       	cpc	r25, r18
    2702:	29 f4       	brne	.+10     	; 0x270e <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2704:	61 e0       	ldi	r22, 0x01	; 1
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    270c:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    270e:	80 38       	cpi	r24, 0x80	; 128
    2710:	23 e0       	ldi	r18, 0x03	; 3
    2712:	92 07       	cpc	r25, r18
    2714:	29 f4       	brne	.+10     	; 0x2720 <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    271e:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    2720:	80 39       	cpi	r24, 0x90	; 144
    2722:	23 e0       	ldi	r18, 0x03	; 3
    2724:	92 07       	cpc	r25, r18
    2726:	29 f4       	brne	.+10     	; 0x2732 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2728:	61 e0       	ldi	r22, 0x01	; 1
    272a:	82 e0       	ldi	r24, 0x02	; 2
    272c:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2730:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    2732:	81 15       	cp	r24, r1
    2734:	22 e0       	ldi	r18, 0x02	; 2
    2736:	92 07       	cpc	r25, r18
    2738:	29 f4       	brne	.+10     	; 0x2744 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    273a:	62 e0       	ldi	r22, 0x02	; 2
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2742:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    2744:	80 34       	cpi	r24, 0x40	; 64
    2746:	22 e0       	ldi	r18, 0x02	; 2
    2748:	92 07       	cpc	r25, r18
    274a:	29 f4       	brne	.+10     	; 0x2756 <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    274c:	62 e0       	ldi	r22, 0x02	; 2
    274e:	82 e0       	ldi	r24, 0x02	; 2
    2750:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2754:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    2756:	81 15       	cp	r24, r1
    2758:	23 e0       	ldi	r18, 0x03	; 3
    275a:	92 07       	cpc	r25, r18
    275c:	29 f4       	brne	.+10     	; 0x2768 <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    275e:	64 e0       	ldi	r22, 0x04	; 4
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2766:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    2768:	80 32       	cpi	r24, 0x20	; 32
    276a:	23 e0       	ldi	r18, 0x03	; 3
    276c:	92 07       	cpc	r25, r18
    276e:	29 f4       	brne	.+10     	; 0x277a <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    2770:	64 e0       	ldi	r22, 0x04	; 4
    2772:	82 e0       	ldi	r24, 0x02	; 2
    2774:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2778:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    277a:	81 15       	cp	r24, r1
    277c:	28 e0       	ldi	r18, 0x08	; 8
    277e:	92 07       	cpc	r25, r18
    2780:	29 f4       	brne	.+10     	; 0x278c <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2782:	61 e0       	ldi	r22, 0x01	; 1
    2784:	83 e0       	ldi	r24, 0x03	; 3
    2786:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    278a:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    278c:	81 15       	cp	r24, r1
    278e:	29 e0       	ldi	r18, 0x09	; 9
    2790:	92 07       	cpc	r25, r18
    2792:	29 f4       	brne	.+10     	; 0x279e <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2794:	61 e0       	ldi	r22, 0x01	; 1
    2796:	84 e0       	ldi	r24, 0x04	; 4
    2798:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    279c:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    279e:	81 15       	cp	r24, r1
    27a0:	2a e0       	ldi	r18, 0x0A	; 10
    27a2:	92 07       	cpc	r25, r18
    27a4:	29 f4       	brne	.+10     	; 0x27b0 <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    27a6:	61 e0       	ldi	r22, 0x01	; 1
    27a8:	85 e0       	ldi	r24, 0x05	; 5
    27aa:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    27ae:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    27b0:	81 15       	cp	r24, r1
    27b2:	2b e0       	ldi	r18, 0x0B	; 11
    27b4:	92 07       	cpc	r25, r18
    27b6:	29 f4       	brne	.+10     	; 0x27c2 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    27b8:	61 e0       	ldi	r22, 0x01	; 1
    27ba:	86 e0       	ldi	r24, 0x06	; 6
    27bc:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    27c0:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    27c2:	80 34       	cpi	r24, 0x40	; 64
    27c4:	28 e0       	ldi	r18, 0x08	; 8
    27c6:	92 07       	cpc	r25, r18
    27c8:	29 f4       	brne	.+10     	; 0x27d4 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    27ca:	62 e0       	ldi	r22, 0x02	; 2
    27cc:	83 e0       	ldi	r24, 0x03	; 3
    27ce:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    27d2:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    27d4:	80 34       	cpi	r24, 0x40	; 64
    27d6:	29 e0       	ldi	r18, 0x09	; 9
    27d8:	92 07       	cpc	r25, r18
    27da:	29 f4       	brne	.+10     	; 0x27e6 <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    27dc:	62 e0       	ldi	r22, 0x02	; 2
    27de:	84 e0       	ldi	r24, 0x04	; 4
    27e0:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    27e4:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    27e6:	80 34       	cpi	r24, 0x40	; 64
    27e8:	2a e0       	ldi	r18, 0x0A	; 10
    27ea:	92 07       	cpc	r25, r18
    27ec:	29 f4       	brne	.+10     	; 0x27f8 <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    27ee:	62 e0       	ldi	r22, 0x02	; 2
    27f0:	85 e0       	ldi	r24, 0x05	; 5
    27f2:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    27f6:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    27f8:	80 34       	cpi	r24, 0x40	; 64
    27fa:	2b e0       	ldi	r18, 0x0B	; 11
    27fc:	92 07       	cpc	r25, r18
    27fe:	29 f4       	brne	.+10     	; 0x280a <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    2800:	62 e0       	ldi	r22, 0x02	; 2
    2802:	86 e0       	ldi	r24, 0x06	; 6
    2804:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2808:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    280a:	80 39       	cpi	r24, 0x90	; 144
    280c:	28 e0       	ldi	r18, 0x08	; 8
    280e:	92 07       	cpc	r25, r18
    2810:	29 f4       	brne	.+10     	; 0x281c <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2812:	64 e0       	ldi	r22, 0x04	; 4
    2814:	83 e0       	ldi	r24, 0x03	; 3
    2816:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    281a:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    281c:	80 39       	cpi	r24, 0x90	; 144
    281e:	29 e0       	ldi	r18, 0x09	; 9
    2820:	92 07       	cpc	r25, r18
    2822:	29 f4       	brne	.+10     	; 0x282e <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2824:	64 e0       	ldi	r22, 0x04	; 4
    2826:	84 e0       	ldi	r24, 0x04	; 4
    2828:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    282c:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    282e:	80 39       	cpi	r24, 0x90	; 144
    2830:	2a e0       	ldi	r18, 0x0A	; 10
    2832:	92 07       	cpc	r25, r18
    2834:	29 f4       	brne	.+10     	; 0x2840 <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2836:	64 e0       	ldi	r22, 0x04	; 4
    2838:	85 e0       	ldi	r24, 0x05	; 5
    283a:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    283e:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    2840:	80 39       	cpi	r24, 0x90	; 144
    2842:	2b e0       	ldi	r18, 0x0B	; 11
    2844:	92 07       	cpc	r25, r18
    2846:	29 f4       	brne	.+10     	; 0x2852 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2848:	64 e0       	ldi	r22, 0x04	; 4
    284a:	86 e0       	ldi	r24, 0x06	; 6
    284c:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2850:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    2852:	80 3c       	cpi	r24, 0xC0	; 192
    2854:	28 e0       	ldi	r18, 0x08	; 8
    2856:	92 07       	cpc	r25, r18
    2858:	29 f4       	brne	.+10     	; 0x2864 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    285a:	68 e0       	ldi	r22, 0x08	; 8
    285c:	83 e0       	ldi	r24, 0x03	; 3
    285e:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2862:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    2864:	80 3c       	cpi	r24, 0xC0	; 192
    2866:	29 e0       	ldi	r18, 0x09	; 9
    2868:	92 07       	cpc	r25, r18
    286a:	29 f4       	brne	.+10     	; 0x2876 <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    286c:	68 e0       	ldi	r22, 0x08	; 8
    286e:	84 e0       	ldi	r24, 0x04	; 4
    2870:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2874:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    2876:	80 3c       	cpi	r24, 0xC0	; 192
    2878:	2a e0       	ldi	r18, 0x0A	; 10
    287a:	92 07       	cpc	r25, r18
    287c:	29 f4       	brne	.+10     	; 0x2888 <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    287e:	68 e0       	ldi	r22, 0x08	; 8
    2880:	85 e0       	ldi	r24, 0x05	; 5
    2882:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2886:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    2888:	80 3c       	cpi	r24, 0xC0	; 192
    288a:	2b e0       	ldi	r18, 0x0B	; 11
    288c:	92 07       	cpc	r25, r18
    288e:	29 f4       	brne	.+10     	; 0x289a <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    2890:	68 e0       	ldi	r22, 0x08	; 8
    2892:	86 e0       	ldi	r24, 0x06	; 6
    2894:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2898:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    289a:	80 3a       	cpi	r24, 0xA0	; 160
    289c:	28 e0       	ldi	r18, 0x08	; 8
    289e:	92 07       	cpc	r25, r18
    28a0:	29 f4       	brne	.+10     	; 0x28ac <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    28a2:	60 e1       	ldi	r22, 0x10	; 16
    28a4:	83 e0       	ldi	r24, 0x03	; 3
    28a6:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    28aa:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    28ac:	80 3a       	cpi	r24, 0xA0	; 160
    28ae:	29 e0       	ldi	r18, 0x09	; 9
    28b0:	92 07       	cpc	r25, r18
    28b2:	29 f4       	brne	.+10     	; 0x28be <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    28b4:	60 e1       	ldi	r22, 0x10	; 16
    28b6:	84 e0       	ldi	r24, 0x04	; 4
    28b8:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    28bc:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    28be:	80 3a       	cpi	r24, 0xA0	; 160
    28c0:	2a e0       	ldi	r18, 0x0A	; 10
    28c2:	92 07       	cpc	r25, r18
    28c4:	29 f4       	brne	.+10     	; 0x28d0 <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    28c6:	60 e1       	ldi	r22, 0x10	; 16
    28c8:	85 e0       	ldi	r24, 0x05	; 5
    28ca:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    28ce:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    28d0:	80 3a       	cpi	r24, 0xA0	; 160
    28d2:	2b e0       	ldi	r18, 0x0B	; 11
    28d4:	92 07       	cpc	r25, r18
    28d6:	29 f4       	brne	.+10     	; 0x28e2 <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    28d8:	60 e1       	ldi	r22, 0x10	; 16
    28da:	86 e0       	ldi	r24, 0x06	; 6
    28dc:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    28e0:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    28e2:	80 3b       	cpi	r24, 0xB0	; 176
    28e4:	28 e0       	ldi	r18, 0x08	; 8
    28e6:	92 07       	cpc	r25, r18
    28e8:	29 f4       	brne	.+10     	; 0x28f4 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    28ea:	60 e2       	ldi	r22, 0x20	; 32
    28ec:	83 e0       	ldi	r24, 0x03	; 3
    28ee:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    28f2:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    28f4:	80 3b       	cpi	r24, 0xB0	; 176
    28f6:	29 e0       	ldi	r18, 0x09	; 9
    28f8:	92 07       	cpc	r25, r18
    28fa:	29 f4       	brne	.+10     	; 0x2906 <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    28fc:	60 e2       	ldi	r22, 0x20	; 32
    28fe:	84 e0       	ldi	r24, 0x04	; 4
    2900:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2904:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    2906:	80 3b       	cpi	r24, 0xB0	; 176
    2908:	2a e0       	ldi	r18, 0x0A	; 10
    290a:	92 07       	cpc	r25, r18
    290c:	29 f4       	brne	.+10     	; 0x2918 <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    290e:	60 e2       	ldi	r22, 0x20	; 32
    2910:	85 e0       	ldi	r24, 0x05	; 5
    2912:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2916:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    2918:	80 3b       	cpi	r24, 0xB0	; 176
    291a:	2b e0       	ldi	r18, 0x0B	; 11
    291c:	92 07       	cpc	r25, r18
    291e:	29 f4       	brne	.+10     	; 0x292a <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    2920:	60 e2       	ldi	r22, 0x20	; 32
    2922:	86 e0       	ldi	r24, 0x06	; 6
    2924:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2928:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    292a:	80 38       	cpi	r24, 0x80	; 128
    292c:	24 e0       	ldi	r18, 0x04	; 4
    292e:	92 07       	cpc	r25, r18
    2930:	29 f4       	brne	.+10     	; 0x293c <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2932:	60 e4       	ldi	r22, 0x40	; 64
    2934:	83 e0       	ldi	r24, 0x03	; 3
    2936:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    293a:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    293c:	80 39       	cpi	r24, 0x90	; 144
    293e:	24 e0       	ldi	r18, 0x04	; 4
    2940:	92 07       	cpc	r25, r18
    2942:	29 f4       	brne	.+10     	; 0x294e <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    2944:	60 e4       	ldi	r22, 0x40	; 64
    2946:	84 e0       	ldi	r24, 0x04	; 4
    2948:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    294c:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    294e:	80 3a       	cpi	r24, 0xA0	; 160
    2950:	24 e0       	ldi	r18, 0x04	; 4
    2952:	92 07       	cpc	r25, r18
    2954:	29 f4       	brne	.+10     	; 0x2960 <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2956:	60 e4       	ldi	r22, 0x40	; 64
    2958:	85 e0       	ldi	r24, 0x05	; 5
    295a:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    295e:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    2960:	80 3b       	cpi	r24, 0xB0	; 176
    2962:	94 40       	sbci	r25, 0x04	; 4
    2964:	21 f4       	brne	.+8      	; 0x296e <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    2966:	60 e4       	ldi	r22, 0x40	; 64
    2968:	86 e0       	ldi	r24, 0x06	; 6
    296a:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    296e:	08 95       	ret

00002970 <main>:
    2970:	cf 93       	push	r28
    2972:	df 93       	push	r29
    2974:	00 d0       	rcall	.+0      	; 0x2976 <main+0x6>
    2976:	1f 92       	push	r1
    2978:	cd b7       	in	r28, 0x3d	; 61
    297a:	de b7       	in	r29, 0x3e	; 62
    297c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <sysclk_init>
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	9b e0       	ldi	r25, 0x0B	; 11
    2984:	95 de       	rcall	.-726    	; 0x26b0 <sysclk_enable_peripheral_clock>
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	99 e0       	ldi	r25, 0x09	; 9
    298a:	92 de       	rcall	.-732    	; 0x26b0 <sysclk_enable_peripheral_clock>
    298c:	64 e0       	ldi	r22, 0x04	; 4
    298e:	86 e0       	ldi	r24, 0x06	; 6
    2990:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    2994:	64 e0       	ldi	r22, 0x04	; 4
    2996:	84 e0       	ldi	r24, 0x04	; 4
    2998:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    299c:	68 e0       	ldi	r22, 0x08	; 8
    299e:	83 e0       	ldi	r24, 0x03	; 3
    29a0:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    29a4:	80 ea       	ldi	r24, 0xA0	; 160
    29a6:	98 e0       	ldi	r25, 0x08	; 8
    29a8:	83 de       	rcall	.-762    	; 0x26b0 <sysclk_enable_peripheral_clock>
    29aa:	33 de       	rcall	.-922    	; 0x2612 <usart_init>
    29ac:	80 ec       	ldi	r24, 0xC0	; 192
    29ae:	98 e0       	ldi	r25, 0x08	; 8
    29b0:	7f de       	rcall	.-770    	; 0x26b0 <sysclk_enable_peripheral_clock>
    29b2:	58 db       	rcall	.-2384   	; 0x2064 <SPI_init>
    29b4:	92 db       	rcall	.-2268   	; 0x20da <ms5607_init>
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	92 e0       	ldi	r25, 0x02	; 2
    29ba:	7a de       	rcall	.-780    	; 0x26b0 <sysclk_enable_peripheral_clock>
    29bc:	bf dd       	rcall	.-1154   	; 0x253c <adc_init>
    29be:	08 dc       	rcall	.-2032   	; 0x21d0 <get_pressure>
    29c0:	9b 01       	movw	r18, r22
    29c2:	ac 01       	movw	r20, r24
    29c4:	64 eb       	ldi	r22, 0xB4	; 180
    29c6:	7b e8       	ldi	r23, 0x8B	; 139
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	c3 da       	rcall	.-2682   	; 0x1f54 <Get_altitude>
    29ce:	74 d1       	rcall	.+744    	; 0x2cb8 <__fixsfsi>
    29d0:	4b 01       	movw	r8, r22
    29d2:	5c 01       	movw	r10, r24
    29d4:	65 e0       	ldi	r22, 0x05	; 5
    29d6:	70 e0       	ldi	r23, 0x00	; 0
    29d8:	83 e2       	ldi	r24, 0x23	; 35
    29da:	94 ef       	ldi	r25, 0xF4	; 244
    29dc:	dc dd       	rcall	.-1096   	; 0x2596 <timer_founter_init>
    29de:	10 e0       	ldi	r17, 0x00	; 0
    29e0:	41 2c       	mov	r4, r1
    29e2:	51 2c       	mov	r5, r1
    29e4:	32 01       	movw	r6, r4
    29e6:	08 e0       	ldi	r16, 0x08	; 8
    29e8:	05 c0       	rjmp	.+10     	; 0x29f4 <main+0x84>
    29ea:	11 e0       	ldi	r17, 0x01	; 1
    29ec:	03 c0       	rjmp	.+6      	; 0x29f4 <main+0x84>
    29ee:	12 e0       	ldi	r17, 0x02	; 2
    29f0:	01 c0       	rjmp	.+2      	; 0x29f4 <main+0x84>
    29f2:	12 e0       	ldi	r17, 0x02	; 2
    29f4:	ed db       	rcall	.-2086   	; 0x21d0 <get_pressure>
    29f6:	9b 01       	movw	r18, r22
    29f8:	ac 01       	movw	r20, r24
    29fa:	64 eb       	ldi	r22, 0xB4	; 180
    29fc:	7b e8       	ldi	r23, 0x8B	; 139
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	a8 da       	rcall	.-2736   	; 0x1f54 <Get_altitude>
    2a04:	59 d1       	rcall	.+690    	; 0x2cb8 <__fixsfsi>
    2a06:	6b 01       	movw	r12, r22
    2a08:	7c 01       	movw	r14, r24
    2a0a:	89 d1       	rcall	.+786    	; 0x2d1e <__floatsisf>
    2a0c:	26 e6       	ldi	r18, 0x66	; 102
    2a0e:	36 e6       	ldi	r19, 0x66	; 102
    2a10:	46 e6       	ldi	r20, 0x66	; 102
    2a12:	5f e3       	ldi	r21, 0x3F	; 63
    2a14:	55 d2       	rcall	.+1194   	; 0x2ec0 <__mulsf3>
    2a16:	69 83       	std	Y+1, r22	; 0x01
    2a18:	7a 83       	std	Y+2, r23	; 0x02
    2a1a:	8b 83       	std	Y+3, r24	; 0x03
    2a1c:	9c 83       	std	Y+4, r25	; 0x04
    2a1e:	c3 01       	movw	r24, r6
    2a20:	b2 01       	movw	r22, r4
    2a22:	7d d1       	rcall	.+762    	; 0x2d1e <__floatsisf>
    2a24:	20 ed       	ldi	r18, 0xD0	; 208
    2a26:	3c ec       	ldi	r19, 0xCC	; 204
    2a28:	4c ec       	ldi	r20, 0xCC	; 204
    2a2a:	5d e3       	ldi	r21, 0x3D	; 61
    2a2c:	49 d2       	rcall	.+1170   	; 0x2ec0 <__mulsf3>
    2a2e:	9b 01       	movw	r18, r22
    2a30:	ac 01       	movw	r20, r24
    2a32:	69 81       	ldd	r22, Y+1	; 0x01
    2a34:	7a 81       	ldd	r23, Y+2	; 0x02
    2a36:	8b 81       	ldd	r24, Y+3	; 0x03
    2a38:	9c 81       	ldd	r25, Y+4	; 0x04
    2a3a:	72 d0       	rcall	.+228    	; 0x2b20 <__addsf3>
    2a3c:	3d d1       	rcall	.+634    	; 0x2cb8 <__fixsfsi>
    2a3e:	2b 01       	movw	r4, r22
    2a40:	3c 01       	movw	r6, r24
    2a42:	66 e5       	ldi	r22, 0x56	; 86
    2a44:	78 e5       	ldi	r23, 0x58	; 88
    2a46:	84 e1       	ldi	r24, 0x14	; 20
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	27 de       	rcall	.-946    	; 0x269a <__portable_avr_delay_cycles>
    2a4c:	11 11       	cpse	r17, r1
    2a4e:	19 c0       	rjmp	.+50     	; 0x2a82 <main+0x112>
    2a50:	81 e4       	ldi	r24, 0x41	; 65
    2a52:	90 e2       	ldi	r25, 0x20	; 32
    2a54:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <puts>
    2a58:	d7 01       	movw	r26, r14
    2a5a:	c6 01       	movw	r24, r12
    2a5c:	88 19       	sub	r24, r8
    2a5e:	99 09       	sbc	r25, r9
    2a60:	aa 09       	sbc	r26, r10
    2a62:	bb 09       	sbc	r27, r11
    2a64:	4f 97       	sbiw	r24, 0x1f	; 31
    2a66:	a1 05       	cpc	r26, r1
    2a68:	b1 05       	cpc	r27, r1
    2a6a:	0c f4       	brge	.+2      	; 0x2a6e <main+0xfe>
    2a6c:	54 c0       	rjmp	.+168    	; 0x2b16 <main+0x1a6>
    2a6e:	6a e0       	ldi	r22, 0x0A	; 10
    2a70:	70 e0       	ldi	r23, 0x00	; 0
    2a72:	89 e6       	ldi	r24, 0x69	; 105
    2a74:	98 e1       	ldi	r25, 0x18	; 24
    2a76:	8f dd       	rcall	.-1250   	; 0x2596 <timer_founter_init>
    2a78:	81 e5       	ldi	r24, 0x51	; 81
    2a7a:	90 e2       	ldi	r25, 0x20	; 32
    2a7c:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <puts>
    2a80:	02 c0       	rjmp	.+4      	; 0x2a86 <main+0x116>
    2a82:	11 30       	cpi	r17, 0x01	; 1
    2a84:	31 f5       	brne	.+76     	; 0x2ad2 <main+0x162>
    2a86:	d7 01       	movw	r26, r14
    2a88:	c6 01       	movw	r24, r12
    2a8a:	88 19       	sub	r24, r8
    2a8c:	99 09       	sbc	r25, r9
    2a8e:	aa 09       	sbc	r26, r10
    2a90:	bb 09       	sbc	r27, r11
    2a92:	8d 3b       	cpi	r24, 0xBD	; 189
    2a94:	92 40       	sbci	r25, 0x02	; 2
    2a96:	a1 05       	cpc	r26, r1
    2a98:	b1 05       	cpc	r27, r1
    2a9a:	0c f4       	brge	.+2      	; 0x2a9e <main+0x12e>
    2a9c:	a6 cf       	rjmp	.-180    	; 0x29ea <main+0x7a>
    2a9e:	60 e0       	ldi	r22, 0x00	; 0
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	84 e3       	ldi	r24, 0x34	; 52
    2aa4:	9c e0       	ldi	r25, 0x0C	; 12
    2aa6:	77 dd       	rcall	.-1298   	; 0x2596 <timer_founter_init>
    2aa8:	00 93 61 06 	sts	0x0661, r16	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
    2aac:	00 93 65 06 	sts	0x0665, r16	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    2ab0:	60 e0       	ldi	r22, 0x00	; 0
    2ab2:	74 eb       	ldi	r23, 0xB4	; 180
    2ab4:	84 ec       	ldi	r24, 0xC4	; 196
    2ab6:	94 e0       	ldi	r25, 0x04	; 4
    2ab8:	f0 dd       	rcall	.-1056   	; 0x269a <__portable_avr_delay_cycles>
    2aba:	00 93 66 06 	sts	0x0666, r16	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    2abe:	6a e0       	ldi	r22, 0x0A	; 10
    2ac0:	70 e0       	ldi	r23, 0x00	; 0
    2ac2:	84 e3       	ldi	r24, 0x34	; 52
    2ac4:	9c e0       	ldi	r25, 0x0C	; 12
    2ac6:	67 dd       	rcall	.-1330   	; 0x2596 <timer_founter_init>
    2ac8:	81 e6       	ldi	r24, 0x61	; 97
    2aca:	90 e2       	ldi	r25, 0x20	; 32
    2acc:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <puts>
    2ad0:	02 c0       	rjmp	.+4      	; 0x2ad6 <main+0x166>
    2ad2:	12 30       	cpi	r17, 0x02	; 2
    2ad4:	01 f5       	brne	.+64     	; 0x2b16 <main+0x1a6>
    2ad6:	d3 01       	movw	r26, r6
    2ad8:	c2 01       	movw	r24, r4
    2ada:	8c 19       	sub	r24, r12
    2adc:	9d 09       	sbc	r25, r13
    2ade:	ae 09       	sbc	r26, r14
    2ae0:	bf 09       	sbc	r27, r15
    2ae2:	0a 97       	sbiw	r24, 0x0a	; 10
    2ae4:	a1 05       	cpc	r26, r1
    2ae6:	b1 05       	cpc	r27, r1
    2ae8:	0c f0       	brlt	.+2      	; 0x2aec <main+0x17c>
    2aea:	81 cf       	rjmp	.-254    	; 0x29ee <main+0x7e>
    2aec:	c8 18       	sub	r12, r8
    2aee:	d9 08       	sbc	r13, r9
    2af0:	ea 08       	sbc	r14, r10
    2af2:	fb 08       	sbc	r15, r11
    2af4:	84 e6       	ldi	r24, 0x64	; 100
    2af6:	c8 16       	cp	r12, r24
    2af8:	d1 04       	cpc	r13, r1
    2afa:	e1 04       	cpc	r14, r1
    2afc:	f1 04       	cpc	r15, r1
    2afe:	0c f0       	brlt	.+2      	; 0x2b02 <main+0x192>
    2b00:	78 cf       	rjmp	.-272    	; 0x29f2 <main+0x82>
    2b02:	6a e0       	ldi	r22, 0x0A	; 10
    2b04:	70 e0       	ldi	r23, 0x00	; 0
    2b06:	82 e1       	ldi	r24, 0x12	; 18
    2b08:	9a e7       	ldi	r25, 0x7A	; 122
    2b0a:	45 dd       	rcall	.-1398   	; 0x2596 <timer_founter_init>
    2b0c:	81 e7       	ldi	r24, 0x71	; 113
    2b0e:	90 e2       	ldi	r25, 0x20	; 32
    2b10:	0e 94 e1 1d 	call	0x3bc2	; 0x3bc2 <puts>
    2b14:	13 e0       	ldi	r17, 0x03	; 3
    2b16:	13 30       	cpi	r17, 0x03	; 3
    2b18:	09 f0       	breq	.+2      	; 0x2b1c <main+0x1ac>
    2b1a:	6c cf       	rjmp	.-296    	; 0x29f4 <main+0x84>
    2b1c:	ff cf       	rjmp	.-2      	; 0x2b1c <main+0x1ac>

00002b1e <__subsf3>:
    2b1e:	50 58       	subi	r21, 0x80	; 128

00002b20 <__addsf3>:
    2b20:	bb 27       	eor	r27, r27
    2b22:	aa 27       	eor	r26, r26
    2b24:	0e d0       	rcall	.+28     	; 0x2b42 <__addsf3x>
    2b26:	4d c1       	rjmp	.+666    	; 0x2dc2 <__fp_round>
    2b28:	3e d1       	rcall	.+636    	; 0x2da6 <__fp_pscA>
    2b2a:	30 f0       	brcs	.+12     	; 0x2b38 <__addsf3+0x18>
    2b2c:	43 d1       	rcall	.+646    	; 0x2db4 <__fp_pscB>
    2b2e:	20 f0       	brcs	.+8      	; 0x2b38 <__addsf3+0x18>
    2b30:	31 f4       	brne	.+12     	; 0x2b3e <__addsf3+0x1e>
    2b32:	9f 3f       	cpi	r25, 0xFF	; 255
    2b34:	11 f4       	brne	.+4      	; 0x2b3a <__addsf3+0x1a>
    2b36:	1e f4       	brtc	.+6      	; 0x2b3e <__addsf3+0x1e>
    2b38:	33 c1       	rjmp	.+614    	; 0x2da0 <__fp_nan>
    2b3a:	0e f4       	brtc	.+2      	; 0x2b3e <__addsf3+0x1e>
    2b3c:	e0 95       	com	r30
    2b3e:	e7 fb       	bst	r30, 7
    2b40:	29 c1       	rjmp	.+594    	; 0x2d94 <__fp_inf>

00002b42 <__addsf3x>:
    2b42:	e9 2f       	mov	r30, r25
    2b44:	4f d1       	rcall	.+670    	; 0x2de4 <__fp_split3>
    2b46:	80 f3       	brcs	.-32     	; 0x2b28 <__addsf3+0x8>
    2b48:	ba 17       	cp	r27, r26
    2b4a:	62 07       	cpc	r22, r18
    2b4c:	73 07       	cpc	r23, r19
    2b4e:	84 07       	cpc	r24, r20
    2b50:	95 07       	cpc	r25, r21
    2b52:	18 f0       	brcs	.+6      	; 0x2b5a <__addsf3x+0x18>
    2b54:	71 f4       	brne	.+28     	; 0x2b72 <__addsf3x+0x30>
    2b56:	9e f5       	brtc	.+102    	; 0x2bbe <__addsf3x+0x7c>
    2b58:	67 c1       	rjmp	.+718    	; 0x2e28 <__fp_zero>
    2b5a:	0e f4       	brtc	.+2      	; 0x2b5e <__addsf3x+0x1c>
    2b5c:	e0 95       	com	r30
    2b5e:	0b 2e       	mov	r0, r27
    2b60:	ba 2f       	mov	r27, r26
    2b62:	a0 2d       	mov	r26, r0
    2b64:	0b 01       	movw	r0, r22
    2b66:	b9 01       	movw	r22, r18
    2b68:	90 01       	movw	r18, r0
    2b6a:	0c 01       	movw	r0, r24
    2b6c:	ca 01       	movw	r24, r20
    2b6e:	a0 01       	movw	r20, r0
    2b70:	11 24       	eor	r1, r1
    2b72:	ff 27       	eor	r31, r31
    2b74:	59 1b       	sub	r21, r25
    2b76:	99 f0       	breq	.+38     	; 0x2b9e <__addsf3x+0x5c>
    2b78:	59 3f       	cpi	r21, 0xF9	; 249
    2b7a:	50 f4       	brcc	.+20     	; 0x2b90 <__addsf3x+0x4e>
    2b7c:	50 3e       	cpi	r21, 0xE0	; 224
    2b7e:	68 f1       	brcs	.+90     	; 0x2bda <__addsf3x+0x98>
    2b80:	1a 16       	cp	r1, r26
    2b82:	f0 40       	sbci	r31, 0x00	; 0
    2b84:	a2 2f       	mov	r26, r18
    2b86:	23 2f       	mov	r18, r19
    2b88:	34 2f       	mov	r19, r20
    2b8a:	44 27       	eor	r20, r20
    2b8c:	58 5f       	subi	r21, 0xF8	; 248
    2b8e:	f3 cf       	rjmp	.-26     	; 0x2b76 <__addsf3x+0x34>
    2b90:	46 95       	lsr	r20
    2b92:	37 95       	ror	r19
    2b94:	27 95       	ror	r18
    2b96:	a7 95       	ror	r26
    2b98:	f0 40       	sbci	r31, 0x00	; 0
    2b9a:	53 95       	inc	r21
    2b9c:	c9 f7       	brne	.-14     	; 0x2b90 <__addsf3x+0x4e>
    2b9e:	7e f4       	brtc	.+30     	; 0x2bbe <__addsf3x+0x7c>
    2ba0:	1f 16       	cp	r1, r31
    2ba2:	ba 0b       	sbc	r27, r26
    2ba4:	62 0b       	sbc	r22, r18
    2ba6:	73 0b       	sbc	r23, r19
    2ba8:	84 0b       	sbc	r24, r20
    2baa:	ba f0       	brmi	.+46     	; 0x2bda <__addsf3x+0x98>
    2bac:	91 50       	subi	r25, 0x01	; 1
    2bae:	a1 f0       	breq	.+40     	; 0x2bd8 <__addsf3x+0x96>
    2bb0:	ff 0f       	add	r31, r31
    2bb2:	bb 1f       	adc	r27, r27
    2bb4:	66 1f       	adc	r22, r22
    2bb6:	77 1f       	adc	r23, r23
    2bb8:	88 1f       	adc	r24, r24
    2bba:	c2 f7       	brpl	.-16     	; 0x2bac <__addsf3x+0x6a>
    2bbc:	0e c0       	rjmp	.+28     	; 0x2bda <__addsf3x+0x98>
    2bbe:	ba 0f       	add	r27, r26
    2bc0:	62 1f       	adc	r22, r18
    2bc2:	73 1f       	adc	r23, r19
    2bc4:	84 1f       	adc	r24, r20
    2bc6:	48 f4       	brcc	.+18     	; 0x2bda <__addsf3x+0x98>
    2bc8:	87 95       	ror	r24
    2bca:	77 95       	ror	r23
    2bcc:	67 95       	ror	r22
    2bce:	b7 95       	ror	r27
    2bd0:	f7 95       	ror	r31
    2bd2:	9e 3f       	cpi	r25, 0xFE	; 254
    2bd4:	08 f0       	brcs	.+2      	; 0x2bd8 <__addsf3x+0x96>
    2bd6:	b3 cf       	rjmp	.-154    	; 0x2b3e <__addsf3+0x1e>
    2bd8:	93 95       	inc	r25
    2bda:	88 0f       	add	r24, r24
    2bdc:	08 f0       	brcs	.+2      	; 0x2be0 <__addsf3x+0x9e>
    2bde:	99 27       	eor	r25, r25
    2be0:	ee 0f       	add	r30, r30
    2be2:	97 95       	ror	r25
    2be4:	87 95       	ror	r24
    2be6:	08 95       	ret

00002be8 <__divsf3>:
    2be8:	0c d0       	rcall	.+24     	; 0x2c02 <__divsf3x>
    2bea:	eb c0       	rjmp	.+470    	; 0x2dc2 <__fp_round>
    2bec:	e3 d0       	rcall	.+454    	; 0x2db4 <__fp_pscB>
    2bee:	40 f0       	brcs	.+16     	; 0x2c00 <__divsf3+0x18>
    2bf0:	da d0       	rcall	.+436    	; 0x2da6 <__fp_pscA>
    2bf2:	30 f0       	brcs	.+12     	; 0x2c00 <__divsf3+0x18>
    2bf4:	21 f4       	brne	.+8      	; 0x2bfe <__divsf3+0x16>
    2bf6:	5f 3f       	cpi	r21, 0xFF	; 255
    2bf8:	19 f0       	breq	.+6      	; 0x2c00 <__divsf3+0x18>
    2bfa:	cc c0       	rjmp	.+408    	; 0x2d94 <__fp_inf>
    2bfc:	51 11       	cpse	r21, r1
    2bfe:	15 c1       	rjmp	.+554    	; 0x2e2a <__fp_szero>
    2c00:	cf c0       	rjmp	.+414    	; 0x2da0 <__fp_nan>

00002c02 <__divsf3x>:
    2c02:	f0 d0       	rcall	.+480    	; 0x2de4 <__fp_split3>
    2c04:	98 f3       	brcs	.-26     	; 0x2bec <__divsf3+0x4>

00002c06 <__divsf3_pse>:
    2c06:	99 23       	and	r25, r25
    2c08:	c9 f3       	breq	.-14     	; 0x2bfc <__divsf3+0x14>
    2c0a:	55 23       	and	r21, r21
    2c0c:	b1 f3       	breq	.-20     	; 0x2bfa <__divsf3+0x12>
    2c0e:	95 1b       	sub	r25, r21
    2c10:	55 0b       	sbc	r21, r21
    2c12:	bb 27       	eor	r27, r27
    2c14:	aa 27       	eor	r26, r26
    2c16:	62 17       	cp	r22, r18
    2c18:	73 07       	cpc	r23, r19
    2c1a:	84 07       	cpc	r24, r20
    2c1c:	38 f0       	brcs	.+14     	; 0x2c2c <__divsf3_pse+0x26>
    2c1e:	9f 5f       	subi	r25, 0xFF	; 255
    2c20:	5f 4f       	sbci	r21, 0xFF	; 255
    2c22:	22 0f       	add	r18, r18
    2c24:	33 1f       	adc	r19, r19
    2c26:	44 1f       	adc	r20, r20
    2c28:	aa 1f       	adc	r26, r26
    2c2a:	a9 f3       	breq	.-22     	; 0x2c16 <__divsf3_pse+0x10>
    2c2c:	33 d0       	rcall	.+102    	; 0x2c94 <__divsf3_pse+0x8e>
    2c2e:	0e 2e       	mov	r0, r30
    2c30:	3a f0       	brmi	.+14     	; 0x2c40 <__divsf3_pse+0x3a>
    2c32:	e0 e8       	ldi	r30, 0x80	; 128
    2c34:	30 d0       	rcall	.+96     	; 0x2c96 <__divsf3_pse+0x90>
    2c36:	91 50       	subi	r25, 0x01	; 1
    2c38:	50 40       	sbci	r21, 0x00	; 0
    2c3a:	e6 95       	lsr	r30
    2c3c:	00 1c       	adc	r0, r0
    2c3e:	ca f7       	brpl	.-14     	; 0x2c32 <__divsf3_pse+0x2c>
    2c40:	29 d0       	rcall	.+82     	; 0x2c94 <__divsf3_pse+0x8e>
    2c42:	fe 2f       	mov	r31, r30
    2c44:	27 d0       	rcall	.+78     	; 0x2c94 <__divsf3_pse+0x8e>
    2c46:	66 0f       	add	r22, r22
    2c48:	77 1f       	adc	r23, r23
    2c4a:	88 1f       	adc	r24, r24
    2c4c:	bb 1f       	adc	r27, r27
    2c4e:	26 17       	cp	r18, r22
    2c50:	37 07       	cpc	r19, r23
    2c52:	48 07       	cpc	r20, r24
    2c54:	ab 07       	cpc	r26, r27
    2c56:	b0 e8       	ldi	r27, 0x80	; 128
    2c58:	09 f0       	breq	.+2      	; 0x2c5c <__divsf3_pse+0x56>
    2c5a:	bb 0b       	sbc	r27, r27
    2c5c:	80 2d       	mov	r24, r0
    2c5e:	bf 01       	movw	r22, r30
    2c60:	ff 27       	eor	r31, r31
    2c62:	93 58       	subi	r25, 0x83	; 131
    2c64:	5f 4f       	sbci	r21, 0xFF	; 255
    2c66:	2a f0       	brmi	.+10     	; 0x2c72 <__divsf3_pse+0x6c>
    2c68:	9e 3f       	cpi	r25, 0xFE	; 254
    2c6a:	51 05       	cpc	r21, r1
    2c6c:	68 f0       	brcs	.+26     	; 0x2c88 <__divsf3_pse+0x82>
    2c6e:	92 c0       	rjmp	.+292    	; 0x2d94 <__fp_inf>
    2c70:	dc c0       	rjmp	.+440    	; 0x2e2a <__fp_szero>
    2c72:	5f 3f       	cpi	r21, 0xFF	; 255
    2c74:	ec f3       	brlt	.-6      	; 0x2c70 <__divsf3_pse+0x6a>
    2c76:	98 3e       	cpi	r25, 0xE8	; 232
    2c78:	dc f3       	brlt	.-10     	; 0x2c70 <__divsf3_pse+0x6a>
    2c7a:	86 95       	lsr	r24
    2c7c:	77 95       	ror	r23
    2c7e:	67 95       	ror	r22
    2c80:	b7 95       	ror	r27
    2c82:	f7 95       	ror	r31
    2c84:	9f 5f       	subi	r25, 0xFF	; 255
    2c86:	c9 f7       	brne	.-14     	; 0x2c7a <__divsf3_pse+0x74>
    2c88:	88 0f       	add	r24, r24
    2c8a:	91 1d       	adc	r25, r1
    2c8c:	96 95       	lsr	r25
    2c8e:	87 95       	ror	r24
    2c90:	97 f9       	bld	r25, 7
    2c92:	08 95       	ret
    2c94:	e1 e0       	ldi	r30, 0x01	; 1
    2c96:	66 0f       	add	r22, r22
    2c98:	77 1f       	adc	r23, r23
    2c9a:	88 1f       	adc	r24, r24
    2c9c:	bb 1f       	adc	r27, r27
    2c9e:	62 17       	cp	r22, r18
    2ca0:	73 07       	cpc	r23, r19
    2ca2:	84 07       	cpc	r24, r20
    2ca4:	ba 07       	cpc	r27, r26
    2ca6:	20 f0       	brcs	.+8      	; 0x2cb0 <__divsf3_pse+0xaa>
    2ca8:	62 1b       	sub	r22, r18
    2caa:	73 0b       	sbc	r23, r19
    2cac:	84 0b       	sbc	r24, r20
    2cae:	ba 0b       	sbc	r27, r26
    2cb0:	ee 1f       	adc	r30, r30
    2cb2:	88 f7       	brcc	.-30     	; 0x2c96 <__divsf3_pse+0x90>
    2cb4:	e0 95       	com	r30
    2cb6:	08 95       	ret

00002cb8 <__fixsfsi>:
    2cb8:	04 d0       	rcall	.+8      	; 0x2cc2 <__fixunssfsi>
    2cba:	68 94       	set
    2cbc:	b1 11       	cpse	r27, r1
    2cbe:	b5 c0       	rjmp	.+362    	; 0x2e2a <__fp_szero>
    2cc0:	08 95       	ret

00002cc2 <__fixunssfsi>:
    2cc2:	98 d0       	rcall	.+304    	; 0x2df4 <__fp_splitA>
    2cc4:	88 f0       	brcs	.+34     	; 0x2ce8 <__fixunssfsi+0x26>
    2cc6:	9f 57       	subi	r25, 0x7F	; 127
    2cc8:	90 f0       	brcs	.+36     	; 0x2cee <__fixunssfsi+0x2c>
    2cca:	b9 2f       	mov	r27, r25
    2ccc:	99 27       	eor	r25, r25
    2cce:	b7 51       	subi	r27, 0x17	; 23
    2cd0:	a0 f0       	brcs	.+40     	; 0x2cfa <__fixunssfsi+0x38>
    2cd2:	d1 f0       	breq	.+52     	; 0x2d08 <__fixunssfsi+0x46>
    2cd4:	66 0f       	add	r22, r22
    2cd6:	77 1f       	adc	r23, r23
    2cd8:	88 1f       	adc	r24, r24
    2cda:	99 1f       	adc	r25, r25
    2cdc:	1a f0       	brmi	.+6      	; 0x2ce4 <__fixunssfsi+0x22>
    2cde:	ba 95       	dec	r27
    2ce0:	c9 f7       	brne	.-14     	; 0x2cd4 <__fixunssfsi+0x12>
    2ce2:	12 c0       	rjmp	.+36     	; 0x2d08 <__fixunssfsi+0x46>
    2ce4:	b1 30       	cpi	r27, 0x01	; 1
    2ce6:	81 f0       	breq	.+32     	; 0x2d08 <__fixunssfsi+0x46>
    2ce8:	9f d0       	rcall	.+318    	; 0x2e28 <__fp_zero>
    2cea:	b1 e0       	ldi	r27, 0x01	; 1
    2cec:	08 95       	ret
    2cee:	9c c0       	rjmp	.+312    	; 0x2e28 <__fp_zero>
    2cf0:	67 2f       	mov	r22, r23
    2cf2:	78 2f       	mov	r23, r24
    2cf4:	88 27       	eor	r24, r24
    2cf6:	b8 5f       	subi	r27, 0xF8	; 248
    2cf8:	39 f0       	breq	.+14     	; 0x2d08 <__fixunssfsi+0x46>
    2cfa:	b9 3f       	cpi	r27, 0xF9	; 249
    2cfc:	cc f3       	brlt	.-14     	; 0x2cf0 <__fixunssfsi+0x2e>
    2cfe:	86 95       	lsr	r24
    2d00:	77 95       	ror	r23
    2d02:	67 95       	ror	r22
    2d04:	b3 95       	inc	r27
    2d06:	d9 f7       	brne	.-10     	; 0x2cfe <__fixunssfsi+0x3c>
    2d08:	3e f4       	brtc	.+14     	; 0x2d18 <__fixunssfsi+0x56>
    2d0a:	90 95       	com	r25
    2d0c:	80 95       	com	r24
    2d0e:	70 95       	com	r23
    2d10:	61 95       	neg	r22
    2d12:	7f 4f       	sbci	r23, 0xFF	; 255
    2d14:	8f 4f       	sbci	r24, 0xFF	; 255
    2d16:	9f 4f       	sbci	r25, 0xFF	; 255
    2d18:	08 95       	ret

00002d1a <__floatunsisf>:
    2d1a:	e8 94       	clt
    2d1c:	09 c0       	rjmp	.+18     	; 0x2d30 <__floatsisf+0x12>

00002d1e <__floatsisf>:
    2d1e:	97 fb       	bst	r25, 7
    2d20:	3e f4       	brtc	.+14     	; 0x2d30 <__floatsisf+0x12>
    2d22:	90 95       	com	r25
    2d24:	80 95       	com	r24
    2d26:	70 95       	com	r23
    2d28:	61 95       	neg	r22
    2d2a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d2c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d30:	99 23       	and	r25, r25
    2d32:	a9 f0       	breq	.+42     	; 0x2d5e <__floatsisf+0x40>
    2d34:	f9 2f       	mov	r31, r25
    2d36:	96 e9       	ldi	r25, 0x96	; 150
    2d38:	bb 27       	eor	r27, r27
    2d3a:	93 95       	inc	r25
    2d3c:	f6 95       	lsr	r31
    2d3e:	87 95       	ror	r24
    2d40:	77 95       	ror	r23
    2d42:	67 95       	ror	r22
    2d44:	b7 95       	ror	r27
    2d46:	f1 11       	cpse	r31, r1
    2d48:	f8 cf       	rjmp	.-16     	; 0x2d3a <__floatsisf+0x1c>
    2d4a:	fa f4       	brpl	.+62     	; 0x2d8a <__floatsisf+0x6c>
    2d4c:	bb 0f       	add	r27, r27
    2d4e:	11 f4       	brne	.+4      	; 0x2d54 <__floatsisf+0x36>
    2d50:	60 ff       	sbrs	r22, 0
    2d52:	1b c0       	rjmp	.+54     	; 0x2d8a <__floatsisf+0x6c>
    2d54:	6f 5f       	subi	r22, 0xFF	; 255
    2d56:	7f 4f       	sbci	r23, 0xFF	; 255
    2d58:	8f 4f       	sbci	r24, 0xFF	; 255
    2d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d5c:	16 c0       	rjmp	.+44     	; 0x2d8a <__floatsisf+0x6c>
    2d5e:	88 23       	and	r24, r24
    2d60:	11 f0       	breq	.+4      	; 0x2d66 <__floatsisf+0x48>
    2d62:	96 e9       	ldi	r25, 0x96	; 150
    2d64:	11 c0       	rjmp	.+34     	; 0x2d88 <__floatsisf+0x6a>
    2d66:	77 23       	and	r23, r23
    2d68:	21 f0       	breq	.+8      	; 0x2d72 <__floatsisf+0x54>
    2d6a:	9e e8       	ldi	r25, 0x8E	; 142
    2d6c:	87 2f       	mov	r24, r23
    2d6e:	76 2f       	mov	r23, r22
    2d70:	05 c0       	rjmp	.+10     	; 0x2d7c <__floatsisf+0x5e>
    2d72:	66 23       	and	r22, r22
    2d74:	71 f0       	breq	.+28     	; 0x2d92 <__floatsisf+0x74>
    2d76:	96 e8       	ldi	r25, 0x86	; 134
    2d78:	86 2f       	mov	r24, r22
    2d7a:	70 e0       	ldi	r23, 0x00	; 0
    2d7c:	60 e0       	ldi	r22, 0x00	; 0
    2d7e:	2a f0       	brmi	.+10     	; 0x2d8a <__floatsisf+0x6c>
    2d80:	9a 95       	dec	r25
    2d82:	66 0f       	add	r22, r22
    2d84:	77 1f       	adc	r23, r23
    2d86:	88 1f       	adc	r24, r24
    2d88:	da f7       	brpl	.-10     	; 0x2d80 <__floatsisf+0x62>
    2d8a:	88 0f       	add	r24, r24
    2d8c:	96 95       	lsr	r25
    2d8e:	87 95       	ror	r24
    2d90:	97 f9       	bld	r25, 7
    2d92:	08 95       	ret

00002d94 <__fp_inf>:
    2d94:	97 f9       	bld	r25, 7
    2d96:	9f 67       	ori	r25, 0x7F	; 127
    2d98:	80 e8       	ldi	r24, 0x80	; 128
    2d9a:	70 e0       	ldi	r23, 0x00	; 0
    2d9c:	60 e0       	ldi	r22, 0x00	; 0
    2d9e:	08 95       	ret

00002da0 <__fp_nan>:
    2da0:	9f ef       	ldi	r25, 0xFF	; 255
    2da2:	80 ec       	ldi	r24, 0xC0	; 192
    2da4:	08 95       	ret

00002da6 <__fp_pscA>:
    2da6:	00 24       	eor	r0, r0
    2da8:	0a 94       	dec	r0
    2daa:	16 16       	cp	r1, r22
    2dac:	17 06       	cpc	r1, r23
    2dae:	18 06       	cpc	r1, r24
    2db0:	09 06       	cpc	r0, r25
    2db2:	08 95       	ret

00002db4 <__fp_pscB>:
    2db4:	00 24       	eor	r0, r0
    2db6:	0a 94       	dec	r0
    2db8:	12 16       	cp	r1, r18
    2dba:	13 06       	cpc	r1, r19
    2dbc:	14 06       	cpc	r1, r20
    2dbe:	05 06       	cpc	r0, r21
    2dc0:	08 95       	ret

00002dc2 <__fp_round>:
    2dc2:	09 2e       	mov	r0, r25
    2dc4:	03 94       	inc	r0
    2dc6:	00 0c       	add	r0, r0
    2dc8:	11 f4       	brne	.+4      	; 0x2dce <__fp_round+0xc>
    2dca:	88 23       	and	r24, r24
    2dcc:	52 f0       	brmi	.+20     	; 0x2de2 <__fp_round+0x20>
    2dce:	bb 0f       	add	r27, r27
    2dd0:	40 f4       	brcc	.+16     	; 0x2de2 <__fp_round+0x20>
    2dd2:	bf 2b       	or	r27, r31
    2dd4:	11 f4       	brne	.+4      	; 0x2dda <__fp_round+0x18>
    2dd6:	60 ff       	sbrs	r22, 0
    2dd8:	04 c0       	rjmp	.+8      	; 0x2de2 <__fp_round+0x20>
    2dda:	6f 5f       	subi	r22, 0xFF	; 255
    2ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dde:	8f 4f       	sbci	r24, 0xFF	; 255
    2de0:	9f 4f       	sbci	r25, 0xFF	; 255
    2de2:	08 95       	ret

00002de4 <__fp_split3>:
    2de4:	57 fd       	sbrc	r21, 7
    2de6:	90 58       	subi	r25, 0x80	; 128
    2de8:	44 0f       	add	r20, r20
    2dea:	55 1f       	adc	r21, r21
    2dec:	59 f0       	breq	.+22     	; 0x2e04 <__fp_splitA+0x10>
    2dee:	5f 3f       	cpi	r21, 0xFF	; 255
    2df0:	71 f0       	breq	.+28     	; 0x2e0e <__fp_splitA+0x1a>
    2df2:	47 95       	ror	r20

00002df4 <__fp_splitA>:
    2df4:	88 0f       	add	r24, r24
    2df6:	97 fb       	bst	r25, 7
    2df8:	99 1f       	adc	r25, r25
    2dfa:	61 f0       	breq	.+24     	; 0x2e14 <__fp_splitA+0x20>
    2dfc:	9f 3f       	cpi	r25, 0xFF	; 255
    2dfe:	79 f0       	breq	.+30     	; 0x2e1e <__fp_splitA+0x2a>
    2e00:	87 95       	ror	r24
    2e02:	08 95       	ret
    2e04:	12 16       	cp	r1, r18
    2e06:	13 06       	cpc	r1, r19
    2e08:	14 06       	cpc	r1, r20
    2e0a:	55 1f       	adc	r21, r21
    2e0c:	f2 cf       	rjmp	.-28     	; 0x2df2 <__fp_split3+0xe>
    2e0e:	46 95       	lsr	r20
    2e10:	f1 df       	rcall	.-30     	; 0x2df4 <__fp_splitA>
    2e12:	08 c0       	rjmp	.+16     	; 0x2e24 <__fp_splitA+0x30>
    2e14:	16 16       	cp	r1, r22
    2e16:	17 06       	cpc	r1, r23
    2e18:	18 06       	cpc	r1, r24
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	f1 cf       	rjmp	.-30     	; 0x2e00 <__fp_splitA+0xc>
    2e1e:	86 95       	lsr	r24
    2e20:	71 05       	cpc	r23, r1
    2e22:	61 05       	cpc	r22, r1
    2e24:	08 94       	sec
    2e26:	08 95       	ret

00002e28 <__fp_zero>:
    2e28:	e8 94       	clt

00002e2a <__fp_szero>:
    2e2a:	bb 27       	eor	r27, r27
    2e2c:	66 27       	eor	r22, r22
    2e2e:	77 27       	eor	r23, r23
    2e30:	cb 01       	movw	r24, r22
    2e32:	97 f9       	bld	r25, 7
    2e34:	08 95       	ret
    2e36:	0e f0       	brts	.+2      	; 0x2e3a <__fp_szero+0x10>
    2e38:	a6 c0       	rjmp	.+332    	; 0x2f86 <__fp_mpack>
    2e3a:	b2 cf       	rjmp	.-156    	; 0x2da0 <__fp_nan>
    2e3c:	68 94       	set
    2e3e:	aa cf       	rjmp	.-172    	; 0x2d94 <__fp_inf>

00002e40 <log>:
    2e40:	d9 df       	rcall	.-78     	; 0x2df4 <__fp_splitA>
    2e42:	c8 f3       	brcs	.-14     	; 0x2e36 <__fp_szero+0xc>
    2e44:	99 23       	and	r25, r25
    2e46:	d1 f3       	breq	.-12     	; 0x2e3c <__fp_szero+0x12>
    2e48:	c6 f3       	brts	.-16     	; 0x2e3a <__fp_szero+0x10>
    2e4a:	df 93       	push	r29
    2e4c:	cf 93       	push	r28
    2e4e:	1f 93       	push	r17
    2e50:	0f 93       	push	r16
    2e52:	ff 92       	push	r15
    2e54:	c9 2f       	mov	r28, r25
    2e56:	dd 27       	eor	r29, r29
    2e58:	88 23       	and	r24, r24
    2e5a:	2a f0       	brmi	.+10     	; 0x2e66 <log+0x26>
    2e5c:	21 97       	sbiw	r28, 0x01	; 1
    2e5e:	66 0f       	add	r22, r22
    2e60:	77 1f       	adc	r23, r23
    2e62:	88 1f       	adc	r24, r24
    2e64:	da f7       	brpl	.-10     	; 0x2e5c <log+0x1c>
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e8       	ldi	r20, 0x80	; 128
    2e6c:	5f eb       	ldi	r21, 0xBF	; 191
    2e6e:	9f e3       	ldi	r25, 0x3F	; 63
    2e70:	88 39       	cpi	r24, 0x98	; 152
    2e72:	20 f0       	brcs	.+8      	; 0x2e7c <log+0x3c>
    2e74:	80 3e       	cpi	r24, 0xE0	; 224
    2e76:	30 f0       	brcs	.+12     	; 0x2e84 <log+0x44>
    2e78:	21 96       	adiw	r28, 0x01	; 1
    2e7a:	8f 77       	andi	r24, 0x7F	; 127
    2e7c:	51 de       	rcall	.-862    	; 0x2b20 <__addsf3>
    2e7e:	ec ef       	ldi	r30, 0xFC	; 252
    2e80:	f1 e0       	ldi	r31, 0x01	; 1
    2e82:	03 c0       	rjmp	.+6      	; 0x2e8a <log+0x4a>
    2e84:	4d de       	rcall	.-870    	; 0x2b20 <__addsf3>
    2e86:	e9 e2       	ldi	r30, 0x29	; 41
    2e88:	f2 e0       	ldi	r31, 0x02	; 2
    2e8a:	8b d0       	rcall	.+278    	; 0x2fa2 <__fp_powser>
    2e8c:	8b 01       	movw	r16, r22
    2e8e:	be 01       	movw	r22, r28
    2e90:	ec 01       	movw	r28, r24
    2e92:	fb 2e       	mov	r15, r27
    2e94:	6f 57       	subi	r22, 0x7F	; 127
    2e96:	71 09       	sbc	r23, r1
    2e98:	75 95       	asr	r23
    2e9a:	77 1f       	adc	r23, r23
    2e9c:	88 0b       	sbc	r24, r24
    2e9e:	99 0b       	sbc	r25, r25
    2ea0:	3e df       	rcall	.-388    	; 0x2d1e <__floatsisf>
    2ea2:	28 e1       	ldi	r18, 0x18	; 24
    2ea4:	32 e7       	ldi	r19, 0x72	; 114
    2ea6:	41 e3       	ldi	r20, 0x31	; 49
    2ea8:	5f e3       	ldi	r21, 0x3F	; 63
    2eaa:	16 d0       	rcall	.+44     	; 0x2ed8 <__mulsf3x>
    2eac:	af 2d       	mov	r26, r15
    2eae:	98 01       	movw	r18, r16
    2eb0:	ae 01       	movw	r20, r28
    2eb2:	ff 90       	pop	r15
    2eb4:	0f 91       	pop	r16
    2eb6:	1f 91       	pop	r17
    2eb8:	cf 91       	pop	r28
    2eba:	df 91       	pop	r29
    2ebc:	42 de       	rcall	.-892    	; 0x2b42 <__addsf3x>
    2ebe:	81 cf       	rjmp	.-254    	; 0x2dc2 <__fp_round>

00002ec0 <__mulsf3>:
    2ec0:	0b d0       	rcall	.+22     	; 0x2ed8 <__mulsf3x>
    2ec2:	7f cf       	rjmp	.-258    	; 0x2dc2 <__fp_round>
    2ec4:	70 df       	rcall	.-288    	; 0x2da6 <__fp_pscA>
    2ec6:	28 f0       	brcs	.+10     	; 0x2ed2 <__mulsf3+0x12>
    2ec8:	75 df       	rcall	.-278    	; 0x2db4 <__fp_pscB>
    2eca:	18 f0       	brcs	.+6      	; 0x2ed2 <__mulsf3+0x12>
    2ecc:	95 23       	and	r25, r21
    2ece:	09 f0       	breq	.+2      	; 0x2ed2 <__mulsf3+0x12>
    2ed0:	61 cf       	rjmp	.-318    	; 0x2d94 <__fp_inf>
    2ed2:	66 cf       	rjmp	.-308    	; 0x2da0 <__fp_nan>
    2ed4:	11 24       	eor	r1, r1
    2ed6:	a9 cf       	rjmp	.-174    	; 0x2e2a <__fp_szero>

00002ed8 <__mulsf3x>:
    2ed8:	85 df       	rcall	.-246    	; 0x2de4 <__fp_split3>
    2eda:	a0 f3       	brcs	.-24     	; 0x2ec4 <__mulsf3+0x4>

00002edc <__mulsf3_pse>:
    2edc:	95 9f       	mul	r25, r21
    2ede:	d1 f3       	breq	.-12     	; 0x2ed4 <__mulsf3+0x14>
    2ee0:	95 0f       	add	r25, r21
    2ee2:	50 e0       	ldi	r21, 0x00	; 0
    2ee4:	55 1f       	adc	r21, r21
    2ee6:	62 9f       	mul	r22, r18
    2ee8:	f0 01       	movw	r30, r0
    2eea:	72 9f       	mul	r23, r18
    2eec:	bb 27       	eor	r27, r27
    2eee:	f0 0d       	add	r31, r0
    2ef0:	b1 1d       	adc	r27, r1
    2ef2:	63 9f       	mul	r22, r19
    2ef4:	aa 27       	eor	r26, r26
    2ef6:	f0 0d       	add	r31, r0
    2ef8:	b1 1d       	adc	r27, r1
    2efa:	aa 1f       	adc	r26, r26
    2efc:	64 9f       	mul	r22, r20
    2efe:	66 27       	eor	r22, r22
    2f00:	b0 0d       	add	r27, r0
    2f02:	a1 1d       	adc	r26, r1
    2f04:	66 1f       	adc	r22, r22
    2f06:	82 9f       	mul	r24, r18
    2f08:	22 27       	eor	r18, r18
    2f0a:	b0 0d       	add	r27, r0
    2f0c:	a1 1d       	adc	r26, r1
    2f0e:	62 1f       	adc	r22, r18
    2f10:	73 9f       	mul	r23, r19
    2f12:	b0 0d       	add	r27, r0
    2f14:	a1 1d       	adc	r26, r1
    2f16:	62 1f       	adc	r22, r18
    2f18:	83 9f       	mul	r24, r19
    2f1a:	a0 0d       	add	r26, r0
    2f1c:	61 1d       	adc	r22, r1
    2f1e:	22 1f       	adc	r18, r18
    2f20:	74 9f       	mul	r23, r20
    2f22:	33 27       	eor	r19, r19
    2f24:	a0 0d       	add	r26, r0
    2f26:	61 1d       	adc	r22, r1
    2f28:	23 1f       	adc	r18, r19
    2f2a:	84 9f       	mul	r24, r20
    2f2c:	60 0d       	add	r22, r0
    2f2e:	21 1d       	adc	r18, r1
    2f30:	82 2f       	mov	r24, r18
    2f32:	76 2f       	mov	r23, r22
    2f34:	6a 2f       	mov	r22, r26
    2f36:	11 24       	eor	r1, r1
    2f38:	9f 57       	subi	r25, 0x7F	; 127
    2f3a:	50 40       	sbci	r21, 0x00	; 0
    2f3c:	8a f0       	brmi	.+34     	; 0x2f60 <__mulsf3_pse+0x84>
    2f3e:	e1 f0       	breq	.+56     	; 0x2f78 <__mulsf3_pse+0x9c>
    2f40:	88 23       	and	r24, r24
    2f42:	4a f0       	brmi	.+18     	; 0x2f56 <__mulsf3_pse+0x7a>
    2f44:	ee 0f       	add	r30, r30
    2f46:	ff 1f       	adc	r31, r31
    2f48:	bb 1f       	adc	r27, r27
    2f4a:	66 1f       	adc	r22, r22
    2f4c:	77 1f       	adc	r23, r23
    2f4e:	88 1f       	adc	r24, r24
    2f50:	91 50       	subi	r25, 0x01	; 1
    2f52:	50 40       	sbci	r21, 0x00	; 0
    2f54:	a9 f7       	brne	.-22     	; 0x2f40 <__mulsf3_pse+0x64>
    2f56:	9e 3f       	cpi	r25, 0xFE	; 254
    2f58:	51 05       	cpc	r21, r1
    2f5a:	70 f0       	brcs	.+28     	; 0x2f78 <__mulsf3_pse+0x9c>
    2f5c:	1b cf       	rjmp	.-458    	; 0x2d94 <__fp_inf>
    2f5e:	65 cf       	rjmp	.-310    	; 0x2e2a <__fp_szero>
    2f60:	5f 3f       	cpi	r21, 0xFF	; 255
    2f62:	ec f3       	brlt	.-6      	; 0x2f5e <__mulsf3_pse+0x82>
    2f64:	98 3e       	cpi	r25, 0xE8	; 232
    2f66:	dc f3       	brlt	.-10     	; 0x2f5e <__mulsf3_pse+0x82>
    2f68:	86 95       	lsr	r24
    2f6a:	77 95       	ror	r23
    2f6c:	67 95       	ror	r22
    2f6e:	b7 95       	ror	r27
    2f70:	f7 95       	ror	r31
    2f72:	e7 95       	ror	r30
    2f74:	9f 5f       	subi	r25, 0xFF	; 255
    2f76:	c1 f7       	brne	.-16     	; 0x2f68 <__mulsf3_pse+0x8c>
    2f78:	fe 2b       	or	r31, r30
    2f7a:	88 0f       	add	r24, r24
    2f7c:	91 1d       	adc	r25, r1
    2f7e:	96 95       	lsr	r25
    2f80:	87 95       	ror	r24
    2f82:	97 f9       	bld	r25, 7
    2f84:	08 95       	ret

00002f86 <__fp_mpack>:
    2f86:	9f 3f       	cpi	r25, 0xFF	; 255
    2f88:	31 f0       	breq	.+12     	; 0x2f96 <__fp_mpack_finite+0xc>

00002f8a <__fp_mpack_finite>:
    2f8a:	91 50       	subi	r25, 0x01	; 1
    2f8c:	20 f4       	brcc	.+8      	; 0x2f96 <__fp_mpack_finite+0xc>
    2f8e:	87 95       	ror	r24
    2f90:	77 95       	ror	r23
    2f92:	67 95       	ror	r22
    2f94:	b7 95       	ror	r27
    2f96:	88 0f       	add	r24, r24
    2f98:	91 1d       	adc	r25, r1
    2f9a:	96 95       	lsr	r25
    2f9c:	87 95       	ror	r24
    2f9e:	97 f9       	bld	r25, 7
    2fa0:	08 95       	ret

00002fa2 <__fp_powser>:
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	1f 93       	push	r17
    2fa8:	0f 93       	push	r16
    2faa:	ff 92       	push	r15
    2fac:	ef 92       	push	r14
    2fae:	df 92       	push	r13
    2fb0:	7b 01       	movw	r14, r22
    2fb2:	8c 01       	movw	r16, r24
    2fb4:	68 94       	set
    2fb6:	05 c0       	rjmp	.+10     	; 0x2fc2 <__fp_powser+0x20>
    2fb8:	da 2e       	mov	r13, r26
    2fba:	ef 01       	movw	r28, r30
    2fbc:	8d df       	rcall	.-230    	; 0x2ed8 <__mulsf3x>
    2fbe:	fe 01       	movw	r30, r28
    2fc0:	e8 94       	clt
    2fc2:	a5 91       	lpm	r26, Z+
    2fc4:	25 91       	lpm	r18, Z+
    2fc6:	35 91       	lpm	r19, Z+
    2fc8:	45 91       	lpm	r20, Z+
    2fca:	55 91       	lpm	r21, Z+
    2fcc:	ae f3       	brts	.-22     	; 0x2fb8 <__fp_powser+0x16>
    2fce:	ef 01       	movw	r28, r30
    2fd0:	b8 dd       	rcall	.-1168   	; 0x2b42 <__addsf3x>
    2fd2:	fe 01       	movw	r30, r28
    2fd4:	97 01       	movw	r18, r14
    2fd6:	a8 01       	movw	r20, r16
    2fd8:	da 94       	dec	r13
    2fda:	79 f7       	brne	.-34     	; 0x2fba <__fp_powser+0x18>
    2fdc:	df 90       	pop	r13
    2fde:	ef 90       	pop	r14
    2fe0:	ff 90       	pop	r15
    2fe2:	0f 91       	pop	r16
    2fe4:	1f 91       	pop	r17
    2fe6:	cf 91       	pop	r28
    2fe8:	df 91       	pop	r29
    2fea:	08 95       	ret

00002fec <vfprintf>:
    2fec:	2f 92       	push	r2
    2fee:	3f 92       	push	r3
    2ff0:	4f 92       	push	r4
    2ff2:	5f 92       	push	r5
    2ff4:	6f 92       	push	r6
    2ff6:	7f 92       	push	r7
    2ff8:	8f 92       	push	r8
    2ffa:	9f 92       	push	r9
    2ffc:	af 92       	push	r10
    2ffe:	bf 92       	push	r11
    3000:	cf 92       	push	r12
    3002:	df 92       	push	r13
    3004:	ef 92       	push	r14
    3006:	ff 92       	push	r15
    3008:	0f 93       	push	r16
    300a:	1f 93       	push	r17
    300c:	cf 93       	push	r28
    300e:	df 93       	push	r29
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	60 97       	sbiw	r28, 0x10	; 16
    3016:	cd bf       	out	0x3d, r28	; 61
    3018:	de bf       	out	0x3e, r29	; 62
    301a:	7c 01       	movw	r14, r24
    301c:	1b 01       	movw	r2, r22
    301e:	6a 01       	movw	r12, r20
    3020:	fc 01       	movw	r30, r24
    3022:	16 82       	std	Z+6, r1	; 0x06
    3024:	17 82       	std	Z+7, r1	; 0x07
    3026:	83 81       	ldd	r24, Z+3	; 0x03
    3028:	81 ff       	sbrs	r24, 1
    302a:	2a c3       	rjmp	.+1620   	; 0x3680 <vfprintf+0x694>
    302c:	9e 01       	movw	r18, r28
    302e:	2f 5f       	subi	r18, 0xFF	; 255
    3030:	3f 4f       	sbci	r19, 0xFF	; 255
    3032:	39 01       	movw	r6, r18
    3034:	f7 01       	movw	r30, r14
    3036:	93 81       	ldd	r25, Z+3	; 0x03
    3038:	f1 01       	movw	r30, r2
    303a:	93 fd       	sbrc	r25, 3
    303c:	85 91       	lpm	r24, Z+
    303e:	93 ff       	sbrs	r25, 3
    3040:	81 91       	ld	r24, Z+
    3042:	1f 01       	movw	r2, r30
    3044:	88 23       	and	r24, r24
    3046:	09 f4       	brne	.+2      	; 0x304a <vfprintf+0x5e>
    3048:	17 c3       	rjmp	.+1582   	; 0x3678 <vfprintf+0x68c>
    304a:	85 32       	cpi	r24, 0x25	; 37
    304c:	39 f4       	brne	.+14     	; 0x305c <vfprintf+0x70>
    304e:	93 fd       	sbrc	r25, 3
    3050:	85 91       	lpm	r24, Z+
    3052:	93 ff       	sbrs	r25, 3
    3054:	81 91       	ld	r24, Z+
    3056:	1f 01       	movw	r2, r30
    3058:	85 32       	cpi	r24, 0x25	; 37
    305a:	31 f4       	brne	.+12     	; 0x3068 <vfprintf+0x7c>
    305c:	b7 01       	movw	r22, r14
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	61 d5       	rcall	.+2754   	; 0x3b24 <fputc>
    3062:	56 01       	movw	r10, r12
    3064:	65 01       	movw	r12, r10
    3066:	e6 cf       	rjmp	.-52     	; 0x3034 <vfprintf+0x48>
    3068:	10 e0       	ldi	r17, 0x00	; 0
    306a:	51 2c       	mov	r5, r1
    306c:	91 2c       	mov	r9, r1
    306e:	ff e1       	ldi	r31, 0x1F	; 31
    3070:	f9 15       	cp	r31, r9
    3072:	d8 f0       	brcs	.+54     	; 0x30aa <vfprintf+0xbe>
    3074:	8b 32       	cpi	r24, 0x2B	; 43
    3076:	79 f0       	breq	.+30     	; 0x3096 <vfprintf+0xaa>
    3078:	38 f4       	brcc	.+14     	; 0x3088 <vfprintf+0x9c>
    307a:	80 32       	cpi	r24, 0x20	; 32
    307c:	79 f0       	breq	.+30     	; 0x309c <vfprintf+0xb0>
    307e:	83 32       	cpi	r24, 0x23	; 35
    3080:	a1 f4       	brne	.+40     	; 0x30aa <vfprintf+0xbe>
    3082:	f9 2d       	mov	r31, r9
    3084:	f0 61       	ori	r31, 0x10	; 16
    3086:	2e c0       	rjmp	.+92     	; 0x30e4 <vfprintf+0xf8>
    3088:	8d 32       	cpi	r24, 0x2D	; 45
    308a:	61 f0       	breq	.+24     	; 0x30a4 <vfprintf+0xb8>
    308c:	80 33       	cpi	r24, 0x30	; 48
    308e:	69 f4       	brne	.+26     	; 0x30aa <vfprintf+0xbe>
    3090:	29 2d       	mov	r18, r9
    3092:	21 60       	ori	r18, 0x01	; 1
    3094:	2d c0       	rjmp	.+90     	; 0x30f0 <vfprintf+0x104>
    3096:	39 2d       	mov	r19, r9
    3098:	32 60       	ori	r19, 0x02	; 2
    309a:	93 2e       	mov	r9, r19
    309c:	89 2d       	mov	r24, r9
    309e:	84 60       	ori	r24, 0x04	; 4
    30a0:	98 2e       	mov	r9, r24
    30a2:	2a c0       	rjmp	.+84     	; 0x30f8 <vfprintf+0x10c>
    30a4:	e9 2d       	mov	r30, r9
    30a6:	e8 60       	ori	r30, 0x08	; 8
    30a8:	15 c0       	rjmp	.+42     	; 0x30d4 <vfprintf+0xe8>
    30aa:	97 fc       	sbrc	r9, 7
    30ac:	2d c0       	rjmp	.+90     	; 0x3108 <vfprintf+0x11c>
    30ae:	20 ed       	ldi	r18, 0xD0	; 208
    30b0:	28 0f       	add	r18, r24
    30b2:	2a 30       	cpi	r18, 0x0A	; 10
    30b4:	88 f4       	brcc	.+34     	; 0x30d8 <vfprintf+0xec>
    30b6:	96 fe       	sbrs	r9, 6
    30b8:	06 c0       	rjmp	.+12     	; 0x30c6 <vfprintf+0xda>
    30ba:	3a e0       	ldi	r19, 0x0A	; 10
    30bc:	13 9f       	mul	r17, r19
    30be:	20 0d       	add	r18, r0
    30c0:	11 24       	eor	r1, r1
    30c2:	12 2f       	mov	r17, r18
    30c4:	19 c0       	rjmp	.+50     	; 0x30f8 <vfprintf+0x10c>
    30c6:	8a e0       	ldi	r24, 0x0A	; 10
    30c8:	58 9e       	mul	r5, r24
    30ca:	20 0d       	add	r18, r0
    30cc:	11 24       	eor	r1, r1
    30ce:	52 2e       	mov	r5, r18
    30d0:	e9 2d       	mov	r30, r9
    30d2:	e0 62       	ori	r30, 0x20	; 32
    30d4:	9e 2e       	mov	r9, r30
    30d6:	10 c0       	rjmp	.+32     	; 0x30f8 <vfprintf+0x10c>
    30d8:	8e 32       	cpi	r24, 0x2E	; 46
    30da:	31 f4       	brne	.+12     	; 0x30e8 <vfprintf+0xfc>
    30dc:	96 fc       	sbrc	r9, 6
    30de:	cc c2       	rjmp	.+1432   	; 0x3678 <vfprintf+0x68c>
    30e0:	f9 2d       	mov	r31, r9
    30e2:	f0 64       	ori	r31, 0x40	; 64
    30e4:	9f 2e       	mov	r9, r31
    30e6:	08 c0       	rjmp	.+16     	; 0x30f8 <vfprintf+0x10c>
    30e8:	8c 36       	cpi	r24, 0x6C	; 108
    30ea:	21 f4       	brne	.+8      	; 0x30f4 <vfprintf+0x108>
    30ec:	29 2d       	mov	r18, r9
    30ee:	20 68       	ori	r18, 0x80	; 128
    30f0:	92 2e       	mov	r9, r18
    30f2:	02 c0       	rjmp	.+4      	; 0x30f8 <vfprintf+0x10c>
    30f4:	88 36       	cpi	r24, 0x68	; 104
    30f6:	41 f4       	brne	.+16     	; 0x3108 <vfprintf+0x11c>
    30f8:	f1 01       	movw	r30, r2
    30fa:	93 fd       	sbrc	r25, 3
    30fc:	85 91       	lpm	r24, Z+
    30fe:	93 ff       	sbrs	r25, 3
    3100:	81 91       	ld	r24, Z+
    3102:	1f 01       	movw	r2, r30
    3104:	81 11       	cpse	r24, r1
    3106:	b3 cf       	rjmp	.-154    	; 0x306e <vfprintf+0x82>
    3108:	9b eb       	ldi	r25, 0xBB	; 187
    310a:	98 0f       	add	r25, r24
    310c:	93 30       	cpi	r25, 0x03	; 3
    310e:	20 f4       	brcc	.+8      	; 0x3118 <vfprintf+0x12c>
    3110:	99 2d       	mov	r25, r9
    3112:	90 61       	ori	r25, 0x10	; 16
    3114:	80 5e       	subi	r24, 0xE0	; 224
    3116:	07 c0       	rjmp	.+14     	; 0x3126 <vfprintf+0x13a>
    3118:	9b e9       	ldi	r25, 0x9B	; 155
    311a:	98 0f       	add	r25, r24
    311c:	93 30       	cpi	r25, 0x03	; 3
    311e:	08 f0       	brcs	.+2      	; 0x3122 <vfprintf+0x136>
    3120:	59 c1       	rjmp	.+690    	; 0x33d4 <vfprintf+0x3e8>
    3122:	99 2d       	mov	r25, r9
    3124:	9f 7e       	andi	r25, 0xEF	; 239
    3126:	96 ff       	sbrs	r25, 6
    3128:	16 e0       	ldi	r17, 0x06	; 6
    312a:	9f 73       	andi	r25, 0x3F	; 63
    312c:	99 2e       	mov	r9, r25
    312e:	85 36       	cpi	r24, 0x65	; 101
    3130:	19 f4       	brne	.+6      	; 0x3138 <vfprintf+0x14c>
    3132:	90 64       	ori	r25, 0x40	; 64
    3134:	99 2e       	mov	r9, r25
    3136:	08 c0       	rjmp	.+16     	; 0x3148 <vfprintf+0x15c>
    3138:	86 36       	cpi	r24, 0x66	; 102
    313a:	21 f4       	brne	.+8      	; 0x3144 <vfprintf+0x158>
    313c:	39 2f       	mov	r19, r25
    313e:	30 68       	ori	r19, 0x80	; 128
    3140:	93 2e       	mov	r9, r19
    3142:	02 c0       	rjmp	.+4      	; 0x3148 <vfprintf+0x15c>
    3144:	11 11       	cpse	r17, r1
    3146:	11 50       	subi	r17, 0x01	; 1
    3148:	97 fe       	sbrs	r9, 7
    314a:	07 c0       	rjmp	.+14     	; 0x315a <vfprintf+0x16e>
    314c:	1c 33       	cpi	r17, 0x3C	; 60
    314e:	50 f4       	brcc	.+20     	; 0x3164 <vfprintf+0x178>
    3150:	44 24       	eor	r4, r4
    3152:	43 94       	inc	r4
    3154:	41 0e       	add	r4, r17
    3156:	27 e0       	ldi	r18, 0x07	; 7
    3158:	0b c0       	rjmp	.+22     	; 0x3170 <vfprintf+0x184>
    315a:	18 30       	cpi	r17, 0x08	; 8
    315c:	38 f0       	brcs	.+14     	; 0x316c <vfprintf+0x180>
    315e:	27 e0       	ldi	r18, 0x07	; 7
    3160:	17 e0       	ldi	r17, 0x07	; 7
    3162:	05 c0       	rjmp	.+10     	; 0x316e <vfprintf+0x182>
    3164:	27 e0       	ldi	r18, 0x07	; 7
    3166:	9c e3       	ldi	r25, 0x3C	; 60
    3168:	49 2e       	mov	r4, r25
    316a:	02 c0       	rjmp	.+4      	; 0x3170 <vfprintf+0x184>
    316c:	21 2f       	mov	r18, r17
    316e:	41 2c       	mov	r4, r1
    3170:	56 01       	movw	r10, r12
    3172:	84 e0       	ldi	r24, 0x04	; 4
    3174:	a8 0e       	add	r10, r24
    3176:	b1 1c       	adc	r11, r1
    3178:	f6 01       	movw	r30, r12
    317a:	60 81       	ld	r22, Z
    317c:	71 81       	ldd	r23, Z+1	; 0x01
    317e:	82 81       	ldd	r24, Z+2	; 0x02
    3180:	93 81       	ldd	r25, Z+3	; 0x03
    3182:	04 2d       	mov	r16, r4
    3184:	a3 01       	movw	r20, r6
    3186:	96 d3       	rcall	.+1836   	; 0x38b4 <__ftoa_engine>
    3188:	6c 01       	movw	r12, r24
    318a:	f9 81       	ldd	r31, Y+1	; 0x01
    318c:	fc 87       	std	Y+12, r31	; 0x0c
    318e:	f0 ff       	sbrs	r31, 0
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <vfprintf+0x1aa>
    3192:	f3 ff       	sbrs	r31, 3
    3194:	06 c0       	rjmp	.+12     	; 0x31a2 <vfprintf+0x1b6>
    3196:	91 fc       	sbrc	r9, 1
    3198:	06 c0       	rjmp	.+12     	; 0x31a6 <vfprintf+0x1ba>
    319a:	92 fe       	sbrs	r9, 2
    319c:	06 c0       	rjmp	.+12     	; 0x31aa <vfprintf+0x1be>
    319e:	00 e2       	ldi	r16, 0x20	; 32
    31a0:	05 c0       	rjmp	.+10     	; 0x31ac <vfprintf+0x1c0>
    31a2:	0d e2       	ldi	r16, 0x2D	; 45
    31a4:	03 c0       	rjmp	.+6      	; 0x31ac <vfprintf+0x1c0>
    31a6:	0b e2       	ldi	r16, 0x2B	; 43
    31a8:	01 c0       	rjmp	.+2      	; 0x31ac <vfprintf+0x1c0>
    31aa:	00 e0       	ldi	r16, 0x00	; 0
    31ac:	8c 85       	ldd	r24, Y+12	; 0x0c
    31ae:	8c 70       	andi	r24, 0x0C	; 12
    31b0:	19 f0       	breq	.+6      	; 0x31b8 <vfprintf+0x1cc>
    31b2:	01 11       	cpse	r16, r1
    31b4:	43 c2       	rjmp	.+1158   	; 0x363c <vfprintf+0x650>
    31b6:	80 c2       	rjmp	.+1280   	; 0x36b8 <vfprintf+0x6cc>
    31b8:	97 fe       	sbrs	r9, 7
    31ba:	10 c0       	rjmp	.+32     	; 0x31dc <vfprintf+0x1f0>
    31bc:	4c 0c       	add	r4, r12
    31be:	fc 85       	ldd	r31, Y+12	; 0x0c
    31c0:	f4 ff       	sbrs	r31, 4
    31c2:	04 c0       	rjmp	.+8      	; 0x31cc <vfprintf+0x1e0>
    31c4:	8a 81       	ldd	r24, Y+2	; 0x02
    31c6:	81 33       	cpi	r24, 0x31	; 49
    31c8:	09 f4       	brne	.+2      	; 0x31cc <vfprintf+0x1e0>
    31ca:	4a 94       	dec	r4
    31cc:	14 14       	cp	r1, r4
    31ce:	74 f5       	brge	.+92     	; 0x322c <vfprintf+0x240>
    31d0:	28 e0       	ldi	r18, 0x08	; 8
    31d2:	24 15       	cp	r18, r4
    31d4:	78 f5       	brcc	.+94     	; 0x3234 <vfprintf+0x248>
    31d6:	88 e0       	ldi	r24, 0x08	; 8
    31d8:	48 2e       	mov	r4, r24
    31da:	2c c0       	rjmp	.+88     	; 0x3234 <vfprintf+0x248>
    31dc:	96 fc       	sbrc	r9, 6
    31de:	2a c0       	rjmp	.+84     	; 0x3234 <vfprintf+0x248>
    31e0:	81 2f       	mov	r24, r17
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	8c 15       	cp	r24, r12
    31e6:	9d 05       	cpc	r25, r13
    31e8:	9c f0       	brlt	.+38     	; 0x3210 <vfprintf+0x224>
    31ea:	3c ef       	ldi	r19, 0xFC	; 252
    31ec:	c3 16       	cp	r12, r19
    31ee:	3f ef       	ldi	r19, 0xFF	; 255
    31f0:	d3 06       	cpc	r13, r19
    31f2:	74 f0       	brlt	.+28     	; 0x3210 <vfprintf+0x224>
    31f4:	89 2d       	mov	r24, r9
    31f6:	80 68       	ori	r24, 0x80	; 128
    31f8:	98 2e       	mov	r9, r24
    31fa:	0a c0       	rjmp	.+20     	; 0x3210 <vfprintf+0x224>
    31fc:	e2 e0       	ldi	r30, 0x02	; 2
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	ec 0f       	add	r30, r28
    3202:	fd 1f       	adc	r31, r29
    3204:	e1 0f       	add	r30, r17
    3206:	f1 1d       	adc	r31, r1
    3208:	80 81       	ld	r24, Z
    320a:	80 33       	cpi	r24, 0x30	; 48
    320c:	19 f4       	brne	.+6      	; 0x3214 <vfprintf+0x228>
    320e:	11 50       	subi	r17, 0x01	; 1
    3210:	11 11       	cpse	r17, r1
    3212:	f4 cf       	rjmp	.-24     	; 0x31fc <vfprintf+0x210>
    3214:	97 fe       	sbrs	r9, 7
    3216:	0e c0       	rjmp	.+28     	; 0x3234 <vfprintf+0x248>
    3218:	44 24       	eor	r4, r4
    321a:	43 94       	inc	r4
    321c:	41 0e       	add	r4, r17
    321e:	81 2f       	mov	r24, r17
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	c8 16       	cp	r12, r24
    3224:	d9 06       	cpc	r13, r25
    3226:	2c f4       	brge	.+10     	; 0x3232 <vfprintf+0x246>
    3228:	1c 19       	sub	r17, r12
    322a:	04 c0       	rjmp	.+8      	; 0x3234 <vfprintf+0x248>
    322c:	44 24       	eor	r4, r4
    322e:	43 94       	inc	r4
    3230:	01 c0       	rjmp	.+2      	; 0x3234 <vfprintf+0x248>
    3232:	10 e0       	ldi	r17, 0x00	; 0
    3234:	97 fe       	sbrs	r9, 7
    3236:	06 c0       	rjmp	.+12     	; 0x3244 <vfprintf+0x258>
    3238:	1c 14       	cp	r1, r12
    323a:	1d 04       	cpc	r1, r13
    323c:	34 f4       	brge	.+12     	; 0x324a <vfprintf+0x25e>
    323e:	c6 01       	movw	r24, r12
    3240:	01 96       	adiw	r24, 0x01	; 1
    3242:	05 c0       	rjmp	.+10     	; 0x324e <vfprintf+0x262>
    3244:	85 e0       	ldi	r24, 0x05	; 5
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	02 c0       	rjmp	.+4      	; 0x324e <vfprintf+0x262>
    324a:	81 e0       	ldi	r24, 0x01	; 1
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	01 11       	cpse	r16, r1
    3250:	01 96       	adiw	r24, 0x01	; 1
    3252:	11 23       	and	r17, r17
    3254:	31 f0       	breq	.+12     	; 0x3262 <vfprintf+0x276>
    3256:	21 2f       	mov	r18, r17
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	2f 5f       	subi	r18, 0xFF	; 255
    325c:	3f 4f       	sbci	r19, 0xFF	; 255
    325e:	82 0f       	add	r24, r18
    3260:	93 1f       	adc	r25, r19
    3262:	25 2d       	mov	r18, r5
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	82 17       	cp	r24, r18
    3268:	93 07       	cpc	r25, r19
    326a:	14 f4       	brge	.+4      	; 0x3270 <vfprintf+0x284>
    326c:	58 1a       	sub	r5, r24
    326e:	01 c0       	rjmp	.+2      	; 0x3272 <vfprintf+0x286>
    3270:	51 2c       	mov	r5, r1
    3272:	89 2d       	mov	r24, r9
    3274:	89 70       	andi	r24, 0x09	; 9
    3276:	41 f4       	brne	.+16     	; 0x3288 <vfprintf+0x29c>
    3278:	55 20       	and	r5, r5
    327a:	31 f0       	breq	.+12     	; 0x3288 <vfprintf+0x29c>
    327c:	b7 01       	movw	r22, r14
    327e:	80 e2       	ldi	r24, 0x20	; 32
    3280:	90 e0       	ldi	r25, 0x00	; 0
    3282:	50 d4       	rcall	.+2208   	; 0x3b24 <fputc>
    3284:	5a 94       	dec	r5
    3286:	f8 cf       	rjmp	.-16     	; 0x3278 <vfprintf+0x28c>
    3288:	00 23       	and	r16, r16
    328a:	21 f0       	breq	.+8      	; 0x3294 <vfprintf+0x2a8>
    328c:	b7 01       	movw	r22, r14
    328e:	80 2f       	mov	r24, r16
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	48 d4       	rcall	.+2192   	; 0x3b24 <fputc>
    3294:	93 fc       	sbrc	r9, 3
    3296:	08 c0       	rjmp	.+16     	; 0x32a8 <vfprintf+0x2bc>
    3298:	55 20       	and	r5, r5
    329a:	31 f0       	breq	.+12     	; 0x32a8 <vfprintf+0x2bc>
    329c:	b7 01       	movw	r22, r14
    329e:	80 e3       	ldi	r24, 0x30	; 48
    32a0:	90 e0       	ldi	r25, 0x00	; 0
    32a2:	40 d4       	rcall	.+2176   	; 0x3b24 <fputc>
    32a4:	5a 94       	dec	r5
    32a6:	f8 cf       	rjmp	.-16     	; 0x3298 <vfprintf+0x2ac>
    32a8:	97 fe       	sbrs	r9, 7
    32aa:	4a c0       	rjmp	.+148    	; 0x3340 <vfprintf+0x354>
    32ac:	46 01       	movw	r8, r12
    32ae:	d7 fe       	sbrs	r13, 7
    32b0:	02 c0       	rjmp	.+4      	; 0x32b6 <vfprintf+0x2ca>
    32b2:	81 2c       	mov	r8, r1
    32b4:	91 2c       	mov	r9, r1
    32b6:	c6 01       	movw	r24, r12
    32b8:	88 19       	sub	r24, r8
    32ba:	99 09       	sbc	r25, r9
    32bc:	f3 01       	movw	r30, r6
    32be:	e8 0f       	add	r30, r24
    32c0:	f9 1f       	adc	r31, r25
    32c2:	ed 87       	std	Y+13, r30	; 0x0d
    32c4:	fe 87       	std	Y+14, r31	; 0x0e
    32c6:	96 01       	movw	r18, r12
    32c8:	24 19       	sub	r18, r4
    32ca:	31 09       	sbc	r19, r1
    32cc:	2f 87       	std	Y+15, r18	; 0x0f
    32ce:	38 8b       	std	Y+16, r19	; 0x10
    32d0:	01 2f       	mov	r16, r17
    32d2:	10 e0       	ldi	r17, 0x00	; 0
    32d4:	11 95       	neg	r17
    32d6:	01 95       	neg	r16
    32d8:	11 09       	sbc	r17, r1
    32da:	3f ef       	ldi	r19, 0xFF	; 255
    32dc:	83 16       	cp	r8, r19
    32de:	93 06       	cpc	r9, r19
    32e0:	21 f4       	brne	.+8      	; 0x32ea <vfprintf+0x2fe>
    32e2:	b7 01       	movw	r22, r14
    32e4:	8e e2       	ldi	r24, 0x2E	; 46
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	1d d4       	rcall	.+2106   	; 0x3b24 <fputc>
    32ea:	c8 14       	cp	r12, r8
    32ec:	d9 04       	cpc	r13, r9
    32ee:	4c f0       	brlt	.+18     	; 0x3302 <vfprintf+0x316>
    32f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    32f2:	98 89       	ldd	r25, Y+16	; 0x10
    32f4:	88 15       	cp	r24, r8
    32f6:	99 05       	cpc	r25, r9
    32f8:	24 f4       	brge	.+8      	; 0x3302 <vfprintf+0x316>
    32fa:	ed 85       	ldd	r30, Y+13	; 0x0d
    32fc:	fe 85       	ldd	r31, Y+14	; 0x0e
    32fe:	81 81       	ldd	r24, Z+1	; 0x01
    3300:	01 c0       	rjmp	.+2      	; 0x3304 <vfprintf+0x318>
    3302:	80 e3       	ldi	r24, 0x30	; 48
    3304:	f1 e0       	ldi	r31, 0x01	; 1
    3306:	8f 1a       	sub	r8, r31
    3308:	91 08       	sbc	r9, r1
    330a:	2d 85       	ldd	r18, Y+13	; 0x0d
    330c:	3e 85       	ldd	r19, Y+14	; 0x0e
    330e:	2f 5f       	subi	r18, 0xFF	; 255
    3310:	3f 4f       	sbci	r19, 0xFF	; 255
    3312:	2d 87       	std	Y+13, r18	; 0x0d
    3314:	3e 87       	std	Y+14, r19	; 0x0e
    3316:	80 16       	cp	r8, r16
    3318:	91 06       	cpc	r9, r17
    331a:	24 f0       	brlt	.+8      	; 0x3324 <vfprintf+0x338>
    331c:	b7 01       	movw	r22, r14
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	01 d4       	rcall	.+2050   	; 0x3b24 <fputc>
    3322:	db cf       	rjmp	.-74     	; 0x32da <vfprintf+0x2ee>
    3324:	c8 14       	cp	r12, r8
    3326:	d9 04       	cpc	r13, r9
    3328:	41 f4       	brne	.+16     	; 0x333a <vfprintf+0x34e>
    332a:	9a 81       	ldd	r25, Y+2	; 0x02
    332c:	96 33       	cpi	r25, 0x36	; 54
    332e:	20 f4       	brcc	.+8      	; 0x3338 <vfprintf+0x34c>
    3330:	95 33       	cpi	r25, 0x35	; 53
    3332:	19 f4       	brne	.+6      	; 0x333a <vfprintf+0x34e>
    3334:	3c 85       	ldd	r19, Y+12	; 0x0c
    3336:	34 ff       	sbrs	r19, 4
    3338:	81 e3       	ldi	r24, 0x31	; 49
    333a:	b7 01       	movw	r22, r14
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	48 c0       	rjmp	.+144    	; 0x33d0 <vfprintf+0x3e4>
    3340:	8a 81       	ldd	r24, Y+2	; 0x02
    3342:	81 33       	cpi	r24, 0x31	; 49
    3344:	19 f0       	breq	.+6      	; 0x334c <vfprintf+0x360>
    3346:	9c 85       	ldd	r25, Y+12	; 0x0c
    3348:	9f 7e       	andi	r25, 0xEF	; 239
    334a:	9c 87       	std	Y+12, r25	; 0x0c
    334c:	b7 01       	movw	r22, r14
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	e9 d3       	rcall	.+2002   	; 0x3b24 <fputc>
    3352:	11 11       	cpse	r17, r1
    3354:	05 c0       	rjmp	.+10     	; 0x3360 <vfprintf+0x374>
    3356:	94 fc       	sbrc	r9, 4
    3358:	16 c0       	rjmp	.+44     	; 0x3386 <vfprintf+0x39a>
    335a:	85 e6       	ldi	r24, 0x65	; 101
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	15 c0       	rjmp	.+42     	; 0x338a <vfprintf+0x39e>
    3360:	b7 01       	movw	r22, r14
    3362:	8e e2       	ldi	r24, 0x2E	; 46
    3364:	90 e0       	ldi	r25, 0x00	; 0
    3366:	de d3       	rcall	.+1980   	; 0x3b24 <fputc>
    3368:	1e 5f       	subi	r17, 0xFE	; 254
    336a:	82 e0       	ldi	r24, 0x02	; 2
    336c:	01 e0       	ldi	r16, 0x01	; 1
    336e:	08 0f       	add	r16, r24
    3370:	f3 01       	movw	r30, r6
    3372:	e8 0f       	add	r30, r24
    3374:	f1 1d       	adc	r31, r1
    3376:	80 81       	ld	r24, Z
    3378:	b7 01       	movw	r22, r14
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	d3 d3       	rcall	.+1958   	; 0x3b24 <fputc>
    337e:	80 2f       	mov	r24, r16
    3380:	01 13       	cpse	r16, r17
    3382:	f4 cf       	rjmp	.-24     	; 0x336c <vfprintf+0x380>
    3384:	e8 cf       	rjmp	.-48     	; 0x3356 <vfprintf+0x36a>
    3386:	85 e4       	ldi	r24, 0x45	; 69
    3388:	90 e0       	ldi	r25, 0x00	; 0
    338a:	b7 01       	movw	r22, r14
    338c:	cb d3       	rcall	.+1942   	; 0x3b24 <fputc>
    338e:	d7 fc       	sbrc	r13, 7
    3390:	06 c0       	rjmp	.+12     	; 0x339e <vfprintf+0x3b2>
    3392:	c1 14       	cp	r12, r1
    3394:	d1 04       	cpc	r13, r1
    3396:	41 f4       	brne	.+16     	; 0x33a8 <vfprintf+0x3bc>
    3398:	ec 85       	ldd	r30, Y+12	; 0x0c
    339a:	e4 ff       	sbrs	r30, 4
    339c:	05 c0       	rjmp	.+10     	; 0x33a8 <vfprintf+0x3bc>
    339e:	d1 94       	neg	r13
    33a0:	c1 94       	neg	r12
    33a2:	d1 08       	sbc	r13, r1
    33a4:	8d e2       	ldi	r24, 0x2D	; 45
    33a6:	01 c0       	rjmp	.+2      	; 0x33aa <vfprintf+0x3be>
    33a8:	8b e2       	ldi	r24, 0x2B	; 43
    33aa:	b7 01       	movw	r22, r14
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	ba d3       	rcall	.+1908   	; 0x3b24 <fputc>
    33b0:	80 e3       	ldi	r24, 0x30	; 48
    33b2:	2a e0       	ldi	r18, 0x0A	; 10
    33b4:	c2 16       	cp	r12, r18
    33b6:	d1 04       	cpc	r13, r1
    33b8:	2c f0       	brlt	.+10     	; 0x33c4 <vfprintf+0x3d8>
    33ba:	8f 5f       	subi	r24, 0xFF	; 255
    33bc:	fa e0       	ldi	r31, 0x0A	; 10
    33be:	cf 1a       	sub	r12, r31
    33c0:	d1 08       	sbc	r13, r1
    33c2:	f7 cf       	rjmp	.-18     	; 0x33b2 <vfprintf+0x3c6>
    33c4:	b7 01       	movw	r22, r14
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	ad d3       	rcall	.+1882   	; 0x3b24 <fputc>
    33ca:	b7 01       	movw	r22, r14
    33cc:	c6 01       	movw	r24, r12
    33ce:	c0 96       	adiw	r24, 0x30	; 48
    33d0:	a9 d3       	rcall	.+1874   	; 0x3b24 <fputc>
    33d2:	49 c1       	rjmp	.+658    	; 0x3666 <vfprintf+0x67a>
    33d4:	83 36       	cpi	r24, 0x63	; 99
    33d6:	31 f0       	breq	.+12     	; 0x33e4 <vfprintf+0x3f8>
    33d8:	83 37       	cpi	r24, 0x73	; 115
    33da:	79 f0       	breq	.+30     	; 0x33fa <vfprintf+0x40e>
    33dc:	83 35       	cpi	r24, 0x53	; 83
    33de:	09 f0       	breq	.+2      	; 0x33e2 <vfprintf+0x3f6>
    33e0:	52 c0       	rjmp	.+164    	; 0x3486 <vfprintf+0x49a>
    33e2:	1f c0       	rjmp	.+62     	; 0x3422 <vfprintf+0x436>
    33e4:	56 01       	movw	r10, r12
    33e6:	32 e0       	ldi	r19, 0x02	; 2
    33e8:	a3 0e       	add	r10, r19
    33ea:	b1 1c       	adc	r11, r1
    33ec:	f6 01       	movw	r30, r12
    33ee:	80 81       	ld	r24, Z
    33f0:	89 83       	std	Y+1, r24	; 0x01
    33f2:	01 e0       	ldi	r16, 0x01	; 1
    33f4:	10 e0       	ldi	r17, 0x00	; 0
    33f6:	63 01       	movw	r12, r6
    33f8:	11 c0       	rjmp	.+34     	; 0x341c <vfprintf+0x430>
    33fa:	56 01       	movw	r10, r12
    33fc:	f2 e0       	ldi	r31, 0x02	; 2
    33fe:	af 0e       	add	r10, r31
    3400:	b1 1c       	adc	r11, r1
    3402:	f6 01       	movw	r30, r12
    3404:	c0 80       	ld	r12, Z
    3406:	d1 80       	ldd	r13, Z+1	; 0x01
    3408:	96 fe       	sbrs	r9, 6
    340a:	03 c0       	rjmp	.+6      	; 0x3412 <vfprintf+0x426>
    340c:	61 2f       	mov	r22, r17
    340e:	70 e0       	ldi	r23, 0x00	; 0
    3410:	02 c0       	rjmp	.+4      	; 0x3416 <vfprintf+0x42a>
    3412:	6f ef       	ldi	r22, 0xFF	; 255
    3414:	7f ef       	ldi	r23, 0xFF	; 255
    3416:	c6 01       	movw	r24, r12
    3418:	30 d3       	rcall	.+1632   	; 0x3a7a <strnlen>
    341a:	8c 01       	movw	r16, r24
    341c:	f9 2d       	mov	r31, r9
    341e:	ff 77       	andi	r31, 0x7F	; 127
    3420:	13 c0       	rjmp	.+38     	; 0x3448 <vfprintf+0x45c>
    3422:	56 01       	movw	r10, r12
    3424:	22 e0       	ldi	r18, 0x02	; 2
    3426:	a2 0e       	add	r10, r18
    3428:	b1 1c       	adc	r11, r1
    342a:	f6 01       	movw	r30, r12
    342c:	c0 80       	ld	r12, Z
    342e:	d1 80       	ldd	r13, Z+1	; 0x01
    3430:	96 fe       	sbrs	r9, 6
    3432:	03 c0       	rjmp	.+6      	; 0x343a <vfprintf+0x44e>
    3434:	61 2f       	mov	r22, r17
    3436:	70 e0       	ldi	r23, 0x00	; 0
    3438:	02 c0       	rjmp	.+4      	; 0x343e <vfprintf+0x452>
    343a:	6f ef       	ldi	r22, 0xFF	; 255
    343c:	7f ef       	ldi	r23, 0xFF	; 255
    343e:	c6 01       	movw	r24, r12
    3440:	11 d3       	rcall	.+1570   	; 0x3a64 <strnlen_P>
    3442:	8c 01       	movw	r16, r24
    3444:	f9 2d       	mov	r31, r9
    3446:	f0 68       	ori	r31, 0x80	; 128
    3448:	9f 2e       	mov	r9, r31
    344a:	f3 fd       	sbrc	r31, 3
    344c:	18 c0       	rjmp	.+48     	; 0x347e <vfprintf+0x492>
    344e:	85 2d       	mov	r24, r5
    3450:	90 e0       	ldi	r25, 0x00	; 0
    3452:	08 17       	cp	r16, r24
    3454:	19 07       	cpc	r17, r25
    3456:	98 f4       	brcc	.+38     	; 0x347e <vfprintf+0x492>
    3458:	b7 01       	movw	r22, r14
    345a:	80 e2       	ldi	r24, 0x20	; 32
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	62 d3       	rcall	.+1732   	; 0x3b24 <fputc>
    3460:	5a 94       	dec	r5
    3462:	f5 cf       	rjmp	.-22     	; 0x344e <vfprintf+0x462>
    3464:	f6 01       	movw	r30, r12
    3466:	97 fc       	sbrc	r9, 7
    3468:	85 91       	lpm	r24, Z+
    346a:	97 fe       	sbrs	r9, 7
    346c:	81 91       	ld	r24, Z+
    346e:	6f 01       	movw	r12, r30
    3470:	b7 01       	movw	r22, r14
    3472:	90 e0       	ldi	r25, 0x00	; 0
    3474:	57 d3       	rcall	.+1710   	; 0x3b24 <fputc>
    3476:	51 10       	cpse	r5, r1
    3478:	5a 94       	dec	r5
    347a:	01 50       	subi	r16, 0x01	; 1
    347c:	11 09       	sbc	r17, r1
    347e:	01 15       	cp	r16, r1
    3480:	11 05       	cpc	r17, r1
    3482:	81 f7       	brne	.-32     	; 0x3464 <vfprintf+0x478>
    3484:	f0 c0       	rjmp	.+480    	; 0x3666 <vfprintf+0x67a>
    3486:	84 36       	cpi	r24, 0x64	; 100
    3488:	11 f0       	breq	.+4      	; 0x348e <vfprintf+0x4a2>
    348a:	89 36       	cpi	r24, 0x69	; 105
    348c:	59 f5       	brne	.+86     	; 0x34e4 <vfprintf+0x4f8>
    348e:	56 01       	movw	r10, r12
    3490:	97 fe       	sbrs	r9, 7
    3492:	09 c0       	rjmp	.+18     	; 0x34a6 <vfprintf+0x4ba>
    3494:	24 e0       	ldi	r18, 0x04	; 4
    3496:	a2 0e       	add	r10, r18
    3498:	b1 1c       	adc	r11, r1
    349a:	f6 01       	movw	r30, r12
    349c:	60 81       	ld	r22, Z
    349e:	71 81       	ldd	r23, Z+1	; 0x01
    34a0:	82 81       	ldd	r24, Z+2	; 0x02
    34a2:	93 81       	ldd	r25, Z+3	; 0x03
    34a4:	0a c0       	rjmp	.+20     	; 0x34ba <vfprintf+0x4ce>
    34a6:	f2 e0       	ldi	r31, 0x02	; 2
    34a8:	af 0e       	add	r10, r31
    34aa:	b1 1c       	adc	r11, r1
    34ac:	f6 01       	movw	r30, r12
    34ae:	60 81       	ld	r22, Z
    34b0:	71 81       	ldd	r23, Z+1	; 0x01
    34b2:	07 2e       	mov	r0, r23
    34b4:	00 0c       	add	r0, r0
    34b6:	88 0b       	sbc	r24, r24
    34b8:	99 0b       	sbc	r25, r25
    34ba:	f9 2d       	mov	r31, r9
    34bc:	ff 76       	andi	r31, 0x6F	; 111
    34be:	9f 2e       	mov	r9, r31
    34c0:	97 ff       	sbrs	r25, 7
    34c2:	09 c0       	rjmp	.+18     	; 0x34d6 <vfprintf+0x4ea>
    34c4:	90 95       	com	r25
    34c6:	80 95       	com	r24
    34c8:	70 95       	com	r23
    34ca:	61 95       	neg	r22
    34cc:	7f 4f       	sbci	r23, 0xFF	; 255
    34ce:	8f 4f       	sbci	r24, 0xFF	; 255
    34d0:	9f 4f       	sbci	r25, 0xFF	; 255
    34d2:	f0 68       	ori	r31, 0x80	; 128
    34d4:	9f 2e       	mov	r9, r31
    34d6:	2a e0       	ldi	r18, 0x0A	; 10
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	a3 01       	movw	r20, r6
    34dc:	a2 d3       	rcall	.+1860   	; 0x3c22 <__ultoa_invert>
    34de:	c8 2e       	mov	r12, r24
    34e0:	c6 18       	sub	r12, r6
    34e2:	3e c0       	rjmp	.+124    	; 0x3560 <vfprintf+0x574>
    34e4:	09 2d       	mov	r16, r9
    34e6:	85 37       	cpi	r24, 0x75	; 117
    34e8:	21 f4       	brne	.+8      	; 0x34f2 <vfprintf+0x506>
    34ea:	0f 7e       	andi	r16, 0xEF	; 239
    34ec:	2a e0       	ldi	r18, 0x0A	; 10
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	1d c0       	rjmp	.+58     	; 0x352c <vfprintf+0x540>
    34f2:	09 7f       	andi	r16, 0xF9	; 249
    34f4:	8f 36       	cpi	r24, 0x6F	; 111
    34f6:	91 f0       	breq	.+36     	; 0x351c <vfprintf+0x530>
    34f8:	18 f4       	brcc	.+6      	; 0x3500 <vfprintf+0x514>
    34fa:	88 35       	cpi	r24, 0x58	; 88
    34fc:	59 f0       	breq	.+22     	; 0x3514 <vfprintf+0x528>
    34fe:	bc c0       	rjmp	.+376    	; 0x3678 <vfprintf+0x68c>
    3500:	80 37       	cpi	r24, 0x70	; 112
    3502:	19 f0       	breq	.+6      	; 0x350a <vfprintf+0x51e>
    3504:	88 37       	cpi	r24, 0x78	; 120
    3506:	11 f0       	breq	.+4      	; 0x350c <vfprintf+0x520>
    3508:	b7 c0       	rjmp	.+366    	; 0x3678 <vfprintf+0x68c>
    350a:	00 61       	ori	r16, 0x10	; 16
    350c:	04 ff       	sbrs	r16, 4
    350e:	09 c0       	rjmp	.+18     	; 0x3522 <vfprintf+0x536>
    3510:	04 60       	ori	r16, 0x04	; 4
    3512:	07 c0       	rjmp	.+14     	; 0x3522 <vfprintf+0x536>
    3514:	94 fe       	sbrs	r9, 4
    3516:	08 c0       	rjmp	.+16     	; 0x3528 <vfprintf+0x53c>
    3518:	06 60       	ori	r16, 0x06	; 6
    351a:	06 c0       	rjmp	.+12     	; 0x3528 <vfprintf+0x53c>
    351c:	28 e0       	ldi	r18, 0x08	; 8
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	05 c0       	rjmp	.+10     	; 0x352c <vfprintf+0x540>
    3522:	20 e1       	ldi	r18, 0x10	; 16
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	02 c0       	rjmp	.+4      	; 0x352c <vfprintf+0x540>
    3528:	20 e1       	ldi	r18, 0x10	; 16
    352a:	32 e0       	ldi	r19, 0x02	; 2
    352c:	56 01       	movw	r10, r12
    352e:	07 ff       	sbrs	r16, 7
    3530:	09 c0       	rjmp	.+18     	; 0x3544 <vfprintf+0x558>
    3532:	84 e0       	ldi	r24, 0x04	; 4
    3534:	a8 0e       	add	r10, r24
    3536:	b1 1c       	adc	r11, r1
    3538:	f6 01       	movw	r30, r12
    353a:	60 81       	ld	r22, Z
    353c:	71 81       	ldd	r23, Z+1	; 0x01
    353e:	82 81       	ldd	r24, Z+2	; 0x02
    3540:	93 81       	ldd	r25, Z+3	; 0x03
    3542:	08 c0       	rjmp	.+16     	; 0x3554 <vfprintf+0x568>
    3544:	f2 e0       	ldi	r31, 0x02	; 2
    3546:	af 0e       	add	r10, r31
    3548:	b1 1c       	adc	r11, r1
    354a:	f6 01       	movw	r30, r12
    354c:	60 81       	ld	r22, Z
    354e:	71 81       	ldd	r23, Z+1	; 0x01
    3550:	80 e0       	ldi	r24, 0x00	; 0
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	a3 01       	movw	r20, r6
    3556:	65 d3       	rcall	.+1738   	; 0x3c22 <__ultoa_invert>
    3558:	c8 2e       	mov	r12, r24
    355a:	c6 18       	sub	r12, r6
    355c:	0f 77       	andi	r16, 0x7F	; 127
    355e:	90 2e       	mov	r9, r16
    3560:	96 fe       	sbrs	r9, 6
    3562:	0b c0       	rjmp	.+22     	; 0x357a <vfprintf+0x58e>
    3564:	09 2d       	mov	r16, r9
    3566:	0e 7f       	andi	r16, 0xFE	; 254
    3568:	c1 16       	cp	r12, r17
    356a:	50 f4       	brcc	.+20     	; 0x3580 <vfprintf+0x594>
    356c:	94 fe       	sbrs	r9, 4
    356e:	0a c0       	rjmp	.+20     	; 0x3584 <vfprintf+0x598>
    3570:	92 fc       	sbrc	r9, 2
    3572:	08 c0       	rjmp	.+16     	; 0x3584 <vfprintf+0x598>
    3574:	09 2d       	mov	r16, r9
    3576:	0e 7e       	andi	r16, 0xEE	; 238
    3578:	05 c0       	rjmp	.+10     	; 0x3584 <vfprintf+0x598>
    357a:	dc 2c       	mov	r13, r12
    357c:	09 2d       	mov	r16, r9
    357e:	03 c0       	rjmp	.+6      	; 0x3586 <vfprintf+0x59a>
    3580:	dc 2c       	mov	r13, r12
    3582:	01 c0       	rjmp	.+2      	; 0x3586 <vfprintf+0x59a>
    3584:	d1 2e       	mov	r13, r17
    3586:	04 ff       	sbrs	r16, 4
    3588:	0d c0       	rjmp	.+26     	; 0x35a4 <vfprintf+0x5b8>
    358a:	fe 01       	movw	r30, r28
    358c:	ec 0d       	add	r30, r12
    358e:	f1 1d       	adc	r31, r1
    3590:	80 81       	ld	r24, Z
    3592:	80 33       	cpi	r24, 0x30	; 48
    3594:	11 f4       	brne	.+4      	; 0x359a <vfprintf+0x5ae>
    3596:	09 7e       	andi	r16, 0xE9	; 233
    3598:	09 c0       	rjmp	.+18     	; 0x35ac <vfprintf+0x5c0>
    359a:	02 ff       	sbrs	r16, 2
    359c:	06 c0       	rjmp	.+12     	; 0x35aa <vfprintf+0x5be>
    359e:	d3 94       	inc	r13
    35a0:	d3 94       	inc	r13
    35a2:	04 c0       	rjmp	.+8      	; 0x35ac <vfprintf+0x5c0>
    35a4:	80 2f       	mov	r24, r16
    35a6:	86 78       	andi	r24, 0x86	; 134
    35a8:	09 f0       	breq	.+2      	; 0x35ac <vfprintf+0x5c0>
    35aa:	d3 94       	inc	r13
    35ac:	03 fd       	sbrc	r16, 3
    35ae:	10 c0       	rjmp	.+32     	; 0x35d0 <vfprintf+0x5e4>
    35b0:	00 ff       	sbrs	r16, 0
    35b2:	06 c0       	rjmp	.+12     	; 0x35c0 <vfprintf+0x5d4>
    35b4:	1c 2d       	mov	r17, r12
    35b6:	d5 14       	cp	r13, r5
    35b8:	78 f4       	brcc	.+30     	; 0x35d8 <vfprintf+0x5ec>
    35ba:	15 0d       	add	r17, r5
    35bc:	1d 19       	sub	r17, r13
    35be:	0c c0       	rjmp	.+24     	; 0x35d8 <vfprintf+0x5ec>
    35c0:	d5 14       	cp	r13, r5
    35c2:	50 f4       	brcc	.+20     	; 0x35d8 <vfprintf+0x5ec>
    35c4:	b7 01       	movw	r22, r14
    35c6:	80 e2       	ldi	r24, 0x20	; 32
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	ac d2       	rcall	.+1368   	; 0x3b24 <fputc>
    35cc:	d3 94       	inc	r13
    35ce:	f8 cf       	rjmp	.-16     	; 0x35c0 <vfprintf+0x5d4>
    35d0:	d5 14       	cp	r13, r5
    35d2:	10 f4       	brcc	.+4      	; 0x35d8 <vfprintf+0x5ec>
    35d4:	5d 18       	sub	r5, r13
    35d6:	01 c0       	rjmp	.+2      	; 0x35da <vfprintf+0x5ee>
    35d8:	51 2c       	mov	r5, r1
    35da:	04 ff       	sbrs	r16, 4
    35dc:	0f c0       	rjmp	.+30     	; 0x35fc <vfprintf+0x610>
    35de:	b7 01       	movw	r22, r14
    35e0:	80 e3       	ldi	r24, 0x30	; 48
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	9f d2       	rcall	.+1342   	; 0x3b24 <fputc>
    35e6:	02 ff       	sbrs	r16, 2
    35e8:	16 c0       	rjmp	.+44     	; 0x3616 <vfprintf+0x62a>
    35ea:	01 fd       	sbrc	r16, 1
    35ec:	03 c0       	rjmp	.+6      	; 0x35f4 <vfprintf+0x608>
    35ee:	88 e7       	ldi	r24, 0x78	; 120
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	02 c0       	rjmp	.+4      	; 0x35f8 <vfprintf+0x60c>
    35f4:	88 e5       	ldi	r24, 0x58	; 88
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	b7 01       	movw	r22, r14
    35fa:	0c c0       	rjmp	.+24     	; 0x3614 <vfprintf+0x628>
    35fc:	80 2f       	mov	r24, r16
    35fe:	86 78       	andi	r24, 0x86	; 134
    3600:	51 f0       	breq	.+20     	; 0x3616 <vfprintf+0x62a>
    3602:	01 ff       	sbrs	r16, 1
    3604:	02 c0       	rjmp	.+4      	; 0x360a <vfprintf+0x61e>
    3606:	8b e2       	ldi	r24, 0x2B	; 43
    3608:	01 c0       	rjmp	.+2      	; 0x360c <vfprintf+0x620>
    360a:	80 e2       	ldi	r24, 0x20	; 32
    360c:	07 fd       	sbrc	r16, 7
    360e:	8d e2       	ldi	r24, 0x2D	; 45
    3610:	b7 01       	movw	r22, r14
    3612:	90 e0       	ldi	r25, 0x00	; 0
    3614:	87 d2       	rcall	.+1294   	; 0x3b24 <fputc>
    3616:	c1 16       	cp	r12, r17
    3618:	30 f4       	brcc	.+12     	; 0x3626 <vfprintf+0x63a>
    361a:	b7 01       	movw	r22, r14
    361c:	80 e3       	ldi	r24, 0x30	; 48
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	81 d2       	rcall	.+1282   	; 0x3b24 <fputc>
    3622:	11 50       	subi	r17, 0x01	; 1
    3624:	f8 cf       	rjmp	.-16     	; 0x3616 <vfprintf+0x62a>
    3626:	ca 94       	dec	r12
    3628:	f3 01       	movw	r30, r6
    362a:	ec 0d       	add	r30, r12
    362c:	f1 1d       	adc	r31, r1
    362e:	80 81       	ld	r24, Z
    3630:	b7 01       	movw	r22, r14
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	77 d2       	rcall	.+1262   	; 0x3b24 <fputc>
    3636:	c1 10       	cpse	r12, r1
    3638:	f6 cf       	rjmp	.-20     	; 0x3626 <vfprintf+0x63a>
    363a:	15 c0       	rjmp	.+42     	; 0x3666 <vfprintf+0x67a>
    363c:	f4 e0       	ldi	r31, 0x04	; 4
    363e:	f5 15       	cp	r31, r5
    3640:	50 f5       	brcc	.+84     	; 0x3696 <vfprintf+0x6aa>
    3642:	84 e0       	ldi	r24, 0x04	; 4
    3644:	58 1a       	sub	r5, r24
    3646:	93 fe       	sbrs	r9, 3
    3648:	1e c0       	rjmp	.+60     	; 0x3686 <vfprintf+0x69a>
    364a:	01 11       	cpse	r16, r1
    364c:	25 c0       	rjmp	.+74     	; 0x3698 <vfprintf+0x6ac>
    364e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3650:	23 ff       	sbrs	r18, 3
    3652:	27 c0       	rjmp	.+78     	; 0x36a2 <vfprintf+0x6b6>
    3654:	06 e5       	ldi	r16, 0x56	; 86
    3656:	12 e0       	ldi	r17, 0x02	; 2
    3658:	39 2d       	mov	r19, r9
    365a:	30 71       	andi	r19, 0x10	; 16
    365c:	93 2e       	mov	r9, r19
    365e:	f8 01       	movw	r30, r16
    3660:	84 91       	lpm	r24, Z
    3662:	81 11       	cpse	r24, r1
    3664:	21 c0       	rjmp	.+66     	; 0x36a8 <vfprintf+0x6bc>
    3666:	55 20       	and	r5, r5
    3668:	09 f4       	brne	.+2      	; 0x366c <vfprintf+0x680>
    366a:	fc cc       	rjmp	.-1544   	; 0x3064 <vfprintf+0x78>
    366c:	b7 01       	movw	r22, r14
    366e:	80 e2       	ldi	r24, 0x20	; 32
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	58 d2       	rcall	.+1200   	; 0x3b24 <fputc>
    3674:	5a 94       	dec	r5
    3676:	f7 cf       	rjmp	.-18     	; 0x3666 <vfprintf+0x67a>
    3678:	f7 01       	movw	r30, r14
    367a:	86 81       	ldd	r24, Z+6	; 0x06
    367c:	97 81       	ldd	r25, Z+7	; 0x07
    367e:	23 c0       	rjmp	.+70     	; 0x36c6 <vfprintf+0x6da>
    3680:	8f ef       	ldi	r24, 0xFF	; 255
    3682:	9f ef       	ldi	r25, 0xFF	; 255
    3684:	20 c0       	rjmp	.+64     	; 0x36c6 <vfprintf+0x6da>
    3686:	b7 01       	movw	r22, r14
    3688:	80 e2       	ldi	r24, 0x20	; 32
    368a:	90 e0       	ldi	r25, 0x00	; 0
    368c:	4b d2       	rcall	.+1174   	; 0x3b24 <fputc>
    368e:	5a 94       	dec	r5
    3690:	51 10       	cpse	r5, r1
    3692:	f9 cf       	rjmp	.-14     	; 0x3686 <vfprintf+0x69a>
    3694:	da cf       	rjmp	.-76     	; 0x364a <vfprintf+0x65e>
    3696:	51 2c       	mov	r5, r1
    3698:	b7 01       	movw	r22, r14
    369a:	80 2f       	mov	r24, r16
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	42 d2       	rcall	.+1156   	; 0x3b24 <fputc>
    36a0:	d6 cf       	rjmp	.-84     	; 0x364e <vfprintf+0x662>
    36a2:	0a e5       	ldi	r16, 0x5A	; 90
    36a4:	12 e0       	ldi	r17, 0x02	; 2
    36a6:	d8 cf       	rjmp	.-80     	; 0x3658 <vfprintf+0x66c>
    36a8:	91 10       	cpse	r9, r1
    36aa:	80 52       	subi	r24, 0x20	; 32
    36ac:	b7 01       	movw	r22, r14
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	39 d2       	rcall	.+1138   	; 0x3b24 <fputc>
    36b2:	0f 5f       	subi	r16, 0xFF	; 255
    36b4:	1f 4f       	sbci	r17, 0xFF	; 255
    36b6:	d3 cf       	rjmp	.-90     	; 0x365e <vfprintf+0x672>
    36b8:	23 e0       	ldi	r18, 0x03	; 3
    36ba:	25 15       	cp	r18, r5
    36bc:	10 f4       	brcc	.+4      	; 0x36c2 <vfprintf+0x6d6>
    36be:	83 e0       	ldi	r24, 0x03	; 3
    36c0:	c1 cf       	rjmp	.-126    	; 0x3644 <vfprintf+0x658>
    36c2:	51 2c       	mov	r5, r1
    36c4:	c4 cf       	rjmp	.-120    	; 0x364e <vfprintf+0x662>
    36c6:	60 96       	adiw	r28, 0x10	; 16
    36c8:	cd bf       	out	0x3d, r28	; 61
    36ca:	de bf       	out	0x3e, r29	; 62
    36cc:	df 91       	pop	r29
    36ce:	cf 91       	pop	r28
    36d0:	1f 91       	pop	r17
    36d2:	0f 91       	pop	r16
    36d4:	ff 90       	pop	r15
    36d6:	ef 90       	pop	r14
    36d8:	df 90       	pop	r13
    36da:	cf 90       	pop	r12
    36dc:	bf 90       	pop	r11
    36de:	af 90       	pop	r10
    36e0:	9f 90       	pop	r9
    36e2:	8f 90       	pop	r8
    36e4:	7f 90       	pop	r7
    36e6:	6f 90       	pop	r6
    36e8:	5f 90       	pop	r5
    36ea:	4f 90       	pop	r4
    36ec:	3f 90       	pop	r3
    36ee:	2f 90       	pop	r2
    36f0:	08 95       	ret

000036f2 <__udivmodsi4>:
    36f2:	a1 e2       	ldi	r26, 0x21	; 33
    36f4:	1a 2e       	mov	r1, r26
    36f6:	aa 1b       	sub	r26, r26
    36f8:	bb 1b       	sub	r27, r27
    36fa:	fd 01       	movw	r30, r26
    36fc:	0d c0       	rjmp	.+26     	; 0x3718 <__udivmodsi4_ep>

000036fe <__udivmodsi4_loop>:
    36fe:	aa 1f       	adc	r26, r26
    3700:	bb 1f       	adc	r27, r27
    3702:	ee 1f       	adc	r30, r30
    3704:	ff 1f       	adc	r31, r31
    3706:	a2 17       	cp	r26, r18
    3708:	b3 07       	cpc	r27, r19
    370a:	e4 07       	cpc	r30, r20
    370c:	f5 07       	cpc	r31, r21
    370e:	20 f0       	brcs	.+8      	; 0x3718 <__udivmodsi4_ep>
    3710:	a2 1b       	sub	r26, r18
    3712:	b3 0b       	sbc	r27, r19
    3714:	e4 0b       	sbc	r30, r20
    3716:	f5 0b       	sbc	r31, r21

00003718 <__udivmodsi4_ep>:
    3718:	66 1f       	adc	r22, r22
    371a:	77 1f       	adc	r23, r23
    371c:	88 1f       	adc	r24, r24
    371e:	99 1f       	adc	r25, r25
    3720:	1a 94       	dec	r1
    3722:	69 f7       	brne	.-38     	; 0x36fe <__udivmodsi4_loop>
    3724:	60 95       	com	r22
    3726:	70 95       	com	r23
    3728:	80 95       	com	r24
    372a:	90 95       	com	r25
    372c:	9b 01       	movw	r18, r22
    372e:	ac 01       	movw	r20, r24
    3730:	bd 01       	movw	r22, r26
    3732:	cf 01       	movw	r24, r30
    3734:	08 95       	ret

00003736 <__muluhisi3>:
    3736:	af d0       	rcall	.+350    	; 0x3896 <__umulhisi3>
    3738:	a5 9f       	mul	r26, r21
    373a:	90 0d       	add	r25, r0
    373c:	b4 9f       	mul	r27, r20
    373e:	90 0d       	add	r25, r0
    3740:	a4 9f       	mul	r26, r20
    3742:	80 0d       	add	r24, r0
    3744:	91 1d       	adc	r25, r1
    3746:	11 24       	eor	r1, r1
    3748:	08 95       	ret

0000374a <__muldi3>:
    374a:	df 93       	push	r29
    374c:	cf 93       	push	r28
    374e:	1f 93       	push	r17
    3750:	0f 93       	push	r16
    3752:	9a 9d       	mul	r25, r10
    3754:	f0 2d       	mov	r31, r0
    3756:	21 9f       	mul	r18, r17
    3758:	f0 0d       	add	r31, r0
    375a:	8b 9d       	mul	r24, r11
    375c:	f0 0d       	add	r31, r0
    375e:	8a 9d       	mul	r24, r10
    3760:	e0 2d       	mov	r30, r0
    3762:	f1 0d       	add	r31, r1
    3764:	03 9f       	mul	r16, r19
    3766:	f0 0d       	add	r31, r0
    3768:	02 9f       	mul	r16, r18
    376a:	e0 0d       	add	r30, r0
    376c:	f1 1d       	adc	r31, r1
    376e:	4e 9d       	mul	r20, r14
    3770:	e0 0d       	add	r30, r0
    3772:	f1 1d       	adc	r31, r1
    3774:	5e 9d       	mul	r21, r14
    3776:	f0 0d       	add	r31, r0
    3778:	4f 9d       	mul	r20, r15
    377a:	f0 0d       	add	r31, r0
    377c:	7f 93       	push	r23
    377e:	6f 93       	push	r22
    3780:	bf 92       	push	r11
    3782:	af 92       	push	r10
    3784:	5f 93       	push	r21
    3786:	4f 93       	push	r20
    3788:	d5 01       	movw	r26, r10
    378a:	85 d0       	rcall	.+266    	; 0x3896 <__umulhisi3>
    378c:	8b 01       	movw	r16, r22
    378e:	ac 01       	movw	r20, r24
    3790:	d7 01       	movw	r26, r14
    3792:	81 d0       	rcall	.+258    	; 0x3896 <__umulhisi3>
    3794:	eb 01       	movw	r28, r22
    3796:	e8 0f       	add	r30, r24
    3798:	f9 1f       	adc	r31, r25
    379a:	d6 01       	movw	r26, r12
    379c:	1f d0       	rcall	.+62     	; 0x37dc <__muldi3_6>
    379e:	2f 91       	pop	r18
    37a0:	3f 91       	pop	r19
    37a2:	d6 01       	movw	r26, r12
    37a4:	78 d0       	rcall	.+240    	; 0x3896 <__umulhisi3>
    37a6:	c6 0f       	add	r28, r22
    37a8:	d7 1f       	adc	r29, r23
    37aa:	e8 1f       	adc	r30, r24
    37ac:	f9 1f       	adc	r31, r25
    37ae:	af 91       	pop	r26
    37b0:	bf 91       	pop	r27
    37b2:	14 d0       	rcall	.+40     	; 0x37dc <__muldi3_6>
    37b4:	2f 91       	pop	r18
    37b6:	3f 91       	pop	r19
    37b8:	6e d0       	rcall	.+220    	; 0x3896 <__umulhisi3>
    37ba:	c6 0f       	add	r28, r22
    37bc:	d7 1f       	adc	r29, r23
    37be:	e8 1f       	adc	r30, r24
    37c0:	f9 1f       	adc	r31, r25
    37c2:	d6 01       	movw	r26, r12
    37c4:	68 d0       	rcall	.+208    	; 0x3896 <__umulhisi3>
    37c6:	e6 0f       	add	r30, r22
    37c8:	f7 1f       	adc	r31, r23
    37ca:	98 01       	movw	r18, r16
    37cc:	be 01       	movw	r22, r28
    37ce:	cf 01       	movw	r24, r30
    37d0:	11 24       	eor	r1, r1
    37d2:	0f 91       	pop	r16
    37d4:	1f 91       	pop	r17
    37d6:	cf 91       	pop	r28
    37d8:	df 91       	pop	r29
    37da:	08 95       	ret

000037dc <__muldi3_6>:
    37dc:	5c d0       	rcall	.+184    	; 0x3896 <__umulhisi3>
    37de:	46 0f       	add	r20, r22
    37e0:	57 1f       	adc	r21, r23
    37e2:	c8 1f       	adc	r28, r24
    37e4:	d9 1f       	adc	r29, r25
    37e6:	08 f4       	brcc	.+2      	; 0x37ea <__muldi3_6+0xe>
    37e8:	31 96       	adiw	r30, 0x01	; 1
    37ea:	08 95       	ret

000037ec <__ashldi3>:
    37ec:	0f 93       	push	r16
    37ee:	08 30       	cpi	r16, 0x08	; 8
    37f0:	90 f0       	brcs	.+36     	; 0x3816 <__ashldi3+0x2a>
    37f2:	98 2f       	mov	r25, r24
    37f4:	87 2f       	mov	r24, r23
    37f6:	76 2f       	mov	r23, r22
    37f8:	65 2f       	mov	r22, r21
    37fa:	54 2f       	mov	r21, r20
    37fc:	43 2f       	mov	r20, r19
    37fe:	32 2f       	mov	r19, r18
    3800:	22 27       	eor	r18, r18
    3802:	08 50       	subi	r16, 0x08	; 8
    3804:	f4 cf       	rjmp	.-24     	; 0x37ee <__ashldi3+0x2>
    3806:	22 0f       	add	r18, r18
    3808:	33 1f       	adc	r19, r19
    380a:	44 1f       	adc	r20, r20
    380c:	55 1f       	adc	r21, r21
    380e:	66 1f       	adc	r22, r22
    3810:	77 1f       	adc	r23, r23
    3812:	88 1f       	adc	r24, r24
    3814:	99 1f       	adc	r25, r25
    3816:	0a 95       	dec	r16
    3818:	b2 f7       	brpl	.-20     	; 0x3806 <__ashldi3+0x1a>
    381a:	0f 91       	pop	r16
    381c:	08 95       	ret

0000381e <__ashrdi3>:
    381e:	97 fb       	bst	r25, 7
    3820:	10 f8       	bld	r1, 0

00003822 <__lshrdi3>:
    3822:	16 94       	lsr	r1
    3824:	00 08       	sbc	r0, r0
    3826:	0f 93       	push	r16
    3828:	08 30       	cpi	r16, 0x08	; 8
    382a:	98 f0       	brcs	.+38     	; 0x3852 <__lshrdi3+0x30>
    382c:	08 50       	subi	r16, 0x08	; 8
    382e:	23 2f       	mov	r18, r19
    3830:	34 2f       	mov	r19, r20
    3832:	45 2f       	mov	r20, r21
    3834:	56 2f       	mov	r21, r22
    3836:	67 2f       	mov	r22, r23
    3838:	78 2f       	mov	r23, r24
    383a:	89 2f       	mov	r24, r25
    383c:	90 2d       	mov	r25, r0
    383e:	f4 cf       	rjmp	.-24     	; 0x3828 <__lshrdi3+0x6>
    3840:	05 94       	asr	r0
    3842:	97 95       	ror	r25
    3844:	87 95       	ror	r24
    3846:	77 95       	ror	r23
    3848:	67 95       	ror	r22
    384a:	57 95       	ror	r21
    384c:	47 95       	ror	r20
    384e:	37 95       	ror	r19
    3850:	27 95       	ror	r18
    3852:	0a 95       	dec	r16
    3854:	aa f7       	brpl	.-22     	; 0x3840 <__lshrdi3+0x1e>
    3856:	0f 91       	pop	r16
    3858:	08 95       	ret

0000385a <__adddi3>:
    385a:	2a 0d       	add	r18, r10
    385c:	3b 1d       	adc	r19, r11
    385e:	4c 1d       	adc	r20, r12
    3860:	5d 1d       	adc	r21, r13
    3862:	6e 1d       	adc	r22, r14
    3864:	7f 1d       	adc	r23, r15
    3866:	80 1f       	adc	r24, r16
    3868:	91 1f       	adc	r25, r17
    386a:	08 95       	ret

0000386c <__subdi3>:
    386c:	2a 19       	sub	r18, r10
    386e:	3b 09       	sbc	r19, r11
    3870:	4c 09       	sbc	r20, r12
    3872:	5d 09       	sbc	r21, r13
    3874:	6e 09       	sbc	r22, r14
    3876:	7f 09       	sbc	r23, r15
    3878:	80 0b       	sbc	r24, r16
    387a:	91 0b       	sbc	r25, r17
    387c:	08 95       	ret

0000387e <__cmpdi2_s8>:
    387e:	00 24       	eor	r0, r0
    3880:	a7 fd       	sbrc	r26, 7
    3882:	00 94       	com	r0
    3884:	2a 17       	cp	r18, r26
    3886:	30 05       	cpc	r19, r0
    3888:	40 05       	cpc	r20, r0
    388a:	50 05       	cpc	r21, r0
    388c:	60 05       	cpc	r22, r0
    388e:	70 05       	cpc	r23, r0
    3890:	80 05       	cpc	r24, r0
    3892:	90 05       	cpc	r25, r0
    3894:	08 95       	ret

00003896 <__umulhisi3>:
    3896:	a2 9f       	mul	r26, r18
    3898:	b0 01       	movw	r22, r0
    389a:	b3 9f       	mul	r27, r19
    389c:	c0 01       	movw	r24, r0
    389e:	a3 9f       	mul	r26, r19
    38a0:	70 0d       	add	r23, r0
    38a2:	81 1d       	adc	r24, r1
    38a4:	11 24       	eor	r1, r1
    38a6:	91 1d       	adc	r25, r1
    38a8:	b2 9f       	mul	r27, r18
    38aa:	70 0d       	add	r23, r0
    38ac:	81 1d       	adc	r24, r1
    38ae:	11 24       	eor	r1, r1
    38b0:	91 1d       	adc	r25, r1
    38b2:	08 95       	ret

000038b4 <__ftoa_engine>:
    38b4:	28 30       	cpi	r18, 0x08	; 8
    38b6:	08 f0       	brcs	.+2      	; 0x38ba <__ftoa_engine+0x6>
    38b8:	27 e0       	ldi	r18, 0x07	; 7
    38ba:	33 27       	eor	r19, r19
    38bc:	da 01       	movw	r26, r20
    38be:	99 0f       	add	r25, r25
    38c0:	31 1d       	adc	r19, r1
    38c2:	87 fd       	sbrc	r24, 7
    38c4:	91 60       	ori	r25, 0x01	; 1
    38c6:	00 96       	adiw	r24, 0x00	; 0
    38c8:	61 05       	cpc	r22, r1
    38ca:	71 05       	cpc	r23, r1
    38cc:	39 f4       	brne	.+14     	; 0x38dc <__ftoa_engine+0x28>
    38ce:	32 60       	ori	r19, 0x02	; 2
    38d0:	2e 5f       	subi	r18, 0xFE	; 254
    38d2:	3d 93       	st	X+, r19
    38d4:	30 e3       	ldi	r19, 0x30	; 48
    38d6:	2a 95       	dec	r18
    38d8:	e1 f7       	brne	.-8      	; 0x38d2 <__ftoa_engine+0x1e>
    38da:	08 95       	ret
    38dc:	9f 3f       	cpi	r25, 0xFF	; 255
    38de:	30 f0       	brcs	.+12     	; 0x38ec <__ftoa_engine+0x38>
    38e0:	80 38       	cpi	r24, 0x80	; 128
    38e2:	71 05       	cpc	r23, r1
    38e4:	61 05       	cpc	r22, r1
    38e6:	09 f0       	breq	.+2      	; 0x38ea <__ftoa_engine+0x36>
    38e8:	3c 5f       	subi	r19, 0xFC	; 252
    38ea:	3c 5f       	subi	r19, 0xFC	; 252
    38ec:	3d 93       	st	X+, r19
    38ee:	91 30       	cpi	r25, 0x01	; 1
    38f0:	08 f0       	brcs	.+2      	; 0x38f4 <__ftoa_engine+0x40>
    38f2:	80 68       	ori	r24, 0x80	; 128
    38f4:	91 1d       	adc	r25, r1
    38f6:	df 93       	push	r29
    38f8:	cf 93       	push	r28
    38fa:	1f 93       	push	r17
    38fc:	0f 93       	push	r16
    38fe:	ff 92       	push	r15
    3900:	ef 92       	push	r14
    3902:	19 2f       	mov	r17, r25
    3904:	98 7f       	andi	r25, 0xF8	; 248
    3906:	96 95       	lsr	r25
    3908:	e9 2f       	mov	r30, r25
    390a:	96 95       	lsr	r25
    390c:	96 95       	lsr	r25
    390e:	e9 0f       	add	r30, r25
    3910:	ff 27       	eor	r31, r31
    3912:	e8 54       	subi	r30, 0x48	; 72
    3914:	fd 4f       	sbci	r31, 0xFD	; 253
    3916:	99 27       	eor	r25, r25
    3918:	33 27       	eor	r19, r19
    391a:	ee 24       	eor	r14, r14
    391c:	ff 24       	eor	r15, r15
    391e:	a7 01       	movw	r20, r14
    3920:	e7 01       	movw	r28, r14
    3922:	05 90       	lpm	r0, Z+
    3924:	08 94       	sec
    3926:	07 94       	ror	r0
    3928:	28 f4       	brcc	.+10     	; 0x3934 <__ftoa_engine+0x80>
    392a:	36 0f       	add	r19, r22
    392c:	e7 1e       	adc	r14, r23
    392e:	f8 1e       	adc	r15, r24
    3930:	49 1f       	adc	r20, r25
    3932:	51 1d       	adc	r21, r1
    3934:	66 0f       	add	r22, r22
    3936:	77 1f       	adc	r23, r23
    3938:	88 1f       	adc	r24, r24
    393a:	99 1f       	adc	r25, r25
    393c:	06 94       	lsr	r0
    393e:	a1 f7       	brne	.-24     	; 0x3928 <__ftoa_engine+0x74>
    3940:	05 90       	lpm	r0, Z+
    3942:	07 94       	ror	r0
    3944:	28 f4       	brcc	.+10     	; 0x3950 <__ftoa_engine+0x9c>
    3946:	e7 0e       	add	r14, r23
    3948:	f8 1e       	adc	r15, r24
    394a:	49 1f       	adc	r20, r25
    394c:	56 1f       	adc	r21, r22
    394e:	c1 1d       	adc	r28, r1
    3950:	77 0f       	add	r23, r23
    3952:	88 1f       	adc	r24, r24
    3954:	99 1f       	adc	r25, r25
    3956:	66 1f       	adc	r22, r22
    3958:	06 94       	lsr	r0
    395a:	a1 f7       	brne	.-24     	; 0x3944 <__ftoa_engine+0x90>
    395c:	05 90       	lpm	r0, Z+
    395e:	07 94       	ror	r0
    3960:	28 f4       	brcc	.+10     	; 0x396c <__ftoa_engine+0xb8>
    3962:	f8 0e       	add	r15, r24
    3964:	49 1f       	adc	r20, r25
    3966:	56 1f       	adc	r21, r22
    3968:	c7 1f       	adc	r28, r23
    396a:	d1 1d       	adc	r29, r1
    396c:	88 0f       	add	r24, r24
    396e:	99 1f       	adc	r25, r25
    3970:	66 1f       	adc	r22, r22
    3972:	77 1f       	adc	r23, r23
    3974:	06 94       	lsr	r0
    3976:	a1 f7       	brne	.-24     	; 0x3960 <__ftoa_engine+0xac>
    3978:	05 90       	lpm	r0, Z+
    397a:	07 94       	ror	r0
    397c:	20 f4       	brcc	.+8      	; 0x3986 <__ftoa_engine+0xd2>
    397e:	49 0f       	add	r20, r25
    3980:	56 1f       	adc	r21, r22
    3982:	c7 1f       	adc	r28, r23
    3984:	d8 1f       	adc	r29, r24
    3986:	99 0f       	add	r25, r25
    3988:	66 1f       	adc	r22, r22
    398a:	77 1f       	adc	r23, r23
    398c:	88 1f       	adc	r24, r24
    398e:	06 94       	lsr	r0
    3990:	a9 f7       	brne	.-22     	; 0x397c <__ftoa_engine+0xc8>
    3992:	84 91       	lpm	r24, Z
    3994:	10 95       	com	r17
    3996:	17 70       	andi	r17, 0x07	; 7
    3998:	41 f0       	breq	.+16     	; 0x39aa <__ftoa_engine+0xf6>
    399a:	d6 95       	lsr	r29
    399c:	c7 95       	ror	r28
    399e:	57 95       	ror	r21
    39a0:	47 95       	ror	r20
    39a2:	f7 94       	ror	r15
    39a4:	e7 94       	ror	r14
    39a6:	1a 95       	dec	r17
    39a8:	c1 f7       	brne	.-16     	; 0x399a <__ftoa_engine+0xe6>
    39aa:	ee e5       	ldi	r30, 0x5E	; 94
    39ac:	f2 e0       	ldi	r31, 0x02	; 2
    39ae:	68 94       	set
    39b0:	15 90       	lpm	r1, Z+
    39b2:	15 91       	lpm	r17, Z+
    39b4:	35 91       	lpm	r19, Z+
    39b6:	65 91       	lpm	r22, Z+
    39b8:	95 91       	lpm	r25, Z+
    39ba:	05 90       	lpm	r0, Z+
    39bc:	7f e2       	ldi	r23, 0x2F	; 47
    39be:	73 95       	inc	r23
    39c0:	e1 18       	sub	r14, r1
    39c2:	f1 0a       	sbc	r15, r17
    39c4:	43 0b       	sbc	r20, r19
    39c6:	56 0b       	sbc	r21, r22
    39c8:	c9 0b       	sbc	r28, r25
    39ca:	d0 09       	sbc	r29, r0
    39cc:	c0 f7       	brcc	.-16     	; 0x39be <__ftoa_engine+0x10a>
    39ce:	e1 0c       	add	r14, r1
    39d0:	f1 1e       	adc	r15, r17
    39d2:	43 1f       	adc	r20, r19
    39d4:	56 1f       	adc	r21, r22
    39d6:	c9 1f       	adc	r28, r25
    39d8:	d0 1d       	adc	r29, r0
    39da:	7e f4       	brtc	.+30     	; 0x39fa <__ftoa_engine+0x146>
    39dc:	70 33       	cpi	r23, 0x30	; 48
    39de:	11 f4       	brne	.+4      	; 0x39e4 <__ftoa_engine+0x130>
    39e0:	8a 95       	dec	r24
    39e2:	e6 cf       	rjmp	.-52     	; 0x39b0 <__ftoa_engine+0xfc>
    39e4:	e8 94       	clt
    39e6:	01 50       	subi	r16, 0x01	; 1
    39e8:	30 f0       	brcs	.+12     	; 0x39f6 <__ftoa_engine+0x142>
    39ea:	08 0f       	add	r16, r24
    39ec:	0a f4       	brpl	.+2      	; 0x39f0 <__ftoa_engine+0x13c>
    39ee:	00 27       	eor	r16, r16
    39f0:	02 17       	cp	r16, r18
    39f2:	08 f4       	brcc	.+2      	; 0x39f6 <__ftoa_engine+0x142>
    39f4:	20 2f       	mov	r18, r16
    39f6:	23 95       	inc	r18
    39f8:	02 2f       	mov	r16, r18
    39fa:	7a 33       	cpi	r23, 0x3A	; 58
    39fc:	28 f0       	brcs	.+10     	; 0x3a08 <__ftoa_engine+0x154>
    39fe:	79 e3       	ldi	r23, 0x39	; 57
    3a00:	7d 93       	st	X+, r23
    3a02:	2a 95       	dec	r18
    3a04:	e9 f7       	brne	.-6      	; 0x3a00 <__ftoa_engine+0x14c>
    3a06:	10 c0       	rjmp	.+32     	; 0x3a28 <__ftoa_engine+0x174>
    3a08:	7d 93       	st	X+, r23
    3a0a:	2a 95       	dec	r18
    3a0c:	89 f6       	brne	.-94     	; 0x39b0 <__ftoa_engine+0xfc>
    3a0e:	06 94       	lsr	r0
    3a10:	97 95       	ror	r25
    3a12:	67 95       	ror	r22
    3a14:	37 95       	ror	r19
    3a16:	17 95       	ror	r17
    3a18:	17 94       	ror	r1
    3a1a:	e1 18       	sub	r14, r1
    3a1c:	f1 0a       	sbc	r15, r17
    3a1e:	43 0b       	sbc	r20, r19
    3a20:	56 0b       	sbc	r21, r22
    3a22:	c9 0b       	sbc	r28, r25
    3a24:	d0 09       	sbc	r29, r0
    3a26:	98 f0       	brcs	.+38     	; 0x3a4e <__ftoa_engine+0x19a>
    3a28:	23 95       	inc	r18
    3a2a:	7e 91       	ld	r23, -X
    3a2c:	73 95       	inc	r23
    3a2e:	7a 33       	cpi	r23, 0x3A	; 58
    3a30:	08 f0       	brcs	.+2      	; 0x3a34 <__ftoa_engine+0x180>
    3a32:	70 e3       	ldi	r23, 0x30	; 48
    3a34:	7c 93       	st	X, r23
    3a36:	20 13       	cpse	r18, r16
    3a38:	b8 f7       	brcc	.-18     	; 0x3a28 <__ftoa_engine+0x174>
    3a3a:	7e 91       	ld	r23, -X
    3a3c:	70 61       	ori	r23, 0x10	; 16
    3a3e:	7d 93       	st	X+, r23
    3a40:	30 f0       	brcs	.+12     	; 0x3a4e <__ftoa_engine+0x19a>
    3a42:	83 95       	inc	r24
    3a44:	71 e3       	ldi	r23, 0x31	; 49
    3a46:	7d 93       	st	X+, r23
    3a48:	70 e3       	ldi	r23, 0x30	; 48
    3a4a:	2a 95       	dec	r18
    3a4c:	e1 f7       	brne	.-8      	; 0x3a46 <__ftoa_engine+0x192>
    3a4e:	11 24       	eor	r1, r1
    3a50:	ef 90       	pop	r14
    3a52:	ff 90       	pop	r15
    3a54:	0f 91       	pop	r16
    3a56:	1f 91       	pop	r17
    3a58:	cf 91       	pop	r28
    3a5a:	df 91       	pop	r29
    3a5c:	99 27       	eor	r25, r25
    3a5e:	87 fd       	sbrc	r24, 7
    3a60:	90 95       	com	r25
    3a62:	08 95       	ret

00003a64 <strnlen_P>:
    3a64:	fc 01       	movw	r30, r24
    3a66:	05 90       	lpm	r0, Z+
    3a68:	61 50       	subi	r22, 0x01	; 1
    3a6a:	70 40       	sbci	r23, 0x00	; 0
    3a6c:	01 10       	cpse	r0, r1
    3a6e:	d8 f7       	brcc	.-10     	; 0x3a66 <strnlen_P+0x2>
    3a70:	80 95       	com	r24
    3a72:	90 95       	com	r25
    3a74:	8e 0f       	add	r24, r30
    3a76:	9f 1f       	adc	r25, r31
    3a78:	08 95       	ret

00003a7a <strnlen>:
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	61 50       	subi	r22, 0x01	; 1
    3a7e:	70 40       	sbci	r23, 0x00	; 0
    3a80:	01 90       	ld	r0, Z+
    3a82:	01 10       	cpse	r0, r1
    3a84:	d8 f7       	brcc	.-10     	; 0x3a7c <strnlen+0x2>
    3a86:	80 95       	com	r24
    3a88:	90 95       	com	r25
    3a8a:	8e 0f       	add	r24, r30
    3a8c:	9f 1f       	adc	r25, r31
    3a8e:	08 95       	ret

00003a90 <fdevopen>:
    3a90:	0f 93       	push	r16
    3a92:	1f 93       	push	r17
    3a94:	cf 93       	push	r28
    3a96:	df 93       	push	r29
    3a98:	00 97       	sbiw	r24, 0x00	; 0
    3a9a:	31 f4       	brne	.+12     	; 0x3aa8 <fdevopen+0x18>
    3a9c:	61 15       	cp	r22, r1
    3a9e:	71 05       	cpc	r23, r1
    3aa0:	19 f4       	brne	.+6      	; 0x3aa8 <fdevopen+0x18>
    3aa2:	80 e0       	ldi	r24, 0x00	; 0
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	39 c0       	rjmp	.+114    	; 0x3b1a <fdevopen+0x8a>
    3aa8:	8b 01       	movw	r16, r22
    3aaa:	ec 01       	movw	r28, r24
    3aac:	6e e0       	ldi	r22, 0x0E	; 14
    3aae:	70 e0       	ldi	r23, 0x00	; 0
    3ab0:	81 e0       	ldi	r24, 0x01	; 1
    3ab2:	90 e0       	ldi	r25, 0x00	; 0
    3ab4:	14 d1       	rcall	.+552    	; 0x3cde <calloc>
    3ab6:	fc 01       	movw	r30, r24
    3ab8:	89 2b       	or	r24, r25
    3aba:	99 f3       	breq	.-26     	; 0x3aa2 <fdevopen+0x12>
    3abc:	80 e8       	ldi	r24, 0x80	; 128
    3abe:	83 83       	std	Z+3, r24	; 0x03
    3ac0:	01 15       	cp	r16, r1
    3ac2:	11 05       	cpc	r17, r1
    3ac4:	71 f0       	breq	.+28     	; 0x3ae2 <fdevopen+0x52>
    3ac6:	02 87       	std	Z+10, r16	; 0x0a
    3ac8:	13 87       	std	Z+11, r17	; 0x0b
    3aca:	81 e8       	ldi	r24, 0x81	; 129
    3acc:	83 83       	std	Z+3, r24	; 0x03
    3ace:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <__iob>
    3ad2:	90 91 ed 20 	lds	r25, 0x20ED	; 0x8020ed <__iob+0x1>
    3ad6:	89 2b       	or	r24, r25
    3ad8:	21 f4       	brne	.+8      	; 0x3ae2 <fdevopen+0x52>
    3ada:	e0 93 ec 20 	sts	0x20EC, r30	; 0x8020ec <__iob>
    3ade:	f0 93 ed 20 	sts	0x20ED, r31	; 0x8020ed <__iob+0x1>
    3ae2:	20 97       	sbiw	r28, 0x00	; 0
    3ae4:	c9 f0       	breq	.+50     	; 0x3b18 <fdevopen+0x88>
    3ae6:	c0 87       	std	Z+8, r28	; 0x08
    3ae8:	d1 87       	std	Z+9, r29	; 0x09
    3aea:	83 81       	ldd	r24, Z+3	; 0x03
    3aec:	82 60       	ori	r24, 0x02	; 2
    3aee:	83 83       	std	Z+3, r24	; 0x03
    3af0:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <__iob+0x2>
    3af4:	90 91 ef 20 	lds	r25, 0x20EF	; 0x8020ef <__iob+0x3>
    3af8:	89 2b       	or	r24, r25
    3afa:	71 f4       	brne	.+28     	; 0x3b18 <fdevopen+0x88>
    3afc:	e0 93 ee 20 	sts	0x20EE, r30	; 0x8020ee <__iob+0x2>
    3b00:	f0 93 ef 20 	sts	0x20EF, r31	; 0x8020ef <__iob+0x3>
    3b04:	80 91 f0 20 	lds	r24, 0x20F0	; 0x8020f0 <__iob+0x4>
    3b08:	90 91 f1 20 	lds	r25, 0x20F1	; 0x8020f1 <__iob+0x5>
    3b0c:	89 2b       	or	r24, r25
    3b0e:	21 f4       	brne	.+8      	; 0x3b18 <fdevopen+0x88>
    3b10:	e0 93 f0 20 	sts	0x20F0, r30	; 0x8020f0 <__iob+0x4>
    3b14:	f0 93 f1 20 	sts	0x20F1, r31	; 0x8020f1 <__iob+0x5>
    3b18:	cf 01       	movw	r24, r30
    3b1a:	df 91       	pop	r29
    3b1c:	cf 91       	pop	r28
    3b1e:	1f 91       	pop	r17
    3b20:	0f 91       	pop	r16
    3b22:	08 95       	ret

00003b24 <fputc>:
    3b24:	0f 93       	push	r16
    3b26:	1f 93       	push	r17
    3b28:	cf 93       	push	r28
    3b2a:	df 93       	push	r29
    3b2c:	fb 01       	movw	r30, r22
    3b2e:	23 81       	ldd	r18, Z+3	; 0x03
    3b30:	21 fd       	sbrc	r18, 1
    3b32:	03 c0       	rjmp	.+6      	; 0x3b3a <fputc+0x16>
    3b34:	8f ef       	ldi	r24, 0xFF	; 255
    3b36:	9f ef       	ldi	r25, 0xFF	; 255
    3b38:	2c c0       	rjmp	.+88     	; 0x3b92 <fputc+0x6e>
    3b3a:	22 ff       	sbrs	r18, 2
    3b3c:	16 c0       	rjmp	.+44     	; 0x3b6a <fputc+0x46>
    3b3e:	46 81       	ldd	r20, Z+6	; 0x06
    3b40:	57 81       	ldd	r21, Z+7	; 0x07
    3b42:	24 81       	ldd	r18, Z+4	; 0x04
    3b44:	35 81       	ldd	r19, Z+5	; 0x05
    3b46:	42 17       	cp	r20, r18
    3b48:	53 07       	cpc	r21, r19
    3b4a:	44 f4       	brge	.+16     	; 0x3b5c <fputc+0x38>
    3b4c:	a0 81       	ld	r26, Z
    3b4e:	b1 81       	ldd	r27, Z+1	; 0x01
    3b50:	9d 01       	movw	r18, r26
    3b52:	2f 5f       	subi	r18, 0xFF	; 255
    3b54:	3f 4f       	sbci	r19, 0xFF	; 255
    3b56:	20 83       	st	Z, r18
    3b58:	31 83       	std	Z+1, r19	; 0x01
    3b5a:	8c 93       	st	X, r24
    3b5c:	26 81       	ldd	r18, Z+6	; 0x06
    3b5e:	37 81       	ldd	r19, Z+7	; 0x07
    3b60:	2f 5f       	subi	r18, 0xFF	; 255
    3b62:	3f 4f       	sbci	r19, 0xFF	; 255
    3b64:	26 83       	std	Z+6, r18	; 0x06
    3b66:	37 83       	std	Z+7, r19	; 0x07
    3b68:	14 c0       	rjmp	.+40     	; 0x3b92 <fputc+0x6e>
    3b6a:	8b 01       	movw	r16, r22
    3b6c:	ec 01       	movw	r28, r24
    3b6e:	fb 01       	movw	r30, r22
    3b70:	00 84       	ldd	r0, Z+8	; 0x08
    3b72:	f1 85       	ldd	r31, Z+9	; 0x09
    3b74:	e0 2d       	mov	r30, r0
    3b76:	19 95       	eicall
    3b78:	89 2b       	or	r24, r25
    3b7a:	e1 f6       	brne	.-72     	; 0x3b34 <fputc+0x10>
    3b7c:	d8 01       	movw	r26, r16
    3b7e:	16 96       	adiw	r26, 0x06	; 6
    3b80:	8d 91       	ld	r24, X+
    3b82:	9c 91       	ld	r25, X
    3b84:	17 97       	sbiw	r26, 0x07	; 7
    3b86:	01 96       	adiw	r24, 0x01	; 1
    3b88:	16 96       	adiw	r26, 0x06	; 6
    3b8a:	8d 93       	st	X+, r24
    3b8c:	9c 93       	st	X, r25
    3b8e:	17 97       	sbiw	r26, 0x07	; 7
    3b90:	ce 01       	movw	r24, r28
    3b92:	df 91       	pop	r29
    3b94:	cf 91       	pop	r28
    3b96:	1f 91       	pop	r17
    3b98:	0f 91       	pop	r16
    3b9a:	08 95       	ret

00003b9c <printf>:
    3b9c:	cf 93       	push	r28
    3b9e:	df 93       	push	r29
    3ba0:	cd b7       	in	r28, 0x3d	; 61
    3ba2:	de b7       	in	r29, 0x3e	; 62
    3ba4:	ae 01       	movw	r20, r28
    3ba6:	4a 5f       	subi	r20, 0xFA	; 250
    3ba8:	5f 4f       	sbci	r21, 0xFF	; 255
    3baa:	fa 01       	movw	r30, r20
    3bac:	61 91       	ld	r22, Z+
    3bae:	71 91       	ld	r23, Z+
    3bb0:	af 01       	movw	r20, r30
    3bb2:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <__iob+0x2>
    3bb6:	90 91 ef 20 	lds	r25, 0x20EF	; 0x8020ef <__iob+0x3>
    3bba:	18 da       	rcall	.-3024   	; 0x2fec <vfprintf>
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	08 95       	ret

00003bc2 <puts>:
    3bc2:	0f 93       	push	r16
    3bc4:	1f 93       	push	r17
    3bc6:	cf 93       	push	r28
    3bc8:	df 93       	push	r29
    3bca:	e0 91 ee 20 	lds	r30, 0x20EE	; 0x8020ee <__iob+0x2>
    3bce:	f0 91 ef 20 	lds	r31, 0x20EF	; 0x8020ef <__iob+0x3>
    3bd2:	23 81       	ldd	r18, Z+3	; 0x03
    3bd4:	21 ff       	sbrs	r18, 1
    3bd6:	1b c0       	rjmp	.+54     	; 0x3c0e <puts+0x4c>
    3bd8:	8c 01       	movw	r16, r24
    3bda:	d0 e0       	ldi	r29, 0x00	; 0
    3bdc:	c0 e0       	ldi	r28, 0x00	; 0
    3bde:	f8 01       	movw	r30, r16
    3be0:	81 91       	ld	r24, Z+
    3be2:	8f 01       	movw	r16, r30
    3be4:	60 91 ee 20 	lds	r22, 0x20EE	; 0x8020ee <__iob+0x2>
    3be8:	70 91 ef 20 	lds	r23, 0x20EF	; 0x8020ef <__iob+0x3>
    3bec:	db 01       	movw	r26, r22
    3bee:	18 96       	adiw	r26, 0x08	; 8
    3bf0:	ed 91       	ld	r30, X+
    3bf2:	fc 91       	ld	r31, X
    3bf4:	19 97       	sbiw	r26, 0x09	; 9
    3bf6:	88 23       	and	r24, r24
    3bf8:	31 f0       	breq	.+12     	; 0x3c06 <puts+0x44>
    3bfa:	19 95       	eicall
    3bfc:	89 2b       	or	r24, r25
    3bfe:	79 f3       	breq	.-34     	; 0x3bde <puts+0x1c>
    3c00:	df ef       	ldi	r29, 0xFF	; 255
    3c02:	cf ef       	ldi	r28, 0xFF	; 255
    3c04:	ec cf       	rjmp	.-40     	; 0x3bde <puts+0x1c>
    3c06:	8a e0       	ldi	r24, 0x0A	; 10
    3c08:	19 95       	eicall
    3c0a:	89 2b       	or	r24, r25
    3c0c:	19 f0       	breq	.+6      	; 0x3c14 <puts+0x52>
    3c0e:	8f ef       	ldi	r24, 0xFF	; 255
    3c10:	9f ef       	ldi	r25, 0xFF	; 255
    3c12:	02 c0       	rjmp	.+4      	; 0x3c18 <puts+0x56>
    3c14:	8d 2f       	mov	r24, r29
    3c16:	9c 2f       	mov	r25, r28
    3c18:	df 91       	pop	r29
    3c1a:	cf 91       	pop	r28
    3c1c:	1f 91       	pop	r17
    3c1e:	0f 91       	pop	r16
    3c20:	08 95       	ret

00003c22 <__ultoa_invert>:
    3c22:	fa 01       	movw	r30, r20
    3c24:	aa 27       	eor	r26, r26
    3c26:	28 30       	cpi	r18, 0x08	; 8
    3c28:	51 f1       	breq	.+84     	; 0x3c7e <__ultoa_invert+0x5c>
    3c2a:	20 31       	cpi	r18, 0x10	; 16
    3c2c:	81 f1       	breq	.+96     	; 0x3c8e <__ultoa_invert+0x6c>
    3c2e:	e8 94       	clt
    3c30:	6f 93       	push	r22
    3c32:	6e 7f       	andi	r22, 0xFE	; 254
    3c34:	6e 5f       	subi	r22, 0xFE	; 254
    3c36:	7f 4f       	sbci	r23, 0xFF	; 255
    3c38:	8f 4f       	sbci	r24, 0xFF	; 255
    3c3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c3c:	af 4f       	sbci	r26, 0xFF	; 255
    3c3e:	b1 e0       	ldi	r27, 0x01	; 1
    3c40:	3e d0       	rcall	.+124    	; 0x3cbe <__ultoa_invert+0x9c>
    3c42:	b4 e0       	ldi	r27, 0x04	; 4
    3c44:	3c d0       	rcall	.+120    	; 0x3cbe <__ultoa_invert+0x9c>
    3c46:	67 0f       	add	r22, r23
    3c48:	78 1f       	adc	r23, r24
    3c4a:	89 1f       	adc	r24, r25
    3c4c:	9a 1f       	adc	r25, r26
    3c4e:	a1 1d       	adc	r26, r1
    3c50:	68 0f       	add	r22, r24
    3c52:	79 1f       	adc	r23, r25
    3c54:	8a 1f       	adc	r24, r26
    3c56:	91 1d       	adc	r25, r1
    3c58:	a1 1d       	adc	r26, r1
    3c5a:	6a 0f       	add	r22, r26
    3c5c:	71 1d       	adc	r23, r1
    3c5e:	81 1d       	adc	r24, r1
    3c60:	91 1d       	adc	r25, r1
    3c62:	a1 1d       	adc	r26, r1
    3c64:	20 d0       	rcall	.+64     	; 0x3ca6 <__ultoa_invert+0x84>
    3c66:	09 f4       	brne	.+2      	; 0x3c6a <__ultoa_invert+0x48>
    3c68:	68 94       	set
    3c6a:	3f 91       	pop	r19
    3c6c:	2a e0       	ldi	r18, 0x0A	; 10
    3c6e:	26 9f       	mul	r18, r22
    3c70:	11 24       	eor	r1, r1
    3c72:	30 19       	sub	r19, r0
    3c74:	30 5d       	subi	r19, 0xD0	; 208
    3c76:	31 93       	st	Z+, r19
    3c78:	de f6       	brtc	.-74     	; 0x3c30 <__ultoa_invert+0xe>
    3c7a:	cf 01       	movw	r24, r30
    3c7c:	08 95       	ret
    3c7e:	46 2f       	mov	r20, r22
    3c80:	47 70       	andi	r20, 0x07	; 7
    3c82:	40 5d       	subi	r20, 0xD0	; 208
    3c84:	41 93       	st	Z+, r20
    3c86:	b3 e0       	ldi	r27, 0x03	; 3
    3c88:	0f d0       	rcall	.+30     	; 0x3ca8 <__ultoa_invert+0x86>
    3c8a:	c9 f7       	brne	.-14     	; 0x3c7e <__ultoa_invert+0x5c>
    3c8c:	f6 cf       	rjmp	.-20     	; 0x3c7a <__ultoa_invert+0x58>
    3c8e:	46 2f       	mov	r20, r22
    3c90:	4f 70       	andi	r20, 0x0F	; 15
    3c92:	40 5d       	subi	r20, 0xD0	; 208
    3c94:	4a 33       	cpi	r20, 0x3A	; 58
    3c96:	18 f0       	brcs	.+6      	; 0x3c9e <__ultoa_invert+0x7c>
    3c98:	49 5d       	subi	r20, 0xD9	; 217
    3c9a:	31 fd       	sbrc	r19, 1
    3c9c:	40 52       	subi	r20, 0x20	; 32
    3c9e:	41 93       	st	Z+, r20
    3ca0:	02 d0       	rcall	.+4      	; 0x3ca6 <__ultoa_invert+0x84>
    3ca2:	a9 f7       	brne	.-22     	; 0x3c8e <__ultoa_invert+0x6c>
    3ca4:	ea cf       	rjmp	.-44     	; 0x3c7a <__ultoa_invert+0x58>
    3ca6:	b4 e0       	ldi	r27, 0x04	; 4
    3ca8:	a6 95       	lsr	r26
    3caa:	97 95       	ror	r25
    3cac:	87 95       	ror	r24
    3cae:	77 95       	ror	r23
    3cb0:	67 95       	ror	r22
    3cb2:	ba 95       	dec	r27
    3cb4:	c9 f7       	brne	.-14     	; 0x3ca8 <__ultoa_invert+0x86>
    3cb6:	00 97       	sbiw	r24, 0x00	; 0
    3cb8:	61 05       	cpc	r22, r1
    3cba:	71 05       	cpc	r23, r1
    3cbc:	08 95       	ret
    3cbe:	9b 01       	movw	r18, r22
    3cc0:	ac 01       	movw	r20, r24
    3cc2:	0a 2e       	mov	r0, r26
    3cc4:	06 94       	lsr	r0
    3cc6:	57 95       	ror	r21
    3cc8:	47 95       	ror	r20
    3cca:	37 95       	ror	r19
    3ccc:	27 95       	ror	r18
    3cce:	ba 95       	dec	r27
    3cd0:	c9 f7       	brne	.-14     	; 0x3cc4 <__ultoa_invert+0xa2>
    3cd2:	62 0f       	add	r22, r18
    3cd4:	73 1f       	adc	r23, r19
    3cd6:	84 1f       	adc	r24, r20
    3cd8:	95 1f       	adc	r25, r21
    3cda:	a0 1d       	adc	r26, r0
    3cdc:	08 95       	ret

00003cde <calloc>:
    3cde:	0f 93       	push	r16
    3ce0:	1f 93       	push	r17
    3ce2:	cf 93       	push	r28
    3ce4:	df 93       	push	r29
    3ce6:	86 9f       	mul	r24, r22
    3ce8:	80 01       	movw	r16, r0
    3cea:	87 9f       	mul	r24, r23
    3cec:	10 0d       	add	r17, r0
    3cee:	96 9f       	mul	r25, r22
    3cf0:	10 0d       	add	r17, r0
    3cf2:	11 24       	eor	r1, r1
    3cf4:	c8 01       	movw	r24, r16
    3cf6:	0d d0       	rcall	.+26     	; 0x3d12 <malloc>
    3cf8:	ec 01       	movw	r28, r24
    3cfa:	00 97       	sbiw	r24, 0x00	; 0
    3cfc:	21 f0       	breq	.+8      	; 0x3d06 <calloc+0x28>
    3cfe:	a8 01       	movw	r20, r16
    3d00:	60 e0       	ldi	r22, 0x00	; 0
    3d02:	70 e0       	ldi	r23, 0x00	; 0
    3d04:	27 d1       	rcall	.+590    	; 0x3f54 <memset>
    3d06:	ce 01       	movw	r24, r28
    3d08:	df 91       	pop	r29
    3d0a:	cf 91       	pop	r28
    3d0c:	1f 91       	pop	r17
    3d0e:	0f 91       	pop	r16
    3d10:	08 95       	ret

00003d12 <malloc>:
    3d12:	0f 93       	push	r16
    3d14:	1f 93       	push	r17
    3d16:	cf 93       	push	r28
    3d18:	df 93       	push	r29
    3d1a:	82 30       	cpi	r24, 0x02	; 2
    3d1c:	91 05       	cpc	r25, r1
    3d1e:	10 f4       	brcc	.+4      	; 0x3d24 <malloc+0x12>
    3d20:	82 e0       	ldi	r24, 0x02	; 2
    3d22:	90 e0       	ldi	r25, 0x00	; 0
    3d24:	e0 91 f4 20 	lds	r30, 0x20F4	; 0x8020f4 <__flp>
    3d28:	f0 91 f5 20 	lds	r31, 0x20F5	; 0x8020f5 <__flp+0x1>
    3d2c:	20 e0       	ldi	r18, 0x00	; 0
    3d2e:	30 e0       	ldi	r19, 0x00	; 0
    3d30:	a0 e0       	ldi	r26, 0x00	; 0
    3d32:	b0 e0       	ldi	r27, 0x00	; 0
    3d34:	30 97       	sbiw	r30, 0x00	; 0
    3d36:	19 f1       	breq	.+70     	; 0x3d7e <malloc+0x6c>
    3d38:	40 81       	ld	r20, Z
    3d3a:	51 81       	ldd	r21, Z+1	; 0x01
    3d3c:	02 81       	ldd	r16, Z+2	; 0x02
    3d3e:	13 81       	ldd	r17, Z+3	; 0x03
    3d40:	48 17       	cp	r20, r24
    3d42:	59 07       	cpc	r21, r25
    3d44:	c8 f0       	brcs	.+50     	; 0x3d78 <malloc+0x66>
    3d46:	84 17       	cp	r24, r20
    3d48:	95 07       	cpc	r25, r21
    3d4a:	69 f4       	brne	.+26     	; 0x3d66 <malloc+0x54>
    3d4c:	10 97       	sbiw	r26, 0x00	; 0
    3d4e:	31 f0       	breq	.+12     	; 0x3d5c <malloc+0x4a>
    3d50:	12 96       	adiw	r26, 0x02	; 2
    3d52:	0c 93       	st	X, r16
    3d54:	12 97       	sbiw	r26, 0x02	; 2
    3d56:	13 96       	adiw	r26, 0x03	; 3
    3d58:	1c 93       	st	X, r17
    3d5a:	27 c0       	rjmp	.+78     	; 0x3daa <malloc+0x98>
    3d5c:	00 93 f4 20 	sts	0x20F4, r16	; 0x8020f4 <__flp>
    3d60:	10 93 f5 20 	sts	0x20F5, r17	; 0x8020f5 <__flp+0x1>
    3d64:	22 c0       	rjmp	.+68     	; 0x3daa <malloc+0x98>
    3d66:	21 15       	cp	r18, r1
    3d68:	31 05       	cpc	r19, r1
    3d6a:	19 f0       	breq	.+6      	; 0x3d72 <malloc+0x60>
    3d6c:	42 17       	cp	r20, r18
    3d6e:	53 07       	cpc	r21, r19
    3d70:	18 f4       	brcc	.+6      	; 0x3d78 <malloc+0x66>
    3d72:	9a 01       	movw	r18, r20
    3d74:	bd 01       	movw	r22, r26
    3d76:	ef 01       	movw	r28, r30
    3d78:	df 01       	movw	r26, r30
    3d7a:	f8 01       	movw	r30, r16
    3d7c:	db cf       	rjmp	.-74     	; 0x3d34 <malloc+0x22>
    3d7e:	21 15       	cp	r18, r1
    3d80:	31 05       	cpc	r19, r1
    3d82:	f9 f0       	breq	.+62     	; 0x3dc2 <malloc+0xb0>
    3d84:	28 1b       	sub	r18, r24
    3d86:	39 0b       	sbc	r19, r25
    3d88:	24 30       	cpi	r18, 0x04	; 4
    3d8a:	31 05       	cpc	r19, r1
    3d8c:	80 f4       	brcc	.+32     	; 0x3dae <malloc+0x9c>
    3d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d90:	9b 81       	ldd	r25, Y+3	; 0x03
    3d92:	61 15       	cp	r22, r1
    3d94:	71 05       	cpc	r23, r1
    3d96:	21 f0       	breq	.+8      	; 0x3da0 <malloc+0x8e>
    3d98:	fb 01       	movw	r30, r22
    3d9a:	82 83       	std	Z+2, r24	; 0x02
    3d9c:	93 83       	std	Z+3, r25	; 0x03
    3d9e:	04 c0       	rjmp	.+8      	; 0x3da8 <malloc+0x96>
    3da0:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <__flp>
    3da4:	90 93 f5 20 	sts	0x20F5, r25	; 0x8020f5 <__flp+0x1>
    3da8:	fe 01       	movw	r30, r28
    3daa:	32 96       	adiw	r30, 0x02	; 2
    3dac:	44 c0       	rjmp	.+136    	; 0x3e36 <malloc+0x124>
    3dae:	fe 01       	movw	r30, r28
    3db0:	e2 0f       	add	r30, r18
    3db2:	f3 1f       	adc	r31, r19
    3db4:	81 93       	st	Z+, r24
    3db6:	91 93       	st	Z+, r25
    3db8:	22 50       	subi	r18, 0x02	; 2
    3dba:	31 09       	sbc	r19, r1
    3dbc:	28 83       	st	Y, r18
    3dbe:	39 83       	std	Y+1, r19	; 0x01
    3dc0:	3a c0       	rjmp	.+116    	; 0x3e36 <malloc+0x124>
    3dc2:	20 91 f2 20 	lds	r18, 0x20F2	; 0x8020f2 <__brkval>
    3dc6:	30 91 f3 20 	lds	r19, 0x20F3	; 0x8020f3 <__brkval+0x1>
    3dca:	23 2b       	or	r18, r19
    3dcc:	41 f4       	brne	.+16     	; 0x3dde <malloc+0xcc>
    3dce:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    3dd2:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    3dd6:	20 93 f2 20 	sts	0x20F2, r18	; 0x8020f2 <__brkval>
    3dda:	30 93 f3 20 	sts	0x20F3, r19	; 0x8020f3 <__brkval+0x1>
    3dde:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    3de2:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    3de6:	21 15       	cp	r18, r1
    3de8:	31 05       	cpc	r19, r1
    3dea:	41 f4       	brne	.+16     	; 0x3dfc <malloc+0xea>
    3dec:	2d b7       	in	r18, 0x3d	; 61
    3dee:	3e b7       	in	r19, 0x3e	; 62
    3df0:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    3df4:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    3df8:	24 1b       	sub	r18, r20
    3dfa:	35 0b       	sbc	r19, r21
    3dfc:	e0 91 f2 20 	lds	r30, 0x20F2	; 0x8020f2 <__brkval>
    3e00:	f0 91 f3 20 	lds	r31, 0x20F3	; 0x8020f3 <__brkval+0x1>
    3e04:	e2 17       	cp	r30, r18
    3e06:	f3 07       	cpc	r31, r19
    3e08:	a0 f4       	brcc	.+40     	; 0x3e32 <malloc+0x120>
    3e0a:	2e 1b       	sub	r18, r30
    3e0c:	3f 0b       	sbc	r19, r31
    3e0e:	28 17       	cp	r18, r24
    3e10:	39 07       	cpc	r19, r25
    3e12:	78 f0       	brcs	.+30     	; 0x3e32 <malloc+0x120>
    3e14:	ac 01       	movw	r20, r24
    3e16:	4e 5f       	subi	r20, 0xFE	; 254
    3e18:	5f 4f       	sbci	r21, 0xFF	; 255
    3e1a:	24 17       	cp	r18, r20
    3e1c:	35 07       	cpc	r19, r21
    3e1e:	48 f0       	brcs	.+18     	; 0x3e32 <malloc+0x120>
    3e20:	4e 0f       	add	r20, r30
    3e22:	5f 1f       	adc	r21, r31
    3e24:	40 93 f2 20 	sts	0x20F2, r20	; 0x8020f2 <__brkval>
    3e28:	50 93 f3 20 	sts	0x20F3, r21	; 0x8020f3 <__brkval+0x1>
    3e2c:	81 93       	st	Z+, r24
    3e2e:	91 93       	st	Z+, r25
    3e30:	02 c0       	rjmp	.+4      	; 0x3e36 <malloc+0x124>
    3e32:	e0 e0       	ldi	r30, 0x00	; 0
    3e34:	f0 e0       	ldi	r31, 0x00	; 0
    3e36:	cf 01       	movw	r24, r30
    3e38:	df 91       	pop	r29
    3e3a:	cf 91       	pop	r28
    3e3c:	1f 91       	pop	r17
    3e3e:	0f 91       	pop	r16
    3e40:	08 95       	ret

00003e42 <free>:
    3e42:	cf 93       	push	r28
    3e44:	df 93       	push	r29
    3e46:	00 97       	sbiw	r24, 0x00	; 0
    3e48:	09 f4       	brne	.+2      	; 0x3e4c <free+0xa>
    3e4a:	81 c0       	rjmp	.+258    	; 0x3f4e <free+0x10c>
    3e4c:	fc 01       	movw	r30, r24
    3e4e:	32 97       	sbiw	r30, 0x02	; 2
    3e50:	12 82       	std	Z+2, r1	; 0x02
    3e52:	13 82       	std	Z+3, r1	; 0x03
    3e54:	a0 91 f4 20 	lds	r26, 0x20F4	; 0x8020f4 <__flp>
    3e58:	b0 91 f5 20 	lds	r27, 0x20F5	; 0x8020f5 <__flp+0x1>
    3e5c:	10 97       	sbiw	r26, 0x00	; 0
    3e5e:	81 f4       	brne	.+32     	; 0x3e80 <free+0x3e>
    3e60:	20 81       	ld	r18, Z
    3e62:	31 81       	ldd	r19, Z+1	; 0x01
    3e64:	82 0f       	add	r24, r18
    3e66:	93 1f       	adc	r25, r19
    3e68:	20 91 f2 20 	lds	r18, 0x20F2	; 0x8020f2 <__brkval>
    3e6c:	30 91 f3 20 	lds	r19, 0x20F3	; 0x8020f3 <__brkval+0x1>
    3e70:	28 17       	cp	r18, r24
    3e72:	39 07       	cpc	r19, r25
    3e74:	51 f5       	brne	.+84     	; 0x3eca <free+0x88>
    3e76:	e0 93 f2 20 	sts	0x20F2, r30	; 0x8020f2 <__brkval>
    3e7a:	f0 93 f3 20 	sts	0x20F3, r31	; 0x8020f3 <__brkval+0x1>
    3e7e:	67 c0       	rjmp	.+206    	; 0x3f4e <free+0x10c>
    3e80:	ed 01       	movw	r28, r26
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	ce 17       	cp	r28, r30
    3e88:	df 07       	cpc	r29, r31
    3e8a:	40 f4       	brcc	.+16     	; 0x3e9c <free+0x5a>
    3e8c:	4a 81       	ldd	r20, Y+2	; 0x02
    3e8e:	5b 81       	ldd	r21, Y+3	; 0x03
    3e90:	9e 01       	movw	r18, r28
    3e92:	41 15       	cp	r20, r1
    3e94:	51 05       	cpc	r21, r1
    3e96:	f1 f0       	breq	.+60     	; 0x3ed4 <free+0x92>
    3e98:	ea 01       	movw	r28, r20
    3e9a:	f5 cf       	rjmp	.-22     	; 0x3e86 <free+0x44>
    3e9c:	c2 83       	std	Z+2, r28	; 0x02
    3e9e:	d3 83       	std	Z+3, r29	; 0x03
    3ea0:	40 81       	ld	r20, Z
    3ea2:	51 81       	ldd	r21, Z+1	; 0x01
    3ea4:	84 0f       	add	r24, r20
    3ea6:	95 1f       	adc	r25, r21
    3ea8:	c8 17       	cp	r28, r24
    3eaa:	d9 07       	cpc	r29, r25
    3eac:	59 f4       	brne	.+22     	; 0x3ec4 <free+0x82>
    3eae:	88 81       	ld	r24, Y
    3eb0:	99 81       	ldd	r25, Y+1	; 0x01
    3eb2:	84 0f       	add	r24, r20
    3eb4:	95 1f       	adc	r25, r21
    3eb6:	02 96       	adiw	r24, 0x02	; 2
    3eb8:	80 83       	st	Z, r24
    3eba:	91 83       	std	Z+1, r25	; 0x01
    3ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    3ec0:	82 83       	std	Z+2, r24	; 0x02
    3ec2:	93 83       	std	Z+3, r25	; 0x03
    3ec4:	21 15       	cp	r18, r1
    3ec6:	31 05       	cpc	r19, r1
    3ec8:	29 f4       	brne	.+10     	; 0x3ed4 <free+0x92>
    3eca:	e0 93 f4 20 	sts	0x20F4, r30	; 0x8020f4 <__flp>
    3ece:	f0 93 f5 20 	sts	0x20F5, r31	; 0x8020f5 <__flp+0x1>
    3ed2:	3d c0       	rjmp	.+122    	; 0x3f4e <free+0x10c>
    3ed4:	e9 01       	movw	r28, r18
    3ed6:	ea 83       	std	Y+2, r30	; 0x02
    3ed8:	fb 83       	std	Y+3, r31	; 0x03
    3eda:	49 91       	ld	r20, Y+
    3edc:	59 91       	ld	r21, Y+
    3ede:	c4 0f       	add	r28, r20
    3ee0:	d5 1f       	adc	r29, r21
    3ee2:	ec 17       	cp	r30, r28
    3ee4:	fd 07       	cpc	r31, r29
    3ee6:	61 f4       	brne	.+24     	; 0x3f00 <free+0xbe>
    3ee8:	80 81       	ld	r24, Z
    3eea:	91 81       	ldd	r25, Z+1	; 0x01
    3eec:	84 0f       	add	r24, r20
    3eee:	95 1f       	adc	r25, r21
    3ef0:	02 96       	adiw	r24, 0x02	; 2
    3ef2:	e9 01       	movw	r28, r18
    3ef4:	88 83       	st	Y, r24
    3ef6:	99 83       	std	Y+1, r25	; 0x01
    3ef8:	82 81       	ldd	r24, Z+2	; 0x02
    3efa:	93 81       	ldd	r25, Z+3	; 0x03
    3efc:	8a 83       	std	Y+2, r24	; 0x02
    3efe:	9b 83       	std	Y+3, r25	; 0x03
    3f00:	e0 e0       	ldi	r30, 0x00	; 0
    3f02:	f0 e0       	ldi	r31, 0x00	; 0
    3f04:	12 96       	adiw	r26, 0x02	; 2
    3f06:	8d 91       	ld	r24, X+
    3f08:	9c 91       	ld	r25, X
    3f0a:	13 97       	sbiw	r26, 0x03	; 3
    3f0c:	00 97       	sbiw	r24, 0x00	; 0
    3f0e:	19 f0       	breq	.+6      	; 0x3f16 <free+0xd4>
    3f10:	fd 01       	movw	r30, r26
    3f12:	dc 01       	movw	r26, r24
    3f14:	f7 cf       	rjmp	.-18     	; 0x3f04 <free+0xc2>
    3f16:	8d 91       	ld	r24, X+
    3f18:	9c 91       	ld	r25, X
    3f1a:	11 97       	sbiw	r26, 0x01	; 1
    3f1c:	9d 01       	movw	r18, r26
    3f1e:	2e 5f       	subi	r18, 0xFE	; 254
    3f20:	3f 4f       	sbci	r19, 0xFF	; 255
    3f22:	82 0f       	add	r24, r18
    3f24:	93 1f       	adc	r25, r19
    3f26:	20 91 f2 20 	lds	r18, 0x20F2	; 0x8020f2 <__brkval>
    3f2a:	30 91 f3 20 	lds	r19, 0x20F3	; 0x8020f3 <__brkval+0x1>
    3f2e:	28 17       	cp	r18, r24
    3f30:	39 07       	cpc	r19, r25
    3f32:	69 f4       	brne	.+26     	; 0x3f4e <free+0x10c>
    3f34:	30 97       	sbiw	r30, 0x00	; 0
    3f36:	29 f4       	brne	.+10     	; 0x3f42 <free+0x100>
    3f38:	10 92 f4 20 	sts	0x20F4, r1	; 0x8020f4 <__flp>
    3f3c:	10 92 f5 20 	sts	0x20F5, r1	; 0x8020f5 <__flp+0x1>
    3f40:	02 c0       	rjmp	.+4      	; 0x3f46 <free+0x104>
    3f42:	12 82       	std	Z+2, r1	; 0x02
    3f44:	13 82       	std	Z+3, r1	; 0x03
    3f46:	a0 93 f2 20 	sts	0x20F2, r26	; 0x8020f2 <__brkval>
    3f4a:	b0 93 f3 20 	sts	0x20F3, r27	; 0x8020f3 <__brkval+0x1>
    3f4e:	df 91       	pop	r29
    3f50:	cf 91       	pop	r28
    3f52:	08 95       	ret

00003f54 <memset>:
    3f54:	dc 01       	movw	r26, r24
    3f56:	01 c0       	rjmp	.+2      	; 0x3f5a <memset+0x6>
    3f58:	6d 93       	st	X+, r22
    3f5a:	41 50       	subi	r20, 0x01	; 1
    3f5c:	50 40       	sbci	r21, 0x00	; 0
    3f5e:	e0 f7       	brcc	.-8      	; 0x3f58 <memset+0x4>
    3f60:	08 95       	ret

00003f62 <_exit>:
    3f62:	f8 94       	cli

00003f64 <__stop_program>:
    3f64:	ff cf       	rjmp	.-2      	; 0x3f64 <__stop_program>
