
CanSat Probe Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000716c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000098  00802000  0000716c  00007200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000042b  00802098  00802098  00007298  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000072f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000700  00000000  00000000  00007338  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000165d8  00000000  00000000  00007a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006f89  00000000  00000000  0001e010  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000d9d0  00000000  00000000  00024f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001838  00000000  00000000  0003296c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00035a55  00000000  00000000  000341a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007d24  00000000  00000000  00069bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000640  00000000  00000000  00071920  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000ede3  00000000  00000000  00071f60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d4 c1       	rjmp	.+936    	; 0x3aa <__ctors_end>
       2:	00 00       	nop
       4:	f8 c1       	rjmp	.+1008   	; 0x3f6 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__vector_2>
       c:	f4 c1       	rjmp	.+1000   	; 0x3f6 <__bad_interrupt>
       e:	00 00       	nop
      10:	f2 c1       	rjmp	.+996    	; 0x3f6 <__bad_interrupt>
      12:	00 00       	nop
      14:	f0 c1       	rjmp	.+992    	; 0x3f6 <__bad_interrupt>
      16:	00 00       	nop
      18:	ee c1       	rjmp	.+988    	; 0x3f6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ec c1       	rjmp	.+984    	; 0x3f6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ea c1       	rjmp	.+980    	; 0x3f6 <__bad_interrupt>
      22:	00 00       	nop
      24:	e8 c1       	rjmp	.+976    	; 0x3f6 <__bad_interrupt>
      26:	00 00       	nop
      28:	e6 c1       	rjmp	.+972    	; 0x3f6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e4 c1       	rjmp	.+968    	; 0x3f6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e2 c1       	rjmp	.+964    	; 0x3f6 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c2       	rjmp	.+1264   	; 0x526 <__vector_13>
      36:	00 00       	nop
      38:	0c 94 b2 25 	jmp	0x4b64	; 0x4b64 <__vector_14>
      3c:	dc c1       	rjmp	.+952    	; 0x3f6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	da c1       	rjmp	.+948    	; 0x3f6 <__bad_interrupt>
      42:	00 00       	nop
      44:	d8 c1       	rjmp	.+944    	; 0x3f6 <__bad_interrupt>
      46:	00 00       	nop
      48:	d6 c1       	rjmp	.+940    	; 0x3f6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d4 c1       	rjmp	.+936    	; 0x3f6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d2 c1       	rjmp	.+932    	; 0x3f6 <__bad_interrupt>
      52:	00 00       	nop
      54:	d0 c1       	rjmp	.+928    	; 0x3f6 <__bad_interrupt>
      56:	00 00       	nop
      58:	ce c1       	rjmp	.+924    	; 0x3f6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cc c1       	rjmp	.+920    	; 0x3f6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ca c1       	rjmp	.+916    	; 0x3f6 <__bad_interrupt>
      62:	00 00       	nop
      64:	c8 c1       	rjmp	.+912    	; 0x3f6 <__bad_interrupt>
      66:	00 00       	nop
      68:	c6 c1       	rjmp	.+908    	; 0x3f6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c4 c1       	rjmp	.+904    	; 0x3f6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c2 c1       	rjmp	.+900    	; 0x3f6 <__bad_interrupt>
      72:	00 00       	nop
      74:	c0 c1       	rjmp	.+896    	; 0x3f6 <__bad_interrupt>
      76:	00 00       	nop
      78:	be c1       	rjmp	.+892    	; 0x3f6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bc c1       	rjmp	.+888    	; 0x3f6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ba c1       	rjmp	.+884    	; 0x3f6 <__bad_interrupt>
      82:	00 00       	nop
      84:	b8 c1       	rjmp	.+880    	; 0x3f6 <__bad_interrupt>
      86:	00 00       	nop
      88:	b6 c1       	rjmp	.+876    	; 0x3f6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b4 c1       	rjmp	.+872    	; 0x3f6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b2 c1       	rjmp	.+868    	; 0x3f6 <__bad_interrupt>
      92:	00 00       	nop
      94:	b0 c1       	rjmp	.+864    	; 0x3f6 <__bad_interrupt>
      96:	00 00       	nop
      98:	ae c1       	rjmp	.+860    	; 0x3f6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__vector_39>
      a0:	0c 94 2f 18 	jmp	0x305e	; 0x305e <__vector_40>
      a4:	0c 94 6c 18 	jmp	0x30d8	; 0x30d8 <__vector_41>
      a8:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <__vector_42>
      ac:	a4 c1       	rjmp	.+840    	; 0x3f6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	a2 c1       	rjmp	.+836    	; 0x3f6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	a0 c1       	rjmp	.+832    	; 0x3f6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	9a c2       	rjmp	.+1332   	; 0x5ee <__vector_46>
      ba:	00 00       	nop
      bc:	9c c1       	rjmp	.+824    	; 0x3f6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	9a c1       	rjmp	.+820    	; 0x3f6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	98 c1       	rjmp	.+816    	; 0x3f6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	96 c1       	rjmp	.+812    	; 0x3f6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	94 c1       	rjmp	.+808    	; 0x3f6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	92 c1       	rjmp	.+804    	; 0x3f6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	90 c1       	rjmp	.+800    	; 0x3f6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	8e c1       	rjmp	.+796    	; 0x3f6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	8c c1       	rjmp	.+792    	; 0x3f6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	8a c1       	rjmp	.+788    	; 0x3f6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	88 c1       	rjmp	.+784    	; 0x3f6 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	86 c1       	rjmp	.+780    	; 0x3f6 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	84 c1       	rjmp	.+776    	; 0x3f6 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	82 c1       	rjmp	.+772    	; 0x3f6 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	80 c1       	rjmp	.+768    	; 0x3f6 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	7e c1       	rjmp	.+764    	; 0x3f6 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	7c c1       	rjmp	.+760    	; 0x3f6 <__bad_interrupt>
      fe:	00 00       	nop
     100:	7a c1       	rjmp	.+756    	; 0x3f6 <__bad_interrupt>
     102:	00 00       	nop
     104:	78 c1       	rjmp	.+752    	; 0x3f6 <__bad_interrupt>
     106:	00 00       	nop
     108:	76 c1       	rjmp	.+748    	; 0x3f6 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	74 c1       	rjmp	.+744    	; 0x3f6 <__bad_interrupt>
     10e:	00 00       	nop
     110:	72 c1       	rjmp	.+740    	; 0x3f6 <__bad_interrupt>
     112:	00 00       	nop
     114:	70 c1       	rjmp	.+736    	; 0x3f6 <__bad_interrupt>
     116:	00 00       	nop
     118:	6e c1       	rjmp	.+732    	; 0x3f6 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 fe 16 	jmp	0x2dfc	; 0x2dfc <__vector_71>
     120:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <__vector_72>
     124:	0c 94 78 17 	jmp	0x2ef0	; 0x2ef0 <__vector_73>
     128:	0c 94 b5 17 	jmp	0x2f6a	; 0x2f6a <__vector_74>
     12c:	64 c1       	rjmp	.+712    	; 0x3f6 <__bad_interrupt>
     12e:	00 00       	nop
     130:	2c c2       	rjmp	.+1112   	; 0x58a <__vector_76>
     132:	00 00       	nop
     134:	0c 94 c6 25 	jmp	0x4b8c	; 0x4b8c <__vector_77>
     138:	5e c1       	rjmp	.+700    	; 0x3f6 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	5c c1       	rjmp	.+696    	; 0x3f6 <__bad_interrupt>
     13e:	00 00       	nop
     140:	5a c1       	rjmp	.+692    	; 0x3f6 <__bad_interrupt>
     142:	00 00       	nop
     144:	58 c1       	rjmp	.+688    	; 0x3f6 <__bad_interrupt>
     146:	00 00       	nop
     148:	56 c1       	rjmp	.+684    	; 0x3f6 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	54 c1       	rjmp	.+680    	; 0x3f6 <__bad_interrupt>
     14e:	00 00       	nop
     150:	52 c1       	rjmp	.+676    	; 0x3f6 <__bad_interrupt>
     152:	00 00       	nop
     154:	50 c1       	rjmp	.+672    	; 0x3f6 <__bad_interrupt>
     156:	00 00       	nop
     158:	4e c1       	rjmp	.+668    	; 0x3f6 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	4c c1       	rjmp	.+664    	; 0x3f6 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 53 26 	jmp	0x4ca6	; 0x4ca6 <__vector_88>
     164:	48 c1       	rjmp	.+656    	; 0x3f6 <__bad_interrupt>
     166:	00 00       	nop
     168:	46 c1       	rjmp	.+652    	; 0x3f6 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	4c c3       	rjmp	.+1688   	; 0x806 <__vector_91>
     16e:	00 00       	nop
     170:	42 c1       	rjmp	.+644    	; 0x3f6 <__bad_interrupt>
     172:	00 00       	nop
     174:	ab c3       	rjmp	.+1878   	; 0x8cc <__vector_93>
     176:	00 00       	nop
     178:	3e c1       	rjmp	.+636    	; 0x3f6 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	3c c1       	rjmp	.+632    	; 0x3f6 <__bad_interrupt>
     17e:	00 00       	nop
     180:	3a c1       	rjmp	.+628    	; 0x3f6 <__bad_interrupt>
     182:	00 00       	nop
     184:	38 c1       	rjmp	.+624    	; 0x3f6 <__bad_interrupt>
     186:	00 00       	nop
     188:	36 c1       	rjmp	.+620    	; 0x3f6 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	34 c1       	rjmp	.+616    	; 0x3f6 <__bad_interrupt>
     18e:	00 00       	nop
     190:	32 c1       	rjmp	.+612    	; 0x3f6 <__bad_interrupt>
     192:	00 00       	nop
     194:	30 c1       	rjmp	.+608    	; 0x3f6 <__bad_interrupt>
     196:	00 00       	nop
     198:	2e c1       	rjmp	.+604    	; 0x3f6 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	2c c1       	rjmp	.+600    	; 0x3f6 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	2a c1       	rjmp	.+596    	; 0x3f6 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	28 c1       	rjmp	.+592    	; 0x3f6 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	26 c1       	rjmp	.+588    	; 0x3f6 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	52 c2       	rjmp	.+1188   	; 0x652 <__vector_107>
     1ae:	00 00       	nop
     1b0:	22 c1       	rjmp	.+580    	; 0x3f6 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	20 c1       	rjmp	.+576    	; 0x3f6 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	1e c1       	rjmp	.+572    	; 0x3f6 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	1c c1       	rjmp	.+568    	; 0x3f6 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	1a c1       	rjmp	.+564    	; 0x3f6 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	18 c1       	rjmp	.+560    	; 0x3f6 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	16 c1       	rjmp	.+556    	; 0x3f6 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	14 c1       	rjmp	.+552    	; 0x3f6 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	12 c1       	rjmp	.+548    	; 0x3f6 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	10 c1       	rjmp	.+544    	; 0x3f6 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	0e c1       	rjmp	.+540    	; 0x3f6 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	0c c1       	rjmp	.+536    	; 0x3f6 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	0a c1       	rjmp	.+532    	; 0x3f6 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	08 c1       	rjmp	.+528    	; 0x3f6 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	06 c1       	rjmp	.+524    	; 0x3f6 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	04 c1       	rjmp	.+520    	; 0x3f6 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	02 c1       	rjmp	.+516    	; 0x3f6 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	00 c1       	rjmp	.+512    	; 0x3f6 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	fe c0       	rjmp	.+508    	; 0x3f6 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	95 26       	eor	r9, r21
     1fe:	ba 26       	eor	r11, r26
     200:	9b 26       	eor	r9, r27
     202:	9f 26       	eor	r9, r31
     204:	a3 26       	eor	r10, r19
     206:	a9 26       	eor	r10, r25
     208:	ba 26       	eor	r11, r26
     20a:	ad 26       	eor	r10, r29
     20c:	b3 26       	eor	r11, r19
     20e:	ab 26       	eor	r10, r27
     210:	ba 26       	eor	r11, r26
     212:	ba 26       	eor	r11, r26
     214:	ba 26       	eor	r11, r26
     216:	ba 26       	eor	r11, r26
     218:	ba 26       	eor	r11, r26
     21a:	ba 26       	eor	r11, r26
     21c:	ba 26       	eor	r11, r26
     21e:	ba 26       	eor	r11, r26
     220:	ba 26       	eor	r11, r26
     222:	ba 26       	eor	r11, r26
     224:	ba 26       	eor	r11, r26
     226:	ba 26       	eor	r11, r26
     228:	ba 26       	eor	r11, r26
     22a:	ba 26       	eor	r11, r26
     22c:	ba 26       	eor	r11, r26
     22e:	ba 26       	eor	r11, r26
     230:	ba 26       	eor	r11, r26
     232:	ba 26       	eor	r11, r26
     234:	ba 26       	eor	r11, r26
     236:	ba 26       	eor	r11, r26
     238:	ba 26       	eor	r11, r26
     23a:	98 26       	eor	r9, r24
     23c:	ba 26       	eor	r11, r26
     23e:	ba 26       	eor	r11, r26
     240:	ba 26       	eor	r11, r26
     242:	ba 26       	eor	r11, r26
     244:	ba 26       	eor	r11, r26
     246:	ba 26       	eor	r11, r26
     248:	ba 26       	eor	r11, r26
     24a:	ba 26       	eor	r11, r26
     24c:	ba 26       	eor	r11, r26
     24e:	ba 26       	eor	r11, r26
     250:	ba 26       	eor	r11, r26
     252:	ba 26       	eor	r11, r26
     254:	ba 26       	eor	r11, r26
     256:	ba 26       	eor	r11, r26
     258:	ba 26       	eor	r11, r26
     25a:	ba 26       	eor	r11, r26
     25c:	ba 26       	eor	r11, r26
     25e:	ba 26       	eor	r11, r26
     260:	ba 26       	eor	r11, r26
     262:	ba 26       	eor	r11, r26
     264:	ba 26       	eor	r11, r26
     266:	ba 26       	eor	r11, r26
     268:	ba 26       	eor	r11, r26
     26a:	ba 26       	eor	r11, r26
     26c:	ba 26       	eor	r11, r26
     26e:	ba 26       	eor	r11, r26
     270:	ba 26       	eor	r11, r26
     272:	ba 26       	eor	r11, r26
     274:	ba 26       	eor	r11, r26
     276:	a7 26       	eor	r10, r23
     278:	b9 26       	eor	r11, r25
     27a:	08 4a       	sbci	r16, 0xA8	; 168
     27c:	d7 3b       	cpi	r29, 0xB7	; 183
     27e:	3b ce       	rjmp	.-906    	; 0xfffffef6 <__eeprom_end+0xff7efef6>
     280:	01 6e       	ori	r16, 0xE1	; 225
     282:	84 bc       	out	0x24, r8	; 36
     284:	bf fd       	.word	0xfdbf	; ????
     286:	c1 2f       	mov	r28, r17
     288:	3d 6c       	ori	r19, 0xCD	; 205
     28a:	74 31       	cpi	r23, 0x14	; 20
     28c:	9a bd       	out	0x2a, r25	; 42
     28e:	56 83       	std	Z+6, r21	; 0x06
     290:	3d da       	rcall	.-2950   	; 0xfffff70c <__eeprom_end+0xff7ef70c>
     292:	3d 00       	.word	0x003d	; ????
     294:	c7 7f       	andi	r28, 0xF7	; 247
     296:	11 be       	out	0x31, r1	; 49
     298:	d9 e4       	ldi	r29, 0x49	; 73
     29a:	bb 4c       	sbci	r27, 0xCB	; 203
     29c:	3e 91       	ld	r19, -X
     29e:	6b aa       	std	Y+51, r6	; 0x33
     2a0:	aa be       	out	0x3a, r10	; 58
     2a2:	00 00       	nop
     2a4:	00 80       	ld	r0, Z
     2a6:	3f 00       	.word	0x003f	; ????

000002a8 <__trampolines_end>:
     2a8:	6e 61       	ori	r22, 0x1E	; 30
     2aa:	6e 00       	.word	0x006e	; ????

000002ac <__c.2332>:
     2ac:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2bc:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2cc:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2dc:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2ec:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2fc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     30c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     31c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     32c:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     33c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     34c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     35c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     36c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     37c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     38c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     39c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003aa <__ctors_end>:
     3aa:	11 24       	eor	r1, r1
     3ac:	1f be       	out	0x3f, r1	; 63
     3ae:	cf ef       	ldi	r28, 0xFF	; 255
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	df e3       	ldi	r29, 0x3F	; 63
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	00 e0       	ldi	r16, 0x00	; 0
     3b8:	0c bf       	out	0x3c, r16	; 60
     3ba:	18 be       	out	0x38, r1	; 56
     3bc:	19 be       	out	0x39, r1	; 57
     3be:	1a be       	out	0x3a, r1	; 58
     3c0:	1b be       	out	0x3b, r1	; 59

000003c2 <__do_copy_data>:
     3c2:	10 e2       	ldi	r17, 0x20	; 32
     3c4:	a0 e0       	ldi	r26, 0x00	; 0
     3c6:	b0 e2       	ldi	r27, 0x20	; 32
     3c8:	ec e6       	ldi	r30, 0x6C	; 108
     3ca:	f1 e7       	ldi	r31, 0x71	; 113
     3cc:	00 e0       	ldi	r16, 0x00	; 0
     3ce:	0b bf       	out	0x3b, r16	; 59
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <__do_copy_data+0x14>
     3d2:	07 90       	elpm	r0, Z+
     3d4:	0d 92       	st	X+, r0
     3d6:	a8 39       	cpi	r26, 0x98	; 152
     3d8:	b1 07       	cpc	r27, r17
     3da:	d9 f7       	brne	.-10     	; 0x3d2 <__do_copy_data+0x10>
     3dc:	1b be       	out	0x3b, r1	; 59

000003de <__do_clear_bss>:
     3de:	24 e2       	ldi	r18, 0x24	; 36
     3e0:	a8 e9       	ldi	r26, 0x98	; 152
     3e2:	b0 e2       	ldi	r27, 0x20	; 32
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <.do_clear_bss_start>

000003e6 <.do_clear_bss_loop>:
     3e6:	1d 92       	st	X+, r1

000003e8 <.do_clear_bss_start>:
     3e8:	a3 3c       	cpi	r26, 0xC3	; 195
     3ea:	b2 07       	cpc	r27, r18
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <.do_clear_bss_loop>
     3ee:	0e 94 55 28 	call	0x50aa	; 0x50aa <main>
     3f2:	0c 94 b4 38 	jmp	0x7168	; 0x7168 <_exit>

000003f6 <__bad_interrupt>:
     3f6:	04 ce       	rjmp	.-1016   	; 0x0 <__vectors>

000003f8 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     3fc:	e0 91 98 20 	lds	r30, 0x2098	; 0x802098 <__data_end>
     400:	f0 91 99 20 	lds	r31, 0x2099	; 0x802099 <__data_end+0x1>
     404:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     406:	83 ff       	sbrs	r24, 3
     408:	08 c0       	rjmp	.+16     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     40a:	88 60       	ori	r24, 0x08	; 8
     40c:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     412:	86 ef       	ldi	r24, 0xF6	; 246
     414:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <__data_end+0xa>
     418:	83 c0       	rjmp	.+262    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     41a:	98 2f       	mov	r25, r24
     41c:	94 71       	andi	r25, 0x14	; 20
     41e:	31 f0       	breq	.+12     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     420:	83 e0       	ldi	r24, 0x03	; 3
     422:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     424:	8f ef       	ldi	r24, 0xFF	; 255
     426:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <__data_end+0xa>
     42a:	7a c0       	rjmp	.+244    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     42c:	86 ff       	sbrs	r24, 6
     42e:	43 c0       	rjmp	.+134    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     430:	c8 e9       	ldi	r28, 0x98	; 152
     432:	d0 e2       	ldi	r29, 0x20	; 32
     434:	aa 81       	ldd	r26, Y+2	; 0x02
     436:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     438:	8c 81       	ldd	r24, Y+4	; 0x04
     43a:	9d 81       	ldd	r25, Y+5	; 0x05
     43c:	14 96       	adiw	r26, 0x04	; 4
     43e:	2d 91       	ld	r18, X+
     440:	3c 91       	ld	r19, X
     442:	15 97       	sbiw	r26, 0x05	; 5
     444:	82 17       	cp	r24, r18
     446:	93 07       	cpc	r25, r19
     448:	6c f4       	brge	.+26     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     44a:	9c 01       	movw	r18, r24
     44c:	2f 5f       	subi	r18, 0xFF	; 255
     44e:	3f 4f       	sbci	r19, 0xFF	; 255
     450:	20 93 9c 20 	sts	0x209C, r18	; 0x80209c <__data_end+0x4>
     454:	30 93 9d 20 	sts	0x209D, r19	; 0x80209d <__data_end+0x5>
     458:	a8 0f       	add	r26, r24
     45a:	b9 1f       	adc	r27, r25
     45c:	11 96       	adiw	r26, 0x01	; 1
     45e:	8c 91       	ld	r24, X
     460:	87 83       	std	Z+7, r24	; 0x07
     462:	5e c0       	rjmp	.+188    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

	} else if (transfer.data_count < pkg->length) {
     464:	80 91 9e 20 	lds	r24, 0x209E	; 0x80209e <__data_end+0x6>
     468:	90 91 9f 20 	lds	r25, 0x209F	; 0x80209f <__data_end+0x7>
     46c:	18 96       	adiw	r26, 0x08	; 8
     46e:	2d 91       	ld	r18, X+
     470:	3c 91       	ld	r19, X
     472:	19 97       	sbiw	r26, 0x09	; 9
     474:	82 17       	cp	r24, r18
     476:	93 07       	cpc	r25, r19
     478:	c8 f4       	brcc	.+50     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>

		if (transfer.read) {
     47a:	20 91 a0 20 	lds	r18, 0x20A0	; 0x8020a0 <__data_end+0x8>
     47e:	22 23       	and	r18, r18
     480:	21 f0       	breq	.+8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     482:	86 81       	ldd	r24, Z+6	; 0x06
     484:	81 60       	ori	r24, 0x01	; 1
     486:	86 83       	std	Z+6, r24	; 0x06
     488:	4b c0       	rjmp	.+150    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

		} else {
			const uint8_t * const data = pkg->buffer;
     48a:	16 96       	adiw	r26, 0x06	; 6
     48c:	2d 91       	ld	r18, X+
     48e:	3c 91       	ld	r19, X
     490:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     492:	ac 01       	movw	r20, r24
     494:	4f 5f       	subi	r20, 0xFF	; 255
     496:	5f 4f       	sbci	r21, 0xFF	; 255
     498:	40 93 9e 20 	sts	0x209E, r20	; 0x80209e <__data_end+0x6>
     49c:	50 93 9f 20 	sts	0x209F, r21	; 0x80209f <__data_end+0x7>
     4a0:	d9 01       	movw	r26, r18
     4a2:	a8 0f       	add	r26, r24
     4a4:	b9 1f       	adc	r27, r25
     4a6:	8c 91       	ld	r24, X
     4a8:	87 83       	std	Z+7, r24	; 0x07
     4aa:	3a c0       	rjmp	.+116    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     4b0:	10 92 a2 20 	sts	0x20A2, r1	; 0x8020a2 <__data_end+0xa>
     4b4:	35 c0       	rjmp	.+106    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     4b6:	88 23       	and	r24, r24
     4b8:	84 f5       	brge	.+96     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     4ba:	a8 e9       	ldi	r26, 0x98	; 152
     4bc:	b0 e2       	ldi	r27, 0x20	; 32
     4be:	12 96       	adiw	r26, 0x02	; 2
     4c0:	cd 91       	ld	r28, X+
     4c2:	dc 91       	ld	r29, X
     4c4:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     4c6:	16 96       	adiw	r26, 0x06	; 6
     4c8:	8d 91       	ld	r24, X+
     4ca:	9c 91       	ld	r25, X
     4cc:	17 97       	sbiw	r26, 0x07	; 7
     4ce:	28 85       	ldd	r18, Y+8	; 0x08
     4d0:	39 85       	ldd	r19, Y+9	; 0x09
     4d2:	82 17       	cp	r24, r18
     4d4:	93 07       	cpc	r25, r19
     4d6:	d8 f4       	brcc	.+54     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>

		uint8_t * const data = pkg->buffer;
     4d8:	6e 81       	ldd	r22, Y+6	; 0x06
     4da:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     4dc:	9c 01       	movw	r18, r24
     4de:	2f 5f       	subi	r18, 0xFF	; 255
     4e0:	3f 4f       	sbci	r19, 0xFF	; 255
     4e2:	20 93 9e 20 	sts	0x209E, r18	; 0x80209e <__data_end+0x6>
     4e6:	30 93 9f 20 	sts	0x209F, r19	; 0x80209f <__data_end+0x7>
     4ea:	47 81       	ldd	r20, Z+7	; 0x07
     4ec:	db 01       	movw	r26, r22
     4ee:	a8 0f       	add	r26, r24
     4f0:	b9 1f       	adc	r27, r25
     4f2:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     4f4:	88 85       	ldd	r24, Y+8	; 0x08
     4f6:	99 85       	ldd	r25, Y+9	; 0x09
     4f8:	28 17       	cp	r18, r24
     4fa:	39 07       	cpc	r19, r25
     4fc:	18 f4       	brcc	.+6      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	83 83       	std	Z+3, r24	; 0x03
     502:	0e c0       	rjmp	.+28     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     504:	87 e0       	ldi	r24, 0x07	; 7
     506:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     508:	10 92 a2 20 	sts	0x20A2, r1	; 0x8020a2 <__data_end+0xa>
     50c:	09 c0       	rjmp	.+18     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     50e:	83 e0       	ldi	r24, 0x03	; 3
     510:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     512:	89 ef       	ldi	r24, 0xF9	; 249
     514:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <__data_end+0xa>
     518:	03 c0       	rjmp	.+6      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     51a:	8b ef       	ldi	r24, 0xFB	; 251
     51c:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <__data_end+0xa>
	}
}
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     526:	1f 92       	push	r1
     528:	0f 92       	push	r0
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	0f 92       	push	r0
     52e:	11 24       	eor	r1, r1
     530:	08 b6       	in	r0, 0x38	; 56
     532:	0f 92       	push	r0
     534:	18 be       	out	0x38, r1	; 56
     536:	09 b6       	in	r0, 0x39	; 57
     538:	0f 92       	push	r0
     53a:	19 be       	out	0x39, r1	; 57
     53c:	0b b6       	in	r0, 0x3b	; 59
     53e:	0f 92       	push	r0
     540:	1b be       	out	0x3b, r1	; 59
     542:	2f 93       	push	r18
     544:	3f 93       	push	r19
     546:	4f 93       	push	r20
     548:	5f 93       	push	r21
     54a:	6f 93       	push	r22
     54c:	7f 93       	push	r23
     54e:	8f 93       	push	r24
     550:	9f 93       	push	r25
     552:	af 93       	push	r26
     554:	bf 93       	push	r27
     556:	ef 93       	push	r30
     558:	ff 93       	push	r31
     55a:	4e df       	rcall	.-356    	; 0x3f8 <twim_interrupt_handler>
     55c:	ff 91       	pop	r31
     55e:	ef 91       	pop	r30
     560:	bf 91       	pop	r27
     562:	af 91       	pop	r26
     564:	9f 91       	pop	r25
     566:	8f 91       	pop	r24
     568:	7f 91       	pop	r23
     56a:	6f 91       	pop	r22
     56c:	5f 91       	pop	r21
     56e:	4f 91       	pop	r20
     570:	3f 91       	pop	r19
     572:	2f 91       	pop	r18
     574:	0f 90       	pop	r0
     576:	0b be       	out	0x3b, r0	; 59
     578:	0f 90       	pop	r0
     57a:	09 be       	out	0x39, r0	; 57
     57c:	0f 90       	pop	r0
     57e:	08 be       	out	0x38, r0	; 56
     580:	0f 90       	pop	r0
     582:	0f be       	out	0x3f, r0	; 63
     584:	0f 90       	pop	r0
     586:	1f 90       	pop	r1
     588:	18 95       	reti

0000058a <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     58a:	1f 92       	push	r1
     58c:	0f 92       	push	r0
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	0f 92       	push	r0
     592:	11 24       	eor	r1, r1
     594:	08 b6       	in	r0, 0x38	; 56
     596:	0f 92       	push	r0
     598:	18 be       	out	0x38, r1	; 56
     59a:	09 b6       	in	r0, 0x39	; 57
     59c:	0f 92       	push	r0
     59e:	19 be       	out	0x39, r1	; 57
     5a0:	0b b6       	in	r0, 0x3b	; 59
     5a2:	0f 92       	push	r0
     5a4:	1b be       	out	0x3b, r1	; 59
     5a6:	2f 93       	push	r18
     5a8:	3f 93       	push	r19
     5aa:	4f 93       	push	r20
     5ac:	5f 93       	push	r21
     5ae:	6f 93       	push	r22
     5b0:	7f 93       	push	r23
     5b2:	8f 93       	push	r24
     5b4:	9f 93       	push	r25
     5b6:	af 93       	push	r26
     5b8:	bf 93       	push	r27
     5ba:	ef 93       	push	r30
     5bc:	ff 93       	push	r31
     5be:	1c df       	rcall	.-456    	; 0x3f8 <twim_interrupt_handler>
     5c0:	ff 91       	pop	r31
     5c2:	ef 91       	pop	r30
     5c4:	bf 91       	pop	r27
     5c6:	af 91       	pop	r26
     5c8:	9f 91       	pop	r25
     5ca:	8f 91       	pop	r24
     5cc:	7f 91       	pop	r23
     5ce:	6f 91       	pop	r22
     5d0:	5f 91       	pop	r21
     5d2:	4f 91       	pop	r20
     5d4:	3f 91       	pop	r19
     5d6:	2f 91       	pop	r18
     5d8:	0f 90       	pop	r0
     5da:	0b be       	out	0x3b, r0	; 59
     5dc:	0f 90       	pop	r0
     5de:	09 be       	out	0x39, r0	; 57
     5e0:	0f 90       	pop	r0
     5e2:	08 be       	out	0x38, r0	; 56
     5e4:	0f 90       	pop	r0
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	0f 90       	pop	r0
     5ea:	1f 90       	pop	r1
     5ec:	18 95       	reti

000005ee <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     5ee:	1f 92       	push	r1
     5f0:	0f 92       	push	r0
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	0f 92       	push	r0
     5f6:	11 24       	eor	r1, r1
     5f8:	08 b6       	in	r0, 0x38	; 56
     5fa:	0f 92       	push	r0
     5fc:	18 be       	out	0x38, r1	; 56
     5fe:	09 b6       	in	r0, 0x39	; 57
     600:	0f 92       	push	r0
     602:	19 be       	out	0x39, r1	; 57
     604:	0b b6       	in	r0, 0x3b	; 59
     606:	0f 92       	push	r0
     608:	1b be       	out	0x3b, r1	; 59
     60a:	2f 93       	push	r18
     60c:	3f 93       	push	r19
     60e:	4f 93       	push	r20
     610:	5f 93       	push	r21
     612:	6f 93       	push	r22
     614:	7f 93       	push	r23
     616:	8f 93       	push	r24
     618:	9f 93       	push	r25
     61a:	af 93       	push	r26
     61c:	bf 93       	push	r27
     61e:	ef 93       	push	r30
     620:	ff 93       	push	r31
     622:	ea de       	rcall	.-556    	; 0x3f8 <twim_interrupt_handler>
     624:	ff 91       	pop	r31
     626:	ef 91       	pop	r30
     628:	bf 91       	pop	r27
     62a:	af 91       	pop	r26
     62c:	9f 91       	pop	r25
     62e:	8f 91       	pop	r24
     630:	7f 91       	pop	r23
     632:	6f 91       	pop	r22
     634:	5f 91       	pop	r21
     636:	4f 91       	pop	r20
     638:	3f 91       	pop	r19
     63a:	2f 91       	pop	r18
     63c:	0f 90       	pop	r0
     63e:	0b be       	out	0x3b, r0	; 59
     640:	0f 90       	pop	r0
     642:	09 be       	out	0x39, r0	; 57
     644:	0f 90       	pop	r0
     646:	08 be       	out	0x38, r0	; 56
     648:	0f 90       	pop	r0
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	0f 90       	pop	r0
     64e:	1f 90       	pop	r1
     650:	18 95       	reti

00000652 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     652:	1f 92       	push	r1
     654:	0f 92       	push	r0
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	0f 92       	push	r0
     65a:	11 24       	eor	r1, r1
     65c:	08 b6       	in	r0, 0x38	; 56
     65e:	0f 92       	push	r0
     660:	18 be       	out	0x38, r1	; 56
     662:	09 b6       	in	r0, 0x39	; 57
     664:	0f 92       	push	r0
     666:	19 be       	out	0x39, r1	; 57
     668:	0b b6       	in	r0, 0x3b	; 59
     66a:	0f 92       	push	r0
     66c:	1b be       	out	0x3b, r1	; 59
     66e:	2f 93       	push	r18
     670:	3f 93       	push	r19
     672:	4f 93       	push	r20
     674:	5f 93       	push	r21
     676:	6f 93       	push	r22
     678:	7f 93       	push	r23
     67a:	8f 93       	push	r24
     67c:	9f 93       	push	r25
     67e:	af 93       	push	r26
     680:	bf 93       	push	r27
     682:	ef 93       	push	r30
     684:	ff 93       	push	r31
     686:	b8 de       	rcall	.-656    	; 0x3f8 <twim_interrupt_handler>
     688:	ff 91       	pop	r31
     68a:	ef 91       	pop	r30
     68c:	bf 91       	pop	r27
     68e:	af 91       	pop	r26
     690:	9f 91       	pop	r25
     692:	8f 91       	pop	r24
     694:	7f 91       	pop	r23
     696:	6f 91       	pop	r22
     698:	5f 91       	pop	r21
     69a:	4f 91       	pop	r20
     69c:	3f 91       	pop	r19
     69e:	2f 91       	pop	r18
     6a0:	0f 90       	pop	r0
     6a2:	0b be       	out	0x3b, r0	; 59
     6a4:	0f 90       	pop	r0
     6a6:	09 be       	out	0x39, r0	; 57
     6a8:	0f 90       	pop	r0
     6aa:	08 be       	out	0x38, r0	; 56
     6ac:	0f 90       	pop	r0
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	0f 90       	pop	r0
     6b2:	1f 90       	pop	r1
     6b4:	18 95       	reti

000006b6 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
     6b6:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
     6b8:	db 01       	movw	r26, r22
     6ba:	14 96       	adiw	r26, 0x04	; 4
     6bc:	8c 91       	ld	r24, X
     6be:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
     6c0:	88 eb       	ldi	r24, 0xB8	; 184
     6c2:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
     6c8:	e8 e9       	ldi	r30, 0x98	; 152
     6ca:	f0 e2       	ldi	r31, 0x20	; 32
     6cc:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
     6ce:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
     6d0:	e0 ea       	ldi	r30, 0xA0	; 160
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	82 81       	ldd	r24, Z+2	; 0x02
     6d6:	82 60       	ori	r24, 0x02	; 2
     6d8:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
     6da:	78 94       	sei

	return STATUS_OK;
}
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	08 95       	ret

000006e0 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	1f 92       	push	r1
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	9c 01       	movw	r18, r24
     6ec:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
     6ee:	89 2b       	or	r24, r25
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <twi_master_transfer+0x14>
     6f2:	51 c0       	rjmp	.+162    	; 0x796 <twi_master_transfer+0xb6>
     6f4:	30 97       	sbiw	r30, 0x00	; 0
     6f6:	09 f4       	brne	.+2      	; 0x6fa <twi_master_transfer+0x1a>
     6f8:	50 c0       	rjmp	.+160    	; 0x79a <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
     6fa:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
     6fc:	80 91 a1 20 	lds	r24, 0x20A1	; 0x8020a1 <__data_end+0x9>
     700:	88 23       	and	r24, r24
     702:	19 f0       	breq	.+6      	; 0x70a <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
     704:	99 23       	and	r25, r25
     706:	f1 f3       	breq	.-4      	; 0x704 <twi_master_transfer+0x24>
     708:	4a c0       	rjmp	.+148    	; 0x79e <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     70a:	8f b7       	in	r24, 0x3f	; 63
     70c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     70e:	f8 94       	cli
	return flags;
     710:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
     712:	a8 e9       	ldi	r26, 0x98	; 152
     714:	b0 e2       	ldi	r27, 0x20	; 32
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	19 96       	adiw	r26, 0x09	; 9
     71a:	9c 93       	st	X, r25
     71c:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
     71e:	90 e8       	ldi	r25, 0x80	; 128
     720:	1a 96       	adiw	r26, 0x0a	; 10
     722:	9c 93       	st	X, r25
     724:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     726:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
     728:	2d 93       	st	X+, r18
     72a:	3c 93       	st	X, r19
     72c:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
     72e:	12 96       	adiw	r26, 0x02	; 2
     730:	6d 93       	st	X+, r22
     732:	7c 93       	st	X, r23
     734:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
     736:	14 96       	adiw	r26, 0x04	; 4
     738:	1d 92       	st	X+, r1
     73a:	1c 92       	st	X, r1
     73c:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
     73e:	16 96       	adiw	r26, 0x06	; 6
     740:	1d 92       	st	X+, r1
     742:	1c 92       	st	X, r1
     744:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
     746:	18 96       	adiw	r26, 0x08	; 8
     748:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
     74a:	80 81       	ld	r24, Z
     74c:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
     74e:	64 81       	ldd	r22, Z+4	; 0x04
     750:	75 81       	ldd	r23, Z+5	; 0x05
     752:	67 2b       	or	r22, r23
     754:	11 f4       	brne	.+4      	; 0x75a <twi_master_transfer+0x7a>
     756:	41 11       	cpse	r20, r1
     758:	03 c0       	rjmp	.+6      	; 0x760 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
     75a:	f9 01       	movw	r30, r18
     75c:	86 83       	std	Z+6, r24	; 0x06
     75e:	03 c0       	rjmp	.+6      	; 0x766 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
     760:	81 60       	ori	r24, 0x01	; 1
     762:	f9 01       	movw	r30, r18
     764:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
     766:	e8 e9       	ldi	r30, 0x98	; 152
     768:	f0 e2       	ldi	r31, 0x20	; 32
     76a:	92 85       	ldd	r25, Z+10	; 0x0a
     76c:	90 38       	cpi	r25, 0x80	; 128
     76e:	e9 f3       	breq	.-6      	; 0x76a <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     770:	f9 01       	movw	r30, r18
     772:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     774:	83 70       	andi	r24, 0x03	; 3
     776:	81 30       	cpi	r24, 0x01	; 1
     778:	49 f0       	breq	.+18     	; 0x78c <twi_master_transfer+0xac>
     77a:	a8 e9       	ldi	r26, 0x98	; 152
     77c:	b0 e2       	ldi	r27, 0x20	; 32
     77e:	ed 91       	ld	r30, X+
     780:	fc 91       	ld	r31, X
     782:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     784:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     786:	83 70       	andi	r24, 0x03	; 3
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	c9 f7       	brne	.-14     	; 0x77e <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
     78c:	e8 e9       	ldi	r30, 0x98	; 152
     78e:	f0 e2       	ldi	r31, 0x20	; 32
     790:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
     792:	11 86       	std	Z+9, r1	; 0x09
     794:	05 c0       	rjmp	.+10     	; 0x7a0 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
     796:	88 ef       	ldi	r24, 0xF8	; 248
     798:	03 c0       	rjmp	.+6      	; 0x7a0 <twi_master_transfer+0xc0>
     79a:	88 ef       	ldi	r24, 0xF8	; 248
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
     79e:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
     7a0:	0f 90       	pop	r0
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <wdt_reset_mcu>:
uint8_t temp;
	/*
	 * WDT enabled (minimum timeout period for max. security)
	 */
	temp = WDT_PER_8CLK_gc | (1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     7a8:	63 e0       	ldi	r22, 0x03	; 3
     7aa:	80 e8       	ldi	r24, 0x80	; 128
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 e6 18 	call	0x31cc	; 0x31cc <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
     7b2:	e0 e8       	ldi	r30, 0x80	; 128
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	82 81       	ldd	r24, Z+2	; 0x02
     7b8:	80 fd       	sbrc	r24, 0
     7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <wdt_reset_mcu+0xe>
	wdt_wait_while_busy();
	/*
	 * WDT enabled (maximum window period for max. security)
	 */
	temp = WDT_WPER_8KCLK_gc | (1 << WDT_WEN_bp) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
     7bc:	6b e2       	ldi	r22, 0x2B	; 43
     7be:	81 e8       	ldi	r24, 0x81	; 129
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 e6 18 	call	0x31cc	; 0x31cc <ccp_write_io>
     7c6:	e0 e8       	ldi	r30, 0x80	; 128
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	82 81       	ldd	r24, Z+2	; 0x02
     7cc:	80 fd       	sbrc	r24, 0
     7ce:	fd cf       	rjmp	.-6      	; 0x7ca <wdt_reset_mcu+0x22>
	wdt_wait_while_busy();
	/*
	 * WDT Reset during window => WDT generates an Hard Reset.
	 */
	wdt_reset();
     7d0:	a8 95       	wdr
     7d2:	ff cf       	rjmp	.-2      	; 0x7d2 <wdt_reset_mcu+0x2a>

000007d4 <init_gps_interrupts>:
{
	/*	This function will be called once to set up the XBee port for sending/receiving interrupts
		It should not enable interrupts globally, just for receiving and sending on this one port
	*/
//	printf("y u no work");
	GPS_USART.CTRLA = 0b00010100; //RXint low-level, TXint low-level, DREint off;
     7d4:	84 e1       	ldi	r24, 0x14	; 20
     7d6:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
	gpgga_index = 0;
     7da:	10 92 86 24 	sts	0x2486, r1	; 0x802486 <gpgga_index>
	uint8_t dollar_counter = 0;
	uint8_t current_sentence = SENTENCE_NONE;
	last_finished = SENTENCE_NONE;
     7de:	10 92 91 22 	sts	0x2291, r1	; 0x802291 <last_finished>
     7e2:	08 95       	ret

000007e4 <init_gps_buffers>:
}

void init_gps_buffers(void)
/* Don't use the buffers before calling this. Please. It's kind of important. */
{
	rbu8_init(&gps_receive_buffer, RAW_gps_receive_buffer, GPS_RECEIVE_BUFFER_SIZE);
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	51 e0       	ldi	r21, 0x01	; 1
     7e8:	69 ee       	ldi	r22, 0xE9	; 233
     7ea:	72 e2       	ldi	r23, 0x22	; 34
     7ec:	89 e8       	ldi	r24, 0x89	; 137
     7ee:	92 e2       	ldi	r25, 0x22	; 34
     7f0:	0e 94 d7 15 	call	0x2bae	; 0x2bae <rbu8_init>
	rbu8_init(&gps_send_buffer, RAW_gps_send_buffer, GPS_TRANSMIT_BUFFER_SIZE);
     7f4:	40 e4       	ldi	r20, 0x40	; 64
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	69 ee       	ldi	r22, 0xE9	; 233
     7fa:	73 e2       	ldi	r23, 0x23	; 35
     7fc:	89 e2       	ldi	r24, 0x29	; 41
     7fe:	94 e2       	ldi	r25, 0x24	; 36
     800:	0c 94 d7 15 	jmp	0x2bae	; 0x2bae <rbu8_init>
     804:	08 95       	ret

00000806 <__vector_91>:
}

ISR (GPS_RECEIVE_INTERRUPT_VECTOR)
{
     806:	1f 92       	push	r1
     808:	0f 92       	push	r0
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	0f 92       	push	r0
     80e:	11 24       	eor	r1, r1
     810:	08 b6       	in	r0, 0x38	; 56
     812:	0f 92       	push	r0
     814:	18 be       	out	0x38, r1	; 56
     816:	09 b6       	in	r0, 0x39	; 57
     818:	0f 92       	push	r0
     81a:	19 be       	out	0x39, r1	; 57
     81c:	0b b6       	in	r0, 0x3b	; 59
     81e:	0f 92       	push	r0
     820:	1b be       	out	0x3b, r1	; 59
     822:	2f 93       	push	r18
     824:	8f 93       	push	r24
     826:	9f 93       	push	r25
     828:	af 93       	push	r26
     82a:	bf 93       	push	r27
     82c:	ef 93       	push	r30
     82e:	ff 93       	push	r31
		It should not have any code that waits for anything. Examples include
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	uint8_t c = GPS_USART.DATA;
     830:	90 91 b0 09 	lds	r25, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	//printf("%c", c);
	//putchar(c);
	//putchar(c);
	if (current_sentence == SENTENCE_GPGGA)
     834:	80 91 e8 22 	lds	r24, 0x22E8	; 0x8022e8 <current_sentence>
     838:	81 30       	cpi	r24, 0x01	; 1
     83a:	51 f4       	brne	.+20     	; 0x850 <__vector_91+0x4a>
	{
		gpgga_buff[gpgga_index] = c;
     83c:	20 91 86 24 	lds	r18, 0x2486	; 0x802486 <gpgga_index>
     840:	e2 2f       	mov	r30, r18
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	ef 5c       	subi	r30, 0xCF	; 207
     846:	fb 4d       	sbci	r31, 0xDB	; 219
     848:	90 83       	st	Z, r25
		gpgga_index++;
     84a:	2f 5f       	subi	r18, 0xFF	; 255
     84c:	20 93 86 24 	sts	0x2486, r18	; 0x802486 <gpgga_index>
		//printf("GPGGA %i = %i\n", gpgga_index, gpgga_buff[gpgga_index]);
	}	
	
	if (c == '\n')
     850:	9a 30       	cpi	r25, 0x0A	; 10
     852:	39 f4       	brne	.+14     	; 0x862 <__vector_91+0x5c>
	{
		last_finished = current_sentence;
     854:	80 93 91 22 	sts	0x2291, r24	; 0x802291 <last_finished>
		current_sentence = SENTENCE_NONE;
     858:	10 92 e8 22 	sts	0x22E8, r1	; 0x8022e8 <current_sentence>
		dollar_counter = 0;
     85c:	10 92 88 22 	sts	0x2288, r1	; 0x802288 <dollar_counter>
     860:	23 c0       	rjmp	.+70     	; 0x8a8 <__vector_91+0xa2>
	}
	else if (c == '$' && current_sentence == SENTENCE_NONE)
     862:	94 32       	cpi	r25, 0x24	; 36
     864:	11 f4       	brne	.+4      	; 0x86a <__vector_91+0x64>
     866:	88 23       	and	r24, r24
     868:	d9 f0       	breq	.+54     	; 0x8a0 <__vector_91+0x9a>
	{
		dollar_counter = 1;
	}
	
	if (dollar_counter > 0)
     86a:	80 91 88 22 	lds	r24, 0x2288	; 0x802288 <dollar_counter>
     86e:	88 23       	and	r24, r24
     870:	d9 f0       	breq	.+54     	; 0x8a8 <__vector_91+0xa2>
	{
		if (dollar_counter == 5 && c == 'G' )
     872:	85 30       	cpi	r24, 0x05	; 5
     874:	b1 f4       	brne	.+44     	; 0x8a2 <__vector_91+0x9c>
     876:	97 34       	cpi	r25, 0x47	; 71
     878:	a1 f4       	brne	.+40     	; 0x8a2 <__vector_91+0x9c>
		{
			current_sentence= SENTENCE_GPGGA;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	80 93 e8 22 	sts	0x22E8, r24	; 0x8022e8 <current_sentence>
			memcpy(gpgga_buff, "$GPGG", 5);
     880:	85 e0       	ldi	r24, 0x05	; 5
     882:	e0 e4       	ldi	r30, 0x40	; 64
     884:	f0 e2       	ldi	r31, 0x20	; 32
     886:	a1 e3       	ldi	r26, 0x31	; 49
     888:	b4 e2       	ldi	r27, 0x24	; 36
     88a:	01 90       	ld	r0, Z+
     88c:	0d 92       	st	X+, r0
     88e:	8a 95       	dec	r24
     890:	e1 f7       	brne	.-8      	; 0x88a <__vector_91+0x84>
			gpgga_index = 5;
     892:	85 e0       	ldi	r24, 0x05	; 5
     894:	80 93 86 24 	sts	0x2486, r24	; 0x802486 <gpgga_index>
			dollar_counter++;
     898:	86 e0       	ldi	r24, 0x06	; 6
     89a:	80 93 88 22 	sts	0x2288, r24	; 0x802288 <dollar_counter>
     89e:	04 c0       	rjmp	.+8      	; 0x8a8 <__vector_91+0xa2>
	else if (c == '$' && current_sentence == SENTENCE_NONE)
	{
		dollar_counter = 1;
	}
	
	if (dollar_counter > 0)
     8a0:	81 e0       	ldi	r24, 0x01	; 1
			gpgga_index = 5;
			dollar_counter++;
		}
		else
		{
			dollar_counter++;
     8a2:	8f 5f       	subi	r24, 0xFF	; 255
     8a4:	80 93 88 22 	sts	0x2288, r24	; 0x802288 <dollar_counter>
		}
	}
	//printf("Interrupt Executed.\n");
	//rbu8_write(&gps_receive_buffer, &(GPS_USART.DATA), 1);
}
     8a8:	ff 91       	pop	r31
     8aa:	ef 91       	pop	r30
     8ac:	bf 91       	pop	r27
     8ae:	af 91       	pop	r26
     8b0:	9f 91       	pop	r25
     8b2:	8f 91       	pop	r24
     8b4:	2f 91       	pop	r18
     8b6:	0f 90       	pop	r0
     8b8:	0b be       	out	0x3b, r0	; 59
     8ba:	0f 90       	pop	r0
     8bc:	09 be       	out	0x39, r0	; 57
     8be:	0f 90       	pop	r0
     8c0:	08 be       	out	0x38, r0	; 56
     8c2:	0f 90       	pop	r0
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	0f 90       	pop	r0
     8c8:	1f 90       	pop	r1
     8ca:	18 95       	reti

000008cc <__vector_93>:

ISR (GPS_SEND_INTERRUPT_VECTOR)
{
     8cc:	1f 92       	push	r1
     8ce:	0f 92       	push	r0
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	0f 92       	push	r0
     8d4:	11 24       	eor	r1, r1
     8d6:	08 b6       	in	r0, 0x38	; 56
     8d8:	0f 92       	push	r0
     8da:	18 be       	out	0x38, r1	; 56
     8dc:	09 b6       	in	r0, 0x39	; 57
     8de:	0f 92       	push	r0
     8e0:	19 be       	out	0x39, r1	; 57
     8e2:	0b b6       	in	r0, 0x3b	; 59
     8e4:	0f 92       	push	r0
     8e6:	1b be       	out	0x3b, r1	; 59
     8e8:	2f 93       	push	r18
     8ea:	3f 93       	push	r19
     8ec:	4f 93       	push	r20
     8ee:	5f 93       	push	r21
     8f0:	6f 93       	push	r22
     8f2:	7f 93       	push	r23
     8f4:	8f 93       	push	r24
     8f6:	9f 93       	push	r25
     8f8:	af 93       	push	r26
     8fa:	bf 93       	push	r27
     8fc:	ef 93       	push	r30
     8fe:	ff 93       	push	r31
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	
  rbu8_read(&gps_send_buffer, &(GPS_USART.DATA), 1);
     900:	41 e0       	ldi	r20, 0x01	; 1
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	60 eb       	ldi	r22, 0xB0	; 176
     906:	79 e0       	ldi	r23, 0x09	; 9
     908:	89 e2       	ldi	r24, 0x29	; 41
     90a:	94 e2       	ldi	r25, 0x24	; 36
     90c:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <rbu8_read>
  rbu8_delete_oldest(&gps_send_buffer, 1);
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	89 e2       	ldi	r24, 0x29	; 41
     916:	94 e2       	ldi	r25, 0x24	; 36
     918:	0e 94 43 16 	call	0x2c86	; 0x2c86 <rbu8_delete_oldest>
     91c:	ff 91       	pop	r31
     91e:	ef 91       	pop	r30
     920:	bf 91       	pop	r27
     922:	af 91       	pop	r26
     924:	9f 91       	pop	r25
     926:	8f 91       	pop	r24
     928:	7f 91       	pop	r23
     92a:	6f 91       	pop	r22
     92c:	5f 91       	pop	r21
     92e:	4f 91       	pop	r20
     930:	3f 91       	pop	r19
     932:	2f 91       	pop	r18
     934:	0f 90       	pop	r0
     936:	0b be       	out	0x3b, r0	; 59
     938:	0f 90       	pop	r0
     93a:	09 be       	out	0x39, r0	; 57
     93c:	0f 90       	pop	r0
     93e:	08 be       	out	0x38, r0	; 56
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <init_imu>:
}

bool imu_is_data_ready(void)
{
	return (bool)is_data_rdy();
}
     94a:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <imu>
     94e:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <imu+0x1>
     952:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <imu+0x2>
     956:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <imu+0x3>
     95a:	44 e6       	ldi	r20, 0x64	; 100
     95c:	0c 94 c3 20 	jmp	0x4186	; 0x4186 <init_mpu9250>
     960:	08 95       	ret

00000962 <imu_update>:

imu_data_t imu_update(uint16_t cycles)
{
     962:	2f 92       	push	r2
     964:	3f 92       	push	r3
     966:	4f 92       	push	r4
     968:	5f 92       	push	r5
     96a:	6f 92       	push	r6
     96c:	7f 92       	push	r7
     96e:	8f 92       	push	r8
     970:	9f 92       	push	r9
     972:	af 92       	push	r10
     974:	bf 92       	push	r11
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	eb 97       	sbiw	r28, 0x3b	; 59
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	de bf       	out	0x3e, r29	; 62
     990:	8a a3       	std	Y+34, r24	; 0x22
     992:	9b a3       	std	Y+35, r25	; 0x23
// 	if(cycles % MPU_UPDATE_DIV == 0)
// 	{
 		data = read_mpu9250(imu);
     994:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <imu>
     998:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <imu+0x1>
     99c:	60 91 08 20 	lds	r22, 0x2008	; 0x802008 <imu+0x2>
     9a0:	70 91 09 20 	lds	r23, 0x2009	; 0x802009 <imu+0x3>
     9a4:	ce 01       	movw	r24, r28
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	0e 94 fb 20 	call	0x41f6	; 0x41f6 <read_mpu9250>
     9ac:	85 e1       	ldi	r24, 0x15	; 21
     9ae:	fe 01       	movw	r30, r28
     9b0:	31 96       	adiw	r30, 0x01	; 1
     9b2:	a8 e8       	ldi	r26, 0x88	; 136
     9b4:	b4 e2       	ldi	r27, 0x24	; 36
     9b6:	01 90       	ld	r0, Z+
     9b8:	0d 92       	st	X+, r0
     9ba:	8a 95       	dec	r24
     9bc:	e1 f7       	brne	.-8      	; 0x9b6 <imu_update+0x54>
	
	//printf("Acc Data: %i %i %i\n", data.acc_x, data.acc_y, data.acc_z);
	//printf("%i, %i, %i\n", data.gyro_x, data.gyro_y, data.gyro_z);
	
	
	data.gyro_x -= -21;
     9be:	0f 2e       	mov	r0, r31
     9c0:	f8 e8       	ldi	r31, 0x88	; 136
     9c2:	2f 2e       	mov	r2, r31
     9c4:	f4 e2       	ldi	r31, 0x24	; 36
     9c6:	3f 2e       	mov	r3, r31
     9c8:	f0 2d       	mov	r31, r0
     9ca:	f1 01       	movw	r30, r2
     9cc:	01 85       	ldd	r16, Z+9	; 0x09
     9ce:	12 85       	ldd	r17, Z+10	; 0x0a
     9d0:	0b 5e       	subi	r16, 0xEB	; 235
     9d2:	1f 4f       	sbci	r17, 0xFF	; 255
     9d4:	01 87       	std	Z+9, r16	; 0x09
     9d6:	12 87       	std	Z+10, r17	; 0x0a
	data.gyro_y -= 4.4;
     9d8:	63 85       	ldd	r22, Z+11	; 0x0b
     9da:	74 85       	ldd	r23, Z+12	; 0x0c
     9dc:	07 2e       	mov	r0, r23
     9de:	00 0c       	add	r0, r0
     9e0:	88 0b       	sbc	r24, r24
     9e2:	99 0b       	sbc	r25, r25
     9e4:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     9e8:	2d ec       	ldi	r18, 0xCD	; 205
     9ea:	3c ec       	ldi	r19, 0xCC	; 204
     9ec:	4c e8       	ldi	r20, 0x8C	; 140
     9ee:	50 e4       	ldi	r21, 0x40	; 64
     9f0:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
     9f4:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__fixsfsi>
     9f8:	2b 01       	movw	r4, r22
     9fa:	3c 01       	movw	r6, r24
     9fc:	f1 01       	movw	r30, r2
     9fe:	63 87       	std	Z+11, r22	; 0x0b
     a00:	74 87       	std	Z+12, r23	; 0x0c
	data.gyro_z -= -11.5;
     a02:	65 85       	ldd	r22, Z+13	; 0x0d
     a04:	76 85       	ldd	r23, Z+14	; 0x0e
     a06:	07 2e       	mov	r0, r23
     a08:	00 0c       	add	r0, r0
     a0a:	88 0b       	sbc	r24, r24
     a0c:	99 0b       	sbc	r25, r25
     a0e:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	48 e3       	ldi	r20, 0x38	; 56
     a18:	51 e4       	ldi	r21, 0x41	; 65
     a1a:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     a1e:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__fixsfsi>
     a22:	6e 8f       	std	Y+30, r22	; 0x1e
     a24:	7f 8f       	std	Y+31, r23	; 0x1f
     a26:	88 a3       	std	Y+32, r24	; 0x20
     a28:	99 a3       	std	Y+33, r25	; 0x21
     a2a:	ee 8c       	ldd	r14, Y+30	; 0x1e
     a2c:	ff 8c       	ldd	r15, Y+31	; 0x1f
     a2e:	f1 01       	movw	r30, r2
     a30:	e5 86       	std	Z+13, r14	; 0x0d
     a32:	f6 86       	std	Z+14, r15	; 0x0e
	
	MahonyAHRSupdate(	mapdouble((double)data.gyro_x+(GYR_X_OFF), -32768.0, 32767.0, -2000, 2000),
     a34:	61 81       	ldd	r22, Z+1	; 0x01
     a36:	72 81       	ldd	r23, Z+2	; 0x02
     a38:	07 2e       	mov	r0, r23
     a3a:	00 0c       	add	r0, r0
     a3c:	88 0b       	sbc	r24, r24
     a3e:	99 0b       	sbc	r25, r25
     a40:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     a44:	6b 01       	movw	r12, r22
     a46:	7c 01       	movw	r14, r24
     a48:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <ACC_X_OFF>
     a4c:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <ACC_X_OFF+0x1>
     a50:	07 2e       	mov	r0, r23
     a52:	00 0c       	add	r0, r0
     a54:	88 0b       	sbc	r24, r24
     a56:	99 0b       	sbc	r25, r25
     a58:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     a5c:	9b 01       	movw	r18, r22
     a5e:	ac 01       	movw	r20, r24
     a60:	c7 01       	movw	r24, r14
     a62:	b6 01       	movw	r22, r12
     a64:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     a68:	5b 01       	movw	r10, r22
     a6a:	6c 01       	movw	r12, r24
     a6c:	60 91 a3 20 	lds	r22, 0x20A3	; 0x8020a3 <GYR_Z_OFF>
     a70:	70 91 a4 20 	lds	r23, 0x20A4	; 0x8020a4 <GYR_Z_OFF+0x1>
     a74:	07 2e       	mov	r0, r23
     a76:	00 0c       	add	r0, r0
     a78:	88 0b       	sbc	r24, r24
     a7a:	99 0b       	sbc	r25, r25
     a7c:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     a80:	6a 8f       	std	Y+26, r22	; 0x1a
     a82:	7b 8f       	std	Y+27, r23	; 0x1b
     a84:	8c 8f       	std	Y+28, r24	; 0x1c
     a86:	9d 8f       	std	Y+29, r25	; 0x1d
     a88:	2e 8d       	ldd	r18, Y+30	; 0x1e
     a8a:	3f 8d       	ldd	r19, Y+31	; 0x1f
     a8c:	b9 01       	movw	r22, r18
     a8e:	33 0f       	add	r19, r19
     a90:	88 0b       	sbc	r24, r24
     a92:	99 0b       	sbc	r25, r25
     a94:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     a98:	9b 01       	movw	r18, r22
     a9a:	ac 01       	movw	r20, r24
     a9c:	6a 8d       	ldd	r22, Y+26	; 0x1a
     a9e:	7b 8d       	ldd	r23, Y+27	; 0x1b
     aa0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     aa2:	9d 8d       	ldd	r25, Y+29	; 0x1d
     aa4:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     aa8:	20 e0       	ldi	r18, 0x00	; 0
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	57 e4       	ldi	r21, 0x47	; 71
     ab0:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	4a e7       	ldi	r20, 0x7A	; 122
     aba:	55 e4       	ldi	r21, 0x45	; 69
     abc:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	3f ef       	ldi	r19, 0xFF	; 255
     ac4:	4f e7       	ldi	r20, 0x7F	; 127
     ac6:	57 e4       	ldi	r21, 0x47	; 71
     ac8:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	4a ef       	ldi	r20, 0xFA	; 250
     ad2:	54 e4       	ldi	r21, 0x44	; 68
     ad4:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
     ad8:	6e 8f       	std	Y+30, r22	; 0x1e
     ada:	7f 8f       	std	Y+31, r23	; 0x1f
     adc:	88 a3       	std	Y+32, r24	; 0x20
     ade:	99 a3       	std	Y+33, r25	; 0x21
     ae0:	60 91 a5 20 	lds	r22, 0x20A5	; 0x8020a5 <GYR_Y_OFF>
     ae4:	70 91 a6 20 	lds	r23, 0x20A6	; 0x8020a6 <GYR_Y_OFF+0x1>
     ae8:	07 2e       	mov	r0, r23
     aea:	00 0c       	add	r0, r0
     aec:	88 0b       	sbc	r24, r24
     aee:	99 0b       	sbc	r25, r25
     af0:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     af4:	6a 8f       	std	Y+26, r22	; 0x1a
     af6:	7b 8f       	std	Y+27, r23	; 0x1b
     af8:	8c 8f       	std	Y+28, r24	; 0x1c
     afa:	9d 8f       	std	Y+29, r25	; 0x1d
     afc:	b2 01       	movw	r22, r4
     afe:	55 0c       	add	r5, r5
     b00:	88 0b       	sbc	r24, r24
     b02:	99 0b       	sbc	r25, r25
     b04:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     b08:	9b 01       	movw	r18, r22
     b0a:	ac 01       	movw	r20, r24
     b0c:	6a 8d       	ldd	r22, Y+26	; 0x1a
     b0e:	7b 8d       	ldd	r23, Y+27	; 0x1b
     b10:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b12:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b14:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	57 e4       	ldi	r21, 0x47	; 71
     b20:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	4a e7       	ldi	r20, 0x7A	; 122
     b2a:	55 e4       	ldi	r21, 0x45	; 69
     b2c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	4f e7       	ldi	r20, 0x7F	; 127
     b36:	57 e4       	ldi	r21, 0x47	; 71
     b38:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	4a ef       	ldi	r20, 0xFA	; 250
     b42:	54 e4       	ldi	r21, 0x44	; 68
     b44:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
     b48:	6a 8f       	std	Y+26, r22	; 0x1a
     b4a:	7b 8f       	std	Y+27, r23	; 0x1b
     b4c:	8c 8f       	std	Y+28, r24	; 0x1c
     b4e:	9d 8f       	std	Y+29, r25	; 0x1d
     b50:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <GYR_X_OFF>
     b54:	70 91 0b 20 	lds	r23, 0x200B	; 0x80200b <GYR_X_OFF+0x1>
     b58:	07 2e       	mov	r0, r23
     b5a:	00 0c       	add	r0, r0
     b5c:	88 0b       	sbc	r24, r24
     b5e:	99 0b       	sbc	r25, r25
     b60:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     b64:	2b 01       	movw	r4, r22
     b66:	3c 01       	movw	r6, r24
     b68:	b8 01       	movw	r22, r16
     b6a:	11 0f       	add	r17, r17
     b6c:	88 0b       	sbc	r24, r24
     b6e:	99 0b       	sbc	r25, r25
     b70:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     b74:	9b 01       	movw	r18, r22
     b76:	ac 01       	movw	r20, r24
     b78:	c3 01       	movw	r24, r6
     b7a:	b2 01       	movw	r22, r4
     b7c:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     b80:	20 e0       	ldi	r18, 0x00	; 0
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	40 e0       	ldi	r20, 0x00	; 0
     b86:	57 e4       	ldi	r21, 0x47	; 71
     b88:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	4a e7       	ldi	r20, 0x7A	; 122
     b92:	55 e4       	ldi	r21, 0x45	; 69
     b94:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	3f ef       	ldi	r19, 0xFF	; 255
     b9c:	4f e7       	ldi	r20, 0x7F	; 127
     b9e:	57 e4       	ldi	r21, 0x47	; 71
     ba0:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	4a ef       	ldi	r20, 0xFA	; 250
     baa:	54 e4       	ldi	r21, 0x44	; 68
     bac:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
     bb0:	2b 01       	movw	r4, r22
     bb2:	3c 01       	movw	r6, r24
     bb4:	f1 01       	movw	r30, r2
     bb6:	63 89       	ldd	r22, Z+19	; 0x13
     bb8:	74 89       	ldd	r23, Z+20	; 0x14
     bba:	07 2e       	mov	r0, r23
     bbc:	00 0c       	add	r0, r0
     bbe:	88 0b       	sbc	r24, r24
     bc0:	99 0b       	sbc	r25, r25
     bc2:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     bc6:	6e 8b       	std	Y+22, r22	; 0x16
     bc8:	7f 8b       	std	Y+23, r23	; 0x17
     bca:	88 8f       	std	Y+24, r24	; 0x18
     bcc:	99 8f       	std	Y+25, r25	; 0x19
     bce:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <MAG_Z_OFF>
     bd2:	70 91 13 20 	lds	r23, 0x2013	; 0x802013 <MAG_Z_OFF+0x1>
     bd6:	07 2e       	mov	r0, r23
     bd8:	00 0c       	add	r0, r0
     bda:	88 0b       	sbc	r24, r24
     bdc:	99 0b       	sbc	r25, r25
     bde:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     be2:	9b 01       	movw	r18, r22
     be4:	ac 01       	movw	r20, r24
     be6:	6e 89       	ldd	r22, Y+22	; 0x16
     be8:	7f 89       	ldd	r23, Y+23	; 0x17
     bea:	88 8d       	ldd	r24, Y+24	; 0x18
     bec:	99 8d       	ldd	r25, Y+25	; 0x19
     bee:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     bf2:	dc 01       	movw	r26, r24
     bf4:	cb 01       	movw	r24, r22
     bf6:	b0 58       	subi	r27, 0x80	; 128
     bf8:	bf 93       	push	r27
     bfa:	af 93       	push	r26
     bfc:	9f 93       	push	r25
     bfe:	8f 93       	push	r24
     c00:	f1 01       	movw	r30, r2
     c02:	67 85       	ldd	r22, Z+15	; 0x0f
     c04:	70 89       	ldd	r23, Z+16	; 0x10
     c06:	07 2e       	mov	r0, r23
     c08:	00 0c       	add	r0, r0
     c0a:	88 0b       	sbc	r24, r24
     c0c:	99 0b       	sbc	r25, r25
     c0e:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     c12:	6e 8b       	std	Y+22, r22	; 0x16
     c14:	7f 8b       	std	Y+23, r23	; 0x17
     c16:	88 8f       	std	Y+24, r24	; 0x18
     c18:	99 8f       	std	Y+25, r25	; 0x19
     c1a:	60 91 16 20 	lds	r22, 0x2016	; 0x802016 <MAG_X_OFF>
     c1e:	70 91 17 20 	lds	r23, 0x2017	; 0x802017 <MAG_X_OFF+0x1>
     c22:	07 2e       	mov	r0, r23
     c24:	00 0c       	add	r0, r0
     c26:	88 0b       	sbc	r24, r24
     c28:	99 0b       	sbc	r25, r25
     c2a:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     c2e:	9b 01       	movw	r18, r22
     c30:	ac 01       	movw	r20, r24
     c32:	6e 89       	ldd	r22, Y+22	; 0x16
     c34:	7f 89       	ldd	r23, Y+23	; 0x17
     c36:	88 8d       	ldd	r24, Y+24	; 0x18
     c38:	99 8d       	ldd	r25, Y+25	; 0x19
     c3a:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     c3e:	9f 93       	push	r25
     c40:	8f 93       	push	r24
     c42:	7f 93       	push	r23
     c44:	6f 93       	push	r22
     c46:	f1 01       	movw	r30, r2
     c48:	61 89       	ldd	r22, Z+17	; 0x11
     c4a:	72 89       	ldd	r23, Z+18	; 0x12
     c4c:	07 2e       	mov	r0, r23
     c4e:	00 0c       	add	r0, r0
     c50:	88 0b       	sbc	r24, r24
     c52:	99 0b       	sbc	r25, r25
     c54:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     c58:	6e 8b       	std	Y+22, r22	; 0x16
     c5a:	7f 8b       	std	Y+23, r23	; 0x17
     c5c:	88 8f       	std	Y+24, r24	; 0x18
     c5e:	99 8f       	std	Y+25, r25	; 0x19
     c60:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <MAG_Y_OFF>
     c64:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <MAG_Y_OFF+0x1>
     c68:	07 2e       	mov	r0, r23
     c6a:	00 0c       	add	r0, r0
     c6c:	88 0b       	sbc	r24, r24
     c6e:	99 0b       	sbc	r25, r25
     c70:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     c74:	9b 01       	movw	r18, r22
     c76:	ac 01       	movw	r20, r24
     c78:	6e 89       	ldd	r22, Y+22	; 0x16
     c7a:	7f 89       	ldd	r23, Y+23	; 0x17
     c7c:	88 8d       	ldd	r24, Y+24	; 0x18
     c7e:	99 8d       	ldd	r25, Y+25	; 0x19
     c80:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     c84:	9f 93       	push	r25
     c86:	8f 93       	push	r24
     c88:	7f 93       	push	r23
     c8a:	6f 93       	push	r22
     c8c:	f1 01       	movw	r30, r2
     c8e:	65 81       	ldd	r22, Z+5	; 0x05
     c90:	76 81       	ldd	r23, Z+6	; 0x06
     c92:	07 2e       	mov	r0, r23
     c94:	00 0c       	add	r0, r0
     c96:	88 0b       	sbc	r24, r24
     c98:	99 0b       	sbc	r25, r25
     c9a:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     c9e:	6e 8b       	std	Y+22, r22	; 0x16
     ca0:	7f 8b       	std	Y+23, r23	; 0x17
     ca2:	88 8f       	std	Y+24, r24	; 0x18
     ca4:	99 8f       	std	Y+25, r25	; 0x19
     ca6:	60 91 0c 20 	lds	r22, 0x200C	; 0x80200c <ACC_Z_OFF>
     caa:	70 91 0d 20 	lds	r23, 0x200D	; 0x80200d <ACC_Z_OFF+0x1>
     cae:	07 2e       	mov	r0, r23
     cb0:	00 0c       	add	r0, r0
     cb2:	88 0b       	sbc	r24, r24
     cb4:	99 0b       	sbc	r25, r25
     cb6:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     cba:	9b 01       	movw	r18, r22
     cbc:	ac 01       	movw	r20, r24
     cbe:	6e 89       	ldd	r22, Y+22	; 0x16
     cc0:	7f 89       	ldd	r23, Y+23	; 0x17
     cc2:	88 8d       	ldd	r24, Y+24	; 0x18
     cc4:	99 8d       	ldd	r25, Y+25	; 0x19
     cc6:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     cca:	9f 93       	push	r25
     ccc:	8f 93       	push	r24
     cce:	7f 93       	push	r23
     cd0:	6f 93       	push	r22
     cd2:	f1 01       	movw	r30, r2
     cd4:	63 81       	ldd	r22, Z+3	; 0x03
     cd6:	74 81       	ldd	r23, Z+4	; 0x04
     cd8:	07 2e       	mov	r0, r23
     cda:	00 0c       	add	r0, r0
     cdc:	88 0b       	sbc	r24, r24
     cde:	99 0b       	sbc	r25, r25
     ce0:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     ce4:	6e 8b       	std	Y+22, r22	; 0x16
     ce6:	7f 8b       	std	Y+23, r23	; 0x17
     ce8:	88 8f       	std	Y+24, r24	; 0x18
     cea:	99 8f       	std	Y+25, r25	; 0x19
     cec:	60 91 0e 20 	lds	r22, 0x200E	; 0x80200e <ACC_Y_OFF>
     cf0:	70 91 0f 20 	lds	r23, 0x200F	; 0x80200f <ACC_Y_OFF+0x1>
     cf4:	07 2e       	mov	r0, r23
     cf6:	00 0c       	add	r0, r0
     cf8:	88 0b       	sbc	r24, r24
     cfa:	99 0b       	sbc	r25, r25
     cfc:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     d00:	9b 01       	movw	r18, r22
     d02:	ac 01       	movw	r20, r24
     d04:	6e 89       	ldd	r22, Y+22	; 0x16
     d06:	7f 89       	ldd	r23, Y+23	; 0x17
     d08:	88 8d       	ldd	r24, Y+24	; 0x18
     d0a:	99 8d       	ldd	r25, Y+25	; 0x19
     d0c:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     d10:	9f 93       	push	r25
     d12:	8f 93       	push	r24
     d14:	7f 93       	push	r23
     d16:	6f 93       	push	r22
     d18:	ee 8c       	ldd	r14, Y+30	; 0x1e
     d1a:	ff 8c       	ldd	r15, Y+31	; 0x1f
     d1c:	08 a1       	ldd	r16, Y+32	; 0x20
     d1e:	19 a1       	ldd	r17, Y+33	; 0x21
     d20:	2a 8d       	ldd	r18, Y+26	; 0x1a
     d22:	3b 8d       	ldd	r19, Y+27	; 0x1b
     d24:	4c 8d       	ldd	r20, Y+28	; 0x1c
     d26:	5d 8d       	ldd	r21, Y+29	; 0x1d
     d28:	c3 01       	movw	r24, r6
     d2a:	b2 01       	movw	r22, r4
     d2c:	08 d7       	rcall	.+3600   	; 0x1b3e <MahonyAHRSupdate>
						(double)data.mag_y+(MAG_Y_OFF), (double)data.mag_x+(MAG_X_OFF), -((double)data.mag_z+(MAG_Z_OFF)));

	
	
	imu_data_t imudata;					
	imudata.yaw   = atan2(2.0 * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);
     d2e:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
     d32:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
     d36:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
     d3a:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
     d3e:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <q0>
     d42:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <q0+0x1>
     d46:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <q0+0x2>
     d4a:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <q0+0x3>
     d4e:	80 90 bb 20 	lds	r8, 0x20BB	; 0x8020bb <q1>
     d52:	90 90 bc 20 	lds	r9, 0x20BC	; 0x8020bc <q1+0x1>
     d56:	a0 90 bd 20 	lds	r10, 0x20BD	; 0x8020bd <q1+0x2>
     d5a:	b0 90 be 20 	lds	r11, 0x20BE	; 0x8020be <q1+0x3>
     d5e:	40 90 bb 20 	lds	r4, 0x20BB	; 0x8020bb <q1>
     d62:	50 90 bc 20 	lds	r5, 0x20BC	; 0x8020bc <q1+0x1>
     d66:	60 90 bd 20 	lds	r6, 0x20BD	; 0x8020bd <q1+0x2>
     d6a:	70 90 be 20 	lds	r7, 0x20BE	; 0x8020be <q1+0x3>
     d6e:	e0 90 b7 20 	lds	r14, 0x20B7	; 0x8020b7 <q2>
     d72:	f0 90 b8 20 	lds	r15, 0x20B8	; 0x8020b8 <q2+0x1>
     d76:	00 91 b9 20 	lds	r16, 0x20B9	; 0x8020b9 <q2+0x2>
     d7a:	10 91 ba 20 	lds	r17, 0x20BA	; 0x8020ba <q2+0x3>
     d7e:	ee 8e       	std	Y+30, r14	; 0x1e
     d80:	ff 8e       	std	Y+31, r15	; 0x1f
     d82:	08 a3       	std	Y+32, r16	; 0x20
     d84:	19 a3       	std	Y+33, r17	; 0x21
     d86:	e0 90 b7 20 	lds	r14, 0x20B7	; 0x8020b7 <q2>
     d8a:	f0 90 b8 20 	lds	r15, 0x20B8	; 0x8020b8 <q2+0x1>
     d8e:	00 91 b9 20 	lds	r16, 0x20B9	; 0x8020b9 <q2+0x2>
     d92:	10 91 ba 20 	lds	r17, 0x20BA	; 0x8020ba <q2+0x3>
     d96:	ea 8e       	std	Y+26, r14	; 0x1a
     d98:	fb 8e       	std	Y+27, r15	; 0x1b
     d9a:	0c 8f       	std	Y+28, r16	; 0x1c
     d9c:	1d 8f       	std	Y+29, r17	; 0x1d
     d9e:	e0 90 b3 20 	lds	r14, 0x20B3	; 0x8020b3 <q3>
     da2:	f0 90 b4 20 	lds	r15, 0x20B4	; 0x8020b4 <q3+0x1>
     da6:	00 91 b5 20 	lds	r16, 0x20B5	; 0x8020b5 <q3+0x2>
     daa:	10 91 b6 20 	lds	r17, 0x20B6	; 0x8020b6 <q3+0x3>
     dae:	ee 8a       	std	Y+22, r14	; 0x16
     db0:	ff 8a       	std	Y+23, r15	; 0x17
     db2:	08 8f       	std	Y+24, r16	; 0x18
     db4:	19 8f       	std	Y+25, r17	; 0x19
     db6:	e0 90 b3 20 	lds	r14, 0x20B3	; 0x8020b3 <q3>
     dba:	f0 90 b4 20 	lds	r15, 0x20B4	; 0x8020b4 <q3+0x1>
     dbe:	00 91 b5 20 	lds	r16, 0x20B5	; 0x8020b5 <q3+0x2>
     dc2:	10 91 b6 20 	lds	r17, 0x20B6	; 0x8020b6 <q3+0x3>
     dc6:	ec a2       	std	Y+36, r14	; 0x24
     dc8:	fd a2       	std	Y+37, r15	; 0x25
     dca:	0e a3       	std	Y+38, r16	; 0x26
     dcc:	1f a3       	std	Y+39, r17	; 0x27
     dce:	e0 90 bb 20 	lds	r14, 0x20BB	; 0x8020bb <q1>
     dd2:	f0 90 bc 20 	lds	r15, 0x20BC	; 0x8020bc <q1+0x1>
     dd6:	00 91 bd 20 	lds	r16, 0x20BD	; 0x8020bd <q1+0x2>
     dda:	10 91 be 20 	lds	r17, 0x20BE	; 0x8020be <q1+0x3>
     dde:	e8 a6       	std	Y+40, r14	; 0x28
     de0:	f9 a6       	std	Y+41, r15	; 0x29
     de2:	0a a7       	std	Y+42, r16	; 0x2a
     de4:	1b a7       	std	Y+43, r17	; 0x2b
     de6:	e0 90 b7 20 	lds	r14, 0x20B7	; 0x8020b7 <q2>
     dea:	f0 90 b8 20 	lds	r15, 0x20B8	; 0x8020b8 <q2+0x1>
     dee:	00 91 b9 20 	lds	r16, 0x20B9	; 0x8020b9 <q2+0x2>
     df2:	10 91 ba 20 	lds	r17, 0x20BA	; 0x8020ba <q2+0x3>
     df6:	ec a6       	std	Y+44, r14	; 0x2c
     df8:	fd a6       	std	Y+45, r15	; 0x2d
     dfa:	0e a7       	std	Y+46, r16	; 0x2e
     dfc:	1f a7       	std	Y+47, r17	; 0x2f
     dfe:	e0 90 18 20 	lds	r14, 0x2018	; 0x802018 <q0>
     e02:	f0 90 19 20 	lds	r15, 0x2019	; 0x802019 <q0+0x1>
     e06:	00 91 1a 20 	lds	r16, 0x201A	; 0x80201a <q0+0x2>
     e0a:	10 91 1b 20 	lds	r17, 0x201B	; 0x80201b <q0+0x3>
     e0e:	e8 ae       	std	Y+56, r14	; 0x38
     e10:	f9 ae       	std	Y+57, r15	; 0x39
     e12:	0a af       	std	Y+58, r16	; 0x3a
     e14:	1b af       	std	Y+59, r17	; 0x3b
     e16:	e0 90 b3 20 	lds	r14, 0x20B3	; 0x8020b3 <q3>
     e1a:	f0 90 b4 20 	lds	r15, 0x20B4	; 0x8020b4 <q3+0x1>
     e1e:	00 91 b5 20 	lds	r16, 0x20B5	; 0x8020b5 <q3+0x2>
     e22:	10 91 b6 20 	lds	r17, 0x20B6	; 0x8020b6 <q3+0x3>
     e26:	e8 aa       	std	Y+48, r14	; 0x30
     e28:	f9 aa       	std	Y+49, r15	; 0x31
     e2a:	0a ab       	std	Y+50, r16	; 0x32
     e2c:	1b ab       	std	Y+51, r17	; 0x33
     e2e:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
     e32:	6b 01       	movw	r12, r22
     e34:	7c 01       	movw	r14, r24
     e36:	a3 01       	movw	r20, r6
     e38:	92 01       	movw	r18, r4
     e3a:	c5 01       	movw	r24, r10
     e3c:	b4 01       	movw	r22, r8
     e3e:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
     e42:	9b 01       	movw	r18, r22
     e44:	ac 01       	movw	r20, r24
     e46:	c7 01       	movw	r24, r14
     e48:	b6 01       	movw	r22, r12
     e4a:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     e4e:	4b 01       	movw	r8, r22
     e50:	5c 01       	movw	r10, r24
     e52:	2a 8d       	ldd	r18, Y+26	; 0x1a
     e54:	3b 8d       	ldd	r19, Y+27	; 0x1b
     e56:	4c 8d       	ldd	r20, Y+28	; 0x1c
     e58:	5d 8d       	ldd	r21, Y+29	; 0x1d
     e5a:	6e 8d       	ldd	r22, Y+30	; 0x1e
     e5c:	7f 8d       	ldd	r23, Y+31	; 0x1f
     e5e:	88 a1       	ldd	r24, Y+32	; 0x20
     e60:	99 a1       	ldd	r25, Y+33	; 0x21
     e62:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
     e66:	9b 01       	movw	r18, r22
     e68:	ac 01       	movw	r20, r24
     e6a:	c5 01       	movw	r24, r10
     e6c:	b4 01       	movw	r22, r8
     e6e:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
     e72:	4b 01       	movw	r8, r22
     e74:	5c 01       	movw	r10, r24
     e76:	2c a1       	ldd	r18, Y+36	; 0x24
     e78:	3d a1       	ldd	r19, Y+37	; 0x25
     e7a:	4e a1       	ldd	r20, Y+38	; 0x26
     e7c:	5f a1       	ldd	r21, Y+39	; 0x27
     e7e:	6e 89       	ldd	r22, Y+22	; 0x16
     e80:	7f 89       	ldd	r23, Y+23	; 0x17
     e82:	88 8d       	ldd	r24, Y+24	; 0x18
     e84:	99 8d       	ldd	r25, Y+25	; 0x19
     e86:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
     e8a:	9b 01       	movw	r18, r22
     e8c:	ac 01       	movw	r20, r24
     e8e:	c5 01       	movw	r24, r10
     e90:	b4 01       	movw	r22, r8
     e92:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
     e96:	2b 01       	movw	r4, r22
     e98:	3c 01       	movw	r6, r24
     e9a:	2c a5       	ldd	r18, Y+44	; 0x2c
     e9c:	3d a5       	ldd	r19, Y+45	; 0x2d
     e9e:	4e a5       	ldd	r20, Y+46	; 0x2e
     ea0:	5f a5       	ldd	r21, Y+47	; 0x2f
     ea2:	68 a5       	ldd	r22, Y+40	; 0x28
     ea4:	79 a5       	ldd	r23, Y+41	; 0x29
     ea6:	8a a5       	ldd	r24, Y+42	; 0x2a
     ea8:	9b a5       	ldd	r25, Y+43	; 0x2b
     eaa:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
     eae:	4b 01       	movw	r8, r22
     eb0:	5c 01       	movw	r10, r24
     eb2:	28 a9       	ldd	r18, Y+48	; 0x30
     eb4:	39 a9       	ldd	r19, Y+49	; 0x31
     eb6:	4a a9       	ldd	r20, Y+50	; 0x32
     eb8:	5b a9       	ldd	r21, Y+51	; 0x33
     eba:	68 ad       	ldd	r22, Y+56	; 0x38
     ebc:	79 ad       	ldd	r23, Y+57	; 0x39
     ebe:	8a ad       	ldd	r24, Y+58	; 0x3a
     ec0:	9b ad       	ldd	r25, Y+59	; 0x3b
     ec2:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
     ec6:	9b 01       	movw	r18, r22
     ec8:	ac 01       	movw	r20, r24
     eca:	c5 01       	movw	r24, r10
     ecc:	b4 01       	movw	r22, r8
     ece:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     ed2:	9b 01       	movw	r18, r22
     ed4:	ac 01       	movw	r20, r24
     ed6:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
     eda:	a3 01       	movw	r20, r6
     edc:	92 01       	movw	r18, r4
     ede:	0e 94 21 2e 	call	0x5c42	; 0x5c42 <atan2>
     ee2:	4b 01       	movw	r8, r22
     ee4:	5c 01       	movw	r10, r24
	imudata.pitch = -asin(2.0 * (q1 * q3 - q0 * q2));
     ee6:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <q1>
     eea:	90 91 bc 20 	lds	r25, 0x20BC	; 0x8020bc <q1+0x1>
     eee:	a0 91 bd 20 	lds	r26, 0x20BD	; 0x8020bd <q1+0x2>
     ef2:	b0 91 be 20 	lds	r27, 0x20BE	; 0x8020be <q1+0x3>
     ef6:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <q3>
     efa:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <q3+0x1>
     efe:	a0 91 b5 20 	lds	r26, 0x20B5	; 0x8020b5 <q3+0x2>
     f02:	b0 91 b6 20 	lds	r27, 0x20B6	; 0x8020b6 <q3+0x3>
     f06:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <q0>
     f0a:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <q0+0x1>
     f0e:	a0 91 1a 20 	lds	r26, 0x201A	; 0x80201a <q0+0x2>
     f12:	b0 91 1b 20 	lds	r27, 0x201B	; 0x80201b <q0+0x3>
     f16:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <q2>
     f1a:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <q2+0x1>
     f1e:	a0 91 b9 20 	lds	r26, 0x20B9	; 0x8020b9 <q2+0x2>
     f22:	b0 91 ba 20 	lds	r27, 0x20BA	; 0x8020ba <q2+0x3>
	imudata.roll  = atan2(2.0 * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3);
     f26:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <q0>
     f2a:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <q0+0x1>
     f2e:	a0 91 1a 20 	lds	r26, 0x201A	; 0x80201a <q0+0x2>
     f32:	b0 91 1b 20 	lds	r27, 0x201B	; 0x80201b <q0+0x3>
     f36:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <q0>
     f3a:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <q0+0x1>
     f3e:	a0 91 1a 20 	lds	r26, 0x201A	; 0x80201a <q0+0x2>
     f42:	b0 91 1b 20 	lds	r27, 0x201B	; 0x80201b <q0+0x3>
     f46:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <q1>
     f4a:	90 91 bc 20 	lds	r25, 0x20BC	; 0x8020bc <q1+0x1>
     f4e:	a0 91 bd 20 	lds	r26, 0x20BD	; 0x8020bd <q1+0x2>
     f52:	b0 91 be 20 	lds	r27, 0x20BE	; 0x8020be <q1+0x3>
     f56:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <q1>
     f5a:	90 91 bc 20 	lds	r25, 0x20BC	; 0x8020bc <q1+0x1>
     f5e:	a0 91 bd 20 	lds	r26, 0x20BD	; 0x8020bd <q1+0x2>
     f62:	b0 91 be 20 	lds	r27, 0x20BE	; 0x8020be <q1+0x3>
     f66:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <q2>
     f6a:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <q2+0x1>
     f6e:	a0 91 b9 20 	lds	r26, 0x20B9	; 0x8020b9 <q2+0x2>
     f72:	b0 91 ba 20 	lds	r27, 0x20BA	; 0x8020ba <q2+0x3>
     f76:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <q2>
     f7a:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <q2+0x1>
     f7e:	a0 91 b9 20 	lds	r26, 0x20B9	; 0x8020b9 <q2+0x2>
     f82:	b0 91 ba 20 	lds	r27, 0x20BA	; 0x8020ba <q2+0x3>
     f86:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <q3>
     f8a:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <q3+0x1>
     f8e:	a0 91 b5 20 	lds	r26, 0x20B5	; 0x8020b5 <q3+0x2>
     f92:	b0 91 b6 20 	lds	r27, 0x20B6	; 0x8020b6 <q3+0x3>
     f96:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <q3>
     f9a:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <q3+0x1>
     f9e:	a0 91 b5 20 	lds	r26, 0x20B5	; 0x8020b5 <q3+0x2>
     fa2:	b0 91 b6 20 	lds	r27, 0x20B6	; 0x8020b6 <q3+0x3>
     fa6:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <q0>
     faa:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <q0+0x1>
     fae:	a0 91 1a 20 	lds	r26, 0x201A	; 0x80201a <q0+0x2>
     fb2:	b0 91 1b 20 	lds	r27, 0x201B	; 0x80201b <q0+0x3>
     fb6:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <q1>
     fba:	90 91 bc 20 	lds	r25, 0x20BC	; 0x8020bc <q1+0x1>
     fbe:	a0 91 bd 20 	lds	r26, 0x20BD	; 0x8020bd <q1+0x2>
     fc2:	b0 91 be 20 	lds	r27, 0x20BE	; 0x8020be <q1+0x3>
     fc6:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <q2>
     fca:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <q2+0x1>
     fce:	a0 91 b9 20 	lds	r26, 0x20B9	; 0x8020b9 <q2+0x2>
     fd2:	b0 91 ba 20 	lds	r27, 0x20BA	; 0x8020ba <q2+0x3>
     fd6:	80 91 b3 20 	lds	r24, 0x20B3	; 0x8020b3 <q3>
     fda:	90 91 b4 20 	lds	r25, 0x20B4	; 0x8020b4 <q3+0x1>
     fde:	a0 91 b5 20 	lds	r26, 0x20B5	; 0x8020b5 <q3+0x2>
     fe2:	b0 91 b6 20 	lds	r27, 0x20B6	; 0x8020b6 <q3+0x3>
	imudata.pitch = atan((float)(data.acc_y)/(float)data.acc_z);
     fe6:	f1 01       	movw	r30, r2
     fe8:	65 81       	ldd	r22, Z+5	; 0x05
     fea:	76 81       	ldd	r23, Z+6	; 0x06
     fec:	07 2e       	mov	r0, r23
     fee:	00 0c       	add	r0, r0
     ff0:	88 0b       	sbc	r24, r24
     ff2:	99 0b       	sbc	r25, r25
     ff4:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
     ff8:	6b 01       	movw	r12, r22
     ffa:	7c 01       	movw	r14, r24
     ffc:	f1 01       	movw	r30, r2
     ffe:	63 81       	ldd	r22, Z+3	; 0x03
    1000:	74 81       	ldd	r23, Z+4	; 0x04
    1002:	07 2e       	mov	r0, r23
    1004:	00 0c       	add	r0, r0
    1006:	88 0b       	sbc	r24, r24
    1008:	99 0b       	sbc	r25, r25
    100a:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
    100e:	a7 01       	movw	r20, r14
    1010:	96 01       	movw	r18, r12
    1012:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
    1016:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <atan>
    101a:	2b 01       	movw	r4, r22
    101c:	3c 01       	movw	r6, r24
	imudata.roll = atan((float)data.acc_x/(float)data.acc_z);
    101e:	f1 01       	movw	r30, r2
    1020:	61 81       	ldd	r22, Z+1	; 0x01
    1022:	72 81       	ldd	r23, Z+2	; 0x02
    1024:	07 2e       	mov	r0, r23
    1026:	00 0c       	add	r0, r0
    1028:	88 0b       	sbc	r24, r24
    102a:	99 0b       	sbc	r25, r25
    102c:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
    1030:	a7 01       	movw	r20, r14
    1032:	96 01       	movw	r18, r12
    1034:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
    1038:	0e 94 4c 2e 	call	0x5c98	; 0x5c98 <atan>
    103c:	6b 01       	movw	r12, r22
    103e:	7c 01       	movw	r14, r24
	//imudata.yaw	  += 4.17;		//WMM2015 magnetic declination for Stephenville TX
	imudata.roll  *= 180.0 / PI;
	
	
	
	return imudata;
    1040:	2d ee       	ldi	r18, 0xED	; 237
    1042:	3e e2       	ldi	r19, 0x2E	; 46
    1044:	45 e6       	ldi	r20, 0x65	; 101
    1046:	52 e4       	ldi	r21, 0x42	; 66
    1048:	c3 01       	movw	r24, r6
    104a:	b2 01       	movw	r22, r4
    104c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1050:	ea a1       	ldd	r30, Y+34	; 0x22
    1052:	fb a1       	ldd	r31, Y+35	; 0x23
    1054:	60 83       	st	Z, r22
    1056:	71 83       	std	Z+1, r23	; 0x01
    1058:	82 83       	std	Z+2, r24	; 0x02
    105a:	93 83       	std	Z+3, r25	; 0x03
    105c:	2d ee       	ldi	r18, 0xED	; 237
    105e:	3e e2       	ldi	r19, 0x2E	; 46
    1060:	45 e6       	ldi	r20, 0x65	; 101
    1062:	52 e4       	ldi	r21, 0x42	; 66
    1064:	c7 01       	movw	r24, r14
    1066:	b6 01       	movw	r22, r12
    1068:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    106c:	ea a1       	ldd	r30, Y+34	; 0x22
    106e:	fb a1       	ldd	r31, Y+35	; 0x23
    1070:	64 83       	std	Z+4, r22	; 0x04
    1072:	75 83       	std	Z+5, r23	; 0x05
    1074:	86 83       	std	Z+6, r24	; 0x06
    1076:	97 83       	std	Z+7, r25	; 0x07
    1078:	2d ee       	ldi	r18, 0xED	; 237
    107a:	3e e2       	ldi	r19, 0x2E	; 46
    107c:	45 e6       	ldi	r20, 0x65	; 101
    107e:	52 e4       	ldi	r21, 0x42	; 66
    1080:	c5 01       	movw	r24, r10
    1082:	b4 01       	movw	r22, r8
    1084:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1088:	ea a1       	ldd	r30, Y+34	; 0x22
    108a:	fb a1       	ldd	r31, Y+35	; 0x23
    108c:	60 87       	std	Z+8, r22	; 0x08
    108e:	71 87       	std	Z+9, r23	; 0x09
    1090:	82 87       	std	Z+10, r24	; 0x0a
    1092:	93 87       	std	Z+11, r25	; 0x0b
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	de bf       	out	0x3e, r29	; 62
}
    1098:	cf 01       	movw	r24, r30
    109a:	eb 96       	adiw	r28, 0x3b	; 59
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	ff 90       	pop	r15
    10aa:	ef 90       	pop	r14
    10ac:	df 90       	pop	r13
    10ae:	cf 90       	pop	r12
    10b0:	bf 90       	pop	r11
    10b2:	af 90       	pop	r10
    10b4:	9f 90       	pop	r9
    10b6:	8f 90       	pop	r8
    10b8:	7f 90       	pop	r7
    10ba:	6f 90       	pop	r6
    10bc:	5f 90       	pop	r5
    10be:	4f 90       	pop	r4
    10c0:	3f 90       	pop	r3
    10c2:	2f 90       	pop	r2
    10c4:	08 95       	ret

000010c6 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

double invSqrt(double x) {
    10c6:	cf 92       	push	r12
    10c8:	df 92       	push	r13
    10ca:	ef 92       	push	r14
    10cc:	ff 92       	push	r15
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
	double halfx = 0.5 * x;
	double y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(double*)&i;
    10d2:	8b 01       	movw	r16, r22
    10d4:	9c 01       	movw	r18, r24
    10d6:	35 95       	asr	r19
    10d8:	27 95       	ror	r18
    10da:	17 95       	ror	r17
    10dc:	07 95       	ror	r16
    10de:	0f 2e       	mov	r0, r31
    10e0:	ff ed       	ldi	r31, 0xDF	; 223
    10e2:	cf 2e       	mov	r12, r31
    10e4:	f9 e5       	ldi	r31, 0x59	; 89
    10e6:	df 2e       	mov	r13, r31
    10e8:	f7 e3       	ldi	r31, 0x37	; 55
    10ea:	ef 2e       	mov	r14, r31
    10ec:	ff e5       	ldi	r31, 0x5F	; 95
    10ee:	ff 2e       	mov	r15, r31
    10f0:	f0 2d       	mov	r31, r0
    10f2:	c0 1a       	sub	r12, r16
    10f4:	d1 0a       	sbc	r13, r17
    10f6:	e2 0a       	sbc	r14, r18
    10f8:	f3 0a       	sbc	r15, r19
	y = y * (1.5 - (halfx * y * y));
	return y;
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	5f e3       	ldi	r21, 0x3F	; 63
    1102:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1106:	a7 01       	movw	r20, r14
    1108:	96 01       	movw	r18, r12
    110a:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    110e:	a7 01       	movw	r20, r14
    1110:	96 01       	movw	r18, r12
    1112:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1116:	9b 01       	movw	r18, r22
    1118:	ac 01       	movw	r20, r24
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	80 ec       	ldi	r24, 0xC0	; 192
    1120:	9f e3       	ldi	r25, 0x3F	; 63
    1122:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    1126:	a7 01       	movw	r20, r14
    1128:	96 01       	movw	r18, r12
    112a:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
}
    112e:	1f 91       	pop	r17
    1130:	0f 91       	pop	r16
    1132:	ff 90       	pop	r15
    1134:	ef 90       	pop	r14
    1136:	df 90       	pop	r13
    1138:	cf 90       	pop	r12
    113a:	08 95       	ret

0000113c <MahonyAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(double gx, double gy, double gz, double ax, double ay, double az) {
    113c:	4f 92       	push	r4
    113e:	5f 92       	push	r5
    1140:	6f 92       	push	r6
    1142:	7f 92       	push	r7
    1144:	8f 92       	push	r8
    1146:	9f 92       	push	r9
    1148:	af 92       	push	r10
    114a:	bf 92       	push	r11
    114c:	cf 92       	push	r12
    114e:	df 92       	push	r13
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
    115a:	df 93       	push	r29
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	a4 97       	sbiw	r28, 0x24	; 36
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	69 87       	std	Y+9, r22	; 0x09
    1168:	7a 87       	std	Y+10, r23	; 0x0a
    116a:	8b 87       	std	Y+11, r24	; 0x0b
    116c:	9c 87       	std	Y+12, r25	; 0x0c
    116e:	2d 87       	std	Y+13, r18	; 0x0d
    1170:	3e 87       	std	Y+14, r19	; 0x0e
    1172:	4f 87       	std	Y+15, r20	; 0x0f
    1174:	58 8b       	std	Y+16, r21	; 0x10
    1176:	e9 8a       	std	Y+17, r14	; 0x11
    1178:	fa 8a       	std	Y+18, r15	; 0x12
    117a:	0b 8b       	std	Y+19, r16	; 0x13
    117c:	1c 8b       	std	Y+20, r17	; 0x14
	double halfvx, halfvy, halfvz;
	double halfex, halfey, halfez;
	double qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0) && (ay == 0.0) && (az == 0.0))) {
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	a9 01       	movw	r20, r18
    1184:	c6 01       	movw	r24, r12
    1186:	b5 01       	movw	r22, r10
    1188:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__cmpsf2>
    118c:	81 11       	cpse	r24, r1
    118e:	17 c0       	rjmp	.+46     	; 0x11be <MahonyAHRSupdateIMU+0x82>
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	a9 01       	movw	r20, r18
    1196:	68 ad       	ldd	r22, Y+56	; 0x38
    1198:	79 ad       	ldd	r23, Y+57	; 0x39
    119a:	8a ad       	ldd	r24, Y+58	; 0x3a
    119c:	9b ad       	ldd	r25, Y+59	; 0x3b
    119e:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__cmpsf2>
    11a2:	81 11       	cpse	r24, r1
    11a4:	0c c0       	rjmp	.+24     	; 0x11be <MahonyAHRSupdateIMU+0x82>
    11a6:	20 e0       	ldi	r18, 0x00	; 0
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	a9 01       	movw	r20, r18
    11ac:	6c ad       	ldd	r22, Y+60	; 0x3c
    11ae:	7d ad       	ldd	r23, Y+61	; 0x3d
    11b0:	8e ad       	ldd	r24, Y+62	; 0x3e
    11b2:	9f ad       	ldd	r25, Y+63	; 0x3f
    11b4:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__cmpsf2>
    11b8:	88 23       	and	r24, r24
    11ba:	09 f4       	brne	.+2      	; 0x11be <MahonyAHRSupdateIMU+0x82>
    11bc:	60 c2       	rjmp	.+1216   	; 0x167e <MahonyAHRSupdateIMU+0x542>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    11be:	a6 01       	movw	r20, r12
    11c0:	95 01       	movw	r18, r10
    11c2:	c6 01       	movw	r24, r12
    11c4:	b5 01       	movw	r22, r10
    11c6:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    11ca:	2b 01       	movw	r4, r22
    11cc:	3c 01       	movw	r6, r24
    11ce:	28 ad       	ldd	r18, Y+56	; 0x38
    11d0:	39 ad       	ldd	r19, Y+57	; 0x39
    11d2:	4a ad       	ldd	r20, Y+58	; 0x3a
    11d4:	5b ad       	ldd	r21, Y+59	; 0x3b
    11d6:	ca 01       	movw	r24, r20
    11d8:	b9 01       	movw	r22, r18
    11da:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    11de:	9b 01       	movw	r18, r22
    11e0:	ac 01       	movw	r20, r24
    11e2:	c3 01       	movw	r24, r6
    11e4:	b2 01       	movw	r22, r4
    11e6:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    11ea:	2b 01       	movw	r4, r22
    11ec:	3c 01       	movw	r6, r24
    11ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    11f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    11f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    11f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    11f6:	ca 01       	movw	r24, r20
    11f8:	b9 01       	movw	r22, r18
    11fa:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    11fe:	9b 01       	movw	r18, r22
    1200:	ac 01       	movw	r20, r24
    1202:	c3 01       	movw	r24, r6
    1204:	b2 01       	movw	r22, r4
    1206:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    120a:	5d df       	rcall	.-326    	; 0x10c6 <invSqrt>
    120c:	2b 01       	movw	r4, r22
    120e:	3c 01       	movw	r6, r24
		ax *= recipNorm;
    1210:	9b 01       	movw	r18, r22
    1212:	ac 01       	movw	r20, r24
    1214:	c6 01       	movw	r24, r12
    1216:	b5 01       	movw	r22, r10
    1218:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    121c:	69 83       	std	Y+1, r22	; 0x01
    121e:	7a 83       	std	Y+2, r23	; 0x02
    1220:	8b 83       	std	Y+3, r24	; 0x03
    1222:	9c 83       	std	Y+4, r25	; 0x04
		ay *= recipNorm;
    1224:	a3 01       	movw	r20, r6
    1226:	92 01       	movw	r18, r4
    1228:	68 ad       	ldd	r22, Y+56	; 0x38
    122a:	79 ad       	ldd	r23, Y+57	; 0x39
    122c:	8a ad       	ldd	r24, Y+58	; 0x3a
    122e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1230:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1234:	6d 83       	std	Y+5, r22	; 0x05
    1236:	7e 83       	std	Y+6, r23	; 0x06
    1238:	8f 83       	std	Y+7, r24	; 0x07
    123a:	98 87       	std	Y+8, r25	; 0x08
		az *= recipNorm;        
    123c:	a3 01       	movw	r20, r6
    123e:	92 01       	movw	r18, r4
    1240:	6c ad       	ldd	r22, Y+60	; 0x3c
    1242:	7d ad       	ldd	r23, Y+61	; 0x3d
    1244:	8e ad       	ldd	r24, Y+62	; 0x3e
    1246:	9f ad       	ldd	r25, Y+63	; 0x3f
    1248:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    124c:	6d 8b       	std	Y+21, r22	; 0x15
    124e:	7e 8b       	std	Y+22, r23	; 0x16
    1250:	8f 8b       	std	Y+23, r24	; 0x17
    1252:	98 8f       	std	Y+24, r25	; 0x18

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
    1254:	60 91 bb 20 	lds	r22, 0x20BB	; 0x8020bb <q1>
    1258:	70 91 bc 20 	lds	r23, 0x20BC	; 0x8020bc <q1+0x1>
    125c:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <q1+0x2>
    1260:	90 91 be 20 	lds	r25, 0x20BE	; 0x8020be <q1+0x3>
    1264:	20 91 b3 20 	lds	r18, 0x20B3	; 0x8020b3 <q3>
    1268:	30 91 b4 20 	lds	r19, 0x20B4	; 0x8020b4 <q3+0x1>
    126c:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <q3+0x2>
    1270:	50 91 b6 20 	lds	r21, 0x20B6	; 0x8020b6 <q3+0x3>
    1274:	80 90 18 20 	lds	r8, 0x2018	; 0x802018 <q0>
    1278:	90 90 19 20 	lds	r9, 0x2019	; 0x802019 <q0+0x1>
    127c:	a0 90 1a 20 	lds	r10, 0x201A	; 0x80201a <q0+0x2>
    1280:	b0 90 1b 20 	lds	r11, 0x201B	; 0x80201b <q0+0x3>
    1284:	40 90 b7 20 	lds	r4, 0x20B7	; 0x8020b7 <q2>
    1288:	50 90 b8 20 	lds	r5, 0x20B8	; 0x8020b8 <q2+0x1>
    128c:	60 90 b9 20 	lds	r6, 0x20B9	; 0x8020b9 <q2+0x2>
    1290:	70 90 ba 20 	lds	r7, 0x20BA	; 0x8020ba <q2+0x3>
    1294:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1298:	6b 01       	movw	r12, r22
    129a:	7c 01       	movw	r14, r24
    129c:	a3 01       	movw	r20, r6
    129e:	92 01       	movw	r18, r4
    12a0:	c5 01       	movw	r24, r10
    12a2:	b4 01       	movw	r22, r8
    12a4:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    12a8:	9b 01       	movw	r18, r22
    12aa:	ac 01       	movw	r20, r24
    12ac:	c7 01       	movw	r24, r14
    12ae:	b6 01       	movw	r22, r12
    12b0:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    12b4:	69 8f       	std	Y+25, r22	; 0x19
    12b6:	7a 8f       	std	Y+26, r23	; 0x1a
    12b8:	8b 8f       	std	Y+27, r24	; 0x1b
    12ba:	9c 8f       	std	Y+28, r25	; 0x1c
		halfvy = q0 * q1 + q2 * q3;
    12bc:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
    12c0:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
    12c4:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
    12c8:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
    12cc:	20 91 bb 20 	lds	r18, 0x20BB	; 0x8020bb <q1>
    12d0:	30 91 bc 20 	lds	r19, 0x20BC	; 0x8020bc <q1+0x1>
    12d4:	40 91 bd 20 	lds	r20, 0x20BD	; 0x8020bd <q1+0x2>
    12d8:	50 91 be 20 	lds	r21, 0x20BE	; 0x8020be <q1+0x3>
    12dc:	80 90 b7 20 	lds	r8, 0x20B7	; 0x8020b7 <q2>
    12e0:	90 90 b8 20 	lds	r9, 0x20B8	; 0x8020b8 <q2+0x1>
    12e4:	a0 90 b9 20 	lds	r10, 0x20B9	; 0x8020b9 <q2+0x2>
    12e8:	b0 90 ba 20 	lds	r11, 0x20BA	; 0x8020ba <q2+0x3>
    12ec:	40 90 b3 20 	lds	r4, 0x20B3	; 0x8020b3 <q3>
    12f0:	50 90 b4 20 	lds	r5, 0x20B4	; 0x8020b4 <q3+0x1>
    12f4:	60 90 b5 20 	lds	r6, 0x20B5	; 0x8020b5 <q3+0x2>
    12f8:	70 90 b6 20 	lds	r7, 0x20B6	; 0x8020b6 <q3+0x3>
    12fc:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1300:	6b 01       	movw	r12, r22
    1302:	7c 01       	movw	r14, r24
    1304:	a3 01       	movw	r20, r6
    1306:	92 01       	movw	r18, r4
    1308:	c5 01       	movw	r24, r10
    130a:	b4 01       	movw	r22, r8
    130c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1310:	9b 01       	movw	r18, r22
    1312:	ac 01       	movw	r20, r24
    1314:	c7 01       	movw	r24, r14
    1316:	b6 01       	movw	r22, r12
    1318:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    131c:	6d 8f       	std	Y+29, r22	; 0x1d
    131e:	7e 8f       	std	Y+30, r23	; 0x1e
    1320:	8f 8f       	std	Y+31, r24	; 0x1f
    1322:	98 a3       	std	Y+32, r25	; 0x20
		halfvz = q0 * q0 - 0.5 + q3 * q3;
    1324:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
    1328:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
    132c:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
    1330:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
    1334:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <q0>
    1338:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <q0+0x1>
    133c:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <q0+0x2>
    1340:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <q0+0x3>
    1344:	80 90 b3 20 	lds	r8, 0x20B3	; 0x8020b3 <q3>
    1348:	90 90 b4 20 	lds	r9, 0x20B4	; 0x8020b4 <q3+0x1>
    134c:	a0 90 b5 20 	lds	r10, 0x20B5	; 0x8020b5 <q3+0x2>
    1350:	b0 90 b6 20 	lds	r11, 0x20B6	; 0x8020b6 <q3+0x3>
    1354:	40 90 b3 20 	lds	r4, 0x20B3	; 0x8020b3 <q3>
    1358:	50 90 b4 20 	lds	r5, 0x20B4	; 0x8020b4 <q3+0x1>
    135c:	60 90 b5 20 	lds	r6, 0x20B5	; 0x8020b5 <q3+0x2>
    1360:	70 90 b6 20 	lds	r7, 0x20B6	; 0x8020b6 <q3+0x3>
    1364:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    1374:	6b 01       	movw	r12, r22
    1376:	7c 01       	movw	r14, r24
    1378:	a3 01       	movw	r20, r6
    137a:	92 01       	movw	r18, r4
    137c:	c5 01       	movw	r24, r10
    137e:	b4 01       	movw	r22, r8
    1380:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1384:	9b 01       	movw	r18, r22
    1386:	ac 01       	movw	r20, r24
    1388:	c7 01       	movw	r24, r14
    138a:	b6 01       	movw	r22, r12
    138c:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1390:	6b 01       	movw	r12, r22
    1392:	7c 01       	movw	r14, r24
	
		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
    1394:	9b 01       	movw	r18, r22
    1396:	ac 01       	movw	r20, r24
    1398:	6d 81       	ldd	r22, Y+5	; 0x05
    139a:	7e 81       	ldd	r23, Y+6	; 0x06
    139c:	8f 81       	ldd	r24, Y+7	; 0x07
    139e:	98 85       	ldd	r25, Y+8	; 0x08
    13a0:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    13a4:	4b 01       	movw	r8, r22
    13a6:	5c 01       	movw	r10, r24
    13a8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    13aa:	3e 8d       	ldd	r19, Y+30	; 0x1e
    13ac:	4f 8d       	ldd	r20, Y+31	; 0x1f
    13ae:	58 a1       	ldd	r21, Y+32	; 0x20
    13b0:	6d 89       	ldd	r22, Y+21	; 0x15
    13b2:	7e 89       	ldd	r23, Y+22	; 0x16
    13b4:	8f 89       	ldd	r24, Y+23	; 0x17
    13b6:	98 8d       	ldd	r25, Y+24	; 0x18
    13b8:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    13bc:	9b 01       	movw	r18, r22
    13be:	ac 01       	movw	r20, r24
    13c0:	c5 01       	movw	r24, r10
    13c2:	b4 01       	movw	r22, r8
    13c4:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    13c8:	69 a3       	std	Y+33, r22	; 0x21
    13ca:	7a a3       	std	Y+34, r23	; 0x22
    13cc:	8b a3       	std	Y+35, r24	; 0x23
    13ce:	9c a3       	std	Y+36, r25	; 0x24
		halfey = (az * halfvx - ax * halfvz);
    13d0:	29 8d       	ldd	r18, Y+25	; 0x19
    13d2:	3a 8d       	ldd	r19, Y+26	; 0x1a
    13d4:	4b 8d       	ldd	r20, Y+27	; 0x1b
    13d6:	5c 8d       	ldd	r21, Y+28	; 0x1c
    13d8:	6d 89       	ldd	r22, Y+21	; 0x15
    13da:	7e 89       	ldd	r23, Y+22	; 0x16
    13dc:	8f 89       	ldd	r24, Y+23	; 0x17
    13de:	98 8d       	ldd	r25, Y+24	; 0x18
    13e0:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    13e4:	4b 01       	movw	r8, r22
    13e6:	5c 01       	movw	r10, r24
    13e8:	a7 01       	movw	r20, r14
    13ea:	96 01       	movw	r18, r12
    13ec:	69 81       	ldd	r22, Y+1	; 0x01
    13ee:	7a 81       	ldd	r23, Y+2	; 0x02
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    13f8:	9b 01       	movw	r18, r22
    13fa:	ac 01       	movw	r20, r24
    13fc:	c5 01       	movw	r24, r10
    13fe:	b4 01       	movw	r22, r8
    1400:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    1404:	4b 01       	movw	r8, r22
    1406:	5c 01       	movw	r10, r24
		halfez = (ax * halfvy - ay * halfvx);
    1408:	2d 8d       	ldd	r18, Y+29	; 0x1d
    140a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    140c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    140e:	58 a1       	ldd	r21, Y+32	; 0x20
    1410:	69 81       	ldd	r22, Y+1	; 0x01
    1412:	7a 81       	ldd	r23, Y+2	; 0x02
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    141c:	6b 01       	movw	r12, r22
    141e:	7c 01       	movw	r14, r24
    1420:	29 8d       	ldd	r18, Y+25	; 0x19
    1422:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1424:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1426:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1428:	6d 81       	ldd	r22, Y+5	; 0x05
    142a:	7e 81       	ldd	r23, Y+6	; 0x06
    142c:	8f 81       	ldd	r24, Y+7	; 0x07
    142e:	98 85       	ldd	r25, Y+8	; 0x08
    1430:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1434:	9b 01       	movw	r18, r22
    1436:	ac 01       	movw	r20, r24
    1438:	c7 01       	movw	r24, r14
    143a:	b6 01       	movw	r22, r12
    143c:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    1440:	6b 01       	movw	r12, r22
    1442:	7c 01       	movw	r14, r24

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0) {
    1444:	60 91 bf 20 	lds	r22, 0x20BF	; 0x8020bf <twoKi>
    1448:	70 91 c0 20 	lds	r23, 0x20C0	; 0x8020c0 <twoKi+0x1>
    144c:	80 91 c1 20 	lds	r24, 0x20C1	; 0x8020c1 <twoKi+0x2>
    1450:	90 91 c2 20 	lds	r25, 0x20C2	; 0x8020c2 <twoKi+0x3>
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	a9 01       	movw	r20, r18
    145a:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__gesf2>
    145e:	18 16       	cp	r1, r24
    1460:	0c f0       	brlt	.+2      	; 0x1464 <MahonyAHRSupdateIMU+0x328>
    1462:	ab c0       	rjmp	.+342    	; 0x15ba <MahonyAHRSupdateIMU+0x47e>
			integralFBx += twoKi * halfex * (1.0 / sampleFreq);	// integral error scaled by Ki
    1464:	20 91 bf 20 	lds	r18, 0x20BF	; 0x8020bf <twoKi>
    1468:	30 91 c0 20 	lds	r19, 0x20C0	; 0x8020c0 <twoKi+0x1>
    146c:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <twoKi+0x2>
    1470:	50 91 c2 20 	lds	r21, 0x20C2	; 0x8020c2 <twoKi+0x3>
    1474:	40 90 af 20 	lds	r4, 0x20AF	; 0x8020af <integralFBx>
    1478:	50 90 b0 20 	lds	r5, 0x20B0	; 0x8020b0 <integralFBx+0x1>
    147c:	60 90 b1 20 	lds	r6, 0x20B1	; 0x8020b1 <integralFBx+0x2>
    1480:	70 90 b2 20 	lds	r7, 0x20B2	; 0x8020b2 <integralFBx+0x3>
    1484:	69 a1       	ldd	r22, Y+33	; 0x21
    1486:	7a a1       	ldd	r23, Y+34	; 0x22
    1488:	8b a1       	ldd	r24, Y+35	; 0x23
    148a:	9c a1       	ldd	r25, Y+36	; 0x24
    148c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1490:	2a ef       	ldi	r18, 0xFA	; 250
    1492:	39 ec       	ldi	r19, 0xC9	; 201
    1494:	44 e3       	ldi	r20, 0x34	; 52
    1496:	59 e3       	ldi	r21, 0x39	; 57
    1498:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    149c:	a3 01       	movw	r20, r6
    149e:	92 01       	movw	r18, r4
    14a0:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    14a4:	60 93 af 20 	sts	0x20AF, r22	; 0x8020af <integralFBx>
    14a8:	70 93 b0 20 	sts	0x20B0, r23	; 0x8020b0 <integralFBx+0x1>
    14ac:	80 93 b1 20 	sts	0x20B1, r24	; 0x8020b1 <integralFBx+0x2>
    14b0:	90 93 b2 20 	sts	0x20B2, r25	; 0x8020b2 <integralFBx+0x3>
			integralFBy += twoKi * halfey * (1.0 / sampleFreq);
    14b4:	20 91 bf 20 	lds	r18, 0x20BF	; 0x8020bf <twoKi>
    14b8:	30 91 c0 20 	lds	r19, 0x20C0	; 0x8020c0 <twoKi+0x1>
    14bc:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <twoKi+0x2>
    14c0:	50 91 c2 20 	lds	r21, 0x20C2	; 0x8020c2 <twoKi+0x3>
    14c4:	40 90 ab 20 	lds	r4, 0x20AB	; 0x8020ab <integralFBy>
    14c8:	50 90 ac 20 	lds	r5, 0x20AC	; 0x8020ac <integralFBy+0x1>
    14cc:	60 90 ad 20 	lds	r6, 0x20AD	; 0x8020ad <integralFBy+0x2>
    14d0:	70 90 ae 20 	lds	r7, 0x20AE	; 0x8020ae <integralFBy+0x3>
    14d4:	c5 01       	movw	r24, r10
    14d6:	b4 01       	movw	r22, r8
    14d8:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    14dc:	2a ef       	ldi	r18, 0xFA	; 250
    14de:	39 ec       	ldi	r19, 0xC9	; 201
    14e0:	44 e3       	ldi	r20, 0x34	; 52
    14e2:	59 e3       	ldi	r21, 0x39	; 57
    14e4:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    14e8:	a3 01       	movw	r20, r6
    14ea:	92 01       	movw	r18, r4
    14ec:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    14f0:	60 93 ab 20 	sts	0x20AB, r22	; 0x8020ab <integralFBy>
    14f4:	70 93 ac 20 	sts	0x20AC, r23	; 0x8020ac <integralFBy+0x1>
    14f8:	80 93 ad 20 	sts	0x20AD, r24	; 0x8020ad <integralFBy+0x2>
    14fc:	90 93 ae 20 	sts	0x20AE, r25	; 0x8020ae <integralFBy+0x3>
			integralFBz += twoKi * halfez * (1.0 / sampleFreq);
    1500:	20 91 bf 20 	lds	r18, 0x20BF	; 0x8020bf <twoKi>
    1504:	30 91 c0 20 	lds	r19, 0x20C0	; 0x8020c0 <twoKi+0x1>
    1508:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <twoKi+0x2>
    150c:	50 91 c2 20 	lds	r21, 0x20C2	; 0x8020c2 <twoKi+0x3>
    1510:	40 90 a7 20 	lds	r4, 0x20A7	; 0x8020a7 <integralFBz>
    1514:	50 90 a8 20 	lds	r5, 0x20A8	; 0x8020a8 <integralFBz+0x1>
    1518:	60 90 a9 20 	lds	r6, 0x20A9	; 0x8020a9 <integralFBz+0x2>
    151c:	70 90 aa 20 	lds	r7, 0x20AA	; 0x8020aa <integralFBz+0x3>
    1520:	c7 01       	movw	r24, r14
    1522:	b6 01       	movw	r22, r12
    1524:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1528:	2a ef       	ldi	r18, 0xFA	; 250
    152a:	39 ec       	ldi	r19, 0xC9	; 201
    152c:	44 e3       	ldi	r20, 0x34	; 52
    152e:	59 e3       	ldi	r21, 0x39	; 57
    1530:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1534:	a3 01       	movw	r20, r6
    1536:	92 01       	movw	r18, r4
    1538:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    153c:	60 93 a7 20 	sts	0x20A7, r22	; 0x8020a7 <integralFBz>
    1540:	70 93 a8 20 	sts	0x20A8, r23	; 0x8020a8 <integralFBz+0x1>
    1544:	80 93 a9 20 	sts	0x20A9, r24	; 0x8020a9 <integralFBz+0x2>
    1548:	90 93 aa 20 	sts	0x20AA, r25	; 0x8020aa <integralFBz+0x3>
			gx += integralFBx;	// apply integral feedback
    154c:	20 91 af 20 	lds	r18, 0x20AF	; 0x8020af <integralFBx>
    1550:	30 91 b0 20 	lds	r19, 0x20B0	; 0x8020b0 <integralFBx+0x1>
    1554:	40 91 b1 20 	lds	r20, 0x20B1	; 0x8020b1 <integralFBx+0x2>
    1558:	50 91 b2 20 	lds	r21, 0x20B2	; 0x8020b2 <integralFBx+0x3>
    155c:	69 85       	ldd	r22, Y+9	; 0x09
    155e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1560:	8b 85       	ldd	r24, Y+11	; 0x0b
    1562:	9c 85       	ldd	r25, Y+12	; 0x0c
    1564:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1568:	69 87       	std	Y+9, r22	; 0x09
    156a:	7a 87       	std	Y+10, r23	; 0x0a
    156c:	8b 87       	std	Y+11, r24	; 0x0b
    156e:	9c 87       	std	Y+12, r25	; 0x0c
			gy += integralFBy;
    1570:	20 91 ab 20 	lds	r18, 0x20AB	; 0x8020ab <integralFBy>
    1574:	30 91 ac 20 	lds	r19, 0x20AC	; 0x8020ac <integralFBy+0x1>
    1578:	40 91 ad 20 	lds	r20, 0x20AD	; 0x8020ad <integralFBy+0x2>
    157c:	50 91 ae 20 	lds	r21, 0x20AE	; 0x8020ae <integralFBy+0x3>
    1580:	6d 85       	ldd	r22, Y+13	; 0x0d
    1582:	7e 85       	ldd	r23, Y+14	; 0x0e
    1584:	8f 85       	ldd	r24, Y+15	; 0x0f
    1586:	98 89       	ldd	r25, Y+16	; 0x10
    1588:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    158c:	6d 87       	std	Y+13, r22	; 0x0d
    158e:	7e 87       	std	Y+14, r23	; 0x0e
    1590:	8f 87       	std	Y+15, r24	; 0x0f
    1592:	98 8b       	std	Y+16, r25	; 0x10
			gz += integralFBz;
    1594:	20 91 a7 20 	lds	r18, 0x20A7	; 0x8020a7 <integralFBz>
    1598:	30 91 a8 20 	lds	r19, 0x20A8	; 0x8020a8 <integralFBz+0x1>
    159c:	40 91 a9 20 	lds	r20, 0x20A9	; 0x8020a9 <integralFBz+0x2>
    15a0:	50 91 aa 20 	lds	r21, 0x20AA	; 0x8020aa <integralFBz+0x3>
    15a4:	69 89       	ldd	r22, Y+17	; 0x11
    15a6:	7a 89       	ldd	r23, Y+18	; 0x12
    15a8:	8b 89       	ldd	r24, Y+19	; 0x13
    15aa:	9c 89       	ldd	r25, Y+20	; 0x14
    15ac:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    15b0:	69 8b       	std	Y+17, r22	; 0x11
    15b2:	7a 8b       	std	Y+18, r23	; 0x12
    15b4:	8b 8b       	std	Y+19, r24	; 0x13
    15b6:	9c 8b       	std	Y+20, r25	; 0x14
    15b8:	18 c0       	rjmp	.+48     	; 0x15ea <MahonyAHRSupdateIMU+0x4ae>
		}
		else {
			integralFBx = 0.0;	// prevent integral windup
    15ba:	10 92 af 20 	sts	0x20AF, r1	; 0x8020af <integralFBx>
    15be:	10 92 b0 20 	sts	0x20B0, r1	; 0x8020b0 <integralFBx+0x1>
    15c2:	10 92 b1 20 	sts	0x20B1, r1	; 0x8020b1 <integralFBx+0x2>
    15c6:	10 92 b2 20 	sts	0x20B2, r1	; 0x8020b2 <integralFBx+0x3>
			integralFBy = 0.0;
    15ca:	10 92 ab 20 	sts	0x20AB, r1	; 0x8020ab <integralFBy>
    15ce:	10 92 ac 20 	sts	0x20AC, r1	; 0x8020ac <integralFBy+0x1>
    15d2:	10 92 ad 20 	sts	0x20AD, r1	; 0x8020ad <integralFBy+0x2>
    15d6:	10 92 ae 20 	sts	0x20AE, r1	; 0x8020ae <integralFBy+0x3>
			integralFBz = 0.0;
    15da:	10 92 a7 20 	sts	0x20A7, r1	; 0x8020a7 <integralFBz>
    15de:	10 92 a8 20 	sts	0x20A8, r1	; 0x8020a8 <integralFBz+0x1>
    15e2:	10 92 a9 20 	sts	0x20A9, r1	; 0x8020a9 <integralFBz+0x2>
    15e6:	10 92 aa 20 	sts	0x20AA, r1	; 0x8020aa <integralFBz+0x3>
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
    15ea:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <twoKp>
    15ee:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <twoKp+0x1>
    15f2:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <twoKp+0x2>
    15f6:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <twoKp+0x3>
    15fa:	69 a1       	ldd	r22, Y+33	; 0x21
    15fc:	7a a1       	ldd	r23, Y+34	; 0x22
    15fe:	8b a1       	ldd	r24, Y+35	; 0x23
    1600:	9c a1       	ldd	r25, Y+36	; 0x24
    1602:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1606:	9b 01       	movw	r18, r22
    1608:	ac 01       	movw	r20, r24
    160a:	69 85       	ldd	r22, Y+9	; 0x09
    160c:	7a 85       	ldd	r23, Y+10	; 0x0a
    160e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1610:	9c 85       	ldd	r25, Y+12	; 0x0c
    1612:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1616:	69 87       	std	Y+9, r22	; 0x09
    1618:	7a 87       	std	Y+10, r23	; 0x0a
    161a:	8b 87       	std	Y+11, r24	; 0x0b
    161c:	9c 87       	std	Y+12, r25	; 0x0c
		gy += twoKp * halfey;
    161e:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <twoKp>
    1622:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <twoKp+0x1>
    1626:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <twoKp+0x2>
    162a:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <twoKp+0x3>
    162e:	c5 01       	movw	r24, r10
    1630:	b4 01       	movw	r22, r8
    1632:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1636:	9b 01       	movw	r18, r22
    1638:	ac 01       	movw	r20, r24
    163a:	6d 85       	ldd	r22, Y+13	; 0x0d
    163c:	7e 85       	ldd	r23, Y+14	; 0x0e
    163e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1640:	98 89       	ldd	r25, Y+16	; 0x10
    1642:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1646:	6d 87       	std	Y+13, r22	; 0x0d
    1648:	7e 87       	std	Y+14, r23	; 0x0e
    164a:	8f 87       	std	Y+15, r24	; 0x0f
    164c:	98 8b       	std	Y+16, r25	; 0x10
		gz += twoKp * halfez;
    164e:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <twoKp>
    1652:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <twoKp+0x1>
    1656:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <twoKp+0x2>
    165a:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <twoKp+0x3>
    165e:	c7 01       	movw	r24, r14
    1660:	b6 01       	movw	r22, r12
    1662:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1666:	9b 01       	movw	r18, r22
    1668:	ac 01       	movw	r20, r24
    166a:	69 89       	ldd	r22, Y+17	; 0x11
    166c:	7a 89       	ldd	r23, Y+18	; 0x12
    166e:	8b 89       	ldd	r24, Y+19	; 0x13
    1670:	9c 89       	ldd	r25, Y+20	; 0x14
    1672:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1676:	69 8b       	std	Y+17, r22	; 0x11
    1678:	7a 8b       	std	Y+18, r23	; 0x12
    167a:	8b 8b       	std	Y+19, r24	; 0x13
    167c:	9c 8b       	std	Y+20, r25	; 0x14
	}
	
	// Integrate rate of change of quaternion
	gx *= (0.5 * (1.0 / sampleFreq));		// pre-multiply common factors
    167e:	2a ef       	ldi	r18, 0xFA	; 250
    1680:	39 ec       	ldi	r19, 0xC9	; 201
    1682:	44 eb       	ldi	r20, 0xB4	; 180
    1684:	58 e3       	ldi	r21, 0x38	; 56
    1686:	69 85       	ldd	r22, Y+9	; 0x09
    1688:	7a 85       	ldd	r23, Y+10	; 0x0a
    168a:	8b 85       	ldd	r24, Y+11	; 0x0b
    168c:	9c 85       	ldd	r25, Y+12	; 0x0c
    168e:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1692:	69 87       	std	Y+9, r22	; 0x09
    1694:	7a 87       	std	Y+10, r23	; 0x0a
    1696:	8b 87       	std	Y+11, r24	; 0x0b
    1698:	9c 87       	std	Y+12, r25	; 0x0c
	gy *= (0.5 * (1.0 / sampleFreq));
    169a:	2a ef       	ldi	r18, 0xFA	; 250
    169c:	39 ec       	ldi	r19, 0xC9	; 201
    169e:	44 eb       	ldi	r20, 0xB4	; 180
    16a0:	58 e3       	ldi	r21, 0x38	; 56
    16a2:	6d 85       	ldd	r22, Y+13	; 0x0d
    16a4:	7e 85       	ldd	r23, Y+14	; 0x0e
    16a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16a8:	98 89       	ldd	r25, Y+16	; 0x10
    16aa:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    16ae:	6d 87       	std	Y+13, r22	; 0x0d
    16b0:	7e 87       	std	Y+14, r23	; 0x0e
    16b2:	8f 87       	std	Y+15, r24	; 0x0f
    16b4:	98 8b       	std	Y+16, r25	; 0x10
	gz *= (0.5 * (1.0 / sampleFreq));
    16b6:	2a ef       	ldi	r18, 0xFA	; 250
    16b8:	39 ec       	ldi	r19, 0xC9	; 201
    16ba:	44 eb       	ldi	r20, 0xB4	; 180
    16bc:	58 e3       	ldi	r21, 0x38	; 56
    16be:	69 89       	ldd	r22, Y+17	; 0x11
    16c0:	7a 89       	ldd	r23, Y+18	; 0x12
    16c2:	8b 89       	ldd	r24, Y+19	; 0x13
    16c4:	9c 89       	ldd	r25, Y+20	; 0x14
    16c6:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    16ca:	69 8b       	std	Y+17, r22	; 0x11
    16cc:	7a 8b       	std	Y+18, r23	; 0x12
    16ce:	8b 8b       	std	Y+19, r24	; 0x13
    16d0:	9c 8b       	std	Y+20, r25	; 0x14
	qa = q0;
    16d2:	e0 90 18 20 	lds	r14, 0x2018	; 0x802018 <q0>
    16d6:	f0 90 19 20 	lds	r15, 0x2019	; 0x802019 <q0+0x1>
    16da:	00 91 1a 20 	lds	r16, 0x201A	; 0x80201a <q0+0x2>
    16de:	10 91 1b 20 	lds	r17, 0x201B	; 0x80201b <q0+0x3>
    16e2:	ed 82       	std	Y+5, r14	; 0x05
    16e4:	fe 82       	std	Y+6, r15	; 0x06
    16e6:	0f 83       	std	Y+7, r16	; 0x07
    16e8:	18 87       	std	Y+8, r17	; 0x08
	qb = q1;
    16ea:	80 90 bb 20 	lds	r8, 0x20BB	; 0x8020bb <q1>
    16ee:	90 90 bc 20 	lds	r9, 0x20BC	; 0x8020bc <q1+0x1>
    16f2:	a0 90 bd 20 	lds	r10, 0x20BD	; 0x8020bd <q1+0x2>
    16f6:	b0 90 be 20 	lds	r11, 0x20BE	; 0x8020be <q1+0x3>
	qc = q2;
    16fa:	e0 90 b7 20 	lds	r14, 0x20B7	; 0x8020b7 <q2>
    16fe:	f0 90 b8 20 	lds	r15, 0x20B8	; 0x8020b8 <q2+0x1>
    1702:	00 91 b9 20 	lds	r16, 0x20B9	; 0x8020b9 <q2+0x2>
    1706:	10 91 ba 20 	lds	r17, 0x20BA	; 0x8020ba <q2+0x3>
    170a:	ed 8a       	std	Y+21, r14	; 0x15
    170c:	fe 8a       	std	Y+22, r15	; 0x16
    170e:	0f 8b       	std	Y+23, r16	; 0x17
    1710:	18 8f       	std	Y+24, r17	; 0x18
	q0 += (-qb * gx - qc * gy - q3 * gz);
    1712:	40 90 b3 20 	lds	r4, 0x20B3	; 0x8020b3 <q3>
    1716:	50 90 b4 20 	lds	r5, 0x20B4	; 0x8020b4 <q3+0x1>
    171a:	60 90 b5 20 	lds	r6, 0x20B5	; 0x8020b5 <q3+0x2>
    171e:	70 90 b6 20 	lds	r7, 0x20B6	; 0x8020b6 <q3+0x3>
    1722:	c0 90 18 20 	lds	r12, 0x2018	; 0x802018 <q0>
    1726:	d0 90 19 20 	lds	r13, 0x2019	; 0x802019 <q0+0x1>
    172a:	e0 90 1a 20 	lds	r14, 0x201A	; 0x80201a <q0+0x2>
    172e:	f0 90 1b 20 	lds	r15, 0x201B	; 0x80201b <q0+0x3>
    1732:	c5 01       	movw	r24, r10
    1734:	b4 01       	movw	r22, r8
    1736:	90 58       	subi	r25, 0x80	; 128
    1738:	29 85       	ldd	r18, Y+9	; 0x09
    173a:	3a 85       	ldd	r19, Y+10	; 0x0a
    173c:	4b 85       	ldd	r20, Y+11	; 0x0b
    173e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1740:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1744:	69 83       	std	Y+1, r22	; 0x01
    1746:	7a 83       	std	Y+2, r23	; 0x02
    1748:	8b 83       	std	Y+3, r24	; 0x03
    174a:	9c 83       	std	Y+4, r25	; 0x04
    174c:	2d 89       	ldd	r18, Y+21	; 0x15
    174e:	3e 89       	ldd	r19, Y+22	; 0x16
    1750:	4f 89       	ldd	r20, Y+23	; 0x17
    1752:	58 8d       	ldd	r21, Y+24	; 0x18
    1754:	6d 85       	ldd	r22, Y+13	; 0x0d
    1756:	7e 85       	ldd	r23, Y+14	; 0x0e
    1758:	8f 85       	ldd	r24, Y+15	; 0x0f
    175a:	98 89       	ldd	r25, Y+16	; 0x10
    175c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1760:	9b 01       	movw	r18, r22
    1762:	ac 01       	movw	r20, r24
    1764:	69 81       	ldd	r22, Y+1	; 0x01
    1766:	7a 81       	ldd	r23, Y+2	; 0x02
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	9c 81       	ldd	r25, Y+4	; 0x04
    176c:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    1770:	69 83       	std	Y+1, r22	; 0x01
    1772:	7a 83       	std	Y+2, r23	; 0x02
    1774:	8b 83       	std	Y+3, r24	; 0x03
    1776:	9c 83       	std	Y+4, r25	; 0x04
    1778:	a3 01       	movw	r20, r6
    177a:	92 01       	movw	r18, r4
    177c:	69 89       	ldd	r22, Y+17	; 0x11
    177e:	7a 89       	ldd	r23, Y+18	; 0x12
    1780:	8b 89       	ldd	r24, Y+19	; 0x13
    1782:	9c 89       	ldd	r25, Y+20	; 0x14
    1784:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1788:	9b 01       	movw	r18, r22
    178a:	ac 01       	movw	r20, r24
    178c:	69 81       	ldd	r22, Y+1	; 0x01
    178e:	7a 81       	ldd	r23, Y+2	; 0x02
    1790:	8b 81       	ldd	r24, Y+3	; 0x03
    1792:	9c 81       	ldd	r25, Y+4	; 0x04
    1794:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    1798:	a7 01       	movw	r20, r14
    179a:	96 01       	movw	r18, r12
    179c:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    17a0:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <q0>
    17a4:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <q0+0x1>
    17a8:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <q0+0x2>
    17ac:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <q0+0x3>
	q1 += (qa * gx + qc * gz - q3 * gy);
    17b0:	40 90 b3 20 	lds	r4, 0x20B3	; 0x8020b3 <q3>
    17b4:	50 90 b4 20 	lds	r5, 0x20B4	; 0x8020b4 <q3+0x1>
    17b8:	60 90 b5 20 	lds	r6, 0x20B5	; 0x8020b5 <q3+0x2>
    17bc:	70 90 b6 20 	lds	r7, 0x20B6	; 0x8020b6 <q3+0x3>
    17c0:	c0 90 bb 20 	lds	r12, 0x20BB	; 0x8020bb <q1>
    17c4:	d0 90 bc 20 	lds	r13, 0x20BC	; 0x8020bc <q1+0x1>
    17c8:	e0 90 bd 20 	lds	r14, 0x20BD	; 0x8020bd <q1+0x2>
    17cc:	f0 90 be 20 	lds	r15, 0x20BE	; 0x8020be <q1+0x3>
    17d0:	2d 81       	ldd	r18, Y+5	; 0x05
    17d2:	3e 81       	ldd	r19, Y+6	; 0x06
    17d4:	4f 81       	ldd	r20, Y+7	; 0x07
    17d6:	58 85       	ldd	r21, Y+8	; 0x08
    17d8:	69 85       	ldd	r22, Y+9	; 0x09
    17da:	7a 85       	ldd	r23, Y+10	; 0x0a
    17dc:	8b 85       	ldd	r24, Y+11	; 0x0b
    17de:	9c 85       	ldd	r25, Y+12	; 0x0c
    17e0:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    17e4:	69 83       	std	Y+1, r22	; 0x01
    17e6:	7a 83       	std	Y+2, r23	; 0x02
    17e8:	8b 83       	std	Y+3, r24	; 0x03
    17ea:	9c 83       	std	Y+4, r25	; 0x04
    17ec:	2d 89       	ldd	r18, Y+21	; 0x15
    17ee:	3e 89       	ldd	r19, Y+22	; 0x16
    17f0:	4f 89       	ldd	r20, Y+23	; 0x17
    17f2:	58 8d       	ldd	r21, Y+24	; 0x18
    17f4:	69 89       	ldd	r22, Y+17	; 0x11
    17f6:	7a 89       	ldd	r23, Y+18	; 0x12
    17f8:	8b 89       	ldd	r24, Y+19	; 0x13
    17fa:	9c 89       	ldd	r25, Y+20	; 0x14
    17fc:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1800:	9b 01       	movw	r18, r22
    1802:	ac 01       	movw	r20, r24
    1804:	69 81       	ldd	r22, Y+1	; 0x01
    1806:	7a 81       	ldd	r23, Y+2	; 0x02
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1810:	69 83       	std	Y+1, r22	; 0x01
    1812:	7a 83       	std	Y+2, r23	; 0x02
    1814:	8b 83       	std	Y+3, r24	; 0x03
    1816:	9c 83       	std	Y+4, r25	; 0x04
    1818:	a3 01       	movw	r20, r6
    181a:	92 01       	movw	r18, r4
    181c:	6d 85       	ldd	r22, Y+13	; 0x0d
    181e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1820:	8f 85       	ldd	r24, Y+15	; 0x0f
    1822:	98 89       	ldd	r25, Y+16	; 0x10
    1824:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1828:	9b 01       	movw	r18, r22
    182a:	ac 01       	movw	r20, r24
    182c:	69 81       	ldd	r22, Y+1	; 0x01
    182e:	7a 81       	ldd	r23, Y+2	; 0x02
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    1838:	a7 01       	movw	r20, r14
    183a:	96 01       	movw	r18, r12
    183c:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1840:	60 93 bb 20 	sts	0x20BB, r22	; 0x8020bb <q1>
    1844:	70 93 bc 20 	sts	0x20BC, r23	; 0x8020bc <q1+0x1>
    1848:	80 93 bd 20 	sts	0x20BD, r24	; 0x8020bd <q1+0x2>
    184c:	90 93 be 20 	sts	0x20BE, r25	; 0x8020be <q1+0x3>
	q2 += (qa * gy - qb * gz + q3 * gx);
    1850:	40 90 b3 20 	lds	r4, 0x20B3	; 0x8020b3 <q3>
    1854:	50 90 b4 20 	lds	r5, 0x20B4	; 0x8020b4 <q3+0x1>
    1858:	60 90 b5 20 	lds	r6, 0x20B5	; 0x8020b5 <q3+0x2>
    185c:	70 90 b6 20 	lds	r7, 0x20B6	; 0x8020b6 <q3+0x3>
    1860:	c0 90 b7 20 	lds	r12, 0x20B7	; 0x8020b7 <q2>
    1864:	d0 90 b8 20 	lds	r13, 0x20B8	; 0x8020b8 <q2+0x1>
    1868:	e0 90 b9 20 	lds	r14, 0x20B9	; 0x8020b9 <q2+0x2>
    186c:	f0 90 ba 20 	lds	r15, 0x20BA	; 0x8020ba <q2+0x3>
    1870:	2d 81       	ldd	r18, Y+5	; 0x05
    1872:	3e 81       	ldd	r19, Y+6	; 0x06
    1874:	4f 81       	ldd	r20, Y+7	; 0x07
    1876:	58 85       	ldd	r21, Y+8	; 0x08
    1878:	6d 85       	ldd	r22, Y+13	; 0x0d
    187a:	7e 85       	ldd	r23, Y+14	; 0x0e
    187c:	8f 85       	ldd	r24, Y+15	; 0x0f
    187e:	98 89       	ldd	r25, Y+16	; 0x10
    1880:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1884:	69 83       	std	Y+1, r22	; 0x01
    1886:	7a 83       	std	Y+2, r23	; 0x02
    1888:	8b 83       	std	Y+3, r24	; 0x03
    188a:	9c 83       	std	Y+4, r25	; 0x04
    188c:	a5 01       	movw	r20, r10
    188e:	94 01       	movw	r18, r8
    1890:	69 89       	ldd	r22, Y+17	; 0x11
    1892:	7a 89       	ldd	r23, Y+18	; 0x12
    1894:	8b 89       	ldd	r24, Y+19	; 0x13
    1896:	9c 89       	ldd	r25, Y+20	; 0x14
    1898:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    189c:	9b 01       	movw	r18, r22
    189e:	ac 01       	movw	r20, r24
    18a0:	69 81       	ldd	r22, Y+1	; 0x01
    18a2:	7a 81       	ldd	r23, Y+2	; 0x02
    18a4:	8b 81       	ldd	r24, Y+3	; 0x03
    18a6:	9c 81       	ldd	r25, Y+4	; 0x04
    18a8:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    18ac:	69 83       	std	Y+1, r22	; 0x01
    18ae:	7a 83       	std	Y+2, r23	; 0x02
    18b0:	8b 83       	std	Y+3, r24	; 0x03
    18b2:	9c 83       	std	Y+4, r25	; 0x04
    18b4:	a3 01       	movw	r20, r6
    18b6:	92 01       	movw	r18, r4
    18b8:	69 85       	ldd	r22, Y+9	; 0x09
    18ba:	7a 85       	ldd	r23, Y+10	; 0x0a
    18bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    18be:	9c 85       	ldd	r25, Y+12	; 0x0c
    18c0:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    18c4:	9b 01       	movw	r18, r22
    18c6:	ac 01       	movw	r20, r24
    18c8:	69 81       	ldd	r22, Y+1	; 0x01
    18ca:	7a 81       	ldd	r23, Y+2	; 0x02
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	9c 81       	ldd	r25, Y+4	; 0x04
    18d0:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    18d4:	a7 01       	movw	r20, r14
    18d6:	96 01       	movw	r18, r12
    18d8:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    18dc:	60 93 b7 20 	sts	0x20B7, r22	; 0x8020b7 <q2>
    18e0:	70 93 b8 20 	sts	0x20B8, r23	; 0x8020b8 <q2+0x1>
    18e4:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <q2+0x2>
    18e8:	90 93 ba 20 	sts	0x20BA, r25	; 0x8020ba <q2+0x3>
	q3 += (qa * gz + qb * gy - qc * gx); 
    18ec:	c0 90 b3 20 	lds	r12, 0x20B3	; 0x8020b3 <q3>
    18f0:	d0 90 b4 20 	lds	r13, 0x20B4	; 0x8020b4 <q3+0x1>
    18f4:	e0 90 b5 20 	lds	r14, 0x20B5	; 0x8020b5 <q3+0x2>
    18f8:	f0 90 b6 20 	lds	r15, 0x20B6	; 0x8020b6 <q3+0x3>
    18fc:	2d 81       	ldd	r18, Y+5	; 0x05
    18fe:	3e 81       	ldd	r19, Y+6	; 0x06
    1900:	4f 81       	ldd	r20, Y+7	; 0x07
    1902:	58 85       	ldd	r21, Y+8	; 0x08
    1904:	69 89       	ldd	r22, Y+17	; 0x11
    1906:	7a 89       	ldd	r23, Y+18	; 0x12
    1908:	8b 89       	ldd	r24, Y+19	; 0x13
    190a:	9c 89       	ldd	r25, Y+20	; 0x14
    190c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1910:	2b 01       	movw	r4, r22
    1912:	3c 01       	movw	r6, r24
    1914:	a5 01       	movw	r20, r10
    1916:	94 01       	movw	r18, r8
    1918:	6d 85       	ldd	r22, Y+13	; 0x0d
    191a:	7e 85       	ldd	r23, Y+14	; 0x0e
    191c:	8f 85       	ldd	r24, Y+15	; 0x0f
    191e:	98 89       	ldd	r25, Y+16	; 0x10
    1920:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1924:	9b 01       	movw	r18, r22
    1926:	ac 01       	movw	r20, r24
    1928:	c3 01       	movw	r24, r6
    192a:	b2 01       	movw	r22, r4
    192c:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1930:	4b 01       	movw	r8, r22
    1932:	5c 01       	movw	r10, r24
    1934:	2d 89       	ldd	r18, Y+21	; 0x15
    1936:	3e 89       	ldd	r19, Y+22	; 0x16
    1938:	4f 89       	ldd	r20, Y+23	; 0x17
    193a:	58 8d       	ldd	r21, Y+24	; 0x18
    193c:	69 85       	ldd	r22, Y+9	; 0x09
    193e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1940:	8b 85       	ldd	r24, Y+11	; 0x0b
    1942:	9c 85       	ldd	r25, Y+12	; 0x0c
    1944:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1948:	9b 01       	movw	r18, r22
    194a:	ac 01       	movw	r20, r24
    194c:	c5 01       	movw	r24, r10
    194e:	b4 01       	movw	r22, r8
    1950:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    1954:	a7 01       	movw	r20, r14
    1956:	96 01       	movw	r18, r12
    1958:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    195c:	60 93 b3 20 	sts	0x20B3, r22	; 0x8020b3 <q3>
    1960:	70 93 b4 20 	sts	0x20B4, r23	; 0x8020b4 <q3+0x1>
    1964:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <q3+0x2>
    1968:	90 93 b6 20 	sts	0x20B6, r25	; 0x8020b6 <q3+0x3>
	
	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    196c:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
    1970:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
    1974:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
    1978:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
    197c:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <q0>
    1980:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <q0+0x1>
    1984:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <q0+0x2>
    1988:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <q0+0x3>
    198c:	80 90 bb 20 	lds	r8, 0x20BB	; 0x8020bb <q1>
    1990:	90 90 bc 20 	lds	r9, 0x20BC	; 0x8020bc <q1+0x1>
    1994:	a0 90 bd 20 	lds	r10, 0x20BD	; 0x8020bd <q1+0x2>
    1998:	b0 90 be 20 	lds	r11, 0x20BE	; 0x8020be <q1+0x3>
    199c:	40 90 bb 20 	lds	r4, 0x20BB	; 0x8020bb <q1>
    19a0:	50 90 bc 20 	lds	r5, 0x20BC	; 0x8020bc <q1+0x1>
    19a4:	60 90 bd 20 	lds	r6, 0x20BD	; 0x8020bd <q1+0x2>
    19a8:	70 90 be 20 	lds	r7, 0x20BE	; 0x8020be <q1+0x3>
    19ac:	e0 90 b7 20 	lds	r14, 0x20B7	; 0x8020b7 <q2>
    19b0:	f0 90 b8 20 	lds	r15, 0x20B8	; 0x8020b8 <q2+0x1>
    19b4:	00 91 b9 20 	lds	r16, 0x20B9	; 0x8020b9 <q2+0x2>
    19b8:	10 91 ba 20 	lds	r17, 0x20BA	; 0x8020ba <q2+0x3>
    19bc:	e9 86       	std	Y+9, r14	; 0x09
    19be:	fa 86       	std	Y+10, r15	; 0x0a
    19c0:	0b 87       	std	Y+11, r16	; 0x0b
    19c2:	1c 87       	std	Y+12, r17	; 0x0c
    19c4:	e0 90 b7 20 	lds	r14, 0x20B7	; 0x8020b7 <q2>
    19c8:	f0 90 b8 20 	lds	r15, 0x20B8	; 0x8020b8 <q2+0x1>
    19cc:	00 91 b9 20 	lds	r16, 0x20B9	; 0x8020b9 <q2+0x2>
    19d0:	10 91 ba 20 	lds	r17, 0x20BA	; 0x8020ba <q2+0x3>
    19d4:	ed 86       	std	Y+13, r14	; 0x0d
    19d6:	fe 86       	std	Y+14, r15	; 0x0e
    19d8:	0f 87       	std	Y+15, r16	; 0x0f
    19da:	18 8b       	std	Y+16, r17	; 0x10
    19dc:	e0 90 b3 20 	lds	r14, 0x20B3	; 0x8020b3 <q3>
    19e0:	f0 90 b4 20 	lds	r15, 0x20B4	; 0x8020b4 <q3+0x1>
    19e4:	00 91 b5 20 	lds	r16, 0x20B5	; 0x8020b5 <q3+0x2>
    19e8:	10 91 b6 20 	lds	r17, 0x20B6	; 0x8020b6 <q3+0x3>
    19ec:	e9 82       	std	Y+1, r14	; 0x01
    19ee:	fa 82       	std	Y+2, r15	; 0x02
    19f0:	0b 83       	std	Y+3, r16	; 0x03
    19f2:	1c 83       	std	Y+4, r17	; 0x04
    19f4:	e0 90 b3 20 	lds	r14, 0x20B3	; 0x8020b3 <q3>
    19f8:	f0 90 b4 20 	lds	r15, 0x20B4	; 0x8020b4 <q3+0x1>
    19fc:	00 91 b5 20 	lds	r16, 0x20B5	; 0x8020b5 <q3+0x2>
    1a00:	10 91 b6 20 	lds	r17, 0x20B6	; 0x8020b6 <q3+0x3>
    1a04:	e9 8a       	std	Y+17, r14	; 0x11
    1a06:	fa 8a       	std	Y+18, r15	; 0x12
    1a08:	0b 8b       	std	Y+19, r16	; 0x13
    1a0a:	1c 8b       	std	Y+20, r17	; 0x14
    1a0c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1a10:	6b 01       	movw	r12, r22
    1a12:	7c 01       	movw	r14, r24
    1a14:	a3 01       	movw	r20, r6
    1a16:	92 01       	movw	r18, r4
    1a18:	c5 01       	movw	r24, r10
    1a1a:	b4 01       	movw	r22, r8
    1a1c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1a20:	9b 01       	movw	r18, r22
    1a22:	ac 01       	movw	r20, r24
    1a24:	c7 01       	movw	r24, r14
    1a26:	b6 01       	movw	r22, r12
    1a28:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1a2c:	4b 01       	movw	r8, r22
    1a2e:	5c 01       	movw	r10, r24
    1a30:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a32:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a34:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a36:	58 89       	ldd	r21, Y+16	; 0x10
    1a38:	69 85       	ldd	r22, Y+9	; 0x09
    1a3a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a40:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1a44:	9b 01       	movw	r18, r22
    1a46:	ac 01       	movw	r20, r24
    1a48:	c5 01       	movw	r24, r10
    1a4a:	b4 01       	movw	r22, r8
    1a4c:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1a50:	4b 01       	movw	r8, r22
    1a52:	5c 01       	movw	r10, r24
    1a54:	29 89       	ldd	r18, Y+17	; 0x11
    1a56:	3a 89       	ldd	r19, Y+18	; 0x12
    1a58:	4b 89       	ldd	r20, Y+19	; 0x13
    1a5a:	5c 89       	ldd	r21, Y+20	; 0x14
    1a5c:	69 81       	ldd	r22, Y+1	; 0x01
    1a5e:	7a 81       	ldd	r23, Y+2	; 0x02
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1a68:	9b 01       	movw	r18, r22
    1a6a:	ac 01       	movw	r20, r24
    1a6c:	c5 01       	movw	r24, r10
    1a6e:	b4 01       	movw	r22, r8
    1a70:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1a74:	28 db       	rcall	.-2480   	; 0x10c6 <invSqrt>
    1a76:	6b 01       	movw	r12, r22
    1a78:	7c 01       	movw	r14, r24
	q0 *= recipNorm;
    1a7a:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <q0>
    1a7e:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <q0+0x1>
    1a82:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <q0+0x2>
    1a86:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <q0+0x3>
    1a8a:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1a8e:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <q0>
    1a92:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <q0+0x1>
    1a96:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <q0+0x2>
    1a9a:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <q0+0x3>
	q1 *= recipNorm;
    1a9e:	20 91 bb 20 	lds	r18, 0x20BB	; 0x8020bb <q1>
    1aa2:	30 91 bc 20 	lds	r19, 0x20BC	; 0x8020bc <q1+0x1>
    1aa6:	40 91 bd 20 	lds	r20, 0x20BD	; 0x8020bd <q1+0x2>
    1aaa:	50 91 be 20 	lds	r21, 0x20BE	; 0x8020be <q1+0x3>
    1aae:	c7 01       	movw	r24, r14
    1ab0:	b6 01       	movw	r22, r12
    1ab2:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1ab6:	60 93 bb 20 	sts	0x20BB, r22	; 0x8020bb <q1>
    1aba:	70 93 bc 20 	sts	0x20BC, r23	; 0x8020bc <q1+0x1>
    1abe:	80 93 bd 20 	sts	0x20BD, r24	; 0x8020bd <q1+0x2>
    1ac2:	90 93 be 20 	sts	0x20BE, r25	; 0x8020be <q1+0x3>
	q2 *= recipNorm;
    1ac6:	20 91 b7 20 	lds	r18, 0x20B7	; 0x8020b7 <q2>
    1aca:	30 91 b8 20 	lds	r19, 0x20B8	; 0x8020b8 <q2+0x1>
    1ace:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <q2+0x2>
    1ad2:	50 91 ba 20 	lds	r21, 0x20BA	; 0x8020ba <q2+0x3>
    1ad6:	c7 01       	movw	r24, r14
    1ad8:	b6 01       	movw	r22, r12
    1ada:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1ade:	60 93 b7 20 	sts	0x20B7, r22	; 0x8020b7 <q2>
    1ae2:	70 93 b8 20 	sts	0x20B8, r23	; 0x8020b8 <q2+0x1>
    1ae6:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <q2+0x2>
    1aea:	90 93 ba 20 	sts	0x20BA, r25	; 0x8020ba <q2+0x3>
	q3 *= recipNorm;
    1aee:	20 91 b3 20 	lds	r18, 0x20B3	; 0x8020b3 <q3>
    1af2:	30 91 b4 20 	lds	r19, 0x20B4	; 0x8020b4 <q3+0x1>
    1af6:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <q3+0x2>
    1afa:	50 91 b6 20 	lds	r21, 0x20B6	; 0x8020b6 <q3+0x3>
    1afe:	c7 01       	movw	r24, r14
    1b00:	b6 01       	movw	r22, r12
    1b02:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1b06:	60 93 b3 20 	sts	0x20B3, r22	; 0x8020b3 <q3>
    1b0a:	70 93 b4 20 	sts	0x20B4, r23	; 0x8020b4 <q3+0x1>
    1b0e:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <q3+0x2>
    1b12:	90 93 b6 20 	sts	0x20B6, r25	; 0x8020b6 <q3+0x3>
}
    1b16:	a4 96       	adiw	r28, 0x24	; 36
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	ff 90       	pop	r15
    1b26:	ef 90       	pop	r14
    1b28:	df 90       	pop	r13
    1b2a:	cf 90       	pop	r12
    1b2c:	bf 90       	pop	r11
    1b2e:	af 90       	pop	r10
    1b30:	9f 90       	pop	r9
    1b32:	8f 90       	pop	r8
    1b34:	7f 90       	pop	r7
    1b36:	6f 90       	pop	r6
    1b38:	5f 90       	pop	r5
    1b3a:	4f 90       	pop	r4
    1b3c:	08 95       	ret

00001b3e <MahonyAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MahonyAHRSupdate(double gx, double gy, double gz, double ax, double ay, double az, double mx, double my, double mz) {
    1b3e:	2f 92       	push	r2
    1b40:	3f 92       	push	r3
    1b42:	4f 92       	push	r4
    1b44:	5f 92       	push	r5
    1b46:	6f 92       	push	r6
    1b48:	7f 92       	push	r7
    1b4a:	8f 92       	push	r8
    1b4c:	9f 92       	push	r9
    1b4e:	af 92       	push	r10
    1b50:	bf 92       	push	r11
    1b52:	cf 92       	push	r12
    1b54:	df 92       	push	r13
    1b56:	ef 92       	push	r14
    1b58:	ff 92       	push	r15
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	cd b7       	in	r28, 0x3d	; 61
    1b64:	de b7       	in	r29, 0x3e	; 62
    1b66:	c8 55       	subi	r28, 0x58	; 88
    1b68:	d1 09       	sbc	r29, r1
    1b6a:	cd bf       	out	0x3d, r28	; 61
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	69 8b       	std	Y+17, r22	; 0x11
    1b70:	7a 8b       	std	Y+18, r23	; 0x12
    1b72:	8b 8b       	std	Y+19, r24	; 0x13
    1b74:	9c 8b       	std	Y+20, r25	; 0x14
    1b76:	29 8f       	std	Y+25, r18	; 0x19
    1b78:	3a 8f       	std	Y+26, r19	; 0x1a
    1b7a:	4b 8f       	std	Y+27, r20	; 0x1b
    1b7c:	5c 8f       	std	Y+28, r21	; 0x1c
    1b7e:	e9 82       	std	Y+1, r14	; 0x01
    1b80:	fa 82       	std	Y+2, r15	; 0x02
    1b82:	0b 83       	std	Y+3, r16	; 0x03
    1b84:	1c 83       	std	Y+4, r17	; 0x04
    1b86:	af 96       	adiw	r28, 0x2f	; 47
    1b88:	ff ac       	ldd	r15, Y+63	; 0x3f
    1b8a:	af 97       	sbiw	r28, 0x2f	; 47
    1b8c:	e0 96       	adiw	r28, 0x30	; 48
    1b8e:	ef ac       	ldd	r14, Y+63	; 0x3f
    1b90:	e0 97       	sbiw	r28, 0x30	; 48
    1b92:	e1 96       	adiw	r28, 0x31	; 49
    1b94:	9f ac       	ldd	r9, Y+63	; 0x3f
    1b96:	e1 97       	sbiw	r28, 0x31	; 49
    1b98:	e2 96       	adiw	r28, 0x32	; 50
    1b9a:	8f ac       	ldd	r8, Y+63	; 0x3f
    1b9c:	e2 97       	sbiw	r28, 0x32	; 50
    1b9e:	e3 96       	adiw	r28, 0x33	; 51
    1ba0:	1f ad       	ldd	r17, Y+63	; 0x3f
    1ba2:	e3 97       	sbiw	r28, 0x33	; 51
    1ba4:	e4 96       	adiw	r28, 0x34	; 52
    1ba6:	0f ad       	ldd	r16, Y+63	; 0x3f
    1ba8:	e4 97       	sbiw	r28, 0x34	; 52
    1baa:	e5 96       	adiw	r28, 0x35	; 53
    1bac:	3f ac       	ldd	r3, Y+63	; 0x3f
    1bae:	e5 97       	sbiw	r28, 0x35	; 53
    1bb0:	e6 96       	adiw	r28, 0x36	; 54
    1bb2:	2f ac       	ldd	r2, Y+63	; 0x3f
    1bb4:	e6 97       	sbiw	r28, 0x36	; 54
	double halfvx, halfvy, halfvz, halfwx, halfwy, halfwz;
	double halfex, halfey, halfez;
	double qa, qb, qc;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0) && (my == 0.0) && (mz == 0.0)) {
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	a9 01       	movw	r20, r18
    1bbc:	ea 96       	adiw	r28, 0x3a	; 58
    1bbe:	6c ad       	ldd	r22, Y+60	; 0x3c
    1bc0:	7d ad       	ldd	r23, Y+61	; 0x3d
    1bc2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bc4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bc6:	ea 97       	sbiw	r28, 0x3a	; 58
    1bc8:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__cmpsf2>
    1bcc:	81 11       	cpse	r24, r1
    1bce:	34 c0       	rjmp	.+104    	; 0x1c38 <MahonyAHRSupdate+0xfa>
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	a9 01       	movw	r20, r18
    1bd6:	ee 96       	adiw	r28, 0x3e	; 62
    1bd8:	6c ad       	ldd	r22, Y+60	; 0x3c
    1bda:	7d ad       	ldd	r23, Y+61	; 0x3d
    1bdc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bde:	9f ad       	ldd	r25, Y+63	; 0x3f
    1be0:	ee 97       	sbiw	r28, 0x3e	; 62
    1be2:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__cmpsf2>
    1be6:	81 11       	cpse	r24, r1
    1be8:	27 c0       	rjmp	.+78     	; 0x1c38 <MahonyAHRSupdate+0xfa>
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	a9 01       	movw	r20, r18
    1bf0:	c2 58       	subi	r28, 0x82	; 130
    1bf2:	df 4f       	sbci	r29, 0xFF	; 255
    1bf4:	68 81       	ld	r22, Y
    1bf6:	79 81       	ldd	r23, Y+1	; 0x01
    1bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfc:	ce 57       	subi	r28, 0x7E	; 126
    1bfe:	d0 40       	sbci	r29, 0x00	; 0
    1c00:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__cmpsf2>
    1c04:	81 11       	cpse	r24, r1
    1c06:	18 c0       	rjmp	.+48     	; 0x1c38 <MahonyAHRSupdate+0xfa>
		MahonyAHRSupdateIMU(gx, gy, gz, ax, ay, az);
    1c08:	2f 92       	push	r2
    1c0a:	3f 92       	push	r3
    1c0c:	0f 93       	push	r16
    1c0e:	1f 93       	push	r17
    1c10:	8f 92       	push	r8
    1c12:	9f 92       	push	r9
    1c14:	ef 92       	push	r14
    1c16:	ff 92       	push	r15
    1c18:	e9 80       	ldd	r14, Y+1	; 0x01
    1c1a:	fa 80       	ldd	r15, Y+2	; 0x02
    1c1c:	0b 81       	ldd	r16, Y+3	; 0x03
    1c1e:	1c 81       	ldd	r17, Y+4	; 0x04
    1c20:	29 8d       	ldd	r18, Y+25	; 0x19
    1c22:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1c24:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1c26:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1c28:	69 89       	ldd	r22, Y+17	; 0x11
    1c2a:	7a 89       	ldd	r23, Y+18	; 0x12
    1c2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c30:	85 da       	rcall	.-2806   	; 0x113c <MahonyAHRSupdateIMU>
		return;
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	a4 c7       	rjmp	.+3912   	; 0x2b80 <MahonyAHRSupdate+0x1042>
	}

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0) && (ay == 0.0) && (az == 0.0))) {
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	a9 01       	movw	r20, r18
    1c3e:	c6 01       	movw	r24, r12
    1c40:	b5 01       	movw	r22, r10
    1c42:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__cmpsf2>
    1c46:	81 11       	cpse	r24, r1
    1c48:	17 c0       	rjmp	.+46     	; 0x1c78 <MahonyAHRSupdate+0x13a>
    1c4a:	20 e0       	ldi	r18, 0x00	; 0
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	a9 01       	movw	r20, r18
    1c50:	6f 2d       	mov	r22, r15
    1c52:	7e 2d       	mov	r23, r14
    1c54:	89 2d       	mov	r24, r9
    1c56:	98 2d       	mov	r25, r8
    1c58:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__cmpsf2>
    1c5c:	81 11       	cpse	r24, r1
    1c5e:	0c c0       	rjmp	.+24     	; 0x1c78 <MahonyAHRSupdate+0x13a>
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	a9 01       	movw	r20, r18
    1c66:	61 2f       	mov	r22, r17
    1c68:	70 2f       	mov	r23, r16
    1c6a:	83 2d       	mov	r24, r3
    1c6c:	92 2d       	mov	r25, r2
    1c6e:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__cmpsf2>
    1c72:	88 23       	and	r24, r24
    1c74:	09 f4       	brne	.+2      	; 0x1c78 <MahonyAHRSupdate+0x13a>
    1c76:	37 c5       	rjmp	.+2670   	; 0x26e6 <MahonyAHRSupdate+0xba8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    1c78:	a6 01       	movw	r20, r12
    1c7a:	95 01       	movw	r18, r10
    1c7c:	c6 01       	movw	r24, r12
    1c7e:	b5 01       	movw	r22, r10
    1c80:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1c84:	2b 01       	movw	r4, r22
    1c86:	3c 01       	movw	r6, r24
    1c88:	2f 2d       	mov	r18, r15
    1c8a:	3e 2d       	mov	r19, r14
    1c8c:	49 2d       	mov	r20, r9
    1c8e:	58 2d       	mov	r21, r8
    1c90:	6f 2d       	mov	r22, r15
    1c92:	7e 2d       	mov	r23, r14
    1c94:	89 2d       	mov	r24, r9
    1c96:	98 2d       	mov	r25, r8
    1c98:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1c9c:	9b 01       	movw	r18, r22
    1c9e:	ac 01       	movw	r20, r24
    1ca0:	c3 01       	movw	r24, r6
    1ca2:	b2 01       	movw	r22, r4
    1ca4:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1ca8:	2b 01       	movw	r4, r22
    1caa:	3c 01       	movw	r6, r24
    1cac:	21 2f       	mov	r18, r17
    1cae:	30 2f       	mov	r19, r16
    1cb0:	43 2d       	mov	r20, r3
    1cb2:	52 2d       	mov	r21, r2
    1cb4:	61 2f       	mov	r22, r17
    1cb6:	70 2f       	mov	r23, r16
    1cb8:	83 2d       	mov	r24, r3
    1cba:	92 2d       	mov	r25, r2
    1cbc:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1cc0:	9b 01       	movw	r18, r22
    1cc2:	ac 01       	movw	r20, r24
    1cc4:	c3 01       	movw	r24, r6
    1cc6:	b2 01       	movw	r22, r4
    1cc8:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1ccc:	fc d9       	rcall	.-3080   	; 0x10c6 <invSqrt>
    1cce:	2b 01       	movw	r4, r22
    1cd0:	3c 01       	movw	r6, r24
		ax *= recipNorm;
    1cd2:	9b 01       	movw	r18, r22
    1cd4:	ac 01       	movw	r20, r24
    1cd6:	c6 01       	movw	r24, r12
    1cd8:	b5 01       	movw	r22, r10
    1cda:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1cde:	6d ab       	std	Y+53, r22	; 0x35
    1ce0:	7e ab       	std	Y+54, r23	; 0x36
    1ce2:	8f ab       	std	Y+55, r24	; 0x37
    1ce4:	98 af       	std	Y+56, r25	; 0x38
		ay *= recipNorm;
    1ce6:	a3 01       	movw	r20, r6
    1ce8:	92 01       	movw	r18, r4
    1cea:	6f 2d       	mov	r22, r15
    1cec:	7e 2d       	mov	r23, r14
    1cee:	89 2d       	mov	r24, r9
    1cf0:	98 2d       	mov	r25, r8
    1cf2:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1cf6:	69 af       	std	Y+57, r22	; 0x39
    1cf8:	7a af       	std	Y+58, r23	; 0x3a
    1cfa:	8b af       	std	Y+59, r24	; 0x3b
    1cfc:	9c af       	std	Y+60, r25	; 0x3c
		az *= recipNorm;     
    1cfe:	a3 01       	movw	r20, r6
    1d00:	92 01       	movw	r18, r4
    1d02:	61 2f       	mov	r22, r17
    1d04:	70 2f       	mov	r23, r16
    1d06:	83 2d       	mov	r24, r3
    1d08:	92 2d       	mov	r25, r2
    1d0a:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1d0e:	21 96       	adiw	r28, 0x01	; 1
    1d10:	6c af       	std	Y+60, r22	; 0x3c
    1d12:	7d af       	std	Y+61, r23	; 0x3d
    1d14:	8e af       	std	Y+62, r24	; 0x3e
    1d16:	9f af       	std	Y+63, r25	; 0x3f
    1d18:	21 97       	sbiw	r28, 0x01	; 1

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
    1d1a:	ea 96       	adiw	r28, 0x3a	; 58
    1d1c:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d1e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d20:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d22:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d24:	ea 97       	sbiw	r28, 0x3a	; 58
    1d26:	ca 01       	movw	r24, r20
    1d28:	b9 01       	movw	r22, r18
    1d2a:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1d2e:	6b 01       	movw	r12, r22
    1d30:	7c 01       	movw	r14, r24
    1d32:	ee 96       	adiw	r28, 0x3e	; 62
    1d34:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d36:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d38:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d3a:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d3c:	ee 97       	sbiw	r28, 0x3e	; 62
    1d3e:	ca 01       	movw	r24, r20
    1d40:	b9 01       	movw	r22, r18
    1d42:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1d46:	9b 01       	movw	r18, r22
    1d48:	ac 01       	movw	r20, r24
    1d4a:	c7 01       	movw	r24, r14
    1d4c:	b6 01       	movw	r22, r12
    1d4e:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1d52:	6b 01       	movw	r12, r22
    1d54:	7c 01       	movw	r14, r24
    1d56:	c2 58       	subi	r28, 0x82	; 130
    1d58:	df 4f       	sbci	r29, 0xFF	; 255
    1d5a:	28 81       	ld	r18, Y
    1d5c:	39 81       	ldd	r19, Y+1	; 0x01
    1d5e:	4a 81       	ldd	r20, Y+2	; 0x02
    1d60:	5b 81       	ldd	r21, Y+3	; 0x03
    1d62:	ce 57       	subi	r28, 0x7E	; 126
    1d64:	d0 40       	sbci	r29, 0x00	; 0
    1d66:	ca 01       	movw	r24, r20
    1d68:	b9 01       	movw	r22, r18
    1d6a:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1d6e:	9b 01       	movw	r18, r22
    1d70:	ac 01       	movw	r20, r24
    1d72:	c7 01       	movw	r24, r14
    1d74:	b6 01       	movw	r22, r12
    1d76:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1d7a:	a5 d9       	rcall	.-3254   	; 0x10c6 <invSqrt>
    1d7c:	6b 01       	movw	r12, r22
    1d7e:	7c 01       	movw	r14, r24
		mx *= recipNorm;
    1d80:	9b 01       	movw	r18, r22
    1d82:	ac 01       	movw	r20, r24
    1d84:	ea 96       	adiw	r28, 0x3a	; 58
    1d86:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d88:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d8a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d8c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d8e:	ea 97       	sbiw	r28, 0x3a	; 58
    1d90:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1d94:	6d 83       	std	Y+5, r22	; 0x05
    1d96:	7e 83       	std	Y+6, r23	; 0x06
    1d98:	8f 83       	std	Y+7, r24	; 0x07
    1d9a:	98 87       	std	Y+8, r25	; 0x08
		my *= recipNorm;
    1d9c:	a7 01       	movw	r20, r14
    1d9e:	96 01       	movw	r18, r12
    1da0:	ee 96       	adiw	r28, 0x3e	; 62
    1da2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1da4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1da6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1da8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1daa:	ee 97       	sbiw	r28, 0x3e	; 62
    1dac:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1db0:	69 87       	std	Y+9, r22	; 0x09
    1db2:	7a 87       	std	Y+10, r23	; 0x0a
    1db4:	8b 87       	std	Y+11, r24	; 0x0b
    1db6:	9c 87       	std	Y+12, r25	; 0x0c
		mz *= recipNorm;   
    1db8:	a7 01       	movw	r20, r14
    1dba:	96 01       	movw	r18, r12
    1dbc:	c2 58       	subi	r28, 0x82	; 130
    1dbe:	df 4f       	sbci	r29, 0xFF	; 255
    1dc0:	68 81       	ld	r22, Y
    1dc2:	79 81       	ldd	r23, Y+1	; 0x01
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc8:	ce 57       	subi	r28, 0x7E	; 126
    1dca:	d0 40       	sbci	r29, 0x00	; 0
    1dcc:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1dd0:	6d 87       	std	Y+13, r22	; 0x0d
    1dd2:	7e 87       	std	Y+14, r23	; 0x0e
    1dd4:	8f 87       	std	Y+15, r24	; 0x0f
    1dd6:	98 8b       	std	Y+16, r25	; 0x10

        // Auxiliary variables to avoid repeated arithmetic
        q0q0 = q0 * q0;
    1dd8:	40 90 18 20 	lds	r4, 0x2018	; 0x802018 <q0>
    1ddc:	50 90 19 20 	lds	r5, 0x2019	; 0x802019 <q0+0x1>
    1de0:	60 90 1a 20 	lds	r6, 0x201A	; 0x80201a <q0+0x2>
    1de4:	70 90 1b 20 	lds	r7, 0x201B	; 0x80201b <q0+0x3>
    1de8:	e0 90 18 20 	lds	r14, 0x2018	; 0x802018 <q0>
    1dec:	f0 90 19 20 	lds	r15, 0x2019	; 0x802019 <q0+0x1>
    1df0:	00 91 1a 20 	lds	r16, 0x201A	; 0x80201a <q0+0x2>
    1df4:	10 91 1b 20 	lds	r17, 0x201B	; 0x80201b <q0+0x3>
    1df8:	69 96       	adiw	r28, 0x19	; 25
    1dfa:	ec ae       	std	Y+60, r14	; 0x3c
    1dfc:	fd ae       	std	Y+61, r15	; 0x3d
    1dfe:	0e af       	std	Y+62, r16	; 0x3e
    1e00:	1f af       	std	Y+63, r17	; 0x3f
    1e02:	69 97       	sbiw	r28, 0x19	; 25
        q0q1 = q0 * q1;
    1e04:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
    1e08:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
    1e0c:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
    1e10:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
    1e14:	20 91 bb 20 	lds	r18, 0x20BB	; 0x8020bb <q1>
    1e18:	30 91 bc 20 	lds	r19, 0x20BC	; 0x8020bc <q1+0x1>
    1e1c:	40 91 bd 20 	lds	r20, 0x20BD	; 0x8020bd <q1+0x2>
    1e20:	50 91 be 20 	lds	r21, 0x20BE	; 0x8020be <q1+0x3>
    1e24:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1e28:	69 a3       	std	Y+33, r22	; 0x21
    1e2a:	7a a3       	std	Y+34, r23	; 0x22
    1e2c:	8b a3       	std	Y+35, r24	; 0x23
    1e2e:	9c a3       	std	Y+36, r25	; 0x24
        q0q2 = q0 * q2;
    1e30:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
    1e34:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
    1e38:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
    1e3c:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
    1e40:	20 91 b7 20 	lds	r18, 0x20B7	; 0x8020b7 <q2>
    1e44:	30 91 b8 20 	lds	r19, 0x20B8	; 0x8020b8 <q2+0x1>
    1e48:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <q2+0x2>
    1e4c:	50 91 ba 20 	lds	r21, 0x20BA	; 0x8020ba <q2+0x3>
    1e50:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1e54:	6d 8f       	std	Y+29, r22	; 0x1d
    1e56:	7e 8f       	std	Y+30, r23	; 0x1e
    1e58:	8f 8f       	std	Y+31, r24	; 0x1f
    1e5a:	98 a3       	std	Y+32, r25	; 0x20
        q0q3 = q0 * q3;
    1e5c:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
    1e60:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
    1e64:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
    1e68:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
    1e6c:	20 91 b3 20 	lds	r18, 0x20B3	; 0x8020b3 <q3>
    1e70:	30 91 b4 20 	lds	r19, 0x20B4	; 0x8020b4 <q3+0x1>
    1e74:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <q3+0x2>
    1e78:	50 91 b6 20 	lds	r21, 0x20B6	; 0x8020b6 <q3+0x3>
    1e7c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1e80:	6d 8b       	std	Y+21, r22	; 0x15
    1e82:	7e 8b       	std	Y+22, r23	; 0x16
    1e84:	8f 8b       	std	Y+23, r24	; 0x17
    1e86:	98 8f       	std	Y+24, r25	; 0x18
        q1q1 = q1 * q1;
    1e88:	c0 90 bb 20 	lds	r12, 0x20BB	; 0x8020bb <q1>
    1e8c:	d0 90 bc 20 	lds	r13, 0x20BC	; 0x8020bc <q1+0x1>
    1e90:	e0 90 bd 20 	lds	r14, 0x20BD	; 0x8020bd <q1+0x2>
    1e94:	f0 90 be 20 	lds	r15, 0x20BE	; 0x8020be <q1+0x3>
    1e98:	80 91 bb 20 	lds	r24, 0x20BB	; 0x8020bb <q1>
    1e9c:	90 91 bc 20 	lds	r25, 0x20BC	; 0x8020bc <q1+0x1>
    1ea0:	a0 91 bd 20 	lds	r26, 0x20BD	; 0x8020bd <q1+0x2>
    1ea4:	b0 91 be 20 	lds	r27, 0x20BE	; 0x8020be <q1+0x3>
    1ea8:	89 ab       	std	Y+49, r24	; 0x31
    1eaa:	9a ab       	std	Y+50, r25	; 0x32
    1eac:	ab ab       	std	Y+51, r26	; 0x33
    1eae:	bc ab       	std	Y+52, r27	; 0x34
        q1q2 = q1 * q2;
    1eb0:	60 91 bb 20 	lds	r22, 0x20BB	; 0x8020bb <q1>
    1eb4:	70 91 bc 20 	lds	r23, 0x20BC	; 0x8020bc <q1+0x1>
    1eb8:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <q1+0x2>
    1ebc:	90 91 be 20 	lds	r25, 0x20BE	; 0x8020be <q1+0x3>
    1ec0:	20 91 b7 20 	lds	r18, 0x20B7	; 0x8020b7 <q2>
    1ec4:	30 91 b8 20 	lds	r19, 0x20B8	; 0x8020b8 <q2+0x1>
    1ec8:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <q2+0x2>
    1ecc:	50 91 ba 20 	lds	r21, 0x20BA	; 0x8020ba <q2+0x3>
    1ed0:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1ed4:	69 a7       	std	Y+41, r22	; 0x29
    1ed6:	7a a7       	std	Y+42, r23	; 0x2a
    1ed8:	8b a7       	std	Y+43, r24	; 0x2b
    1eda:	9c a7       	std	Y+44, r25	; 0x2c
        q1q3 = q1 * q3;
    1edc:	60 91 bb 20 	lds	r22, 0x20BB	; 0x8020bb <q1>
    1ee0:	70 91 bc 20 	lds	r23, 0x20BC	; 0x8020bc <q1+0x1>
    1ee4:	80 91 bd 20 	lds	r24, 0x20BD	; 0x8020bd <q1+0x2>
    1ee8:	90 91 be 20 	lds	r25, 0x20BE	; 0x8020be <q1+0x3>
    1eec:	20 91 b3 20 	lds	r18, 0x20B3	; 0x8020b3 <q3>
    1ef0:	30 91 b4 20 	lds	r19, 0x20B4	; 0x8020b4 <q3+0x1>
    1ef4:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <q3+0x2>
    1ef8:	50 91 b6 20 	lds	r21, 0x20B6	; 0x8020b6 <q3+0x3>
    1efc:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1f00:	6d a7       	std	Y+45, r22	; 0x2d
    1f02:	7e a7       	std	Y+46, r23	; 0x2e
    1f04:	8f a7       	std	Y+47, r24	; 0x2f
    1f06:	98 ab       	std	Y+48, r25	; 0x30
        q2q2 = q2 * q2;
    1f08:	60 91 b7 20 	lds	r22, 0x20B7	; 0x8020b7 <q2>
    1f0c:	70 91 b8 20 	lds	r23, 0x20B8	; 0x8020b8 <q2+0x1>
    1f10:	80 91 b9 20 	lds	r24, 0x20B9	; 0x8020b9 <q2+0x2>
    1f14:	90 91 ba 20 	lds	r25, 0x20BA	; 0x8020ba <q2+0x3>
    1f18:	20 91 b7 20 	lds	r18, 0x20B7	; 0x8020b7 <q2>
    1f1c:	30 91 b8 20 	lds	r19, 0x20B8	; 0x8020b8 <q2+0x1>
    1f20:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <q2+0x2>
    1f24:	50 91 ba 20 	lds	r21, 0x20BA	; 0x8020ba <q2+0x3>
    1f28:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1f2c:	25 96       	adiw	r28, 0x05	; 5
    1f2e:	6c af       	std	Y+60, r22	; 0x3c
    1f30:	7d af       	std	Y+61, r23	; 0x3d
    1f32:	8e af       	std	Y+62, r24	; 0x3e
    1f34:	9f af       	std	Y+63, r25	; 0x3f
    1f36:	25 97       	sbiw	r28, 0x05	; 5
        q2q3 = q2 * q3;
    1f38:	60 91 b7 20 	lds	r22, 0x20B7	; 0x8020b7 <q2>
    1f3c:	70 91 b8 20 	lds	r23, 0x20B8	; 0x8020b8 <q2+0x1>
    1f40:	80 91 b9 20 	lds	r24, 0x20B9	; 0x8020b9 <q2+0x2>
    1f44:	90 91 ba 20 	lds	r25, 0x20BA	; 0x8020ba <q2+0x3>
    1f48:	20 91 b3 20 	lds	r18, 0x20B3	; 0x8020b3 <q3>
    1f4c:	30 91 b4 20 	lds	r19, 0x20B4	; 0x8020b4 <q3+0x1>
    1f50:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <q3+0x2>
    1f54:	50 91 b6 20 	lds	r21, 0x20B6	; 0x8020b6 <q3+0x3>
    1f58:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1f5c:	29 96       	adiw	r28, 0x09	; 9
    1f5e:	6c af       	std	Y+60, r22	; 0x3c
    1f60:	7d af       	std	Y+61, r23	; 0x3d
    1f62:	8e af       	std	Y+62, r24	; 0x3e
    1f64:	9f af       	std	Y+63, r25	; 0x3f
    1f66:	29 97       	sbiw	r28, 0x09	; 9
        q3q3 = q3 * q3;   
    1f68:	60 91 b3 20 	lds	r22, 0x20B3	; 0x8020b3 <q3>
    1f6c:	70 91 b4 20 	lds	r23, 0x20B4	; 0x8020b4 <q3+0x1>
    1f70:	80 91 b5 20 	lds	r24, 0x20B5	; 0x8020b5 <q3+0x2>
    1f74:	90 91 b6 20 	lds	r25, 0x20B6	; 0x8020b6 <q3+0x3>
    1f78:	20 91 b3 20 	lds	r18, 0x20B3	; 0x8020b3 <q3>
    1f7c:	30 91 b4 20 	lds	r19, 0x20B4	; 0x8020b4 <q3+0x1>
    1f80:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <q3+0x2>
    1f84:	50 91 b6 20 	lds	r21, 0x20B6	; 0x8020b6 <q3+0x3>
    1f88:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    1f8c:	6d a3       	std	Y+37, r22	; 0x25
    1f8e:	7e a3       	std	Y+38, r23	; 0x26
    1f90:	8f a3       	std	Y+39, r24	; 0x27
    1f92:	98 a7       	std	Y+40, r25	; 0x28

        // Reference direction of Earth's magnetic field
        hx = 2.0 * (mx * (0.5 - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
    1f94:	25 96       	adiw	r28, 0x05	; 5
    1f96:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f98:	3d ad       	ldd	r19, Y+61	; 0x3d
    1f9a:	4e ad       	ldd	r20, Y+62	; 0x3e
    1f9c:	5f ad       	ldd	r21, Y+63	; 0x3f
    1f9e:	25 97       	sbiw	r28, 0x05	; 5
    1fa0:	60 e0       	ldi	r22, 0x00	; 0
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	9f e3       	ldi	r25, 0x3F	; 63
    1fa8:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    1fac:	2d a1       	ldd	r18, Y+37	; 0x25
    1fae:	3e a1       	ldd	r19, Y+38	; 0x26
    1fb0:	4f a1       	ldd	r20, Y+39	; 0x27
    1fb2:	58 a5       	ldd	r21, Y+40	; 0x28
    1fb4:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    1fb8:	2d 96       	adiw	r28, 0x0d	; 13
    1fba:	6c af       	std	Y+60, r22	; 0x3c
    1fbc:	7d af       	std	Y+61, r23	; 0x3d
    1fbe:	8e af       	std	Y+62, r24	; 0x3e
    1fc0:	9f af       	std	Y+63, r25	; 0x3f
    1fc2:	2d 97       	sbiw	r28, 0x0d	; 13
    1fc4:	2d 89       	ldd	r18, Y+21	; 0x15
    1fc6:	3e 89       	ldd	r19, Y+22	; 0x16
    1fc8:	4f 89       	ldd	r20, Y+23	; 0x17
    1fca:	58 8d       	ldd	r21, Y+24	; 0x18
    1fcc:	69 a5       	ldd	r22, Y+41	; 0x29
    1fce:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fd4:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    1fd8:	61 96       	adiw	r28, 0x11	; 17
    1fda:	6c af       	std	Y+60, r22	; 0x3c
    1fdc:	7d af       	std	Y+61, r23	; 0x3d
    1fde:	8e af       	std	Y+62, r24	; 0x3e
    1fe0:	9f af       	std	Y+63, r25	; 0x3f
    1fe2:	61 97       	sbiw	r28, 0x11	; 17
    1fe4:	2d a5       	ldd	r18, Y+45	; 0x2d
    1fe6:	3e a5       	ldd	r19, Y+46	; 0x2e
    1fe8:	4f a5       	ldd	r20, Y+47	; 0x2f
    1fea:	58 a9       	ldd	r21, Y+48	; 0x30
    1fec:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1fee:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1ff0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ff2:	98 a1       	ldd	r25, Y+32	; 0x20
    1ff4:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    1ff8:	65 96       	adiw	r28, 0x15	; 21
    1ffa:	6c af       	std	Y+60, r22	; 0x3c
    1ffc:	7d af       	std	Y+61, r23	; 0x3d
    1ffe:	8e af       	std	Y+62, r24	; 0x3e
    2000:	9f af       	std	Y+63, r25	; 0x3f
    2002:	65 97       	sbiw	r28, 0x15	; 21
    2004:	2d 96       	adiw	r28, 0x0d	; 13
    2006:	2c ad       	ldd	r18, Y+60	; 0x3c
    2008:	3d ad       	ldd	r19, Y+61	; 0x3d
    200a:	4e ad       	ldd	r20, Y+62	; 0x3e
    200c:	5f ad       	ldd	r21, Y+63	; 0x3f
    200e:	2d 97       	sbiw	r28, 0x0d	; 13
    2010:	6d 81       	ldd	r22, Y+5	; 0x05
    2012:	7e 81       	ldd	r23, Y+6	; 0x06
    2014:	8f 81       	ldd	r24, Y+7	; 0x07
    2016:	98 85       	ldd	r25, Y+8	; 0x08
    2018:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    201c:	4b 01       	movw	r8, r22
    201e:	5c 01       	movw	r10, r24
    2020:	61 96       	adiw	r28, 0x11	; 17
    2022:	2c ad       	ldd	r18, Y+60	; 0x3c
    2024:	3d ad       	ldd	r19, Y+61	; 0x3d
    2026:	4e ad       	ldd	r20, Y+62	; 0x3e
    2028:	5f ad       	ldd	r21, Y+63	; 0x3f
    202a:	61 97       	sbiw	r28, 0x11	; 17
    202c:	69 85       	ldd	r22, Y+9	; 0x09
    202e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2030:	8b 85       	ldd	r24, Y+11	; 0x0b
    2032:	9c 85       	ldd	r25, Y+12	; 0x0c
    2034:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2038:	9b 01       	movw	r18, r22
    203a:	ac 01       	movw	r20, r24
    203c:	c5 01       	movw	r24, r10
    203e:	b4 01       	movw	r22, r8
    2040:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2044:	4b 01       	movw	r8, r22
    2046:	5c 01       	movw	r10, r24
    2048:	65 96       	adiw	r28, 0x15	; 21
    204a:	2c ad       	ldd	r18, Y+60	; 0x3c
    204c:	3d ad       	ldd	r19, Y+61	; 0x3d
    204e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2050:	5f ad       	ldd	r21, Y+63	; 0x3f
    2052:	65 97       	sbiw	r28, 0x15	; 21
    2054:	6d 85       	ldd	r22, Y+13	; 0x0d
    2056:	7e 85       	ldd	r23, Y+14	; 0x0e
    2058:	8f 85       	ldd	r24, Y+15	; 0x0f
    205a:	98 89       	ldd	r25, Y+16	; 0x10
    205c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2060:	9b 01       	movw	r18, r22
    2062:	ac 01       	movw	r20, r24
    2064:	c5 01       	movw	r24, r10
    2066:	b4 01       	movw	r22, r8
    2068:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    206c:	9b 01       	movw	r18, r22
    206e:	ac 01       	movw	r20, r24
    2070:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2074:	4b 01       	movw	r8, r22
    2076:	5c 01       	movw	r10, r24
        hy = 2.0 * (mx * (q1q2 + q0q3) + my * (0.5 - q1q1 - q3q3) + mz * (q2q3 - q0q1));
    2078:	29 a9       	ldd	r18, Y+49	; 0x31
    207a:	3a a9       	ldd	r19, Y+50	; 0x32
    207c:	4b a9       	ldd	r20, Y+51	; 0x33
    207e:	5c a9       	ldd	r21, Y+52	; 0x34
    2080:	c7 01       	movw	r24, r14
    2082:	b6 01       	movw	r22, r12
    2084:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2088:	9b 01       	movw	r18, r22
    208a:	ac 01       	movw	r20, r24
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	9f e3       	ldi	r25, 0x3F	; 63
    2094:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    2098:	69 ab       	std	Y+49, r22	; 0x31
    209a:	7a ab       	std	Y+50, r23	; 0x32
    209c:	8b ab       	std	Y+51, r24	; 0x33
    209e:	9c ab       	std	Y+52, r25	; 0x34
    20a0:	29 a5       	ldd	r18, Y+41	; 0x29
    20a2:	3a a5       	ldd	r19, Y+42	; 0x2a
    20a4:	4b a5       	ldd	r20, Y+43	; 0x2b
    20a6:	5c a5       	ldd	r21, Y+44	; 0x2c
    20a8:	6d 89       	ldd	r22, Y+21	; 0x15
    20aa:	7e 89       	ldd	r23, Y+22	; 0x16
    20ac:	8f 89       	ldd	r24, Y+23	; 0x17
    20ae:	98 8d       	ldd	r25, Y+24	; 0x18
    20b0:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    20b4:	2d 81       	ldd	r18, Y+5	; 0x05
    20b6:	3e 81       	ldd	r19, Y+6	; 0x06
    20b8:	4f 81       	ldd	r20, Y+7	; 0x07
    20ba:	58 85       	ldd	r21, Y+8	; 0x08
    20bc:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    20c0:	6b 01       	movw	r12, r22
    20c2:	7c 01       	movw	r14, r24
    20c4:	2d a1       	ldd	r18, Y+37	; 0x25
    20c6:	3e a1       	ldd	r19, Y+38	; 0x26
    20c8:	4f a1       	ldd	r20, Y+39	; 0x27
    20ca:	58 a5       	ldd	r21, Y+40	; 0x28
    20cc:	69 a9       	ldd	r22, Y+49	; 0x31
    20ce:	7a a9       	ldd	r23, Y+50	; 0x32
    20d0:	8b a9       	ldd	r24, Y+51	; 0x33
    20d2:	9c a9       	ldd	r25, Y+52	; 0x34
    20d4:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    20d8:	29 85       	ldd	r18, Y+9	; 0x09
    20da:	3a 85       	ldd	r19, Y+10	; 0x0a
    20dc:	4b 85       	ldd	r20, Y+11	; 0x0b
    20de:	5c 85       	ldd	r21, Y+12	; 0x0c
    20e0:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    20e4:	9b 01       	movw	r18, r22
    20e6:	ac 01       	movw	r20, r24
    20e8:	c7 01       	movw	r24, r14
    20ea:	b6 01       	movw	r22, r12
    20ec:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    20f0:	6b 01       	movw	r12, r22
    20f2:	7c 01       	movw	r14, r24
    20f4:	29 a1       	ldd	r18, Y+33	; 0x21
    20f6:	3a a1       	ldd	r19, Y+34	; 0x22
    20f8:	4b a1       	ldd	r20, Y+35	; 0x23
    20fa:	5c a1       	ldd	r21, Y+36	; 0x24
    20fc:	29 96       	adiw	r28, 0x09	; 9
    20fe:	6c ad       	ldd	r22, Y+60	; 0x3c
    2100:	7d ad       	ldd	r23, Y+61	; 0x3d
    2102:	8e ad       	ldd	r24, Y+62	; 0x3e
    2104:	9f ad       	ldd	r25, Y+63	; 0x3f
    2106:	29 97       	sbiw	r28, 0x09	; 9
    2108:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    210c:	2d 85       	ldd	r18, Y+13	; 0x0d
    210e:	3e 85       	ldd	r19, Y+14	; 0x0e
    2110:	4f 85       	ldd	r20, Y+15	; 0x0f
    2112:	58 89       	ldd	r21, Y+16	; 0x10
    2114:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2118:	9b 01       	movw	r18, r22
    211a:	ac 01       	movw	r20, r24
    211c:	c7 01       	movw	r24, r14
    211e:	b6 01       	movw	r22, r12
    2120:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2124:	9b 01       	movw	r18, r22
    2126:	ac 01       	movw	r20, r24
    2128:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    212c:	6b 01       	movw	r12, r22
    212e:	7c 01       	movw	r14, r24
        bx = sqrt(hx * hx + hy * hy);
    2130:	a5 01       	movw	r20, r10
    2132:	94 01       	movw	r18, r8
    2134:	c5 01       	movw	r24, r10
    2136:	b4 01       	movw	r22, r8
    2138:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    213c:	6d 8b       	std	Y+21, r22	; 0x15
    213e:	7e 8b       	std	Y+22, r23	; 0x16
    2140:	8f 8b       	std	Y+23, r24	; 0x17
    2142:	98 8f       	std	Y+24, r25	; 0x18
    2144:	a5 01       	movw	r20, r10
    2146:	94 01       	movw	r18, r8
    2148:	c5 01       	movw	r24, r10
    214a:	b4 01       	movw	r22, r8
    214c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2150:	4b 01       	movw	r8, r22
    2152:	5c 01       	movw	r10, r24
    2154:	a7 01       	movw	r20, r14
    2156:	96 01       	movw	r18, r12
    2158:	c7 01       	movw	r24, r14
    215a:	b6 01       	movw	r22, r12
    215c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2160:	9b 01       	movw	r18, r22
    2162:	ac 01       	movw	r20, r24
    2164:	c5 01       	movw	r24, r10
    2166:	b4 01       	movw	r22, r8
    2168:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    216c:	0e 94 5a 30 	call	0x60b4	; 0x60b4 <sqrt>
    2170:	4b 01       	movw	r8, r22
    2172:	5c 01       	movw	r10, r24
        bz = 2.0 * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5 - q1q1 - q2q2));
    2174:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2176:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2178:	4f 8d       	ldd	r20, Y+31	; 0x1f
    217a:	58 a1       	ldd	r21, Y+32	; 0x20
    217c:	6d a5       	ldd	r22, Y+45	; 0x2d
    217e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2180:	8f a5       	ldd	r24, Y+47	; 0x2f
    2182:	98 a9       	ldd	r25, Y+48	; 0x30
    2184:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    2188:	6d 8f       	std	Y+29, r22	; 0x1d
    218a:	7e 8f       	std	Y+30, r23	; 0x1e
    218c:	8f 8f       	std	Y+31, r24	; 0x1f
    218e:	98 a3       	std	Y+32, r25	; 0x20
    2190:	29 96       	adiw	r28, 0x09	; 9
    2192:	2c ad       	ldd	r18, Y+60	; 0x3c
    2194:	3d ad       	ldd	r19, Y+61	; 0x3d
    2196:	4e ad       	ldd	r20, Y+62	; 0x3e
    2198:	5f ad       	ldd	r21, Y+63	; 0x3f
    219a:	29 97       	sbiw	r28, 0x09	; 9
    219c:	69 a1       	ldd	r22, Y+33	; 0x21
    219e:	7a a1       	ldd	r23, Y+34	; 0x22
    21a0:	8b a1       	ldd	r24, Y+35	; 0x23
    21a2:	9c a1       	ldd	r25, Y+36	; 0x24
    21a4:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    21a8:	69 a3       	std	Y+33, r22	; 0x21
    21aa:	7a a3       	std	Y+34, r23	; 0x22
    21ac:	8b a3       	std	Y+35, r24	; 0x23
    21ae:	9c a3       	std	Y+36, r25	; 0x24
    21b0:	25 96       	adiw	r28, 0x05	; 5
    21b2:	2c ad       	ldd	r18, Y+60	; 0x3c
    21b4:	3d ad       	ldd	r19, Y+61	; 0x3d
    21b6:	4e ad       	ldd	r20, Y+62	; 0x3e
    21b8:	5f ad       	ldd	r21, Y+63	; 0x3f
    21ba:	25 97       	sbiw	r28, 0x05	; 5
    21bc:	69 a9       	ldd	r22, Y+49	; 0x31
    21be:	7a a9       	ldd	r23, Y+50	; 0x32
    21c0:	8b a9       	ldd	r24, Y+51	; 0x33
    21c2:	9c a9       	ldd	r25, Y+52	; 0x34
    21c4:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    21c8:	6d 8b       	std	Y+21, r22	; 0x15
    21ca:	7e 8b       	std	Y+22, r23	; 0x16
    21cc:	8f 8b       	std	Y+23, r24	; 0x17
    21ce:	98 8f       	std	Y+24, r25	; 0x18
    21d0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    21d2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    21d4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    21d6:	58 a1       	ldd	r21, Y+32	; 0x20
    21d8:	6d 81       	ldd	r22, Y+5	; 0x05
    21da:	7e 81       	ldd	r23, Y+6	; 0x06
    21dc:	8f 81       	ldd	r24, Y+7	; 0x07
    21de:	98 85       	ldd	r25, Y+8	; 0x08
    21e0:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    21e4:	6b 01       	movw	r12, r22
    21e6:	7c 01       	movw	r14, r24
    21e8:	29 a1       	ldd	r18, Y+33	; 0x21
    21ea:	3a a1       	ldd	r19, Y+34	; 0x22
    21ec:	4b a1       	ldd	r20, Y+35	; 0x23
    21ee:	5c a1       	ldd	r21, Y+36	; 0x24
    21f0:	69 85       	ldd	r22, Y+9	; 0x09
    21f2:	7a 85       	ldd	r23, Y+10	; 0x0a
    21f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    21f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    21f8:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    21fc:	9b 01       	movw	r18, r22
    21fe:	ac 01       	movw	r20, r24
    2200:	c7 01       	movw	r24, r14
    2202:	b6 01       	movw	r22, r12
    2204:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2208:	6b 01       	movw	r12, r22
    220a:	7c 01       	movw	r14, r24
    220c:	2d 89       	ldd	r18, Y+21	; 0x15
    220e:	3e 89       	ldd	r19, Y+22	; 0x16
    2210:	4f 89       	ldd	r20, Y+23	; 0x17
    2212:	58 8d       	ldd	r21, Y+24	; 0x18
    2214:	6d 85       	ldd	r22, Y+13	; 0x0d
    2216:	7e 85       	ldd	r23, Y+14	; 0x0e
    2218:	8f 85       	ldd	r24, Y+15	; 0x0f
    221a:	98 89       	ldd	r25, Y+16	; 0x10
    221c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2220:	9b 01       	movw	r18, r22
    2222:	ac 01       	movw	r20, r24
    2224:	c7 01       	movw	r24, r14
    2226:	b6 01       	movw	r22, r12
    2228:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    222c:	9b 01       	movw	r18, r22
    222e:	ac 01       	movw	r20, r24
    2230:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2234:	6b 01       	movw	r12, r22
    2236:	7c 01       	movw	r14, r24

		// Estimated direction of gravity and magnetic field
		halfvx = q1q3 - q0q2;
		halfvy = q0q1 + q2q3;
		halfvz = q0q0 - 0.5 + q3q3;
    2238:	69 96       	adiw	r28, 0x19	; 25
    223a:	2c ad       	ldd	r18, Y+60	; 0x3c
    223c:	3d ad       	ldd	r19, Y+61	; 0x3d
    223e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2240:	5f ad       	ldd	r21, Y+63	; 0x3f
    2242:	69 97       	sbiw	r28, 0x19	; 25
    2244:	c3 01       	movw	r24, r6
    2246:	b2 01       	movw	r22, r4
    2248:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	5f e3       	ldi	r21, 0x3F	; 63
    2254:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    2258:	2d a1       	ldd	r18, Y+37	; 0x25
    225a:	3e a1       	ldd	r19, Y+38	; 0x26
    225c:	4f a1       	ldd	r20, Y+39	; 0x27
    225e:	58 a5       	ldd	r21, Y+40	; 0x28
    2260:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2264:	6d a3       	std	Y+37, r22	; 0x25
    2266:	7e a3       	std	Y+38, r23	; 0x26
    2268:	8f a3       	std	Y+39, r24	; 0x27
    226a:	98 a7       	std	Y+40, r25	; 0x28
        halfwx = bx * (0.5 - q2q2 - q3q3) + bz * (q1q3 - q0q2);
    226c:	a5 01       	movw	r20, r10
    226e:	94 01       	movw	r18, r8
    2270:	2d 96       	adiw	r28, 0x0d	; 13
    2272:	6c ad       	ldd	r22, Y+60	; 0x3c
    2274:	7d ad       	ldd	r23, Y+61	; 0x3d
    2276:	8e ad       	ldd	r24, Y+62	; 0x3e
    2278:	9f ad       	ldd	r25, Y+63	; 0x3f
    227a:	2d 97       	sbiw	r28, 0x0d	; 13
    227c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2280:	2b 01       	movw	r4, r22
    2282:	3c 01       	movw	r6, r24
    2284:	a7 01       	movw	r20, r14
    2286:	96 01       	movw	r18, r12
    2288:	6d 8d       	ldd	r22, Y+29	; 0x1d
    228a:	7e 8d       	ldd	r23, Y+30	; 0x1e
    228c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    228e:	98 a1       	ldd	r25, Y+32	; 0x20
    2290:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2294:	9b 01       	movw	r18, r22
    2296:	ac 01       	movw	r20, r24
    2298:	c3 01       	movw	r24, r6
    229a:	b2 01       	movw	r22, r4
    229c:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    22a0:	69 a7       	std	Y+41, r22	; 0x29
    22a2:	7a a7       	std	Y+42, r23	; 0x2a
    22a4:	8b a7       	std	Y+43, r24	; 0x2b
    22a6:	9c a7       	std	Y+44, r25	; 0x2c
        halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
    22a8:	a5 01       	movw	r20, r10
    22aa:	94 01       	movw	r18, r8
    22ac:	61 96       	adiw	r28, 0x11	; 17
    22ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    22b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    22b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    22b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    22b6:	61 97       	sbiw	r28, 0x11	; 17
    22b8:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    22bc:	2b 01       	movw	r4, r22
    22be:	3c 01       	movw	r6, r24
    22c0:	a7 01       	movw	r20, r14
    22c2:	96 01       	movw	r18, r12
    22c4:	69 a1       	ldd	r22, Y+33	; 0x21
    22c6:	7a a1       	ldd	r23, Y+34	; 0x22
    22c8:	8b a1       	ldd	r24, Y+35	; 0x23
    22ca:	9c a1       	ldd	r25, Y+36	; 0x24
    22cc:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    22d0:	9b 01       	movw	r18, r22
    22d2:	ac 01       	movw	r20, r24
    22d4:	c3 01       	movw	r24, r6
    22d6:	b2 01       	movw	r22, r4
    22d8:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    22dc:	6d a7       	std	Y+45, r22	; 0x2d
    22de:	7e a7       	std	Y+46, r23	; 0x2e
    22e0:	8f a7       	std	Y+47, r24	; 0x2f
    22e2:	98 ab       	std	Y+48, r25	; 0x30
        halfwz = bx * (q0q2 + q1q3) + bz * (0.5 - q1q1 - q2q2);  
    22e4:	a5 01       	movw	r20, r10
    22e6:	94 01       	movw	r18, r8
    22e8:	65 96       	adiw	r28, 0x15	; 21
    22ea:	6c ad       	ldd	r22, Y+60	; 0x3c
    22ec:	7d ad       	ldd	r23, Y+61	; 0x3d
    22ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    22f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    22f2:	65 97       	sbiw	r28, 0x15	; 21
    22f4:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    22f8:	2b 01       	movw	r4, r22
    22fa:	3c 01       	movw	r6, r24
    22fc:	a7 01       	movw	r20, r14
    22fe:	96 01       	movw	r18, r12
    2300:	6d 89       	ldd	r22, Y+21	; 0x15
    2302:	7e 89       	ldd	r23, Y+22	; 0x16
    2304:	8f 89       	ldd	r24, Y+23	; 0x17
    2306:	98 8d       	ldd	r25, Y+24	; 0x18
    2308:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    230c:	9b 01       	movw	r18, r22
    230e:	ac 01       	movw	r20, r24
    2310:	c3 01       	movw	r24, r6
    2312:	b2 01       	movw	r22, r4
    2314:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2318:	6b 01       	movw	r12, r22
    231a:	7c 01       	movw	r14, r24
	
		// Error is sum of cross product between estimated direction and measured direction of field vectors
		halfex = (ay * halfvz - az * halfvy) + (my * halfwz - mz * halfwy);
    231c:	2d a1       	ldd	r18, Y+37	; 0x25
    231e:	3e a1       	ldd	r19, Y+38	; 0x26
    2320:	4f a1       	ldd	r20, Y+39	; 0x27
    2322:	58 a5       	ldd	r21, Y+40	; 0x28
    2324:	69 ad       	ldd	r22, Y+57	; 0x39
    2326:	7a ad       	ldd	r23, Y+58	; 0x3a
    2328:	8b ad       	ldd	r24, Y+59	; 0x3b
    232a:	9c ad       	ldd	r25, Y+60	; 0x3c
    232c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2330:	4b 01       	movw	r8, r22
    2332:	5c 01       	movw	r10, r24
    2334:	29 a1       	ldd	r18, Y+33	; 0x21
    2336:	3a a1       	ldd	r19, Y+34	; 0x22
    2338:	4b a1       	ldd	r20, Y+35	; 0x23
    233a:	5c a1       	ldd	r21, Y+36	; 0x24
    233c:	21 96       	adiw	r28, 0x01	; 1
    233e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2340:	7d ad       	ldd	r23, Y+61	; 0x3d
    2342:	8e ad       	ldd	r24, Y+62	; 0x3e
    2344:	9f ad       	ldd	r25, Y+63	; 0x3f
    2346:	21 97       	sbiw	r28, 0x01	; 1
    2348:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    234c:	9b 01       	movw	r18, r22
    234e:	ac 01       	movw	r20, r24
    2350:	c5 01       	movw	r24, r10
    2352:	b4 01       	movw	r22, r8
    2354:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    2358:	4b 01       	movw	r8, r22
    235a:	5c 01       	movw	r10, r24
    235c:	a7 01       	movw	r20, r14
    235e:	96 01       	movw	r18, r12
    2360:	69 85       	ldd	r22, Y+9	; 0x09
    2362:	7a 85       	ldd	r23, Y+10	; 0x0a
    2364:	8b 85       	ldd	r24, Y+11	; 0x0b
    2366:	9c 85       	ldd	r25, Y+12	; 0x0c
    2368:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    236c:	2b 01       	movw	r4, r22
    236e:	3c 01       	movw	r6, r24
    2370:	2d a5       	ldd	r18, Y+45	; 0x2d
    2372:	3e a5       	ldd	r19, Y+46	; 0x2e
    2374:	4f a5       	ldd	r20, Y+47	; 0x2f
    2376:	58 a9       	ldd	r21, Y+48	; 0x30
    2378:	6d 85       	ldd	r22, Y+13	; 0x0d
    237a:	7e 85       	ldd	r23, Y+14	; 0x0e
    237c:	8f 85       	ldd	r24, Y+15	; 0x0f
    237e:	98 89       	ldd	r25, Y+16	; 0x10
    2380:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2384:	9b 01       	movw	r18, r22
    2386:	ac 01       	movw	r20, r24
    2388:	c3 01       	movw	r24, r6
    238a:	b2 01       	movw	r22, r4
    238c:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    2390:	9b 01       	movw	r18, r22
    2392:	ac 01       	movw	r20, r24
    2394:	c5 01       	movw	r24, r10
    2396:	b4 01       	movw	r22, r8
    2398:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    239c:	6d 8b       	std	Y+21, r22	; 0x15
    239e:	7e 8b       	std	Y+22, r23	; 0x16
    23a0:	8f 8b       	std	Y+23, r24	; 0x17
    23a2:	98 8f       	std	Y+24, r25	; 0x18
		halfey = (az * halfvx - ax * halfvz) + (mz * halfwx - mx * halfwz);
    23a4:	2d 8d       	ldd	r18, Y+29	; 0x1d
    23a6:	3e 8d       	ldd	r19, Y+30	; 0x1e
    23a8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    23aa:	58 a1       	ldd	r21, Y+32	; 0x20
    23ac:	21 96       	adiw	r28, 0x01	; 1
    23ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    23b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    23b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    23b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    23b6:	21 97       	sbiw	r28, 0x01	; 1
    23b8:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    23bc:	4b 01       	movw	r8, r22
    23be:	5c 01       	movw	r10, r24
    23c0:	2d a1       	ldd	r18, Y+37	; 0x25
    23c2:	3e a1       	ldd	r19, Y+38	; 0x26
    23c4:	4f a1       	ldd	r20, Y+39	; 0x27
    23c6:	58 a5       	ldd	r21, Y+40	; 0x28
    23c8:	6d a9       	ldd	r22, Y+53	; 0x35
    23ca:	7e a9       	ldd	r23, Y+54	; 0x36
    23cc:	8f a9       	ldd	r24, Y+55	; 0x37
    23ce:	98 ad       	ldd	r25, Y+56	; 0x38
    23d0:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    23d4:	9b 01       	movw	r18, r22
    23d6:	ac 01       	movw	r20, r24
    23d8:	c5 01       	movw	r24, r10
    23da:	b4 01       	movw	r22, r8
    23dc:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    23e0:	4b 01       	movw	r8, r22
    23e2:	5c 01       	movw	r10, r24
    23e4:	29 a5       	ldd	r18, Y+41	; 0x29
    23e6:	3a a5       	ldd	r19, Y+42	; 0x2a
    23e8:	4b a5       	ldd	r20, Y+43	; 0x2b
    23ea:	5c a5       	ldd	r21, Y+44	; 0x2c
    23ec:	6d 85       	ldd	r22, Y+13	; 0x0d
    23ee:	7e 85       	ldd	r23, Y+14	; 0x0e
    23f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f2:	98 89       	ldd	r25, Y+16	; 0x10
    23f4:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    23f8:	2b 01       	movw	r4, r22
    23fa:	3c 01       	movw	r6, r24
    23fc:	a7 01       	movw	r20, r14
    23fe:	96 01       	movw	r18, r12
    2400:	6d 81       	ldd	r22, Y+5	; 0x05
    2402:	7e 81       	ldd	r23, Y+6	; 0x06
    2404:	8f 81       	ldd	r24, Y+7	; 0x07
    2406:	98 85       	ldd	r25, Y+8	; 0x08
    2408:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    240c:	9b 01       	movw	r18, r22
    240e:	ac 01       	movw	r20, r24
    2410:	c3 01       	movw	r24, r6
    2412:	b2 01       	movw	r22, r4
    2414:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    2418:	9b 01       	movw	r18, r22
    241a:	ac 01       	movw	r20, r24
    241c:	c5 01       	movw	r24, r10
    241e:	b4 01       	movw	r22, r8
    2420:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2424:	4b 01       	movw	r8, r22
    2426:	5c 01       	movw	r10, r24
		halfez = (ax * halfvy - ay * halfvx) + (mx * halfwy - my * halfwx);
    2428:	29 a1       	ldd	r18, Y+33	; 0x21
    242a:	3a a1       	ldd	r19, Y+34	; 0x22
    242c:	4b a1       	ldd	r20, Y+35	; 0x23
    242e:	5c a1       	ldd	r21, Y+36	; 0x24
    2430:	6d a9       	ldd	r22, Y+53	; 0x35
    2432:	7e a9       	ldd	r23, Y+54	; 0x36
    2434:	8f a9       	ldd	r24, Y+55	; 0x37
    2436:	98 ad       	ldd	r25, Y+56	; 0x38
    2438:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    243c:	6b 01       	movw	r12, r22
    243e:	7c 01       	movw	r14, r24
    2440:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2442:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2444:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2446:	58 a1       	ldd	r21, Y+32	; 0x20
    2448:	69 ad       	ldd	r22, Y+57	; 0x39
    244a:	7a ad       	ldd	r23, Y+58	; 0x3a
    244c:	8b ad       	ldd	r24, Y+59	; 0x3b
    244e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2450:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2454:	9b 01       	movw	r18, r22
    2456:	ac 01       	movw	r20, r24
    2458:	c7 01       	movw	r24, r14
    245a:	b6 01       	movw	r22, r12
    245c:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    2460:	6b 01       	movw	r12, r22
    2462:	7c 01       	movw	r14, r24
    2464:	2d a5       	ldd	r18, Y+45	; 0x2d
    2466:	3e a5       	ldd	r19, Y+46	; 0x2e
    2468:	4f a5       	ldd	r20, Y+47	; 0x2f
    246a:	58 a9       	ldd	r21, Y+48	; 0x30
    246c:	6d 81       	ldd	r22, Y+5	; 0x05
    246e:	7e 81       	ldd	r23, Y+6	; 0x06
    2470:	8f 81       	ldd	r24, Y+7	; 0x07
    2472:	98 85       	ldd	r25, Y+8	; 0x08
    2474:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2478:	2b 01       	movw	r4, r22
    247a:	3c 01       	movw	r6, r24
    247c:	29 a5       	ldd	r18, Y+41	; 0x29
    247e:	3a a5       	ldd	r19, Y+42	; 0x2a
    2480:	4b a5       	ldd	r20, Y+43	; 0x2b
    2482:	5c a5       	ldd	r21, Y+44	; 0x2c
    2484:	69 85       	ldd	r22, Y+9	; 0x09
    2486:	7a 85       	ldd	r23, Y+10	; 0x0a
    2488:	8b 85       	ldd	r24, Y+11	; 0x0b
    248a:	9c 85       	ldd	r25, Y+12	; 0x0c
    248c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2490:	9b 01       	movw	r18, r22
    2492:	ac 01       	movw	r20, r24
    2494:	c3 01       	movw	r24, r6
    2496:	b2 01       	movw	r22, r4
    2498:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    249c:	9b 01       	movw	r18, r22
    249e:	ac 01       	movw	r20, r24
    24a0:	c7 01       	movw	r24, r14
    24a2:	b6 01       	movw	r22, r12
    24a4:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    24a8:	6b 01       	movw	r12, r22
    24aa:	7c 01       	movw	r14, r24

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0) {
    24ac:	60 91 bf 20 	lds	r22, 0x20BF	; 0x8020bf <twoKi>
    24b0:	70 91 c0 20 	lds	r23, 0x20C0	; 0x8020c0 <twoKi+0x1>
    24b4:	80 91 c1 20 	lds	r24, 0x20C1	; 0x8020c1 <twoKi+0x2>
    24b8:	90 91 c2 20 	lds	r25, 0x20C2	; 0x8020c2 <twoKi+0x3>
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	a9 01       	movw	r20, r18
    24c2:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <__gesf2>
    24c6:	18 16       	cp	r1, r24
    24c8:	0c f0       	brlt	.+2      	; 0x24cc <MahonyAHRSupdate+0x98e>
    24ca:	ab c0       	rjmp	.+342    	; 0x2622 <MahonyAHRSupdate+0xae4>
			integralFBx += twoKi * halfex * (1.0 / sampleFreq);	// integral error scaled by Ki
    24cc:	20 91 bf 20 	lds	r18, 0x20BF	; 0x8020bf <twoKi>
    24d0:	30 91 c0 20 	lds	r19, 0x20C0	; 0x8020c0 <twoKi+0x1>
    24d4:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <twoKi+0x2>
    24d8:	50 91 c2 20 	lds	r21, 0x20C2	; 0x8020c2 <twoKi+0x3>
    24dc:	40 90 af 20 	lds	r4, 0x20AF	; 0x8020af <integralFBx>
    24e0:	50 90 b0 20 	lds	r5, 0x20B0	; 0x8020b0 <integralFBx+0x1>
    24e4:	60 90 b1 20 	lds	r6, 0x20B1	; 0x8020b1 <integralFBx+0x2>
    24e8:	70 90 b2 20 	lds	r7, 0x20B2	; 0x8020b2 <integralFBx+0x3>
    24ec:	6d 89       	ldd	r22, Y+21	; 0x15
    24ee:	7e 89       	ldd	r23, Y+22	; 0x16
    24f0:	8f 89       	ldd	r24, Y+23	; 0x17
    24f2:	98 8d       	ldd	r25, Y+24	; 0x18
    24f4:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    24f8:	2a ef       	ldi	r18, 0xFA	; 250
    24fa:	39 ec       	ldi	r19, 0xC9	; 201
    24fc:	44 e3       	ldi	r20, 0x34	; 52
    24fe:	59 e3       	ldi	r21, 0x39	; 57
    2500:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2504:	a3 01       	movw	r20, r6
    2506:	92 01       	movw	r18, r4
    2508:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    250c:	60 93 af 20 	sts	0x20AF, r22	; 0x8020af <integralFBx>
    2510:	70 93 b0 20 	sts	0x20B0, r23	; 0x8020b0 <integralFBx+0x1>
    2514:	80 93 b1 20 	sts	0x20B1, r24	; 0x8020b1 <integralFBx+0x2>
    2518:	90 93 b2 20 	sts	0x20B2, r25	; 0x8020b2 <integralFBx+0x3>
			integralFBy += twoKi * halfey * (1.0 / sampleFreq);
    251c:	20 91 bf 20 	lds	r18, 0x20BF	; 0x8020bf <twoKi>
    2520:	30 91 c0 20 	lds	r19, 0x20C0	; 0x8020c0 <twoKi+0x1>
    2524:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <twoKi+0x2>
    2528:	50 91 c2 20 	lds	r21, 0x20C2	; 0x8020c2 <twoKi+0x3>
    252c:	40 90 ab 20 	lds	r4, 0x20AB	; 0x8020ab <integralFBy>
    2530:	50 90 ac 20 	lds	r5, 0x20AC	; 0x8020ac <integralFBy+0x1>
    2534:	60 90 ad 20 	lds	r6, 0x20AD	; 0x8020ad <integralFBy+0x2>
    2538:	70 90 ae 20 	lds	r7, 0x20AE	; 0x8020ae <integralFBy+0x3>
    253c:	c5 01       	movw	r24, r10
    253e:	b4 01       	movw	r22, r8
    2540:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2544:	2a ef       	ldi	r18, 0xFA	; 250
    2546:	39 ec       	ldi	r19, 0xC9	; 201
    2548:	44 e3       	ldi	r20, 0x34	; 52
    254a:	59 e3       	ldi	r21, 0x39	; 57
    254c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2550:	a3 01       	movw	r20, r6
    2552:	92 01       	movw	r18, r4
    2554:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2558:	60 93 ab 20 	sts	0x20AB, r22	; 0x8020ab <integralFBy>
    255c:	70 93 ac 20 	sts	0x20AC, r23	; 0x8020ac <integralFBy+0x1>
    2560:	80 93 ad 20 	sts	0x20AD, r24	; 0x8020ad <integralFBy+0x2>
    2564:	90 93 ae 20 	sts	0x20AE, r25	; 0x8020ae <integralFBy+0x3>
			integralFBz += twoKi * halfez * (1.0 / sampleFreq);
    2568:	20 91 bf 20 	lds	r18, 0x20BF	; 0x8020bf <twoKi>
    256c:	30 91 c0 20 	lds	r19, 0x20C0	; 0x8020c0 <twoKi+0x1>
    2570:	40 91 c1 20 	lds	r20, 0x20C1	; 0x8020c1 <twoKi+0x2>
    2574:	50 91 c2 20 	lds	r21, 0x20C2	; 0x8020c2 <twoKi+0x3>
    2578:	40 90 a7 20 	lds	r4, 0x20A7	; 0x8020a7 <integralFBz>
    257c:	50 90 a8 20 	lds	r5, 0x20A8	; 0x8020a8 <integralFBz+0x1>
    2580:	60 90 a9 20 	lds	r6, 0x20A9	; 0x8020a9 <integralFBz+0x2>
    2584:	70 90 aa 20 	lds	r7, 0x20AA	; 0x8020aa <integralFBz+0x3>
    2588:	c7 01       	movw	r24, r14
    258a:	b6 01       	movw	r22, r12
    258c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2590:	2a ef       	ldi	r18, 0xFA	; 250
    2592:	39 ec       	ldi	r19, 0xC9	; 201
    2594:	44 e3       	ldi	r20, 0x34	; 52
    2596:	59 e3       	ldi	r21, 0x39	; 57
    2598:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    259c:	a3 01       	movw	r20, r6
    259e:	92 01       	movw	r18, r4
    25a0:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    25a4:	60 93 a7 20 	sts	0x20A7, r22	; 0x8020a7 <integralFBz>
    25a8:	70 93 a8 20 	sts	0x20A8, r23	; 0x8020a8 <integralFBz+0x1>
    25ac:	80 93 a9 20 	sts	0x20A9, r24	; 0x8020a9 <integralFBz+0x2>
    25b0:	90 93 aa 20 	sts	0x20AA, r25	; 0x8020aa <integralFBz+0x3>
			gx += integralFBx;	// apply integral feedback
    25b4:	20 91 af 20 	lds	r18, 0x20AF	; 0x8020af <integralFBx>
    25b8:	30 91 b0 20 	lds	r19, 0x20B0	; 0x8020b0 <integralFBx+0x1>
    25bc:	40 91 b1 20 	lds	r20, 0x20B1	; 0x8020b1 <integralFBx+0x2>
    25c0:	50 91 b2 20 	lds	r21, 0x20B2	; 0x8020b2 <integralFBx+0x3>
    25c4:	69 89       	ldd	r22, Y+17	; 0x11
    25c6:	7a 89       	ldd	r23, Y+18	; 0x12
    25c8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ca:	9c 89       	ldd	r25, Y+20	; 0x14
    25cc:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    25d0:	69 8b       	std	Y+17, r22	; 0x11
    25d2:	7a 8b       	std	Y+18, r23	; 0x12
    25d4:	8b 8b       	std	Y+19, r24	; 0x13
    25d6:	9c 8b       	std	Y+20, r25	; 0x14
			gy += integralFBy;
    25d8:	20 91 ab 20 	lds	r18, 0x20AB	; 0x8020ab <integralFBy>
    25dc:	30 91 ac 20 	lds	r19, 0x20AC	; 0x8020ac <integralFBy+0x1>
    25e0:	40 91 ad 20 	lds	r20, 0x20AD	; 0x8020ad <integralFBy+0x2>
    25e4:	50 91 ae 20 	lds	r21, 0x20AE	; 0x8020ae <integralFBy+0x3>
    25e8:	69 8d       	ldd	r22, Y+25	; 0x19
    25ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25f0:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    25f4:	69 8f       	std	Y+25, r22	; 0x19
    25f6:	7a 8f       	std	Y+26, r23	; 0x1a
    25f8:	8b 8f       	std	Y+27, r24	; 0x1b
    25fa:	9c 8f       	std	Y+28, r25	; 0x1c
			gz += integralFBz;
    25fc:	20 91 a7 20 	lds	r18, 0x20A7	; 0x8020a7 <integralFBz>
    2600:	30 91 a8 20 	lds	r19, 0x20A8	; 0x8020a8 <integralFBz+0x1>
    2604:	40 91 a9 20 	lds	r20, 0x20A9	; 0x8020a9 <integralFBz+0x2>
    2608:	50 91 aa 20 	lds	r21, 0x20AA	; 0x8020aa <integralFBz+0x3>
    260c:	69 81       	ldd	r22, Y+1	; 0x01
    260e:	7a 81       	ldd	r23, Y+2	; 0x02
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	9c 81       	ldd	r25, Y+4	; 0x04
    2614:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2618:	69 83       	std	Y+1, r22	; 0x01
    261a:	7a 83       	std	Y+2, r23	; 0x02
    261c:	8b 83       	std	Y+3, r24	; 0x03
    261e:	9c 83       	std	Y+4, r25	; 0x04
    2620:	18 c0       	rjmp	.+48     	; 0x2652 <MahonyAHRSupdate+0xb14>
		}
		else {
			integralFBx = 0.0;	// prevent integral windup
    2622:	10 92 af 20 	sts	0x20AF, r1	; 0x8020af <integralFBx>
    2626:	10 92 b0 20 	sts	0x20B0, r1	; 0x8020b0 <integralFBx+0x1>
    262a:	10 92 b1 20 	sts	0x20B1, r1	; 0x8020b1 <integralFBx+0x2>
    262e:	10 92 b2 20 	sts	0x20B2, r1	; 0x8020b2 <integralFBx+0x3>
			integralFBy = 0.0;
    2632:	10 92 ab 20 	sts	0x20AB, r1	; 0x8020ab <integralFBy>
    2636:	10 92 ac 20 	sts	0x20AC, r1	; 0x8020ac <integralFBy+0x1>
    263a:	10 92 ad 20 	sts	0x20AD, r1	; 0x8020ad <integralFBy+0x2>
    263e:	10 92 ae 20 	sts	0x20AE, r1	; 0x8020ae <integralFBy+0x3>
			integralFBz = 0.0;
    2642:	10 92 a7 20 	sts	0x20A7, r1	; 0x8020a7 <integralFBz>
    2646:	10 92 a8 20 	sts	0x20A8, r1	; 0x8020a8 <integralFBz+0x1>
    264a:	10 92 a9 20 	sts	0x20A9, r1	; 0x8020a9 <integralFBz+0x2>
    264e:	10 92 aa 20 	sts	0x20AA, r1	; 0x8020aa <integralFBz+0x3>
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
    2652:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <twoKp>
    2656:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <twoKp+0x1>
    265a:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <twoKp+0x2>
    265e:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <twoKp+0x3>
    2662:	6d 89       	ldd	r22, Y+21	; 0x15
    2664:	7e 89       	ldd	r23, Y+22	; 0x16
    2666:	8f 89       	ldd	r24, Y+23	; 0x17
    2668:	98 8d       	ldd	r25, Y+24	; 0x18
    266a:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    266e:	9b 01       	movw	r18, r22
    2670:	ac 01       	movw	r20, r24
    2672:	69 89       	ldd	r22, Y+17	; 0x11
    2674:	7a 89       	ldd	r23, Y+18	; 0x12
    2676:	8b 89       	ldd	r24, Y+19	; 0x13
    2678:	9c 89       	ldd	r25, Y+20	; 0x14
    267a:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    267e:	69 8b       	std	Y+17, r22	; 0x11
    2680:	7a 8b       	std	Y+18, r23	; 0x12
    2682:	8b 8b       	std	Y+19, r24	; 0x13
    2684:	9c 8b       	std	Y+20, r25	; 0x14
		gy += twoKp * halfey;
    2686:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <twoKp>
    268a:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <twoKp+0x1>
    268e:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <twoKp+0x2>
    2692:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <twoKp+0x3>
    2696:	c5 01       	movw	r24, r10
    2698:	b4 01       	movw	r22, r8
    269a:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    269e:	9b 01       	movw	r18, r22
    26a0:	ac 01       	movw	r20, r24
    26a2:	69 8d       	ldd	r22, Y+25	; 0x19
    26a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26aa:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    26ae:	69 8f       	std	Y+25, r22	; 0x19
    26b0:	7a 8f       	std	Y+26, r23	; 0x1a
    26b2:	8b 8f       	std	Y+27, r24	; 0x1b
    26b4:	9c 8f       	std	Y+28, r25	; 0x1c
		gz += twoKp * halfez;
    26b6:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <twoKp>
    26ba:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <twoKp+0x1>
    26be:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <twoKp+0x2>
    26c2:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <twoKp+0x3>
    26c6:	c7 01       	movw	r24, r14
    26c8:	b6 01       	movw	r22, r12
    26ca:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    26ce:	9b 01       	movw	r18, r22
    26d0:	ac 01       	movw	r20, r24
    26d2:	69 81       	ldd	r22, Y+1	; 0x01
    26d4:	7a 81       	ldd	r23, Y+2	; 0x02
    26d6:	8b 81       	ldd	r24, Y+3	; 0x03
    26d8:	9c 81       	ldd	r25, Y+4	; 0x04
    26da:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    26de:	69 83       	std	Y+1, r22	; 0x01
    26e0:	7a 83       	std	Y+2, r23	; 0x02
    26e2:	8b 83       	std	Y+3, r24	; 0x03
    26e4:	9c 83       	std	Y+4, r25	; 0x04
	}
	
	// Integrate rate of change of quaternion
	gx *= (0.5 * (1.0 / sampleFreq));		// pre-multiply common factors
    26e6:	2a ef       	ldi	r18, 0xFA	; 250
    26e8:	39 ec       	ldi	r19, 0xC9	; 201
    26ea:	44 eb       	ldi	r20, 0xB4	; 180
    26ec:	58 e3       	ldi	r21, 0x38	; 56
    26ee:	69 89       	ldd	r22, Y+17	; 0x11
    26f0:	7a 89       	ldd	r23, Y+18	; 0x12
    26f2:	8b 89       	ldd	r24, Y+19	; 0x13
    26f4:	9c 89       	ldd	r25, Y+20	; 0x14
    26f6:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    26fa:	6d 83       	std	Y+5, r22	; 0x05
    26fc:	7e 83       	std	Y+6, r23	; 0x06
    26fe:	8f 83       	std	Y+7, r24	; 0x07
    2700:	98 87       	std	Y+8, r25	; 0x08
	gy *= (0.5 * (1.0 / sampleFreq));
    2702:	2a ef       	ldi	r18, 0xFA	; 250
    2704:	39 ec       	ldi	r19, 0xC9	; 201
    2706:	44 eb       	ldi	r20, 0xB4	; 180
    2708:	58 e3       	ldi	r21, 0x38	; 56
    270a:	69 8d       	ldd	r22, Y+25	; 0x19
    270c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    270e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2710:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2712:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2716:	69 87       	std	Y+9, r22	; 0x09
    2718:	7a 87       	std	Y+10, r23	; 0x0a
    271a:	8b 87       	std	Y+11, r24	; 0x0b
    271c:	9c 87       	std	Y+12, r25	; 0x0c
	gz *= (0.5 * (1.0 / sampleFreq));
    271e:	2a ef       	ldi	r18, 0xFA	; 250
    2720:	39 ec       	ldi	r19, 0xC9	; 201
    2722:	44 eb       	ldi	r20, 0xB4	; 180
    2724:	58 e3       	ldi	r21, 0x38	; 56
    2726:	69 81       	ldd	r22, Y+1	; 0x01
    2728:	7a 81       	ldd	r23, Y+2	; 0x02
    272a:	8b 81       	ldd	r24, Y+3	; 0x03
    272c:	9c 81       	ldd	r25, Y+4	; 0x04
    272e:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2732:	6d 87       	std	Y+13, r22	; 0x0d
    2734:	7e 87       	std	Y+14, r23	; 0x0e
    2736:	8f 87       	std	Y+15, r24	; 0x0f
    2738:	98 8b       	std	Y+16, r25	; 0x10
	qa = q0;
    273a:	e0 90 18 20 	lds	r14, 0x2018	; 0x802018 <q0>
    273e:	f0 90 19 20 	lds	r15, 0x2019	; 0x802019 <q0+0x1>
    2742:	00 91 1a 20 	lds	r16, 0x201A	; 0x80201a <q0+0x2>
    2746:	10 91 1b 20 	lds	r17, 0x201B	; 0x80201b <q0+0x3>
    274a:	e9 8a       	std	Y+17, r14	; 0x11
    274c:	fa 8a       	std	Y+18, r15	; 0x12
    274e:	0b 8b       	std	Y+19, r16	; 0x13
    2750:	1c 8b       	std	Y+20, r17	; 0x14
	qb = q1;
    2752:	80 90 bb 20 	lds	r8, 0x20BB	; 0x8020bb <q1>
    2756:	90 90 bc 20 	lds	r9, 0x20BC	; 0x8020bc <q1+0x1>
    275a:	a0 90 bd 20 	lds	r10, 0x20BD	; 0x8020bd <q1+0x2>
    275e:	b0 90 be 20 	lds	r11, 0x20BE	; 0x8020be <q1+0x3>
	qc = q2;
    2762:	e0 90 b7 20 	lds	r14, 0x20B7	; 0x8020b7 <q2>
    2766:	f0 90 b8 20 	lds	r15, 0x20B8	; 0x8020b8 <q2+0x1>
    276a:	00 91 b9 20 	lds	r16, 0x20B9	; 0x8020b9 <q2+0x2>
    276e:	10 91 ba 20 	lds	r17, 0x20BA	; 0x8020ba <q2+0x3>
    2772:	e9 8e       	std	Y+25, r14	; 0x19
    2774:	fa 8e       	std	Y+26, r15	; 0x1a
    2776:	0b 8f       	std	Y+27, r16	; 0x1b
    2778:	1c 8f       	std	Y+28, r17	; 0x1c
	q0 += (-qb * gx - qc * gy - q3 * gz);
    277a:	40 90 b3 20 	lds	r4, 0x20B3	; 0x8020b3 <q3>
    277e:	50 90 b4 20 	lds	r5, 0x20B4	; 0x8020b4 <q3+0x1>
    2782:	60 90 b5 20 	lds	r6, 0x20B5	; 0x8020b5 <q3+0x2>
    2786:	70 90 b6 20 	lds	r7, 0x20B6	; 0x8020b6 <q3+0x3>
    278a:	c0 90 18 20 	lds	r12, 0x2018	; 0x802018 <q0>
    278e:	d0 90 19 20 	lds	r13, 0x2019	; 0x802019 <q0+0x1>
    2792:	e0 90 1a 20 	lds	r14, 0x201A	; 0x80201a <q0+0x2>
    2796:	f0 90 1b 20 	lds	r15, 0x201B	; 0x80201b <q0+0x3>
    279a:	c5 01       	movw	r24, r10
    279c:	b4 01       	movw	r22, r8
    279e:	90 58       	subi	r25, 0x80	; 128
    27a0:	2d 81       	ldd	r18, Y+5	; 0x05
    27a2:	3e 81       	ldd	r19, Y+6	; 0x06
    27a4:	4f 81       	ldd	r20, Y+7	; 0x07
    27a6:	58 85       	ldd	r21, Y+8	; 0x08
    27a8:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    27ac:	69 83       	std	Y+1, r22	; 0x01
    27ae:	7a 83       	std	Y+2, r23	; 0x02
    27b0:	8b 83       	std	Y+3, r24	; 0x03
    27b2:	9c 83       	std	Y+4, r25	; 0x04
    27b4:	29 8d       	ldd	r18, Y+25	; 0x19
    27b6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    27b8:	4b 8d       	ldd	r20, Y+27	; 0x1b
    27ba:	5c 8d       	ldd	r21, Y+28	; 0x1c
    27bc:	69 85       	ldd	r22, Y+9	; 0x09
    27be:	7a 85       	ldd	r23, Y+10	; 0x0a
    27c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    27c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    27c4:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    27c8:	9b 01       	movw	r18, r22
    27ca:	ac 01       	movw	r20, r24
    27cc:	69 81       	ldd	r22, Y+1	; 0x01
    27ce:	7a 81       	ldd	r23, Y+2	; 0x02
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	9c 81       	ldd	r25, Y+4	; 0x04
    27d4:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    27d8:	69 83       	std	Y+1, r22	; 0x01
    27da:	7a 83       	std	Y+2, r23	; 0x02
    27dc:	8b 83       	std	Y+3, r24	; 0x03
    27de:	9c 83       	std	Y+4, r25	; 0x04
    27e0:	a3 01       	movw	r20, r6
    27e2:	92 01       	movw	r18, r4
    27e4:	6d 85       	ldd	r22, Y+13	; 0x0d
    27e6:	7e 85       	ldd	r23, Y+14	; 0x0e
    27e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27ea:	98 89       	ldd	r25, Y+16	; 0x10
    27ec:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    27f0:	9b 01       	movw	r18, r22
    27f2:	ac 01       	movw	r20, r24
    27f4:	69 81       	ldd	r22, Y+1	; 0x01
    27f6:	7a 81       	ldd	r23, Y+2	; 0x02
    27f8:	8b 81       	ldd	r24, Y+3	; 0x03
    27fa:	9c 81       	ldd	r25, Y+4	; 0x04
    27fc:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    2800:	a7 01       	movw	r20, r14
    2802:	96 01       	movw	r18, r12
    2804:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2808:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <q0>
    280c:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <q0+0x1>
    2810:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <q0+0x2>
    2814:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <q0+0x3>
	q1 += (qa * gx + qc * gz - q3 * gy);
    2818:	40 90 b3 20 	lds	r4, 0x20B3	; 0x8020b3 <q3>
    281c:	50 90 b4 20 	lds	r5, 0x20B4	; 0x8020b4 <q3+0x1>
    2820:	60 90 b5 20 	lds	r6, 0x20B5	; 0x8020b5 <q3+0x2>
    2824:	70 90 b6 20 	lds	r7, 0x20B6	; 0x8020b6 <q3+0x3>
    2828:	c0 90 bb 20 	lds	r12, 0x20BB	; 0x8020bb <q1>
    282c:	d0 90 bc 20 	lds	r13, 0x20BC	; 0x8020bc <q1+0x1>
    2830:	e0 90 bd 20 	lds	r14, 0x20BD	; 0x8020bd <q1+0x2>
    2834:	f0 90 be 20 	lds	r15, 0x20BE	; 0x8020be <q1+0x3>
    2838:	29 89       	ldd	r18, Y+17	; 0x11
    283a:	3a 89       	ldd	r19, Y+18	; 0x12
    283c:	4b 89       	ldd	r20, Y+19	; 0x13
    283e:	5c 89       	ldd	r21, Y+20	; 0x14
    2840:	6d 81       	ldd	r22, Y+5	; 0x05
    2842:	7e 81       	ldd	r23, Y+6	; 0x06
    2844:	8f 81       	ldd	r24, Y+7	; 0x07
    2846:	98 85       	ldd	r25, Y+8	; 0x08
    2848:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    284c:	69 83       	std	Y+1, r22	; 0x01
    284e:	7a 83       	std	Y+2, r23	; 0x02
    2850:	8b 83       	std	Y+3, r24	; 0x03
    2852:	9c 83       	std	Y+4, r25	; 0x04
    2854:	29 8d       	ldd	r18, Y+25	; 0x19
    2856:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2858:	4b 8d       	ldd	r20, Y+27	; 0x1b
    285a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    285c:	6d 85       	ldd	r22, Y+13	; 0x0d
    285e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2860:	8f 85       	ldd	r24, Y+15	; 0x0f
    2862:	98 89       	ldd	r25, Y+16	; 0x10
    2864:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2868:	9b 01       	movw	r18, r22
    286a:	ac 01       	movw	r20, r24
    286c:	69 81       	ldd	r22, Y+1	; 0x01
    286e:	7a 81       	ldd	r23, Y+2	; 0x02
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	9c 81       	ldd	r25, Y+4	; 0x04
    2874:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2878:	69 83       	std	Y+1, r22	; 0x01
    287a:	7a 83       	std	Y+2, r23	; 0x02
    287c:	8b 83       	std	Y+3, r24	; 0x03
    287e:	9c 83       	std	Y+4, r25	; 0x04
    2880:	a3 01       	movw	r20, r6
    2882:	92 01       	movw	r18, r4
    2884:	69 85       	ldd	r22, Y+9	; 0x09
    2886:	7a 85       	ldd	r23, Y+10	; 0x0a
    2888:	8b 85       	ldd	r24, Y+11	; 0x0b
    288a:	9c 85       	ldd	r25, Y+12	; 0x0c
    288c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2890:	9b 01       	movw	r18, r22
    2892:	ac 01       	movw	r20, r24
    2894:	69 81       	ldd	r22, Y+1	; 0x01
    2896:	7a 81       	ldd	r23, Y+2	; 0x02
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    28a0:	a7 01       	movw	r20, r14
    28a2:	96 01       	movw	r18, r12
    28a4:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    28a8:	60 93 bb 20 	sts	0x20BB, r22	; 0x8020bb <q1>
    28ac:	70 93 bc 20 	sts	0x20BC, r23	; 0x8020bc <q1+0x1>
    28b0:	80 93 bd 20 	sts	0x20BD, r24	; 0x8020bd <q1+0x2>
    28b4:	90 93 be 20 	sts	0x20BE, r25	; 0x8020be <q1+0x3>
	q2 += (qa * gy - qb * gz + q3 * gx);
    28b8:	40 90 b3 20 	lds	r4, 0x20B3	; 0x8020b3 <q3>
    28bc:	50 90 b4 20 	lds	r5, 0x20B4	; 0x8020b4 <q3+0x1>
    28c0:	60 90 b5 20 	lds	r6, 0x20B5	; 0x8020b5 <q3+0x2>
    28c4:	70 90 b6 20 	lds	r7, 0x20B6	; 0x8020b6 <q3+0x3>
    28c8:	c0 90 b7 20 	lds	r12, 0x20B7	; 0x8020b7 <q2>
    28cc:	d0 90 b8 20 	lds	r13, 0x20B8	; 0x8020b8 <q2+0x1>
    28d0:	e0 90 b9 20 	lds	r14, 0x20B9	; 0x8020b9 <q2+0x2>
    28d4:	f0 90 ba 20 	lds	r15, 0x20BA	; 0x8020ba <q2+0x3>
    28d8:	29 89       	ldd	r18, Y+17	; 0x11
    28da:	3a 89       	ldd	r19, Y+18	; 0x12
    28dc:	4b 89       	ldd	r20, Y+19	; 0x13
    28de:	5c 89       	ldd	r21, Y+20	; 0x14
    28e0:	69 85       	ldd	r22, Y+9	; 0x09
    28e2:	7a 85       	ldd	r23, Y+10	; 0x0a
    28e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    28e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    28e8:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    28ec:	69 83       	std	Y+1, r22	; 0x01
    28ee:	7a 83       	std	Y+2, r23	; 0x02
    28f0:	8b 83       	std	Y+3, r24	; 0x03
    28f2:	9c 83       	std	Y+4, r25	; 0x04
    28f4:	a5 01       	movw	r20, r10
    28f6:	94 01       	movw	r18, r8
    28f8:	6d 85       	ldd	r22, Y+13	; 0x0d
    28fa:	7e 85       	ldd	r23, Y+14	; 0x0e
    28fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    28fe:	98 89       	ldd	r25, Y+16	; 0x10
    2900:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2904:	9b 01       	movw	r18, r22
    2906:	ac 01       	movw	r20, r24
    2908:	69 81       	ldd	r22, Y+1	; 0x01
    290a:	7a 81       	ldd	r23, Y+2	; 0x02
    290c:	8b 81       	ldd	r24, Y+3	; 0x03
    290e:	9c 81       	ldd	r25, Y+4	; 0x04
    2910:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    2914:	69 83       	std	Y+1, r22	; 0x01
    2916:	7a 83       	std	Y+2, r23	; 0x02
    2918:	8b 83       	std	Y+3, r24	; 0x03
    291a:	9c 83       	std	Y+4, r25	; 0x04
    291c:	a3 01       	movw	r20, r6
    291e:	92 01       	movw	r18, r4
    2920:	6d 81       	ldd	r22, Y+5	; 0x05
    2922:	7e 81       	ldd	r23, Y+6	; 0x06
    2924:	8f 81       	ldd	r24, Y+7	; 0x07
    2926:	98 85       	ldd	r25, Y+8	; 0x08
    2928:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    292c:	9b 01       	movw	r18, r22
    292e:	ac 01       	movw	r20, r24
    2930:	69 81       	ldd	r22, Y+1	; 0x01
    2932:	7a 81       	ldd	r23, Y+2	; 0x02
    2934:	8b 81       	ldd	r24, Y+3	; 0x03
    2936:	9c 81       	ldd	r25, Y+4	; 0x04
    2938:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    293c:	a7 01       	movw	r20, r14
    293e:	96 01       	movw	r18, r12
    2940:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2944:	60 93 b7 20 	sts	0x20B7, r22	; 0x8020b7 <q2>
    2948:	70 93 b8 20 	sts	0x20B8, r23	; 0x8020b8 <q2+0x1>
    294c:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <q2+0x2>
    2950:	90 93 ba 20 	sts	0x20BA, r25	; 0x8020ba <q2+0x3>
	q3 += (qa * gz + qb * gy - qc * gx); 
    2954:	c0 90 b3 20 	lds	r12, 0x20B3	; 0x8020b3 <q3>
    2958:	d0 90 b4 20 	lds	r13, 0x20B4	; 0x8020b4 <q3+0x1>
    295c:	e0 90 b5 20 	lds	r14, 0x20B5	; 0x8020b5 <q3+0x2>
    2960:	f0 90 b6 20 	lds	r15, 0x20B6	; 0x8020b6 <q3+0x3>
    2964:	29 89       	ldd	r18, Y+17	; 0x11
    2966:	3a 89       	ldd	r19, Y+18	; 0x12
    2968:	4b 89       	ldd	r20, Y+19	; 0x13
    296a:	5c 89       	ldd	r21, Y+20	; 0x14
    296c:	6d 85       	ldd	r22, Y+13	; 0x0d
    296e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2970:	8f 85       	ldd	r24, Y+15	; 0x0f
    2972:	98 89       	ldd	r25, Y+16	; 0x10
    2974:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2978:	2b 01       	movw	r4, r22
    297a:	3c 01       	movw	r6, r24
    297c:	a5 01       	movw	r20, r10
    297e:	94 01       	movw	r18, r8
    2980:	69 85       	ldd	r22, Y+9	; 0x09
    2982:	7a 85       	ldd	r23, Y+10	; 0x0a
    2984:	8b 85       	ldd	r24, Y+11	; 0x0b
    2986:	9c 85       	ldd	r25, Y+12	; 0x0c
    2988:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    298c:	9b 01       	movw	r18, r22
    298e:	ac 01       	movw	r20, r24
    2990:	c3 01       	movw	r24, r6
    2992:	b2 01       	movw	r22, r4
    2994:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2998:	4b 01       	movw	r8, r22
    299a:	5c 01       	movw	r10, r24
    299c:	29 8d       	ldd	r18, Y+25	; 0x19
    299e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    29a0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    29a2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    29a4:	6d 81       	ldd	r22, Y+5	; 0x05
    29a6:	7e 81       	ldd	r23, Y+6	; 0x06
    29a8:	8f 81       	ldd	r24, Y+7	; 0x07
    29aa:	98 85       	ldd	r25, Y+8	; 0x08
    29ac:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    29b0:	9b 01       	movw	r18, r22
    29b2:	ac 01       	movw	r20, r24
    29b4:	c5 01       	movw	r24, r10
    29b6:	b4 01       	movw	r22, r8
    29b8:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    29bc:	a7 01       	movw	r20, r14
    29be:	96 01       	movw	r18, r12
    29c0:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    29c4:	60 93 b3 20 	sts	0x20B3, r22	; 0x8020b3 <q3>
    29c8:	70 93 b4 20 	sts	0x20B4, r23	; 0x8020b4 <q3+0x1>
    29cc:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <q3+0x2>
    29d0:	90 93 b6 20 	sts	0x20B6, r25	; 0x8020b6 <q3+0x3>
	
	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    29d4:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
    29d8:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
    29dc:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
    29e0:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
    29e4:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <q0>
    29e8:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <q0+0x1>
    29ec:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <q0+0x2>
    29f0:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <q0+0x3>
    29f4:	80 90 bb 20 	lds	r8, 0x20BB	; 0x8020bb <q1>
    29f8:	90 90 bc 20 	lds	r9, 0x20BC	; 0x8020bc <q1+0x1>
    29fc:	a0 90 bd 20 	lds	r10, 0x20BD	; 0x8020bd <q1+0x2>
    2a00:	b0 90 be 20 	lds	r11, 0x20BE	; 0x8020be <q1+0x3>
    2a04:	40 90 bb 20 	lds	r4, 0x20BB	; 0x8020bb <q1>
    2a08:	50 90 bc 20 	lds	r5, 0x20BC	; 0x8020bc <q1+0x1>
    2a0c:	60 90 bd 20 	lds	r6, 0x20BD	; 0x8020bd <q1+0x2>
    2a10:	70 90 be 20 	lds	r7, 0x20BE	; 0x8020be <q1+0x3>
    2a14:	e0 90 b7 20 	lds	r14, 0x20B7	; 0x8020b7 <q2>
    2a18:	f0 90 b8 20 	lds	r15, 0x20B8	; 0x8020b8 <q2+0x1>
    2a1c:	00 91 b9 20 	lds	r16, 0x20B9	; 0x8020b9 <q2+0x2>
    2a20:	10 91 ba 20 	lds	r17, 0x20BA	; 0x8020ba <q2+0x3>
    2a24:	ed 82       	std	Y+5, r14	; 0x05
    2a26:	fe 82       	std	Y+6, r15	; 0x06
    2a28:	0f 83       	std	Y+7, r16	; 0x07
    2a2a:	18 87       	std	Y+8, r17	; 0x08
    2a2c:	e0 90 b7 20 	lds	r14, 0x20B7	; 0x8020b7 <q2>
    2a30:	f0 90 b8 20 	lds	r15, 0x20B8	; 0x8020b8 <q2+0x1>
    2a34:	00 91 b9 20 	lds	r16, 0x20B9	; 0x8020b9 <q2+0x2>
    2a38:	10 91 ba 20 	lds	r17, 0x20BA	; 0x8020ba <q2+0x3>
    2a3c:	e9 86       	std	Y+9, r14	; 0x09
    2a3e:	fa 86       	std	Y+10, r15	; 0x0a
    2a40:	0b 87       	std	Y+11, r16	; 0x0b
    2a42:	1c 87       	std	Y+12, r17	; 0x0c
    2a44:	e0 90 b3 20 	lds	r14, 0x20B3	; 0x8020b3 <q3>
    2a48:	f0 90 b4 20 	lds	r15, 0x20B4	; 0x8020b4 <q3+0x1>
    2a4c:	00 91 b5 20 	lds	r16, 0x20B5	; 0x8020b5 <q3+0x2>
    2a50:	10 91 b6 20 	lds	r17, 0x20B6	; 0x8020b6 <q3+0x3>
    2a54:	e9 82       	std	Y+1, r14	; 0x01
    2a56:	fa 82       	std	Y+2, r15	; 0x02
    2a58:	0b 83       	std	Y+3, r16	; 0x03
    2a5a:	1c 83       	std	Y+4, r17	; 0x04
    2a5c:	e0 90 b3 20 	lds	r14, 0x20B3	; 0x8020b3 <q3>
    2a60:	f0 90 b4 20 	lds	r15, 0x20B4	; 0x8020b4 <q3+0x1>
    2a64:	00 91 b5 20 	lds	r16, 0x20B5	; 0x8020b5 <q3+0x2>
    2a68:	10 91 b6 20 	lds	r17, 0x20B6	; 0x8020b6 <q3+0x3>
    2a6c:	ed 86       	std	Y+13, r14	; 0x0d
    2a6e:	fe 86       	std	Y+14, r15	; 0x0e
    2a70:	0f 87       	std	Y+15, r16	; 0x0f
    2a72:	18 8b       	std	Y+16, r17	; 0x10
    2a74:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2a78:	6b 01       	movw	r12, r22
    2a7a:	7c 01       	movw	r14, r24
    2a7c:	a3 01       	movw	r20, r6
    2a7e:	92 01       	movw	r18, r4
    2a80:	c5 01       	movw	r24, r10
    2a82:	b4 01       	movw	r22, r8
    2a84:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2a88:	9b 01       	movw	r18, r22
    2a8a:	ac 01       	movw	r20, r24
    2a8c:	c7 01       	movw	r24, r14
    2a8e:	b6 01       	movw	r22, r12
    2a90:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2a94:	4b 01       	movw	r8, r22
    2a96:	5c 01       	movw	r10, r24
    2a98:	29 85       	ldd	r18, Y+9	; 0x09
    2a9a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a9c:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a9e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2aa0:	6d 81       	ldd	r22, Y+5	; 0x05
    2aa2:	7e 81       	ldd	r23, Y+6	; 0x06
    2aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa6:	98 85       	ldd	r25, Y+8	; 0x08
    2aa8:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2aac:	9b 01       	movw	r18, r22
    2aae:	ac 01       	movw	r20, r24
    2ab0:	c5 01       	movw	r24, r10
    2ab2:	b4 01       	movw	r22, r8
    2ab4:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2ab8:	4b 01       	movw	r8, r22
    2aba:	5c 01       	movw	r10, r24
    2abc:	2d 85       	ldd	r18, Y+13	; 0x0d
    2abe:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ac0:	4f 85       	ldd	r20, Y+15	; 0x0f
    2ac2:	58 89       	ldd	r21, Y+16	; 0x10
    2ac4:	69 81       	ldd	r22, Y+1	; 0x01
    2ac6:	7a 81       	ldd	r23, Y+2	; 0x02
    2ac8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aca:	9c 81       	ldd	r25, Y+4	; 0x04
    2acc:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2ad0:	9b 01       	movw	r18, r22
    2ad2:	ac 01       	movw	r20, r24
    2ad4:	c5 01       	movw	r24, r10
    2ad6:	b4 01       	movw	r22, r8
    2ad8:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    2adc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <invSqrt>
    2ae0:	6b 01       	movw	r12, r22
    2ae2:	7c 01       	movw	r14, r24
	q0 *= recipNorm;
    2ae4:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <q0>
    2ae8:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <q0+0x1>
    2aec:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <q0+0x2>
    2af0:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <q0+0x3>
    2af4:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2af8:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <q0>
    2afc:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <q0+0x1>
    2b00:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <q0+0x2>
    2b04:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <q0+0x3>
	q1 *= recipNorm;
    2b08:	20 91 bb 20 	lds	r18, 0x20BB	; 0x8020bb <q1>
    2b0c:	30 91 bc 20 	lds	r19, 0x20BC	; 0x8020bc <q1+0x1>
    2b10:	40 91 bd 20 	lds	r20, 0x20BD	; 0x8020bd <q1+0x2>
    2b14:	50 91 be 20 	lds	r21, 0x20BE	; 0x8020be <q1+0x3>
    2b18:	c7 01       	movw	r24, r14
    2b1a:	b6 01       	movw	r22, r12
    2b1c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2b20:	60 93 bb 20 	sts	0x20BB, r22	; 0x8020bb <q1>
    2b24:	70 93 bc 20 	sts	0x20BC, r23	; 0x8020bc <q1+0x1>
    2b28:	80 93 bd 20 	sts	0x20BD, r24	; 0x8020bd <q1+0x2>
    2b2c:	90 93 be 20 	sts	0x20BE, r25	; 0x8020be <q1+0x3>
	q2 *= recipNorm;
    2b30:	20 91 b7 20 	lds	r18, 0x20B7	; 0x8020b7 <q2>
    2b34:	30 91 b8 20 	lds	r19, 0x20B8	; 0x8020b8 <q2+0x1>
    2b38:	40 91 b9 20 	lds	r20, 0x20B9	; 0x8020b9 <q2+0x2>
    2b3c:	50 91 ba 20 	lds	r21, 0x20BA	; 0x8020ba <q2+0x3>
    2b40:	c7 01       	movw	r24, r14
    2b42:	b6 01       	movw	r22, r12
    2b44:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2b48:	60 93 b7 20 	sts	0x20B7, r22	; 0x8020b7 <q2>
    2b4c:	70 93 b8 20 	sts	0x20B8, r23	; 0x8020b8 <q2+0x1>
    2b50:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <q2+0x2>
    2b54:	90 93 ba 20 	sts	0x20BA, r25	; 0x8020ba <q2+0x3>
	q3 *= recipNorm;
    2b58:	20 91 b3 20 	lds	r18, 0x20B3	; 0x8020b3 <q3>
    2b5c:	30 91 b4 20 	lds	r19, 0x20B4	; 0x8020b4 <q3+0x1>
    2b60:	40 91 b5 20 	lds	r20, 0x20B5	; 0x8020b5 <q3+0x2>
    2b64:	50 91 b6 20 	lds	r21, 0x20B6	; 0x8020b6 <q3+0x3>
    2b68:	c7 01       	movw	r24, r14
    2b6a:	b6 01       	movw	r22, r12
    2b6c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    2b70:	60 93 b3 20 	sts	0x20B3, r22	; 0x8020b3 <q3>
    2b74:	70 93 b4 20 	sts	0x20B4, r23	; 0x8020b4 <q3+0x1>
    2b78:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <q3+0x2>
    2b7c:	90 93 b6 20 	sts	0x20B6, r25	; 0x8020b6 <q3+0x3>
}
    2b80:	c8 5a       	subi	r28, 0xA8	; 168
    2b82:	df 4f       	sbci	r29, 0xFF	; 255
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	de bf       	out	0x3e, r29	; 62
    2b88:	df 91       	pop	r29
    2b8a:	cf 91       	pop	r28
    2b8c:	1f 91       	pop	r17
    2b8e:	0f 91       	pop	r16
    2b90:	ff 90       	pop	r15
    2b92:	ef 90       	pop	r14
    2b94:	df 90       	pop	r13
    2b96:	cf 90       	pop	r12
    2b98:	bf 90       	pop	r11
    2b9a:	af 90       	pop	r10
    2b9c:	9f 90       	pop	r9
    2b9e:	8f 90       	pop	r8
    2ba0:	7f 90       	pop	r7
    2ba2:	6f 90       	pop	r6
    2ba4:	5f 90       	pop	r5
    2ba6:	4f 90       	pop	r4
    2ba8:	3f 90       	pop	r3
    2baa:	2f 90       	pop	r2
    2bac:	08 95       	ret

00002bae <rbu8_init>:
void rbu8_init(RingBufferu8_t* buffer, uint8_t* backing_array, uint16_t backing_array_length)
/*	Call to reset the head and tail variables of a RingBuffer. 
	backing_array is the array that the ring buffer actually stores its data in
	backing_array_length is kind of exactly what it says it is
*/
{
    2bae:	fc 01       	movw	r30, r24
	buffer->head = 0; //Beginning of array
    2bb0:	12 82       	std	Z+2, r1	; 0x02
    2bb2:	13 82       	std	Z+3, r1	; 0x03
	buffer->tail = 0; //End of array
    2bb4:	14 82       	std	Z+4, r1	; 0x04
    2bb6:	15 82       	std	Z+5, r1	; 0x05
	buffer->buffer = backing_array;
    2bb8:	66 83       	std	Z+6, r22	; 0x06
    2bba:	77 83       	std	Z+7, r23	; 0x07
	buffer->array_length = backing_array_length;
    2bbc:	40 83       	st	Z, r20
    2bbe:	51 83       	std	Z+1, r21	; 0x01
    2bc0:	08 95       	ret

00002bc2 <rbu8_length>:
uint16_t rbu8_length(RingBufferu8_t* buffer)
/*	Returns the number of bytes of data currently stored in the RingBuffer pointed to by its argument
	The return value will always be greater than or equal to 0
	And less than or equal to buffer->array_length
*/
{
    2bc2:	fc 01       	movw	r30, r24
	if (buffer->head >= buffer->tail)
    2bc4:	82 81       	ldd	r24, Z+2	; 0x02
    2bc6:	93 81       	ldd	r25, Z+3	; 0x03
    2bc8:	44 81       	ldd	r20, Z+4	; 0x04
    2bca:	55 81       	ldd	r21, Z+5	; 0x05
    2bcc:	84 17       	cp	r24, r20
    2bce:	95 07       	cpc	r25, r21
    2bd0:	18 f0       	brcs	.+6      	; 0x2bd8 <rbu8_length+0x16>
	//We are not currently wrapped around the end of the buffer, so we are using the space between the head and tail
	{
		return buffer->head - buffer->tail;
    2bd2:	84 1b       	sub	r24, r20
    2bd4:	95 0b       	sbc	r25, r21
    2bd6:	08 95       	ret
	}
	else
	//We have wrapped around the end of the buffer, so subtract the unused space between the head and tail
	{
		return buffer->array_length - (buffer->tail - buffer->head);
    2bd8:	20 81       	ld	r18, Z
    2bda:	31 81       	ldd	r19, Z+1	; 0x01
    2bdc:	82 0f       	add	r24, r18
    2bde:	93 1f       	adc	r25, r19
    2be0:	84 1b       	sub	r24, r20
    2be2:	95 0b       	sbc	r25, r21
	}
}
    2be4:	08 95       	ret

00002be6 <rbu8_read>:
	length - number of bytes to be read
	Return values
	* 0 - success
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
    2be6:	8f 92       	push	r8
    2be8:	9f 92       	push	r9
    2bea:	af 92       	push	r10
    2bec:	bf 92       	push	r11
    2bee:	cf 92       	push	r12
    2bf0:	df 92       	push	r13
    2bf2:	ef 92       	push	r14
    2bf4:	ff 92       	push	r15
    2bf6:	0f 93       	push	r16
    2bf8:	1f 93       	push	r17
    2bfa:	cf 93       	push	r28
    2bfc:	df 93       	push	r29
    2bfe:	8c 01       	movw	r16, r24
    2c00:	6a 01       	movw	r12, r20
	uint16_t index = buffer->tail;
    2c02:	dc 01       	movw	r26, r24
    2c04:	14 96       	adiw	r26, 0x04	; 4
    2c06:	cd 91       	ld	r28, X+
    2c08:	dc 91       	ld	r29, X
    2c0a:	15 97       	sbiw	r26, 0x05	; 5
    2c0c:	e6 2e       	mov	r14, r22
    2c0e:	f7 2e       	mov	r15, r23
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
    2c10:	a1 2c       	mov	r10, r1
    2c12:	b1 2c       	mov	r11, r1
    2c14:	84 2e       	mov	r8, r20
    2c16:	9d 2c       	mov	r9, r13
    2c18:	18 c0       	rjmp	.+48     	; 0x2c4a <rbu8_read+0x64>
	{

		dest[i] = buffer->buffer[index];
    2c1a:	d8 01       	movw	r26, r16
    2c1c:	16 96       	adiw	r26, 0x06	; 6
    2c1e:	ed 91       	ld	r30, X+
    2c20:	fc 91       	ld	r31, X
    2c22:	17 97       	sbiw	r26, 0x07	; 7
    2c24:	ec 0f       	add	r30, r28
    2c26:	fd 1f       	adc	r31, r29
    2c28:	80 81       	ld	r24, Z
    2c2a:	f7 01       	movw	r30, r14
    2c2c:	81 93       	st	Z+, r24
    2c2e:	7f 01       	movw	r14, r30
		if (index == buffer->array_length - 1) //Reset if we've hit the end
    2c30:	8d 91       	ld	r24, X+
    2c32:	9c 91       	ld	r25, X
    2c34:	01 97       	sbiw	r24, 0x01	; 1
    2c36:	c8 17       	cp	r28, r24
    2c38:	d9 07       	cpc	r29, r25
    2c3a:	11 f0       	breq	.+4      	; 0x2c40 <rbu8_read+0x5a>
		{
			index = 0;
		}
		else
		{
			index++;
    2c3c:	21 96       	adiw	r28, 0x01	; 1
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <rbu8_read+0x5e>
	{

		dest[i] = buffer->buffer[index];
		if (index == buffer->array_length - 1) //Reset if we've hit the end
		{
			index = 0;
    2c40:	c0 e0       	ldi	r28, 0x00	; 0
    2c42:	d0 e0       	ldi	r29, 0x00	; 0
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
	uint16_t index = buffer->tail;
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
    2c44:	ff ef       	ldi	r31, 0xFF	; 255
    2c46:	af 1a       	sub	r10, r31
    2c48:	bf 0a       	sbc	r11, r31
    2c4a:	c8 01       	movw	r24, r16
    2c4c:	ba df       	rcall	.-140    	; 0x2bc2 <rbu8_length>
    2c4e:	9c 01       	movw	r18, r24
    2c50:	c8 16       	cp	r12, r24
    2c52:	d9 06       	cpc	r13, r25
    2c54:	10 f4       	brcc	.+4      	; 0x2c5a <rbu8_read+0x74>
    2c56:	28 2d       	mov	r18, r8
    2c58:	39 2d       	mov	r19, r9
    2c5a:	a2 16       	cp	r10, r18
    2c5c:	b3 06       	cpc	r11, r19
    2c5e:	e8 f2       	brcs	.-70     	; 0x2c1a <rbu8_read+0x34>
    2c60:	21 e0       	ldi	r18, 0x01	; 1
    2c62:	8c 15       	cp	r24, r12
    2c64:	9d 05       	cpc	r25, r13
    2c66:	08 f0       	brcs	.+2      	; 0x2c6a <rbu8_read+0x84>
    2c68:	20 e0       	ldi	r18, 0x00	; 0
	}
	if (length > rbu8_length(buffer))
		return 1;
	else
		return 0;
}
    2c6a:	82 2f       	mov	r24, r18
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    2c70:	1f 91       	pop	r17
    2c72:	0f 91       	pop	r16
    2c74:	ff 90       	pop	r15
    2c76:	ef 90       	pop	r14
    2c78:	df 90       	pop	r13
    2c7a:	cf 90       	pop	r12
    2c7c:	bf 90       	pop	r11
    2c7e:	af 90       	pop	r10
    2c80:	9f 90       	pop	r9
    2c82:	8f 90       	pop	r8
    2c84:	08 95       	ret

00002c86 <rbu8_delete_oldest>:

void rbu8_delete_oldest(RingBufferu8_t* buffer, uint16_t length)
/*	Deletes data from the ring buffer
	All it really has to do is move buffer->tail up length bytes or until one byte below buffer->head, whichever is lower
*/
{
    2c86:	0f 93       	push	r16
    2c88:	1f 93       	push	r17
    2c8a:	cf 93       	push	r28
    2c8c:	df 93       	push	r29
    2c8e:	ec 01       	movw	r28, r24
	uint16_t move_distance = min(length, rbu8_length(buffer));
    2c90:	8b 01       	movw	r16, r22
    2c92:	97 df       	rcall	.-210    	; 0x2bc2 <rbu8_length>
    2c94:	9c 01       	movw	r18, r24
    2c96:	08 17       	cp	r16, r24
    2c98:	19 07       	cpc	r17, r25
    2c9a:	08 f4       	brcc	.+2      	; 0x2c9e <rbu8_delete_oldest+0x18>
	if (move_distance >= rbu8_length(buffer))
    2c9c:	98 01       	movw	r18, r16
    2c9e:	28 17       	cp	r18, r24
    2ca0:	39 07       	cpc	r19, r25
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
    2ca2:	68 f0       	brcs	.+26     	; 0x2cbe <rbu8_delete_oldest+0x38>
    2ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca8:	82 0f       	add	r24, r18
    2caa:	93 1f       	adc	r25, r19
    2cac:	68 81       	ld	r22, Y
    2cae:	79 81       	ldd	r23, Y+1	; 0x01
    2cb0:	0e 94 33 34 	call	0x6866	; 0x6866 <__udivmodhi4>
    2cb4:	8c 83       	std	Y+4, r24	; 0x04
		buffer->head = buffer->tail;
    2cb6:	9d 83       	std	Y+5, r25	; 0x05
    2cb8:	8a 83       	std	Y+2, r24	; 0x02
    2cba:	9b 83       	std	Y+3, r25	; 0x03
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
    2cbc:	0a c0       	rjmp	.+20     	; 0x2cd2 <rbu8_delete_oldest+0x4c>
    2cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc0:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc2:	82 0f       	add	r24, r18
    2cc4:	93 1f       	adc	r25, r19
    2cc6:	68 81       	ld	r22, Y
    2cc8:	79 81       	ldd	r23, Y+1	; 0x01
    2cca:	0e 94 33 34 	call	0x6866	; 0x6866 <__udivmodhi4>
    2cce:	8c 83       	std	Y+4, r24	; 0x04
	}
}
    2cd0:	9d 83       	std	Y+5, r25	; 0x05
    2cd2:	df 91       	pop	r29
    2cd4:	cf 91       	pop	r28
    2cd6:	1f 91       	pop	r17
    2cd8:	0f 91       	pop	r16
    2cda:	08 95       	ret

00002cdc <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	1f 92       	push	r1
    2ce2:	1f 92       	push	r1
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2ce8:	8f ef       	ldi	r24, 0xFF	; 255
    2cea:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2cee:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2cf2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2cf6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2cfa:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    2cfe:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    2d02:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2d06:	8f b7       	in	r24, 0x3f	; 63
    2d08:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2d0a:	f8 94       	cli
	return flags;
    2d0c:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2d0e:	e0 e5       	ldi	r30, 0x50	; 80
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	82 60       	ori	r24, 0x02	; 2
    2d16:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d18:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2d1a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2d1c:	81 ff       	sbrs	r24, 1
    2d1e:	fd cf       	rjmp	.-6      	; 0x2d1a <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    2d20:	61 e0       	ldi	r22, 0x01	; 1
    2d22:	80 e4       	ldi	r24, 0x40	; 64
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	52 d2       	rcall	.+1188   	; 0x31cc <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2d28:	8f b7       	in	r24, 0x3f	; 63
    2d2a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2d2c:	f8 94       	cli
	return flags;
    2d2e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    2d30:	e0 e5       	ldi	r30, 0x50	; 80
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	8e 7f       	andi	r24, 0xFE	; 254
    2d38:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d3a:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    2d3c:	0f 90       	pop	r0
    2d3e:	0f 90       	pop	r0
    2d40:	df 91       	pop	r29
    2d42:	cf 91       	pop	r28
    2d44:	08 95       	ret

00002d46 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    2d46:	cf 93       	push	r28
    2d48:	df 93       	push	r29
    2d4a:	1f 92       	push	r1
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2d50:	9f b7       	in	r25, 0x3f	; 63
    2d52:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2d54:	f8 94       	cli
	return flags;
    2d56:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2d58:	e8 2f       	mov	r30, r24
    2d5a:	f0 e0       	ldi	r31, 0x00	; 0
    2d5c:	e0 59       	subi	r30, 0x90	; 144
    2d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d60:	60 95       	com	r22
    2d62:	80 81       	ld	r24, Z
    2d64:	68 23       	and	r22, r24
    2d66:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d68:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2d6a:	0f 90       	pop	r0
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	08 95       	ret

00002d72 <usart_serial_write_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
    2d72:	ef 92       	push	r14
    2d74:	ff 92       	push	r15
    2d76:	0f 93       	push	r16
    2d78:	1f 93       	push	r17
    2d7a:	cf 93       	push	r28
    2d7c:	df 93       	push	r29
    2d7e:	7c 01       	movw	r14, r24
    2d80:	8b 01       	movw	r16, r22
    2d82:	ea 01       	movw	r28, r20
	while (len) {
    2d84:	20 97       	sbiw	r28, 0x00	; 0
    2d86:	39 f0       	breq	.+14     	; 0x2d96 <usart_serial_write_packet+0x24>
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
    2d88:	f8 01       	movw	r30, r16
    2d8a:	61 91       	ld	r22, Z+
    2d8c:	8f 01       	movw	r16, r30
    2d8e:	c7 01       	movw	r24, r14
    2d90:	2d d2       	rcall	.+1114   	; 0x31ec <usart_putchar>
		usart_serial_putchar(usart, *data);
		len--;
    2d92:	21 97       	sbiw	r28, 0x01	; 1
 *
 */
status_code_t usart_serial_write_packet(usart_if usart, const uint8_t *data,
		size_t len)
{
	while (len) {
    2d94:	c9 f7       	brne	.-14     	; 0x2d88 <usart_serial_write_packet+0x16>
		usart_serial_putchar(usart, *data);
		len--;
		data++;
	}
	return STATUS_OK;
}
    2d96:	80 e0       	ldi	r24, 0x00	; 0
    2d98:	df 91       	pop	r29
    2d9a:	cf 91       	pop	r28
    2d9c:	1f 91       	pop	r17
    2d9e:	0f 91       	pop	r16
    2da0:	ff 90       	pop	r15
    2da2:	ef 90       	pop	r14
    2da4:	08 95       	ret

00002da6 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    2da6:	cf 93       	push	r28
    2da8:	df 93       	push	r29
    2daa:	1f 92       	push	r1
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    2db0:	80 91 a1 24 	lds	r24, 0x24A1	; 0x8024a1 <stdio_base>
    2db4:	90 91 a2 24 	lds	r25, 0x24A2	; 0x8024a2 <stdio_base+0x1>
    2db8:	e0 91 9d 24 	lds	r30, 0x249D	; 0x80249d <ptr_get>
    2dbc:	f0 91 9e 24 	lds	r31, 0x249E	; 0x80249e <ptr_get+0x1>
    2dc0:	be 01       	movw	r22, r28
    2dc2:	6f 5f       	subi	r22, 0xFF	; 255
    2dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc6:	19 95       	eicall
	return c;
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dca:	08 2e       	mov	r0, r24
    2dcc:	00 0c       	add	r0, r0
    2dce:	99 0b       	sbc	r25, r25
    2dd0:	0f 90       	pop	r0
    2dd2:	df 91       	pop	r29
    2dd4:	cf 91       	pop	r28
    2dd6:	08 95       	ret

00002dd8 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    2dd8:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    2dda:	80 91 a1 24 	lds	r24, 0x24A1	; 0x8024a1 <stdio_base>
    2dde:	90 91 a2 24 	lds	r25, 0x24A2	; 0x8024a2 <stdio_base+0x1>
    2de2:	e0 91 9f 24 	lds	r30, 0x249F	; 0x80249f <ptr_put>
    2de6:	f0 91 a0 24 	lds	r31, 0x24A0	; 0x8024a0 <ptr_put+0x1>
    2dea:	19 95       	eicall
    2dec:	99 23       	and	r25, r25
    2dee:	1c f0       	brlt	.+6      	; 0x2df6 <_write+0x1e>
		return -1;
	}
	return 1;
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    2df6:	8f ef       	ldi	r24, 0xFF	; 255
    2df8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    2dfa:	08 95       	ret

00002dfc <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    2dfc:	1f 92       	push	r1
    2dfe:	0f 92       	push	r0
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	0f 92       	push	r0
    2e04:	11 24       	eor	r1, r1
    2e06:	08 b6       	in	r0, 0x38	; 56
    2e08:	0f 92       	push	r0
    2e0a:	18 be       	out	0x38, r1	; 56
    2e0c:	09 b6       	in	r0, 0x39	; 57
    2e0e:	0f 92       	push	r0
    2e10:	19 be       	out	0x39, r1	; 57
    2e12:	0b b6       	in	r0, 0x3b	; 59
    2e14:	0f 92       	push	r0
    2e16:	1b be       	out	0x3b, r1	; 59
    2e18:	2f 93       	push	r18
    2e1a:	3f 93       	push	r19
    2e1c:	4f 93       	push	r20
    2e1e:	5f 93       	push	r21
    2e20:	6f 93       	push	r22
    2e22:	7f 93       	push	r23
    2e24:	8f 93       	push	r24
    2e26:	9f 93       	push	r25
    2e28:	af 93       	push	r26
    2e2a:	bf 93       	push	r27
    2e2c:	ef 93       	push	r30
    2e2e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    2e30:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    2e34:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    2e38:	e0 91 a5 24 	lds	r30, 0x24A5	; 0x8024a5 <adca_callback>
    2e3c:	f0 91 a6 24 	lds	r31, 0x24A6	; 0x8024a6 <adca_callback+0x1>
    2e40:	61 e0       	ldi	r22, 0x01	; 1
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	92 e0       	ldi	r25, 0x02	; 2
    2e46:	19 95       	eicall
}
    2e48:	ff 91       	pop	r31
    2e4a:	ef 91       	pop	r30
    2e4c:	bf 91       	pop	r27
    2e4e:	af 91       	pop	r26
    2e50:	9f 91       	pop	r25
    2e52:	8f 91       	pop	r24
    2e54:	7f 91       	pop	r23
    2e56:	6f 91       	pop	r22
    2e58:	5f 91       	pop	r21
    2e5a:	4f 91       	pop	r20
    2e5c:	3f 91       	pop	r19
    2e5e:	2f 91       	pop	r18
    2e60:	0f 90       	pop	r0
    2e62:	0b be       	out	0x3b, r0	; 59
    2e64:	0f 90       	pop	r0
    2e66:	09 be       	out	0x39, r0	; 57
    2e68:	0f 90       	pop	r0
    2e6a:	08 be       	out	0x38, r0	; 56
    2e6c:	0f 90       	pop	r0
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	0f 90       	pop	r0
    2e72:	1f 90       	pop	r1
    2e74:	18 95       	reti

00002e76 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    2e76:	1f 92       	push	r1
    2e78:	0f 92       	push	r0
    2e7a:	0f b6       	in	r0, 0x3f	; 63
    2e7c:	0f 92       	push	r0
    2e7e:	11 24       	eor	r1, r1
    2e80:	08 b6       	in	r0, 0x38	; 56
    2e82:	0f 92       	push	r0
    2e84:	18 be       	out	0x38, r1	; 56
    2e86:	09 b6       	in	r0, 0x39	; 57
    2e88:	0f 92       	push	r0
    2e8a:	19 be       	out	0x39, r1	; 57
    2e8c:	0b b6       	in	r0, 0x3b	; 59
    2e8e:	0f 92       	push	r0
    2e90:	1b be       	out	0x3b, r1	; 59
    2e92:	2f 93       	push	r18
    2e94:	3f 93       	push	r19
    2e96:	4f 93       	push	r20
    2e98:	5f 93       	push	r21
    2e9a:	6f 93       	push	r22
    2e9c:	7f 93       	push	r23
    2e9e:	8f 93       	push	r24
    2ea0:	9f 93       	push	r25
    2ea2:	af 93       	push	r26
    2ea4:	bf 93       	push	r27
    2ea6:	ef 93       	push	r30
    2ea8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    2eaa:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    2eae:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    2eb2:	e0 91 a5 24 	lds	r30, 0x24A5	; 0x8024a5 <adca_callback>
    2eb6:	f0 91 a6 24 	lds	r31, 0x24A6	; 0x8024a6 <adca_callback+0x1>
    2eba:	62 e0       	ldi	r22, 0x02	; 2
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	92 e0       	ldi	r25, 0x02	; 2
    2ec0:	19 95       	eicall
}
    2ec2:	ff 91       	pop	r31
    2ec4:	ef 91       	pop	r30
    2ec6:	bf 91       	pop	r27
    2ec8:	af 91       	pop	r26
    2eca:	9f 91       	pop	r25
    2ecc:	8f 91       	pop	r24
    2ece:	7f 91       	pop	r23
    2ed0:	6f 91       	pop	r22
    2ed2:	5f 91       	pop	r21
    2ed4:	4f 91       	pop	r20
    2ed6:	3f 91       	pop	r19
    2ed8:	2f 91       	pop	r18
    2eda:	0f 90       	pop	r0
    2edc:	0b be       	out	0x3b, r0	; 59
    2ede:	0f 90       	pop	r0
    2ee0:	09 be       	out	0x39, r0	; 57
    2ee2:	0f 90       	pop	r0
    2ee4:	08 be       	out	0x38, r0	; 56
    2ee6:	0f 90       	pop	r0
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	0f 90       	pop	r0
    2eec:	1f 90       	pop	r1
    2eee:	18 95       	reti

00002ef0 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    2ef0:	1f 92       	push	r1
    2ef2:	0f 92       	push	r0
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	0f 92       	push	r0
    2ef8:	11 24       	eor	r1, r1
    2efa:	08 b6       	in	r0, 0x38	; 56
    2efc:	0f 92       	push	r0
    2efe:	18 be       	out	0x38, r1	; 56
    2f00:	09 b6       	in	r0, 0x39	; 57
    2f02:	0f 92       	push	r0
    2f04:	19 be       	out	0x39, r1	; 57
    2f06:	0b b6       	in	r0, 0x3b	; 59
    2f08:	0f 92       	push	r0
    2f0a:	1b be       	out	0x3b, r1	; 59
    2f0c:	2f 93       	push	r18
    2f0e:	3f 93       	push	r19
    2f10:	4f 93       	push	r20
    2f12:	5f 93       	push	r21
    2f14:	6f 93       	push	r22
    2f16:	7f 93       	push	r23
    2f18:	8f 93       	push	r24
    2f1a:	9f 93       	push	r25
    2f1c:	af 93       	push	r26
    2f1e:	bf 93       	push	r27
    2f20:	ef 93       	push	r30
    2f22:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    2f24:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    2f28:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    2f2c:	e0 91 a5 24 	lds	r30, 0x24A5	; 0x8024a5 <adca_callback>
    2f30:	f0 91 a6 24 	lds	r31, 0x24A6	; 0x8024a6 <adca_callback+0x1>
    2f34:	64 e0       	ldi	r22, 0x04	; 4
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	92 e0       	ldi	r25, 0x02	; 2
    2f3a:	19 95       	eicall
}
    2f3c:	ff 91       	pop	r31
    2f3e:	ef 91       	pop	r30
    2f40:	bf 91       	pop	r27
    2f42:	af 91       	pop	r26
    2f44:	9f 91       	pop	r25
    2f46:	8f 91       	pop	r24
    2f48:	7f 91       	pop	r23
    2f4a:	6f 91       	pop	r22
    2f4c:	5f 91       	pop	r21
    2f4e:	4f 91       	pop	r20
    2f50:	3f 91       	pop	r19
    2f52:	2f 91       	pop	r18
    2f54:	0f 90       	pop	r0
    2f56:	0b be       	out	0x3b, r0	; 59
    2f58:	0f 90       	pop	r0
    2f5a:	09 be       	out	0x39, r0	; 57
    2f5c:	0f 90       	pop	r0
    2f5e:	08 be       	out	0x38, r0	; 56
    2f60:	0f 90       	pop	r0
    2f62:	0f be       	out	0x3f, r0	; 63
    2f64:	0f 90       	pop	r0
    2f66:	1f 90       	pop	r1
    2f68:	18 95       	reti

00002f6a <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    2f6a:	1f 92       	push	r1
    2f6c:	0f 92       	push	r0
    2f6e:	0f b6       	in	r0, 0x3f	; 63
    2f70:	0f 92       	push	r0
    2f72:	11 24       	eor	r1, r1
    2f74:	08 b6       	in	r0, 0x38	; 56
    2f76:	0f 92       	push	r0
    2f78:	18 be       	out	0x38, r1	; 56
    2f7a:	09 b6       	in	r0, 0x39	; 57
    2f7c:	0f 92       	push	r0
    2f7e:	19 be       	out	0x39, r1	; 57
    2f80:	0b b6       	in	r0, 0x3b	; 59
    2f82:	0f 92       	push	r0
    2f84:	1b be       	out	0x3b, r1	; 59
    2f86:	2f 93       	push	r18
    2f88:	3f 93       	push	r19
    2f8a:	4f 93       	push	r20
    2f8c:	5f 93       	push	r21
    2f8e:	6f 93       	push	r22
    2f90:	7f 93       	push	r23
    2f92:	8f 93       	push	r24
    2f94:	9f 93       	push	r25
    2f96:	af 93       	push	r26
    2f98:	bf 93       	push	r27
    2f9a:	ef 93       	push	r30
    2f9c:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    2f9e:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    2fa2:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    2fa6:	e0 91 a5 24 	lds	r30, 0x24A5	; 0x8024a5 <adca_callback>
    2faa:	f0 91 a6 24 	lds	r31, 0x24A6	; 0x8024a6 <adca_callback+0x1>
    2fae:	68 e0       	ldi	r22, 0x08	; 8
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	92 e0       	ldi	r25, 0x02	; 2
    2fb4:	19 95       	eicall
}
    2fb6:	ff 91       	pop	r31
    2fb8:	ef 91       	pop	r30
    2fba:	bf 91       	pop	r27
    2fbc:	af 91       	pop	r26
    2fbe:	9f 91       	pop	r25
    2fc0:	8f 91       	pop	r24
    2fc2:	7f 91       	pop	r23
    2fc4:	6f 91       	pop	r22
    2fc6:	5f 91       	pop	r21
    2fc8:	4f 91       	pop	r20
    2fca:	3f 91       	pop	r19
    2fcc:	2f 91       	pop	r18
    2fce:	0f 90       	pop	r0
    2fd0:	0b be       	out	0x3b, r0	; 59
    2fd2:	0f 90       	pop	r0
    2fd4:	09 be       	out	0x39, r0	; 57
    2fd6:	0f 90       	pop	r0
    2fd8:	08 be       	out	0x38, r0	; 56
    2fda:	0f 90       	pop	r0
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	0f 90       	pop	r0
    2fe0:	1f 90       	pop	r1
    2fe2:	18 95       	reti

00002fe4 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    2fe4:	1f 92       	push	r1
    2fe6:	0f 92       	push	r0
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	0f 92       	push	r0
    2fec:	11 24       	eor	r1, r1
    2fee:	08 b6       	in	r0, 0x38	; 56
    2ff0:	0f 92       	push	r0
    2ff2:	18 be       	out	0x38, r1	; 56
    2ff4:	09 b6       	in	r0, 0x39	; 57
    2ff6:	0f 92       	push	r0
    2ff8:	19 be       	out	0x39, r1	; 57
    2ffa:	0b b6       	in	r0, 0x3b	; 59
    2ffc:	0f 92       	push	r0
    2ffe:	1b be       	out	0x3b, r1	; 59
    3000:	2f 93       	push	r18
    3002:	3f 93       	push	r19
    3004:	4f 93       	push	r20
    3006:	5f 93       	push	r21
    3008:	6f 93       	push	r22
    300a:	7f 93       	push	r23
    300c:	8f 93       	push	r24
    300e:	9f 93       	push	r25
    3010:	af 93       	push	r26
    3012:	bf 93       	push	r27
    3014:	ef 93       	push	r30
    3016:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    3018:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    301c:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    3020:	e0 91 a3 24 	lds	r30, 0x24A3	; 0x8024a3 <adcb_callback>
    3024:	f0 91 a4 24 	lds	r31, 0x24A4	; 0x8024a4 <adcb_callback+0x1>
    3028:	61 e0       	ldi	r22, 0x01	; 1
    302a:	80 e4       	ldi	r24, 0x40	; 64
    302c:	92 e0       	ldi	r25, 0x02	; 2
    302e:	19 95       	eicall
}
    3030:	ff 91       	pop	r31
    3032:	ef 91       	pop	r30
    3034:	bf 91       	pop	r27
    3036:	af 91       	pop	r26
    3038:	9f 91       	pop	r25
    303a:	8f 91       	pop	r24
    303c:	7f 91       	pop	r23
    303e:	6f 91       	pop	r22
    3040:	5f 91       	pop	r21
    3042:	4f 91       	pop	r20
    3044:	3f 91       	pop	r19
    3046:	2f 91       	pop	r18
    3048:	0f 90       	pop	r0
    304a:	0b be       	out	0x3b, r0	; 59
    304c:	0f 90       	pop	r0
    304e:	09 be       	out	0x39, r0	; 57
    3050:	0f 90       	pop	r0
    3052:	08 be       	out	0x38, r0	; 56
    3054:	0f 90       	pop	r0
    3056:	0f be       	out	0x3f, r0	; 63
    3058:	0f 90       	pop	r0
    305a:	1f 90       	pop	r1
    305c:	18 95       	reti

0000305e <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    305e:	1f 92       	push	r1
    3060:	0f 92       	push	r0
    3062:	0f b6       	in	r0, 0x3f	; 63
    3064:	0f 92       	push	r0
    3066:	11 24       	eor	r1, r1
    3068:	08 b6       	in	r0, 0x38	; 56
    306a:	0f 92       	push	r0
    306c:	18 be       	out	0x38, r1	; 56
    306e:	09 b6       	in	r0, 0x39	; 57
    3070:	0f 92       	push	r0
    3072:	19 be       	out	0x39, r1	; 57
    3074:	0b b6       	in	r0, 0x3b	; 59
    3076:	0f 92       	push	r0
    3078:	1b be       	out	0x3b, r1	; 59
    307a:	2f 93       	push	r18
    307c:	3f 93       	push	r19
    307e:	4f 93       	push	r20
    3080:	5f 93       	push	r21
    3082:	6f 93       	push	r22
    3084:	7f 93       	push	r23
    3086:	8f 93       	push	r24
    3088:	9f 93       	push	r25
    308a:	af 93       	push	r26
    308c:	bf 93       	push	r27
    308e:	ef 93       	push	r30
    3090:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    3092:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    3096:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    309a:	e0 91 a3 24 	lds	r30, 0x24A3	; 0x8024a3 <adcb_callback>
    309e:	f0 91 a4 24 	lds	r31, 0x24A4	; 0x8024a4 <adcb_callback+0x1>
    30a2:	62 e0       	ldi	r22, 0x02	; 2
    30a4:	80 e4       	ldi	r24, 0x40	; 64
    30a6:	92 e0       	ldi	r25, 0x02	; 2
    30a8:	19 95       	eicall
}
    30aa:	ff 91       	pop	r31
    30ac:	ef 91       	pop	r30
    30ae:	bf 91       	pop	r27
    30b0:	af 91       	pop	r26
    30b2:	9f 91       	pop	r25
    30b4:	8f 91       	pop	r24
    30b6:	7f 91       	pop	r23
    30b8:	6f 91       	pop	r22
    30ba:	5f 91       	pop	r21
    30bc:	4f 91       	pop	r20
    30be:	3f 91       	pop	r19
    30c0:	2f 91       	pop	r18
    30c2:	0f 90       	pop	r0
    30c4:	0b be       	out	0x3b, r0	; 59
    30c6:	0f 90       	pop	r0
    30c8:	09 be       	out	0x39, r0	; 57
    30ca:	0f 90       	pop	r0
    30cc:	08 be       	out	0x38, r0	; 56
    30ce:	0f 90       	pop	r0
    30d0:	0f be       	out	0x3f, r0	; 63
    30d2:	0f 90       	pop	r0
    30d4:	1f 90       	pop	r1
    30d6:	18 95       	reti

000030d8 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    30d8:	1f 92       	push	r1
    30da:	0f 92       	push	r0
    30dc:	0f b6       	in	r0, 0x3f	; 63
    30de:	0f 92       	push	r0
    30e0:	11 24       	eor	r1, r1
    30e2:	08 b6       	in	r0, 0x38	; 56
    30e4:	0f 92       	push	r0
    30e6:	18 be       	out	0x38, r1	; 56
    30e8:	09 b6       	in	r0, 0x39	; 57
    30ea:	0f 92       	push	r0
    30ec:	19 be       	out	0x39, r1	; 57
    30ee:	0b b6       	in	r0, 0x3b	; 59
    30f0:	0f 92       	push	r0
    30f2:	1b be       	out	0x3b, r1	; 59
    30f4:	2f 93       	push	r18
    30f6:	3f 93       	push	r19
    30f8:	4f 93       	push	r20
    30fa:	5f 93       	push	r21
    30fc:	6f 93       	push	r22
    30fe:	7f 93       	push	r23
    3100:	8f 93       	push	r24
    3102:	9f 93       	push	r25
    3104:	af 93       	push	r26
    3106:	bf 93       	push	r27
    3108:	ef 93       	push	r30
    310a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    310c:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    3110:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    3114:	e0 91 a3 24 	lds	r30, 0x24A3	; 0x8024a3 <adcb_callback>
    3118:	f0 91 a4 24 	lds	r31, 0x24A4	; 0x8024a4 <adcb_callback+0x1>
    311c:	64 e0       	ldi	r22, 0x04	; 4
    311e:	80 e4       	ldi	r24, 0x40	; 64
    3120:	92 e0       	ldi	r25, 0x02	; 2
    3122:	19 95       	eicall
}
    3124:	ff 91       	pop	r31
    3126:	ef 91       	pop	r30
    3128:	bf 91       	pop	r27
    312a:	af 91       	pop	r26
    312c:	9f 91       	pop	r25
    312e:	8f 91       	pop	r24
    3130:	7f 91       	pop	r23
    3132:	6f 91       	pop	r22
    3134:	5f 91       	pop	r21
    3136:	4f 91       	pop	r20
    3138:	3f 91       	pop	r19
    313a:	2f 91       	pop	r18
    313c:	0f 90       	pop	r0
    313e:	0b be       	out	0x3b, r0	; 59
    3140:	0f 90       	pop	r0
    3142:	09 be       	out	0x39, r0	; 57
    3144:	0f 90       	pop	r0
    3146:	08 be       	out	0x38, r0	; 56
    3148:	0f 90       	pop	r0
    314a:	0f be       	out	0x3f, r0	; 63
    314c:	0f 90       	pop	r0
    314e:	1f 90       	pop	r1
    3150:	18 95       	reti

00003152 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    3152:	1f 92       	push	r1
    3154:	0f 92       	push	r0
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	0f 92       	push	r0
    315a:	11 24       	eor	r1, r1
    315c:	08 b6       	in	r0, 0x38	; 56
    315e:	0f 92       	push	r0
    3160:	18 be       	out	0x38, r1	; 56
    3162:	09 b6       	in	r0, 0x39	; 57
    3164:	0f 92       	push	r0
    3166:	19 be       	out	0x39, r1	; 57
    3168:	0b b6       	in	r0, 0x3b	; 59
    316a:	0f 92       	push	r0
    316c:	1b be       	out	0x3b, r1	; 59
    316e:	2f 93       	push	r18
    3170:	3f 93       	push	r19
    3172:	4f 93       	push	r20
    3174:	5f 93       	push	r21
    3176:	6f 93       	push	r22
    3178:	7f 93       	push	r23
    317a:	8f 93       	push	r24
    317c:	9f 93       	push	r25
    317e:	af 93       	push	r26
    3180:	bf 93       	push	r27
    3182:	ef 93       	push	r30
    3184:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    3186:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    318a:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    318e:	e0 91 a3 24 	lds	r30, 0x24A3	; 0x8024a3 <adcb_callback>
    3192:	f0 91 a4 24 	lds	r31, 0x24A4	; 0x8024a4 <adcb_callback+0x1>
    3196:	68 e0       	ldi	r22, 0x08	; 8
    3198:	80 e4       	ldi	r24, 0x40	; 64
    319a:	92 e0       	ldi	r25, 0x02	; 2
    319c:	19 95       	eicall
}
    319e:	ff 91       	pop	r31
    31a0:	ef 91       	pop	r30
    31a2:	bf 91       	pop	r27
    31a4:	af 91       	pop	r26
    31a6:	9f 91       	pop	r25
    31a8:	8f 91       	pop	r24
    31aa:	7f 91       	pop	r23
    31ac:	6f 91       	pop	r22
    31ae:	5f 91       	pop	r21
    31b0:	4f 91       	pop	r20
    31b2:	3f 91       	pop	r19
    31b4:	2f 91       	pop	r18
    31b6:	0f 90       	pop	r0
    31b8:	0b be       	out	0x3b, r0	; 59
    31ba:	0f 90       	pop	r0
    31bc:	09 be       	out	0x39, r0	; 57
    31be:	0f 90       	pop	r0
    31c0:	08 be       	out	0x38, r0	; 56
    31c2:	0f 90       	pop	r0
    31c4:	0f be       	out	0x3f, r0	; 63
    31c6:	0f 90       	pop	r0
    31c8:	1f 90       	pop	r1
    31ca:	18 95       	reti

000031cc <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    31cc:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    31ce:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    31d0:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    31d2:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    31d4:	60 83       	st	Z, r22
	ret                             // Return to caller
    31d6:	08 95       	ret

000031d8 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    31d8:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    31dc:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    31de:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    31e0:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    31e4:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    31e6:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    31ea:	08 95       	ret

000031ec <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    31ec:	fc 01       	movw	r30, r24
    31ee:	91 81       	ldd	r25, Z+1	; 0x01
    31f0:	95 ff       	sbrs	r25, 5
    31f2:	fd cf       	rjmp	.-6      	; 0x31ee <usart_putchar+0x2>
    31f4:	60 83       	st	Z, r22
    31f6:	80 e0       	ldi	r24, 0x00	; 0
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	08 95       	ret

000031fc <usart_getchar>:
    31fc:	fc 01       	movw	r30, r24
    31fe:	91 81       	ldd	r25, Z+1	; 0x01
    3200:	99 23       	and	r25, r25
    3202:	ec f7       	brge	.-6      	; 0x31fe <usart_getchar+0x2>
    3204:	80 81       	ld	r24, Z
    3206:	08 95       	ret

00003208 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    3208:	4f 92       	push	r4
    320a:	5f 92       	push	r5
    320c:	6f 92       	push	r6
    320e:	7f 92       	push	r7
    3210:	8f 92       	push	r8
    3212:	9f 92       	push	r9
    3214:	af 92       	push	r10
    3216:	bf 92       	push	r11
    3218:	ef 92       	push	r14
    321a:	ff 92       	push	r15
    321c:	0f 93       	push	r16
    321e:	1f 93       	push	r17
    3220:	cf 93       	push	r28
    3222:	7c 01       	movw	r14, r24
    3224:	4a 01       	movw	r8, r20
    3226:	5b 01       	movw	r10, r22
    3228:	28 01       	movw	r4, r16
    322a:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    322c:	fc 01       	movw	r30, r24
    322e:	84 81       	ldd	r24, Z+4	; 0x04
    3230:	82 ff       	sbrs	r24, 2
    3232:	16 c0       	rjmp	.+44     	; 0x3260 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    3234:	d9 01       	movw	r26, r18
    3236:	c8 01       	movw	r24, r16
    3238:	68 94       	set
    323a:	12 f8       	bld	r1, 2
    323c:	b6 95       	lsr	r27
    323e:	a7 95       	ror	r26
    3240:	97 95       	ror	r25
    3242:	87 95       	ror	r24
    3244:	16 94       	lsr	r1
    3246:	d1 f7       	brne	.-12     	; 0x323c <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    3248:	b9 01       	movw	r22, r18
    324a:	a8 01       	movw	r20, r16
    324c:	03 2e       	mov	r0, r19
    324e:	36 e1       	ldi	r19, 0x16	; 22
    3250:	76 95       	lsr	r23
    3252:	67 95       	ror	r22
    3254:	57 95       	ror	r21
    3256:	47 95       	ror	r20
    3258:	3a 95       	dec	r19
    325a:	d1 f7       	brne	.-12     	; 0x3250 <usart_set_baudrate+0x48>
    325c:	30 2d       	mov	r19, r0
    325e:	15 c0       	rjmp	.+42     	; 0x328a <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    3260:	d9 01       	movw	r26, r18
    3262:	c8 01       	movw	r24, r16
    3264:	68 94       	set
    3266:	13 f8       	bld	r1, 3
    3268:	b6 95       	lsr	r27
    326a:	a7 95       	ror	r26
    326c:	97 95       	ror	r25
    326e:	87 95       	ror	r24
    3270:	16 94       	lsr	r1
    3272:	d1 f7       	brne	.-12     	; 0x3268 <usart_set_baudrate+0x60>
		min_rate /= 2;
    3274:	b9 01       	movw	r22, r18
    3276:	a8 01       	movw	r20, r16
    3278:	03 2e       	mov	r0, r19
    327a:	37 e1       	ldi	r19, 0x17	; 23
    327c:	76 95       	lsr	r23
    327e:	67 95       	ror	r22
    3280:	57 95       	ror	r21
    3282:	47 95       	ror	r20
    3284:	3a 95       	dec	r19
    3286:	d1 f7       	brne	.-12     	; 0x327c <usart_set_baudrate+0x74>
    3288:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    328a:	88 15       	cp	r24, r8
    328c:	99 05       	cpc	r25, r9
    328e:	aa 05       	cpc	r26, r10
    3290:	bb 05       	cpc	r27, r11
    3292:	08 f4       	brcc	.+2      	; 0x3296 <usart_set_baudrate+0x8e>
    3294:	a6 c0       	rjmp	.+332    	; 0x33e2 <usart_set_baudrate+0x1da>
    3296:	84 16       	cp	r8, r20
    3298:	95 06       	cpc	r9, r21
    329a:	a6 06       	cpc	r10, r22
    329c:	b7 06       	cpc	r11, r23
    329e:	08 f4       	brcc	.+2      	; 0x32a2 <usart_set_baudrate+0x9a>
    32a0:	a2 c0       	rjmp	.+324    	; 0x33e6 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    32a2:	f7 01       	movw	r30, r14
    32a4:	84 81       	ldd	r24, Z+4	; 0x04
    32a6:	82 fd       	sbrc	r24, 2
    32a8:	04 c0       	rjmp	.+8      	; 0x32b2 <usart_set_baudrate+0xaa>
		baud *= 2;
    32aa:	88 0c       	add	r8, r8
    32ac:	99 1c       	adc	r9, r9
    32ae:	aa 1c       	adc	r10, r10
    32b0:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    32b2:	c3 01       	movw	r24, r6
    32b4:	b2 01       	movw	r22, r4
    32b6:	a5 01       	movw	r20, r10
    32b8:	94 01       	movw	r18, r8
    32ba:	0e 94 47 34 	call	0x688e	; 0x688e <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    32be:	2f 3f       	cpi	r18, 0xFF	; 255
    32c0:	31 05       	cpc	r19, r1
    32c2:	41 05       	cpc	r20, r1
    32c4:	51 05       	cpc	r21, r1
    32c6:	08 f4       	brcc	.+2      	; 0x32ca <usart_set_baudrate+0xc2>
    32c8:	90 c0       	rjmp	.+288    	; 0x33ea <usart_set_baudrate+0x1e2>
    32ca:	8f ef       	ldi	r24, 0xFF	; 255
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	a0 e0       	ldi	r26, 0x00	; 0
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	c9 ef       	ldi	r28, 0xF9	; 249
    32d4:	05 c0       	rjmp	.+10     	; 0x32e0 <usart_set_baudrate+0xd8>
    32d6:	28 17       	cp	r18, r24
    32d8:	39 07       	cpc	r19, r25
    32da:	4a 07       	cpc	r20, r26
    32dc:	5b 07       	cpc	r21, r27
    32de:	58 f0       	brcs	.+22     	; 0x32f6 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    32e0:	88 0f       	add	r24, r24
    32e2:	99 1f       	adc	r25, r25
    32e4:	aa 1f       	adc	r26, r26
    32e6:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    32e8:	cd 3f       	cpi	r28, 0xFD	; 253
    32ea:	0c f4       	brge	.+2      	; 0x32ee <usart_set_baudrate+0xe6>
			limit |= 1;
    32ec:	81 60       	ori	r24, 0x01	; 1
    32ee:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    32f0:	c7 30       	cpi	r28, 0x07	; 7
    32f2:	89 f7       	brne	.-30     	; 0x32d6 <usart_set_baudrate+0xce>
    32f4:	4f c0       	rjmp	.+158    	; 0x3394 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    32f6:	cc 23       	and	r28, r28
    32f8:	0c f0       	brlt	.+2      	; 0x32fc <usart_set_baudrate+0xf4>
    32fa:	4c c0       	rjmp	.+152    	; 0x3394 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    32fc:	d5 01       	movw	r26, r10
    32fe:	c4 01       	movw	r24, r8
    3300:	88 0f       	add	r24, r24
    3302:	99 1f       	adc	r25, r25
    3304:	aa 1f       	adc	r26, r26
    3306:	bb 1f       	adc	r27, r27
    3308:	88 0f       	add	r24, r24
    330a:	99 1f       	adc	r25, r25
    330c:	aa 1f       	adc	r26, r26
    330e:	bb 1f       	adc	r27, r27
    3310:	88 0f       	add	r24, r24
    3312:	99 1f       	adc	r25, r25
    3314:	aa 1f       	adc	r26, r26
    3316:	bb 1f       	adc	r27, r27
    3318:	48 1a       	sub	r4, r24
    331a:	59 0a       	sbc	r5, r25
    331c:	6a 0a       	sbc	r6, r26
    331e:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    3320:	ce 3f       	cpi	r28, 0xFE	; 254
    3322:	f4 f4       	brge	.+60     	; 0x3360 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    3324:	8d ef       	ldi	r24, 0xFD	; 253
    3326:	9f ef       	ldi	r25, 0xFF	; 255
    3328:	8c 1b       	sub	r24, r28
    332a:	91 09       	sbc	r25, r1
    332c:	c7 fd       	sbrc	r28, 7
    332e:	93 95       	inc	r25
    3330:	04 c0       	rjmp	.+8      	; 0x333a <usart_set_baudrate+0x132>
    3332:	44 0c       	add	r4, r4
    3334:	55 1c       	adc	r5, r5
    3336:	66 1c       	adc	r6, r6
    3338:	77 1c       	adc	r7, r7
    333a:	8a 95       	dec	r24
    333c:	d2 f7       	brpl	.-12     	; 0x3332 <usart_set_baudrate+0x12a>
    333e:	d5 01       	movw	r26, r10
    3340:	c4 01       	movw	r24, r8
    3342:	b6 95       	lsr	r27
    3344:	a7 95       	ror	r26
    3346:	97 95       	ror	r25
    3348:	87 95       	ror	r24
    334a:	bc 01       	movw	r22, r24
    334c:	cd 01       	movw	r24, r26
    334e:	64 0d       	add	r22, r4
    3350:	75 1d       	adc	r23, r5
    3352:	86 1d       	adc	r24, r6
    3354:	97 1d       	adc	r25, r7
    3356:	a5 01       	movw	r20, r10
    3358:	94 01       	movw	r18, r8
    335a:	0e 94 47 34 	call	0x688e	; 0x688e <__udivmodsi4>
    335e:	37 c0       	rjmp	.+110    	; 0x33ce <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    3360:	83 e0       	ldi	r24, 0x03	; 3
    3362:	8c 0f       	add	r24, r28
    3364:	a5 01       	movw	r20, r10
    3366:	94 01       	movw	r18, r8
    3368:	04 c0       	rjmp	.+8      	; 0x3372 <usart_set_baudrate+0x16a>
    336a:	22 0f       	add	r18, r18
    336c:	33 1f       	adc	r19, r19
    336e:	44 1f       	adc	r20, r20
    3370:	55 1f       	adc	r21, r21
    3372:	8a 95       	dec	r24
    3374:	d2 f7       	brpl	.-12     	; 0x336a <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    3376:	da 01       	movw	r26, r20
    3378:	c9 01       	movw	r24, r18
    337a:	b6 95       	lsr	r27
    337c:	a7 95       	ror	r26
    337e:	97 95       	ror	r25
    3380:	87 95       	ror	r24
    3382:	bc 01       	movw	r22, r24
    3384:	cd 01       	movw	r24, r26
    3386:	64 0d       	add	r22, r4
    3388:	75 1d       	adc	r23, r5
    338a:	86 1d       	adc	r24, r6
    338c:	97 1d       	adc	r25, r7
    338e:	0e 94 47 34 	call	0x688e	; 0x688e <__udivmodsi4>
    3392:	1d c0       	rjmp	.+58     	; 0x33ce <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    3394:	83 e0       	ldi	r24, 0x03	; 3
    3396:	8c 0f       	add	r24, r28
    3398:	a5 01       	movw	r20, r10
    339a:	94 01       	movw	r18, r8
    339c:	04 c0       	rjmp	.+8      	; 0x33a6 <usart_set_baudrate+0x19e>
    339e:	22 0f       	add	r18, r18
    33a0:	33 1f       	adc	r19, r19
    33a2:	44 1f       	adc	r20, r20
    33a4:	55 1f       	adc	r21, r21
    33a6:	8a 95       	dec	r24
    33a8:	d2 f7       	brpl	.-12     	; 0x339e <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    33aa:	da 01       	movw	r26, r20
    33ac:	c9 01       	movw	r24, r18
    33ae:	b6 95       	lsr	r27
    33b0:	a7 95       	ror	r26
    33b2:	97 95       	ror	r25
    33b4:	87 95       	ror	r24
    33b6:	bc 01       	movw	r22, r24
    33b8:	cd 01       	movw	r24, r26
    33ba:	64 0d       	add	r22, r4
    33bc:	75 1d       	adc	r23, r5
    33be:	86 1d       	adc	r24, r6
    33c0:	97 1d       	adc	r25, r7
    33c2:	0e 94 47 34 	call	0x688e	; 0x688e <__udivmodsi4>
    33c6:	21 50       	subi	r18, 0x01	; 1
    33c8:	31 09       	sbc	r19, r1
    33ca:	41 09       	sbc	r20, r1
    33cc:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    33ce:	83 2f       	mov	r24, r19
    33d0:	8f 70       	andi	r24, 0x0F	; 15
    33d2:	c2 95       	swap	r28
    33d4:	c0 7f       	andi	r28, 0xF0	; 240
    33d6:	c8 2b       	or	r28, r24
    33d8:	f7 01       	movw	r30, r14
    33da:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    33dc:	26 83       	std	Z+6, r18	; 0x06

	return true;
    33de:	81 e0       	ldi	r24, 0x01	; 1
    33e0:	18 c0       	rjmp	.+48     	; 0x3412 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    33e2:	80 e0       	ldi	r24, 0x00	; 0
    33e4:	16 c0       	rjmp	.+44     	; 0x3412 <usart_set_baudrate+0x20a>
    33e6:	80 e0       	ldi	r24, 0x00	; 0
    33e8:	14 c0       	rjmp	.+40     	; 0x3412 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    33ea:	d5 01       	movw	r26, r10
    33ec:	c4 01       	movw	r24, r8
    33ee:	88 0f       	add	r24, r24
    33f0:	99 1f       	adc	r25, r25
    33f2:	aa 1f       	adc	r26, r26
    33f4:	bb 1f       	adc	r27, r27
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	aa 1f       	adc	r26, r26
    33fc:	bb 1f       	adc	r27, r27
    33fe:	88 0f       	add	r24, r24
    3400:	99 1f       	adc	r25, r25
    3402:	aa 1f       	adc	r26, r26
    3404:	bb 1f       	adc	r27, r27
    3406:	48 1a       	sub	r4, r24
    3408:	59 0a       	sbc	r5, r25
    340a:	6a 0a       	sbc	r6, r26
    340c:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    340e:	c9 ef       	ldi	r28, 0xF9	; 249
    3410:	89 cf       	rjmp	.-238    	; 0x3324 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    3412:	cf 91       	pop	r28
    3414:	1f 91       	pop	r17
    3416:	0f 91       	pop	r16
    3418:	ff 90       	pop	r15
    341a:	ef 90       	pop	r14
    341c:	bf 90       	pop	r11
    341e:	af 90       	pop	r10
    3420:	9f 90       	pop	r9
    3422:	8f 90       	pop	r8
    3424:	7f 90       	pop	r7
    3426:	6f 90       	pop	r6
    3428:	5f 90       	pop	r5
    342a:	4f 90       	pop	r4
    342c:	08 95       	ret

0000342e <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    342e:	0f 93       	push	r16
    3430:	1f 93       	push	r17
    3432:	cf 93       	push	r28
    3434:	df 93       	push	r29
    3436:	ec 01       	movw	r28, r24
    3438:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    343a:	00 97       	sbiw	r24, 0x00	; 0
    343c:	09 f4       	brne	.+2      	; 0x3440 <usart_init_rs232+0x12>
    343e:	36 c1       	rjmp	.+620    	; 0x36ac <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    3440:	80 3c       	cpi	r24, 0xC0	; 192
    3442:	91 05       	cpc	r25, r1
    3444:	21 f4       	brne	.+8      	; 0x344e <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    3446:	60 e1       	ldi	r22, 0x10	; 16
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	7d dc       	rcall	.-1798   	; 0x2d46 <sysclk_enable_module>
    344c:	2f c1       	rjmp	.+606    	; 0x36ac <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    344e:	c0 34       	cpi	r28, 0x40	; 64
    3450:	84 e0       	ldi	r24, 0x04	; 4
    3452:	d8 07       	cpc	r29, r24
    3454:	21 f4       	brne	.+8      	; 0x345e <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    3456:	68 e0       	ldi	r22, 0x08	; 8
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	75 dc       	rcall	.-1814   	; 0x2d46 <sysclk_enable_module>
    345c:	27 c1       	rjmp	.+590    	; 0x36ac <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    345e:	c1 15       	cp	r28, r1
    3460:	e4 e0       	ldi	r30, 0x04	; 4
    3462:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    3464:	21 f4       	brne	.+8      	; 0x346e <usart_init_rs232+0x40>
    3466:	64 e0       	ldi	r22, 0x04	; 4
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	6d dc       	rcall	.-1830   	; 0x2d46 <sysclk_enable_module>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    346c:	1f c1       	rjmp	.+574    	; 0x36ac <usart_init_rs232+0x27e>
    346e:	c0 38       	cpi	r28, 0x80	; 128
    3470:	f1 e0       	ldi	r31, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    3472:	df 07       	cpc	r29, r31
    3474:	21 f4       	brne	.+8      	; 0x347e <usart_init_rs232+0x50>
    3476:	62 e0       	ldi	r22, 0x02	; 2
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	65 dc       	rcall	.-1846   	; 0x2d46 <sysclk_enable_module>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    347c:	17 c1       	rjmp	.+558    	; 0x36ac <usart_init_rs232+0x27e>
    347e:	c1 15       	cp	r28, r1
    3480:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    3482:	d8 07       	cpc	r29, r24
    3484:	21 f4       	brne	.+8      	; 0x348e <usart_init_rs232+0x60>
    3486:	61 e0       	ldi	r22, 0x01	; 1
    3488:	80 e0       	ldi	r24, 0x00	; 0
    348a:	5d dc       	rcall	.-1862   	; 0x2d46 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    348c:	0f c1       	rjmp	.+542    	; 0x36ac <usart_init_rs232+0x27e>
    348e:	c0 38       	cpi	r28, 0x80	; 128
    3490:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    3492:	de 07       	cpc	r29, r30
    3494:	21 f4       	brne	.+8      	; 0x349e <usart_init_rs232+0x70>
    3496:	61 e0       	ldi	r22, 0x01	; 1
    3498:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    349a:	55 dc       	rcall	.-1878   	; 0x2d46 <sysclk_enable_module>
    349c:	07 c1       	rjmp	.+526    	; 0x36ac <usart_init_rs232+0x27e>
    349e:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    34a0:	f3 e0       	ldi	r31, 0x03	; 3
    34a2:	df 07       	cpc	r29, r31
    34a4:	21 f4       	brne	.+8      	; 0x34ae <usart_init_rs232+0x80>
    34a6:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    34a8:	82 e0       	ldi	r24, 0x02	; 2
    34aa:	4d dc       	rcall	.-1894   	; 0x2d46 <sysclk_enable_module>
    34ac:	ff c0       	rjmp	.+510    	; 0x36ac <usart_init_rs232+0x27e>
    34ae:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    34b0:	82 e0       	ldi	r24, 0x02	; 2
    34b2:	d8 07       	cpc	r29, r24
    34b4:	21 f4       	brne	.+8      	; 0x34be <usart_init_rs232+0x90>
    34b6:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	45 dc       	rcall	.-1910   	; 0x2d46 <sysclk_enable_module>
    34bc:	f7 c0       	rjmp	.+494    	; 0x36ac <usart_init_rs232+0x27e>
    34be:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    34c0:	e2 e0       	ldi	r30, 0x02	; 2
    34c2:	de 07       	cpc	r29, r30
    34c4:	21 f4       	brne	.+8      	; 0x34ce <usart_init_rs232+0xa0>
    34c6:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    34c8:	82 e0       	ldi	r24, 0x02	; 2
    34ca:	3d dc       	rcall	.-1926   	; 0x2d46 <sysclk_enable_module>
    34cc:	ef c0       	rjmp	.+478    	; 0x36ac <usart_init_rs232+0x27e>
    34ce:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    34d0:	f3 e0       	ldi	r31, 0x03	; 3
    34d2:	df 07       	cpc	r29, r31
    34d4:	21 f4       	brne	.+8      	; 0x34de <usart_init_rs232+0xb0>
    34d6:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	35 dc       	rcall	.-1942   	; 0x2d46 <sysclk_enable_module>
    34dc:	e7 c0       	rjmp	.+462    	; 0x36ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    34de:	c0 32       	cpi	r28, 0x20	; 32
    34e0:	83 e0       	ldi	r24, 0x03	; 3
    34e2:	d8 07       	cpc	r29, r24
    34e4:	21 f4       	brne	.+8      	; 0x34ee <usart_init_rs232+0xc0>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    34e6:	64 e0       	ldi	r22, 0x04	; 4
    34e8:	82 e0       	ldi	r24, 0x02	; 2
    34ea:	2d dc       	rcall	.-1958   	; 0x2d46 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    34ec:	df c0       	rjmp	.+446    	; 0x36ac <usart_init_rs232+0x27e>
    34ee:	c1 15       	cp	r28, r1
    34f0:	e8 e0       	ldi	r30, 0x08	; 8
    34f2:	de 07       	cpc	r29, r30
    34f4:	21 f4       	brne	.+8      	; 0x34fe <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    34f6:	61 e0       	ldi	r22, 0x01	; 1
    34f8:	83 e0       	ldi	r24, 0x03	; 3
    34fa:	25 dc       	rcall	.-1974   	; 0x2d46 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    34fc:	d7 c0       	rjmp	.+430    	; 0x36ac <usart_init_rs232+0x27e>
    34fe:	c1 15       	cp	r28, r1
    3500:	f9 e0       	ldi	r31, 0x09	; 9
    3502:	df 07       	cpc	r29, r31
    3504:	21 f4       	brne	.+8      	; 0x350e <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    3506:	61 e0       	ldi	r22, 0x01	; 1
    3508:	84 e0       	ldi	r24, 0x04	; 4
    350a:	1d dc       	rcall	.-1990   	; 0x2d46 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    350c:	cf c0       	rjmp	.+414    	; 0x36ac <usart_init_rs232+0x27e>
    350e:	c1 15       	cp	r28, r1
    3510:	8a e0       	ldi	r24, 0x0A	; 10
    3512:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    3514:	21 f4       	brne	.+8      	; 0x351e <usart_init_rs232+0xf0>
    3516:	61 e0       	ldi	r22, 0x01	; 1
    3518:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    351a:	15 dc       	rcall	.-2006   	; 0x2d46 <sysclk_enable_module>
    351c:	c7 c0       	rjmp	.+398    	; 0x36ac <usart_init_rs232+0x27e>
    351e:	c1 15       	cp	r28, r1
    3520:	eb e0       	ldi	r30, 0x0B	; 11
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    3522:	de 07       	cpc	r29, r30
    3524:	21 f4       	brne	.+8      	; 0x352e <usart_init_rs232+0x100>
    3526:	61 e0       	ldi	r22, 0x01	; 1
    3528:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    352a:	0d dc       	rcall	.-2022   	; 0x2d46 <sysclk_enable_module>
    352c:	bf c0       	rjmp	.+382    	; 0x36ac <usart_init_rs232+0x27e>
    352e:	c0 34       	cpi	r28, 0x40	; 64
    3530:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    3532:	df 07       	cpc	r29, r31
    3534:	21 f4       	brne	.+8      	; 0x353e <usart_init_rs232+0x110>
    3536:	62 e0       	ldi	r22, 0x02	; 2
    3538:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    353a:	05 dc       	rcall	.-2038   	; 0x2d46 <sysclk_enable_module>
    353c:	b7 c0       	rjmp	.+366    	; 0x36ac <usart_init_rs232+0x27e>
    353e:	c0 34       	cpi	r28, 0x40	; 64
    3540:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    3542:	d8 07       	cpc	r29, r24
    3544:	21 f4       	brne	.+8      	; 0x354e <usart_init_rs232+0x120>
    3546:	62 e0       	ldi	r22, 0x02	; 2
    3548:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    354a:	fd db       	rcall	.-2054   	; 0x2d46 <sysclk_enable_module>
    354c:	af c0       	rjmp	.+350    	; 0x36ac <usart_init_rs232+0x27e>
    354e:	c0 34       	cpi	r28, 0x40	; 64
    3550:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    3552:	de 07       	cpc	r29, r30
    3554:	21 f4       	brne	.+8      	; 0x355e <usart_init_rs232+0x130>
    3556:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    3558:	85 e0       	ldi	r24, 0x05	; 5
    355a:	f5 db       	rcall	.-2070   	; 0x2d46 <sysclk_enable_module>
    355c:	a7 c0       	rjmp	.+334    	; 0x36ac <usart_init_rs232+0x27e>
    355e:	c0 34       	cpi	r28, 0x40	; 64
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    3560:	fb e0       	ldi	r31, 0x0B	; 11
    3562:	df 07       	cpc	r29, r31
    3564:	21 f4       	brne	.+8      	; 0x356e <usart_init_rs232+0x140>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3566:	62 e0       	ldi	r22, 0x02	; 2
    3568:	86 e0       	ldi	r24, 0x06	; 6
    356a:	ed db       	rcall	.-2086   	; 0x2d46 <sysclk_enable_module>
    356c:	9f c0       	rjmp	.+318    	; 0x36ac <usart_init_rs232+0x27e>
    356e:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    3570:	88 e0       	ldi	r24, 0x08	; 8
    3572:	d8 07       	cpc	r29, r24
    3574:	21 f4       	brne	.+8      	; 0x357e <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    3576:	64 e0       	ldi	r22, 0x04	; 4
    3578:	83 e0       	ldi	r24, 0x03	; 3
    357a:	e5 db       	rcall	.-2102   	; 0x2d46 <sysclk_enable_module>
    357c:	97 c0       	rjmp	.+302    	; 0x36ac <usart_init_rs232+0x27e>
    357e:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    3580:	e9 e0       	ldi	r30, 0x09	; 9
    3582:	de 07       	cpc	r29, r30
    3584:	21 f4       	brne	.+8      	; 0x358e <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    3586:	64 e0       	ldi	r22, 0x04	; 4
    3588:	84 e0       	ldi	r24, 0x04	; 4
    358a:	dd db       	rcall	.-2118   	; 0x2d46 <sysclk_enable_module>
    358c:	8f c0       	rjmp	.+286    	; 0x36ac <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    358e:	c0 39       	cpi	r28, 0x90	; 144
    3590:	fa e0       	ldi	r31, 0x0A	; 10
    3592:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    3594:	21 f4       	brne	.+8      	; 0x359e <usart_init_rs232+0x170>
    3596:	64 e0       	ldi	r22, 0x04	; 4
    3598:	85 e0       	ldi	r24, 0x05	; 5
    359a:	d5 db       	rcall	.-2134   	; 0x2d46 <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    359c:	87 c0       	rjmp	.+270    	; 0x36ac <usart_init_rs232+0x27e>
    359e:	c0 39       	cpi	r28, 0x90	; 144
    35a0:	8b e0       	ldi	r24, 0x0B	; 11
    35a2:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    35a4:	21 f4       	brne	.+8      	; 0x35ae <usart_init_rs232+0x180>
    35a6:	64 e0       	ldi	r22, 0x04	; 4
    35a8:	86 e0       	ldi	r24, 0x06	; 6
    35aa:	cd db       	rcall	.-2150   	; 0x2d46 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    35ac:	7f c0       	rjmp	.+254    	; 0x36ac <usart_init_rs232+0x27e>
    35ae:	c0 3c       	cpi	r28, 0xC0	; 192
    35b0:	e8 e0       	ldi	r30, 0x08	; 8
    35b2:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    35b4:	21 f4       	brne	.+8      	; 0x35be <usart_init_rs232+0x190>
    35b6:	68 e0       	ldi	r22, 0x08	; 8
    35b8:	83 e0       	ldi	r24, 0x03	; 3
    35ba:	c5 db       	rcall	.-2166   	; 0x2d46 <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    35bc:	77 c0       	rjmp	.+238    	; 0x36ac <usart_init_rs232+0x27e>
    35be:	c0 3c       	cpi	r28, 0xC0	; 192
    35c0:	f9 e0       	ldi	r31, 0x09	; 9
    35c2:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    35c4:	21 f4       	brne	.+8      	; 0x35ce <usart_init_rs232+0x1a0>
    35c6:	68 e0       	ldi	r22, 0x08	; 8
    35c8:	84 e0       	ldi	r24, 0x04	; 4
    35ca:	bd db       	rcall	.-2182   	; 0x2d46 <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    35cc:	6f c0       	rjmp	.+222    	; 0x36ac <usart_init_rs232+0x27e>
    35ce:	c0 3c       	cpi	r28, 0xC0	; 192
    35d0:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    35d2:	d8 07       	cpc	r29, r24
    35d4:	21 f4       	brne	.+8      	; 0x35de <usart_init_rs232+0x1b0>
    35d6:	68 e0       	ldi	r22, 0x08	; 8
    35d8:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    35da:	b5 db       	rcall	.-2198   	; 0x2d46 <sysclk_enable_module>
    35dc:	67 c0       	rjmp	.+206    	; 0x36ac <usart_init_rs232+0x27e>
    35de:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    35e0:	eb e0       	ldi	r30, 0x0B	; 11
    35e2:	de 07       	cpc	r29, r30
    35e4:	21 f4       	brne	.+8      	; 0x35ee <usart_init_rs232+0x1c0>
    35e6:	68 e0       	ldi	r22, 0x08	; 8
    35e8:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    35ea:	ad db       	rcall	.-2214   	; 0x2d46 <sysclk_enable_module>
    35ec:	5f c0       	rjmp	.+190    	; 0x36ac <usart_init_rs232+0x27e>
    35ee:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    35f0:	f8 e0       	ldi	r31, 0x08	; 8
    35f2:	df 07       	cpc	r29, r31
    35f4:	21 f4       	brne	.+8      	; 0x35fe <usart_init_rs232+0x1d0>
    35f6:	60 e1       	ldi	r22, 0x10	; 16
    35f8:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    35fa:	a5 db       	rcall	.-2230   	; 0x2d46 <sysclk_enable_module>
    35fc:	57 c0       	rjmp	.+174    	; 0x36ac <usart_init_rs232+0x27e>
    35fe:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    3600:	89 e0       	ldi	r24, 0x09	; 9
    3602:	d8 07       	cpc	r29, r24
    3604:	21 f4       	brne	.+8      	; 0x360e <usart_init_rs232+0x1e0>
    3606:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    3608:	84 e0       	ldi	r24, 0x04	; 4
    360a:	9d db       	rcall	.-2246   	; 0x2d46 <sysclk_enable_module>
    360c:	4f c0       	rjmp	.+158    	; 0x36ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    360e:	c0 3a       	cpi	r28, 0xA0	; 160
    3610:	ea e0       	ldi	r30, 0x0A	; 10
    3612:	de 07       	cpc	r29, r30
    3614:	21 f4       	brne	.+8      	; 0x361e <usart_init_rs232+0x1f0>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    3616:	60 e1       	ldi	r22, 0x10	; 16
    3618:	85 e0       	ldi	r24, 0x05	; 5
    361a:	95 db       	rcall	.-2262   	; 0x2d46 <sysclk_enable_module>
    361c:	47 c0       	rjmp	.+142    	; 0x36ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    361e:	c0 3a       	cpi	r28, 0xA0	; 160
    3620:	fb e0       	ldi	r31, 0x0B	; 11
    3622:	df 07       	cpc	r29, r31
    3624:	21 f4       	brne	.+8      	; 0x362e <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    3626:	60 e1       	ldi	r22, 0x10	; 16
    3628:	86 e0       	ldi	r24, 0x06	; 6
    362a:	8d db       	rcall	.-2278   	; 0x2d46 <sysclk_enable_module>
    362c:	3f c0       	rjmp	.+126    	; 0x36ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    362e:	c0 3b       	cpi	r28, 0xB0	; 176
    3630:	88 e0       	ldi	r24, 0x08	; 8
    3632:	d8 07       	cpc	r29, r24
    3634:	21 f4       	brne	.+8      	; 0x363e <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    3636:	60 e2       	ldi	r22, 0x20	; 32
    3638:	83 e0       	ldi	r24, 0x03	; 3
    363a:	85 db       	rcall	.-2294   	; 0x2d46 <sysclk_enable_module>
    363c:	37 c0       	rjmp	.+110    	; 0x36ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    363e:	c0 3b       	cpi	r28, 0xB0	; 176
    3640:	e9 e0       	ldi	r30, 0x09	; 9
    3642:	de 07       	cpc	r29, r30
    3644:	21 f4       	brne	.+8      	; 0x364e <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    3646:	60 e2       	ldi	r22, 0x20	; 32
    3648:	84 e0       	ldi	r24, 0x04	; 4
    364a:	7d db       	rcall	.-2310   	; 0x2d46 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    364c:	2f c0       	rjmp	.+94     	; 0x36ac <usart_init_rs232+0x27e>
    364e:	c0 3b       	cpi	r28, 0xB0	; 176
    3650:	fa e0       	ldi	r31, 0x0A	; 10
    3652:	df 07       	cpc	r29, r31
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    3654:	21 f4       	brne	.+8      	; 0x365e <usart_init_rs232+0x230>
    3656:	60 e2       	ldi	r22, 0x20	; 32
    3658:	85 e0       	ldi	r24, 0x05	; 5
    365a:	75 db       	rcall	.-2326   	; 0x2d46 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    365c:	27 c0       	rjmp	.+78     	; 0x36ac <usart_init_rs232+0x27e>
    365e:	c0 3b       	cpi	r28, 0xB0	; 176
    3660:	8b e0       	ldi	r24, 0x0B	; 11
    3662:	d8 07       	cpc	r29, r24
    3664:	21 f4       	brne	.+8      	; 0x366e <usart_init_rs232+0x240>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    3666:	60 e2       	ldi	r22, 0x20	; 32
    3668:	86 e0       	ldi	r24, 0x06	; 6
    366a:	6d db       	rcall	.-2342   	; 0x2d46 <sysclk_enable_module>
    366c:	1f c0       	rjmp	.+62     	; 0x36ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    366e:	c0 38       	cpi	r28, 0x80	; 128
    3670:	e4 e0       	ldi	r30, 0x04	; 4
    3672:	de 07       	cpc	r29, r30
    3674:	21 f4       	brne	.+8      	; 0x367e <usart_init_rs232+0x250>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    3676:	60 e4       	ldi	r22, 0x40	; 64
    3678:	83 e0       	ldi	r24, 0x03	; 3
    367a:	65 db       	rcall	.-2358   	; 0x2d46 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    367c:	17 c0       	rjmp	.+46     	; 0x36ac <usart_init_rs232+0x27e>
    367e:	c0 39       	cpi	r28, 0x90	; 144
    3680:	f4 e0       	ldi	r31, 0x04	; 4
    3682:	df 07       	cpc	r29, r31
    3684:	21 f4       	brne	.+8      	; 0x368e <usart_init_rs232+0x260>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    3686:	60 e4       	ldi	r22, 0x40	; 64
    3688:	84 e0       	ldi	r24, 0x04	; 4
    368a:	5d db       	rcall	.-2374   	; 0x2d46 <sysclk_enable_module>
    368c:	0f c0       	rjmp	.+30     	; 0x36ac <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    368e:	c0 3a       	cpi	r28, 0xA0	; 160
    3690:	84 e0       	ldi	r24, 0x04	; 4
    3692:	d8 07       	cpc	r29, r24
    3694:	21 f4       	brne	.+8      	; 0x369e <usart_init_rs232+0x270>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    3696:	60 e4       	ldi	r22, 0x40	; 64
    3698:	85 e0       	ldi	r24, 0x05	; 5
    369a:	55 db       	rcall	.-2390   	; 0x2d46 <sysclk_enable_module>
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    369c:	07 c0       	rjmp	.+14     	; 0x36ac <usart_init_rs232+0x27e>
    369e:	c0 3b       	cpi	r28, 0xB0	; 176
    36a0:	e4 e0       	ldi	r30, 0x04	; 4
    36a2:	de 07       	cpc	r29, r30
    36a4:	19 f4       	brne	.+6      	; 0x36ac <usart_init_rs232+0x27e>
    36a6:	60 e4       	ldi	r22, 0x40	; 64
    36a8:	86 e0       	ldi	r24, 0x06	; 6
    36aa:	4d db       	rcall	.-2406   	; 0x2d46 <sysclk_enable_module>
    36ac:	8d 81       	ldd	r24, Y+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    36ae:	8f 73       	andi	r24, 0x3F	; 63
    36b0:	8d 83       	std	Y+5, r24	; 0x05
    36b2:	f8 01       	movw	r30, r16
    36b4:	95 81       	ldd	r25, Z+5	; 0x05
    36b6:	84 81       	ldd	r24, Z+4	; 0x04
    36b8:	89 2b       	or	r24, r25
    36ba:	96 81       	ldd	r25, Z+6	; 0x06
    36bc:	91 11       	cpse	r25, r1
    36be:	98 e0       	ldi	r25, 0x08	; 8
    36c0:	89 2b       	or	r24, r25
    36c2:	8d 83       	std	Y+5, r24	; 0x05
    36c4:	f8 01       	movw	r30, r16
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    36c6:	40 81       	ld	r20, Z
    36c8:	51 81       	ldd	r21, Z+1	; 0x01
    36ca:	62 81       	ldd	r22, Z+2	; 0x02
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    36cc:	73 81       	ldd	r23, Z+3	; 0x03
    36ce:	00 e0       	ldi	r16, 0x00	; 0
    36d0:	18 e4       	ldi	r17, 0x48	; 72
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    36d2:	28 ee       	ldi	r18, 0xE8	; 232
    36d4:	31 e0       	ldi	r19, 0x01	; 1
    36d6:	ce 01       	movw	r24, r28
    36d8:	97 dd       	rcall	.-1234   	; 0x3208 <usart_set_baudrate>
    36da:	9c 81       	ldd	r25, Y+4	; 0x04
    36dc:	98 60       	ori	r25, 0x08	; 8
    36de:	9c 83       	std	Y+4, r25	; 0x04
    36e0:	9c 81       	ldd	r25, Y+4	; 0x04
    36e2:	90 61       	ori	r25, 0x10	; 16
    36e4:	9c 83       	std	Y+4, r25	; 0x04
    36e6:	df 91       	pop	r29
    36e8:	cf 91       	pop	r28
    36ea:	1f 91       	pop	r17
    36ec:	0f 91       	pop	r16
    36ee:	08 95       	ret

000036f0 <Get_altitude>:
	//printf("altitude = %f \n", (float)altitude);
	return altitude;
}*/

//Old, working function. Uses TEMP from pressure sensor calculations. May as well use
float Get_altitude(uint32_t initial, uint32_t pressure){
    36f0:	8f 92       	push	r8
    36f2:	9f 92       	push	r9
    36f4:	af 92       	push	r10
    36f6:	bf 92       	push	r11
    36f8:	cf 92       	push	r12
    36fa:	df 92       	push	r13
    36fc:	ef 92       	push	r14
    36fe:	ff 92       	push	r15
    3700:	49 01       	movw	r8, r18
    3702:	5a 01       	movw	r10, r20
	//printf("temperature = %li \n", TEMP/100);
	//float altitude = (((287.058 * (((float)(TEMP)/100)+273.15)/9.8))*log((float)initial/get_pressure())*3.28);	Not this one, this one's bad
	//float altitude = (pow(((initial/100)/(pressure/100)),(1/5.257))-1)*((TEMP/100)+273.15)/.0065; //This is now right, just gotta use the thermistor
	float altitude = ( (float)initial-(float)pressure) / (1.225f * 9.81f);
	//printf("altitude = %f \n", (float)altitude);
	return altitude;
    3704:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__floatunsisf>
    3708:	6b 01       	movw	r12, r22
    370a:	7c 01       	movw	r14, r24
    370c:	c5 01       	movw	r24, r10
    370e:	b4 01       	movw	r22, r8
    3710:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__floatunsisf>
    3714:	9b 01       	movw	r18, r22
    3716:	ac 01       	movw	r20, r24
    3718:	c7 01       	movw	r24, r14
    371a:	b6 01       	movw	r22, r12
    371c:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    3720:	29 ea       	ldi	r18, 0xA9	; 169
    3722:	36 e4       	ldi	r19, 0x46	; 70
    3724:	40 e4       	ldi	r20, 0x40	; 64
    3726:	51 e4       	ldi	r21, 0x41	; 65
    3728:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
}
    372c:	ff 90       	pop	r15
    372e:	ef 90       	pop	r14
    3730:	df 90       	pop	r13
    3732:	cf 90       	pop	r12
    3734:	bf 90       	pop	r11
    3736:	af 90       	pop	r10
    3738:	9f 90       	pop	r9
    373a:	8f 90       	pop	r8
    373c:	08 95       	ret

0000373e <init_GPS_pins_and_usart>:
		{
			return i;
		}
	}
	return i+1;
}
    373e:	cf 93       	push	r28
    3740:	df 93       	push	r29
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
    3746:	27 97       	sbiw	r28, 0x07	; 7
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	de bf       	out	0x3e, r29	; 62
    374c:	e0 e6       	ldi	r30, 0x60	; 96
    374e:	f6 e0       	ldi	r31, 0x06	; 6
    3750:	80 81       	ld	r24, Z
    3752:	80 68       	ori	r24, 0x80	; 128
    3754:	80 83       	st	Z, r24
    3756:	80 81       	ld	r24, Z
    3758:	8f 7b       	andi	r24, 0xBF	; 191
    375a:	80 83       	st	Z, r24
    375c:	80 e8       	ldi	r24, 0x80	; 128
    375e:	85 83       	std	Z+5, r24	; 0x05
    3760:	60 e2       	ldi	r22, 0x20	; 32
    3762:	84 e0       	ldi	r24, 0x04	; 4
    3764:	f0 da       	rcall	.-2592   	; 0x2d46 <sysclk_enable_module>
    3766:	e0 e2       	ldi	r30, 0x20	; 32
    3768:	f0 e2       	ldi	r31, 0x20	; 32
    376a:	84 81       	ldd	r24, Z+4	; 0x04
    376c:	8d 83       	std	Y+5, r24	; 0x05
    376e:	85 81       	ldd	r24, Z+5	; 0x05
    3770:	8e 83       	std	Y+6, r24	; 0x06
    3772:	86 81       	ldd	r24, Z+6	; 0x06
    3774:	8f 83       	std	Y+7, r24	; 0x07
    3776:	80 81       	ld	r24, Z
    3778:	91 81       	ldd	r25, Z+1	; 0x01
    377a:	a2 81       	ldd	r26, Z+2	; 0x02
    377c:	b3 81       	ldd	r27, Z+3	; 0x03
    377e:	89 83       	std	Y+1, r24	; 0x01
    3780:	9a 83       	std	Y+2, r25	; 0x02
    3782:	ab 83       	std	Y+3, r26	; 0x03
    3784:	bc 83       	std	Y+4, r27	; 0x04
    3786:	60 e2       	ldi	r22, 0x20	; 32
    3788:	84 e0       	ldi	r24, 0x04	; 4
    378a:	dd da       	rcall	.-2630   	; 0x2d46 <sysclk_enable_module>
    378c:	be 01       	movw	r22, r28
    378e:	6f 5f       	subi	r22, 0xFF	; 255
    3790:	7f 4f       	sbci	r23, 0xFF	; 255
    3792:	80 eb       	ldi	r24, 0xB0	; 176
    3794:	99 e0       	ldi	r25, 0x09	; 9
    3796:	4b de       	rcall	.-874    	; 0x342e <usart_init_rs232>
    3798:	27 96       	adiw	r28, 0x07	; 7
    379a:	cd bf       	out	0x3d, r28	; 61
    379c:	de bf       	out	0x3e, r29	; 62
    379e:	df 91       	pop	r29
    37a0:	cf 91       	pop	r28
    37a2:	08 95       	ret

000037a4 <startswith>:
    37a4:	dc 01       	movw	r26, r24
    37a6:	fb 01       	movw	r30, r22
    37a8:	80 81       	ld	r24, Z
    37aa:	88 23       	and	r24, r24
    37ac:	01 f1       	breq	.+64     	; 0x37ee <startswith+0x4a>
    37ae:	08 2e       	mov	r0, r24
    37b0:	00 0c       	add	r0, r0
    37b2:	99 0b       	sbc	r25, r25
    37b4:	2c 91       	ld	r18, X
    37b6:	30 e0       	ldi	r19, 0x00	; 0
    37b8:	82 17       	cp	r24, r18
    37ba:	93 07       	cpc	r25, r19
    37bc:	d1 f4       	brne	.+52     	; 0x37f2 <startswith+0x4e>
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	0b c0       	rjmp	.+22     	; 0x37d8 <startswith+0x34>
    37c2:	02 2e       	mov	r0, r18
    37c4:	00 0c       	add	r0, r0
    37c6:	33 0b       	sbc	r19, r19
    37c8:	fd 01       	movw	r30, r26
    37ca:	e4 0f       	add	r30, r20
    37cc:	f5 1f       	adc	r31, r21
    37ce:	40 81       	ld	r20, Z
    37d0:	50 e0       	ldi	r21, 0x00	; 0
    37d2:	24 17       	cp	r18, r20
    37d4:	35 07       	cpc	r19, r21
    37d6:	79 f4       	brne	.+30     	; 0x37f6 <startswith+0x52>
    37d8:	9f 5f       	subi	r25, 0xFF	; 255
    37da:	49 2f       	mov	r20, r25
    37dc:	50 e0       	ldi	r21, 0x00	; 0
    37de:	fb 01       	movw	r30, r22
    37e0:	e4 0f       	add	r30, r20
    37e2:	f5 1f       	adc	r31, r21
    37e4:	20 81       	ld	r18, Z
    37e6:	21 11       	cpse	r18, r1
    37e8:	ec cf       	rjmp	.-40     	; 0x37c2 <startswith+0x1e>
    37ea:	81 e0       	ldi	r24, 0x01	; 1
    37ec:	08 95       	ret
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	08 95       	ret
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	08 95       	ret
    37f6:	80 e0       	ldi	r24, 0x00	; 0
    37f8:	08 95       	ret

000037fa <getGPSDatafromNMEA>:

GPS_data_t getGPSDatafromNMEA(uint8_t* NMEA_sentence, uint8_t sentencelength)
{
    37fa:	2f 92       	push	r2
    37fc:	3f 92       	push	r3
    37fe:	4f 92       	push	r4
    3800:	5f 92       	push	r5
    3802:	6f 92       	push	r6
    3804:	7f 92       	push	r7
    3806:	8f 92       	push	r8
    3808:	9f 92       	push	r9
    380a:	af 92       	push	r10
    380c:	bf 92       	push	r11
    380e:	cf 92       	push	r12
    3810:	df 92       	push	r13
    3812:	ef 92       	push	r14
    3814:	ff 92       	push	r15
    3816:	0f 93       	push	r16
    3818:	1f 93       	push	r17
    381a:	cf 93       	push	r28
    381c:	df 93       	push	r29
    381e:	cd b7       	in	r28, 0x3d	; 61
    3820:	de b7       	in	r29, 0x3e	; 62
    3822:	a2 97       	sbiw	r28, 0x22	; 34
    3824:	cd bf       	out	0x3d, r28	; 61
    3826:	de bf       	out	0x3e, r29	; 62
    3828:	4c 01       	movw	r8, r24
    382a:	69 83       	std	Y+1, r22	; 0x01
    382c:	7a 83       	std	Y+2, r23	; 0x02
    382e:	24 2e       	mov	r2, r20
	uint8_t speedwritten=0;
	uint8_t heightwritten=0;
	uint8_t no_of_sateliiteswritten=0;
	uint8_t comma_position=0;
	int a=0;
	if (startswith(NMEA_sentence, "$GPGGA"))
    3830:	66 e4       	ldi	r22, 0x46	; 70
    3832:	70 e2       	ldi	r23, 0x20	; 32
    3834:	89 81       	ldd	r24, Y+1	; 0x01
    3836:	9a 81       	ldd	r25, Y+2	; 0x02
    3838:	b5 df       	rcall	.-150    	; 0x37a4 <startswith>
    383a:	88 23       	and	r24, r24
    383c:	09 f4       	brne	.+2      	; 0x3840 <getGPSDatafromNMEA+0x46>
    383e:	49 c2       	rjmp	.+1170   	; 0x3cd2 <getGPSDatafromNMEA+0x4d8>
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    3840:	31 2c       	mov	r3, r1
    3842:	12 14       	cp	r1, r2
    3844:	13 04       	cpc	r1, r3
    3846:	0c f0       	brlt	.+2      	; 0x384a <getGPSDatafromNMEA+0x50>
    3848:	44 c2       	rjmp	.+1160   	; 0x3cd2 <getGPSDatafromNMEA+0x4d8>
    384a:	49 80       	ldd	r4, Y+1	; 0x01
    384c:	5a 80       	ldd	r5, Y+2	; 0x02
    384e:	00 e0       	ldi	r16, 0x00	; 0
    3850:	10 e0       	ldi	r17, 0x00	; 0
    3852:	f1 2c       	mov	r15, r1
										 + 1000l*(NMEA_sentence[a+7] - '0')
										  + 100l*(NMEA_sentence[a+8] - '0')
										   + 10l*(NMEA_sentence[a+9] - '0')
										       + (NMEA_sentence[a+10] - '0');
					//printf("%lu\n",GPSData.lonminutes);
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
    3854:	df 2c       	mov	r13, r15
    3856:	48 a2       	std	Y+32, r4	; 0x20
    3858:	59 a2       	std	Y+33, r5	; 0x21
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
		{
			//printf("hate6");
			if (NMEA_sentence[a]==',')
    385a:	a8 a1       	ldd	r26, Y+32	; 0x20
    385c:	b9 a1       	ldd	r27, Y+33	; 0x21
    385e:	8d 91       	ld	r24, X+
    3860:	a8 a3       	std	Y+32, r26	; 0x20
    3862:	b9 a3       	std	Y+33, r27	; 0x21
    3864:	8c 32       	cpi	r24, 0x2C	; 44
    3866:	09 f0       	breq	.+2      	; 0x386a <getGPSDatafromNMEA+0x70>
    3868:	2e c2       	rjmp	.+1116   	; 0x3cc6 <getGPSDatafromNMEA+0x4cc>
			{
				//printf("gfhghhf");
				countcommas++;
    386a:	d3 94       	inc	r13
				if (countcommas == 1)
    386c:	b1 e0       	ldi	r27, 0x01	; 1
    386e:	db 12       	cpse	r13, r27
    3870:	23 c0       	rjmp	.+70     	; 0x38b8 <getGPSDatafromNMEA+0xbe>
				{
					//printf("Begin %u, end %u\n", NMEA_sentence[a + 1] - '0', NMEA_sentence[a + 2] - '0');
					GPSData.hour = 10 * (NMEA_sentence[a + 1] - (uint8_t)'0') + (NMEA_sentence[a + 2] - (uint8_t)'0');
    3872:	e8 a1       	ldd	r30, Y+32	; 0x20
    3874:	f9 a1       	ldd	r31, Y+33	; 0x21
    3876:	80 81       	ld	r24, Z
    3878:	88 0f       	add	r24, r24
    387a:	80 56       	subi	r24, 0x60	; 96
    387c:	98 2f       	mov	r25, r24
    387e:	99 0f       	add	r25, r25
    3880:	99 0f       	add	r25, r25
    3882:	89 0f       	add	r24, r25
    3884:	91 81       	ldd	r25, Z+1	; 0x01
    3886:	90 53       	subi	r25, 0x30	; 48
    3888:	89 0f       	add	r24, r25
    388a:	8d 87       	std	Y+13, r24	; 0x0d
					GPSData.minutes = 10 * (NMEA_sentence[a + 3] - '0') + NMEA_sentence[a + 4] - '0';
    388c:	82 81       	ldd	r24, Z+2	; 0x02
    388e:	88 0f       	add	r24, r24
    3890:	80 56       	subi	r24, 0x60	; 96
    3892:	98 2f       	mov	r25, r24
    3894:	99 0f       	add	r25, r25
    3896:	99 0f       	add	r25, r25
    3898:	89 0f       	add	r24, r25
    389a:	93 81       	ldd	r25, Z+3	; 0x03
    389c:	90 53       	subi	r25, 0x30	; 48
    389e:	89 0f       	add	r24, r25
    38a0:	8e 87       	std	Y+14, r24	; 0x0e
					GPSData.seconds = 10 * (NMEA_sentence[a + 5] - '0') + NMEA_sentence[a + 6] - '0';
    38a2:	84 81       	ldd	r24, Z+4	; 0x04
    38a4:	88 0f       	add	r24, r24
    38a6:	80 56       	subi	r24, 0x60	; 96
    38a8:	a8 2e       	mov	r10, r24
    38aa:	aa 0c       	add	r10, r10
    38ac:	aa 0c       	add	r10, r10
    38ae:	a8 0e       	add	r10, r24
    38b0:	95 81       	ldd	r25, Z+5	; 0x05
    38b2:	90 53       	subi	r25, 0x30	; 48
    38b4:	a9 0e       	add	r10, r25
    38b6:	07 c2       	rjmp	.+1038   	; 0x3cc6 <getGPSDatafromNMEA+0x4cc>
				}
				else if (countcommas == 2 && NMEA_sentence[a+1] != ',')
    38b8:	f2 e0       	ldi	r31, 0x02	; 2
    38ba:	df 12       	cpse	r13, r31
    38bc:	bb c0       	rjmp	.+374    	; 0x3a34 <getGPSDatafromNMEA+0x23a>
    38be:	a8 a1       	ldd	r26, Y+32	; 0x20
    38c0:	b9 a1       	ldd	r27, Y+33	; 0x21
    38c2:	8c 91       	ld	r24, X
    38c4:	8c 32       	cpi	r24, 0x2C	; 44
    38c6:	09 f4       	brne	.+2      	; 0x38ca <getGPSDatafromNMEA+0xd0>
    38c8:	f0 c1       	rjmp	.+992    	; 0x3caa <getGPSDatafromNMEA+0x4b0>
				{
					GPSData.latdegrees = 10*(NMEA_sentence[a+1] - '0') + (NMEA_sentence[a+2] - '0');
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	c0 97       	sbiw	r24, 0x30	; 48
    38ce:	9c 01       	movw	r18, r24
    38d0:	22 0f       	add	r18, r18
    38d2:	33 1f       	adc	r19, r19
    38d4:	88 0f       	add	r24, r24
    38d6:	99 1f       	adc	r25, r25
    38d8:	88 0f       	add	r24, r24
    38da:	99 1f       	adc	r25, r25
    38dc:	88 0f       	add	r24, r24
    38de:	99 1f       	adc	r25, r25
    38e0:	82 0f       	add	r24, r18
    38e2:	93 1f       	adc	r25, r19
    38e4:	11 96       	adiw	r26, 0x01	; 1
    38e6:	2c 91       	ld	r18, X
    38e8:	11 97       	sbiw	r26, 0x01	; 1
    38ea:	30 e0       	ldi	r19, 0x00	; 0
    38ec:	20 53       	subi	r18, 0x30	; 48
    38ee:	31 09       	sbc	r19, r1
    38f0:	2c 01       	movw	r4, r24
    38f2:	42 0e       	add	r4, r18
    38f4:	53 1e       	adc	r5, r19
    38f6:	4b 86       	std	Y+11, r4	; 0x0b
    38f8:	5c 86       	std	Y+12, r5	; 0x0c
					//printf("%u\n",GPSData.latdegrees);
					GPSData.latminutes = 100000l*(NMEA_sentence[a+3] - '0') + 10000l*(NMEA_sentence[a+4] - '0') + 1000l*(NMEA_sentence[a+6] - '0') + 100l*(NMEA_sentence[a+7] - '0') + 10l*(NMEA_sentence[a+8] - '0') + (NMEA_sentence[a+9] - '0');
    38fa:	12 96       	adiw	r26, 0x02	; 2
    38fc:	ac 91       	ld	r26, X
    38fe:	b0 e0       	ldi	r27, 0x00	; 0
    3900:	d0 97       	sbiw	r26, 0x30	; 48
    3902:	20 ea       	ldi	r18, 0xA0	; 160
    3904:	36 e8       	ldi	r19, 0x86	; 134
    3906:	41 e0       	ldi	r20, 0x01	; 1
    3908:	50 e0       	ldi	r21, 0x00	; 0
    390a:	0e 94 a3 34 	call	0x6946	; 0x6946 <__mulshisi3>
    390e:	2b 01       	movw	r4, r22
    3910:	3c 01       	movw	r6, r24
    3912:	e8 a1       	ldd	r30, Y+32	; 0x20
    3914:	f9 a1       	ldd	r31, Y+33	; 0x21
    3916:	a3 81       	ldd	r26, Z+3	; 0x03
    3918:	b0 e0       	ldi	r27, 0x00	; 0
    391a:	d0 97       	sbiw	r26, 0x30	; 48
    391c:	20 e1       	ldi	r18, 0x10	; 16
    391e:	37 e2       	ldi	r19, 0x27	; 39
    3920:	0e 94 9d 34 	call	0x693a	; 0x693a <__usmulhisi3>
    3924:	46 0e       	add	r4, r22
    3926:	57 1e       	adc	r5, r23
    3928:	68 1e       	adc	r6, r24
    392a:	79 1e       	adc	r7, r25
    392c:	a5 81       	ldd	r26, Z+5	; 0x05
    392e:	b0 e0       	ldi	r27, 0x00	; 0
    3930:	d0 97       	sbiw	r26, 0x30	; 48
    3932:	28 ee       	ldi	r18, 0xE8	; 232
    3934:	33 e0       	ldi	r19, 0x03	; 3
    3936:	0e 94 9d 34 	call	0x693a	; 0x693a <__usmulhisi3>
    393a:	46 0e       	add	r4, r22
    393c:	57 1e       	adc	r5, r23
    393e:	68 1e       	adc	r6, r24
    3940:	79 1e       	adc	r7, r25
    3942:	a6 81       	ldd	r26, Z+6	; 0x06
    3944:	b0 e0       	ldi	r27, 0x00	; 0
    3946:	d0 97       	sbiw	r26, 0x30	; 48
    3948:	24 e6       	ldi	r18, 0x64	; 100
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	0e 94 9d 34 	call	0x693a	; 0x693a <__usmulhisi3>
    3950:	ab 01       	movw	r20, r22
    3952:	bc 01       	movw	r22, r24
    3954:	44 0d       	add	r20, r4
    3956:	55 1d       	adc	r21, r5
    3958:	66 1d       	adc	r22, r6
    395a:	77 1d       	adc	r23, r7
    395c:	97 81       	ldd	r25, Z+7	; 0x07
    395e:	89 2f       	mov	r24, r25
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	c0 97       	sbiw	r24, 0x30	; 48
    3964:	09 2e       	mov	r0, r25
    3966:	00 0c       	add	r0, r0
    3968:	aa 0b       	sbc	r26, r26
    396a:	bb 0b       	sbc	r27, r27
    396c:	88 0f       	add	r24, r24
    396e:	99 1f       	adc	r25, r25
    3970:	aa 1f       	adc	r26, r26
    3972:	bb 1f       	adc	r27, r27
    3974:	2c 01       	movw	r4, r24
    3976:	3d 01       	movw	r6, r26
    3978:	44 0c       	add	r4, r4
    397a:	55 1c       	adc	r5, r5
    397c:	66 1c       	adc	r6, r6
    397e:	77 1c       	adc	r7, r7
    3980:	44 0c       	add	r4, r4
    3982:	55 1c       	adc	r5, r5
    3984:	66 1c       	adc	r6, r6
    3986:	77 1c       	adc	r7, r7
    3988:	84 0d       	add	r24, r4
    398a:	95 1d       	adc	r25, r5
    398c:	a6 1d       	adc	r26, r6
    398e:	b7 1d       	adc	r27, r7
    3990:	84 0f       	add	r24, r20
    3992:	95 1f       	adc	r25, r21
    3994:	a6 1f       	adc	r26, r22
    3996:	b7 1f       	adc	r27, r23
    3998:	40 85       	ldd	r20, Z+8	; 0x08
    399a:	50 e0       	ldi	r21, 0x00	; 0
    399c:	40 53       	subi	r20, 0x30	; 48
    399e:	51 09       	sbc	r21, r1
    39a0:	05 2e       	mov	r0, r21
    39a2:	00 0c       	add	r0, r0
    39a4:	66 0b       	sbc	r22, r22
    39a6:	77 0b       	sbc	r23, r23
    39a8:	2c 01       	movw	r4, r24
    39aa:	3d 01       	movw	r6, r26
    39ac:	44 0e       	add	r4, r20
    39ae:	55 1e       	adc	r5, r21
    39b0:	66 1e       	adc	r6, r22
    39b2:	77 1e       	adc	r7, r23
    39b4:	4f 82       	std	Y+7, r4	; 0x07
    39b6:	58 86       	std	Y+8, r5	; 0x08
    39b8:	69 86       	std	Y+9, r6	; 0x09
    39ba:	7a 86       	std	Y+10, r7	; 0x0a
					//printf("%lu\n",GPSData.latminutes);

					GPSData.latdecimal = (NMEA_sentence[a+11] == 'N' ? 1.0 : -1.0) * ((double)GPSData.latdegrees + ((double)GPSData.latminutes/(60.0*10000.0)));
    39bc:	82 85       	ldd	r24, Z+10	; 0x0a
    39be:	8e 34       	cpi	r24, 0x4E	; 78
    39c0:	51 f0       	breq	.+20     	; 0x39d6 <getGPSDatafromNMEA+0x1dc>
    39c2:	b1 2c       	mov	r11, r1
    39c4:	c1 2c       	mov	r12, r1
    39c6:	68 94       	set
    39c8:	ee 24       	eor	r14, r14
    39ca:	e7 f8       	bld	r14, 7
    39cc:	0f 2e       	mov	r0, r31
    39ce:	ff eb       	ldi	r31, 0xBF	; 191
    39d0:	ff 2e       	mov	r15, r31
    39d2:	f0 2d       	mov	r31, r0
    39d4:	09 c0       	rjmp	.+18     	; 0x39e8 <getGPSDatafromNMEA+0x1ee>
    39d6:	b1 2c       	mov	r11, r1
    39d8:	c1 2c       	mov	r12, r1
    39da:	68 94       	set
    39dc:	ee 24       	eor	r14, r14
    39de:	e7 f8       	bld	r14, 7
    39e0:	0f 2e       	mov	r0, r31
    39e2:	ff e3       	ldi	r31, 0x3F	; 63
    39e4:	ff 2e       	mov	r15, r31
    39e6:	f0 2d       	mov	r31, r0
    39e8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ea:	78 85       	ldd	r23, Y+8	; 0x08
    39ec:	89 85       	ldd	r24, Y+9	; 0x09
    39ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f0:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__floatunsisf>
    39f4:	20 e0       	ldi	r18, 0x00	; 0
    39f6:	3c e7       	ldi	r19, 0x7C	; 124
    39f8:	42 e1       	ldi	r20, 0x12	; 18
    39fa:	59 e4       	ldi	r21, 0x49	; 73
    39fc:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
    3a00:	2b 01       	movw	r4, r22
    3a02:	3c 01       	movw	r6, r24
    3a04:	2b 85       	ldd	r18, Y+11	; 0x0b
    3a06:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a08:	b9 01       	movw	r22, r18
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__floatunsisf>
    3a12:	9b 01       	movw	r18, r22
    3a14:	ac 01       	movw	r20, r24
    3a16:	c3 01       	movw	r24, r6
    3a18:	b2 01       	movw	r22, r4
    3a1a:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    3a1e:	2b 2d       	mov	r18, r11
    3a20:	3c 2d       	mov	r19, r12
    3a22:	4e 2d       	mov	r20, r14
    3a24:	5f 2d       	mov	r21, r15
    3a26:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    3a2a:	6f 87       	std	Y+15, r22	; 0x0f
    3a2c:	78 8b       	std	Y+16, r23	; 0x10
    3a2e:	89 8b       	std	Y+17, r24	; 0x11
    3a30:	9a 8b       	std	Y+18, r25	; 0x12
    3a32:	49 c1       	rjmp	.+658    	; 0x3cc6 <getGPSDatafromNMEA+0x4cc>
				}
				else if (countcommas == 2)
				{
					GPSData.latdecimal = 0.0;
				}
				else if (countcommas == 4 && NMEA_sentence[a+1] != ',')
    3a34:	34 e0       	ldi	r19, 0x04	; 4
    3a36:	d3 12       	cpse	r13, r19
    3a38:	c5 c0       	rjmp	.+394    	; 0x3bc4 <getGPSDatafromNMEA+0x3ca>
    3a3a:	a8 a1       	ldd	r26, Y+32	; 0x20
    3a3c:	b9 a1       	ldd	r27, Y+33	; 0x21
    3a3e:	2c 91       	ld	r18, X
    3a40:	2c 32       	cpi	r18, 0x2C	; 44
    3a42:	09 f4       	brne	.+2      	; 0x3a46 <getGPSDatafromNMEA+0x24c>
    3a44:	37 c1       	rjmp	.+622    	; 0x3cb4 <getGPSDatafromNMEA+0x4ba>
				{
					GPSData.londegrees = 100*(NMEA_sentence[a+1] - '0') +10*(NMEA_sentence[a+2] - '0') + (NMEA_sentence[a+3] - '0');
    3a46:	11 96       	adiw	r26, 0x01	; 1
    3a48:	8c 91       	ld	r24, X
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	c0 97       	sbiw	r24, 0x30	; 48
    3a4e:	ac 01       	movw	r20, r24
    3a50:	44 0f       	add	r20, r20
    3a52:	55 1f       	adc	r21, r21
    3a54:	88 0f       	add	r24, r24
    3a56:	99 1f       	adc	r25, r25
    3a58:	88 0f       	add	r24, r24
    3a5a:	99 1f       	adc	r25, r25
    3a5c:	88 0f       	add	r24, r24
    3a5e:	99 1f       	adc	r25, r25
    3a60:	84 0f       	add	r24, r20
    3a62:	95 1f       	adc	r25, r21
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	20 53       	subi	r18, 0x30	; 48
    3a68:	31 09       	sbc	r19, r1
    3a6a:	b4 e6       	ldi	r27, 0x64	; 100
    3a6c:	b2 9f       	mul	r27, r18
    3a6e:	a0 01       	movw	r20, r0
    3a70:	b3 9f       	mul	r27, r19
    3a72:	50 0d       	add	r21, r0
    3a74:	11 24       	eor	r1, r1
    3a76:	84 0f       	add	r24, r20
    3a78:	95 1f       	adc	r25, r21
    3a7a:	e8 a1       	ldd	r30, Y+32	; 0x20
    3a7c:	f9 a1       	ldd	r31, Y+33	; 0x21
    3a7e:	22 81       	ldd	r18, Z+2	; 0x02
    3a80:	30 e0       	ldi	r19, 0x00	; 0
    3a82:	20 53       	subi	r18, 0x30	; 48
    3a84:	31 09       	sbc	r19, r1
    3a86:	2c 01       	movw	r4, r24
    3a88:	42 0e       	add	r4, r18
    3a8a:	53 1e       	adc	r5, r19
    3a8c:	4f 8a       	std	Y+23, r4	; 0x17
    3a8e:	58 8e       	std	Y+24, r5	; 0x18
					//printf("%u\n",GPSData.londegrees);
					GPSData.lonminutes = 100000l*(NMEA_sentence[a+4] - '0')
    3a90:	a3 81       	ldd	r26, Z+3	; 0x03
    3a92:	b0 e0       	ldi	r27, 0x00	; 0
    3a94:	d0 97       	sbiw	r26, 0x30	; 48
    3a96:	20 ea       	ldi	r18, 0xA0	; 160
    3a98:	36 e8       	ldi	r19, 0x86	; 134
    3a9a:	41 e0       	ldi	r20, 0x01	; 1
    3a9c:	50 e0       	ldi	r21, 0x00	; 0
    3a9e:	0e 94 a3 34 	call	0x6946	; 0x6946 <__mulshisi3>
    3aa2:	2b 01       	movw	r4, r22
    3aa4:	3c 01       	movw	r6, r24
    3aa6:	a4 81       	ldd	r26, Z+4	; 0x04
    3aa8:	b0 e0       	ldi	r27, 0x00	; 0
    3aaa:	d0 97       	sbiw	r26, 0x30	; 48
    3aac:	20 e1       	ldi	r18, 0x10	; 16
    3aae:	37 e2       	ldi	r19, 0x27	; 39
    3ab0:	0e 94 9d 34 	call	0x693a	; 0x693a <__usmulhisi3>
    3ab4:	46 0e       	add	r4, r22
    3ab6:	57 1e       	adc	r5, r23
    3ab8:	68 1e       	adc	r6, r24
    3aba:	79 1e       	adc	r7, r25
    3abc:	a6 81       	ldd	r26, Z+6	; 0x06
    3abe:	b0 e0       	ldi	r27, 0x00	; 0
    3ac0:	d0 97       	sbiw	r26, 0x30	; 48
    3ac2:	28 ee       	ldi	r18, 0xE8	; 232
    3ac4:	33 e0       	ldi	r19, 0x03	; 3
    3ac6:	0e 94 9d 34 	call	0x693a	; 0x693a <__usmulhisi3>
    3aca:	46 0e       	add	r4, r22
    3acc:	57 1e       	adc	r5, r23
    3ace:	68 1e       	adc	r6, r24
    3ad0:	79 1e       	adc	r7, r25
    3ad2:	a7 81       	ldd	r26, Z+7	; 0x07
    3ad4:	b0 e0       	ldi	r27, 0x00	; 0
    3ad6:	d0 97       	sbiw	r26, 0x30	; 48
    3ad8:	24 e6       	ldi	r18, 0x64	; 100
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	0e 94 9d 34 	call	0x693a	; 0x693a <__usmulhisi3>
    3ae0:	ab 01       	movw	r20, r22
    3ae2:	bc 01       	movw	r22, r24
    3ae4:	44 0d       	add	r20, r4
    3ae6:	55 1d       	adc	r21, r5
    3ae8:	66 1d       	adc	r22, r6
    3aea:	77 1d       	adc	r23, r7
    3aec:	90 85       	ldd	r25, Z+8	; 0x08
    3aee:	89 2f       	mov	r24, r25
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	c0 97       	sbiw	r24, 0x30	; 48
    3af4:	09 2e       	mov	r0, r25
    3af6:	00 0c       	add	r0, r0
    3af8:	aa 0b       	sbc	r26, r26
    3afa:	bb 0b       	sbc	r27, r27
    3afc:	88 0f       	add	r24, r24
    3afe:	99 1f       	adc	r25, r25
    3b00:	aa 1f       	adc	r26, r26
    3b02:	bb 1f       	adc	r27, r27
    3b04:	2c 01       	movw	r4, r24
    3b06:	3d 01       	movw	r6, r26
    3b08:	44 0c       	add	r4, r4
    3b0a:	55 1c       	adc	r5, r5
    3b0c:	66 1c       	adc	r6, r6
    3b0e:	77 1c       	adc	r7, r7
    3b10:	44 0c       	add	r4, r4
    3b12:	55 1c       	adc	r5, r5
    3b14:	66 1c       	adc	r6, r6
    3b16:	77 1c       	adc	r7, r7
    3b18:	84 0d       	add	r24, r4
    3b1a:	95 1d       	adc	r25, r5
    3b1c:	a6 1d       	adc	r26, r6
    3b1e:	b7 1d       	adc	r27, r7
    3b20:	84 0f       	add	r24, r20
    3b22:	95 1f       	adc	r25, r21
    3b24:	a6 1f       	adc	r26, r22
    3b26:	b7 1f       	adc	r27, r23
    3b28:	41 85       	ldd	r20, Z+9	; 0x09
    3b2a:	50 e0       	ldi	r21, 0x00	; 0
    3b2c:	40 53       	subi	r20, 0x30	; 48
    3b2e:	51 09       	sbc	r21, r1
    3b30:	05 2e       	mov	r0, r21
    3b32:	00 0c       	add	r0, r0
    3b34:	66 0b       	sbc	r22, r22
    3b36:	77 0b       	sbc	r23, r23
    3b38:	2c 01       	movw	r4, r24
    3b3a:	3d 01       	movw	r6, r26
    3b3c:	44 0e       	add	r4, r20
    3b3e:	55 1e       	adc	r5, r21
    3b40:	66 1e       	adc	r6, r22
    3b42:	77 1e       	adc	r7, r23
    3b44:	4b 8a       	std	Y+19, r4	; 0x13
    3b46:	5c 8a       	std	Y+20, r5	; 0x14
    3b48:	6d 8a       	std	Y+21, r6	; 0x15
    3b4a:	7e 8a       	std	Y+22, r7	; 0x16
										 + 1000l*(NMEA_sentence[a+7] - '0')
										  + 100l*(NMEA_sentence[a+8] - '0')
										   + 10l*(NMEA_sentence[a+9] - '0')
										       + (NMEA_sentence[a+10] - '0');
					//printf("%lu\n",GPSData.lonminutes);
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
    3b4c:	83 85       	ldd	r24, Z+11	; 0x0b
    3b4e:	85 34       	cpi	r24, 0x45	; 69
    3b50:	51 f0       	breq	.+20     	; 0x3b66 <getGPSDatafromNMEA+0x36c>
    3b52:	b1 2c       	mov	r11, r1
    3b54:	c1 2c       	mov	r12, r1
    3b56:	68 94       	set
    3b58:	ee 24       	eor	r14, r14
    3b5a:	e7 f8       	bld	r14, 7
    3b5c:	0f 2e       	mov	r0, r31
    3b5e:	ff eb       	ldi	r31, 0xBF	; 191
    3b60:	ff 2e       	mov	r15, r31
    3b62:	f0 2d       	mov	r31, r0
    3b64:	09 c0       	rjmp	.+18     	; 0x3b78 <getGPSDatafromNMEA+0x37e>
    3b66:	b1 2c       	mov	r11, r1
    3b68:	c1 2c       	mov	r12, r1
    3b6a:	68 94       	set
    3b6c:	ee 24       	eor	r14, r14
    3b6e:	e7 f8       	bld	r14, 7
    3b70:	0f 2e       	mov	r0, r31
    3b72:	ff e3       	ldi	r31, 0x3F	; 63
    3b74:	ff 2e       	mov	r15, r31
    3b76:	f0 2d       	mov	r31, r0
    3b78:	6b 89       	ldd	r22, Y+19	; 0x13
    3b7a:	7c 89       	ldd	r23, Y+20	; 0x14
    3b7c:	8d 89       	ldd	r24, Y+21	; 0x15
    3b7e:	9e 89       	ldd	r25, Y+22	; 0x16
    3b80:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__floatunsisf>
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	3c e7       	ldi	r19, 0x7C	; 124
    3b88:	42 e1       	ldi	r20, 0x12	; 18
    3b8a:	59 e4       	ldi	r21, 0x49	; 73
    3b8c:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
    3b90:	2b 01       	movw	r4, r22
    3b92:	3c 01       	movw	r6, r24
    3b94:	2f 89       	ldd	r18, Y+23	; 0x17
    3b96:	38 8d       	ldd	r19, Y+24	; 0x18
    3b98:	b9 01       	movw	r22, r18
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	90 e0       	ldi	r25, 0x00	; 0
    3b9e:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__floatunsisf>
    3ba2:	9b 01       	movw	r18, r22
    3ba4:	ac 01       	movw	r20, r24
    3ba6:	c3 01       	movw	r24, r6
    3ba8:	b2 01       	movw	r22, r4
    3baa:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    3bae:	2b 2d       	mov	r18, r11
    3bb0:	3c 2d       	mov	r19, r12
    3bb2:	4e 2d       	mov	r20, r14
    3bb4:	5f 2d       	mov	r21, r15
    3bb6:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    3bba:	69 8f       	std	Y+25, r22	; 0x19
    3bbc:	7a 8f       	std	Y+26, r23	; 0x1a
    3bbe:	8b 8f       	std	Y+27, r24	; 0x1b
    3bc0:	9c 8f       	std	Y+28, r25	; 0x1c
    3bc2:	81 c0       	rjmp	.+258    	; 0x3cc6 <getGPSDatafromNMEA+0x4cc>
				}
				else if(countcommas == 4)
				{
					GPSData.londecimal = 0.0;
				}
				else if (countcommas == 6)
    3bc4:	36 e0       	ldi	r19, 0x06	; 6
    3bc6:	d3 12       	cpse	r13, r19
    3bc8:	06 c0       	rjmp	.+12     	; 0x3bd6 <getGPSDatafromNMEA+0x3dc>
				{
					GPSData.fix_status = NMEA_sentence[a + 1] - '0';
    3bca:	a8 a1       	ldd	r26, Y+32	; 0x20
    3bcc:	b9 a1       	ldd	r27, Y+33	; 0x21
    3bce:	8c 91       	ld	r24, X
    3bd0:	80 53       	subi	r24, 0x30	; 48
    3bd2:	8d 8f       	std	Y+29, r24	; 0x1d
    3bd4:	78 c0       	rjmp	.+240    	; 0x3cc6 <getGPSDatafromNMEA+0x4cc>
				}
				else if (countcommas == 9)
    3bd6:	b9 e0       	ldi	r27, 0x09	; 9
    3bd8:	db 12       	cpse	r13, r27
    3bda:	75 c0       	rjmp	.+234    	; 0x3cc6 <getGPSDatafromNMEA+0x4cc>
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    3bdc:	e8 a1       	ldd	r30, Y+32	; 0x20
    3bde:	f9 a1       	ldd	r31, Y+33	; 0x21
    3be0:	c0 80       	ld	r12, Z
    3be2:	fc e2       	ldi	r31, 0x2C	; 44
    3be4:	cf 16       	cp	r12, r31
    3be6:	09 f4       	brne	.+2      	; 0x3bea <getGPSDatafromNMEA+0x3f0>
    3be8:	6a c0       	rjmp	.+212    	; 0x3cbe <getGPSDatafromNMEA+0x4c4>
    3bea:	b1 2c       	mov	r11, r1
    3bec:	1b 82       	std	Y+3, r1	; 0x03
    3bee:	1c 82       	std	Y+4, r1	; 0x04
    3bf0:	1d 82       	std	Y+5, r1	; 0x05
    3bf2:	1e 82       	std	Y+6, r1	; 0x06
    3bf4:	71 2c       	mov	r7, r1
    3bf6:	e9 80       	ldd	r14, Y+1	; 0x01
    3bf8:	fa 80       	ldd	r15, Y+2	; 0x02
    3bfa:	e0 0e       	add	r14, r16
    3bfc:	f1 1e       	adc	r15, r17
    3bfe:	0e 8f       	std	Y+30, r16	; 0x1e
    3c00:	1f 8f       	std	Y+31, r17	; 0x1f
    3c02:	1c 2d       	mov	r17, r12
    3c04:	7a a2       	std	Y+34, r7	; 0x22
					{
						if (NMEA_sentence[a + inc + 1] == '.')
    3c06:	1e 32       	cpi	r17, 0x2E	; 46
    3c08:	09 f4       	brne	.+2      	; 0x3c0c <getGPSDatafromNMEA+0x412>
    3c0a:	42 c0       	rjmp	.+132    	; 0x3c90 <getGPSDatafromNMEA+0x496>
						{
							period_reached = 1;
							period_counter = 1;
						}
						else if (!period_reached)
    3c0c:	5a a0       	ldd	r5, Y+34	; 0x22
    3c0e:	51 10       	cpse	r5, r1
    3c10:	1f c0       	rjmp	.+62     	; 0x3c50 <getGPSDatafromNMEA+0x456>
						{
							altitude *= 10;
    3c12:	20 e0       	ldi	r18, 0x00	; 0
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	40 e2       	ldi	r20, 0x20	; 32
    3c18:	51 e4       	ldi	r21, 0x41	; 65
    3c1a:	6b 81       	ldd	r22, Y+3	; 0x03
    3c1c:	7c 81       	ldd	r23, Y+4	; 0x04
    3c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c20:	9e 81       	ldd	r25, Y+6	; 0x06
    3c22:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    3c26:	2b 01       	movw	r4, r22
    3c28:	3c 01       	movw	r6, r24
							altitude += (float)(NMEA_sentence[a + inc + 1] - '0');
    3c2a:	61 2f       	mov	r22, r17
    3c2c:	70 e0       	ldi	r23, 0x00	; 0
    3c2e:	60 53       	subi	r22, 0x30	; 48
    3c30:	71 09       	sbc	r23, r1
    3c32:	07 2e       	mov	r0, r23
    3c34:	00 0c       	add	r0, r0
    3c36:	88 0b       	sbc	r24, r24
    3c38:	99 0b       	sbc	r25, r25
    3c3a:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
    3c3e:	a3 01       	movw	r20, r6
    3c40:	92 01       	movw	r18, r4
    3c42:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    3c46:	6b 83       	std	Y+3, r22	; 0x03
    3c48:	7c 83       	std	Y+4, r23	; 0x04
    3c4a:	8d 83       	std	Y+5, r24	; 0x05
    3c4c:	9e 83       	std	Y+6, r25	; 0x06
    3c4e:	22 c0       	rjmp	.+68     	; 0x3c94 <getGPSDatafromNMEA+0x49a>
    3c50:	c1 2e       	mov	r12, r17
    3c52:	0e 8d       	ldd	r16, Y+30	; 0x1e
    3c54:	1f 8d       	ldd	r17, Y+31	; 0x1f
						}
						else if (period_reached && period_counter == 1)
						{
							altitude += ((float)(NMEA_sentence[a + inc + 1] - '0')) / 10.0;
    3c56:	6c 2d       	mov	r22, r12
    3c58:	70 e0       	ldi	r23, 0x00	; 0
    3c5a:	60 53       	subi	r22, 0x30	; 48
    3c5c:	71 09       	sbc	r23, r1
    3c5e:	07 2e       	mov	r0, r23
    3c60:	00 0c       	add	r0, r0
    3c62:	88 0b       	sbc	r24, r24
    3c64:	99 0b       	sbc	r25, r25
    3c66:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
    3c6a:	20 e0       	ldi	r18, 0x00	; 0
    3c6c:	30 e0       	ldi	r19, 0x00	; 0
    3c6e:	40 e2       	ldi	r20, 0x20	; 32
    3c70:	51 e4       	ldi	r21, 0x41	; 65
    3c72:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
    3c76:	9b 01       	movw	r18, r22
    3c78:	ac 01       	movw	r20, r24
    3c7a:	6b 81       	ldd	r22, Y+3	; 0x03
    3c7c:	7c 81       	ldd	r23, Y+4	; 0x04
    3c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c80:	9e 81       	ldd	r25, Y+6	; 0x06
    3c82:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    3c86:	6b 83       	std	Y+3, r22	; 0x03
    3c88:	7c 83       	std	Y+4, r23	; 0x04
    3c8a:	8d 83       	std	Y+5, r24	; 0x05
    3c8c:	9e 83       	std	Y+6, r25	; 0x06
							break;
    3c8e:	1b c0       	rjmp	.+54     	; 0x3cc6 <getGPSDatafromNMEA+0x4cc>
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
					{
						if (NMEA_sentence[a + inc + 1] == '.')
						{
							period_reached = 1;
    3c90:	21 e0       	ldi	r18, 0x01	; 1
    3c92:	2a a3       	std	Y+34, r18	; 0x22
						{
							altitude += ((float)(NMEA_sentence[a + inc + 1] - '0')) / 10.0;
							break;
						}
						
						inc++;
    3c94:	b3 94       	inc	r11
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    3c96:	f7 01       	movw	r30, r14
    3c98:	eb 0d       	add	r30, r11
    3c9a:	f1 1d       	adc	r31, r1
    3c9c:	11 81       	ldd	r17, Z+1	; 0x01
    3c9e:	1c 32       	cpi	r17, 0x2C	; 44
    3ca0:	09 f0       	breq	.+2      	; 0x3ca4 <getGPSDatafromNMEA+0x4aa>
    3ca2:	b1 cf       	rjmp	.-158    	; 0x3c06 <getGPSDatafromNMEA+0x40c>
    3ca4:	0e 8d       	ldd	r16, Y+30	; 0x1e
    3ca6:	1f 8d       	ldd	r17, Y+31	; 0x1f
    3ca8:	0e c0       	rjmp	.+28     	; 0x3cc6 <getGPSDatafromNMEA+0x4cc>

					//printf("%f\n",GPSData.latdecimal);
				}
				else if (countcommas == 2)
				{
					GPSData.latdecimal = 0.0;
    3caa:	1f 86       	std	Y+15, r1	; 0x0f
    3cac:	18 8a       	std	Y+16, r1	; 0x10
    3cae:	19 8a       	std	Y+17, r1	; 0x11
    3cb0:	1a 8a       	std	Y+18, r1	; 0x12
    3cb2:	09 c0       	rjmp	.+18     	; 0x3cc6 <getGPSDatafromNMEA+0x4cc>
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
					//printf("%f\n",GPSData.londecimal);
				}
				else if(countcommas == 4)
				{
					GPSData.londecimal = 0.0;
    3cb4:	19 8e       	std	Y+25, r1	; 0x19
    3cb6:	1a 8e       	std	Y+26, r1	; 0x1a
    3cb8:	1b 8e       	std	Y+27, r1	; 0x1b
    3cba:	1c 8e       	std	Y+28, r1	; 0x1c
    3cbc:	04 c0       	rjmp	.+8      	; 0x3cc6 <getGPSDatafromNMEA+0x4cc>
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    3cbe:	1b 82       	std	Y+3, r1	; 0x03
    3cc0:	1c 82       	std	Y+4, r1	; 0x04
    3cc2:	1d 82       	std	Y+5, r1	; 0x05
    3cc4:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t comma_position=0;
	int a=0;
	if (startswith(NMEA_sentence, "$GPGGA"))
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    3cc6:	0f 5f       	subi	r16, 0xFF	; 255
    3cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cca:	02 15       	cp	r16, r2
    3ccc:	13 05       	cpc	r17, r3
    3cce:	09 f0       	breq	.+2      	; 0x3cd2 <getGPSDatafromNMEA+0x4d8>
    3cd0:	c4 cd       	rjmp	.-1144   	; 0x385a <getGPSDatafromNMEA+0x60>
	
	
	
//printf("GPSDATA altitude test %s \n ", GPSData.altitude);
//printf("GPS no of satellites test= %s \n", GPSData.noofsatellites);
return GPSData;
    3cd2:	4b 84       	ldd	r4, Y+11	; 0x0b
    3cd4:	5c 84       	ldd	r5, Y+12	; 0x0c
    3cd6:	d4 01       	movw	r26, r8
    3cd8:	4d 92       	st	X+, r4
    3cda:	5c 92       	st	X, r5
    3cdc:	11 97       	sbiw	r26, 0x01	; 1
    3cde:	4f 80       	ldd	r4, Y+7	; 0x07
    3ce0:	58 84       	ldd	r5, Y+8	; 0x08
    3ce2:	69 84       	ldd	r6, Y+9	; 0x09
    3ce4:	7a 84       	ldd	r7, Y+10	; 0x0a
    3ce6:	12 96       	adiw	r26, 0x02	; 2
    3ce8:	4d 92       	st	X+, r4
    3cea:	5d 92       	st	X+, r5
    3cec:	6d 92       	st	X+, r6
    3cee:	7c 92       	st	X, r7
    3cf0:	15 97       	sbiw	r26, 0x05	; 5
    3cf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cf4:	98 89       	ldd	r25, Y+16	; 0x10
    3cf6:	a9 89       	ldd	r26, Y+17	; 0x11
    3cf8:	ba 89       	ldd	r27, Y+18	; 0x12
    3cfa:	f4 01       	movw	r30, r8
    3cfc:	87 83       	std	Z+7, r24	; 0x07
    3cfe:	90 87       	std	Z+8, r25	; 0x08
    3d00:	a1 87       	std	Z+9, r26	; 0x09
    3d02:	b2 87       	std	Z+10, r27	; 0x0a
    3d04:	4f 88       	ldd	r4, Y+23	; 0x17
    3d06:	58 8c       	ldd	r5, Y+24	; 0x18
    3d08:	43 86       	std	Z+11, r4	; 0x0b
    3d0a:	54 86       	std	Z+12, r5	; 0x0c
    3d0c:	4b 88       	ldd	r4, Y+19	; 0x13
    3d0e:	5c 88       	ldd	r5, Y+20	; 0x14
    3d10:	6d 88       	ldd	r6, Y+21	; 0x15
    3d12:	7e 88       	ldd	r7, Y+22	; 0x16
    3d14:	45 86       	std	Z+13, r4	; 0x0d
    3d16:	56 86       	std	Z+14, r5	; 0x0e
    3d18:	67 86       	std	Z+15, r6	; 0x0f
    3d1a:	70 8a       	std	Z+16, r7	; 0x10
    3d1c:	89 8d       	ldd	r24, Y+25	; 0x19
    3d1e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d20:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3d22:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3d24:	82 8b       	std	Z+18, r24	; 0x12
    3d26:	93 8b       	std	Z+19, r25	; 0x13
    3d28:	a4 8b       	std	Z+20, r26	; 0x14
    3d2a:	b5 8b       	std	Z+21, r27	; 0x15
    3d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d30:	ad 81       	ldd	r26, Y+5	; 0x05
    3d32:	be 81       	ldd	r27, Y+6	; 0x06
    3d34:	86 8b       	std	Z+22, r24	; 0x16
    3d36:	97 8b       	std	Z+23, r25	; 0x17
    3d38:	a0 8f       	std	Z+24, r26	; 0x18
    3d3a:	b1 8f       	std	Z+25, r27	; 0x19
    3d3c:	4d 84       	ldd	r4, Y+13	; 0x0d
    3d3e:	42 8e       	std	Z+26, r4	; 0x1a
    3d40:	5e 84       	ldd	r5, Y+14	; 0x0e
    3d42:	53 8e       	std	Z+27, r5	; 0x1b
    3d44:	a4 8e       	std	Z+28, r10	; 0x1c
    3d46:	6d 8c       	ldd	r6, Y+29	; 0x1d
    3d48:	65 8e       	std	Z+29, r6	; 0x1d


}
    3d4a:	c4 01       	movw	r24, r8
    3d4c:	a2 96       	adiw	r28, 0x22	; 34
    3d4e:	cd bf       	out	0x3d, r28	; 61
    3d50:	de bf       	out	0x3e, r29	; 62
    3d52:	df 91       	pop	r29
    3d54:	cf 91       	pop	r28
    3d56:	1f 91       	pop	r17
    3d58:	0f 91       	pop	r16
    3d5a:	ff 90       	pop	r15
    3d5c:	ef 90       	pop	r14
    3d5e:	df 90       	pop	r13
    3d60:	cf 90       	pop	r12
    3d62:	bf 90       	pop	r11
    3d64:	af 90       	pop	r10
    3d66:	9f 90       	pop	r9
    3d68:	8f 90       	pop	r8
    3d6a:	7f 90       	pop	r7
    3d6c:	6f 90       	pop	r6
    3d6e:	5f 90       	pop	r5
    3d70:	4f 90       	pop	r4
    3d72:	3f 90       	pop	r3
    3d74:	2f 90       	pop	r2
    3d76:	08 95       	ret

00003d78 <__portable_avr_delay_cycles>:
	PORTB.OUT |= 0b00000001;
	
}
void buzzer_off(void){
	PORTB.DIR |= 0b00000001;  
	PORTB.OUT &= 0b11111110;
    3d78:	04 c0       	rjmp	.+8      	; 0x3d82 <__portable_avr_delay_cycles+0xa>
    3d7a:	61 50       	subi	r22, 0x01	; 1
    3d7c:	71 09       	sbc	r23, r1
    3d7e:	81 09       	sbc	r24, r1
    3d80:	91 09       	sbc	r25, r1
    3d82:	61 15       	cp	r22, r1
    3d84:	71 05       	cpc	r23, r1
    3d86:	81 05       	cpc	r24, r1
    3d88:	91 05       	cpc	r25, r1
    3d8a:	b9 f7       	brne	.-18     	; 0x3d7a <__portable_avr_delay_cycles+0x2>
    3d8c:	08 95       	ret

00003d8e <heatshield_solenoid>:
    3d8e:	cf 93       	push	r28
    3d90:	df 93       	push	r29
    3d92:	c0 e0       	ldi	r28, 0x00	; 0
    3d94:	d6 e0       	ldi	r29, 0x06	; 6
    3d96:	89 81       	ldd	r24, Y+1	; 0x01
    3d98:	80 68       	ori	r24, 0x80	; 128
    3d9a:	89 83       	std	Y+1, r24	; 0x01
    3d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d9e:	80 68       	ori	r24, 0x80	; 128
    3da0:	8d 83       	std	Y+5, r24	; 0x05
    3da2:	66 e5       	ldi	r22, 0x56	; 86
    3da4:	71 e6       	ldi	r23, 0x61	; 97
    3da6:	81 e5       	ldi	r24, 0x51	; 81
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	e6 df       	rcall	.-52     	; 0x3d78 <__portable_avr_delay_cycles>
    3dac:	8c 81       	ldd	r24, Y+4	; 0x04
    3dae:	8f 77       	andi	r24, 0x7F	; 127
    3db0:	8c 83       	std	Y+4, r24	; 0x04
    3db2:	df 91       	pop	r29
    3db4:	cf 91       	pop	r28
    3db6:	08 95       	ret

00003db8 <heatshield_hotwire>:
    3db8:	cf 93       	push	r28
    3dba:	df 93       	push	r29
    3dbc:	c0 e6       	ldi	r28, 0x60	; 96
    3dbe:	d6 e0       	ldi	r29, 0x06	; 6
    3dc0:	88 81       	ld	r24, Y
    3dc2:	82 60       	ori	r24, 0x02	; 2
    3dc4:	88 83       	st	Y, r24
    3dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc8:	82 60       	ori	r24, 0x02	; 2
    3dca:	8c 83       	std	Y+4, r24	; 0x04
    3dcc:	66 e5       	ldi	r22, 0x56	; 86
    3dce:	75 e8       	ldi	r23, 0x85	; 133
    3dd0:	85 e4       	ldi	r24, 0x45	; 69
    3dd2:	91 e0       	ldi	r25, 0x01	; 1
    3dd4:	d1 df       	rcall	.-94     	; 0x3d78 <__portable_avr_delay_cycles>
    3dd6:	8c 81       	ldd	r24, Y+4	; 0x04
    3dd8:	8d 7f       	andi	r24, 0xFD	; 253
    3dda:	8c 83       	std	Y+4, r24	; 0x04
    3ddc:	df 91       	pop	r29
    3dde:	cf 91       	pop	r28
    3de0:	08 95       	ret

00003de2 <heatshield_detatch_hotwire>:
    3de2:	cf 93       	push	r28
    3de4:	df 93       	push	r29
    3de6:	c0 e6       	ldi	r28, 0x60	; 96
    3de8:	d6 e0       	ldi	r29, 0x06	; 6
    3dea:	88 81       	ld	r24, Y
    3dec:	82 60       	ori	r24, 0x02	; 2
    3dee:	88 83       	st	Y, r24
    3df0:	8c 81       	ldd	r24, Y+4	; 0x04
    3df2:	82 60       	ori	r24, 0x02	; 2
    3df4:	8c 83       	std	Y+4, r24	; 0x04
    3df6:	66 e5       	ldi	r22, 0x56	; 86
    3df8:	75 e8       	ldi	r23, 0x85	; 133
    3dfa:	85 e4       	ldi	r24, 0x45	; 69
    3dfc:	91 e0       	ldi	r25, 0x01	; 1
    3dfe:	bc df       	rcall	.-136    	; 0x3d78 <__portable_avr_delay_cycles>
    3e00:	8c 81       	ldd	r24, Y+4	; 0x04
    3e02:	8d 7f       	andi	r24, 0xFD	; 253
    3e04:	8c 83       	std	Y+4, r24	; 0x04
    3e06:	df 91       	pop	r29
    3e08:	cf 91       	pop	r28
    3e0a:	08 95       	ret

00003e0c <buzzer_on>:
    3e0c:	e0 e2       	ldi	r30, 0x20	; 32
    3e0e:	f6 e0       	ldi	r31, 0x06	; 6
    3e10:	80 81       	ld	r24, Z
    3e12:	81 60       	ori	r24, 0x01	; 1
    3e14:	80 83       	st	Z, r24
    3e16:	84 81       	ldd	r24, Z+4	; 0x04
    3e18:	81 60       	ori	r24, 0x01	; 1
    3e1a:	84 83       	std	Z+4, r24	; 0x04
    3e1c:	08 95       	ret

00003e1e <camera_on>:
	
}
void camera_on(void){
	PORTE.DIR |= 0b01000000;
    3e1e:	e0 e8       	ldi	r30, 0x80	; 128
    3e20:	f6 e0       	ldi	r31, 0x06	; 6
    3e22:	80 81       	ld	r24, Z
    3e24:	80 64       	ori	r24, 0x40	; 64
    3e26:	80 83       	st	Z, r24
	PORTE.OUT |= 0b01000000;
    3e28:	84 81       	ldd	r24, Z+4	; 0x04
    3e2a:	80 64       	ori	r24, 0x40	; 64
    3e2c:	84 83       	std	Z+4, r24	; 0x04
    3e2e:	08 95       	ret

00003e30 <__portable_avr_delay_cycles>:
	}
	else
	{
		return 0;
	}
}
    3e30:	04 c0       	rjmp	.+8      	; 0x3e3a <__portable_avr_delay_cycles+0xa>
    3e32:	61 50       	subi	r22, 0x01	; 1
    3e34:	71 09       	sbc	r23, r1
    3e36:	81 09       	sbc	r24, r1
    3e38:	91 09       	sbc	r25, r1
    3e3a:	61 15       	cp	r22, r1
    3e3c:	71 05       	cpc	r23, r1
    3e3e:	81 05       	cpc	r24, r1
    3e40:	91 05       	cpc	r25, r1
    3e42:	b9 f7       	brne	.-18     	; 0x3e32 <__portable_avr_delay_cycles+0x2>
    3e44:	08 95       	ret

00003e46 <mpu9250_twi_write_reg>:
    3e46:	dc 01       	movw	r26, r24
    3e48:	cb 01       	movw	r24, r22
    3e4a:	e7 e2       	ldi	r30, 0x27	; 39
    3e4c:	f0 e2       	ldi	r31, 0x20	; 32
    3e4e:	38 e6       	ldi	r19, 0x68	; 104
    3e50:	30 83       	st	Z, r19
    3e52:	41 83       	std	Z+1, r20	; 0x01
    3e54:	41 e0       	ldi	r20, 0x01	; 1
    3e56:	50 e0       	ldi	r21, 0x00	; 0
    3e58:	40 87       	std	Z+8, r20	; 0x08
    3e5a:	51 87       	std	Z+9, r21	; 0x09
    3e5c:	20 93 dd 20 	sts	0x20DD, r18	; 0x8020dd <mpu9250_twi_data>
    3e60:	40 e0       	ldi	r20, 0x00	; 0
    3e62:	bf 01       	movw	r22, r30
    3e64:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <twi_master_transfer>
    3e68:	08 95       	ret

00003e6a <mpu9250_twi_read_multi>:
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	cb 01       	movw	r24, r22
    3e6e:	e7 e2       	ldi	r30, 0x27	; 39
    3e70:	f0 e2       	ldi	r31, 0x20	; 32
    3e72:	38 e6       	ldi	r19, 0x68	; 104
    3e74:	30 83       	st	Z, r19
    3e76:	41 83       	std	Z+1, r20	; 0x01
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	20 87       	std	Z+8, r18	; 0x08
    3e7c:	31 87       	std	Z+9, r19	; 0x09
    3e7e:	41 e0       	ldi	r20, 0x01	; 1
    3e80:	bf 01       	movw	r22, r30
    3e82:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <twi_master_transfer>
    3e86:	08 95       	ret

00003e88 <mpu9250_ODR_init>:
    3e88:	cf 92       	push	r12
    3e8a:	df 92       	push	r13
    3e8c:	ef 92       	push	r14
    3e8e:	ff 92       	push	r15
    3e90:	6b 01       	movw	r12, r22
    3e92:	7c 01       	movw	r14, r24
    3e94:	64 2f       	mov	r22, r20
    3e96:	70 e0       	ldi	r23, 0x00	; 0
    3e98:	88 ee       	ldi	r24, 0xE8	; 232
    3e9a:	93 e0       	ldi	r25, 0x03	; 3
    3e9c:	0e 94 33 34 	call	0x6866	; 0x6866 <__udivmodhi4>
    3ea0:	2f ef       	ldi	r18, 0xFF	; 255
    3ea2:	26 0f       	add	r18, r22
    3ea4:	49 e1       	ldi	r20, 0x19	; 25
    3ea6:	c7 01       	movw	r24, r14
    3ea8:	b6 01       	movw	r22, r12
    3eaa:	cd df       	rcall	.-102    	; 0x3e46 <mpu9250_twi_write_reg>
    3eac:	ff 90       	pop	r15
    3eae:	ef 90       	pop	r14
    3eb0:	df 90       	pop	r13
    3eb2:	cf 90       	pop	r12
    3eb4:	08 95       	ret

00003eb6 <mpu9250_gyro_init>:
    3eb6:	cf 92       	push	r12
    3eb8:	df 92       	push	r13
    3eba:	ef 92       	push	r14
    3ebc:	ff 92       	push	r15
    3ebe:	6b 01       	movw	r12, r22
    3ec0:	7c 01       	movw	r14, r24
    3ec2:	22 e0       	ldi	r18, 0x02	; 2
    3ec4:	4a e1       	ldi	r20, 0x1A	; 26
    3ec6:	bf df       	rcall	.-130    	; 0x3e46 <mpu9250_twi_write_reg>
    3ec8:	28 e1       	ldi	r18, 0x18	; 24
    3eca:	4b e1       	ldi	r20, 0x1B	; 27
    3ecc:	c7 01       	movw	r24, r14
    3ece:	b6 01       	movw	r22, r12
    3ed0:	ba df       	rcall	.-140    	; 0x3e46 <mpu9250_twi_write_reg>
    3ed2:	85 e8       	ldi	r24, 0x85	; 133
    3ed4:	9b ee       	ldi	r25, 0xEB	; 235
    3ed6:	a1 ed       	ldi	r26, 0xD1	; 209
    3ed8:	bf e3       	ldi	r27, 0x3F	; 63
    3eda:	80 93 c7 20 	sts	0x20C7, r24	; 0x8020c7 <GYRO_SENSITIVITY>
    3ede:	90 93 c8 20 	sts	0x20C8, r25	; 0x8020c8 <GYRO_SENSITIVITY+0x1>
    3ee2:	a0 93 c9 20 	sts	0x20C9, r26	; 0x8020c9 <GYRO_SENSITIVITY+0x2>
    3ee6:	b0 93 ca 20 	sts	0x20CA, r27	; 0x8020ca <GYRO_SENSITIVITY+0x3>
    3eea:	ff 90       	pop	r15
    3eec:	ef 90       	pop	r14
    3eee:	df 90       	pop	r13
    3ef0:	cf 90       	pop	r12
    3ef2:	08 95       	ret

00003ef4 <mpu9250_acc_init>:
    3ef4:	cf 92       	push	r12
    3ef6:	df 92       	push	r13
    3ef8:	ef 92       	push	r14
    3efa:	ff 92       	push	r15
    3efc:	6b 01       	movw	r12, r22
    3efe:	7c 01       	movw	r14, r24
    3f00:	28 e1       	ldi	r18, 0x18	; 24
    3f02:	4c e1       	ldi	r20, 0x1C	; 28
    3f04:	a0 df       	rcall	.-192    	; 0x3e46 <mpu9250_twi_write_reg>
    3f06:	22 e0       	ldi	r18, 0x02	; 2
    3f08:	4d e1       	ldi	r20, 0x1D	; 29
    3f0a:	c7 01       	movw	r24, r14
    3f0c:	b6 01       	movw	r22, r12
    3f0e:	9b df       	rcall	.-202    	; 0x3e46 <mpu9250_twi_write_reg>
    3f10:	80 e0       	ldi	r24, 0x00	; 0
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	a0 e0       	ldi	r26, 0x00	; 0
    3f16:	b0 e4       	ldi	r27, 0x40	; 64
    3f18:	80 93 c3 20 	sts	0x20C3, r24	; 0x8020c3 <ACC_SENSITIVITY>
    3f1c:	90 93 c4 20 	sts	0x20C4, r25	; 0x8020c4 <ACC_SENSITIVITY+0x1>
    3f20:	a0 93 c5 20 	sts	0x20C5, r26	; 0x8020c5 <ACC_SENSITIVITY+0x2>
    3f24:	b0 93 c6 20 	sts	0x20C6, r27	; 0x8020c6 <ACC_SENSITIVITY+0x3>
    3f28:	ff 90       	pop	r15
    3f2a:	ef 90       	pop	r14
    3f2c:	df 90       	pop	r13
    3f2e:	cf 90       	pop	r12
    3f30:	08 95       	ret

00003f32 <mpu9250_mag_cal>:
    3f32:	cf 92       	push	r12
    3f34:	df 92       	push	r13
    3f36:	ef 92       	push	r14
    3f38:	ff 92       	push	r15
    3f3a:	cf 93       	push	r28
    3f3c:	df 93       	push	r29
    3f3e:	6b 01       	movw	r12, r22
    3f40:	7c 01       	movw	r14, r24
    3f42:	2c e0       	ldi	r18, 0x0C	; 12
    3f44:	45 e2       	ldi	r20, 0x25	; 37
    3f46:	7f df       	rcall	.-258    	; 0x3e46 <mpu9250_twi_write_reg>
    3f48:	2a e0       	ldi	r18, 0x0A	; 10
    3f4a:	46 e2       	ldi	r20, 0x26	; 38
    3f4c:	c7 01       	movw	r24, r14
    3f4e:	b6 01       	movw	r22, r12
    3f50:	7a df       	rcall	.-268    	; 0x3e46 <mpu9250_twi_write_reg>
    3f52:	2f e1       	ldi	r18, 0x1F	; 31
    3f54:	43 e6       	ldi	r20, 0x63	; 99
    3f56:	c7 01       	movw	r24, r14
    3f58:	b6 01       	movw	r22, r12
    3f5a:	75 df       	rcall	.-278    	; 0x3e46 <mpu9250_twi_write_reg>
    3f5c:	21 e8       	ldi	r18, 0x81	; 129
    3f5e:	47 e2       	ldi	r20, 0x27	; 39
    3f60:	c7 01       	movw	r24, r14
    3f62:	b6 01       	movw	r22, r12
    3f64:	70 df       	rcall	.-288    	; 0x3e46 <mpu9250_twi_write_reg>
    3f66:	6b ea       	ldi	r22, 0xAB	; 171
    3f68:	70 ea       	ldi	r23, 0xA0	; 160
    3f6a:	81 e0       	ldi	r24, 0x01	; 1
    3f6c:	90 e0       	ldi	r25, 0x00	; 0
    3f6e:	60 df       	rcall	.-320    	; 0x3e30 <__portable_avr_delay_cycles>
    3f70:	2c e8       	ldi	r18, 0x8C	; 140
    3f72:	45 e2       	ldi	r20, 0x25	; 37
    3f74:	c7 01       	movw	r24, r14
    3f76:	b6 01       	movw	r22, r12
    3f78:	66 df       	rcall	.-308    	; 0x3e46 <mpu9250_twi_write_reg>
    3f7a:	20 e1       	ldi	r18, 0x10	; 16
    3f7c:	46 e2       	ldi	r20, 0x26	; 38
    3f7e:	c7 01       	movw	r24, r14
    3f80:	b6 01       	movw	r22, r12
    3f82:	61 df       	rcall	.-318    	; 0x3e46 <mpu9250_twi_write_reg>
    3f84:	23 e8       	ldi	r18, 0x83	; 131
    3f86:	47 e2       	ldi	r20, 0x27	; 39
    3f88:	c7 01       	movw	r24, r14
    3f8a:	b6 01       	movw	r22, r12
    3f8c:	5c df       	rcall	.-328    	; 0x3e46 <mpu9250_twi_write_reg>
    3f8e:	6b ea       	ldi	r22, 0xAB	; 171
    3f90:	70 ea       	ldi	r23, 0xA0	; 160
    3f92:	81 e0       	ldi	r24, 0x01	; 1
    3f94:	90 e0       	ldi	r25, 0x00	; 0
    3f96:	4c df       	rcall	.-360    	; 0x3e30 <__portable_avr_delay_cycles>
    3f98:	24 e0       	ldi	r18, 0x04	; 4
    3f9a:	49 e4       	ldi	r20, 0x49	; 73
    3f9c:	c7 01       	movw	r24, r14
    3f9e:	b6 01       	movw	r22, r12
    3fa0:	64 df       	rcall	.-312    	; 0x3e6a <mpu9250_twi_read_multi>
    3fa2:	cd ed       	ldi	r28, 0xDD	; 221
    3fa4:	d0 e2       	ldi	r29, 0x20	; 32
    3fa6:	68 81       	ld	r22, Y
    3fa8:	70 e0       	ldi	r23, 0x00	; 0
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	90 e0       	ldi	r25, 0x00	; 0
    3fae:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__floatunsisf>
    3fb2:	20 e0       	ldi	r18, 0x00	; 0
    3fb4:	30 e0       	ldi	r19, 0x00	; 0
    3fb6:	40 e0       	ldi	r20, 0x00	; 0
    3fb8:	53 e4       	ldi	r21, 0x43	; 67
    3fba:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    3fbe:	20 e0       	ldi	r18, 0x00	; 0
    3fc0:	30 e0       	ldi	r19, 0x00	; 0
    3fc2:	40 e8       	ldi	r20, 0x80	; 128
    3fc4:	5b e3       	ldi	r21, 0x3B	; 59
    3fc6:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    3fca:	20 e0       	ldi	r18, 0x00	; 0
    3fcc:	30 e0       	ldi	r19, 0x00	; 0
    3fce:	40 e8       	ldi	r20, 0x80	; 128
    3fd0:	5f e3       	ldi	r21, 0x3F	; 63
    3fd2:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    3fd6:	60 93 d3 20 	sts	0x20D3, r22	; 0x8020d3 <ASAX>
    3fda:	70 93 d4 20 	sts	0x20D4, r23	; 0x8020d4 <ASAX+0x1>
    3fde:	80 93 d5 20 	sts	0x20D5, r24	; 0x8020d5 <ASAX+0x2>
    3fe2:	90 93 d6 20 	sts	0x20D6, r25	; 0x8020d6 <ASAX+0x3>
    3fe6:	69 81       	ldd	r22, Y+1	; 0x01
    3fe8:	70 e0       	ldi	r23, 0x00	; 0
    3fea:	80 e0       	ldi	r24, 0x00	; 0
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__floatunsisf>
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	40 e0       	ldi	r20, 0x00	; 0
    3ff8:	53 e4       	ldi	r21, 0x43	; 67
    3ffa:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    3ffe:	20 e0       	ldi	r18, 0x00	; 0
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	40 e8       	ldi	r20, 0x80	; 128
    4004:	5b e3       	ldi	r21, 0x3B	; 59
    4006:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	40 e8       	ldi	r20, 0x80	; 128
    4010:	5f e3       	ldi	r21, 0x3F	; 63
    4012:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    4016:	60 93 cf 20 	sts	0x20CF, r22	; 0x8020cf <ASAY>
    401a:	70 93 d0 20 	sts	0x20D0, r23	; 0x8020d0 <ASAY+0x1>
    401e:	80 93 d1 20 	sts	0x20D1, r24	; 0x8020d1 <ASAY+0x2>
    4022:	90 93 d2 20 	sts	0x20D2, r25	; 0x8020d2 <ASAY+0x3>
    4026:	6a 81       	ldd	r22, Y+2	; 0x02
    4028:	70 e0       	ldi	r23, 0x00	; 0
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <__floatunsisf>
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	40 e0       	ldi	r20, 0x00	; 0
    4038:	53 e4       	ldi	r21, 0x43	; 67
    403a:	0e 94 ad 2d 	call	0x5b5a	; 0x5b5a <__subsf3>
    403e:	20 e0       	ldi	r18, 0x00	; 0
    4040:	30 e0       	ldi	r19, 0x00	; 0
    4042:	40 e8       	ldi	r20, 0x80	; 128
    4044:	5b e3       	ldi	r21, 0x3B	; 59
    4046:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    404a:	20 e0       	ldi	r18, 0x00	; 0
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	40 e8       	ldi	r20, 0x80	; 128
    4050:	5f e3       	ldi	r21, 0x3F	; 63
    4052:	0e 94 ae 2d 	call	0x5b5c	; 0x5b5c <__addsf3>
    4056:	60 93 cb 20 	sts	0x20CB, r22	; 0x8020cb <ASAZ>
    405a:	70 93 cc 20 	sts	0x20CC, r23	; 0x8020cc <ASAZ+0x1>
    405e:	80 93 cd 20 	sts	0x20CD, r24	; 0x8020cd <ASAZ+0x2>
    4062:	90 93 ce 20 	sts	0x20CE, r25	; 0x8020ce <ASAZ+0x3>
    4066:	2c e0       	ldi	r18, 0x0C	; 12
    4068:	45 e2       	ldi	r20, 0x25	; 37
    406a:	c7 01       	movw	r24, r14
    406c:	b6 01       	movw	r22, r12
    406e:	eb de       	rcall	.-554    	; 0x3e46 <mpu9250_twi_write_reg>
    4070:	2a e0       	ldi	r18, 0x0A	; 10
    4072:	46 e2       	ldi	r20, 0x26	; 38
    4074:	c7 01       	movw	r24, r14
    4076:	b6 01       	movw	r22, r12
    4078:	e6 de       	rcall	.-564    	; 0x3e46 <mpu9250_twi_write_reg>
    407a:	20 e1       	ldi	r18, 0x10	; 16
    407c:	43 e6       	ldi	r20, 0x63	; 99
    407e:	c7 01       	movw	r24, r14
    4080:	b6 01       	movw	r22, r12
    4082:	e1 de       	rcall	.-574    	; 0x3e46 <mpu9250_twi_write_reg>
    4084:	21 e8       	ldi	r18, 0x81	; 129
    4086:	47 e2       	ldi	r20, 0x27	; 39
    4088:	c7 01       	movw	r24, r14
    408a:	b6 01       	movw	r22, r12
    408c:	dc de       	rcall	.-584    	; 0x3e46 <mpu9250_twi_write_reg>
    408e:	6b ea       	ldi	r22, 0xAB	; 171
    4090:	70 ea       	ldi	r23, 0xA0	; 160
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	cc de       	rcall	.-616    	; 0x3e30 <__portable_avr_delay_cycles>
    4098:	df 91       	pop	r29
    409a:	cf 91       	pop	r28
    409c:	ff 90       	pop	r15
    409e:	ef 90       	pop	r14
    40a0:	df 90       	pop	r13
    40a2:	cf 90       	pop	r12
    40a4:	08 95       	ret

000040a6 <mpu9250_mag_init>:
    40a6:	cf 92       	push	r12
    40a8:	df 92       	push	r13
    40aa:	ef 92       	push	r14
    40ac:	ff 92       	push	r15
    40ae:	6b 01       	movw	r12, r22
    40b0:	7c 01       	movw	r14, r24
    40b2:	2d ec       	ldi	r18, 0xCD	; 205
    40b4:	44 e2       	ldi	r20, 0x24	; 36
    40b6:	c7 de       	rcall	.-626    	; 0x3e46 <mpu9250_twi_write_reg>
    40b8:	21 e8       	ldi	r18, 0x81	; 129
    40ba:	47 e6       	ldi	r20, 0x67	; 103
    40bc:	c7 01       	movw	r24, r14
    40be:	b6 01       	movw	r22, r12
    40c0:	c2 de       	rcall	.-636    	; 0x3e46 <mpu9250_twi_write_reg>
    40c2:	20 e2       	ldi	r18, 0x20	; 32
    40c4:	4a e6       	ldi	r20, 0x6A	; 106
    40c6:	c7 01       	movw	r24, r14
    40c8:	b6 01       	movw	r22, r12
    40ca:	bd de       	rcall	.-646    	; 0x3e46 <mpu9250_twi_write_reg>
    40cc:	2c e0       	ldi	r18, 0x0C	; 12
    40ce:	45 e2       	ldi	r20, 0x25	; 37
    40d0:	c7 01       	movw	r24, r14
    40d2:	b6 01       	movw	r22, r12
    40d4:	b8 de       	rcall	.-656    	; 0x3e46 <mpu9250_twi_write_reg>
    40d6:	2b e0       	ldi	r18, 0x0B	; 11
    40d8:	46 e2       	ldi	r20, 0x26	; 38
    40da:	c7 01       	movw	r24, r14
    40dc:	b6 01       	movw	r22, r12
    40de:	b3 de       	rcall	.-666    	; 0x3e46 <mpu9250_twi_write_reg>
    40e0:	21 e0       	ldi	r18, 0x01	; 1
    40e2:	43 e6       	ldi	r20, 0x63	; 99
    40e4:	c7 01       	movw	r24, r14
    40e6:	b6 01       	movw	r22, r12
    40e8:	ae de       	rcall	.-676    	; 0x3e46 <mpu9250_twi_write_reg>
    40ea:	21 e8       	ldi	r18, 0x81	; 129
    40ec:	47 e2       	ldi	r20, 0x27	; 39
    40ee:	c7 01       	movw	r24, r14
    40f0:	b6 01       	movw	r22, r12
    40f2:	a9 de       	rcall	.-686    	; 0x3e46 <mpu9250_twi_write_reg>
    40f4:	66 e5       	ldi	r22, 0x56	; 86
    40f6:	70 ed       	ldi	r23, 0xD0	; 208
    40f8:	80 e0       	ldi	r24, 0x00	; 0
    40fa:	90 e0       	ldi	r25, 0x00	; 0
    40fc:	99 de       	rcall	.-718    	; 0x3e30 <__portable_avr_delay_cycles>
    40fe:	c7 01       	movw	r24, r14
    4100:	b6 01       	movw	r22, r12
    4102:	17 df       	rcall	.-466    	; 0x3f32 <mpu9250_mag_cal>
    4104:	2a e0       	ldi	r18, 0x0A	; 10
    4106:	46 e2       	ldi	r20, 0x26	; 38
    4108:	c7 01       	movw	r24, r14
    410a:	b6 01       	movw	r22, r12
    410c:	9c de       	rcall	.-712    	; 0x3e46 <mpu9250_twi_write_reg>
    410e:	26 e1       	ldi	r18, 0x16	; 22
    4110:	43 e6       	ldi	r20, 0x63	; 99
    4112:	c7 01       	movw	r24, r14
    4114:	b6 01       	movw	r22, r12
    4116:	97 de       	rcall	.-722    	; 0x3e46 <mpu9250_twi_write_reg>
    4118:	21 e8       	ldi	r18, 0x81	; 129
    411a:	47 e2       	ldi	r20, 0x27	; 39
    411c:	c7 01       	movw	r24, r14
    411e:	b6 01       	movw	r22, r12
    4120:	92 de       	rcall	.-732    	; 0x3e46 <mpu9250_twi_write_reg>
    4122:	66 e5       	ldi	r22, 0x56	; 86
    4124:	70 ed       	ldi	r23, 0xD0	; 208
    4126:	80 e0       	ldi	r24, 0x00	; 0
    4128:	90 e0       	ldi	r25, 0x00	; 0
    412a:	82 de       	rcall	.-764    	; 0x3e30 <__portable_avr_delay_cycles>
    412c:	2c e8       	ldi	r18, 0x8C	; 140
    412e:	45 e2       	ldi	r20, 0x25	; 37
    4130:	c7 01       	movw	r24, r14
    4132:	b6 01       	movw	r22, r12
    4134:	88 de       	rcall	.-752    	; 0x3e46 <mpu9250_twi_write_reg>
    4136:	23 e0       	ldi	r18, 0x03	; 3
    4138:	46 e2       	ldi	r20, 0x26	; 38
    413a:	c7 01       	movw	r24, r14
    413c:	b6 01       	movw	r22, r12
    413e:	83 de       	rcall	.-762    	; 0x3e46 <mpu9250_twi_write_reg>
    4140:	27 e8       	ldi	r18, 0x87	; 135
    4142:	47 e2       	ldi	r20, 0x27	; 39
    4144:	c7 01       	movw	r24, r14
    4146:	b6 01       	movw	r22, r12
    4148:	7e de       	rcall	.-772    	; 0x3e46 <mpu9250_twi_write_reg>
    414a:	ff 90       	pop	r15
    414c:	ef 90       	pop	r14
    414e:	df 90       	pop	r13
    4150:	cf 90       	pop	r12
    4152:	08 95       	ret

00004154 <mpu9250_int_init>:
    4154:	cf 92       	push	r12
    4156:	df 92       	push	r13
    4158:	ef 92       	push	r14
    415a:	ff 92       	push	r15
    415c:	6b 01       	movw	r12, r22
    415e:	7c 01       	movw	r14, r24
    4160:	20 e1       	ldi	r18, 0x10	; 16
    4162:	47 e3       	ldi	r20, 0x37	; 55
    4164:	70 de       	rcall	.-800    	; 0x3e46 <mpu9250_twi_write_reg>
    4166:	21 e0       	ldi	r18, 0x01	; 1
    4168:	48 e3       	ldi	r20, 0x38	; 56
    416a:	c7 01       	movw	r24, r14
    416c:	b6 01       	movw	r22, r12
    416e:	6b de       	rcall	.-810    	; 0x3e46 <mpu9250_twi_write_reg>
    4170:	e0 e4       	ldi	r30, 0x40	; 64
    4172:	f6 e0       	ldi	r31, 0x06	; 6
    4174:	84 e0       	ldi	r24, 0x04	; 4
    4176:	82 87       	std	Z+10, r24	; 0x0a
    4178:	83 e0       	ldi	r24, 0x03	; 3
    417a:	81 87       	std	Z+9, r24	; 0x09
    417c:	ff 90       	pop	r15
    417e:	ef 90       	pop	r14
    4180:	df 90       	pop	r13
    4182:	cf 90       	pop	r12
    4184:	08 95       	ret

00004186 <init_mpu9250>:
    4186:	cf 92       	push	r12
    4188:	df 92       	push	r13
    418a:	ef 92       	push	r14
    418c:	ff 92       	push	r15
    418e:	cf 93       	push	r28
    4190:	6b 01       	movw	r12, r22
    4192:	7c 01       	movw	r14, r24
    4194:	c4 2f       	mov	r28, r20
    4196:	20 e8       	ldi	r18, 0x80	; 128
    4198:	4b e6       	ldi	r20, 0x6B	; 107
    419a:	55 de       	rcall	.-854    	; 0x3e46 <mpu9250_twi_write_reg>
    419c:	66 e5       	ldi	r22, 0x56	; 86
    419e:	73 e2       	ldi	r23, 0x23	; 35
    41a0:	88 e0       	ldi	r24, 0x08	; 8
    41a2:	90 e0       	ldi	r25, 0x00	; 0
    41a4:	45 de       	rcall	.-886    	; 0x3e30 <__portable_avr_delay_cycles>
    41a6:	21 e0       	ldi	r18, 0x01	; 1
    41a8:	4b e6       	ldi	r20, 0x6B	; 107
    41aa:	c7 01       	movw	r24, r14
    41ac:	b6 01       	movw	r22, r12
    41ae:	4b de       	rcall	.-874    	; 0x3e46 <mpu9250_twi_write_reg>
    41b0:	20 e0       	ldi	r18, 0x00	; 0
    41b2:	4c e6       	ldi	r20, 0x6C	; 108
    41b4:	c7 01       	movw	r24, r14
    41b6:	b6 01       	movw	r22, r12
    41b8:	46 de       	rcall	.-884    	; 0x3e46 <mpu9250_twi_write_reg>
    41ba:	c7 01       	movw	r24, r14
    41bc:	b6 01       	movw	r22, r12
    41be:	7b de       	rcall	.-778    	; 0x3eb6 <mpu9250_gyro_init>
    41c0:	c7 01       	movw	r24, r14
    41c2:	b6 01       	movw	r22, r12
    41c4:	97 de       	rcall	.-722    	; 0x3ef4 <mpu9250_acc_init>
    41c6:	4c 2f       	mov	r20, r28
    41c8:	c7 01       	movw	r24, r14
    41ca:	b6 01       	movw	r22, r12
    41cc:	5d de       	rcall	.-838    	; 0x3e88 <mpu9250_ODR_init>
    41ce:	c7 01       	movw	r24, r14
    41d0:	b6 01       	movw	r22, r12
    41d2:	c0 df       	rcall	.-128    	; 0x4154 <mpu9250_int_init>
    41d4:	c7 01       	movw	r24, r14
    41d6:	b6 01       	movw	r22, r12
    41d8:	66 df       	rcall	.-308    	; 0x40a6 <mpu9250_mag_init>
    41da:	e0 e4       	ldi	r30, 0x40	; 64
    41dc:	f6 e0       	ldi	r31, 0x06	; 6
    41de:	81 e1       	ldi	r24, 0x11	; 17
    41e0:	82 8b       	std	Z+18, r24	; 0x12
    41e2:	84 e0       	ldi	r24, 0x04	; 4
    41e4:	82 87       	std	Z+10, r24	; 0x0a
    41e6:	83 e0       	ldi	r24, 0x03	; 3
    41e8:	81 87       	std	Z+9, r24	; 0x09
    41ea:	cf 91       	pop	r28
    41ec:	ff 90       	pop	r15
    41ee:	ef 90       	pop	r14
    41f0:	df 90       	pop	r13
    41f2:	cf 90       	pop	r12
    41f4:	08 95       	ret

000041f6 <read_mpu9250>:
    41f6:	4f 92       	push	r4
    41f8:	5f 92       	push	r5
    41fa:	6f 92       	push	r6
    41fc:	7f 92       	push	r7
    41fe:	8f 92       	push	r8
    4200:	9f 92       	push	r9
    4202:	af 92       	push	r10
    4204:	bf 92       	push	r11
    4206:	cf 92       	push	r12
    4208:	df 92       	push	r13
    420a:	ef 92       	push	r14
    420c:	ff 92       	push	r15
    420e:	0f 93       	push	r16
    4210:	1f 93       	push	r17
    4212:	cf 93       	push	r28
    4214:	df 93       	push	r29
    4216:	cd b7       	in	r28, 0x3d	; 61
    4218:	de b7       	in	r29, 0x3e	; 62
    421a:	68 97       	sbiw	r28, 0x18	; 24
    421c:	cd bf       	out	0x3d, r28	; 61
    421e:	de bf       	out	0x3e, r29	; 62
    4220:	8c 01       	movw	r16, r24
    4222:	6a 01       	movw	r12, r20
    4224:	7b 01       	movw	r14, r22
    4226:	22 e0       	ldi	r18, 0x02	; 2
    4228:	4a e3       	ldi	r20, 0x3A	; 58
    422a:	c7 01       	movw	r24, r14
    422c:	b6 01       	movw	r22, r12
    422e:	1d de       	rcall	.-966    	; 0x3e6a <mpu9250_twi_read_multi>
    4230:	26 e1       	ldi	r18, 0x16	; 22
    4232:	4a e3       	ldi	r20, 0x3A	; 58
    4234:	c7 01       	movw	r24, r14
    4236:	b6 01       	movw	r22, r12
    4238:	18 de       	rcall	.-976    	; 0x3e6a <mpu9250_twi_read_multi>
    423a:	c0 90 c3 20 	lds	r12, 0x20C3	; 0x8020c3 <ACC_SENSITIVITY>
    423e:	d0 90 c4 20 	lds	r13, 0x20C4	; 0x8020c4 <ACC_SENSITIVITY+0x1>
    4242:	e0 90 c5 20 	lds	r14, 0x20C5	; 0x8020c5 <ACC_SENSITIVITY+0x2>
    4246:	f0 90 c6 20 	lds	r15, 0x20C6	; 0x8020c6 <ACC_SENSITIVITY+0x3>
    424a:	60 91 de 20 	lds	r22, 0x20DE	; 0x8020de <mpu9250_twi_data+0x1>
    424e:	70 e0       	ldi	r23, 0x00	; 0
    4250:	76 2f       	mov	r23, r22
    4252:	66 27       	eor	r22, r22
    4254:	80 91 df 20 	lds	r24, 0x20DF	; 0x8020df <mpu9250_twi_data+0x2>
    4258:	68 0f       	add	r22, r24
    425a:	71 1d       	adc	r23, r1
    425c:	07 2e       	mov	r0, r23
    425e:	00 0c       	add	r0, r0
    4260:	88 0b       	sbc	r24, r24
    4262:	99 0b       	sbc	r25, r25
    4264:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
    4268:	a7 01       	movw	r20, r14
    426a:	96 01       	movw	r18, r12
    426c:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
    4270:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__fixsfsi>
    4274:	69 83       	std	Y+1, r22	; 0x01
    4276:	7a 83       	std	Y+2, r23	; 0x02
    4278:	8b 83       	std	Y+3, r24	; 0x03
    427a:	9c 83       	std	Y+4, r25	; 0x04
    427c:	c0 90 c3 20 	lds	r12, 0x20C3	; 0x8020c3 <ACC_SENSITIVITY>
    4280:	d0 90 c4 20 	lds	r13, 0x20C4	; 0x8020c4 <ACC_SENSITIVITY+0x1>
    4284:	e0 90 c5 20 	lds	r14, 0x20C5	; 0x8020c5 <ACC_SENSITIVITY+0x2>
    4288:	f0 90 c6 20 	lds	r15, 0x20C6	; 0x8020c6 <ACC_SENSITIVITY+0x3>
    428c:	60 91 e0 20 	lds	r22, 0x20E0	; 0x8020e0 <mpu9250_twi_data+0x3>
    4290:	70 e0       	ldi	r23, 0x00	; 0
    4292:	76 2f       	mov	r23, r22
    4294:	66 27       	eor	r22, r22
    4296:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <mpu9250_twi_data+0x4>
    429a:	68 0f       	add	r22, r24
    429c:	71 1d       	adc	r23, r1
    429e:	07 2e       	mov	r0, r23
    42a0:	00 0c       	add	r0, r0
    42a2:	88 0b       	sbc	r24, r24
    42a4:	99 0b       	sbc	r25, r25
    42a6:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
    42aa:	a7 01       	movw	r20, r14
    42ac:	96 01       	movw	r18, r12
    42ae:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
    42b2:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__fixsfsi>
    42b6:	6d 83       	std	Y+5, r22	; 0x05
    42b8:	7e 83       	std	Y+6, r23	; 0x06
    42ba:	8f 83       	std	Y+7, r24	; 0x07
    42bc:	98 87       	std	Y+8, r25	; 0x08
    42be:	c0 90 c3 20 	lds	r12, 0x20C3	; 0x8020c3 <ACC_SENSITIVITY>
    42c2:	d0 90 c4 20 	lds	r13, 0x20C4	; 0x8020c4 <ACC_SENSITIVITY+0x1>
    42c6:	e0 90 c5 20 	lds	r14, 0x20C5	; 0x8020c5 <ACC_SENSITIVITY+0x2>
    42ca:	f0 90 c6 20 	lds	r15, 0x20C6	; 0x8020c6 <ACC_SENSITIVITY+0x3>
    42ce:	60 91 e2 20 	lds	r22, 0x20E2	; 0x8020e2 <mpu9250_twi_data+0x5>
    42d2:	70 e0       	ldi	r23, 0x00	; 0
    42d4:	76 2f       	mov	r23, r22
    42d6:	66 27       	eor	r22, r22
    42d8:	80 91 e3 20 	lds	r24, 0x20E3	; 0x8020e3 <mpu9250_twi_data+0x6>
    42dc:	68 0f       	add	r22, r24
    42de:	71 1d       	adc	r23, r1
    42e0:	07 2e       	mov	r0, r23
    42e2:	00 0c       	add	r0, r0
    42e4:	88 0b       	sbc	r24, r24
    42e6:	99 0b       	sbc	r25, r25
    42e8:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
    42ec:	a7 01       	movw	r20, r14
    42ee:	96 01       	movw	r18, r12
    42f0:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
    42f4:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__fixsfsi>
    42f8:	69 87       	std	Y+9, r22	; 0x09
    42fa:	7a 87       	std	Y+10, r23	; 0x0a
    42fc:	8b 87       	std	Y+11, r24	; 0x0b
    42fe:	9c 87       	std	Y+12, r25	; 0x0c
    4300:	c0 90 c7 20 	lds	r12, 0x20C7	; 0x8020c7 <GYRO_SENSITIVITY>
    4304:	d0 90 c8 20 	lds	r13, 0x20C8	; 0x8020c8 <GYRO_SENSITIVITY+0x1>
    4308:	e0 90 c9 20 	lds	r14, 0x20C9	; 0x8020c9 <GYRO_SENSITIVITY+0x2>
    430c:	f0 90 ca 20 	lds	r15, 0x20CA	; 0x8020ca <GYRO_SENSITIVITY+0x3>
    4310:	60 91 e6 20 	lds	r22, 0x20E6	; 0x8020e6 <mpu9250_twi_data+0x9>
    4314:	70 e0       	ldi	r23, 0x00	; 0
    4316:	76 2f       	mov	r23, r22
    4318:	66 27       	eor	r22, r22
    431a:	80 91 e7 20 	lds	r24, 0x20E7	; 0x8020e7 <mpu9250_twi_data+0xa>
    431e:	68 0f       	add	r22, r24
    4320:	71 1d       	adc	r23, r1
    4322:	07 2e       	mov	r0, r23
    4324:	00 0c       	add	r0, r0
    4326:	88 0b       	sbc	r24, r24
    4328:	99 0b       	sbc	r25, r25
    432a:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
    432e:	a7 01       	movw	r20, r14
    4330:	96 01       	movw	r18, r12
    4332:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
    4336:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__fixsfsi>
    433a:	6d 87       	std	Y+13, r22	; 0x0d
    433c:	7e 87       	std	Y+14, r23	; 0x0e
    433e:	8f 87       	std	Y+15, r24	; 0x0f
    4340:	98 8b       	std	Y+16, r25	; 0x10
    4342:	c0 90 c7 20 	lds	r12, 0x20C7	; 0x8020c7 <GYRO_SENSITIVITY>
    4346:	d0 90 c8 20 	lds	r13, 0x20C8	; 0x8020c8 <GYRO_SENSITIVITY+0x1>
    434a:	e0 90 c9 20 	lds	r14, 0x20C9	; 0x8020c9 <GYRO_SENSITIVITY+0x2>
    434e:	f0 90 ca 20 	lds	r15, 0x20CA	; 0x8020ca <GYRO_SENSITIVITY+0x3>
    4352:	60 91 e8 20 	lds	r22, 0x20E8	; 0x8020e8 <mpu9250_twi_data+0xb>
    4356:	70 e0       	ldi	r23, 0x00	; 0
    4358:	76 2f       	mov	r23, r22
    435a:	66 27       	eor	r22, r22
    435c:	80 91 e9 20 	lds	r24, 0x20E9	; 0x8020e9 <mpu9250_twi_data+0xc>
    4360:	68 0f       	add	r22, r24
    4362:	71 1d       	adc	r23, r1
    4364:	07 2e       	mov	r0, r23
    4366:	00 0c       	add	r0, r0
    4368:	88 0b       	sbc	r24, r24
    436a:	99 0b       	sbc	r25, r25
    436c:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
    4370:	a7 01       	movw	r20, r14
    4372:	96 01       	movw	r18, r12
    4374:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
    4378:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__fixsfsi>
    437c:	69 8b       	std	Y+17, r22	; 0x11
    437e:	7a 8b       	std	Y+18, r23	; 0x12
    4380:	8b 8b       	std	Y+19, r24	; 0x13
    4382:	9c 8b       	std	Y+20, r25	; 0x14
    4384:	c0 90 c7 20 	lds	r12, 0x20C7	; 0x8020c7 <GYRO_SENSITIVITY>
    4388:	d0 90 c8 20 	lds	r13, 0x20C8	; 0x8020c8 <GYRO_SENSITIVITY+0x1>
    438c:	e0 90 c9 20 	lds	r14, 0x20C9	; 0x8020c9 <GYRO_SENSITIVITY+0x2>
    4390:	f0 90 ca 20 	lds	r15, 0x20CA	; 0x8020ca <GYRO_SENSITIVITY+0x3>
    4394:	60 91 ea 20 	lds	r22, 0x20EA	; 0x8020ea <mpu9250_twi_data+0xd>
    4398:	70 e0       	ldi	r23, 0x00	; 0
    439a:	76 2f       	mov	r23, r22
    439c:	66 27       	eor	r22, r22
    439e:	80 91 eb 20 	lds	r24, 0x20EB	; 0x8020eb <mpu9250_twi_data+0xe>
    43a2:	68 0f       	add	r22, r24
    43a4:	71 1d       	adc	r23, r1
    43a6:	07 2e       	mov	r0, r23
    43a8:	00 0c       	add	r0, r0
    43aa:	88 0b       	sbc	r24, r24
    43ac:	99 0b       	sbc	r25, r25
    43ae:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
    43b2:	a7 01       	movw	r20, r14
    43b4:	96 01       	movw	r18, r12
    43b6:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
    43ba:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__fixsfsi>
    43be:	6d 8b       	std	Y+21, r22	; 0x15
    43c0:	7e 8b       	std	Y+22, r23	; 0x16
    43c2:	8f 8b       	std	Y+23, r24	; 0x17
    43c4:	98 8f       	std	Y+24, r25	; 0x18
    43c6:	c0 90 d3 20 	lds	r12, 0x20D3	; 0x8020d3 <ASAX>
    43ca:	d0 90 d4 20 	lds	r13, 0x20D4	; 0x8020d4 <ASAX+0x1>
    43ce:	e0 90 d5 20 	lds	r14, 0x20D5	; 0x8020d5 <ASAX+0x2>
    43d2:	f0 90 d6 20 	lds	r15, 0x20D6	; 0x8020d6 <ASAX+0x3>
    43d6:	60 91 ed 20 	lds	r22, 0x20ED	; 0x8020ed <mpu9250_twi_data+0x10>
    43da:	70 e0       	ldi	r23, 0x00	; 0
    43dc:	76 2f       	mov	r23, r22
    43de:	66 27       	eor	r22, r22
    43e0:	80 91 ec 20 	lds	r24, 0x20EC	; 0x8020ec <mpu9250_twi_data+0xf>
    43e4:	68 0f       	add	r22, r24
    43e6:	71 1d       	adc	r23, r1
    43e8:	07 2e       	mov	r0, r23
    43ea:	00 0c       	add	r0, r0
    43ec:	88 0b       	sbc	r24, r24
    43ee:	99 0b       	sbc	r25, r25
    43f0:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
    43f4:	a7 01       	movw	r20, r14
    43f6:	96 01       	movw	r18, r12
    43f8:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    43fc:	20 e0       	ldi	r18, 0x00	; 0
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	40 ec       	ldi	r20, 0xC0	; 192
    4402:	50 e4       	ldi	r21, 0x40	; 64
    4404:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    4408:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__fixsfsi>
    440c:	2b 01       	movw	r4, r22
    440e:	3c 01       	movw	r6, r24
    4410:	c0 90 cf 20 	lds	r12, 0x20CF	; 0x8020cf <ASAY>
    4414:	d0 90 d0 20 	lds	r13, 0x20D0	; 0x8020d0 <ASAY+0x1>
    4418:	e0 90 d1 20 	lds	r14, 0x20D1	; 0x8020d1 <ASAY+0x2>
    441c:	f0 90 d2 20 	lds	r15, 0x20D2	; 0x8020d2 <ASAY+0x3>
    4420:	60 91 ef 20 	lds	r22, 0x20EF	; 0x8020ef <mpu9250_twi_data+0x12>
    4424:	70 e0       	ldi	r23, 0x00	; 0
    4426:	76 2f       	mov	r23, r22
    4428:	66 27       	eor	r22, r22
    442a:	80 91 ee 20 	lds	r24, 0x20EE	; 0x8020ee <mpu9250_twi_data+0x11>
    442e:	68 0f       	add	r22, r24
    4430:	71 1d       	adc	r23, r1
    4432:	07 2e       	mov	r0, r23
    4434:	00 0c       	add	r0, r0
    4436:	88 0b       	sbc	r24, r24
    4438:	99 0b       	sbc	r25, r25
    443a:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
    443e:	a7 01       	movw	r20, r14
    4440:	96 01       	movw	r18, r12
    4442:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    4446:	20 e0       	ldi	r18, 0x00	; 0
    4448:	30 e0       	ldi	r19, 0x00	; 0
    444a:	40 ec       	ldi	r20, 0xC0	; 192
    444c:	50 e4       	ldi	r21, 0x40	; 64
    444e:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    4452:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__fixsfsi>
    4456:	4b 01       	movw	r8, r22
    4458:	5c 01       	movw	r10, r24
    445a:	c0 90 cb 20 	lds	r12, 0x20CB	; 0x8020cb <ASAZ>
    445e:	d0 90 cc 20 	lds	r13, 0x20CC	; 0x8020cc <ASAZ+0x1>
    4462:	e0 90 cd 20 	lds	r14, 0x20CD	; 0x8020cd <ASAZ+0x2>
    4466:	f0 90 ce 20 	lds	r15, 0x20CE	; 0x8020ce <ASAZ+0x3>
    446a:	60 91 f1 20 	lds	r22, 0x20F1	; 0x8020f1 <mpu9250_twi_data+0x14>
    446e:	70 e0       	ldi	r23, 0x00	; 0
    4470:	76 2f       	mov	r23, r22
    4472:	66 27       	eor	r22, r22
    4474:	80 91 f0 20 	lds	r24, 0x20F0	; 0x8020f0 <mpu9250_twi_data+0x13>
    4478:	68 0f       	add	r22, r24
    447a:	71 1d       	adc	r23, r1
    447c:	07 2e       	mov	r0, r23
    447e:	00 0c       	add	r0, r0
    4480:	88 0b       	sbc	r24, r24
    4482:	99 0b       	sbc	r25, r25
    4484:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
    4488:	a7 01       	movw	r20, r14
    448a:	96 01       	movw	r18, r12
    448c:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    4490:	20 e0       	ldi	r18, 0x00	; 0
    4492:	30 e0       	ldi	r19, 0x00	; 0
    4494:	40 ec       	ldi	r20, 0xC0	; 192
    4496:	50 e4       	ldi	r21, 0x40	; 64
    4498:	0e 94 f3 2f 	call	0x5fe6	; 0x5fe6 <__mulsf3>
    449c:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__fixsfsi>
    44a0:	6b 01       	movw	r12, r22
    44a2:	7c 01       	movw	r14, r24
    44a4:	60 91 e4 20 	lds	r22, 0x20E4	; 0x8020e4 <mpu9250_twi_data+0x7>
    44a8:	70 e0       	ldi	r23, 0x00	; 0
    44aa:	76 2f       	mov	r23, r22
    44ac:	66 27       	eor	r22, r22
    44ae:	80 91 e5 20 	lds	r24, 0x20E5	; 0x8020e5 <mpu9250_twi_data+0x8>
    44b2:	68 0f       	add	r22, r24
    44b4:	71 1d       	adc	r23, r1
    44b6:	07 2e       	mov	r0, r23
    44b8:	00 0c       	add	r0, r0
    44ba:	88 0b       	sbc	r24, r24
    44bc:	99 0b       	sbc	r25, r25
    44be:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <__floatsisf>
    44c2:	23 e4       	ldi	r18, 0x43	; 67
    44c4:	3d ea       	ldi	r19, 0xAD	; 173
    44c6:	45 e5       	ldi	r20, 0x55	; 85
    44c8:	50 e4       	ldi	r21, 0x40	; 64
    44ca:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <__divsf3>
    44ce:	0e 94 e0 2e 	call	0x5dc0	; 0x5dc0 <__fixsfsi>
    44d2:	6c 5c       	subi	r22, 0xCC	; 204
    44d4:	77 4f       	sbci	r23, 0xF7	; 247
    44d6:	ed ed       	ldi	r30, 0xDD	; 221
    44d8:	f0 e2       	ldi	r31, 0x20	; 32
    44da:	80 81       	ld	r24, Z
    44dc:	f8 01       	movw	r30, r16
    44de:	80 83       	st	Z, r24
    44e0:	89 81       	ldd	r24, Y+1	; 0x01
    44e2:	9a 81       	ldd	r25, Y+2	; 0x02
    44e4:	81 83       	std	Z+1, r24	; 0x01
    44e6:	92 83       	std	Z+2, r25	; 0x02
    44e8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ea:	9e 81       	ldd	r25, Y+6	; 0x06
    44ec:	83 83       	std	Z+3, r24	; 0x03
    44ee:	94 83       	std	Z+4, r25	; 0x04
    44f0:	89 85       	ldd	r24, Y+9	; 0x09
    44f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    44f4:	85 83       	std	Z+5, r24	; 0x05
    44f6:	96 83       	std	Z+6, r25	; 0x06
    44f8:	67 83       	std	Z+7, r22	; 0x07
    44fa:	70 87       	std	Z+8, r23	; 0x08
    44fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    44fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    4500:	81 87       	std	Z+9, r24	; 0x09
    4502:	92 87       	std	Z+10, r25	; 0x0a
    4504:	89 89       	ldd	r24, Y+17	; 0x11
    4506:	9a 89       	ldd	r25, Y+18	; 0x12
    4508:	83 87       	std	Z+11, r24	; 0x0b
    450a:	94 87       	std	Z+12, r25	; 0x0c
    450c:	8d 89       	ldd	r24, Y+21	; 0x15
    450e:	9e 89       	ldd	r25, Y+22	; 0x16
    4510:	85 87       	std	Z+13, r24	; 0x0d
    4512:	96 87       	std	Z+14, r25	; 0x0e
    4514:	47 86       	std	Z+15, r4	; 0x0f
    4516:	50 8a       	std	Z+16, r5	; 0x10
    4518:	81 8a       	std	Z+17, r8	; 0x11
    451a:	92 8a       	std	Z+18, r9	; 0x12
    451c:	c3 8a       	std	Z+19, r12	; 0x13
    451e:	d4 8a       	std	Z+20, r13	; 0x14
    4520:	c8 01       	movw	r24, r16
    4522:	68 96       	adiw	r28, 0x18	; 24
    4524:	cd bf       	out	0x3d, r28	; 61
    4526:	de bf       	out	0x3e, r29	; 62
    4528:	df 91       	pop	r29
    452a:	cf 91       	pop	r28
    452c:	1f 91       	pop	r17
    452e:	0f 91       	pop	r16
    4530:	ff 90       	pop	r15
    4532:	ef 90       	pop	r14
    4534:	df 90       	pop	r13
    4536:	cf 90       	pop	r12
    4538:	bf 90       	pop	r11
    453a:	af 90       	pop	r10
    453c:	9f 90       	pop	r9
    453e:	8f 90       	pop	r8
    4540:	7f 90       	pop	r7
    4542:	6f 90       	pop	r6
    4544:	5f 90       	pop	r5
    4546:	4f 90       	pop	r4
    4548:	08 95       	ret

0000454a <__vector_2>:

ISR(MPU9250_INT_vect)
{
    454a:	1f 92       	push	r1
    454c:	0f 92       	push	r0
    454e:	0f b6       	in	r0, 0x3f	; 63
    4550:	0f 92       	push	r0
    4552:	11 24       	eor	r1, r1
    4554:	08 b6       	in	r0, 0x38	; 56
    4556:	0f 92       	push	r0
    4558:	18 be       	out	0x38, r1	; 56
    455a:	09 b6       	in	r0, 0x39	; 57
    455c:	0f 92       	push	r0
    455e:	19 be       	out	0x39, r1	; 57
    4560:	8f 93       	push	r24
    4562:	9f 93       	push	r25
    4564:	af 93       	push	r26
    4566:	bf 93       	push	r27
	data_rdy_flag = 1;
    4568:	81 e0       	ldi	r24, 0x01	; 1
    456a:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <data_rdy_flag>
	timerflag = 1;
    456e:	80 93 db 20 	sts	0x20DB, r24	; 0x8020db <timerflag>
	time++;
    4572:	80 91 d7 20 	lds	r24, 0x20D7	; 0x8020d7 <time>
    4576:	90 91 d8 20 	lds	r25, 0x20D8	; 0x8020d8 <time+0x1>
    457a:	a0 91 d9 20 	lds	r26, 0x20D9	; 0x8020d9 <time+0x2>
    457e:	b0 91 da 20 	lds	r27, 0x20DA	; 0x8020da <time+0x3>
    4582:	01 96       	adiw	r24, 0x01	; 1
    4584:	a1 1d       	adc	r26, r1
    4586:	b1 1d       	adc	r27, r1
    4588:	80 93 d7 20 	sts	0x20D7, r24	; 0x8020d7 <time>
    458c:	90 93 d8 20 	sts	0x20D8, r25	; 0x8020d8 <time+0x1>
    4590:	a0 93 d9 20 	sts	0x20D9, r26	; 0x8020d9 <time+0x2>
    4594:	b0 93 da 20 	sts	0x20DA, r27	; 0x8020da <time+0x3>
}
    4598:	bf 91       	pop	r27
    459a:	af 91       	pop	r26
    459c:	9f 91       	pop	r25
    459e:	8f 91       	pop	r24
    45a0:	0f 90       	pop	r0
    45a2:	09 be       	out	0x39, r0	; 57
    45a4:	0f 90       	pop	r0
    45a6:	08 be       	out	0x38, r0	; 56
    45a8:	0f 90       	pop	r0
    45aa:	0f be       	out	0x3f, r0	; 63
    45ac:	0f 90       	pop	r0
    45ae:	1f 90       	pop	r1
    45b0:	18 95       	reti

000045b2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    45b2:	04 c0       	rjmp	.+8      	; 0x45bc <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    45b4:	61 50       	subi	r22, 0x01	; 1
    45b6:	71 09       	sbc	r23, r1
    45b8:	81 09       	sbc	r24, r1
    45ba:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    45bc:	61 15       	cp	r22, r1
    45be:	71 05       	cpc	r23, r1
    45c0:	81 05       	cpc	r24, r1
    45c2:	91 05       	cpc	r25, r1
    45c4:	b9 f7       	brne	.-18     	; 0x45b4 <__portable_avr_delay_cycles+0x2>
    45c6:	08 95       	ret

000045c8 <spi_init>:
uint16_t C4; // Temperature coefficient of pressure offset; TCO
uint16_t C5; // Reference temperature; Tref
uint16_t C6; // Temperature coefficient of the pressure; TEMPSENS

void spi_init(void){
	PORTC.DIRSET = 0b10110000; //Open the output pins for the SPI
    45c8:	e0 e4       	ldi	r30, 0x40	; 64
    45ca:	f6 e0       	ldi	r31, 0x06	; 6
    45cc:	80 eb       	ldi	r24, 0xB0	; 176
    45ce:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = 0b01000000; //Open the input pins for the SPI
    45d0:	90 e4       	ldi	r25, 0x40	; 64
    45d2:	92 83       	std	Z+2, r25	; 0x02
	PORTC.OUT = 0b10110000;
    45d4:	84 83       	std	Z+4, r24	; 0x04
	SPIC.CTRL = 0b01010011;
    45d6:	83 e5       	ldi	r24, 0x53	; 83
    45d8:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
	PORTD.DIRSET = 0b00000010;
    45dc:	82 e0       	ldi	r24, 0x02	; 2
    45de:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
    45e2:	08 95       	ret

000045e4 <spi_write>:
}

void spi_write(uint8_t command){
	SPIC.DATA = command;
    45e4:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); //waits until the status register changes
    45e8:	e0 ec       	ldi	r30, 0xC0	; 192
    45ea:	f8 e0       	ldi	r31, 0x08	; 8
    45ec:	82 81       	ldd	r24, Z+2	; 0x02
    45ee:	88 23       	and	r24, r24
    45f0:	ec f7       	brge	.-6      	; 0x45ec <spi_write+0x8>
}
    45f2:	08 95       	ret

000045f4 <spi_read>:

uint8_t spi_read(void){
	spi_write(0xFF); //writes a max byte 
    45f4:	8f ef       	ldi	r24, 0xFF	; 255
    45f6:	f6 df       	rcall	.-20     	; 0x45e4 <spi_write>
	return SPIC.DATA; //gets the data and returns value
    45f8:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    45fc:	08 95       	ret

000045fe <prom_read>:
	C6 = prom_read(0xAC);
}



uint16_t prom_read(uint8_t command){ // reads the specified data value stored in the sensor.
    45fe:	1f 93       	push	r17
    4600:	cf 93       	push	r28
    4602:	df 93       	push	r29
	pd.P = P;
	return pd;
}

void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
    4604:	12 e0       	ldi	r17, 0x02	; 2
    4606:	10 93 66 06 	sts	0x0666, r17	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>

uint16_t prom_read(uint8_t command){ // reads the specified data value stored in the sensor.
	uint16_t data;
	pres_select();
	spi_write(command);
	data = ((uint16_t)spi_read())<<8;
    460a:	ec df       	rcall	.-40     	; 0x45e4 <spi_write>
    460c:	f3 df       	rcall	.-26     	; 0x45f4 <spi_read>
    460e:	c8 2f       	mov	r28, r24
    4610:	d0 e0       	ldi	r29, 0x00	; 0
	data += spi_read();
    4612:	dc 2f       	mov	r29, r28
    4614:	cc 27       	eor	r28, r28
    4616:	ee df       	rcall	.-36     	; 0x45f4 <spi_read>
    4618:	c8 0f       	add	r28, r24
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    461a:	d1 1d       	adc	r29, r1
    461c:	10 93 65 06 	sts	0x0665, r17	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	pres_select();
	spi_write(command);
	data = ((uint16_t)spi_read())<<8;
	data += spi_read();
	pres_deselect();
	delay_ms(1);
    4620:	66 ed       	ldi	r22, 0xD6	; 214
    4622:	74 e1       	ldi	r23, 0x14	; 20
    4624:	80 e0       	ldi	r24, 0x00	; 0
    4626:	90 e0       	ldi	r25, 0x00	; 0
	return data;
}
    4628:	c4 df       	rcall	.-120    	; 0x45b2 <__portable_avr_delay_cycles>
    462a:	ce 01       	movw	r24, r28
    462c:	df 91       	pop	r29
    462e:	cf 91       	pop	r28
    4630:	1f 91       	pop	r17
    4632:	08 95       	ret

00004634 <ms5607init>:
uint8_t spi_read(void){
	spi_write(0xFF); //writes a max byte 
	return SPIC.DATA; //gets the data and returns value
}

void ms5607init(void){
    4634:	cf 93       	push	r28
	pd.P = P;
	return pd;
}

void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
    4636:	c2 e0       	ldi	r28, 0x02	; 2
    4638:	c0 93 66 06 	sts	0x0666, r28	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	return SPIC.DATA; //gets the data and returns value
}

void ms5607init(void){
	pres_select(); // Turn on output pin for port 4. 
	spi_write(0x1E);
    463c:	8e e1       	ldi	r24, 0x1E	; 30
    463e:	d2 df       	rcall	.-92     	; 0x45e4 <spi_write>
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    4640:	c0 93 65 06 	sts	0x0665, r28	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>

void ms5607init(void){
	pres_select(); // Turn on output pin for port 4. 
	spi_write(0x1E);
	pres_deselect(); //reset command for the sensor; refer to datasheet for more.
	delay_ms(10);
    4644:	66 e5       	ldi	r22, 0x56	; 86
    4646:	70 ed       	ldi	r23, 0xD0	; 208
    4648:	80 e0       	ldi	r24, 0x00	; 0
    464a:	90 e0       	ldi	r25, 0x00	; 0
	
	
	
	//Get the programmatical settings from the sensor for future calculations.
	C1 = prom_read(0xA2);
    464c:	b2 df       	rcall	.-156    	; 0x45b2 <__portable_avr_delay_cycles>
    464e:	82 ea       	ldi	r24, 0xA2	; 162
    4650:	d6 df       	rcall	.-84     	; 0x45fe <prom_read>
    4652:	80 93 ab 24 	sts	0x24AB, r24	; 0x8024ab <C1>
    4656:	90 93 ac 24 	sts	0x24AC, r25	; 0x8024ac <C1+0x1>
	C2 = prom_read(0xA4);
    465a:	84 ea       	ldi	r24, 0xA4	; 164
    465c:	d0 df       	rcall	.-96     	; 0x45fe <prom_read>
    465e:	80 93 af 24 	sts	0x24AF, r24	; 0x8024af <C2>
    4662:	90 93 b0 24 	sts	0x24B0, r25	; 0x8024b0 <C2+0x1>
	C3 = prom_read(0xA6);
    4666:	86 ea       	ldi	r24, 0xA6	; 166
    4668:	ca df       	rcall	.-108    	; 0x45fe <prom_read>
    466a:	80 93 ad 24 	sts	0x24AD, r24	; 0x8024ad <C3>
    466e:	90 93 ae 24 	sts	0x24AE, r25	; 0x8024ae <C3+0x1>
	C4 = prom_read(0xA8);
    4672:	88 ea       	ldi	r24, 0xA8	; 168
    4674:	c4 df       	rcall	.-120    	; 0x45fe <prom_read>
    4676:	80 93 b5 24 	sts	0x24B5, r24	; 0x8024b5 <C4>
    467a:	90 93 b6 24 	sts	0x24B6, r25	; 0x8024b6 <C4+0x1>
	C5 = prom_read(0xAA);
    467e:	8a ea       	ldi	r24, 0xAA	; 170
    4680:	be df       	rcall	.-132    	; 0x45fe <prom_read>
    4682:	80 93 b3 24 	sts	0x24B3, r24	; 0x8024b3 <C5>
    4686:	90 93 b4 24 	sts	0x24B4, r25	; 0x8024b4 <C5+0x1>
	C6 = prom_read(0xAC);
    468a:	8c ea       	ldi	r24, 0xAC	; 172
    468c:	b8 df       	rcall	.-144    	; 0x45fe <prom_read>
    468e:	80 93 b1 24 	sts	0x24B1, r24	; 0x8024b1 <C6>
    4692:	90 93 b2 24 	sts	0x24B2, r25	; 0x8024b2 <C6+0x1>
}
    4696:	cf 91       	pop	r28
    4698:	08 95       	ret

0000469a <data_read>:
	pres_deselect();
	delay_ms(1);
	return data;
}

uint32_t data_read(uint8_t command){
    469a:	8f 92       	push	r8
    469c:	9f 92       	push	r9
    469e:	af 92       	push	r10
    46a0:	bf 92       	push	r11
    46a2:	cf 92       	push	r12
    46a4:	df 92       	push	r13
    46a6:	ef 92       	push	r14
    46a8:	ff 92       	push	r15
    46aa:	1f 93       	push	r17
    46ac:	cf 93       	push	r28
    46ae:	df 93       	push	r29
	pd.P = P;
	return pd;
}

void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
    46b0:	0f 2e       	mov	r0, r31
    46b2:	f6 e6       	ldi	r31, 0x66	; 102
    46b4:	ef 2e       	mov	r14, r31
    46b6:	f6 e0       	ldi	r31, 0x06	; 6
    46b8:	ff 2e       	mov	r15, r31
    46ba:	f0 2d       	mov	r31, r0
    46bc:	12 e0       	ldi	r17, 0x02	; 2
    46be:	f7 01       	movw	r30, r14
}

uint32_t data_read(uint8_t command){
	uint32_t data;
	pres_select();
	spi_write(command);
    46c0:	10 83       	st	Z, r17
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    46c2:	90 df       	rcall	.-224    	; 0x45e4 <spi_write>
    46c4:	c5 e6       	ldi	r28, 0x65	; 101
    46c6:	d6 e0       	ldi	r29, 0x06	; 6
uint32_t data_read(uint8_t command){
	uint32_t data;
	pres_select();
	spi_write(command);
	pres_deselect();
	delay_ms(10); //delay to wait for the data output
    46c8:	18 83       	st	Y, r17
    46ca:	66 e5       	ldi	r22, 0x56	; 86
    46cc:	70 ed       	ldi	r23, 0xD0	; 208
    46ce:	80 e0       	ldi	r24, 0x00	; 0
    46d0:	90 e0       	ldi	r25, 0x00	; 0
	pres_select();
	spi_write(0x00);
    46d2:	6f df       	rcall	.-290    	; 0x45b2 <__portable_avr_delay_cycles>
    46d4:	f7 01       	movw	r30, r14
	data = ((uint32_t)spi_read())<<16; //gets the first 16 bits of the sensor reading, shunts it to the front of the integer.
    46d6:	10 83       	st	Z, r17
    46d8:	80 e0       	ldi	r24, 0x00	; 0
    46da:	84 df       	rcall	.-248    	; 0x45e4 <spi_write>
    46dc:	8b df       	rcall	.-234    	; 0x45f4 <spi_read>
    46de:	c8 2e       	mov	r12, r24
    46e0:	d1 2c       	mov	r13, r1
    46e2:	e1 2c       	mov	r14, r1
    46e4:	f1 2c       	mov	r15, r1
	data += ((uint32_t)spi_read())<<8; // gets another 8 bits of the reading, shunts it in as well.
    46e6:	56 01       	movw	r10, r12
    46e8:	99 24       	eor	r9, r9
    46ea:	88 24       	eor	r8, r8
    46ec:	83 df       	rcall	.-250    	; 0x45f4 <spi_read>
    46ee:	c8 2e       	mov	r12, r24
    46f0:	d1 2c       	mov	r13, r1
    46f2:	e1 2c       	mov	r14, r1
    46f4:	f1 2c       	mov	r15, r1
    46f6:	fe 2c       	mov	r15, r14
    46f8:	ed 2c       	mov	r14, r13
    46fa:	dc 2c       	mov	r13, r12
    46fc:	cc 24       	eor	r12, r12
    46fe:	c8 0c       	add	r12, r8
	data += (uint32_t)spi_read(); // gets the final 8 bits from the sensor.
    4700:	d9 1c       	adc	r13, r9
    4702:	ea 1c       	adc	r14, r10
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    4704:	fb 1c       	adc	r15, r11
	data = ((uint32_t)spi_read())<<16; //gets the first 16 bits of the sensor reading, shunts it to the front of the integer.
	data += ((uint32_t)spi_read())<<8; // gets another 8 bits of the reading, shunts it in as well.
	data += (uint32_t)spi_read(); // gets the final 8 bits from the sensor.
	pres_deselect();
	//delay_ms(10);
	return data;
    4706:	76 df       	rcall	.-276    	; 0x45f4 <spi_read>
    4708:	18 83       	st	Y, r17
    470a:	a7 01       	movw	r20, r14
    470c:	96 01       	movw	r18, r12
    470e:	28 0f       	add	r18, r24
    4710:	31 1d       	adc	r19, r1
    4712:	41 1d       	adc	r20, r1
    4714:	51 1d       	adc	r21, r1
}
    4716:	ca 01       	movw	r24, r20
    4718:	b9 01       	movw	r22, r18
    471a:	df 91       	pop	r29
    471c:	cf 91       	pop	r28
    471e:	1f 91       	pop	r17
    4720:	ff 90       	pop	r15
    4722:	ef 90       	pop	r14
    4724:	df 90       	pop	r13
    4726:	cf 90       	pop	r12
    4728:	bf 90       	pop	r11
    472a:	af 90       	pop	r10
    472c:	9f 90       	pop	r9
    472e:	8f 90       	pop	r8
    4730:	08 95       	ret

00004732 <get_pressure>:

PressData get_pressure(void){ //refer to the datasheet for these calculations.
    4732:	2f 92       	push	r2
    4734:	3f 92       	push	r3
    4736:	4f 92       	push	r4
    4738:	5f 92       	push	r5
    473a:	6f 92       	push	r6
    473c:	7f 92       	push	r7
    473e:	8f 92       	push	r8
    4740:	9f 92       	push	r9
    4742:	af 92       	push	r10
    4744:	bf 92       	push	r11
    4746:	cf 92       	push	r12
    4748:	df 92       	push	r13
    474a:	ef 92       	push	r14
    474c:	ff 92       	push	r15
    474e:	0f 93       	push	r16
    4750:	1f 93       	push	r17
    4752:	cf 93       	push	r28
    4754:	df 93       	push	r29
    4756:	cd b7       	in	r28, 0x3d	; 61
    4758:	de b7       	in	r29, 0x3e	; 62
    475a:	65 97       	sbiw	r28, 0x15	; 21
    475c:	cd bf       	out	0x3d, r28	; 61
    475e:	de bf       	out	0x3e, r29	; 62
	
	uint32_t D1 = data_read(0x48); // Gets digital pressure value
    4760:	88 e4       	ldi	r24, 0x48	; 72
    4762:	9b df       	rcall	.-202    	; 0x469a <data_read>
    4764:	2b 01       	movw	r4, r22
	uint32_t D2 = data_read(0x58); // Gets temperature value
    4766:	3c 01       	movw	r6, r24
    4768:	88 e5       	ldi	r24, 0x58	; 88
	
	
	("D1: %lu, D2: %lu", D1, D2);
	
	int32_t dT = (int64_t)D2 - (int64_t)C5 * 256; // Runs calculations to get dT
	int32_t TEMP = 2000 + (int64_t)dT * (int64_t)C6 / 8388608; // Finds actual temp
    476a:	97 df       	rcall	.-210    	; 0x469a <data_read>
    476c:	20 91 b3 24 	lds	r18, 0x24B3	; 0x8024b3 <C5>
    4770:	30 91 b4 24 	lds	r19, 0x24B4	; 0x8024b4 <C5+0x1>
    4774:	89 01       	movw	r16, r18
    4776:	20 e0       	ldi	r18, 0x00	; 0
    4778:	30 e0       	ldi	r19, 0x00	; 0
    477a:	32 2f       	mov	r19, r18
    477c:	21 2f       	mov	r18, r17
    477e:	10 2f       	mov	r17, r16
    4780:	00 27       	eor	r16, r16
    4782:	6b 01       	movw	r12, r22
    4784:	7c 01       	movw	r14, r24
    4786:	c0 1a       	sub	r12, r16
    4788:	d1 0a       	sbc	r13, r17
    478a:	e2 0a       	sbc	r14, r18
    478c:	f3 0a       	sbc	r15, r19
    478e:	c9 86       	std	Y+9, r12	; 0x09
    4790:	da 86       	std	Y+10, r13	; 0x0a
    4792:	eb 86       	std	Y+11, r14	; 0x0b
    4794:	fc 86       	std	Y+12, r15	; 0x0c
    4796:	ff 0c       	add	r15, r15
    4798:	cc 08       	sbc	r12, r12
    479a:	dc 2c       	mov	r13, r12
    479c:	76 01       	movw	r14, r12
    479e:	cd 86       	std	Y+13, r12	; 0x0d
    47a0:	de 86       	std	Y+14, r13	; 0x0e
    47a2:	ef 86       	std	Y+15, r14	; 0x0f
	//printf("TEMP: %li", TEMP);
	
	int64_t OFF =	(int64_t)C2 * 131072 + ((int64_t)C4 * (int64_t)dT) / 64;
	int64_t SENS = (int64_t)C1 * 65536 + ((int64_t)C3 * (int64_t)dT) / 128; 
	int32_t P = ((int64_t)D1 * (int64_t)SENS / 2097152 - (int64_t)OFF) / 32768; // Gets the actual temperature and type casts it.
    47a4:	f8 8a       	std	Y+16, r15	; 0x10
    47a6:	40 91 ad 24 	lds	r20, 0x24AD	; 0x8024ad <C3>
    47aa:	50 91 ae 24 	lds	r21, 0x24AE	; 0x8024ae <C3+0x1>
    47ae:	a9 84       	ldd	r10, Y+9	; 0x09
    47b0:	ba 84       	ldd	r11, Y+10	; 0x0a
    47b2:	cb 84       	ldd	r12, Y+11	; 0x0b
    47b4:	dc 84       	ldd	r13, Y+12	; 0x0c
    47b6:	ed 84       	ldd	r14, Y+13	; 0x0d
    47b8:	fe 2c       	mov	r15, r14
    47ba:	0e 2d       	mov	r16, r14
    47bc:	1e 2d       	mov	r17, r14
    47be:	24 2f       	mov	r18, r20
    47c0:	35 2f       	mov	r19, r21
    47c2:	40 e0       	ldi	r20, 0x00	; 0
    47c4:	50 e0       	ldi	r21, 0x00	; 0
    47c6:	60 e0       	ldi	r22, 0x00	; 0
    47c8:	70 e0       	ldi	r23, 0x00	; 0
    47ca:	80 e0       	ldi	r24, 0x00	; 0
    47cc:	90 e0       	ldi	r25, 0x00	; 0
    47ce:	0e 94 a9 34 	call	0x6952	; 0x6952 <__muldi3>
    47d2:	02 2f       	mov	r16, r18
    47d4:	13 2f       	mov	r17, r19
    47d6:	b4 2f       	mov	r27, r20
    47d8:	f5 2f       	mov	r31, r21
    47da:	e6 2f       	mov	r30, r22
    47dc:	79 8b       	std	Y+17, r23	; 0x11
    47de:	28 2e       	mov	r2, r24
    47e0:	39 2e       	mov	r3, r25
    47e2:	a0 e0       	ldi	r26, 0x00	; 0
    47e4:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <__cmpdi2_s8>
    47e8:	5c f4       	brge	.+22     	; 0x4800 <get_pressure+0xce>
    47ea:	af e7       	ldi	r26, 0x7F	; 127
    47ec:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <__adddi3_s8>
    47f0:	02 2f       	mov	r16, r18
    47f2:	13 2f       	mov	r17, r19
    47f4:	b4 2f       	mov	r27, r20
    47f6:	f5 2f       	mov	r31, r21
    47f8:	e6 2f       	mov	r30, r22
    47fa:	79 8b       	std	Y+17, r23	; 0x11
    47fc:	28 2e       	mov	r2, r24
    47fe:	39 2e       	mov	r3, r25
    4800:	20 2f       	mov	r18, r16
    4802:	31 2f       	mov	r19, r17
    4804:	4b 2f       	mov	r20, r27
    4806:	5f 2f       	mov	r21, r31
    4808:	6e 2f       	mov	r22, r30
    480a:	79 89       	ldd	r23, Y+17	; 0x11
    480c:	82 2d       	mov	r24, r2
    480e:	93 2d       	mov	r25, r3
    4810:	07 e0       	ldi	r16, 0x07	; 7
    4812:	0e 94 13 35 	call	0x6a26	; 0x6a26 <__ashrdi3>
    4816:	22 2e       	mov	r2, r18
    4818:	33 2e       	mov	r3, r19
    481a:	84 2e       	mov	r8, r20
    481c:	95 2e       	mov	r9, r21
    481e:	b6 2f       	mov	r27, r22
    4820:	a7 2f       	mov	r26, r23
    4822:	f8 2f       	mov	r31, r24
    4824:	e9 2f       	mov	r30, r25
    4826:	a0 90 ab 24 	lds	r10, 0x24AB	; 0x8024ab <C1>
    482a:	b0 90 ac 24 	lds	r11, 0x24AC	; 0x8024ac <C1+0x1>
    482e:	2a 2d       	mov	r18, r10
    4830:	3b 2d       	mov	r19, r11
    4832:	40 e0       	ldi	r20, 0x00	; 0
    4834:	50 e0       	ldi	r21, 0x00	; 0
    4836:	60 e0       	ldi	r22, 0x00	; 0
    4838:	70 e0       	ldi	r23, 0x00	; 0
    483a:	80 e0       	ldi	r24, 0x00	; 0
    483c:	90 e0       	ldi	r25, 0x00	; 0
    483e:	00 e1       	ldi	r16, 0x10	; 16
    4840:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <__ashldi3>
    4844:	a2 2e       	mov	r10, r18
    4846:	b3 2e       	mov	r11, r19
    4848:	c4 2e       	mov	r12, r20
    484a:	d5 2e       	mov	r13, r21
    484c:	e6 2e       	mov	r14, r22
    484e:	f7 2e       	mov	r15, r23
    4850:	08 2f       	mov	r16, r24
    4852:	19 2f       	mov	r17, r25
    4854:	22 2d       	mov	r18, r2
    4856:	33 2d       	mov	r19, r3
    4858:	48 2d       	mov	r20, r8
    485a:	59 2d       	mov	r21, r9
    485c:	6b 2f       	mov	r22, r27
    485e:	7a 2f       	mov	r23, r26
    4860:	8f 2f       	mov	r24, r31
    4862:	9e 2f       	mov	r25, r30
    4864:	0e 94 31 35 	call	0x6a62	; 0x6a62 <__adddi3>
    4868:	12 01       	movw	r2, r4
    486a:	23 01       	movw	r4, r6
    486c:	a2 2c       	mov	r10, r2
    486e:	b3 2c       	mov	r11, r3
    4870:	c4 2c       	mov	r12, r4
    4872:	d5 2c       	mov	r13, r5
    4874:	e1 2c       	mov	r14, r1
    4876:	f1 2c       	mov	r15, r1
    4878:	00 e0       	ldi	r16, 0x00	; 0
    487a:	10 e0       	ldi	r17, 0x00	; 0
    487c:	0e 94 a9 34 	call	0x6952	; 0x6952 <__muldi3>
    4880:	f2 2e       	mov	r15, r18
    4882:	03 2f       	mov	r16, r19
    4884:	14 2f       	mov	r17, r20
    4886:	b5 2f       	mov	r27, r21
    4888:	f6 2f       	mov	r31, r22
    488a:	e7 2f       	mov	r30, r23
    488c:	58 2e       	mov	r5, r24
    488e:	69 2e       	mov	r6, r25
    4890:	a0 e0       	ldi	r26, 0x00	; 0
    4892:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <__cmpdi2_s8>
    4896:	84 f4       	brge	.+32     	; 0x48b8 <get_pressure+0x186>
    4898:	21 50       	subi	r18, 0x01	; 1
    489a:	31 09       	sbc	r19, r1
    489c:	40 4e       	sbci	r20, 0xE0	; 224
    489e:	5f 4f       	sbci	r21, 0xFF	; 255
    48a0:	6f 4f       	sbci	r22, 0xFF	; 255
    48a2:	7f 4f       	sbci	r23, 0xFF	; 255
    48a4:	8f 4f       	sbci	r24, 0xFF	; 255
    48a6:	9f 4f       	sbci	r25, 0xFF	; 255
    48a8:	f2 2e       	mov	r15, r18
    48aa:	03 2f       	mov	r16, r19
    48ac:	14 2f       	mov	r17, r20
    48ae:	b5 2f       	mov	r27, r21
    48b0:	f6 2f       	mov	r31, r22
    48b2:	e7 2f       	mov	r30, r23
    48b4:	58 2e       	mov	r5, r24
    48b6:	69 2e       	mov	r6, r25
    48b8:	2f 2d       	mov	r18, r15
    48ba:	30 2f       	mov	r19, r16
    48bc:	41 2f       	mov	r20, r17
    48be:	5b 2f       	mov	r21, r27
    48c0:	6f 2f       	mov	r22, r31
    48c2:	7e 2f       	mov	r23, r30
    48c4:	85 2d       	mov	r24, r5
    48c6:	96 2d       	mov	r25, r6
    48c8:	05 e1       	ldi	r16, 0x15	; 21
    48ca:	0e 94 13 35 	call	0x6a26	; 0x6a26 <__ashrdi3>
    48ce:	72 2e       	mov	r7, r18
    48d0:	83 2e       	mov	r8, r19
    48d2:	94 2e       	mov	r9, r20
    48d4:	59 8b       	std	Y+17, r21	; 0x11
    48d6:	6a 8b       	std	Y+18, r22	; 0x12
    48d8:	7b 8b       	std	Y+19, r23	; 0x13
    48da:	8c 8b       	std	Y+20, r24	; 0x14
    48dc:	9d 8b       	std	Y+21, r25	; 0x15
    48de:	40 91 b5 24 	lds	r20, 0x24B5	; 0x8024b5 <C4>
    48e2:	50 91 b6 24 	lds	r21, 0x24B6	; 0x8024b6 <C4+0x1>
    48e6:	a9 84       	ldd	r10, Y+9	; 0x09
    48e8:	ba 84       	ldd	r11, Y+10	; 0x0a
    48ea:	cb 84       	ldd	r12, Y+11	; 0x0b
    48ec:	dc 84       	ldd	r13, Y+12	; 0x0c
    48ee:	ed 84       	ldd	r14, Y+13	; 0x0d
    48f0:	fe 2c       	mov	r15, r14
    48f2:	0e 2d       	mov	r16, r14
    48f4:	1e 2d       	mov	r17, r14
    48f6:	24 2f       	mov	r18, r20
    48f8:	35 2f       	mov	r19, r21
    48fa:	40 e0       	ldi	r20, 0x00	; 0
    48fc:	50 e0       	ldi	r21, 0x00	; 0
    48fe:	60 e0       	ldi	r22, 0x00	; 0
    4900:	70 e0       	ldi	r23, 0x00	; 0
    4902:	80 e0       	ldi	r24, 0x00	; 0
    4904:	90 e0       	ldi	r25, 0x00	; 0
    4906:	0e 94 a9 34 	call	0x6952	; 0x6952 <__muldi3>
    490a:	f2 2e       	mov	r15, r18
    490c:	03 2f       	mov	r16, r19
    490e:	14 2f       	mov	r17, r20
    4910:	b5 2f       	mov	r27, r21
    4912:	f6 2f       	mov	r31, r22
    4914:	e7 2f       	mov	r30, r23
    4916:	28 2e       	mov	r2, r24
    4918:	39 2e       	mov	r3, r25
    491a:	a0 e0       	ldi	r26, 0x00	; 0
    491c:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <__cmpdi2_s8>
    4920:	5c f4       	brge	.+22     	; 0x4938 <get_pressure+0x206>
    4922:	af e3       	ldi	r26, 0x3F	; 63
    4924:	0e 94 3a 35 	call	0x6a74	; 0x6a74 <__adddi3_s8>
    4928:	f2 2e       	mov	r15, r18
    492a:	03 2f       	mov	r16, r19
    492c:	14 2f       	mov	r17, r20
    492e:	b5 2f       	mov	r27, r21
    4930:	f6 2f       	mov	r31, r22
    4932:	e7 2f       	mov	r30, r23
    4934:	28 2e       	mov	r2, r24
    4936:	39 2e       	mov	r3, r25
    4938:	2f 2d       	mov	r18, r15
    493a:	30 2f       	mov	r19, r16
    493c:	41 2f       	mov	r20, r17
    493e:	5b 2f       	mov	r21, r27
    4940:	6f 2f       	mov	r22, r31
    4942:	7e 2f       	mov	r23, r30
    4944:	82 2d       	mov	r24, r2
    4946:	93 2d       	mov	r25, r3
    4948:	06 e0       	ldi	r16, 0x06	; 6
    494a:	0e 94 13 35 	call	0x6a26	; 0x6a26 <__ashrdi3>
    494e:	32 2e       	mov	r3, r18
    4950:	43 2e       	mov	r4, r19
    4952:	54 2e       	mov	r5, r20
    4954:	65 2e       	mov	r6, r21
    4956:	b6 2f       	mov	r27, r22
    4958:	a7 2f       	mov	r26, r23
    495a:	f8 2f       	mov	r31, r24
    495c:	e9 2f       	mov	r30, r25
    495e:	a0 90 af 24 	lds	r10, 0x24AF	; 0x8024af <C2>
    4962:	b0 90 b0 24 	lds	r11, 0x24B0	; 0x8024b0 <C2+0x1>
    4966:	2a 2d       	mov	r18, r10
    4968:	3b 2d       	mov	r19, r11
    496a:	40 e0       	ldi	r20, 0x00	; 0
    496c:	50 e0       	ldi	r21, 0x00	; 0
    496e:	60 e0       	ldi	r22, 0x00	; 0
    4970:	70 e0       	ldi	r23, 0x00	; 0
    4972:	80 e0       	ldi	r24, 0x00	; 0
    4974:	90 e0       	ldi	r25, 0x00	; 0
    4976:	01 e1       	ldi	r16, 0x11	; 17
    4978:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <__ashldi3>
    497c:	a2 2e       	mov	r10, r18
    497e:	b3 2e       	mov	r11, r19
    4980:	c4 2e       	mov	r12, r20
    4982:	d5 2e       	mov	r13, r21
    4984:	e6 2e       	mov	r14, r22
    4986:	f7 2e       	mov	r15, r23
    4988:	08 2f       	mov	r16, r24
    498a:	19 2f       	mov	r17, r25
    498c:	23 2d       	mov	r18, r3
    498e:	34 2d       	mov	r19, r4
    4990:	45 2d       	mov	r20, r5
    4992:	56 2d       	mov	r21, r6
    4994:	6b 2f       	mov	r22, r27
    4996:	7a 2f       	mov	r23, r26
    4998:	8f 2f       	mov	r24, r31
    499a:	9e 2f       	mov	r25, r30
    499c:	0e 94 31 35 	call	0x6a62	; 0x6a62 <__adddi3>
    49a0:	a2 2e       	mov	r10, r18
    49a2:	b3 2e       	mov	r11, r19
    49a4:	c4 2e       	mov	r12, r20
    49a6:	d5 2e       	mov	r13, r21
    49a8:	e6 2e       	mov	r14, r22
    49aa:	f7 2e       	mov	r15, r23
    49ac:	08 2f       	mov	r16, r24
    49ae:	19 2f       	mov	r17, r25
    49b0:	27 2d       	mov	r18, r7
    49b2:	38 2d       	mov	r19, r8
    49b4:	49 2d       	mov	r20, r9
    49b6:	59 89       	ldd	r21, Y+17	; 0x11
    49b8:	6a 89       	ldd	r22, Y+18	; 0x12
    49ba:	7b 89       	ldd	r23, Y+19	; 0x13
    49bc:	8c 89       	ldd	r24, Y+20	; 0x14
    49be:	9d 89       	ldd	r25, Y+21	; 0x15
    49c0:	0e 94 46 35 	call	0x6a8c	; 0x6a8c <__subdi3>
    49c4:	f2 2e       	mov	r15, r18
    49c6:	03 2f       	mov	r16, r19
    49c8:	14 2f       	mov	r17, r20
    49ca:	b5 2f       	mov	r27, r21
    49cc:	f6 2f       	mov	r31, r22
    49ce:	e7 2f       	mov	r30, r23
    49d0:	58 2e       	mov	r5, r24
    49d2:	69 2e       	mov	r6, r25
    49d4:	a0 e0       	ldi	r26, 0x00	; 0
    49d6:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <__cmpdi2_s8>
    49da:	84 f4       	brge	.+32     	; 0x49fc <get_pressure+0x2ca>
    49dc:	21 50       	subi	r18, 0x01	; 1
    49de:	30 48       	sbci	r19, 0x80	; 128
    49e0:	4f 4f       	sbci	r20, 0xFF	; 255
    49e2:	5f 4f       	sbci	r21, 0xFF	; 255
    49e4:	6f 4f       	sbci	r22, 0xFF	; 255
    49e6:	7f 4f       	sbci	r23, 0xFF	; 255
    49e8:	8f 4f       	sbci	r24, 0xFF	; 255
    49ea:	9f 4f       	sbci	r25, 0xFF	; 255
    49ec:	f2 2e       	mov	r15, r18
    49ee:	03 2f       	mov	r16, r19
    49f0:	14 2f       	mov	r17, r20
    49f2:	b5 2f       	mov	r27, r21
    49f4:	f6 2f       	mov	r31, r22
    49f6:	e7 2f       	mov	r30, r23
    49f8:	58 2e       	mov	r5, r24
    49fa:	69 2e       	mov	r6, r25
    49fc:	2f 2d       	mov	r18, r15
    49fe:	30 2f       	mov	r19, r16
    4a00:	41 2f       	mov	r20, r17
    4a02:	5b 2f       	mov	r21, r27
    4a04:	6f 2f       	mov	r22, r31
    4a06:	7e 2f       	mov	r23, r30
    4a08:	85 2d       	mov	r24, r5
    4a0a:	96 2d       	mov	r25, r6
    4a0c:	0f e0       	ldi	r16, 0x0F	; 15
    4a0e:	0e 94 13 35 	call	0x6a26	; 0x6a26 <__ashrdi3>
    4a12:	92 2e       	mov	r9, r18
    4a14:	73 2e       	mov	r7, r19
    4a16:	84 2e       	mov	r8, r20
    4a18:	99 8a       	std	Y+17, r9	; 0x11
    4a1a:	8a 8a       	std	Y+18, r8	; 0x12
	//printf("Test: %lld\n", test);
	//int32_t P = 0;
	PressData pd;
	pd.TEMP = TEMP;
	pd.P = P;
	return pd;
    4a1c:	35 2e       	mov	r3, r21
    4a1e:	40 91 b1 24 	lds	r20, 0x24B1	; 0x8024b1 <C6>
    4a22:	50 91 b2 24 	lds	r21, 0x24B2	; 0x8024b2 <C6+0x1>
    4a26:	a9 84       	ldd	r10, Y+9	; 0x09
    4a28:	ba 84       	ldd	r11, Y+10	; 0x0a
    4a2a:	cb 84       	ldd	r12, Y+11	; 0x0b
    4a2c:	dc 84       	ldd	r13, Y+12	; 0x0c
    4a2e:	ed 84       	ldd	r14, Y+13	; 0x0d
    4a30:	fe 2c       	mov	r15, r14
    4a32:	0e 2d       	mov	r16, r14
    4a34:	1e 2d       	mov	r17, r14
    4a36:	24 2f       	mov	r18, r20
    4a38:	35 2f       	mov	r19, r21
    4a3a:	40 e0       	ldi	r20, 0x00	; 0
    4a3c:	50 e0       	ldi	r21, 0x00	; 0
    4a3e:	60 e0       	ldi	r22, 0x00	; 0
    4a40:	70 e0       	ldi	r23, 0x00	; 0
    4a42:	80 e0       	ldi	r24, 0x00	; 0
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	0e 94 a9 34 	call	0x6952	; 0x6952 <__muldi3>
    4a4a:	f2 2e       	mov	r15, r18
    4a4c:	03 2f       	mov	r16, r19
    4a4e:	14 2f       	mov	r17, r20
    4a50:	b5 2f       	mov	r27, r21
    4a52:	f6 2f       	mov	r31, r22
    4a54:	e7 2f       	mov	r30, r23
    4a56:	28 2e       	mov	r2, r24
    4a58:	99 2e       	mov	r9, r25
    4a5a:	a0 e0       	ldi	r26, 0x00	; 0
    4a5c:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <__cmpdi2_s8>
    4a60:	84 f4       	brge	.+32     	; 0x4a82 <get_pressure+0x350>
    4a62:	21 50       	subi	r18, 0x01	; 1
    4a64:	31 09       	sbc	r19, r1
    4a66:	40 48       	sbci	r20, 0x80	; 128
    4a68:	5f 4f       	sbci	r21, 0xFF	; 255
    4a6a:	6f 4f       	sbci	r22, 0xFF	; 255
    4a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    4a6e:	8f 4f       	sbci	r24, 0xFF	; 255
    4a70:	9f 4f       	sbci	r25, 0xFF	; 255
    4a72:	f2 2e       	mov	r15, r18
    4a74:	03 2f       	mov	r16, r19
    4a76:	14 2f       	mov	r17, r20
    4a78:	b5 2f       	mov	r27, r21
    4a7a:	f6 2f       	mov	r31, r22
    4a7c:	e7 2f       	mov	r30, r23
    4a7e:	28 2e       	mov	r2, r24
    4a80:	99 2e       	mov	r9, r25
    4a82:	2f 2d       	mov	r18, r15
    4a84:	30 2f       	mov	r19, r16
    4a86:	41 2f       	mov	r20, r17
    4a88:	5b 2f       	mov	r21, r27
    4a8a:	6f 2f       	mov	r22, r31
    4a8c:	7e 2f       	mov	r23, r30
    4a8e:	82 2d       	mov	r24, r2
    4a90:	99 2d       	mov	r25, r9
    4a92:	07 e1       	ldi	r16, 0x17	; 23
    4a94:	0e 94 13 35 	call	0x6a26	; 0x6a26 <__ashrdi3>
    4a98:	82 2e       	mov	r8, r18
    4a9a:	93 2e       	mov	r9, r19
    4a9c:	a4 2e       	mov	r10, r20
    4a9e:	b5 2e       	mov	r11, r21
    4aa0:	d5 01       	movw	r26, r10
    4aa2:	c4 01       	movw	r24, r8
    4aa4:	80 53       	subi	r24, 0x30	; 48
    4aa6:	98 4f       	sbci	r25, 0xF8	; 248
    4aa8:	af 4f       	sbci	r26, 0xFF	; 255
    4aaa:	bf 4f       	sbci	r27, 0xFF	; 255
    4aac:	89 83       	std	Y+1, r24	; 0x01
    4aae:	9a 83       	std	Y+2, r25	; 0x02
    4ab0:	ab 83       	std	Y+3, r26	; 0x03
    4ab2:	bc 83       	std	Y+4, r27	; 0x04
    4ab4:	d9 88       	ldd	r13, Y+17	; 0x11
    4ab6:	ea 88       	ldd	r14, Y+18	; 0x12
    4ab8:	28 2f       	mov	r18, r24
    4aba:	3a 81       	ldd	r19, Y+2	; 0x02
    4abc:	4b 81       	ldd	r20, Y+3	; 0x03
    4abe:	5c 81       	ldd	r21, Y+4	; 0x04
    4ac0:	6d 2d       	mov	r22, r13
}
    4ac2:	77 2d       	mov	r23, r7
    4ac4:	8e 2d       	mov	r24, r14
    4ac6:	93 2d       	mov	r25, r3
    4ac8:	65 96       	adiw	r28, 0x15	; 21
    4aca:	cd bf       	out	0x3d, r28	; 61
    4acc:	de bf       	out	0x3e, r29	; 62
    4ace:	df 91       	pop	r29
    4ad0:	cf 91       	pop	r28
    4ad2:	1f 91       	pop	r17
    4ad4:	0f 91       	pop	r16
    4ad6:	ff 90       	pop	r15
    4ad8:	ef 90       	pop	r14
    4ada:	df 90       	pop	r13
    4adc:	cf 90       	pop	r12
    4ade:	bf 90       	pop	r11
    4ae0:	af 90       	pop	r10
    4ae2:	9f 90       	pop	r9
    4ae4:	8f 90       	pop	r8
    4ae6:	7f 90       	pop	r7
    4ae8:	6f 90       	pop	r6
    4aea:	5f 90       	pop	r5
    4aec:	4f 90       	pop	r4
    4aee:	3f 90       	pop	r3
    4af0:	2f 90       	pop	r2
    4af2:	08 95       	ret

00004af4 <adc_init>:
#include <asf.h>
#include <math.h>
#include "thermistor.h"


void adc_init(void){	//This is for PA6... mostly
    4af4:	ff 92       	push	r15
    4af6:	0f 93       	push	r16
    4af8:	1f 93       	push	r17
    4afa:	cf 93       	push	r28
    4afc:	df 93       	push	r29
	PORTA.DIRCLR = 0b01000000;
    4afe:	e0 e0       	ldi	r30, 0x00	; 0
    4b00:	f6 e0       	ldi	r31, 0x06	; 6
    4b02:	80 e4       	ldi	r24, 0x40	; 64
    4b04:	82 83       	std	Z+2, r24	; 0x02
	PORTA.DIR = 0b10111111;
    4b06:	8f eb       	ldi	r24, 0xBF	; 191
    4b08:	80 83       	st	Z, r24
	ADCA.CTRLA = 0b00000001;
    4b0a:	c0 e0       	ldi	r28, 0x00	; 0
    4b0c:	d2 e0       	ldi	r29, 0x02	; 2
    4b0e:	ff 24       	eor	r15, r15
    4b10:	f3 94       	inc	r15
    4b12:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000;
    4b14:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000;
    4b16:	80 e1       	ldi	r24, 0x10	; 16
    4b18:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101;
    4b1a:	85 e0       	ldi	r24, 0x05	; 5
    4b1c:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    4b1e:	61 e2       	ldi	r22, 0x21	; 33
    4b20:	70 e0       	ldi	r23, 0x00	; 0
    4b22:	82 e0       	ldi	r24, 0x02	; 2
    4b24:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    4b28:	08 2f       	mov	r16, r24
    4b2a:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    4b2c:	10 2f       	mov	r17, r16
    4b2e:	00 27       	eor	r16, r16
    4b30:	60 e2       	ldi	r22, 0x20	; 32
    4b32:	70 e0       	ldi	r23, 0x00	; 0
    4b34:	82 e0       	ldi	r24, 0x02	; 2
    4b36:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    4b3a:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    4b3c:	0c 87       	std	Y+12, r16	; 0x0c
    4b3e:	1d 87       	std	Y+13, r17	; 0x0d
	
	ADCA.CH0.CTRL = 0b00000001;
    4b40:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000110;
    4b42:	86 e0       	ldi	r24, 0x06	; 6
    4b44:	89 a3       	std	Y+33, r24	; 0x21
}
    4b46:	df 91       	pop	r29
    4b48:	cf 91       	pop	r28
    4b4a:	1f 91       	pop	r17
    4b4c:	0f 91       	pop	r16
    4b4e:	ff 90       	pop	r15
    4b50:	08 95       	ret

00004b52 <buzzer_counter_init>:
	TCE0.CTRLA = 0b00000101; //div/64
	TCE0.CTRLB = 0b00000011;
	TCE0.PER = (uint16_t)(blink_period);
	TCE0.CCA = TCE0.PER * (1-duty_cycle);
	//printf("The servo should work, but of course it doesn't\n");
  }
    4b52:	e0 e0       	ldi	r30, 0x00	; 0
    4b54:	f8 e0       	ldi	r31, 0x08	; 8
    4b56:	25 e0       	ldi	r18, 0x05	; 5
    4b58:	20 83       	st	Z, r18
    4b5a:	23 e0       	ldi	r18, 0x03	; 3
    4b5c:	21 83       	std	Z+1, r18	; 0x01
    4b5e:	86 a3       	std	Z+38, r24	; 0x26
    4b60:	97 a3       	std	Z+39, r25	; 0x27
    4b62:	08 95       	ret

00004b64 <__vector_14>:
	tc_write_period(&TCE0, period);
	tc_write_cc(&TCE0, TC_CCA, on);
	tc_write_cc(&TCE0, TC_CCB, off);
}*/

ISR(TCC0_OVF_vect){
    4b64:	1f 92       	push	r1
    4b66:	0f 92       	push	r0
    4b68:	0f b6       	in	r0, 0x3f	; 63
    4b6a:	0f 92       	push	r0
    4b6c:	11 24       	eor	r1, r1
    4b6e:	08 b6       	in	r0, 0x38	; 56
    4b70:	0f 92       	push	r0
    4b72:	18 be       	out	0x38, r1	; 56
    4b74:	8f 93       	push	r24
	PORTB.OUTTGL = 0b00000001;
    4b76:	81 e0       	ldi	r24, 0x01	; 1
    4b78:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x700627>
//	printf("buzz");
//	PORTA.OUTTGL = 0b00000111;
}
    4b7c:	8f 91       	pop	r24
    4b7e:	0f 90       	pop	r0
    4b80:	08 be       	out	0x38, r0	; 56
    4b82:	0f 90       	pop	r0
    4b84:	0f be       	out	0x3f, r0	; 63
    4b86:	0f 90       	pop	r0
    4b88:	1f 90       	pop	r1
    4b8a:	18 95       	reti

00004b8c <__vector_77>:


ISR(TCD0_OVF_vect){
    4b8c:	1f 92       	push	r1
    4b8e:	0f 92       	push	r0
    4b90:	0f b6       	in	r0, 0x3f	; 63
    4b92:	0f 92       	push	r0
    4b94:	11 24       	eor	r1, r1
    4b96:	08 b6       	in	r0, 0x38	; 56
    4b98:	0f 92       	push	r0
    4b9a:	18 be       	out	0x38, r1	; 56
    4b9c:	8f 93       	push	r24
 	PORTA.OUTTGL = 0b00011110;
    4b9e:	8e e1       	ldi	r24, 0x1E	; 30
    4ba0:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x700607>
    4ba4:	8f 91       	pop	r24
    4ba6:	0f 90       	pop	r0
    4ba8:	08 be       	out	0x38, r0	; 56
    4baa:	0f 90       	pop	r0
    4bac:	0f be       	out	0x3f, r0	; 63
    4bae:	0f 90       	pop	r0
    4bb0:	1f 90       	pop	r1
    4bb2:	18 95       	reti

00004bb4 <usart_serial_getchar>:
		read_buffer[loc] = usart_getchar(usart_channel);
		loc++;
		
	}
	return read_buffer;
}
    4bb4:	cf 93       	push	r28
    4bb6:	df 93       	push	r29
    4bb8:	eb 01       	movw	r28, r22
    4bba:	0e 94 fe 18 	call	0x31fc	; 0x31fc <usart_getchar>
    4bbe:	88 83       	st	Y, r24
    4bc0:	df 91       	pop	r29
    4bc2:	cf 91       	pop	r28
    4bc4:	08 95       	ret

00004bc6 <usart_serial_putchar>:
    4bc6:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <usart_putchar>
    4bca:	08 95       	ret

00004bcc <usart_init>:
    4bcc:	0f 93       	push	r16
    4bce:	1f 93       	push	r17
    4bd0:	cf 93       	push	r28
    4bd2:	df 93       	push	r29
    4bd4:	cd b7       	in	r28, 0x3d	; 61
    4bd6:	de b7       	in	r29, 0x3e	; 62
    4bd8:	27 97       	sbiw	r28, 0x07	; 7
    4bda:	cd bf       	out	0x3d, r28	; 61
    4bdc:	de bf       	out	0x3e, r29	; 62
    4bde:	e0 e6       	ldi	r30, 0x60	; 96
    4be0:	f6 e0       	ldi	r31, 0x06	; 6
    4be2:	88 e0       	ldi	r24, 0x08	; 8
    4be4:	81 83       	std	Z+1, r24	; 0x01
    4be6:	94 e0       	ldi	r25, 0x04	; 4
    4be8:	92 83       	std	Z+2, r25	; 0x02
    4bea:	85 83       	std	Z+5, r24	; 0x05
    4bec:	e0 e4       	ldi	r30, 0x40	; 64
    4bee:	f6 e0       	ldi	r31, 0x06	; 6
    4bf0:	81 83       	std	Z+1, r24	; 0x01
    4bf2:	85 83       	std	Z+5, r24	; 0x05
    4bf4:	00 ea       	ldi	r16, 0xA0	; 160
    4bf6:	19 e0       	ldi	r17, 0x09	; 9
    4bf8:	00 93 a1 24 	sts	0x24A1, r16	; 0x8024a1 <stdio_base>
    4bfc:	10 93 a2 24 	sts	0x24A2, r17	; 0x8024a2 <stdio_base+0x1>
    4c00:	83 ee       	ldi	r24, 0xE3	; 227
    4c02:	95 e2       	ldi	r25, 0x25	; 37
    4c04:	80 93 9f 24 	sts	0x249F, r24	; 0x80249f <ptr_put>
    4c08:	90 93 a0 24 	sts	0x24A0, r25	; 0x8024a0 <ptr_put+0x1>
    4c0c:	8a ed       	ldi	r24, 0xDA	; 218
    4c0e:	95 e2       	ldi	r25, 0x25	; 37
    4c10:	80 93 9d 24 	sts	0x249D, r24	; 0x80249d <ptr_get>
    4c14:	90 93 9e 24 	sts	0x249E, r25	; 0x80249e <ptr_get+0x1>
    4c18:	e9 e3       	ldi	r30, 0x39	; 57
    4c1a:	f0 e2       	ldi	r31, 0x20	; 32
    4c1c:	84 81       	ldd	r24, Z+4	; 0x04
    4c1e:	8d 83       	std	Y+5, r24	; 0x05
    4c20:	85 81       	ldd	r24, Z+5	; 0x05
    4c22:	8e 83       	std	Y+6, r24	; 0x06
    4c24:	86 81       	ldd	r24, Z+6	; 0x06
    4c26:	8f 83       	std	Y+7, r24	; 0x07
    4c28:	80 81       	ld	r24, Z
    4c2a:	91 81       	ldd	r25, Z+1	; 0x01
    4c2c:	a2 81       	ldd	r26, Z+2	; 0x02
    4c2e:	b3 81       	ldd	r27, Z+3	; 0x03
    4c30:	89 83       	std	Y+1, r24	; 0x01
    4c32:	9a 83       	std	Y+2, r25	; 0x02
    4c34:	ab 83       	std	Y+3, r26	; 0x03
    4c36:	bc 83       	std	Y+4, r27	; 0x04
    4c38:	60 e1       	ldi	r22, 0x10	; 16
    4c3a:	84 e0       	ldi	r24, 0x04	; 4
    4c3c:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <sysclk_enable_module>
    4c40:	be 01       	movw	r22, r28
    4c42:	6f 5f       	subi	r22, 0xFF	; 255
    4c44:	7f 4f       	sbci	r23, 0xFF	; 255
    4c46:	80 ea       	ldi	r24, 0xA0	; 160
    4c48:	99 e0       	ldi	r25, 0x09	; 9
    4c4a:	0e 94 17 1a 	call	0x342e	; 0x342e <usart_init_rs232>
    4c4e:	63 ed       	ldi	r22, 0xD3	; 211
    4c50:	76 e1       	ldi	r23, 0x16	; 22
    4c52:	8c ee       	ldi	r24, 0xEC	; 236
    4c54:	96 e1       	ldi	r25, 0x16	; 22
    4c56:	0e 94 53 36 	call	0x6ca6	; 0x6ca6 <fdevopen>
    4c5a:	e2 e3       	ldi	r30, 0x32	; 50
    4c5c:	f0 e2       	ldi	r31, 0x20	; 32
    4c5e:	84 81       	ldd	r24, Z+4	; 0x04
    4c60:	8d 83       	std	Y+5, r24	; 0x05
    4c62:	85 81       	ldd	r24, Z+5	; 0x05
    4c64:	8e 83       	std	Y+6, r24	; 0x06
    4c66:	86 81       	ldd	r24, Z+6	; 0x06
    4c68:	8f 83       	std	Y+7, r24	; 0x07
    4c6a:	80 81       	ld	r24, Z
    4c6c:	91 81       	ldd	r25, Z+1	; 0x01
    4c6e:	a2 81       	ldd	r26, Z+2	; 0x02
    4c70:	b3 81       	ldd	r27, Z+3	; 0x03
    4c72:	89 83       	std	Y+1, r24	; 0x01
    4c74:	9a 83       	std	Y+2, r25	; 0x02
    4c76:	ab 83       	std	Y+3, r26	; 0x03
    4c78:	bc 83       	std	Y+4, r27	; 0x04
    4c7a:	60 e1       	ldi	r22, 0x10	; 16
    4c7c:	83 e0       	ldi	r24, 0x03	; 3
    4c7e:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <sysclk_enable_module>
    4c82:	be 01       	movw	r22, r28
    4c84:	6f 5f       	subi	r22, 0xFF	; 255
    4c86:	7f 4f       	sbci	r23, 0xFF	; 255
    4c88:	80 ea       	ldi	r24, 0xA0	; 160
    4c8a:	98 e0       	ldi	r25, 0x08	; 8
    4c8c:	0e 94 17 1a 	call	0x342e	; 0x342e <usart_init_rs232>
    4c90:	80 e1       	ldi	r24, 0x10	; 16
    4c92:	f8 01       	movw	r30, r16
    4c94:	83 83       	std	Z+3, r24	; 0x03
    4c96:	27 96       	adiw	r28, 0x07	; 7
    4c98:	cd bf       	out	0x3d, r28	; 61
    4c9a:	de bf       	out	0x3e, r29	; 62
    4c9c:	df 91       	pop	r29
    4c9e:	cf 91       	pop	r28
    4ca0:	1f 91       	pop	r17
    4ca2:	0f 91       	pop	r16
    4ca4:	08 95       	ret

00004ca6 <__vector_88>:
	
ISR(USARTD0_RXC_vect){
    4ca6:	1f 92       	push	r1
    4ca8:	0f 92       	push	r0
    4caa:	0f b6       	in	r0, 0x3f	; 63
    4cac:	0f 92       	push	r0
    4cae:	11 24       	eor	r1, r1
    4cb0:	08 b6       	in	r0, 0x38	; 56
    4cb2:	0f 92       	push	r0
    4cb4:	18 be       	out	0x38, r1	; 56
    4cb6:	09 b6       	in	r0, 0x39	; 57
    4cb8:	0f 92       	push	r0
    4cba:	19 be       	out	0x39, r1	; 57
    4cbc:	0b b6       	in	r0, 0x3b	; 59
    4cbe:	0f 92       	push	r0
    4cc0:	1b be       	out	0x3b, r1	; 59
    4cc2:	2f 93       	push	r18
    4cc4:	3f 93       	push	r19
    4cc6:	4f 93       	push	r20
    4cc8:	5f 93       	push	r21
    4cca:	6f 93       	push	r22
    4ccc:	7f 93       	push	r23
    4cce:	8f 93       	push	r24
    4cd0:	9f 93       	push	r25
    4cd2:	af 93       	push	r26
    4cd4:	bf 93       	push	r27
    4cd6:	ef 93       	push	r30
    4cd8:	ff 93       	push	r31
	//If we send reset things to the board
	xbee_rx_temporary = USARTD0.DATA;
    4cda:	80 91 a0 09 	lds	r24, 0x09A0	; 0x8009a0 <__TEXT_REGION_LENGTH__+0x7009a0>
    4cde:	80 93 b7 24 	sts	0x24B7, r24	; 0x8024b7 <xbee_rx_temporary>
	printf("We received %c\n", xbee_rx_temporary);
    4ce2:	80 91 b7 24 	lds	r24, 0x24B7	; 0x8024b7 <xbee_rx_temporary>
    4ce6:	28 2f       	mov	r18, r24
    4ce8:	08 2e       	mov	r0, r24
    4cea:	00 0c       	add	r0, r0
    4cec:	33 0b       	sbc	r19, r19
    4cee:	3f 93       	push	r19
    4cf0:	8f 93       	push	r24
    4cf2:	8d e4       	ldi	r24, 0x4D	; 77
    4cf4:	90 e2       	ldi	r25, 0x20	; 32
    4cf6:	9f 93       	push	r25
    4cf8:	8f 93       	push	r24
    4cfa:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
	switch(xbee_rx_temporary){
    4cfe:	e0 91 b7 24 	lds	r30, 0x24B7	; 0x8024b7 <xbee_rx_temporary>
    4d02:	0f 90       	pop	r0
    4d04:	0f 90       	pop	r0
    4d06:	0f 90       	pop	r0
    4d08:	0f 90       	pop	r0
    4d0a:	8e 2f       	mov	r24, r30
    4d0c:	ee 0f       	add	r30, r30
    4d0e:	99 0b       	sbc	r25, r25
    4d10:	aa 0b       	sbc	r26, r26
    4d12:	bb 0b       	sbc	r27, r27
    4d14:	fc 01       	movw	r30, r24
    4d16:	b1 97       	sbiw	r30, 0x21	; 33
    4d18:	ef 33       	cpi	r30, 0x3F	; 63
    4d1a:	f1 05       	cpc	r31, r1
    4d1c:	58 f5       	brcc	.+86     	; 0x4d74 <__vector_88+0xce>
    4d1e:	88 27       	eor	r24, r24
    4d20:	e2 50       	subi	r30, 0x02	; 2
    4d22:	ff 4f       	sbci	r31, 0xFF	; 255
    4d24:	8f 4f       	sbci	r24, 0xFF	; 255
    4d26:	0c 94 85 34 	jmp	0x690a	; 0x690a <__tablejump2__>
		case '!':						//reset MCU 
			wdt_reset_mcu();
    4d2a:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <wdt_reset_mcu>
			break;
    4d2e:	22 c0       	rjmp	.+68     	; 0x4d74 <__vector_88+0xce>
		case '@':						//change to flight state 0
			state = 0;
    4d30:	10 92 b8 24 	sts	0x24B8, r1	; 0x8024b8 <state>
			break;
    4d34:	1f c0       	rjmp	.+62     	; 0x4d74 <__vector_88+0xce>
		case '#':						//change to flight state 1
			state = 1;
    4d36:	81 e0       	ldi	r24, 0x01	; 1
    4d38:	80 93 b8 24 	sts	0x24B8, r24	; 0x8024b8 <state>
			break;
    4d3c:	1b c0       	rjmp	.+54     	; 0x4d74 <__vector_88+0xce>
		case '$':						//change to flight state 2
			state = 2;
    4d3e:	82 e0       	ldi	r24, 0x02	; 2
    4d40:	80 93 b8 24 	sts	0x24B8, r24	; 0x8024b8 <state>
			break;
    4d44:	17 c0       	rjmp	.+46     	; 0x4d74 <__vector_88+0xce>
		case '%':						//change to flight state 3
			state = 3;
    4d46:	83 e0       	ldi	r24, 0x03	; 3
    4d48:	80 93 b8 24 	sts	0x24B8, r24	; 0x8024b8 <state>
			break;
		case '^':						//deploy heatshield
			heatshield_hotwire();
			break;
		case '&':						//deploy parachute and detatch heatshield
			heatshield_solenoid();
    4d4c:	13 c0       	rjmp	.+38     	; 0x4d74 <__vector_88+0xce>
			break;
    4d4e:	34 d8       	rcall	.-3992   	; 0x3db8 <heatshield_hotwire>
		case '*':						//detatching heatshield
			heatshield_detatch_hotwire();
    4d50:	11 c0       	rjmp	.+34     	; 0x4d74 <__vector_88+0xce>
    4d52:	1d d8       	rcall	.-4038   	; 0x3d8e <heatshield_solenoid>
			break;
    4d54:	0f c0       	rjmp	.+30     	; 0x4d74 <__vector_88+0xce>
		case '(':						//buzzer on
			buzzer_counter_init(104, 50);
    4d56:	45 d8       	rcall	.-3958   	; 0x3de2 <heatshield_detatch_hotwire>
    4d58:	0d c0       	rjmp	.+26     	; 0x4d74 <__vector_88+0xce>
    4d5a:	62 e3       	ldi	r22, 0x32	; 50
    4d5c:	70 e0       	ldi	r23, 0x00	; 0
    4d5e:	88 e6       	ldi	r24, 0x68	; 104
			break;
    4d60:	90 e0       	ldi	r25, 0x00	; 0
		case ')':						//buzzer off
			buzzer_counter_init(0, 0);
    4d62:	f7 de       	rcall	.-530    	; 0x4b52 <buzzer_counter_init>
    4d64:	07 c0       	rjmp	.+14     	; 0x4d74 <__vector_88+0xce>
    4d66:	60 e0       	ldi	r22, 0x00	; 0
    4d68:	70 e0       	ldi	r23, 0x00	; 0
			break;
    4d6a:	80 e0       	ldi	r24, 0x00	; 0
		case '_':						//camera on
			camera_on();
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	f1 de       	rcall	.-542    	; 0x4b52 <buzzer_counter_init>
			break;
	}
	
}
    4d70:	01 c0       	rjmp	.+2      	; 0x4d74 <__vector_88+0xce>
    4d72:	55 d8       	rcall	.-3926   	; 0x3e1e <camera_on>
    4d74:	ff 91       	pop	r31
    4d76:	ef 91       	pop	r30
    4d78:	bf 91       	pop	r27
    4d7a:	af 91       	pop	r26
    4d7c:	9f 91       	pop	r25
    4d7e:	8f 91       	pop	r24
    4d80:	7f 91       	pop	r23
    4d82:	6f 91       	pop	r22
    4d84:	5f 91       	pop	r21
    4d86:	4f 91       	pop	r20
    4d88:	3f 91       	pop	r19
    4d8a:	2f 91       	pop	r18
    4d8c:	0f 90       	pop	r0
    4d8e:	0b be       	out	0x3b, r0	; 59
    4d90:	0f 90       	pop	r0
    4d92:	09 be       	out	0x39, r0	; 57
    4d94:	0f 90       	pop	r0
    4d96:	08 be       	out	0x38, r0	; 56
    4d98:	0f 90       	pop	r0
    4d9a:	0f be       	out	0x3f, r0	; 63
    4d9c:	0f 90       	pop	r0
    4d9e:	1f 90       	pop	r1
    4da0:	18 95       	reti

00004da2 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    4da2:	04 c0       	rjmp	.+8      	; 0x4dac <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    4da4:	61 50       	subi	r22, 0x01	; 1
    4da6:	71 09       	sbc	r23, r1
    4da8:	81 09       	sbc	r24, r1
    4daa:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    4dac:	61 15       	cp	r22, r1
    4dae:	71 05       	cpc	r23, r1
    4db0:	81 05       	cpc	r24, r1
    4db2:	91 05       	cpc	r25, r1
    4db4:	b9 f7       	brne	.-18     	; 0x4da4 <__portable_avr_delay_cycles+0x2>
    4db6:	08 95       	ret

00004db8 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    4db8:	00 97       	sbiw	r24, 0x00	; 0
    4dba:	09 f4       	brne	.+2      	; 0x4dbe <sysclk_enable_peripheral_clock+0x6>
    4dbc:	5c c1       	rjmp	.+696    	; 0x5076 <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    4dbe:	80 3c       	cpi	r24, 0xC0	; 192
    4dc0:	91 05       	cpc	r25, r1
    4dc2:	29 f4       	brne	.+10     	; 0x4dce <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    4dc4:	60 e1       	ldi	r22, 0x10	; 16
    4dc6:	80 e0       	ldi	r24, 0x00	; 0
    4dc8:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4dcc:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    4dce:	80 34       	cpi	r24, 0x40	; 64
    4dd0:	24 e0       	ldi	r18, 0x04	; 4
    4dd2:	92 07       	cpc	r25, r18
    4dd4:	29 f4       	brne	.+10     	; 0x4de0 <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    4dd6:	68 e0       	ldi	r22, 0x08	; 8
    4dd8:	80 e0       	ldi	r24, 0x00	; 0
    4dda:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4dde:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    4de0:	81 15       	cp	r24, r1
    4de2:	24 e0       	ldi	r18, 0x04	; 4
    4de4:	92 07       	cpc	r25, r18
    4de6:	29 f4       	brne	.+10     	; 0x4df2 <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    4de8:	64 e0       	ldi	r22, 0x04	; 4
    4dea:	80 e0       	ldi	r24, 0x00	; 0
    4dec:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4df0:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    4df2:	80 38       	cpi	r24, 0x80	; 128
    4df4:	21 e0       	ldi	r18, 0x01	; 1
    4df6:	92 07       	cpc	r25, r18
    4df8:	29 f4       	brne	.+10     	; 0x4e04 <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    4dfa:	62 e0       	ldi	r22, 0x02	; 2
    4dfc:	80 e0       	ldi	r24, 0x00	; 0
    4dfe:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4e02:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    4e04:	81 15       	cp	r24, r1
    4e06:	21 e0       	ldi	r18, 0x01	; 1
    4e08:	92 07       	cpc	r25, r18
    4e0a:	29 f4       	brne	.+10     	; 0x4e16 <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    4e0c:	61 e0       	ldi	r22, 0x01	; 1
    4e0e:	80 e0       	ldi	r24, 0x00	; 0
    4e10:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4e14:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    4e16:	80 38       	cpi	r24, 0x80	; 128
    4e18:	23 e0       	ldi	r18, 0x03	; 3
    4e1a:	92 07       	cpc	r25, r18
    4e1c:	29 f4       	brne	.+10     	; 0x4e28 <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    4e1e:	61 e0       	ldi	r22, 0x01	; 1
    4e20:	81 e0       	ldi	r24, 0x01	; 1
    4e22:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4e26:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    4e28:	80 39       	cpi	r24, 0x90	; 144
    4e2a:	23 e0       	ldi	r18, 0x03	; 3
    4e2c:	92 07       	cpc	r25, r18
    4e2e:	29 f4       	brne	.+10     	; 0x4e3a <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    4e30:	61 e0       	ldi	r22, 0x01	; 1
    4e32:	82 e0       	ldi	r24, 0x02	; 2
    4e34:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4e38:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    4e3a:	81 15       	cp	r24, r1
    4e3c:	22 e0       	ldi	r18, 0x02	; 2
    4e3e:	92 07       	cpc	r25, r18
    4e40:	29 f4       	brne	.+10     	; 0x4e4c <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    4e42:	62 e0       	ldi	r22, 0x02	; 2
    4e44:	81 e0       	ldi	r24, 0x01	; 1
    4e46:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4e4a:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    4e4c:	80 34       	cpi	r24, 0x40	; 64
    4e4e:	22 e0       	ldi	r18, 0x02	; 2
    4e50:	92 07       	cpc	r25, r18
    4e52:	29 f4       	brne	.+10     	; 0x4e5e <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    4e54:	62 e0       	ldi	r22, 0x02	; 2
    4e56:	82 e0       	ldi	r24, 0x02	; 2
    4e58:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4e5c:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    4e5e:	81 15       	cp	r24, r1
    4e60:	23 e0       	ldi	r18, 0x03	; 3
    4e62:	92 07       	cpc	r25, r18
    4e64:	29 f4       	brne	.+10     	; 0x4e70 <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    4e66:	64 e0       	ldi	r22, 0x04	; 4
    4e68:	81 e0       	ldi	r24, 0x01	; 1
    4e6a:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4e6e:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    4e70:	80 32       	cpi	r24, 0x20	; 32
    4e72:	23 e0       	ldi	r18, 0x03	; 3
    4e74:	92 07       	cpc	r25, r18
    4e76:	29 f4       	brne	.+10     	; 0x4e82 <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    4e78:	64 e0       	ldi	r22, 0x04	; 4
    4e7a:	82 e0       	ldi	r24, 0x02	; 2
    4e7c:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4e80:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    4e82:	81 15       	cp	r24, r1
    4e84:	28 e0       	ldi	r18, 0x08	; 8
    4e86:	92 07       	cpc	r25, r18
    4e88:	29 f4       	brne	.+10     	; 0x4e94 <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    4e8a:	61 e0       	ldi	r22, 0x01	; 1
    4e8c:	83 e0       	ldi	r24, 0x03	; 3
    4e8e:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4e92:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    4e94:	81 15       	cp	r24, r1
    4e96:	29 e0       	ldi	r18, 0x09	; 9
    4e98:	92 07       	cpc	r25, r18
    4e9a:	29 f4       	brne	.+10     	; 0x4ea6 <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    4e9c:	61 e0       	ldi	r22, 0x01	; 1
    4e9e:	84 e0       	ldi	r24, 0x04	; 4
    4ea0:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4ea4:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    4ea6:	81 15       	cp	r24, r1
    4ea8:	2a e0       	ldi	r18, 0x0A	; 10
    4eaa:	92 07       	cpc	r25, r18
    4eac:	29 f4       	brne	.+10     	; 0x4eb8 <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    4eae:	61 e0       	ldi	r22, 0x01	; 1
    4eb0:	85 e0       	ldi	r24, 0x05	; 5
    4eb2:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4eb6:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    4eb8:	81 15       	cp	r24, r1
    4eba:	2b e0       	ldi	r18, 0x0B	; 11
    4ebc:	92 07       	cpc	r25, r18
    4ebe:	29 f4       	brne	.+10     	; 0x4eca <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    4ec0:	61 e0       	ldi	r22, 0x01	; 1
    4ec2:	86 e0       	ldi	r24, 0x06	; 6
    4ec4:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4ec8:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    4eca:	80 34       	cpi	r24, 0x40	; 64
    4ecc:	28 e0       	ldi	r18, 0x08	; 8
    4ece:	92 07       	cpc	r25, r18
    4ed0:	29 f4       	brne	.+10     	; 0x4edc <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    4ed2:	62 e0       	ldi	r22, 0x02	; 2
    4ed4:	83 e0       	ldi	r24, 0x03	; 3
    4ed6:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4eda:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    4edc:	80 34       	cpi	r24, 0x40	; 64
    4ede:	29 e0       	ldi	r18, 0x09	; 9
    4ee0:	92 07       	cpc	r25, r18
    4ee2:	29 f4       	brne	.+10     	; 0x4eee <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    4ee4:	62 e0       	ldi	r22, 0x02	; 2
    4ee6:	84 e0       	ldi	r24, 0x04	; 4
    4ee8:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4eec:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    4eee:	80 34       	cpi	r24, 0x40	; 64
    4ef0:	2a e0       	ldi	r18, 0x0A	; 10
    4ef2:	92 07       	cpc	r25, r18
    4ef4:	29 f4       	brne	.+10     	; 0x4f00 <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    4ef6:	62 e0       	ldi	r22, 0x02	; 2
    4ef8:	85 e0       	ldi	r24, 0x05	; 5
    4efa:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4efe:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    4f00:	80 34       	cpi	r24, 0x40	; 64
    4f02:	2b e0       	ldi	r18, 0x0B	; 11
    4f04:	92 07       	cpc	r25, r18
    4f06:	29 f4       	brne	.+10     	; 0x4f12 <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    4f08:	62 e0       	ldi	r22, 0x02	; 2
    4f0a:	86 e0       	ldi	r24, 0x06	; 6
    4f0c:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4f10:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    4f12:	80 39       	cpi	r24, 0x90	; 144
    4f14:	28 e0       	ldi	r18, 0x08	; 8
    4f16:	92 07       	cpc	r25, r18
    4f18:	29 f4       	brne	.+10     	; 0x4f24 <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    4f1a:	64 e0       	ldi	r22, 0x04	; 4
    4f1c:	83 e0       	ldi	r24, 0x03	; 3
    4f1e:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4f22:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    4f24:	80 39       	cpi	r24, 0x90	; 144
    4f26:	29 e0       	ldi	r18, 0x09	; 9
    4f28:	92 07       	cpc	r25, r18
    4f2a:	29 f4       	brne	.+10     	; 0x4f36 <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    4f2c:	64 e0       	ldi	r22, 0x04	; 4
    4f2e:	84 e0       	ldi	r24, 0x04	; 4
    4f30:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4f34:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    4f36:	80 39       	cpi	r24, 0x90	; 144
    4f38:	2a e0       	ldi	r18, 0x0A	; 10
    4f3a:	92 07       	cpc	r25, r18
    4f3c:	29 f4       	brne	.+10     	; 0x4f48 <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    4f3e:	64 e0       	ldi	r22, 0x04	; 4
    4f40:	85 e0       	ldi	r24, 0x05	; 5
    4f42:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4f46:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    4f48:	80 39       	cpi	r24, 0x90	; 144
    4f4a:	2b e0       	ldi	r18, 0x0B	; 11
    4f4c:	92 07       	cpc	r25, r18
    4f4e:	29 f4       	brne	.+10     	; 0x4f5a <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    4f50:	64 e0       	ldi	r22, 0x04	; 4
    4f52:	86 e0       	ldi	r24, 0x06	; 6
    4f54:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4f58:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    4f5a:	80 3c       	cpi	r24, 0xC0	; 192
    4f5c:	28 e0       	ldi	r18, 0x08	; 8
    4f5e:	92 07       	cpc	r25, r18
    4f60:	29 f4       	brne	.+10     	; 0x4f6c <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    4f62:	68 e0       	ldi	r22, 0x08	; 8
    4f64:	83 e0       	ldi	r24, 0x03	; 3
    4f66:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4f6a:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    4f6c:	80 3c       	cpi	r24, 0xC0	; 192
    4f6e:	29 e0       	ldi	r18, 0x09	; 9
    4f70:	92 07       	cpc	r25, r18
    4f72:	29 f4       	brne	.+10     	; 0x4f7e <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    4f74:	68 e0       	ldi	r22, 0x08	; 8
    4f76:	84 e0       	ldi	r24, 0x04	; 4
    4f78:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4f7c:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    4f7e:	80 3c       	cpi	r24, 0xC0	; 192
    4f80:	2a e0       	ldi	r18, 0x0A	; 10
    4f82:	92 07       	cpc	r25, r18
    4f84:	29 f4       	brne	.+10     	; 0x4f90 <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    4f86:	68 e0       	ldi	r22, 0x08	; 8
    4f88:	85 e0       	ldi	r24, 0x05	; 5
    4f8a:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4f8e:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    4f90:	80 3c       	cpi	r24, 0xC0	; 192
    4f92:	2b e0       	ldi	r18, 0x0B	; 11
    4f94:	92 07       	cpc	r25, r18
    4f96:	29 f4       	brne	.+10     	; 0x4fa2 <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    4f98:	68 e0       	ldi	r22, 0x08	; 8
    4f9a:	86 e0       	ldi	r24, 0x06	; 6
    4f9c:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4fa0:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    4fa2:	80 3a       	cpi	r24, 0xA0	; 160
    4fa4:	28 e0       	ldi	r18, 0x08	; 8
    4fa6:	92 07       	cpc	r25, r18
    4fa8:	29 f4       	brne	.+10     	; 0x4fb4 <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    4faa:	60 e1       	ldi	r22, 0x10	; 16
    4fac:	83 e0       	ldi	r24, 0x03	; 3
    4fae:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4fb2:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    4fb4:	80 3a       	cpi	r24, 0xA0	; 160
    4fb6:	29 e0       	ldi	r18, 0x09	; 9
    4fb8:	92 07       	cpc	r25, r18
    4fba:	29 f4       	brne	.+10     	; 0x4fc6 <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    4fbc:	60 e1       	ldi	r22, 0x10	; 16
    4fbe:	84 e0       	ldi	r24, 0x04	; 4
    4fc0:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4fc4:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    4fc6:	80 3a       	cpi	r24, 0xA0	; 160
    4fc8:	2a e0       	ldi	r18, 0x0A	; 10
    4fca:	92 07       	cpc	r25, r18
    4fcc:	29 f4       	brne	.+10     	; 0x4fd8 <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    4fce:	60 e1       	ldi	r22, 0x10	; 16
    4fd0:	85 e0       	ldi	r24, 0x05	; 5
    4fd2:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4fd6:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    4fd8:	80 3a       	cpi	r24, 0xA0	; 160
    4fda:	2b e0       	ldi	r18, 0x0B	; 11
    4fdc:	92 07       	cpc	r25, r18
    4fde:	29 f4       	brne	.+10     	; 0x4fea <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    4fe0:	60 e1       	ldi	r22, 0x10	; 16
    4fe2:	86 e0       	ldi	r24, 0x06	; 6
    4fe4:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4fe8:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    4fea:	80 3b       	cpi	r24, 0xB0	; 176
    4fec:	28 e0       	ldi	r18, 0x08	; 8
    4fee:	92 07       	cpc	r25, r18
    4ff0:	29 f4       	brne	.+10     	; 0x4ffc <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    4ff2:	60 e2       	ldi	r22, 0x20	; 32
    4ff4:	83 e0       	ldi	r24, 0x03	; 3
    4ff6:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    4ffa:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    4ffc:	80 3b       	cpi	r24, 0xB0	; 176
    4ffe:	29 e0       	ldi	r18, 0x09	; 9
    5000:	92 07       	cpc	r25, r18
    5002:	29 f4       	brne	.+10     	; 0x500e <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    5004:	60 e2       	ldi	r22, 0x20	; 32
    5006:	84 e0       	ldi	r24, 0x04	; 4
    5008:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    500c:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    500e:	80 3b       	cpi	r24, 0xB0	; 176
    5010:	2a e0       	ldi	r18, 0x0A	; 10
    5012:	92 07       	cpc	r25, r18
    5014:	29 f4       	brne	.+10     	; 0x5020 <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    5016:	60 e2       	ldi	r22, 0x20	; 32
    5018:	85 e0       	ldi	r24, 0x05	; 5
    501a:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    501e:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    5020:	80 3b       	cpi	r24, 0xB0	; 176
    5022:	2b e0       	ldi	r18, 0x0B	; 11
    5024:	92 07       	cpc	r25, r18
    5026:	29 f4       	brne	.+10     	; 0x5032 <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    5028:	60 e2       	ldi	r22, 0x20	; 32
    502a:	86 e0       	ldi	r24, 0x06	; 6
    502c:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    5030:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    5032:	80 38       	cpi	r24, 0x80	; 128
    5034:	24 e0       	ldi	r18, 0x04	; 4
    5036:	92 07       	cpc	r25, r18
    5038:	29 f4       	brne	.+10     	; 0x5044 <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    503a:	60 e4       	ldi	r22, 0x40	; 64
    503c:	83 e0       	ldi	r24, 0x03	; 3
    503e:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    5042:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    5044:	80 39       	cpi	r24, 0x90	; 144
    5046:	24 e0       	ldi	r18, 0x04	; 4
    5048:	92 07       	cpc	r25, r18
    504a:	29 f4       	brne	.+10     	; 0x5056 <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    504c:	60 e4       	ldi	r22, 0x40	; 64
    504e:	84 e0       	ldi	r24, 0x04	; 4
    5050:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    5054:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    5056:	80 3a       	cpi	r24, 0xA0	; 160
    5058:	24 e0       	ldi	r18, 0x04	; 4
    505a:	92 07       	cpc	r25, r18
    505c:	29 f4       	brne	.+10     	; 0x5068 <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    505e:	60 e4       	ldi	r22, 0x40	; 64
    5060:	85 e0       	ldi	r24, 0x05	; 5
    5062:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    5066:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    5068:	80 3b       	cpi	r24, 0xB0	; 176
    506a:	94 40       	sbci	r25, 0x04	; 4
    506c:	21 f4       	brne	.+8      	; 0x5076 <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    506e:	60 e4       	ldi	r22, 0x40	; 64
    5070:	86 e0       	ldi	r24, 0x06	; 6
    5072:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <sysclk_enable_module>
    5076:	08 95       	ret

00005078 <packetlen>:
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
	{
		if (buff[i] == '\n')
    5078:	fc 01       	movw	r30, r24
    507a:	20 81       	ld	r18, Z
    507c:	2a 30       	cpi	r18, 0x0A	; 10
    507e:	79 f0       	breq	.+30     	; 0x509e <packetlen+0x26>
    5080:	31 96       	adiw	r30, 0x01	; 1
//void blink (int, int);
uint16_t packetlen(const uint8_t* buff);
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
    5082:	21 e0       	ldi	r18, 0x01	; 1
    5084:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (buff[i] == '\n')
    5086:	81 91       	ld	r24, Z+
    5088:	8a 30       	cpi	r24, 0x0A	; 10
    508a:	61 f0       	breq	.+24     	; 0x50a4 <packetlen+0x2c>
//void blink (int, int);
uint16_t packetlen(const uint8_t* buff);
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
    508c:	2f 5f       	subi	r18, 0xFF	; 255
    508e:	3f 4f       	sbci	r19, 0xFF	; 255
    5090:	21 15       	cp	r18, r1
    5092:	84 e0       	ldi	r24, 0x04	; 4
    5094:	38 07       	cpc	r19, r24
    5096:	b9 f7       	brne	.-18     	; 0x5086 <packetlen+0xe>
	{
		if (buff[i] == '\n')
		return i;
	}
	return 1024;
    5098:	80 e0       	ldi	r24, 0x00	; 0
    509a:	94 e0       	ldi	r25, 0x04	; 4
    509c:	08 95       	ret
//void blink (int, int);
uint16_t packetlen(const uint8_t* buff);
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
    509e:	80 e0       	ldi	r24, 0x00	; 0
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	08 95       	ret
    50a4:	82 2f       	mov	r24, r18
    50a6:	93 2f       	mov	r25, r19
	{
		if (buff[i] == '\n')
		return i;
	}
	return 1024;
}
    50a8:	08 95       	ret

000050aa <main>:

int main (void)
{
    50aa:	cf 93       	push	r28
    50ac:	df 93       	push	r29
    50ae:	cd b7       	in	r28, 0x3d	; 61
    50b0:	de b7       	in	r29, 0x3e	; 62
    50b2:	c2 5c       	subi	r28, 0xC2	; 194
    50b4:	d2 40       	sbci	r29, 0x02	; 2
    50b6:	cd bf       	out	0x3d, r28	; 61
    50b8:	de bf       	out	0x3e, r29	; 62
	
	sysclk_init();
    50ba:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <sysclk_init>
	//sysclk_enable_peripheral_clock(&TCF0);
	sysclk_enable_peripheral_clock(&TCD0);
    50be:	80 e0       	ldi	r24, 0x00	; 0
    50c0:	99 e0       	ldi	r25, 0x09	; 9
    50c2:	7a de       	rcall	.-780    	; 0x4db8 <sysclk_enable_peripheral_clock>


	sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
    50c4:	68 e0       	ldi	r22, 0x08	; 8
    50c6:	83 e0       	ldi	r24, 0x03	; 3
    50c8:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C,SYSCLK_HIRES);
    50cc:	64 e0       	ldi	r22, 0x04	; 4
    50ce:	83 e0       	ldi	r24, 0x03	; 3
    50d0:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    50d4:	64 e0       	ldi	r22, 0x04	; 4
    50d6:	84 e0       	ldi	r24, 0x04	; 4
    50d8:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_E,SYSCLK_HIRES);	
    50dc:	64 e0       	ldi	r22, 0x04	; 4
    50de:	85 e0       	ldi	r24, 0x05	; 5
    50e0:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    50e4:	64 e0       	ldi	r22, 0x04	; 4
    50e6:	86 e0       	ldi	r24, 0x06	; 6
    50e8:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <sysclk_enable_module>
// 	PORTD.OUTSET = 0b00001000;
// 	timer_founter_init(3124, 0);
// 	delay_ms(15000);
// 	PORTD.OUTCLR = 0b00001000;
//	timer_founter_init(3124, 10);
	sysclk_enable_peripheral_clock(&TCE0);
    50ec:	80 e0       	ldi	r24, 0x00	; 0
    50ee:	9a e0       	ldi	r25, 0x0A	; 10
	sysclk_enable_peripheral_clock(&TCC0);
    50f0:	63 de       	rcall	.-826    	; 0x4db8 <sysclk_enable_peripheral_clock>
    50f2:	80 e0       	ldi	r24, 0x00	; 0
	//timer_counter_init(6249, 10);
	//heatshield_servo();
		
	sysclk_enable_peripheral_clock(&USARTC0);
    50f4:	98 e0       	ldi	r25, 0x08	; 8
    50f6:	60 de       	rcall	.-832    	; 0x4db8 <sysclk_enable_peripheral_clock>
    50f8:	80 ea       	ldi	r24, 0xA0	; 160
	sysclk_enable_peripheral_clock(&USARTD0);
    50fa:	98 e0       	ldi	r25, 0x08	; 8
    50fc:	5d de       	rcall	.-838    	; 0x4db8 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTD1);
    50fe:	80 ea       	ldi	r24, 0xA0	; 160
	usart_init();
    5100:	99 e0       	ldi	r25, 0x09	; 9
	
	sysclk_enable_peripheral_clock(&SPIC);
    5102:	5a de       	rcall	.-844    	; 0x4db8 <sysclk_enable_peripheral_clock>
    5104:	80 eb       	ldi	r24, 0xB0	; 176
	spi_init();
    5106:	99 e0       	ldi	r25, 0x09	; 9
    5108:	57 de       	rcall	.-850    	; 0x4db8 <sysclk_enable_peripheral_clock>
	ms5607init();
    510a:	60 dd       	rcall	.-1344   	; 0x4bcc <usart_init>
    510c:	80 ec       	ldi	r24, 0xC0	; 192
	
	sysclk_enable_peripheral_clock(&ADCA);
    510e:	98 e0       	ldi	r25, 0x08	; 8
    5110:	53 de       	rcall	.-858    	; 0x4db8 <sysclk_enable_peripheral_clock>
    5112:	5a da       	rcall	.-2892   	; 0x45c8 <spi_init>
    5114:	8f da       	rcall	.-2786   	; 0x4634 <ms5607init>
	adc_init();
    5116:	80 e0       	ldi	r24, 0x00	; 0
    5118:	92 e0       	ldi	r25, 0x02	; 2
	
	twi_options_t m_options = {
    511a:	4e de       	rcall	.-868    	; 0x4db8 <sysclk_enable_peripheral_clock>
    511c:	eb dc       	rcall	.-1578   	; 0x4af4 <adc_init>
    511e:	8e 01       	movw	r16, r28
    5120:	0f 5f       	subi	r16, 0xFF	; 255
    5122:	1f 4f       	sbci	r17, 0xFF	; 255
    5124:	89 e0       	ldi	r24, 0x09	; 9
    5126:	d8 01       	movw	r26, r16
    5128:	1d 92       	st	X+, r1
    512a:	8a 95       	dec	r24
    512c:	e9 f7       	brne	.-6      	; 0x5128 <main+0x7e>
    512e:	80 e8       	ldi	r24, 0x80	; 128
    5130:	9a e1       	ldi	r25, 0x1A	; 26
    5132:	a6 e0       	ldi	r26, 0x06	; 6
    5134:	b0 e0       	ldi	r27, 0x00	; 0
    5136:	89 83       	std	Y+1, r24	; 0x01
    5138:	9a 83       	std	Y+2, r25	; 0x02
    513a:	ab 83       	std	Y+3, r26	; 0x03
    513c:	bc 83       	std	Y+4, r27	; 0x04
    513e:	83 e2       	ldi	r24, 0x23	; 35
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	a0 e0       	ldi	r26, 0x00	; 0
    5144:	b0 e0       	ldi	r27, 0x00	; 0
    5146:	8d 83       	std	Y+5, r24	; 0x05
		.speed = 400000,
		.speed_reg = TWI_BAUD(32000000, 400000),
	};
	
	sysclk_enable_peripheral_clock(&TWIC);
    5148:	9e 83       	std	Y+6, r25	; 0x06
    514a:	af 83       	std	Y+7, r26	; 0x07
    514c:	b8 87       	std	Y+8, r27	; 0x08
	twi_master_init(&TWIC, &m_options);
    514e:	80 e8       	ldi	r24, 0x80	; 128
    5150:	94 e0       	ldi	r25, 0x04	; 4
    5152:	32 de       	rcall	.-924    	; 0x4db8 <sysclk_enable_peripheral_clock>
    5154:	b8 01       	movw	r22, r16
    5156:	80 e8       	ldi	r24, 0x80	; 128
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    5158:	94 e0       	ldi	r25, 0x04	; 4
    515a:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <twi_master_init>
    515e:	e0 e8       	ldi	r30, 0x80	; 128
    5160:	f4 e0       	ldi	r31, 0x04	; 4
	twi_master_enable(&TWIC);
	init_imu();
    5162:	81 81       	ldd	r24, Z+1	; 0x01
    5164:	88 60       	ori	r24, 0x08	; 8
	float tiltZ;	
	
	//printf("Is this thing on?\n");
	
	//printf((const char*)gps_data.latdegrees);
	PressData pdi = get_pressure();
    5166:	81 83       	std	Z+1, r24	; 0x01
    5168:	0e 94 a5 04 	call	0x94a	; 0x94a <init_imu>
    516c:	e2 da       	rcall	.-2620   	; 0x4732 <get_pressure>
    516e:	c1 5a       	subi	r28, 0xA1	; 161
    5170:	dd 4f       	sbci	r29, 0xFD	; 253
    5172:	28 83       	st	Y, r18
    5174:	cf 55       	subi	r28, 0x5F	; 95
    5176:	d2 40       	sbci	r29, 0x02	; 2
    5178:	c0 5a       	subi	r28, 0xA0	; 160
    517a:	dd 4f       	sbci	r29, 0xFD	; 253
    517c:	38 83       	st	Y, r19
    517e:	c0 56       	subi	r28, 0x60	; 96
    5180:	d2 40       	sbci	r29, 0x02	; 2
    5182:	cf 59       	subi	r28, 0x9F	; 159
    5184:	dd 4f       	sbci	r29, 0xFD	; 253
    5186:	48 83       	st	Y, r20
    5188:	c1 56       	subi	r28, 0x61	; 97
    518a:	d2 40       	sbci	r29, 0x02	; 2
    518c:	ce 59       	subi	r28, 0x9E	; 158
    518e:	dd 4f       	sbci	r29, 0xFD	; 253
    5190:	58 83       	st	Y, r21
    5192:	c2 56       	subi	r28, 0x62	; 98
    5194:	d2 40       	sbci	r29, 0x02	; 2
    5196:	cd 59       	subi	r28, 0x9D	; 157
    5198:	dd 4f       	sbci	r29, 0xFD	; 253
    519a:	68 83       	st	Y, r22
    519c:	c3 56       	subi	r28, 0x63	; 99
    519e:	d2 40       	sbci	r29, 0x02	; 2
    51a0:	cc 59       	subi	r28, 0x9C	; 156
    51a2:	dd 4f       	sbci	r29, 0xFD	; 253
    51a4:	78 83       	st	Y, r23
    51a6:	c4 56       	subi	r28, 0x64	; 100
    51a8:	d2 40       	sbci	r29, 0x02	; 2
    51aa:	cb 59       	subi	r28, 0x9B	; 155
    51ac:	dd 4f       	sbci	r29, 0xFD	; 253
    51ae:	88 83       	st	Y, r24
    51b0:	c5 56       	subi	r28, 0x65	; 101
    51b2:	d2 40       	sbci	r29, 0x02	; 2
    51b4:	ca 59       	subi	r28, 0x9A	; 154
    51b6:	dd 4f       	sbci	r29, 0xFD	; 253
    51b8:	98 83       	st	Y, r25
	int32_t initial = pdi.P;
    51ba:	c6 56       	subi	r28, 0x66	; 102
    51bc:	d2 40       	sbci	r29, 0x02	; 2
    51be:	cd 59       	subi	r28, 0x9D	; 157
    51c0:	dd 4f       	sbci	r29, 0xFD	; 253
    51c2:	28 81       	ld	r18, Y
    51c4:	39 81       	ldd	r19, Y+1	; 0x01
    51c6:	4a 81       	ldd	r20, Y+2	; 0x02
    51c8:	5b 81       	ldd	r21, Y+3	; 0x03
    51ca:	c3 56       	subi	r28, 0x63	; 99
    51cc:	d2 40       	sbci	r29, 0x02	; 2
    51ce:	c1 54       	subi	r28, 0x41	; 65
    51d0:	dd 4f       	sbci	r29, 0xFD	; 253
    51d2:	28 83       	st	Y, r18
    51d4:	39 83       	std	Y+1, r19	; 0x01
    51d6:	4a 83       	std	Y+2, r20	; 0x02
    51d8:	5b 83       	std	Y+3, r21	; 0x03
	//initial_altitude = Get_altitude(101300, initial);
	//timer_founter_init(62499, 5);

	//timer_dounter_init(12500, 10);
	
	init_GPS_pins_and_usart();
    51da:	cf 5b       	subi	r28, 0xBF	; 191
    51dc:	d2 40       	sbci	r29, 0x02	; 2
	init_gps_interrupts();
    51de:	0e 94 9f 1b 	call	0x373e	; 0x373e <init_GPS_pins_and_usart>
	init_gps_buffers();
    51e2:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <init_gps_interrupts>
// 	delay_ms(1);
// 	PORTD_OUTCLR = 0b00100000;
	//delay_ms(5000);
	//printf("Hello World! \n");

	buzzer_on();
    51e6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <init_gps_buffers>
	TCC0.INTCTRLA = 0b00000001;
    51ea:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <buzzer_on>
    51ee:	81 e0       	ldi	r24, 0x01	; 1
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    51f0:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    51f4:	e0 ea       	ldi	r30, 0xA0	; 160
    51f6:	f0 e0       	ldi	r31, 0x00	; 0
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    51f8:	87 e0       	ldi	r24, 0x07	; 7
    51fa:	82 83       	std	Z+2, r24	; 0x02
    51fc:	82 81       	ldd	r24, Z+2	; 0x02
		PMIC.INTPRI = 0;
    51fe:	8f 77       	andi	r24, 0x7F	; 127
	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);
	cpu_irq_enable();
    5200:	82 83       	std	Z+2, r24	; 0x02
	uint32_t temperature;
	//uint32_t initial_pressure = get_pressure();
	int32_t altitude;
	int32_t initial_altitude = 0;
	int32_t smooth_altitude = 0;
	int32_t max_altitude = 0;
    5202:	11 82       	std	Z+1, r1	; 0x01
    5204:	78 94       	sei
    5206:	c5 54       	subi	r28, 0x45	; 69
    5208:	dd 4f       	sbci	r29, 0xFD	; 253
    520a:	18 82       	st	Y, r1
    520c:	19 82       	std	Y+1, r1	; 0x01
    520e:	1a 82       	std	Y+2, r1	; 0x02
    5210:	1b 82       	std	Y+3, r1	; 0x03
	uint32_t pressure;
	uint32_t temperature;
	//uint32_t initial_pressure = get_pressure();
	int32_t altitude;
	int32_t initial_altitude = 0;
	int32_t smooth_altitude = 0;
    5212:	cb 5b       	subi	r28, 0xBB	; 187
    5214:	d2 40       	sbci	r29, 0x02	; 2
    5216:	c1 56       	subi	r28, 0x61	; 97
    5218:	dd 4f       	sbci	r29, 0xFD	; 253
    521a:	18 82       	st	Y, r1
    521c:	19 82       	std	Y+1, r1	; 0x01
    521e:	1a 82       	std	Y+2, r1	; 0x02
    5220:	1b 82       	std	Y+3, r1	; 0x03
	uint32_t time_ms;
	uint32_t cycles = 0;
	
	
	uint16_t teamID = 5186;
	uint32_t my_time = 0;
    5222:	cf 59       	subi	r28, 0x9F	; 159
    5224:	d2 40       	sbci	r29, 0x02	; 2
    5226:	c1 2c       	mov	r12, r1
			{
				//printf("GGA!!!\n");
				
				ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
				{
					memcpy(gpstmp, gpgga_buff, 85);
    5228:	d1 2c       	mov	r13, r1
    522a:	76 01       	movw	r14, r12
    522c:	4e 01       	movw	r8, r28
    522e:	36 ef       	ldi	r19, 0xF6	; 246
    5230:	83 1a       	sub	r8, r19
			tiltX,tiltY,tiltZ,state};*/
		//temperature = 42;
		//NEED TO MOVE FLIGHT STATE BACK TO THE END OF THIS LINE
		
		printf("$%u,%"PRIu32",%u,%"PRIi32",%"PRIi32",%"PRIi32",%f,%"PRIi32",%"PRIi32",%"PRIi32",%"PRIi32",%"PRIi32",%f,%f,%f,%u\n",teamID,my_time,packetCount,altitude,pressure,(TEMP + 50) / 100,voltage,GPSTime,GPSLat,GPSLong,GPSAlt,GPSSats,smooth_x,smooth_y,smooth_z,state);
		sprintf(openlogger,"$%u,%"PRIu32",%u,%"PRIi32",%"PRIi32",%"PRIi32",%f,%"PRIi32",%"PRIi32",%"PRIi32",%"PRIi32",%"PRIi32",%f,%f,%f,%u\n",teamID,my_time,packetCount,altitude,pressure,(TEMP + 50) / 100,voltage,GPSTime,GPSLat,GPSLong,GPSAlt,GPSSats,smooth_x,smooth_y,smooth_z,state);
    5232:	3d ef       	ldi	r19, 0xFD	; 253
    5234:	93 0a       	sbc	r9, r19
    5236:	ae 01       	movw	r20, r28
    5238:	46 5f       	subi	r20, 0xF6	; 246
    523a:	5f 4f       	sbci	r21, 0xFF	; 255
    523c:	c3 57       	subi	r28, 0x73	; 115
    523e:	dd 4f       	sbci	r29, 0xFD	; 253
    5240:	48 83       	st	Y, r20
    5242:	59 83       	std	Y+1, r21	; 0x01
    5244:	cd 58       	subi	r28, 0x8D	; 141
    5246:	d2 40       	sbci	r29, 0x02	; 2
    5248:	c9 56       	subi	r28, 0x69	; 105
    524a:	dd 4f       	sbci	r29, 0xFD	; 253
    524c:	c8 82       	st	Y, r12
//  	PORTA_OUT = 0b00011110;
//  	delay_ms(250);
//  	PORTA_OUT = 0b00000000;
//  	delay_ms(250);
		
		PressData pd = get_pressure();
    524e:	d9 82       	std	Y+1, r13	; 0x01
    5250:	c7 59       	subi	r28, 0x97	; 151
    5252:	d2 40       	sbci	r29, 0x02	; 2
    5254:	6e da       	rcall	.-2852   	; 0x4732 <get_pressure>
    5256:	26 2e       	mov	r2, r22
    5258:	17 2f       	mov	r17, r23
    525a:	08 2f       	mov	r16, r24
    525c:	b9 2e       	mov	r11, r25
    525e:	cb 57       	subi	r28, 0x7B	; 123
    5260:	dd 4f       	sbci	r29, 0xFD	; 253
    5262:	28 83       	st	Y, r18
    5264:	c5 58       	subi	r28, 0x85	; 133
    5266:	d2 40       	sbci	r29, 0x02	; 2
    5268:	ca 57       	subi	r28, 0x7A	; 122
    526a:	dd 4f       	sbci	r29, 0xFD	; 253
    526c:	38 83       	st	Y, r19
    526e:	c6 58       	subi	r28, 0x86	; 134
    5270:	d2 40       	sbci	r29, 0x02	; 2
    5272:	c9 57       	subi	r28, 0x79	; 121
    5274:	dd 4f       	sbci	r29, 0xFD	; 253
    5276:	48 83       	st	Y, r20
    5278:	c7 58       	subi	r28, 0x87	; 135
    527a:	d2 40       	sbci	r29, 0x02	; 2
    527c:	c8 57       	subi	r28, 0x78	; 120
    527e:	dd 4f       	sbci	r29, 0xFD	; 253
    5280:	58 83       	st	Y, r21
    5282:	c8 58       	subi	r28, 0x88	; 136
    5284:	d2 40       	sbci	r29, 0x02	; 2
    5286:	c7 57       	subi	r28, 0x77	; 119
    5288:	dd 4f       	sbci	r29, 0xFD	; 253
    528a:	68 83       	st	Y, r22
    528c:	c9 58       	subi	r28, 0x89	; 137
    528e:	d2 40       	sbci	r29, 0x02	; 2
    5290:	c6 57       	subi	r28, 0x76	; 118
    5292:	dd 4f       	sbci	r29, 0xFD	; 253
    5294:	78 83       	st	Y, r23
    5296:	ca 58       	subi	r28, 0x8A	; 138
    5298:	d2 40       	sbci	r29, 0x02	; 2
    529a:	c5 57       	subi	r28, 0x75	; 117
    529c:	dd 4f       	sbci	r29, 0xFD	; 253
    529e:	88 83       	st	Y, r24
    52a0:	cb 58       	subi	r28, 0x8B	; 139
    52a2:	d2 40       	sbci	r29, 0x02	; 2
    52a4:	c4 57       	subi	r28, 0x74	; 116
    52a6:	dd 4f       	sbci	r29, 0xFD	; 253
    52a8:	98 83       	st	Y, r25
		
		pressure = pd.P;
		TEMP = pd.TEMP;
    52aa:	cc 58       	subi	r28, 0x8C	; 140
    52ac:	d2 40       	sbci	r29, 0x02	; 2
    52ae:	cb 57       	subi	r28, 0x7B	; 123
    52b0:	dd 4f       	sbci	r29, 0xFD	; 253
    52b2:	88 81       	ld	r24, Y
    52b4:	99 81       	ldd	r25, Y+1	; 0x01
    52b6:	aa 81       	ldd	r26, Y+2	; 0x02
    52b8:	bb 81       	ldd	r27, Y+3	; 0x03
    52ba:	c5 58       	subi	r28, 0x85	; 133
    52bc:	d2 40       	sbci	r29, 0x02	; 2
    52be:	80 93 a7 24 	sts	0x24A7, r24	; 0x8024a7 <TEMP>
    52c2:	90 93 a8 24 	sts	0x24A8, r25	; 0x8024a8 <TEMP+0x1>
    52c6:	a0 93 a9 24 	sts	0x24A9, r26	; 0x8024a9 <TEMP+0x2>
// 		pressure = get_pressure();
// 		temperature = getTemperature();
		//printf("Pressure = %lu\n", pressure);
		//temperature = (temperature/100)+273;
		//printf("initial pressure: %lu \n", initial_pressure);
		altitude = Get_altitude(initial, pressure);
    52ca:	b0 93 aa 24 	sts	0x24AA, r27	; 0x8024aa <TEMP+0x3>
    52ce:	22 2d       	mov	r18, r2
    52d0:	31 2f       	mov	r19, r17
    52d2:	40 2f       	mov	r20, r16
    52d4:	5b 2d       	mov	r21, r11
    52d6:	c1 54       	subi	r28, 0x41	; 65
    52d8:	dd 4f       	sbci	r29, 0xFD	; 253
    52da:	68 81       	ld	r22, Y
    52dc:	79 81       	ldd	r23, Y+1	; 0x01
    52de:	8a 81       	ldd	r24, Y+2	; 0x02
    52e0:	9b 81       	ldd	r25, Y+3	; 0x03
    52e2:	cf 5b       	subi	r28, 0xBF	; 191
    52e4:	d2 40       	sbci	r29, 0x02	; 2
    52e6:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <Get_altitude>
    52ea:	6a d5       	rcall	.+2772   	; 0x5dc0 <__fixsfsi>
    52ec:	c1 57       	subi	r28, 0x71	; 113
    52ee:	dd 4f       	sbci	r29, 0xFD	; 253
    52f0:	68 83       	st	Y, r22
		smooth_altitude = (int32_t)(smoothing_factor * altitude + (1-smoothing_factor)*smooth_altitude);
    52f2:	79 83       	std	Y+1, r23	; 0x01
    52f4:	8a 83       	std	Y+2, r24	; 0x02
    52f6:	9b 83       	std	Y+3, r25	; 0x03
    52f8:	cf 58       	subi	r28, 0x8F	; 143
    52fa:	d2 40       	sbci	r29, 0x02	; 2
    52fc:	94 d5       	rcall	.+2856   	; 0x5e26 <__floatsisf>
    52fe:	20 e0       	ldi	r18, 0x00	; 0
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	40 e0       	ldi	r20, 0x00	; 0
    5304:	5f e3       	ldi	r21, 0x3F	; 63
    5306:	6f d6       	rcall	.+3294   	; 0x5fe6 <__mulsf3>
    5308:	2b 01       	movw	r4, r22
    530a:	3c 01       	movw	r6, r24
    530c:	c1 56       	subi	r28, 0x61	; 97
    530e:	dd 4f       	sbci	r29, 0xFD	; 253
    5310:	68 81       	ld	r22, Y
    5312:	79 81       	ldd	r23, Y+1	; 0x01
    5314:	8a 81       	ldd	r24, Y+2	; 0x02
    5316:	9b 81       	ldd	r25, Y+3	; 0x03
    5318:	cf 59       	subi	r28, 0x9F	; 159
    531a:	d2 40       	sbci	r29, 0x02	; 2
    531c:	84 d5       	rcall	.+2824   	; 0x5e26 <__floatsisf>
    531e:	20 e0       	ldi	r18, 0x00	; 0
    5320:	30 e0       	ldi	r19, 0x00	; 0
    5322:	40 e0       	ldi	r20, 0x00	; 0
    5324:	5f e3       	ldi	r21, 0x3F	; 63
    5326:	5f d6       	rcall	.+3262   	; 0x5fe6 <__mulsf3>
    5328:	9b 01       	movw	r18, r22
    532a:	ac 01       	movw	r20, r24
    532c:	c3 01       	movw	r24, r6
    532e:	b2 01       	movw	r22, r4
    5330:	15 d4       	rcall	.+2090   	; 0x5b5c <__addsf3>
    5332:	46 d5       	rcall	.+2700   	; 0x5dc0 <__fixsfsi>
    5334:	c1 56       	subi	r28, 0x61	; 97
    5336:	dd 4f       	sbci	r29, 0xFD	; 253
    5338:	68 83       	st	Y, r22
    533a:	79 83       	std	Y+1, r23	; 0x01
		my_time = my_time + 1;
    533c:	8a 83       	std	Y+2, r24	; 0x02
    533e:	9b 83       	std	Y+3, r25	; 0x03
    5340:	cf 59       	subi	r28, 0x9F	; 159
    5342:	d2 40       	sbci	r29, 0x02	; 2
		
		//printf("here?");
		if (last_finished != SENTENCE_NONE)
		{
			//printf("Is it you?");
			if (last_finished == SENTENCE_GPGGA)
    5344:	5f ef       	ldi	r21, 0xFF	; 255
    5346:	c5 1a       	sub	r12, r21
    5348:	d5 0a       	sbc	r13, r21
    534a:	e5 0a       	sbc	r14, r21
    534c:	f5 0a       	sbc	r15, r21
			{
				//printf("GGA!!!\n");
				
				ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    534e:	80 91 91 22 	lds	r24, 0x2291	; 0x802291 <last_finished>
				{
					memcpy(gpstmp, gpgga_buff, 85);
    5352:	81 30       	cpi	r24, 0x01	; 1
    5354:	09 f0       	breq	.+2      	; 0x5358 <main+0x2ae>
    5356:	94 c0       	rjmp	.+296    	; 0x5480 <main+0x3d6>
    5358:	9f b7       	in	r25, 0x3f	; 63
    535a:	f8 94       	cli
    535c:	85 e5       	ldi	r24, 0x55	; 85
    535e:	e1 e3       	ldi	r30, 0x31	; 49
    5360:	f4 e2       	ldi	r31, 0x24	; 36
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5362:	d4 01       	movw	r26, r8
				}
				gpstmp[packetlen(gpstmp)] = '\0';
    5364:	01 90       	ld	r0, Z+
    5366:	0d 92       	st	X+, r0
    5368:	8a 95       	dec	r24
    536a:	e1 f7       	brne	.-8      	; 0x5364 <main+0x2ba>
    536c:	9f bf       	out	0x3f, r25	; 63
    536e:	c4 01       	movw	r24, r8
    5370:	83 de       	rcall	.-762    	; 0x5078 <packetlen>
				//printf(gpstmp);
				GPS_data_t gps_data = getGPSDatafromNMEA(gpstmp, strlen(gpstmp));
    5372:	88 0d       	add	r24, r8
    5374:	99 1d       	adc	r25, r9
    5376:	dc 01       	movw	r26, r24
    5378:	1c 92       	st	X, r1
    537a:	f4 01       	movw	r30, r8
    537c:	01 90       	ld	r0, Z+
    537e:	00 20       	and	r0, r0
    5380:	e9 f7       	brne	.-6      	; 0x537c <main+0x2d2>
    5382:	31 97       	sbiw	r30, 0x01	; 1
    5384:	af 01       	movw	r20, r30
    5386:	48 19       	sub	r20, r8
    5388:	59 09       	sbc	r21, r9
    538a:	b4 01       	movw	r22, r8
    538c:	ce 01       	movw	r24, r28
				GPSAlt =	gps_data.altitude;
    538e:	89 59       	subi	r24, 0x99	; 153
    5390:	9d 4f       	sbci	r25, 0xFD	; 253
    5392:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <getGPSDatafromNMEA>
    5396:	c3 58       	subi	r28, 0x83	; 131
    5398:	dd 4f       	sbci	r29, 0xFD	; 253
    539a:	68 81       	ld	r22, Y
    539c:	79 81       	ldd	r23, Y+1	; 0x01
				GPSLat =	gps_data.latdecimal;
    539e:	8a 81       	ldd	r24, Y+2	; 0x02
    53a0:	9b 81       	ldd	r25, Y+3	; 0x03
    53a2:	cd 57       	subi	r28, 0x7D	; 125
    53a4:	d2 40       	sbci	r29, 0x02	; 2
    53a6:	c2 59       	subi	r28, 0x92	; 146
    53a8:	dd 4f       	sbci	r29, 0xFD	; 253
    53aa:	28 81       	ld	r18, Y
    53ac:	39 81       	ldd	r19, Y+1	; 0x01
    53ae:	4a 81       	ldd	r20, Y+2	; 0x02
    53b0:	5b 81       	ldd	r21, Y+3	; 0x03
    53b2:	ce 56       	subi	r28, 0x6E	; 110
    53b4:	d2 40       	sbci	r29, 0x02	; 2
    53b6:	cd 56       	subi	r28, 0x6D	; 109
    53b8:	dd 4f       	sbci	r29, 0xFD	; 253
    53ba:	28 83       	st	Y, r18
				GPSLong=	gps_data.londecimal;
    53bc:	39 83       	std	Y+1, r19	; 0x01
    53be:	4a 83       	std	Y+2, r20	; 0x02
    53c0:	5b 83       	std	Y+3, r21	; 0x03
    53c2:	c3 59       	subi	r28, 0x93	; 147
    53c4:	d2 40       	sbci	r29, 0x02	; 2
    53c6:	c7 58       	subi	r28, 0x87	; 135
    53c8:	dd 4f       	sbci	r29, 0xFD	; 253
    53ca:	48 80       	ld	r4, Y
				
				last_finished = SENTENCE_NONE;
    53cc:	59 80       	ldd	r5, Y+1	; 0x01
    53ce:	6a 80       	ldd	r6, Y+2	; 0x02
				
				if (gps_data.fix_status)
    53d0:	7b 80       	ldd	r7, Y+3	; 0x03
    53d2:	c9 57       	subi	r28, 0x79	; 121
    53d4:	d2 40       	sbci	r29, 0x02	; 2
    53d6:	10 92 91 22 	sts	0x2291, r1	; 0x802291 <last_finished>
    53da:	cc 57       	subi	r28, 0x7C	; 124
    53dc:	dd 4f       	sbci	r29, 0xFD	; 253
				{
					uint32_t GPS_secs = 3600 * (uint32_t)gps_data.hour + 60 * (uint32_t)gps_data.minutes + (uint32_t)gps_data.seconds;
					uint32_t safetime;
					ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    53de:	28 81       	ld	r18, Y
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    53e0:	c4 58       	subi	r28, 0x84	; 132
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    53e2:	d2 40       	sbci	r29, 0x02	; 2
					memcpy(gpstmp, gpgga_buff, 85);
				}
				gpstmp[packetlen(gpstmp)] = '\0';
				//printf(gpstmp);
				GPS_data_t gps_data = getGPSDatafromNMEA(gpstmp, strlen(gpstmp));
				GPSAlt =	gps_data.altitude;
    53e4:	22 23       	and	r18, r18
    53e6:	19 f0       	breq	.+6      	; 0x53ee <main+0x344>
    53e8:	2f b7       	in	r18, 0x3f	; 63
    53ea:	f8 94       	cli
    53ec:	2f bf       	out	0x3f, r18	; 63
    53ee:	ed d4       	rcall	.+2522   	; 0x5dca <__fixunssfsi>
    53f0:	c5 55       	subi	r28, 0x55	; 85
    53f2:	dd 4f       	sbci	r29, 0xFD	; 253
    53f4:	68 83       	st	Y, r22
    53f6:	cb 5a       	subi	r28, 0xAB	; 171
    53f8:	d2 40       	sbci	r29, 0x02	; 2
    53fa:	c4 55       	subi	r28, 0x54	; 84
    53fc:	dd 4f       	sbci	r29, 0xFD	; 253
    53fe:	78 83       	st	Y, r23
    5400:	cc 5a       	subi	r28, 0xAC	; 172
    5402:	d2 40       	sbci	r29, 0x02	; 2
    5404:	c3 55       	subi	r28, 0x53	; 83
    5406:	dd 4f       	sbci	r29, 0xFD	; 253
    5408:	88 83       	st	Y, r24
    540a:	cd 5a       	subi	r28, 0xAD	; 173
    540c:	d2 40       	sbci	r29, 0x02	; 2
				GPSLat =	gps_data.latdecimal;
    540e:	c2 55       	subi	r28, 0x52	; 82
    5410:	dd 4f       	sbci	r29, 0xFD	; 253
    5412:	98 83       	st	Y, r25
    5414:	ce 5a       	subi	r28, 0xAE	; 174
    5416:	d2 40       	sbci	r29, 0x02	; 2
    5418:	cd 56       	subi	r28, 0x6D	; 109
    541a:	dd 4f       	sbci	r29, 0xFD	; 253
    541c:	68 81       	ld	r22, Y
    541e:	79 81       	ldd	r23, Y+1	; 0x01
    5420:	8a 81       	ldd	r24, Y+2	; 0x02
    5422:	9b 81       	ldd	r25, Y+3	; 0x03
    5424:	c3 59       	subi	r28, 0x93	; 147
    5426:	d2 40       	sbci	r29, 0x02	; 2
    5428:	d0 d4       	rcall	.+2464   	; 0x5dca <__fixunssfsi>
    542a:	cd 55       	subi	r28, 0x5D	; 93
    542c:	dd 4f       	sbci	r29, 0xFD	; 253
    542e:	68 83       	st	Y, r22
    5430:	c3 5a       	subi	r28, 0xA3	; 163
    5432:	d2 40       	sbci	r29, 0x02	; 2
    5434:	cc 55       	subi	r28, 0x5C	; 92
    5436:	dd 4f       	sbci	r29, 0xFD	; 253
    5438:	78 83       	st	Y, r23
    543a:	c4 5a       	subi	r28, 0xA4	; 164
    543c:	d2 40       	sbci	r29, 0x02	; 2
    543e:	cb 55       	subi	r28, 0x5B	; 91
    5440:	dd 4f       	sbci	r29, 0xFD	; 253
    5442:	88 83       	st	Y, r24
    5444:	c5 5a       	subi	r28, 0xA5	; 165
    5446:	d2 40       	sbci	r29, 0x02	; 2
				GPSLong=	gps_data.londecimal;
    5448:	ca 55       	subi	r28, 0x5A	; 90
    544a:	dd 4f       	sbci	r29, 0xFD	; 253
    544c:	98 83       	st	Y, r25
    544e:	c6 5a       	subi	r28, 0xA6	; 166
    5450:	d2 40       	sbci	r29, 0x02	; 2
    5452:	c3 01       	movw	r24, r6
    5454:	b2 01       	movw	r22, r4
    5456:	b9 d4       	rcall	.+2418   	; 0x5dca <__fixunssfsi>
    5458:	c9 55       	subi	r28, 0x59	; 89
    545a:	dd 4f       	sbci	r29, 0xFD	; 253
    545c:	68 83       	st	Y, r22
    545e:	c7 5a       	subi	r28, 0xA7	; 167
    5460:	d2 40       	sbci	r29, 0x02	; 2
    5462:	c8 55       	subi	r28, 0x58	; 88
    5464:	dd 4f       	sbci	r29, 0xFD	; 253
    5466:	78 83       	st	Y, r23
    5468:	c8 5a       	subi	r28, 0xA8	; 168
    546a:	d2 40       	sbci	r29, 0x02	; 2
    546c:	c7 55       	subi	r28, 0x57	; 87
    546e:	dd 4f       	sbci	r29, 0xFD	; 253
    5470:	88 83       	st	Y, r24
    5472:	c9 5a       	subi	r28, 0xA9	; 169
    5474:	d2 40       	sbci	r29, 0x02	; 2
    5476:	c6 55       	subi	r28, 0x56	; 86
		//timer_founter_init(6249, 10);
		//printf("Temperature = %u \n", temperature);
		//printf("Pressure = %lu ~\n", pressure);
		//printf("Altitude = %li \n", (int32_t)altitude);
		
		imu_data_t imudata = imu_update(cycles);
    5478:	dd 4f       	sbci	r29, 0xFD	; 253
    547a:	98 83       	st	Y, r25
    547c:	ca 5a       	subi	r28, 0xAA	; 170
    547e:	d2 40       	sbci	r29, 0x02	; 2
    5480:	60 e0       	ldi	r22, 0x00	; 0
    5482:	70 e0       	ldi	r23, 0x00	; 0
    5484:	ce 01       	movw	r24, r28
		tiltX = imudata.pitch;
		tiltY = imudata.roll;
		tiltZ = imudata.yaw;
	
		//printf("What about here\n");
		smooth_x = (smoothing_factor * tiltX + (1.0-smoothing_factor)*smooth_x);
    5486:	89 59       	subi	r24, 0x99	; 153
    5488:	9d 4f       	sbci	r25, 0xFD	; 253
    548a:	0e 94 b1 04 	call	0x962	; 0x962 <imu_update>
    548e:	20 e0       	ldi	r18, 0x00	; 0
    5490:	30 e0       	ldi	r19, 0x00	; 0
    5492:	40 e0       	ldi	r20, 0x00	; 0
    5494:	5f e3       	ldi	r21, 0x3F	; 63
    5496:	c1 55       	subi	r28, 0x51	; 81
    5498:	dd 4f       	sbci	r29, 0xFD	; 253
    549a:	b8 81       	ld	r27, Y
    549c:	cf 5a       	subi	r28, 0xAF	; 175
    549e:	d2 40       	sbci	r29, 0x02	; 2
    54a0:	c0 55       	subi	r28, 0x50	; 80
    54a2:	dd 4f       	sbci	r29, 0xFD	; 253
    54a4:	a8 81       	ld	r26, Y
    54a6:	c0 5b       	subi	r28, 0xB0	; 176
    54a8:	d2 40       	sbci	r29, 0x02	; 2
    54aa:	cf 54       	subi	r28, 0x4F	; 79
    54ac:	dd 4f       	sbci	r29, 0xFD	; 253
    54ae:	f8 81       	ld	r31, Y
    54b0:	c1 5b       	subi	r28, 0xB1	; 177
    54b2:	d2 40       	sbci	r29, 0x02	; 2
    54b4:	ce 54       	subi	r28, 0x4E	; 78
    54b6:	dd 4f       	sbci	r29, 0xFD	; 253
    54b8:	e8 81       	ld	r30, Y
    54ba:	c2 5b       	subi	r28, 0xB2	; 178
    54bc:	d2 40       	sbci	r29, 0x02	; 2
    54be:	6b 2f       	mov	r22, r27
    54c0:	7a 2f       	mov	r23, r26
    54c2:	8f 2f       	mov	r24, r31
    54c4:	9e 2f       	mov	r25, r30
    54c6:	8f d5       	rcall	.+2846   	; 0x5fe6 <__mulsf3>
    54c8:	2b 01       	movw	r4, r22
    54ca:	3c 01       	movw	r6, r24
    54cc:	20 e0       	ldi	r18, 0x00	; 0
    54ce:	30 e0       	ldi	r19, 0x00	; 0
    54d0:	40 e0       	ldi	r20, 0x00	; 0
    54d2:	5f e3       	ldi	r21, 0x3F	; 63
    54d4:	c9 59       	subi	r28, 0x99	; 153
    54d6:	dd 4f       	sbci	r29, 0xFD	; 253
    54d8:	68 81       	ld	r22, Y
    54da:	79 81       	ldd	r23, Y+1	; 0x01
    54dc:	8a 81       	ldd	r24, Y+2	; 0x02
    54de:	9b 81       	ldd	r25, Y+3	; 0x03
    54e0:	c7 56       	subi	r28, 0x67	; 103
    54e2:	d2 40       	sbci	r29, 0x02	; 2
    54e4:	80 d5       	rcall	.+2816   	; 0x5fe6 <__mulsf3>
    54e6:	a3 01       	movw	r20, r6
    54e8:	92 01       	movw	r18, r4
    54ea:	38 d3       	rcall	.+1648   	; 0x5b5c <__addsf3>
    54ec:	cd 56       	subi	r28, 0x6D	; 109
    54ee:	dd 4f       	sbci	r29, 0xFD	; 253
    54f0:	68 83       	st	Y, r22
    54f2:	c3 59       	subi	r28, 0x93	; 147
    54f4:	d2 40       	sbci	r29, 0x02	; 2
    54f6:	c7 56       	subi	r28, 0x67	; 103
    54f8:	dd 4f       	sbci	r29, 0xFD	; 253
    54fa:	78 83       	st	Y, r23
    54fc:	c9 59       	subi	r28, 0x99	; 153
    54fe:	d2 40       	sbci	r29, 0x02	; 2
    5500:	c6 56       	subi	r28, 0x66	; 102
    5502:	dd 4f       	sbci	r29, 0xFD	; 253
    5504:	88 83       	st	Y, r24
    5506:	ca 59       	subi	r28, 0x9A	; 154
    5508:	d2 40       	sbci	r29, 0x02	; 2
    550a:	c5 56       	subi	r28, 0x65	; 101
    550c:	dd 4f       	sbci	r29, 0xFD	; 253
    550e:	98 83       	st	Y, r25
    5510:	cb 59       	subi	r28, 0x9B	; 155
    5512:	d2 40       	sbci	r29, 0x02	; 2
    5514:	c1 55       	subi	r28, 0x51	; 81
    5516:	dd 4f       	sbci	r29, 0xFD	; 253
    5518:	68 83       	st	Y, r22
    551a:	cf 5a       	subi	r28, 0xAF	; 175
    551c:	d2 40       	sbci	r29, 0x02	; 2
    551e:	c0 55       	subi	r28, 0x50	; 80
    5520:	dd 4f       	sbci	r29, 0xFD	; 253
    5522:	78 83       	st	Y, r23
    5524:	c0 5b       	subi	r28, 0xB0	; 176
    5526:	d2 40       	sbci	r29, 0x02	; 2
    5528:	cf 54       	subi	r28, 0x4F	; 79
    552a:	dd 4f       	sbci	r29, 0xFD	; 253
    552c:	88 83       	st	Y, r24
    552e:	c1 5b       	subi	r28, 0xB1	; 177
    5530:	d2 40       	sbci	r29, 0x02	; 2
		smooth_y = (smoothing_factor * tiltY + (1.0-smoothing_factor)*smooth_y);
    5532:	ce 54       	subi	r28, 0x4E	; 78
    5534:	dd 4f       	sbci	r29, 0xFD	; 253
    5536:	98 83       	st	Y, r25
    5538:	c2 5b       	subi	r28, 0xB2	; 178
    553a:	d2 40       	sbci	r29, 0x02	; 2
    553c:	20 e0       	ldi	r18, 0x00	; 0
    553e:	30 e0       	ldi	r19, 0x00	; 0
    5540:	40 e0       	ldi	r20, 0x00	; 0
    5542:	5f e3       	ldi	r21, 0x3F	; 63
    5544:	cd 54       	subi	r28, 0x4D	; 77
    5546:	dd 4f       	sbci	r29, 0xFD	; 253
    5548:	b8 81       	ld	r27, Y
    554a:	c3 5b       	subi	r28, 0xB3	; 179
    554c:	d2 40       	sbci	r29, 0x02	; 2
    554e:	cc 54       	subi	r28, 0x4C	; 76
    5550:	dd 4f       	sbci	r29, 0xFD	; 253
    5552:	a8 81       	ld	r26, Y
    5554:	c4 5b       	subi	r28, 0xB4	; 180
    5556:	d2 40       	sbci	r29, 0x02	; 2
    5558:	cb 54       	subi	r28, 0x4B	; 75
    555a:	dd 4f       	sbci	r29, 0xFD	; 253
    555c:	f8 81       	ld	r31, Y
    555e:	c5 5b       	subi	r28, 0xB5	; 181
    5560:	d2 40       	sbci	r29, 0x02	; 2
    5562:	ca 54       	subi	r28, 0x4A	; 74
    5564:	dd 4f       	sbci	r29, 0xFD	; 253
    5566:	e8 81       	ld	r30, Y
    5568:	c6 5b       	subi	r28, 0xB6	; 182
    556a:	d2 40       	sbci	r29, 0x02	; 2
    556c:	6b 2f       	mov	r22, r27
    556e:	7a 2f       	mov	r23, r26
    5570:	8f 2f       	mov	r24, r31
    5572:	9e 2f       	mov	r25, r30
    5574:	38 d5       	rcall	.+2672   	; 0x5fe6 <__mulsf3>
    5576:	2b 01       	movw	r4, r22
    5578:	3c 01       	movw	r6, r24
    557a:	20 e0       	ldi	r18, 0x00	; 0
    557c:	30 e0       	ldi	r19, 0x00	; 0
    557e:	40 e0       	ldi	r20, 0x00	; 0
    5580:	5f e3       	ldi	r21, 0x3F	; 63
    5582:	c5 59       	subi	r28, 0x95	; 149
    5584:	dd 4f       	sbci	r29, 0xFD	; 253
    5586:	68 81       	ld	r22, Y
    5588:	79 81       	ldd	r23, Y+1	; 0x01
    558a:	8a 81       	ldd	r24, Y+2	; 0x02
    558c:	9b 81       	ldd	r25, Y+3	; 0x03
    558e:	cb 56       	subi	r28, 0x6B	; 107
    5590:	d2 40       	sbci	r29, 0x02	; 2
    5592:	29 d5       	rcall	.+2642   	; 0x5fe6 <__mulsf3>
    5594:	a3 01       	movw	r20, r6
    5596:	92 01       	movw	r18, r4
    5598:	e1 d2       	rcall	.+1474   	; 0x5b5c <__addsf3>
    559a:	36 2e       	mov	r3, r22
    559c:	c4 56       	subi	r28, 0x64	; 100
    559e:	dd 4f       	sbci	r29, 0xFD	; 253
    55a0:	78 83       	st	Y, r23
    55a2:	cc 59       	subi	r28, 0x9C	; 156
    55a4:	d2 40       	sbci	r29, 0x02	; 2
    55a6:	c3 56       	subi	r28, 0x63	; 99
    55a8:	dd 4f       	sbci	r29, 0xFD	; 253
    55aa:	88 83       	st	Y, r24
    55ac:	cd 59       	subi	r28, 0x9D	; 157
    55ae:	d2 40       	sbci	r29, 0x02	; 2
    55b0:	c2 56       	subi	r28, 0x62	; 98
    55b2:	dd 4f       	sbci	r29, 0xFD	; 253
    55b4:	98 83       	st	Y, r25
    55b6:	ce 59       	subi	r28, 0x9E	; 158
    55b8:	d2 40       	sbci	r29, 0x02	; 2
    55ba:	cd 54       	subi	r28, 0x4D	; 77
    55bc:	dd 4f       	sbci	r29, 0xFD	; 253
    55be:	68 83       	st	Y, r22
    55c0:	c3 5b       	subi	r28, 0xB3	; 179
    55c2:	d2 40       	sbci	r29, 0x02	; 2
    55c4:	cc 54       	subi	r28, 0x4C	; 76
    55c6:	dd 4f       	sbci	r29, 0xFD	; 253
    55c8:	78 83       	st	Y, r23
    55ca:	c4 5b       	subi	r28, 0xB4	; 180
    55cc:	d2 40       	sbci	r29, 0x02	; 2
    55ce:	cb 54       	subi	r28, 0x4B	; 75
    55d0:	dd 4f       	sbci	r29, 0xFD	; 253
    55d2:	88 83       	st	Y, r24
    55d4:	c5 5b       	subi	r28, 0xB5	; 181
    55d6:	d2 40       	sbci	r29, 0x02	; 2
		smooth_z = (smoothing_factor * tiltZ + (1.0-smoothing_factor)*smooth_z);
    55d8:	ca 54       	subi	r28, 0x4A	; 74
    55da:	dd 4f       	sbci	r29, 0xFD	; 253
    55dc:	98 83       	st	Y, r25
    55de:	c6 5b       	subi	r28, 0xB6	; 182
    55e0:	d2 40       	sbci	r29, 0x02	; 2
    55e2:	20 e0       	ldi	r18, 0x00	; 0
    55e4:	30 e0       	ldi	r19, 0x00	; 0
    55e6:	40 e0       	ldi	r20, 0x00	; 0
    55e8:	5f e3       	ldi	r21, 0x3F	; 63
    55ea:	c9 54       	subi	r28, 0x49	; 73
    55ec:	dd 4f       	sbci	r29, 0xFD	; 253
    55ee:	b8 81       	ld	r27, Y
    55f0:	c7 5b       	subi	r28, 0xB7	; 183
    55f2:	d2 40       	sbci	r29, 0x02	; 2
    55f4:	c8 54       	subi	r28, 0x48	; 72
    55f6:	dd 4f       	sbci	r29, 0xFD	; 253
    55f8:	a8 81       	ld	r26, Y
    55fa:	c8 5b       	subi	r28, 0xB8	; 184
    55fc:	d2 40       	sbci	r29, 0x02	; 2
    55fe:	c7 54       	subi	r28, 0x47	; 71
    5600:	dd 4f       	sbci	r29, 0xFD	; 253
    5602:	f8 81       	ld	r31, Y
    5604:	c9 5b       	subi	r28, 0xB9	; 185
    5606:	d2 40       	sbci	r29, 0x02	; 2
    5608:	c6 54       	subi	r28, 0x46	; 70
    560a:	dd 4f       	sbci	r29, 0xFD	; 253
    560c:	e8 81       	ld	r30, Y
    560e:	ca 5b       	subi	r28, 0xBA	; 186
    5610:	d2 40       	sbci	r29, 0x02	; 2
    5612:	6b 2f       	mov	r22, r27
    5614:	7a 2f       	mov	r23, r26
    5616:	8f 2f       	mov	r24, r31
    5618:	9e 2f       	mov	r25, r30
    561a:	e5 d4       	rcall	.+2506   	; 0x5fe6 <__mulsf3>
    561c:	2b 01       	movw	r4, r22
    561e:	3c 01       	movw	r6, r24
    5620:	20 e0       	ldi	r18, 0x00	; 0
    5622:	30 e0       	ldi	r19, 0x00	; 0
    5624:	40 e0       	ldi	r20, 0x00	; 0
    5626:	5f e3       	ldi	r21, 0x3F	; 63
    5628:	c1 59       	subi	r28, 0x91	; 145
    562a:	dd 4f       	sbci	r29, 0xFD	; 253
    562c:	68 81       	ld	r22, Y
    562e:	79 81       	ldd	r23, Y+1	; 0x01
    5630:	8a 81       	ldd	r24, Y+2	; 0x02
    5632:	9b 81       	ldd	r25, Y+3	; 0x03
    5634:	cf 56       	subi	r28, 0x6F	; 111
    5636:	d2 40       	sbci	r29, 0x02	; 2
    5638:	d6 d4       	rcall	.+2476   	; 0x5fe6 <__mulsf3>
    563a:	a3 01       	movw	r20, r6
    563c:	92 01       	movw	r18, r4
    563e:	8e d2       	rcall	.+1308   	; 0x5b5c <__addsf3>
    5640:	a6 2e       	mov	r10, r22
    5642:	77 2e       	mov	r7, r23
    5644:	68 2e       	mov	r6, r24
    5646:	59 2e       	mov	r5, r25
    5648:	c9 54       	subi	r28, 0x49	; 73
    564a:	dd 4f       	sbci	r29, 0xFD	; 253
    564c:	68 83       	st	Y, r22
    564e:	c7 5b       	subi	r28, 0xB7	; 183
    5650:	d2 40       	sbci	r29, 0x02	; 2
    5652:	c8 54       	subi	r28, 0x48	; 72
    5654:	dd 4f       	sbci	r29, 0xFD	; 253
    5656:	78 83       	st	Y, r23
    5658:	c8 5b       	subi	r28, 0xB8	; 184
    565a:	d2 40       	sbci	r29, 0x02	; 2
    565c:	c7 54       	subi	r28, 0x47	; 71
    565e:	dd 4f       	sbci	r29, 0xFD	; 253
    5660:	88 83       	st	Y, r24
    5662:	c9 5b       	subi	r28, 0xB9	; 185
		//X -21 Y 4.4    Z -11.5
		//delay_ms(500);
		
		PORTA_DIR |= 0b00011110;
    5664:	d2 40       	sbci	r29, 0x02	; 2
    5666:	c6 54       	subi	r28, 0x46	; 70
    5668:	dd 4f       	sbci	r29, 0xFD	; 253
    566a:	98 83       	st	Y, r25
    566c:	ca 5b       	subi	r28, 0xBA	; 186
		PORTA_OUT |= 0b00011110;
    566e:	d2 40       	sbci	r29, 0x02	; 2
    5670:	a0 e0       	ldi	r26, 0x00	; 0
    5672:	b6 e0       	ldi	r27, 0x06	; 6
    5674:	8c 91       	ld	r24, X
    5676:	8e 61       	ori	r24, 0x1E	; 30
		delay_ms(250);
    5678:	8c 93       	st	X, r24
    567a:	e4 e0       	ldi	r30, 0x04	; 4
    567c:	f6 e0       	ldi	r31, 0x06	; 6
    567e:	80 81       	ld	r24, Z
    5680:	8e 61       	ori	r24, 0x1E	; 30
    5682:	80 83       	st	Z, r24
		PORTA_OUT &= 0b11100001;
    5684:	66 e5       	ldi	r22, 0x56	; 86
    5686:	78 e5       	ldi	r23, 0x58	; 88
    5688:	84 e1       	ldi	r24, 0x14	; 20
    568a:	90 e0       	ldi	r25, 0x00	; 0
    568c:	8a db       	rcall	.-2284   	; 0x4da2 <__portable_avr_delay_cycles>
		delay_ms(250);
    568e:	a4 e0       	ldi	r26, 0x04	; 4
    5690:	b6 e0       	ldi	r27, 0x06	; 6
    5692:	8c 91       	ld	r24, X
    5694:	81 7e       	andi	r24, 0xE1	; 225
    5696:	8c 93       	st	X, r24
    5698:	66 e5       	ldi	r22, 0x56	; 86
		/*float data[16] = {teamID, my_time, packetCount, altitude, pressure, temperature, voltage, GPSTime, GPSLat, GPSLong, GPSAlt, GPSSats,
			tiltX,tiltY,tiltZ,state};*/
		//temperature = 42;
		//NEED TO MOVE FLIGHT STATE BACK TO THE END OF THIS LINE
		
		printf("$%u,%"PRIu32",%u,%"PRIi32",%"PRIi32",%"PRIi32",%f,%"PRIi32",%"PRIi32",%"PRIi32",%"PRIi32",%"PRIi32",%f,%f,%f,%u\n",teamID,my_time,packetCount,altitude,pressure,(TEMP + 50) / 100,voltage,GPSTime,GPSLat,GPSLong,GPSAlt,GPSSats,smooth_x,smooth_y,smooth_z,state);
    569a:	78 e5       	ldi	r23, 0x58	; 88
    569c:	84 e1       	ldi	r24, 0x14	; 20
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	80 db       	rcall	.-2304   	; 0x4da2 <__portable_avr_delay_cycles>
    56a2:	80 91 b8 24 	lds	r24, 0x24B8	; 0x8024b8 <state>
    56a6:	1f 92       	push	r1
    56a8:	8f 93       	push	r24
    56aa:	5f 92       	push	r5
    56ac:	6f 92       	push	r6
    56ae:	7f 92       	push	r7
    56b0:	af 92       	push	r10
    56b2:	c2 56       	subi	r28, 0x62	; 98
    56b4:	dd 4f       	sbci	r29, 0xFD	; 253
    56b6:	b8 81       	ld	r27, Y
    56b8:	ce 59       	subi	r28, 0x9E	; 158
    56ba:	d2 40       	sbci	r29, 0x02	; 2
    56bc:	bf 93       	push	r27
    56be:	c3 56       	subi	r28, 0x63	; 99
    56c0:	dd 4f       	sbci	r29, 0xFD	; 253
    56c2:	e8 81       	ld	r30, Y
    56c4:	cd 59       	subi	r28, 0x9D	; 157
    56c6:	d2 40       	sbci	r29, 0x02	; 2
    56c8:	ef 93       	push	r30
    56ca:	c4 56       	subi	r28, 0x64	; 100
    56cc:	dd 4f       	sbci	r29, 0xFD	; 253
    56ce:	f8 81       	ld	r31, Y
    56d0:	cc 59       	subi	r28, 0x9C	; 156
    56d2:	d2 40       	sbci	r29, 0x02	; 2
    56d4:	ff 93       	push	r31
    56d6:	3f 92       	push	r3
    56d8:	c5 56       	subi	r28, 0x65	; 101
    56da:	dd 4f       	sbci	r29, 0xFD	; 253
    56dc:	28 81       	ld	r18, Y
    56de:	cb 59       	subi	r28, 0x9B	; 155
    56e0:	d2 40       	sbci	r29, 0x02	; 2
    56e2:	2f 93       	push	r18
    56e4:	c6 56       	subi	r28, 0x66	; 102
    56e6:	dd 4f       	sbci	r29, 0xFD	; 253
    56e8:	38 81       	ld	r19, Y
    56ea:	ca 59       	subi	r28, 0x9A	; 154
    56ec:	d2 40       	sbci	r29, 0x02	; 2
    56ee:	3f 93       	push	r19
    56f0:	c7 56       	subi	r28, 0x67	; 103
    56f2:	dd 4f       	sbci	r29, 0xFD	; 253
    56f4:	48 81       	ld	r20, Y
    56f6:	c9 59       	subi	r28, 0x99	; 153
    56f8:	d2 40       	sbci	r29, 0x02	; 2
    56fa:	4f 93       	push	r20
    56fc:	cd 56       	subi	r28, 0x6D	; 109
    56fe:	dd 4f       	sbci	r29, 0xFD	; 253
    5700:	58 81       	ld	r21, Y
    5702:	c3 59       	subi	r28, 0x93	; 147
    5704:	d2 40       	sbci	r29, 0x02	; 2
    5706:	5f 93       	push	r21
    5708:	1f 92       	push	r1
    570a:	1f 92       	push	r1
    570c:	1f 92       	push	r1
    570e:	1f 92       	push	r1
    5710:	c2 55       	subi	r28, 0x52	; 82
    5712:	dd 4f       	sbci	r29, 0xFD	; 253
    5714:	88 81       	ld	r24, Y
    5716:	ce 5a       	subi	r28, 0xAE	; 174
    5718:	d2 40       	sbci	r29, 0x02	; 2
    571a:	8f 93       	push	r24
    571c:	c3 55       	subi	r28, 0x53	; 83
    571e:	dd 4f       	sbci	r29, 0xFD	; 253
    5720:	98 81       	ld	r25, Y
    5722:	cd 5a       	subi	r28, 0xAD	; 173
    5724:	d2 40       	sbci	r29, 0x02	; 2
    5726:	9f 93       	push	r25
    5728:	c4 55       	subi	r28, 0x54	; 84
    572a:	dd 4f       	sbci	r29, 0xFD	; 253
    572c:	a8 81       	ld	r26, Y
    572e:	cc 5a       	subi	r28, 0xAC	; 172
    5730:	d2 40       	sbci	r29, 0x02	; 2
    5732:	af 93       	push	r26
    5734:	c5 55       	subi	r28, 0x55	; 85
    5736:	dd 4f       	sbci	r29, 0xFD	; 253
    5738:	b8 81       	ld	r27, Y
    573a:	cb 5a       	subi	r28, 0xAB	; 171
    573c:	d2 40       	sbci	r29, 0x02	; 2
    573e:	bf 93       	push	r27
    5740:	c6 55       	subi	r28, 0x56	; 86
    5742:	dd 4f       	sbci	r29, 0xFD	; 253
    5744:	e8 81       	ld	r30, Y
    5746:	ca 5a       	subi	r28, 0xAA	; 170
    5748:	d2 40       	sbci	r29, 0x02	; 2
    574a:	ef 93       	push	r30
    574c:	c7 55       	subi	r28, 0x57	; 87
    574e:	dd 4f       	sbci	r29, 0xFD	; 253
    5750:	f8 81       	ld	r31, Y
    5752:	c9 5a       	subi	r28, 0xA9	; 169
    5754:	d2 40       	sbci	r29, 0x02	; 2
    5756:	ff 93       	push	r31
    5758:	c8 55       	subi	r28, 0x58	; 88
    575a:	dd 4f       	sbci	r29, 0xFD	; 253
    575c:	28 81       	ld	r18, Y
    575e:	c8 5a       	subi	r28, 0xA8	; 168
    5760:	d2 40       	sbci	r29, 0x02	; 2
    5762:	2f 93       	push	r18
    5764:	c9 55       	subi	r28, 0x59	; 89
    5766:	dd 4f       	sbci	r29, 0xFD	; 253
    5768:	38 81       	ld	r19, Y
    576a:	c7 5a       	subi	r28, 0xA7	; 167
    576c:	d2 40       	sbci	r29, 0x02	; 2
    576e:	3f 93       	push	r19
    5770:	ca 55       	subi	r28, 0x5A	; 90
    5772:	dd 4f       	sbci	r29, 0xFD	; 253
    5774:	48 81       	ld	r20, Y
    5776:	c6 5a       	subi	r28, 0xA6	; 166
    5778:	d2 40       	sbci	r29, 0x02	; 2
    577a:	4f 93       	push	r20
    577c:	cb 55       	subi	r28, 0x5B	; 91
    577e:	dd 4f       	sbci	r29, 0xFD	; 253
    5780:	58 81       	ld	r21, Y
    5782:	c5 5a       	subi	r28, 0xA5	; 165
    5784:	d2 40       	sbci	r29, 0x02	; 2
    5786:	5f 93       	push	r21
    5788:	cc 55       	subi	r28, 0x5C	; 92
    578a:	dd 4f       	sbci	r29, 0xFD	; 253
    578c:	88 81       	ld	r24, Y
    578e:	c4 5a       	subi	r28, 0xA4	; 164
    5790:	d2 40       	sbci	r29, 0x02	; 2
    5792:	8f 93       	push	r24
    5794:	cd 55       	subi	r28, 0x5D	; 93
    5796:	dd 4f       	sbci	r29, 0xFD	; 253
    5798:	98 81       	ld	r25, Y
    579a:	c3 5a       	subi	r28, 0xA3	; 163
    579c:	d2 40       	sbci	r29, 0x02	; 2
    579e:	9f 93       	push	r25
    57a0:	1f 92       	push	r1
    57a2:	1f 92       	push	r1
    57a4:	1f 92       	push	r1
    57a6:	1f 92       	push	r1
    57a8:	1f 92       	push	r1
    57aa:	41 2c       	mov	r4, r1
    57ac:	4f 92       	push	r4
    57ae:	1f 92       	push	r1
    57b0:	1f 92       	push	r1
    57b2:	80 91 a7 24 	lds	r24, 0x24A7	; 0x8024a7 <TEMP>
    57b6:	90 91 a8 24 	lds	r25, 0x24A8	; 0x8024a8 <TEMP+0x1>
    57ba:	a0 91 a9 24 	lds	r26, 0x24A9	; 0x8024a9 <TEMP+0x2>
    57be:	b0 91 aa 24 	lds	r27, 0x24AA	; 0x8024aa <TEMP+0x3>
    57c2:	bc 01       	movw	r22, r24
    57c4:	cd 01       	movw	r24, r26
    57c6:	6e 5c       	subi	r22, 0xCE	; 206
    57c8:	7f 4f       	sbci	r23, 0xFF	; 255
    57ca:	8f 4f       	sbci	r24, 0xFF	; 255
    57cc:	9f 4f       	sbci	r25, 0xFF	; 255
    57ce:	24 e6       	ldi	r18, 0x64	; 100
    57d0:	30 e0       	ldi	r19, 0x00	; 0
    57d2:	40 e0       	ldi	r20, 0x00	; 0
    57d4:	50 e0       	ldi	r21, 0x00	; 0
    57d6:	0e 94 69 34 	call	0x68d2	; 0x68d2 <__divmodsi4>
    57da:	5f 93       	push	r21
    57dc:	4f 93       	push	r20
    57de:	3f 93       	push	r19
    57e0:	2f 93       	push	r18
    57e2:	bf 92       	push	r11
    57e4:	0f 93       	push	r16
    57e6:	1f 93       	push	r17
    57e8:	2f 92       	push	r2
    57ea:	ce 56       	subi	r28, 0x6E	; 110
    57ec:	dd 4f       	sbci	r29, 0xFD	; 253
    57ee:	a8 81       	ld	r26, Y
    57f0:	c2 59       	subi	r28, 0x92	; 146
    57f2:	d2 40       	sbci	r29, 0x02	; 2
    57f4:	af 93       	push	r26
    57f6:	cf 56       	subi	r28, 0x6F	; 111
    57f8:	dd 4f       	sbci	r29, 0xFD	; 253
    57fa:	b8 81       	ld	r27, Y
    57fc:	c1 59       	subi	r28, 0x91	; 145
    57fe:	d2 40       	sbci	r29, 0x02	; 2
    5800:	bf 93       	push	r27
    5802:	c0 57       	subi	r28, 0x70	; 112
    5804:	dd 4f       	sbci	r29, 0xFD	; 253
    5806:	e8 81       	ld	r30, Y
    5808:	c0 59       	subi	r28, 0x90	; 144
    580a:	d2 40       	sbci	r29, 0x02	; 2
    580c:	ef 93       	push	r30
    580e:	c1 57       	subi	r28, 0x71	; 113
    5810:	dd 4f       	sbci	r29, 0xFD	; 253
    5812:	f8 81       	ld	r31, Y
    5814:	cf 58       	subi	r28, 0x8F	; 143
    5816:	d2 40       	sbci	r29, 0x02	; 2
    5818:	ff 93       	push	r31
    581a:	c8 56       	subi	r28, 0x68	; 104
    581c:	dd 4f       	sbci	r29, 0xFD	; 253
    581e:	28 81       	ld	r18, Y
    5820:	c8 59       	subi	r28, 0x98	; 152
    5822:	d2 40       	sbci	r29, 0x02	; 2
    5824:	2f 93       	push	r18
    5826:	c9 56       	subi	r28, 0x69	; 105
    5828:	dd 4f       	sbci	r29, 0xFD	; 253
    582a:	38 81       	ld	r19, Y
    582c:	c7 59       	subi	r28, 0x97	; 151
    582e:	d2 40       	sbci	r29, 0x02	; 2
    5830:	3f 93       	push	r19
    5832:	ff 92       	push	r15
    5834:	ef 92       	push	r14
    5836:	df 92       	push	r13
    5838:	cf 92       	push	r12
    583a:	44 e1       	ldi	r20, 0x14	; 20
    583c:	4f 93       	push	r20
    583e:	52 e4       	ldi	r21, 0x42	; 66
    5840:	5f 93       	push	r21
    5842:	8d e5       	ldi	r24, 0x5D	; 93
    5844:	90 e2       	ldi	r25, 0x20	; 32
		sprintf(openlogger,"$%u,%"PRIu32",%u,%"PRIi32",%"PRIi32",%"PRIi32",%f,%"PRIi32",%"PRIi32",%"PRIi32",%"PRIi32",%"PRIi32",%f,%f,%f,%u\n",teamID,my_time,packetCount,altitude,pressure,(TEMP + 50) / 100,voltage,GPSTime,GPSLat,GPSLong,GPSAlt,GPSSats,smooth_x,smooth_y,smooth_z,state);
    5846:	9f 93       	push	r25
    5848:	8f 93       	push	r24
    584a:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    584e:	cd bf       	out	0x3d, r28	; 61
    5850:	de bf       	out	0x3e, r29	; 62
    5852:	80 91 b8 24 	lds	r24, 0x24B8	; 0x8024b8 <state>
    5856:	1f 92       	push	r1
    5858:	8f 93       	push	r24
    585a:	5f 92       	push	r5
    585c:	6f 92       	push	r6
    585e:	7f 92       	push	r7
    5860:	af 92       	push	r10
    5862:	c2 56       	subi	r28, 0x62	; 98
    5864:	dd 4f       	sbci	r29, 0xFD	; 253
    5866:	f8 81       	ld	r31, Y
    5868:	ce 59       	subi	r28, 0x9E	; 158
    586a:	d2 40       	sbci	r29, 0x02	; 2
    586c:	ff 93       	push	r31
    586e:	c3 56       	subi	r28, 0x63	; 99
    5870:	dd 4f       	sbci	r29, 0xFD	; 253
    5872:	28 81       	ld	r18, Y
    5874:	cd 59       	subi	r28, 0x9D	; 157
    5876:	d2 40       	sbci	r29, 0x02	; 2
    5878:	2f 93       	push	r18
    587a:	c4 56       	subi	r28, 0x64	; 100
    587c:	dd 4f       	sbci	r29, 0xFD	; 253
    587e:	38 81       	ld	r19, Y
    5880:	cc 59       	subi	r28, 0x9C	; 156
    5882:	d2 40       	sbci	r29, 0x02	; 2
    5884:	3f 93       	push	r19
    5886:	3f 92       	push	r3
    5888:	c5 56       	subi	r28, 0x65	; 101
    588a:	dd 4f       	sbci	r29, 0xFD	; 253
    588c:	48 81       	ld	r20, Y
    588e:	cb 59       	subi	r28, 0x9B	; 155
    5890:	d2 40       	sbci	r29, 0x02	; 2
    5892:	4f 93       	push	r20
    5894:	c6 56       	subi	r28, 0x66	; 102
    5896:	dd 4f       	sbci	r29, 0xFD	; 253
    5898:	58 81       	ld	r21, Y
    589a:	ca 59       	subi	r28, 0x9A	; 154
    589c:	d2 40       	sbci	r29, 0x02	; 2
    589e:	5f 93       	push	r21
    58a0:	c7 56       	subi	r28, 0x67	; 103
    58a2:	dd 4f       	sbci	r29, 0xFD	; 253
    58a4:	88 81       	ld	r24, Y
    58a6:	c9 59       	subi	r28, 0x99	; 153
    58a8:	d2 40       	sbci	r29, 0x02	; 2
    58aa:	8f 93       	push	r24
    58ac:	cd 56       	subi	r28, 0x6D	; 109
    58ae:	dd 4f       	sbci	r29, 0xFD	; 253
    58b0:	98 81       	ld	r25, Y
    58b2:	c3 59       	subi	r28, 0x93	; 147
    58b4:	d2 40       	sbci	r29, 0x02	; 2
    58b6:	9f 93       	push	r25
    58b8:	1f 92       	push	r1
    58ba:	1f 92       	push	r1
    58bc:	1f 92       	push	r1
    58be:	1f 92       	push	r1
    58c0:	c2 55       	subi	r28, 0x52	; 82
    58c2:	dd 4f       	sbci	r29, 0xFD	; 253
    58c4:	a8 81       	ld	r26, Y
    58c6:	ce 5a       	subi	r28, 0xAE	; 174
    58c8:	d2 40       	sbci	r29, 0x02	; 2
    58ca:	af 93       	push	r26
    58cc:	c3 55       	subi	r28, 0x53	; 83
    58ce:	dd 4f       	sbci	r29, 0xFD	; 253
    58d0:	b8 81       	ld	r27, Y
    58d2:	cd 5a       	subi	r28, 0xAD	; 173
    58d4:	d2 40       	sbci	r29, 0x02	; 2
    58d6:	bf 93       	push	r27
    58d8:	c4 55       	subi	r28, 0x54	; 84
    58da:	dd 4f       	sbci	r29, 0xFD	; 253
    58dc:	e8 81       	ld	r30, Y
    58de:	cc 5a       	subi	r28, 0xAC	; 172
    58e0:	d2 40       	sbci	r29, 0x02	; 2
    58e2:	ef 93       	push	r30
    58e4:	c5 55       	subi	r28, 0x55	; 85
    58e6:	dd 4f       	sbci	r29, 0xFD	; 253
    58e8:	f8 81       	ld	r31, Y
    58ea:	cb 5a       	subi	r28, 0xAB	; 171
    58ec:	d2 40       	sbci	r29, 0x02	; 2
    58ee:	ff 93       	push	r31
    58f0:	c6 55       	subi	r28, 0x56	; 86
    58f2:	dd 4f       	sbci	r29, 0xFD	; 253
    58f4:	28 81       	ld	r18, Y
    58f6:	ca 5a       	subi	r28, 0xAA	; 170
    58f8:	d2 40       	sbci	r29, 0x02	; 2
    58fa:	2f 93       	push	r18
    58fc:	c7 55       	subi	r28, 0x57	; 87
    58fe:	dd 4f       	sbci	r29, 0xFD	; 253
    5900:	38 81       	ld	r19, Y
    5902:	c9 5a       	subi	r28, 0xA9	; 169
    5904:	d2 40       	sbci	r29, 0x02	; 2
    5906:	3f 93       	push	r19
    5908:	c8 55       	subi	r28, 0x58	; 88
    590a:	dd 4f       	sbci	r29, 0xFD	; 253
    590c:	48 81       	ld	r20, Y
    590e:	c8 5a       	subi	r28, 0xA8	; 168
    5910:	d2 40       	sbci	r29, 0x02	; 2
    5912:	4f 93       	push	r20
    5914:	c9 55       	subi	r28, 0x59	; 89
    5916:	dd 4f       	sbci	r29, 0xFD	; 253
    5918:	58 81       	ld	r21, Y
    591a:	c7 5a       	subi	r28, 0xA7	; 167
    591c:	d2 40       	sbci	r29, 0x02	; 2
    591e:	5f 93       	push	r21
    5920:	ca 55       	subi	r28, 0x5A	; 90
    5922:	dd 4f       	sbci	r29, 0xFD	; 253
    5924:	88 81       	ld	r24, Y
    5926:	c6 5a       	subi	r28, 0xA6	; 166
    5928:	d2 40       	sbci	r29, 0x02	; 2
    592a:	8f 93       	push	r24
    592c:	cb 55       	subi	r28, 0x5B	; 91
    592e:	dd 4f       	sbci	r29, 0xFD	; 253
    5930:	98 81       	ld	r25, Y
    5932:	c5 5a       	subi	r28, 0xA5	; 165
    5934:	d2 40       	sbci	r29, 0x02	; 2
    5936:	9f 93       	push	r25
    5938:	cc 55       	subi	r28, 0x5C	; 92
    593a:	dd 4f       	sbci	r29, 0xFD	; 253
    593c:	a8 81       	ld	r26, Y
    593e:	c4 5a       	subi	r28, 0xA4	; 164
    5940:	d2 40       	sbci	r29, 0x02	; 2
    5942:	af 93       	push	r26
    5944:	cd 55       	subi	r28, 0x5D	; 93
    5946:	dd 4f       	sbci	r29, 0xFD	; 253
    5948:	b8 81       	ld	r27, Y
    594a:	c3 5a       	subi	r28, 0xA3	; 163
    594c:	d2 40       	sbci	r29, 0x02	; 2
    594e:	bf 93       	push	r27
    5950:	1f 92       	push	r1
    5952:	1f 92       	push	r1
    5954:	1f 92       	push	r1
    5956:	1f 92       	push	r1
    5958:	1f 92       	push	r1
    595a:	4f 92       	push	r4
    595c:	1f 92       	push	r1
    595e:	1f 92       	push	r1
    5960:	80 91 a7 24 	lds	r24, 0x24A7	; 0x8024a7 <TEMP>
    5964:	90 91 a8 24 	lds	r25, 0x24A8	; 0x8024a8 <TEMP+0x1>
    5968:	a0 91 a9 24 	lds	r26, 0x24A9	; 0x8024a9 <TEMP+0x2>
    596c:	b0 91 aa 24 	lds	r27, 0x24AA	; 0x8024aa <TEMP+0x3>
    5970:	bc 01       	movw	r22, r24
    5972:	cd 01       	movw	r24, r26
    5974:	6e 5c       	subi	r22, 0xCE	; 206
    5976:	7f 4f       	sbci	r23, 0xFF	; 255
    5978:	8f 4f       	sbci	r24, 0xFF	; 255
    597a:	9f 4f       	sbci	r25, 0xFF	; 255
    597c:	24 e6       	ldi	r18, 0x64	; 100
    597e:	30 e0       	ldi	r19, 0x00	; 0
    5980:	40 e0       	ldi	r20, 0x00	; 0
    5982:	50 e0       	ldi	r21, 0x00	; 0
    5984:	a6 d7       	rcall	.+3916   	; 0x68d2 <__divmodsi4>
    5986:	5f 93       	push	r21
    5988:	4f 93       	push	r20
    598a:	3f 93       	push	r19
    598c:	2f 93       	push	r18
    598e:	bf 92       	push	r11
    5990:	0f 93       	push	r16
    5992:	1f 93       	push	r17
    5994:	2f 92       	push	r2
    5996:	ce 56       	subi	r28, 0x6E	; 110
    5998:	dd 4f       	sbci	r29, 0xFD	; 253
    599a:	e8 81       	ld	r30, Y
    599c:	c2 59       	subi	r28, 0x92	; 146
    599e:	d2 40       	sbci	r29, 0x02	; 2
    59a0:	ef 93       	push	r30
    59a2:	cf 56       	subi	r28, 0x6F	; 111
    59a4:	dd 4f       	sbci	r29, 0xFD	; 253
    59a6:	f8 81       	ld	r31, Y
    59a8:	c1 59       	subi	r28, 0x91	; 145
    59aa:	d2 40       	sbci	r29, 0x02	; 2
    59ac:	ff 93       	push	r31
    59ae:	c0 57       	subi	r28, 0x70	; 112
    59b0:	dd 4f       	sbci	r29, 0xFD	; 253
    59b2:	28 81       	ld	r18, Y
    59b4:	c0 59       	subi	r28, 0x90	; 144
    59b6:	d2 40       	sbci	r29, 0x02	; 2
    59b8:	2f 93       	push	r18
    59ba:	c1 57       	subi	r28, 0x71	; 113
    59bc:	dd 4f       	sbci	r29, 0xFD	; 253
    59be:	38 81       	ld	r19, Y
    59c0:	cf 58       	subi	r28, 0x8F	; 143
    59c2:	d2 40       	sbci	r29, 0x02	; 2
    59c4:	3f 93       	push	r19
    59c6:	c8 56       	subi	r28, 0x68	; 104
    59c8:	dd 4f       	sbci	r29, 0xFD	; 253
    59ca:	48 81       	ld	r20, Y
    59cc:	c8 59       	subi	r28, 0x98	; 152
    59ce:	d2 40       	sbci	r29, 0x02	; 2
    59d0:	4f 93       	push	r20
    59d2:	c9 56       	subi	r28, 0x69	; 105
    59d4:	dd 4f       	sbci	r29, 0xFD	; 253
    59d6:	58 81       	ld	r21, Y
    59d8:	c7 59       	subi	r28, 0x97	; 151
    59da:	d2 40       	sbci	r29, 0x02	; 2
    59dc:	5f 93       	push	r21
    59de:	ff 92       	push	r15
    59e0:	ef 92       	push	r14
    59e2:	df 92       	push	r13
    59e4:	cf 92       	push	r12
    59e6:	84 e1       	ldi	r24, 0x14	; 20
    59e8:	8f 93       	push	r24
    59ea:	92 e4       	ldi	r25, 0x42	; 66
    59ec:	9f 93       	push	r25
    59ee:	ad e5       	ldi	r26, 0x5D	; 93
    59f0:	b0 e2       	ldi	r27, 0x20	; 32
    59f2:	bf 93       	push	r27
    59f4:	af 93       	push	r26
    59f6:	c2 57       	subi	r28, 0x72	; 114
    59f8:	dd 4f       	sbci	r29, 0xFD	; 253
    59fa:	f8 81       	ld	r31, Y
    59fc:	ce 58       	subi	r28, 0x8E	; 142
    59fe:	d2 40       	sbci	r29, 0x02	; 2
    5a00:	ff 93       	push	r31
    5a02:	c3 57       	subi	r28, 0x73	; 115
    5a04:	dd 4f       	sbci	r29, 0xFD	; 253
    5a06:	28 81       	ld	r18, Y
    5a08:	cd 58       	subi	r28, 0x8D	; 141
		packetCount++;
		
		usart_serial_write_packet(&USARTC0,openlogger,strlen(openlogger));
    5a0a:	d2 40       	sbci	r29, 0x02	; 2
    5a0c:	2f 93       	push	r18
    5a0e:	0e 94 ec 36 	call	0x6dd8	; 0x6dd8 <sprintf>
    5a12:	c3 57       	subi	r28, 0x73	; 115
    5a14:	dd 4f       	sbci	r29, 0xFD	; 253
    5a16:	e8 81       	ld	r30, Y
    5a18:	f9 81       	ldd	r31, Y+1	; 0x01
    5a1a:	cd 58       	subi	r28, 0x8D	; 141
    5a1c:	d2 40       	sbci	r29, 0x02	; 2
    5a1e:	01 90       	ld	r0, Z+
    5a20:	00 20       	and	r0, r0
    5a22:	e9 f7       	brne	.-6      	; 0x5a1e <main+0x974>
    5a24:	31 97       	sbiw	r30, 0x01	; 1
    5a26:	af 01       	movw	r20, r30
    5a28:	c3 57       	subi	r28, 0x73	; 115
    5a2a:	dd 4f       	sbci	r29, 0xFD	; 253
    5a2c:	88 81       	ld	r24, Y
    5a2e:	99 81       	ldd	r25, Y+1	; 0x01
    5a30:	cd 58       	subi	r28, 0x8D	; 141
    5a32:	d2 40       	sbci	r29, 0x02	; 2
    5a34:	48 1b       	sub	r20, r24
    5a36:	59 0b       	sbc	r21, r25
    5a38:	cd bf       	out	0x3d, r28	; 61
    5a3a:	de bf       	out	0x3e, r29	; 62
    5a3c:	be 01       	movw	r22, r28
    5a3e:	66 5f       	subi	r22, 0xF6	; 246
    5a40:	7f 4f       	sbci	r23, 0xFF	; 255
	
	
	// Flight States!
	
		//FS0
		if(state==0){
    5a42:	80 ea       	ldi	r24, 0xA0	; 160
    5a44:	98 e0       	ldi	r25, 0x08	; 8
    5a46:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <usart_serial_write_packet>
			//PORTE.OUTSET = 0b01010101;
			//buzzer_counter_init(104, 50);
			//servo_counter(.5);
			//PORTA.OUT = 0b00001000; //Hopefully this does the buzzer... buzzer is really quiet rn, gotta fix that. (this is just for testing)
			//printf("max alt: %"PRIi32"\n", max_altitude);
			if ((int32_t)max_altitude - (int32_t)altitude > 50){ //Work on Velocity later, this will work for now
    5a4a:	80 91 b8 24 	lds	r24, 0x24B8	; 0x8024b8 <state>
    5a4e:	81 11       	cpse	r24, r1
    5a50:	3c c0       	rjmp	.+120    	; 0x5aca <main+0xa20>
    5a52:	c5 54       	subi	r28, 0x45	; 69
    5a54:	dd 4f       	sbci	r29, 0xFD	; 253
    5a56:	88 81       	ld	r24, Y
    5a58:	99 81       	ldd	r25, Y+1	; 0x01
    5a5a:	aa 81       	ldd	r26, Y+2	; 0x02
    5a5c:	bb 81       	ldd	r27, Y+3	; 0x03
    5a5e:	cb 5b       	subi	r28, 0xBB	; 187
    5a60:	d2 40       	sbci	r29, 0x02	; 2
    5a62:	c1 57       	subi	r28, 0x71	; 113
    5a64:	dd 4f       	sbci	r29, 0xFD	; 253
    5a66:	28 81       	ld	r18, Y
    5a68:	39 81       	ldd	r19, Y+1	; 0x01
    5a6a:	4a 81       	ldd	r20, Y+2	; 0x02
    5a6c:	5b 81       	ldd	r21, Y+3	; 0x03
    5a6e:	cf 58       	subi	r28, 0x8F	; 143
    5a70:	d2 40       	sbci	r29, 0x02	; 2
    5a72:	82 1b       	sub	r24, r18
    5a74:	93 0b       	sbc	r25, r19
    5a76:	a4 0b       	sbc	r26, r20
    5a78:	b5 0b       	sbc	r27, r21
				PORTE.DIRSET = 0b00000001;	//Deploy Heat Shield
    5a7a:	c3 97       	sbiw	r24, 0x33	; 51
    5a7c:	a1 05       	cpc	r26, r1
    5a7e:	b1 05       	cpc	r27, r1
				PORTE.OUTSET = 0b00000001;	//Deploy Heat Shield
    5a80:	3c f0       	brlt	.+14     	; 0x5a90 <main+0x9e6>
    5a82:	31 e0       	ldi	r19, 0x01	; 1
				state = 1;
    5a84:	30 93 81 06 	sts	0x0681, r19	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    5a88:	30 93 85 06 	sts	0x0685, r19	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    5a8c:	30 93 b8 24 	sts	0x24B8, r19	; 0x8024b8 <state>
    5a90:	c5 54       	subi	r28, 0x45	; 69
    5a92:	dd 4f       	sbci	r29, 0xFD	; 253
    5a94:	88 81       	ld	r24, Y
    5a96:	99 81       	ldd	r25, Y+1	; 0x01
    5a98:	aa 81       	ldd	r26, Y+2	; 0x02
    5a9a:	bb 81       	ldd	r27, Y+3	; 0x03
    5a9c:	cb 5b       	subi	r28, 0xBB	; 187
    5a9e:	d2 40       	sbci	r29, 0x02	; 2
    5aa0:	c1 57       	subi	r28, 0x71	; 113
    5aa2:	dd 4f       	sbci	r29, 0xFD	; 253
    5aa4:	28 81       	ld	r18, Y
    5aa6:	39 81       	ldd	r19, Y+1	; 0x01
    5aa8:	4a 81       	ldd	r20, Y+2	; 0x02
    5aaa:	5b 81       	ldd	r21, Y+3	; 0x03
    5aac:	cf 58       	subi	r28, 0x8F	; 143
    5aae:	d2 40       	sbci	r29, 0x02	; 2
    5ab0:	82 17       	cp	r24, r18
    5ab2:	93 07       	cpc	r25, r19
    5ab4:	a4 07       	cpc	r26, r20
    5ab6:	b5 07       	cpc	r27, r21
    5ab8:	44 f4       	brge	.+16     	; 0x5aca <main+0xa20>
    5aba:	c5 54       	subi	r28, 0x45	; 69
    5abc:	dd 4f       	sbci	r29, 0xFD	; 253
    5abe:	28 83       	st	Y, r18
				max_altitude = altitude;
			}
		}
		
		//FS1
		if(state==1){
    5ac0:	39 83       	std	Y+1, r19	; 0x01
    5ac2:	4a 83       	std	Y+2, r20	; 0x02
    5ac4:	5b 83       	std	Y+3, r21	; 0x03
    5ac6:	cb 5b       	subi	r28, 0xBB	; 187
			//printf("Flight State 1 \n");
			if(altitude-initial_altitude<300){
    5ac8:	d2 40       	sbci	r29, 0x02	; 2
    5aca:	80 91 b8 24 	lds	r24, 0x24B8	; 0x8024b8 <state>
    5ace:	81 30       	cpi	r24, 0x01	; 1
    5ad0:	c9 f4       	brne	.+50     	; 0x5b04 <main+0xa5a>
    5ad2:	c1 57       	subi	r28, 0x71	; 113
    5ad4:	dd 4f       	sbci	r29, 0xFD	; 253
    5ad6:	88 81       	ld	r24, Y
    5ad8:	99 81       	ldd	r25, Y+1	; 0x01
    5ada:	aa 81       	ldd	r26, Y+2	; 0x02
    5adc:	bb 81       	ldd	r27, Y+3	; 0x03
    5ade:	cf 58       	subi	r28, 0x8F	; 143
    5ae0:	d2 40       	sbci	r29, 0x02	; 2
    5ae2:	8c 32       	cpi	r24, 0x2C	; 44
				//PORTE.DIRSET = 0b00000010;	//Activate Camera
				//PORTE.OUTSET = 0b00000010;	//Activate Camera
				heatshield_solenoid();
    5ae4:	91 40       	sbci	r25, 0x01	; 1
    5ae6:	a1 05       	cpc	r26, r1
				delay_ms(2000);
    5ae8:	b1 05       	cpc	r27, r1
    5aea:	0c f0       	brlt	.+2      	; 0x5aee <main+0xa44>
    5aec:	ad cb       	rjmp	.-2214   	; 0x5248 <main+0x19e>
    5aee:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <heatshield_solenoid>
    5af2:	6c ea       	ldi	r22, 0xAC	; 172
				state = 2;
    5af4:	72 ec       	ldi	r23, 0xC2	; 194
    5af6:	82 ea       	ldi	r24, 0xA2	; 162
    5af8:	90 e0       	ldi	r25, 0x00	; 0
			}
		}
		
		//FS2
		if(state==2){
    5afa:	53 d9       	rcall	.-3418   	; 0x4da2 <__portable_avr_delay_cycles>
    5afc:	82 e0       	ldi	r24, 0x02	; 2
    5afe:	80 93 b8 24 	sts	0x24B8, r24	; 0x8024b8 <state>
			//printf("Flight State 2 \n");
			if(smooth_altitude-altitude<3 && altitude-initial_altitude<50){
    5b02:	03 c0       	rjmp	.+6      	; 0x5b0a <main+0xa60>
    5b04:	82 30       	cpi	r24, 0x02	; 2
    5b06:	09 f0       	breq	.+2      	; 0x5b0a <main+0xa60>
    5b08:	9f cb       	rjmp	.-2242   	; 0x5248 <main+0x19e>
    5b0a:	c1 56       	subi	r28, 0x61	; 97
    5b0c:	dd 4f       	sbci	r29, 0xFD	; 253
    5b0e:	88 81       	ld	r24, Y
    5b10:	99 81       	ldd	r25, Y+1	; 0x01
    5b12:	aa 81       	ldd	r26, Y+2	; 0x02
    5b14:	bb 81       	ldd	r27, Y+3	; 0x03
    5b16:	cf 59       	subi	r28, 0x9F	; 159
    5b18:	d2 40       	sbci	r29, 0x02	; 2
    5b1a:	c1 57       	subi	r28, 0x71	; 113
    5b1c:	dd 4f       	sbci	r29, 0xFD	; 253
    5b1e:	28 81       	ld	r18, Y
    5b20:	39 81       	ldd	r19, Y+1	; 0x01
    5b22:	4a 81       	ldd	r20, Y+2	; 0x02
    5b24:	5b 81       	ldd	r21, Y+3	; 0x03
    5b26:	cf 58       	subi	r28, 0x8F	; 143
    5b28:	d2 40       	sbci	r29, 0x02	; 2
    5b2a:	82 1b       	sub	r24, r18
    5b2c:	93 0b       	sbc	r25, r19
    5b2e:	a4 0b       	sbc	r26, r20
    5b30:	b5 0b       	sbc	r27, r21
    5b32:	03 97       	sbiw	r24, 0x03	; 3
    5b34:	a1 05       	cpc	r26, r1
    5b36:	b1 05       	cpc	r27, r1
    5b38:	0c f0       	brlt	.+2      	; 0x5b3c <main+0xa92>
    5b3a:	86 cb       	rjmp	.-2292   	; 0x5248 <main+0x19e>
    5b3c:	22 33       	cpi	r18, 0x32	; 50
				buzzer_counter_init(104, 50);
    5b3e:	31 05       	cpc	r19, r1
    5b40:	41 05       	cpc	r20, r1
    5b42:	51 05       	cpc	r21, r1
    5b44:	0c f0       	brlt	.+2      	; 0x5b48 <main+0xa9e>
    5b46:	80 cb       	rjmp	.-2304   	; 0x5248 <main+0x19e>
    5b48:	62 e3       	ldi	r22, 0x32	; 50
				state = 3;
    5b4a:	70 e0       	ldi	r23, 0x00	; 0
    5b4c:	88 e6       	ldi	r24, 0x68	; 104
    5b4e:	90 e0       	ldi	r25, 0x00	; 0
		}
	
	
	
	
	}
    5b50:	00 d8       	rcall	.-4096   	; 0x4b52 <buzzer_counter_init>
    5b52:	33 e0       	ldi	r19, 0x03	; 3
    5b54:	30 93 b8 24 	sts	0x24B8, r19	; 0x8024b8 <state>
    5b58:	77 cb       	rjmp	.-2322   	; 0x5248 <main+0x19e>

00005b5a <__subsf3>:
    5b5a:	50 58       	subi	r21, 0x80	; 128

00005b5c <__addsf3>:
    5b5c:	bb 27       	eor	r27, r27
    5b5e:	aa 27       	eor	r26, r26
    5b60:	0e d0       	rcall	.+28     	; 0x5b7e <__addsf3x>
    5b62:	fc c1       	rjmp	.+1016   	; 0x5f5c <__fp_round>
    5b64:	ed d1       	rcall	.+986    	; 0x5f40 <__fp_pscA>
    5b66:	30 f0       	brcs	.+12     	; 0x5b74 <__addsf3+0x18>
    5b68:	f2 d1       	rcall	.+996    	; 0x5f4e <__fp_pscB>
    5b6a:	20 f0       	brcs	.+8      	; 0x5b74 <__addsf3+0x18>
    5b6c:	31 f4       	brne	.+12     	; 0x5b7a <__addsf3+0x1e>
    5b6e:	9f 3f       	cpi	r25, 0xFF	; 255
    5b70:	11 f4       	brne	.+4      	; 0x5b76 <__addsf3+0x1a>
    5b72:	1e f4       	brtc	.+6      	; 0x5b7a <__addsf3+0x1e>
    5b74:	bd c1       	rjmp	.+890    	; 0x5ef0 <__fp_nan>
    5b76:	0e f4       	brtc	.+2      	; 0x5b7a <__addsf3+0x1e>
    5b78:	e0 95       	com	r30
    5b7a:	e7 fb       	bst	r30, 7
    5b7c:	b3 c1       	rjmp	.+870    	; 0x5ee4 <__fp_inf>

00005b7e <__addsf3x>:
    5b7e:	e9 2f       	mov	r30, r25
    5b80:	fe d1       	rcall	.+1020   	; 0x5f7e <__fp_split3>
    5b82:	80 f3       	brcs	.-32     	; 0x5b64 <__addsf3+0x8>
    5b84:	ba 17       	cp	r27, r26
    5b86:	62 07       	cpc	r22, r18
    5b88:	73 07       	cpc	r23, r19
    5b8a:	84 07       	cpc	r24, r20
    5b8c:	95 07       	cpc	r25, r21
    5b8e:	18 f0       	brcs	.+6      	; 0x5b96 <__addsf3x+0x18>
    5b90:	71 f4       	brne	.+28     	; 0x5bae <__addsf3x+0x30>
    5b92:	9e f5       	brtc	.+102    	; 0x5bfa <__addsf3x+0x7c>
    5b94:	16 c2       	rjmp	.+1068   	; 0x5fc2 <__fp_zero>
    5b96:	0e f4       	brtc	.+2      	; 0x5b9a <__addsf3x+0x1c>
    5b98:	e0 95       	com	r30
    5b9a:	0b 2e       	mov	r0, r27
    5b9c:	ba 2f       	mov	r27, r26
    5b9e:	a0 2d       	mov	r26, r0
    5ba0:	0b 01       	movw	r0, r22
    5ba2:	b9 01       	movw	r22, r18
    5ba4:	90 01       	movw	r18, r0
    5ba6:	0c 01       	movw	r0, r24
    5ba8:	ca 01       	movw	r24, r20
    5baa:	a0 01       	movw	r20, r0
    5bac:	11 24       	eor	r1, r1
    5bae:	ff 27       	eor	r31, r31
    5bb0:	59 1b       	sub	r21, r25
    5bb2:	99 f0       	breq	.+38     	; 0x5bda <__addsf3x+0x5c>
    5bb4:	59 3f       	cpi	r21, 0xF9	; 249
    5bb6:	50 f4       	brcc	.+20     	; 0x5bcc <__addsf3x+0x4e>
    5bb8:	50 3e       	cpi	r21, 0xE0	; 224
    5bba:	68 f1       	brcs	.+90     	; 0x5c16 <__addsf3x+0x98>
    5bbc:	1a 16       	cp	r1, r26
    5bbe:	f0 40       	sbci	r31, 0x00	; 0
    5bc0:	a2 2f       	mov	r26, r18
    5bc2:	23 2f       	mov	r18, r19
    5bc4:	34 2f       	mov	r19, r20
    5bc6:	44 27       	eor	r20, r20
    5bc8:	58 5f       	subi	r21, 0xF8	; 248
    5bca:	f3 cf       	rjmp	.-26     	; 0x5bb2 <__addsf3x+0x34>
    5bcc:	46 95       	lsr	r20
    5bce:	37 95       	ror	r19
    5bd0:	27 95       	ror	r18
    5bd2:	a7 95       	ror	r26
    5bd4:	f0 40       	sbci	r31, 0x00	; 0
    5bd6:	53 95       	inc	r21
    5bd8:	c9 f7       	brne	.-14     	; 0x5bcc <__addsf3x+0x4e>
    5bda:	7e f4       	brtc	.+30     	; 0x5bfa <__addsf3x+0x7c>
    5bdc:	1f 16       	cp	r1, r31
    5bde:	ba 0b       	sbc	r27, r26
    5be0:	62 0b       	sbc	r22, r18
    5be2:	73 0b       	sbc	r23, r19
    5be4:	84 0b       	sbc	r24, r20
    5be6:	ba f0       	brmi	.+46     	; 0x5c16 <__addsf3x+0x98>
    5be8:	91 50       	subi	r25, 0x01	; 1
    5bea:	a1 f0       	breq	.+40     	; 0x5c14 <__addsf3x+0x96>
    5bec:	ff 0f       	add	r31, r31
    5bee:	bb 1f       	adc	r27, r27
    5bf0:	66 1f       	adc	r22, r22
    5bf2:	77 1f       	adc	r23, r23
    5bf4:	88 1f       	adc	r24, r24
    5bf6:	c2 f7       	brpl	.-16     	; 0x5be8 <__addsf3x+0x6a>
    5bf8:	0e c0       	rjmp	.+28     	; 0x5c16 <__addsf3x+0x98>
    5bfa:	ba 0f       	add	r27, r26
    5bfc:	62 1f       	adc	r22, r18
    5bfe:	73 1f       	adc	r23, r19
    5c00:	84 1f       	adc	r24, r20
    5c02:	48 f4       	brcc	.+18     	; 0x5c16 <__addsf3x+0x98>
    5c04:	87 95       	ror	r24
    5c06:	77 95       	ror	r23
    5c08:	67 95       	ror	r22
    5c0a:	b7 95       	ror	r27
    5c0c:	f7 95       	ror	r31
    5c0e:	9e 3f       	cpi	r25, 0xFE	; 254
    5c10:	08 f0       	brcs	.+2      	; 0x5c14 <__addsf3x+0x96>
    5c12:	b3 cf       	rjmp	.-154    	; 0x5b7a <__addsf3+0x1e>
    5c14:	93 95       	inc	r25
    5c16:	88 0f       	add	r24, r24
    5c18:	08 f0       	brcs	.+2      	; 0x5c1c <__addsf3x+0x9e>
    5c1a:	99 27       	eor	r25, r25
    5c1c:	ee 0f       	add	r30, r30
    5c1e:	97 95       	ror	r25
    5c20:	87 95       	ror	r24
    5c22:	08 95       	ret
    5c24:	8d d1       	rcall	.+794    	; 0x5f40 <__fp_pscA>
    5c26:	58 f0       	brcs	.+22     	; 0x5c3e <__addsf3x+0xc0>
    5c28:	80 e8       	ldi	r24, 0x80	; 128
    5c2a:	91 e0       	ldi	r25, 0x01	; 1
    5c2c:	09 f4       	brne	.+2      	; 0x5c30 <__addsf3x+0xb2>
    5c2e:	9e ef       	ldi	r25, 0xFE	; 254
    5c30:	8e d1       	rcall	.+796    	; 0x5f4e <__fp_pscB>
    5c32:	28 f0       	brcs	.+10     	; 0x5c3e <__addsf3x+0xc0>
    5c34:	40 e8       	ldi	r20, 0x80	; 128
    5c36:	51 e0       	ldi	r21, 0x01	; 1
    5c38:	59 f4       	brne	.+22     	; 0x5c50 <atan2+0xe>
    5c3a:	5e ef       	ldi	r21, 0xFE	; 254
    5c3c:	09 c0       	rjmp	.+18     	; 0x5c50 <atan2+0xe>
    5c3e:	58 c1       	rjmp	.+688    	; 0x5ef0 <__fp_nan>
    5c40:	c0 c1       	rjmp	.+896    	; 0x5fc2 <__fp_zero>

00005c42 <atan2>:
    5c42:	e9 2f       	mov	r30, r25
    5c44:	e0 78       	andi	r30, 0x80	; 128
    5c46:	9b d1       	rcall	.+822    	; 0x5f7e <__fp_split3>
    5c48:	68 f3       	brcs	.-38     	; 0x5c24 <__addsf3x+0xa6>
    5c4a:	09 2e       	mov	r0, r25
    5c4c:	05 2a       	or	r0, r21
    5c4e:	c1 f3       	breq	.-16     	; 0x5c40 <__addsf3x+0xc2>
    5c50:	26 17       	cp	r18, r22
    5c52:	37 07       	cpc	r19, r23
    5c54:	48 07       	cpc	r20, r24
    5c56:	59 07       	cpc	r21, r25
    5c58:	38 f0       	brcs	.+14     	; 0x5c68 <atan2+0x26>
    5c5a:	0e 2e       	mov	r0, r30
    5c5c:	07 f8       	bld	r0, 7
    5c5e:	e0 25       	eor	r30, r0
    5c60:	69 f0       	breq	.+26     	; 0x5c7c <atan2+0x3a>
    5c62:	e0 25       	eor	r30, r0
    5c64:	e0 64       	ori	r30, 0x40	; 64
    5c66:	0a c0       	rjmp	.+20     	; 0x5c7c <atan2+0x3a>
    5c68:	ef 63       	ori	r30, 0x3F	; 63
    5c6a:	07 f8       	bld	r0, 7
    5c6c:	00 94       	com	r0
    5c6e:	07 fa       	bst	r0, 7
    5c70:	db 01       	movw	r26, r22
    5c72:	b9 01       	movw	r22, r18
    5c74:	9d 01       	movw	r18, r26
    5c76:	dc 01       	movw	r26, r24
    5c78:	ca 01       	movw	r24, r20
    5c7a:	ad 01       	movw	r20, r26
    5c7c:	ef 93       	push	r30
    5c7e:	47 d0       	rcall	.+142    	; 0x5d0e <__divsf3_pse>
    5c80:	6d d1       	rcall	.+730    	; 0x5f5c <__fp_round>
    5c82:	0a d0       	rcall	.+20     	; 0x5c98 <atan>
    5c84:	5f 91       	pop	r21
    5c86:	55 23       	and	r21, r21
    5c88:	31 f0       	breq	.+12     	; 0x5c96 <atan2+0x54>
    5c8a:	2b ed       	ldi	r18, 0xDB	; 219
    5c8c:	3f e0       	ldi	r19, 0x0F	; 15
    5c8e:	49 e4       	ldi	r20, 0x49	; 73
    5c90:	50 fd       	sbrc	r21, 0
    5c92:	49 ec       	ldi	r20, 0xC9	; 201
    5c94:	63 cf       	rjmp	.-314    	; 0x5b5c <__addsf3>
    5c96:	08 95       	ret

00005c98 <atan>:
    5c98:	df 93       	push	r29
    5c9a:	dd 27       	eor	r29, r29
    5c9c:	b9 2f       	mov	r27, r25
    5c9e:	bf 77       	andi	r27, 0x7F	; 127
    5ca0:	40 e8       	ldi	r20, 0x80	; 128
    5ca2:	5f e3       	ldi	r21, 0x3F	; 63
    5ca4:	16 16       	cp	r1, r22
    5ca6:	17 06       	cpc	r1, r23
    5ca8:	48 07       	cpc	r20, r24
    5caa:	5b 07       	cpc	r21, r27
    5cac:	10 f4       	brcc	.+4      	; 0x5cb2 <atan+0x1a>
    5cae:	d9 2f       	mov	r29, r25
    5cb0:	93 d1       	rcall	.+806    	; 0x5fd8 <inverse>
    5cb2:	9f 93       	push	r25
    5cb4:	8f 93       	push	r24
    5cb6:	7f 93       	push	r23
    5cb8:	6f 93       	push	r22
    5cba:	3a d2       	rcall	.+1140   	; 0x6130 <square>
    5cbc:	ea e7       	ldi	r30, 0x7A	; 122
    5cbe:	f2 e0       	ldi	r31, 0x02	; 2
    5cc0:	1a d1       	rcall	.+564    	; 0x5ef6 <__fp_powser>
    5cc2:	4c d1       	rcall	.+664    	; 0x5f5c <__fp_round>
    5cc4:	2f 91       	pop	r18
    5cc6:	3f 91       	pop	r19
    5cc8:	4f 91       	pop	r20
    5cca:	5f 91       	pop	r21
    5ccc:	98 d1       	rcall	.+816    	; 0x5ffe <__mulsf3x>
    5cce:	dd 23       	and	r29, r29
    5cd0:	49 f0       	breq	.+18     	; 0x5ce4 <atan+0x4c>
    5cd2:	90 58       	subi	r25, 0x80	; 128
    5cd4:	a2 ea       	ldi	r26, 0xA2	; 162
    5cd6:	2a ed       	ldi	r18, 0xDA	; 218
    5cd8:	3f e0       	ldi	r19, 0x0F	; 15
    5cda:	49 ec       	ldi	r20, 0xC9	; 201
    5cdc:	5f e3       	ldi	r21, 0x3F	; 63
    5cde:	d0 78       	andi	r29, 0x80	; 128
    5ce0:	5d 27       	eor	r21, r29
    5ce2:	4d df       	rcall	.-358    	; 0x5b7e <__addsf3x>
    5ce4:	df 91       	pop	r29
    5ce6:	3a c1       	rjmp	.+628    	; 0x5f5c <__fp_round>

00005ce8 <__cmpsf2>:
    5ce8:	d9 d0       	rcall	.+434    	; 0x5e9c <__fp_cmp>
    5cea:	08 f4       	brcc	.+2      	; 0x5cee <__cmpsf2+0x6>
    5cec:	81 e0       	ldi	r24, 0x01	; 1
    5cee:	08 95       	ret

00005cf0 <__divsf3>:
    5cf0:	0c d0       	rcall	.+24     	; 0x5d0a <__divsf3x>
    5cf2:	34 c1       	rjmp	.+616    	; 0x5f5c <__fp_round>
    5cf4:	2c d1       	rcall	.+600    	; 0x5f4e <__fp_pscB>
    5cf6:	40 f0       	brcs	.+16     	; 0x5d08 <__divsf3+0x18>
    5cf8:	23 d1       	rcall	.+582    	; 0x5f40 <__fp_pscA>
    5cfa:	30 f0       	brcs	.+12     	; 0x5d08 <__divsf3+0x18>
    5cfc:	21 f4       	brne	.+8      	; 0x5d06 <__divsf3+0x16>
    5cfe:	5f 3f       	cpi	r21, 0xFF	; 255
    5d00:	19 f0       	breq	.+6      	; 0x5d08 <__divsf3+0x18>
    5d02:	f0 c0       	rjmp	.+480    	; 0x5ee4 <__fp_inf>
    5d04:	51 11       	cpse	r21, r1
    5d06:	5e c1       	rjmp	.+700    	; 0x5fc4 <__fp_szero>
    5d08:	f3 c0       	rjmp	.+486    	; 0x5ef0 <__fp_nan>

00005d0a <__divsf3x>:
    5d0a:	39 d1       	rcall	.+626    	; 0x5f7e <__fp_split3>
    5d0c:	98 f3       	brcs	.-26     	; 0x5cf4 <__divsf3+0x4>

00005d0e <__divsf3_pse>:
    5d0e:	99 23       	and	r25, r25
    5d10:	c9 f3       	breq	.-14     	; 0x5d04 <__divsf3+0x14>
    5d12:	55 23       	and	r21, r21
    5d14:	b1 f3       	breq	.-20     	; 0x5d02 <__divsf3+0x12>
    5d16:	95 1b       	sub	r25, r21
    5d18:	55 0b       	sbc	r21, r21
    5d1a:	bb 27       	eor	r27, r27
    5d1c:	aa 27       	eor	r26, r26
    5d1e:	62 17       	cp	r22, r18
    5d20:	73 07       	cpc	r23, r19
    5d22:	84 07       	cpc	r24, r20
    5d24:	38 f0       	brcs	.+14     	; 0x5d34 <__divsf3_pse+0x26>
    5d26:	9f 5f       	subi	r25, 0xFF	; 255
    5d28:	5f 4f       	sbci	r21, 0xFF	; 255
    5d2a:	22 0f       	add	r18, r18
    5d2c:	33 1f       	adc	r19, r19
    5d2e:	44 1f       	adc	r20, r20
    5d30:	aa 1f       	adc	r26, r26
    5d32:	a9 f3       	breq	.-22     	; 0x5d1e <__divsf3_pse+0x10>
    5d34:	33 d0       	rcall	.+102    	; 0x5d9c <__divsf3_pse+0x8e>
    5d36:	0e 2e       	mov	r0, r30
    5d38:	3a f0       	brmi	.+14     	; 0x5d48 <__divsf3_pse+0x3a>
    5d3a:	e0 e8       	ldi	r30, 0x80	; 128
    5d3c:	30 d0       	rcall	.+96     	; 0x5d9e <__divsf3_pse+0x90>
    5d3e:	91 50       	subi	r25, 0x01	; 1
    5d40:	50 40       	sbci	r21, 0x00	; 0
    5d42:	e6 95       	lsr	r30
    5d44:	00 1c       	adc	r0, r0
    5d46:	ca f7       	brpl	.-14     	; 0x5d3a <__divsf3_pse+0x2c>
    5d48:	29 d0       	rcall	.+82     	; 0x5d9c <__divsf3_pse+0x8e>
    5d4a:	fe 2f       	mov	r31, r30
    5d4c:	27 d0       	rcall	.+78     	; 0x5d9c <__divsf3_pse+0x8e>
    5d4e:	66 0f       	add	r22, r22
    5d50:	77 1f       	adc	r23, r23
    5d52:	88 1f       	adc	r24, r24
    5d54:	bb 1f       	adc	r27, r27
    5d56:	26 17       	cp	r18, r22
    5d58:	37 07       	cpc	r19, r23
    5d5a:	48 07       	cpc	r20, r24
    5d5c:	ab 07       	cpc	r26, r27
    5d5e:	b0 e8       	ldi	r27, 0x80	; 128
    5d60:	09 f0       	breq	.+2      	; 0x5d64 <__divsf3_pse+0x56>
    5d62:	bb 0b       	sbc	r27, r27
    5d64:	80 2d       	mov	r24, r0
    5d66:	bf 01       	movw	r22, r30
    5d68:	ff 27       	eor	r31, r31
    5d6a:	93 58       	subi	r25, 0x83	; 131
    5d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    5d6e:	2a f0       	brmi	.+10     	; 0x5d7a <__divsf3_pse+0x6c>
    5d70:	9e 3f       	cpi	r25, 0xFE	; 254
    5d72:	51 05       	cpc	r21, r1
    5d74:	68 f0       	brcs	.+26     	; 0x5d90 <__divsf3_pse+0x82>
    5d76:	b6 c0       	rjmp	.+364    	; 0x5ee4 <__fp_inf>
    5d78:	25 c1       	rjmp	.+586    	; 0x5fc4 <__fp_szero>
    5d7a:	5f 3f       	cpi	r21, 0xFF	; 255
    5d7c:	ec f3       	brlt	.-6      	; 0x5d78 <__divsf3_pse+0x6a>
    5d7e:	98 3e       	cpi	r25, 0xE8	; 232
    5d80:	dc f3       	brlt	.-10     	; 0x5d78 <__divsf3_pse+0x6a>
    5d82:	86 95       	lsr	r24
    5d84:	77 95       	ror	r23
    5d86:	67 95       	ror	r22
    5d88:	b7 95       	ror	r27
    5d8a:	f7 95       	ror	r31
    5d8c:	9f 5f       	subi	r25, 0xFF	; 255
    5d8e:	c9 f7       	brne	.-14     	; 0x5d82 <__divsf3_pse+0x74>
    5d90:	88 0f       	add	r24, r24
    5d92:	91 1d       	adc	r25, r1
    5d94:	96 95       	lsr	r25
    5d96:	87 95       	ror	r24
    5d98:	97 f9       	bld	r25, 7
    5d9a:	08 95       	ret
    5d9c:	e1 e0       	ldi	r30, 0x01	; 1
    5d9e:	66 0f       	add	r22, r22
    5da0:	77 1f       	adc	r23, r23
    5da2:	88 1f       	adc	r24, r24
    5da4:	bb 1f       	adc	r27, r27
    5da6:	62 17       	cp	r22, r18
    5da8:	73 07       	cpc	r23, r19
    5daa:	84 07       	cpc	r24, r20
    5dac:	ba 07       	cpc	r27, r26
    5dae:	20 f0       	brcs	.+8      	; 0x5db8 <__divsf3_pse+0xaa>
    5db0:	62 1b       	sub	r22, r18
    5db2:	73 0b       	sbc	r23, r19
    5db4:	84 0b       	sbc	r24, r20
    5db6:	ba 0b       	sbc	r27, r26
    5db8:	ee 1f       	adc	r30, r30
    5dba:	88 f7       	brcc	.-30     	; 0x5d9e <__divsf3_pse+0x90>
    5dbc:	e0 95       	com	r30
    5dbe:	08 95       	ret

00005dc0 <__fixsfsi>:
    5dc0:	04 d0       	rcall	.+8      	; 0x5dca <__fixunssfsi>
    5dc2:	68 94       	set
    5dc4:	b1 11       	cpse	r27, r1
    5dc6:	fe c0       	rjmp	.+508    	; 0x5fc4 <__fp_szero>
    5dc8:	08 95       	ret

00005dca <__fixunssfsi>:
    5dca:	e1 d0       	rcall	.+450    	; 0x5f8e <__fp_splitA>
    5dcc:	88 f0       	brcs	.+34     	; 0x5df0 <__fixunssfsi+0x26>
    5dce:	9f 57       	subi	r25, 0x7F	; 127
    5dd0:	90 f0       	brcs	.+36     	; 0x5df6 <__fixunssfsi+0x2c>
    5dd2:	b9 2f       	mov	r27, r25
    5dd4:	99 27       	eor	r25, r25
    5dd6:	b7 51       	subi	r27, 0x17	; 23
    5dd8:	a0 f0       	brcs	.+40     	; 0x5e02 <__fixunssfsi+0x38>
    5dda:	d1 f0       	breq	.+52     	; 0x5e10 <__fixunssfsi+0x46>
    5ddc:	66 0f       	add	r22, r22
    5dde:	77 1f       	adc	r23, r23
    5de0:	88 1f       	adc	r24, r24
    5de2:	99 1f       	adc	r25, r25
    5de4:	1a f0       	brmi	.+6      	; 0x5dec <__fixunssfsi+0x22>
    5de6:	ba 95       	dec	r27
    5de8:	c9 f7       	brne	.-14     	; 0x5ddc <__fixunssfsi+0x12>
    5dea:	12 c0       	rjmp	.+36     	; 0x5e10 <__fixunssfsi+0x46>
    5dec:	b1 30       	cpi	r27, 0x01	; 1
    5dee:	81 f0       	breq	.+32     	; 0x5e10 <__fixunssfsi+0x46>
    5df0:	e8 d0       	rcall	.+464    	; 0x5fc2 <__fp_zero>
    5df2:	b1 e0       	ldi	r27, 0x01	; 1
    5df4:	08 95       	ret
    5df6:	e5 c0       	rjmp	.+458    	; 0x5fc2 <__fp_zero>
    5df8:	67 2f       	mov	r22, r23
    5dfa:	78 2f       	mov	r23, r24
    5dfc:	88 27       	eor	r24, r24
    5dfe:	b8 5f       	subi	r27, 0xF8	; 248
    5e00:	39 f0       	breq	.+14     	; 0x5e10 <__fixunssfsi+0x46>
    5e02:	b9 3f       	cpi	r27, 0xF9	; 249
    5e04:	cc f3       	brlt	.-14     	; 0x5df8 <__fixunssfsi+0x2e>
    5e06:	86 95       	lsr	r24
    5e08:	77 95       	ror	r23
    5e0a:	67 95       	ror	r22
    5e0c:	b3 95       	inc	r27
    5e0e:	d9 f7       	brne	.-10     	; 0x5e06 <__fixunssfsi+0x3c>
    5e10:	3e f4       	brtc	.+14     	; 0x5e20 <__fixunssfsi+0x56>
    5e12:	90 95       	com	r25
    5e14:	80 95       	com	r24
    5e16:	70 95       	com	r23
    5e18:	61 95       	neg	r22
    5e1a:	7f 4f       	sbci	r23, 0xFF	; 255
    5e1c:	8f 4f       	sbci	r24, 0xFF	; 255
    5e1e:	9f 4f       	sbci	r25, 0xFF	; 255
    5e20:	08 95       	ret

00005e22 <__floatunsisf>:
    5e22:	e8 94       	clt
    5e24:	09 c0       	rjmp	.+18     	; 0x5e38 <__floatsisf+0x12>

00005e26 <__floatsisf>:
    5e26:	97 fb       	bst	r25, 7
    5e28:	3e f4       	brtc	.+14     	; 0x5e38 <__floatsisf+0x12>
    5e2a:	90 95       	com	r25
    5e2c:	80 95       	com	r24
    5e2e:	70 95       	com	r23
    5e30:	61 95       	neg	r22
    5e32:	7f 4f       	sbci	r23, 0xFF	; 255
    5e34:	8f 4f       	sbci	r24, 0xFF	; 255
    5e36:	9f 4f       	sbci	r25, 0xFF	; 255
    5e38:	99 23       	and	r25, r25
    5e3a:	a9 f0       	breq	.+42     	; 0x5e66 <__floatsisf+0x40>
    5e3c:	f9 2f       	mov	r31, r25
    5e3e:	96 e9       	ldi	r25, 0x96	; 150
    5e40:	bb 27       	eor	r27, r27
    5e42:	93 95       	inc	r25
    5e44:	f6 95       	lsr	r31
    5e46:	87 95       	ror	r24
    5e48:	77 95       	ror	r23
    5e4a:	67 95       	ror	r22
    5e4c:	b7 95       	ror	r27
    5e4e:	f1 11       	cpse	r31, r1
    5e50:	f8 cf       	rjmp	.-16     	; 0x5e42 <__floatsisf+0x1c>
    5e52:	fa f4       	brpl	.+62     	; 0x5e92 <__floatsisf+0x6c>
    5e54:	bb 0f       	add	r27, r27
    5e56:	11 f4       	brne	.+4      	; 0x5e5c <__floatsisf+0x36>
    5e58:	60 ff       	sbrs	r22, 0
    5e5a:	1b c0       	rjmp	.+54     	; 0x5e92 <__floatsisf+0x6c>
    5e5c:	6f 5f       	subi	r22, 0xFF	; 255
    5e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e60:	8f 4f       	sbci	r24, 0xFF	; 255
    5e62:	9f 4f       	sbci	r25, 0xFF	; 255
    5e64:	16 c0       	rjmp	.+44     	; 0x5e92 <__floatsisf+0x6c>
    5e66:	88 23       	and	r24, r24
    5e68:	11 f0       	breq	.+4      	; 0x5e6e <__floatsisf+0x48>
    5e6a:	96 e9       	ldi	r25, 0x96	; 150
    5e6c:	11 c0       	rjmp	.+34     	; 0x5e90 <__floatsisf+0x6a>
    5e6e:	77 23       	and	r23, r23
    5e70:	21 f0       	breq	.+8      	; 0x5e7a <__floatsisf+0x54>
    5e72:	9e e8       	ldi	r25, 0x8E	; 142
    5e74:	87 2f       	mov	r24, r23
    5e76:	76 2f       	mov	r23, r22
    5e78:	05 c0       	rjmp	.+10     	; 0x5e84 <__floatsisf+0x5e>
    5e7a:	66 23       	and	r22, r22
    5e7c:	71 f0       	breq	.+28     	; 0x5e9a <__floatsisf+0x74>
    5e7e:	96 e8       	ldi	r25, 0x86	; 134
    5e80:	86 2f       	mov	r24, r22
    5e82:	70 e0       	ldi	r23, 0x00	; 0
    5e84:	60 e0       	ldi	r22, 0x00	; 0
    5e86:	2a f0       	brmi	.+10     	; 0x5e92 <__floatsisf+0x6c>
    5e88:	9a 95       	dec	r25
    5e8a:	66 0f       	add	r22, r22
    5e8c:	77 1f       	adc	r23, r23
    5e8e:	88 1f       	adc	r24, r24
    5e90:	da f7       	brpl	.-10     	; 0x5e88 <__floatsisf+0x62>
    5e92:	88 0f       	add	r24, r24
    5e94:	96 95       	lsr	r25
    5e96:	87 95       	ror	r24
    5e98:	97 f9       	bld	r25, 7
    5e9a:	08 95       	ret

00005e9c <__fp_cmp>:
    5e9c:	99 0f       	add	r25, r25
    5e9e:	00 08       	sbc	r0, r0
    5ea0:	55 0f       	add	r21, r21
    5ea2:	aa 0b       	sbc	r26, r26
    5ea4:	e0 e8       	ldi	r30, 0x80	; 128
    5ea6:	fe ef       	ldi	r31, 0xFE	; 254
    5ea8:	16 16       	cp	r1, r22
    5eaa:	17 06       	cpc	r1, r23
    5eac:	e8 07       	cpc	r30, r24
    5eae:	f9 07       	cpc	r31, r25
    5eb0:	c0 f0       	brcs	.+48     	; 0x5ee2 <__fp_cmp+0x46>
    5eb2:	12 16       	cp	r1, r18
    5eb4:	13 06       	cpc	r1, r19
    5eb6:	e4 07       	cpc	r30, r20
    5eb8:	f5 07       	cpc	r31, r21
    5eba:	98 f0       	brcs	.+38     	; 0x5ee2 <__fp_cmp+0x46>
    5ebc:	62 1b       	sub	r22, r18
    5ebe:	73 0b       	sbc	r23, r19
    5ec0:	84 0b       	sbc	r24, r20
    5ec2:	95 0b       	sbc	r25, r21
    5ec4:	39 f4       	brne	.+14     	; 0x5ed4 <__fp_cmp+0x38>
    5ec6:	0a 26       	eor	r0, r26
    5ec8:	61 f0       	breq	.+24     	; 0x5ee2 <__fp_cmp+0x46>
    5eca:	23 2b       	or	r18, r19
    5ecc:	24 2b       	or	r18, r20
    5ece:	25 2b       	or	r18, r21
    5ed0:	21 f4       	brne	.+8      	; 0x5eda <__fp_cmp+0x3e>
    5ed2:	08 95       	ret
    5ed4:	0a 26       	eor	r0, r26
    5ed6:	09 f4       	brne	.+2      	; 0x5eda <__fp_cmp+0x3e>
    5ed8:	a1 40       	sbci	r26, 0x01	; 1
    5eda:	a6 95       	lsr	r26
    5edc:	8f ef       	ldi	r24, 0xFF	; 255
    5ede:	81 1d       	adc	r24, r1
    5ee0:	81 1d       	adc	r24, r1
    5ee2:	08 95       	ret

00005ee4 <__fp_inf>:
    5ee4:	97 f9       	bld	r25, 7
    5ee6:	9f 67       	ori	r25, 0x7F	; 127
    5ee8:	80 e8       	ldi	r24, 0x80	; 128
    5eea:	70 e0       	ldi	r23, 0x00	; 0
    5eec:	60 e0       	ldi	r22, 0x00	; 0
    5eee:	08 95       	ret

00005ef0 <__fp_nan>:
    5ef0:	9f ef       	ldi	r25, 0xFF	; 255
    5ef2:	80 ec       	ldi	r24, 0xC0	; 192
    5ef4:	08 95       	ret

00005ef6 <__fp_powser>:
    5ef6:	df 93       	push	r29
    5ef8:	cf 93       	push	r28
    5efa:	1f 93       	push	r17
    5efc:	0f 93       	push	r16
    5efe:	ff 92       	push	r15
    5f00:	ef 92       	push	r14
    5f02:	df 92       	push	r13
    5f04:	7b 01       	movw	r14, r22
    5f06:	8c 01       	movw	r16, r24
    5f08:	68 94       	set
    5f0a:	05 c0       	rjmp	.+10     	; 0x5f16 <__fp_powser+0x20>
    5f0c:	da 2e       	mov	r13, r26
    5f0e:	ef 01       	movw	r28, r30
    5f10:	76 d0       	rcall	.+236    	; 0x5ffe <__mulsf3x>
    5f12:	fe 01       	movw	r30, r28
    5f14:	e8 94       	clt
    5f16:	a5 91       	lpm	r26, Z+
    5f18:	25 91       	lpm	r18, Z+
    5f1a:	35 91       	lpm	r19, Z+
    5f1c:	45 91       	lpm	r20, Z+
    5f1e:	55 91       	lpm	r21, Z+
    5f20:	ae f3       	brts	.-22     	; 0x5f0c <__fp_powser+0x16>
    5f22:	ef 01       	movw	r28, r30
    5f24:	2c de       	rcall	.-936    	; 0x5b7e <__addsf3x>
    5f26:	fe 01       	movw	r30, r28
    5f28:	97 01       	movw	r18, r14
    5f2a:	a8 01       	movw	r20, r16
    5f2c:	da 94       	dec	r13
    5f2e:	79 f7       	brne	.-34     	; 0x5f0e <__fp_powser+0x18>
    5f30:	df 90       	pop	r13
    5f32:	ef 90       	pop	r14
    5f34:	ff 90       	pop	r15
    5f36:	0f 91       	pop	r16
    5f38:	1f 91       	pop	r17
    5f3a:	cf 91       	pop	r28
    5f3c:	df 91       	pop	r29
    5f3e:	08 95       	ret

00005f40 <__fp_pscA>:
    5f40:	00 24       	eor	r0, r0
    5f42:	0a 94       	dec	r0
    5f44:	16 16       	cp	r1, r22
    5f46:	17 06       	cpc	r1, r23
    5f48:	18 06       	cpc	r1, r24
    5f4a:	09 06       	cpc	r0, r25
    5f4c:	08 95       	ret

00005f4e <__fp_pscB>:
    5f4e:	00 24       	eor	r0, r0
    5f50:	0a 94       	dec	r0
    5f52:	12 16       	cp	r1, r18
    5f54:	13 06       	cpc	r1, r19
    5f56:	14 06       	cpc	r1, r20
    5f58:	05 06       	cpc	r0, r21
    5f5a:	08 95       	ret

00005f5c <__fp_round>:
    5f5c:	09 2e       	mov	r0, r25
    5f5e:	03 94       	inc	r0
    5f60:	00 0c       	add	r0, r0
    5f62:	11 f4       	brne	.+4      	; 0x5f68 <__fp_round+0xc>
    5f64:	88 23       	and	r24, r24
    5f66:	52 f0       	brmi	.+20     	; 0x5f7c <__fp_round+0x20>
    5f68:	bb 0f       	add	r27, r27
    5f6a:	40 f4       	brcc	.+16     	; 0x5f7c <__fp_round+0x20>
    5f6c:	bf 2b       	or	r27, r31
    5f6e:	11 f4       	brne	.+4      	; 0x5f74 <__fp_round+0x18>
    5f70:	60 ff       	sbrs	r22, 0
    5f72:	04 c0       	rjmp	.+8      	; 0x5f7c <__fp_round+0x20>
    5f74:	6f 5f       	subi	r22, 0xFF	; 255
    5f76:	7f 4f       	sbci	r23, 0xFF	; 255
    5f78:	8f 4f       	sbci	r24, 0xFF	; 255
    5f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f7c:	08 95       	ret

00005f7e <__fp_split3>:
    5f7e:	57 fd       	sbrc	r21, 7
    5f80:	90 58       	subi	r25, 0x80	; 128
    5f82:	44 0f       	add	r20, r20
    5f84:	55 1f       	adc	r21, r21
    5f86:	59 f0       	breq	.+22     	; 0x5f9e <__fp_splitA+0x10>
    5f88:	5f 3f       	cpi	r21, 0xFF	; 255
    5f8a:	71 f0       	breq	.+28     	; 0x5fa8 <__fp_splitA+0x1a>
    5f8c:	47 95       	ror	r20

00005f8e <__fp_splitA>:
    5f8e:	88 0f       	add	r24, r24
    5f90:	97 fb       	bst	r25, 7
    5f92:	99 1f       	adc	r25, r25
    5f94:	61 f0       	breq	.+24     	; 0x5fae <__fp_splitA+0x20>
    5f96:	9f 3f       	cpi	r25, 0xFF	; 255
    5f98:	79 f0       	breq	.+30     	; 0x5fb8 <__fp_splitA+0x2a>
    5f9a:	87 95       	ror	r24
    5f9c:	08 95       	ret
    5f9e:	12 16       	cp	r1, r18
    5fa0:	13 06       	cpc	r1, r19
    5fa2:	14 06       	cpc	r1, r20
    5fa4:	55 1f       	adc	r21, r21
    5fa6:	f2 cf       	rjmp	.-28     	; 0x5f8c <__fp_split3+0xe>
    5fa8:	46 95       	lsr	r20
    5faa:	f1 df       	rcall	.-30     	; 0x5f8e <__fp_splitA>
    5fac:	08 c0       	rjmp	.+16     	; 0x5fbe <__fp_splitA+0x30>
    5fae:	16 16       	cp	r1, r22
    5fb0:	17 06       	cpc	r1, r23
    5fb2:	18 06       	cpc	r1, r24
    5fb4:	99 1f       	adc	r25, r25
    5fb6:	f1 cf       	rjmp	.-30     	; 0x5f9a <__fp_splitA+0xc>
    5fb8:	86 95       	lsr	r24
    5fba:	71 05       	cpc	r23, r1
    5fbc:	61 05       	cpc	r22, r1
    5fbe:	08 94       	sec
    5fc0:	08 95       	ret

00005fc2 <__fp_zero>:
    5fc2:	e8 94       	clt

00005fc4 <__fp_szero>:
    5fc4:	bb 27       	eor	r27, r27
    5fc6:	66 27       	eor	r22, r22
    5fc8:	77 27       	eor	r23, r23
    5fca:	cb 01       	movw	r24, r22
    5fcc:	97 f9       	bld	r25, 7
    5fce:	08 95       	ret

00005fd0 <__gesf2>:
    5fd0:	65 df       	rcall	.-310    	; 0x5e9c <__fp_cmp>
    5fd2:	08 f4       	brcc	.+2      	; 0x5fd6 <__gesf2+0x6>
    5fd4:	8f ef       	ldi	r24, 0xFF	; 255
    5fd6:	08 95       	ret

00005fd8 <inverse>:
    5fd8:	9b 01       	movw	r18, r22
    5fda:	ac 01       	movw	r20, r24
    5fdc:	60 e0       	ldi	r22, 0x00	; 0
    5fde:	70 e0       	ldi	r23, 0x00	; 0
    5fe0:	80 e8       	ldi	r24, 0x80	; 128
    5fe2:	9f e3       	ldi	r25, 0x3F	; 63
    5fe4:	85 ce       	rjmp	.-758    	; 0x5cf0 <__divsf3>

00005fe6 <__mulsf3>:
    5fe6:	0b d0       	rcall	.+22     	; 0x5ffe <__mulsf3x>
    5fe8:	b9 cf       	rjmp	.-142    	; 0x5f5c <__fp_round>
    5fea:	aa df       	rcall	.-172    	; 0x5f40 <__fp_pscA>
    5fec:	28 f0       	brcs	.+10     	; 0x5ff8 <__mulsf3+0x12>
    5fee:	af df       	rcall	.-162    	; 0x5f4e <__fp_pscB>
    5ff0:	18 f0       	brcs	.+6      	; 0x5ff8 <__mulsf3+0x12>
    5ff2:	95 23       	and	r25, r21
    5ff4:	09 f0       	breq	.+2      	; 0x5ff8 <__mulsf3+0x12>
    5ff6:	76 cf       	rjmp	.-276    	; 0x5ee4 <__fp_inf>
    5ff8:	7b cf       	rjmp	.-266    	; 0x5ef0 <__fp_nan>
    5ffa:	11 24       	eor	r1, r1
    5ffc:	e3 cf       	rjmp	.-58     	; 0x5fc4 <__fp_szero>

00005ffe <__mulsf3x>:
    5ffe:	bf df       	rcall	.-130    	; 0x5f7e <__fp_split3>
    6000:	a0 f3       	brcs	.-24     	; 0x5fea <__mulsf3+0x4>

00006002 <__mulsf3_pse>:
    6002:	95 9f       	mul	r25, r21
    6004:	d1 f3       	breq	.-12     	; 0x5ffa <__mulsf3+0x14>
    6006:	95 0f       	add	r25, r21
    6008:	50 e0       	ldi	r21, 0x00	; 0
    600a:	55 1f       	adc	r21, r21
    600c:	62 9f       	mul	r22, r18
    600e:	f0 01       	movw	r30, r0
    6010:	72 9f       	mul	r23, r18
    6012:	bb 27       	eor	r27, r27
    6014:	f0 0d       	add	r31, r0
    6016:	b1 1d       	adc	r27, r1
    6018:	63 9f       	mul	r22, r19
    601a:	aa 27       	eor	r26, r26
    601c:	f0 0d       	add	r31, r0
    601e:	b1 1d       	adc	r27, r1
    6020:	aa 1f       	adc	r26, r26
    6022:	64 9f       	mul	r22, r20
    6024:	66 27       	eor	r22, r22
    6026:	b0 0d       	add	r27, r0
    6028:	a1 1d       	adc	r26, r1
    602a:	66 1f       	adc	r22, r22
    602c:	82 9f       	mul	r24, r18
    602e:	22 27       	eor	r18, r18
    6030:	b0 0d       	add	r27, r0
    6032:	a1 1d       	adc	r26, r1
    6034:	62 1f       	adc	r22, r18
    6036:	73 9f       	mul	r23, r19
    6038:	b0 0d       	add	r27, r0
    603a:	a1 1d       	adc	r26, r1
    603c:	62 1f       	adc	r22, r18
    603e:	83 9f       	mul	r24, r19
    6040:	a0 0d       	add	r26, r0
    6042:	61 1d       	adc	r22, r1
    6044:	22 1f       	adc	r18, r18
    6046:	74 9f       	mul	r23, r20
    6048:	33 27       	eor	r19, r19
    604a:	a0 0d       	add	r26, r0
    604c:	61 1d       	adc	r22, r1
    604e:	23 1f       	adc	r18, r19
    6050:	84 9f       	mul	r24, r20
    6052:	60 0d       	add	r22, r0
    6054:	21 1d       	adc	r18, r1
    6056:	82 2f       	mov	r24, r18
    6058:	76 2f       	mov	r23, r22
    605a:	6a 2f       	mov	r22, r26
    605c:	11 24       	eor	r1, r1
    605e:	9f 57       	subi	r25, 0x7F	; 127
    6060:	50 40       	sbci	r21, 0x00	; 0
    6062:	8a f0       	brmi	.+34     	; 0x6086 <__mulsf3_pse+0x84>
    6064:	e1 f0       	breq	.+56     	; 0x609e <__mulsf3_pse+0x9c>
    6066:	88 23       	and	r24, r24
    6068:	4a f0       	brmi	.+18     	; 0x607c <__mulsf3_pse+0x7a>
    606a:	ee 0f       	add	r30, r30
    606c:	ff 1f       	adc	r31, r31
    606e:	bb 1f       	adc	r27, r27
    6070:	66 1f       	adc	r22, r22
    6072:	77 1f       	adc	r23, r23
    6074:	88 1f       	adc	r24, r24
    6076:	91 50       	subi	r25, 0x01	; 1
    6078:	50 40       	sbci	r21, 0x00	; 0
    607a:	a9 f7       	brne	.-22     	; 0x6066 <__mulsf3_pse+0x64>
    607c:	9e 3f       	cpi	r25, 0xFE	; 254
    607e:	51 05       	cpc	r21, r1
    6080:	70 f0       	brcs	.+28     	; 0x609e <__mulsf3_pse+0x9c>
    6082:	30 cf       	rjmp	.-416    	; 0x5ee4 <__fp_inf>
    6084:	9f cf       	rjmp	.-194    	; 0x5fc4 <__fp_szero>
    6086:	5f 3f       	cpi	r21, 0xFF	; 255
    6088:	ec f3       	brlt	.-6      	; 0x6084 <__mulsf3_pse+0x82>
    608a:	98 3e       	cpi	r25, 0xE8	; 232
    608c:	dc f3       	brlt	.-10     	; 0x6084 <__mulsf3_pse+0x82>
    608e:	86 95       	lsr	r24
    6090:	77 95       	ror	r23
    6092:	67 95       	ror	r22
    6094:	b7 95       	ror	r27
    6096:	f7 95       	ror	r31
    6098:	e7 95       	ror	r30
    609a:	9f 5f       	subi	r25, 0xFF	; 255
    609c:	c1 f7       	brne	.-16     	; 0x608e <__mulsf3_pse+0x8c>
    609e:	fe 2b       	or	r31, r30
    60a0:	88 0f       	add	r24, r24
    60a2:	91 1d       	adc	r25, r1
    60a4:	96 95       	lsr	r25
    60a6:	87 95       	ror	r24
    60a8:	97 f9       	bld	r25, 7
    60aa:	08 95       	ret
    60ac:	11 f4       	brne	.+4      	; 0x60b2 <__mulsf3_pse+0xb0>
    60ae:	0e f4       	brtc	.+2      	; 0x60b2 <__mulsf3_pse+0xb0>
    60b0:	1f cf       	rjmp	.-450    	; 0x5ef0 <__fp_nan>
    60b2:	41 c0       	rjmp	.+130    	; 0x6136 <__fp_mpack>

000060b4 <sqrt>:
    60b4:	6c df       	rcall	.-296    	; 0x5f8e <__fp_splitA>
    60b6:	d0 f3       	brcs	.-12     	; 0x60ac <__mulsf3_pse+0xaa>
    60b8:	99 23       	and	r25, r25
    60ba:	d9 f3       	breq	.-10     	; 0x60b2 <__mulsf3_pse+0xb0>
    60bc:	ce f3       	brts	.-14     	; 0x60b0 <__mulsf3_pse+0xae>
    60be:	9f 57       	subi	r25, 0x7F	; 127
    60c0:	55 0b       	sbc	r21, r21
    60c2:	87 ff       	sbrs	r24, 7
    60c4:	46 d0       	rcall	.+140    	; 0x6152 <__fp_norm2>
    60c6:	00 24       	eor	r0, r0
    60c8:	a0 e6       	ldi	r26, 0x60	; 96
    60ca:	40 ea       	ldi	r20, 0xA0	; 160
    60cc:	90 01       	movw	r18, r0
    60ce:	80 58       	subi	r24, 0x80	; 128
    60d0:	56 95       	lsr	r21
    60d2:	97 95       	ror	r25
    60d4:	28 f4       	brcc	.+10     	; 0x60e0 <sqrt+0x2c>
    60d6:	80 5c       	subi	r24, 0xC0	; 192
    60d8:	66 0f       	add	r22, r22
    60da:	77 1f       	adc	r23, r23
    60dc:	88 1f       	adc	r24, r24
    60de:	20 f0       	brcs	.+8      	; 0x60e8 <sqrt+0x34>
    60e0:	26 17       	cp	r18, r22
    60e2:	37 07       	cpc	r19, r23
    60e4:	48 07       	cpc	r20, r24
    60e6:	30 f4       	brcc	.+12     	; 0x60f4 <sqrt+0x40>
    60e8:	62 1b       	sub	r22, r18
    60ea:	73 0b       	sbc	r23, r19
    60ec:	84 0b       	sbc	r24, r20
    60ee:	20 29       	or	r18, r0
    60f0:	31 29       	or	r19, r1
    60f2:	4a 2b       	or	r20, r26
    60f4:	a6 95       	lsr	r26
    60f6:	17 94       	ror	r1
    60f8:	07 94       	ror	r0
    60fa:	20 25       	eor	r18, r0
    60fc:	31 25       	eor	r19, r1
    60fe:	4a 27       	eor	r20, r26
    6100:	58 f7       	brcc	.-42     	; 0x60d8 <sqrt+0x24>
    6102:	66 0f       	add	r22, r22
    6104:	77 1f       	adc	r23, r23
    6106:	88 1f       	adc	r24, r24
    6108:	20 f0       	brcs	.+8      	; 0x6112 <sqrt+0x5e>
    610a:	26 17       	cp	r18, r22
    610c:	37 07       	cpc	r19, r23
    610e:	48 07       	cpc	r20, r24
    6110:	30 f4       	brcc	.+12     	; 0x611e <sqrt+0x6a>
    6112:	62 0b       	sbc	r22, r18
    6114:	73 0b       	sbc	r23, r19
    6116:	84 0b       	sbc	r24, r20
    6118:	20 0d       	add	r18, r0
    611a:	31 1d       	adc	r19, r1
    611c:	41 1d       	adc	r20, r1
    611e:	a0 95       	com	r26
    6120:	81 f7       	brne	.-32     	; 0x6102 <sqrt+0x4e>
    6122:	b9 01       	movw	r22, r18
    6124:	84 2f       	mov	r24, r20
    6126:	91 58       	subi	r25, 0x81	; 129
    6128:	88 0f       	add	r24, r24
    612a:	96 95       	lsr	r25
    612c:	87 95       	ror	r24
    612e:	08 95       	ret

00006130 <square>:
    6130:	9b 01       	movw	r18, r22
    6132:	ac 01       	movw	r20, r24
    6134:	58 cf       	rjmp	.-336    	; 0x5fe6 <__mulsf3>

00006136 <__fp_mpack>:
    6136:	9f 3f       	cpi	r25, 0xFF	; 255
    6138:	31 f0       	breq	.+12     	; 0x6146 <__fp_mpack_finite+0xc>

0000613a <__fp_mpack_finite>:
    613a:	91 50       	subi	r25, 0x01	; 1
    613c:	20 f4       	brcc	.+8      	; 0x6146 <__fp_mpack_finite+0xc>
    613e:	87 95       	ror	r24
    6140:	77 95       	ror	r23
    6142:	67 95       	ror	r22
    6144:	b7 95       	ror	r27
    6146:	88 0f       	add	r24, r24
    6148:	91 1d       	adc	r25, r1
    614a:	96 95       	lsr	r25
    614c:	87 95       	ror	r24
    614e:	97 f9       	bld	r25, 7
    6150:	08 95       	ret

00006152 <__fp_norm2>:
    6152:	91 50       	subi	r25, 0x01	; 1
    6154:	50 40       	sbci	r21, 0x00	; 0
    6156:	66 0f       	add	r22, r22
    6158:	77 1f       	adc	r23, r23
    615a:	88 1f       	adc	r24, r24
    615c:	d2 f7       	brpl	.-12     	; 0x6152 <__fp_norm2>
    615e:	08 95       	ret

00006160 <vfprintf>:
    6160:	2f 92       	push	r2
    6162:	3f 92       	push	r3
    6164:	4f 92       	push	r4
    6166:	5f 92       	push	r5
    6168:	6f 92       	push	r6
    616a:	7f 92       	push	r7
    616c:	8f 92       	push	r8
    616e:	9f 92       	push	r9
    6170:	af 92       	push	r10
    6172:	bf 92       	push	r11
    6174:	cf 92       	push	r12
    6176:	df 92       	push	r13
    6178:	ef 92       	push	r14
    617a:	ff 92       	push	r15
    617c:	0f 93       	push	r16
    617e:	1f 93       	push	r17
    6180:	cf 93       	push	r28
    6182:	df 93       	push	r29
    6184:	cd b7       	in	r28, 0x3d	; 61
    6186:	de b7       	in	r29, 0x3e	; 62
    6188:	60 97       	sbiw	r28, 0x10	; 16
    618a:	cd bf       	out	0x3d, r28	; 61
    618c:	de bf       	out	0x3e, r29	; 62
    618e:	7c 01       	movw	r14, r24
    6190:	1b 01       	movw	r2, r22
    6192:	6a 01       	movw	r12, r20
    6194:	fc 01       	movw	r30, r24
    6196:	16 82       	std	Z+6, r1	; 0x06
    6198:	17 82       	std	Z+7, r1	; 0x07
    619a:	83 81       	ldd	r24, Z+3	; 0x03
    619c:	81 ff       	sbrs	r24, 1
    619e:	2a c3       	rjmp	.+1620   	; 0x67f4 <vfprintf+0x694>
    61a0:	9e 01       	movw	r18, r28
    61a2:	2f 5f       	subi	r18, 0xFF	; 255
    61a4:	3f 4f       	sbci	r19, 0xFF	; 255
    61a6:	39 01       	movw	r6, r18
    61a8:	f7 01       	movw	r30, r14
    61aa:	93 81       	ldd	r25, Z+3	; 0x03
    61ac:	f1 01       	movw	r30, r2
    61ae:	93 fd       	sbrc	r25, 3
    61b0:	85 91       	lpm	r24, Z+
    61b2:	93 ff       	sbrs	r25, 3
    61b4:	81 91       	ld	r24, Z+
    61b6:	1f 01       	movw	r2, r30
    61b8:	88 23       	and	r24, r24
    61ba:	09 f4       	brne	.+2      	; 0x61be <vfprintf+0x5e>
    61bc:	17 c3       	rjmp	.+1582   	; 0x67ec <vfprintf+0x68c>
    61be:	85 32       	cpi	r24, 0x25	; 37
    61c0:	39 f4       	brne	.+14     	; 0x61d0 <vfprintf+0x70>
    61c2:	93 fd       	sbrc	r25, 3
    61c4:	85 91       	lpm	r24, Z+
    61c6:	93 ff       	sbrs	r25, 3
    61c8:	81 91       	ld	r24, Z+
    61ca:	1f 01       	movw	r2, r30
    61cc:	85 32       	cpi	r24, 0x25	; 37
    61ce:	31 f4       	brne	.+12     	; 0x61dc <vfprintf+0x7c>
    61d0:	b7 01       	movw	r22, r14
    61d2:	90 e0       	ldi	r25, 0x00	; 0
    61d4:	b2 d5       	rcall	.+2916   	; 0x6d3a <fputc>
    61d6:	56 01       	movw	r10, r12
    61d8:	65 01       	movw	r12, r10
    61da:	e6 cf       	rjmp	.-52     	; 0x61a8 <vfprintf+0x48>
    61dc:	10 e0       	ldi	r17, 0x00	; 0
    61de:	51 2c       	mov	r5, r1
    61e0:	91 2c       	mov	r9, r1
    61e2:	ff e1       	ldi	r31, 0x1F	; 31
    61e4:	f9 15       	cp	r31, r9
    61e6:	d8 f0       	brcs	.+54     	; 0x621e <vfprintf+0xbe>
    61e8:	8b 32       	cpi	r24, 0x2B	; 43
    61ea:	79 f0       	breq	.+30     	; 0x620a <vfprintf+0xaa>
    61ec:	38 f4       	brcc	.+14     	; 0x61fc <vfprintf+0x9c>
    61ee:	80 32       	cpi	r24, 0x20	; 32
    61f0:	79 f0       	breq	.+30     	; 0x6210 <vfprintf+0xb0>
    61f2:	83 32       	cpi	r24, 0x23	; 35
    61f4:	a1 f4       	brne	.+40     	; 0x621e <vfprintf+0xbe>
    61f6:	f9 2d       	mov	r31, r9
    61f8:	f0 61       	ori	r31, 0x10	; 16
    61fa:	2e c0       	rjmp	.+92     	; 0x6258 <vfprintf+0xf8>
    61fc:	8d 32       	cpi	r24, 0x2D	; 45
    61fe:	61 f0       	breq	.+24     	; 0x6218 <vfprintf+0xb8>
    6200:	80 33       	cpi	r24, 0x30	; 48
    6202:	69 f4       	brne	.+26     	; 0x621e <vfprintf+0xbe>
    6204:	29 2d       	mov	r18, r9
    6206:	21 60       	ori	r18, 0x01	; 1
    6208:	2d c0       	rjmp	.+90     	; 0x6264 <vfprintf+0x104>
    620a:	39 2d       	mov	r19, r9
    620c:	32 60       	ori	r19, 0x02	; 2
    620e:	93 2e       	mov	r9, r19
    6210:	89 2d       	mov	r24, r9
    6212:	84 60       	ori	r24, 0x04	; 4
    6214:	98 2e       	mov	r9, r24
    6216:	2a c0       	rjmp	.+84     	; 0x626c <vfprintf+0x10c>
    6218:	e9 2d       	mov	r30, r9
    621a:	e8 60       	ori	r30, 0x08	; 8
    621c:	15 c0       	rjmp	.+42     	; 0x6248 <vfprintf+0xe8>
    621e:	97 fc       	sbrc	r9, 7
    6220:	2d c0       	rjmp	.+90     	; 0x627c <vfprintf+0x11c>
    6222:	20 ed       	ldi	r18, 0xD0	; 208
    6224:	28 0f       	add	r18, r24
    6226:	2a 30       	cpi	r18, 0x0A	; 10
    6228:	88 f4       	brcc	.+34     	; 0x624c <vfprintf+0xec>
    622a:	96 fe       	sbrs	r9, 6
    622c:	06 c0       	rjmp	.+12     	; 0x623a <vfprintf+0xda>
    622e:	3a e0       	ldi	r19, 0x0A	; 10
    6230:	13 9f       	mul	r17, r19
    6232:	20 0d       	add	r18, r0
    6234:	11 24       	eor	r1, r1
    6236:	12 2f       	mov	r17, r18
    6238:	19 c0       	rjmp	.+50     	; 0x626c <vfprintf+0x10c>
    623a:	8a e0       	ldi	r24, 0x0A	; 10
    623c:	58 9e       	mul	r5, r24
    623e:	20 0d       	add	r18, r0
    6240:	11 24       	eor	r1, r1
    6242:	52 2e       	mov	r5, r18
    6244:	e9 2d       	mov	r30, r9
    6246:	e0 62       	ori	r30, 0x20	; 32
    6248:	9e 2e       	mov	r9, r30
    624a:	10 c0       	rjmp	.+32     	; 0x626c <vfprintf+0x10c>
    624c:	8e 32       	cpi	r24, 0x2E	; 46
    624e:	31 f4       	brne	.+12     	; 0x625c <vfprintf+0xfc>
    6250:	96 fc       	sbrc	r9, 6
    6252:	cc c2       	rjmp	.+1432   	; 0x67ec <vfprintf+0x68c>
    6254:	f9 2d       	mov	r31, r9
    6256:	f0 64       	ori	r31, 0x40	; 64
    6258:	9f 2e       	mov	r9, r31
    625a:	08 c0       	rjmp	.+16     	; 0x626c <vfprintf+0x10c>
    625c:	8c 36       	cpi	r24, 0x6C	; 108
    625e:	21 f4       	brne	.+8      	; 0x6268 <vfprintf+0x108>
    6260:	29 2d       	mov	r18, r9
    6262:	20 68       	ori	r18, 0x80	; 128
    6264:	92 2e       	mov	r9, r18
    6266:	02 c0       	rjmp	.+4      	; 0x626c <vfprintf+0x10c>
    6268:	88 36       	cpi	r24, 0x68	; 104
    626a:	41 f4       	brne	.+16     	; 0x627c <vfprintf+0x11c>
    626c:	f1 01       	movw	r30, r2
    626e:	93 fd       	sbrc	r25, 3
    6270:	85 91       	lpm	r24, Z+
    6272:	93 ff       	sbrs	r25, 3
    6274:	81 91       	ld	r24, Z+
    6276:	1f 01       	movw	r2, r30
    6278:	81 11       	cpse	r24, r1
    627a:	b3 cf       	rjmp	.-154    	; 0x61e2 <vfprintf+0x82>
    627c:	9b eb       	ldi	r25, 0xBB	; 187
    627e:	98 0f       	add	r25, r24
    6280:	93 30       	cpi	r25, 0x03	; 3
    6282:	20 f4       	brcc	.+8      	; 0x628c <vfprintf+0x12c>
    6284:	99 2d       	mov	r25, r9
    6286:	90 61       	ori	r25, 0x10	; 16
    6288:	80 5e       	subi	r24, 0xE0	; 224
    628a:	07 c0       	rjmp	.+14     	; 0x629a <vfprintf+0x13a>
    628c:	9b e9       	ldi	r25, 0x9B	; 155
    628e:	98 0f       	add	r25, r24
    6290:	93 30       	cpi	r25, 0x03	; 3
    6292:	08 f0       	brcs	.+2      	; 0x6296 <vfprintf+0x136>
    6294:	59 c1       	rjmp	.+690    	; 0x6548 <vfprintf+0x3e8>
    6296:	99 2d       	mov	r25, r9
    6298:	9f 7e       	andi	r25, 0xEF	; 239
    629a:	96 ff       	sbrs	r25, 6
    629c:	16 e0       	ldi	r17, 0x06	; 6
    629e:	9f 73       	andi	r25, 0x3F	; 63
    62a0:	99 2e       	mov	r9, r25
    62a2:	85 36       	cpi	r24, 0x65	; 101
    62a4:	19 f4       	brne	.+6      	; 0x62ac <vfprintf+0x14c>
    62a6:	90 64       	ori	r25, 0x40	; 64
    62a8:	99 2e       	mov	r9, r25
    62aa:	08 c0       	rjmp	.+16     	; 0x62bc <vfprintf+0x15c>
    62ac:	86 36       	cpi	r24, 0x66	; 102
    62ae:	21 f4       	brne	.+8      	; 0x62b8 <vfprintf+0x158>
    62b0:	39 2f       	mov	r19, r25
    62b2:	30 68       	ori	r19, 0x80	; 128
    62b4:	93 2e       	mov	r9, r19
    62b6:	02 c0       	rjmp	.+4      	; 0x62bc <vfprintf+0x15c>
    62b8:	11 11       	cpse	r17, r1
    62ba:	11 50       	subi	r17, 0x01	; 1
    62bc:	97 fe       	sbrs	r9, 7
    62be:	07 c0       	rjmp	.+14     	; 0x62ce <vfprintf+0x16e>
    62c0:	1c 33       	cpi	r17, 0x3C	; 60
    62c2:	50 f4       	brcc	.+20     	; 0x62d8 <vfprintf+0x178>
    62c4:	44 24       	eor	r4, r4
    62c6:	43 94       	inc	r4
    62c8:	41 0e       	add	r4, r17
    62ca:	27 e0       	ldi	r18, 0x07	; 7
    62cc:	0b c0       	rjmp	.+22     	; 0x62e4 <vfprintf+0x184>
    62ce:	18 30       	cpi	r17, 0x08	; 8
    62d0:	38 f0       	brcs	.+14     	; 0x62e0 <vfprintf+0x180>
    62d2:	27 e0       	ldi	r18, 0x07	; 7
    62d4:	17 e0       	ldi	r17, 0x07	; 7
    62d6:	05 c0       	rjmp	.+10     	; 0x62e2 <vfprintf+0x182>
    62d8:	27 e0       	ldi	r18, 0x07	; 7
    62da:	9c e3       	ldi	r25, 0x3C	; 60
    62dc:	49 2e       	mov	r4, r25
    62de:	02 c0       	rjmp	.+4      	; 0x62e4 <vfprintf+0x184>
    62e0:	21 2f       	mov	r18, r17
    62e2:	41 2c       	mov	r4, r1
    62e4:	56 01       	movw	r10, r12
    62e6:	84 e0       	ldi	r24, 0x04	; 4
    62e8:	a8 0e       	add	r10, r24
    62ea:	b1 1c       	adc	r11, r1
    62ec:	f6 01       	movw	r30, r12
    62ee:	60 81       	ld	r22, Z
    62f0:	71 81       	ldd	r23, Z+1	; 0x01
    62f2:	82 81       	ldd	r24, Z+2	; 0x02
    62f4:	93 81       	ldd	r25, Z+3	; 0x03
    62f6:	04 2d       	mov	r16, r4
    62f8:	a3 01       	movw	r20, r6
    62fa:	e7 d3       	rcall	.+1998   	; 0x6aca <__ftoa_engine>
    62fc:	6c 01       	movw	r12, r24
    62fe:	f9 81       	ldd	r31, Y+1	; 0x01
    6300:	fc 87       	std	Y+12, r31	; 0x0c
    6302:	f0 ff       	sbrs	r31, 0
    6304:	02 c0       	rjmp	.+4      	; 0x630a <vfprintf+0x1aa>
    6306:	f3 ff       	sbrs	r31, 3
    6308:	06 c0       	rjmp	.+12     	; 0x6316 <vfprintf+0x1b6>
    630a:	91 fc       	sbrc	r9, 1
    630c:	06 c0       	rjmp	.+12     	; 0x631a <vfprintf+0x1ba>
    630e:	92 fe       	sbrs	r9, 2
    6310:	06 c0       	rjmp	.+12     	; 0x631e <vfprintf+0x1be>
    6312:	00 e2       	ldi	r16, 0x20	; 32
    6314:	05 c0       	rjmp	.+10     	; 0x6320 <vfprintf+0x1c0>
    6316:	0d e2       	ldi	r16, 0x2D	; 45
    6318:	03 c0       	rjmp	.+6      	; 0x6320 <vfprintf+0x1c0>
    631a:	0b e2       	ldi	r16, 0x2B	; 43
    631c:	01 c0       	rjmp	.+2      	; 0x6320 <vfprintf+0x1c0>
    631e:	00 e0       	ldi	r16, 0x00	; 0
    6320:	8c 85       	ldd	r24, Y+12	; 0x0c
    6322:	8c 70       	andi	r24, 0x0C	; 12
    6324:	19 f0       	breq	.+6      	; 0x632c <vfprintf+0x1cc>
    6326:	01 11       	cpse	r16, r1
    6328:	43 c2       	rjmp	.+1158   	; 0x67b0 <vfprintf+0x650>
    632a:	80 c2       	rjmp	.+1280   	; 0x682c <vfprintf+0x6cc>
    632c:	97 fe       	sbrs	r9, 7
    632e:	10 c0       	rjmp	.+32     	; 0x6350 <vfprintf+0x1f0>
    6330:	4c 0c       	add	r4, r12
    6332:	fc 85       	ldd	r31, Y+12	; 0x0c
    6334:	f4 ff       	sbrs	r31, 4
    6336:	04 c0       	rjmp	.+8      	; 0x6340 <vfprintf+0x1e0>
    6338:	8a 81       	ldd	r24, Y+2	; 0x02
    633a:	81 33       	cpi	r24, 0x31	; 49
    633c:	09 f4       	brne	.+2      	; 0x6340 <vfprintf+0x1e0>
    633e:	4a 94       	dec	r4
    6340:	14 14       	cp	r1, r4
    6342:	74 f5       	brge	.+92     	; 0x63a0 <vfprintf+0x240>
    6344:	28 e0       	ldi	r18, 0x08	; 8
    6346:	24 15       	cp	r18, r4
    6348:	78 f5       	brcc	.+94     	; 0x63a8 <vfprintf+0x248>
    634a:	88 e0       	ldi	r24, 0x08	; 8
    634c:	48 2e       	mov	r4, r24
    634e:	2c c0       	rjmp	.+88     	; 0x63a8 <vfprintf+0x248>
    6350:	96 fc       	sbrc	r9, 6
    6352:	2a c0       	rjmp	.+84     	; 0x63a8 <vfprintf+0x248>
    6354:	81 2f       	mov	r24, r17
    6356:	90 e0       	ldi	r25, 0x00	; 0
    6358:	8c 15       	cp	r24, r12
    635a:	9d 05       	cpc	r25, r13
    635c:	9c f0       	brlt	.+38     	; 0x6384 <vfprintf+0x224>
    635e:	3c ef       	ldi	r19, 0xFC	; 252
    6360:	c3 16       	cp	r12, r19
    6362:	3f ef       	ldi	r19, 0xFF	; 255
    6364:	d3 06       	cpc	r13, r19
    6366:	74 f0       	brlt	.+28     	; 0x6384 <vfprintf+0x224>
    6368:	89 2d       	mov	r24, r9
    636a:	80 68       	ori	r24, 0x80	; 128
    636c:	98 2e       	mov	r9, r24
    636e:	0a c0       	rjmp	.+20     	; 0x6384 <vfprintf+0x224>
    6370:	e2 e0       	ldi	r30, 0x02	; 2
    6372:	f0 e0       	ldi	r31, 0x00	; 0
    6374:	ec 0f       	add	r30, r28
    6376:	fd 1f       	adc	r31, r29
    6378:	e1 0f       	add	r30, r17
    637a:	f1 1d       	adc	r31, r1
    637c:	80 81       	ld	r24, Z
    637e:	80 33       	cpi	r24, 0x30	; 48
    6380:	19 f4       	brne	.+6      	; 0x6388 <vfprintf+0x228>
    6382:	11 50       	subi	r17, 0x01	; 1
    6384:	11 11       	cpse	r17, r1
    6386:	f4 cf       	rjmp	.-24     	; 0x6370 <vfprintf+0x210>
    6388:	97 fe       	sbrs	r9, 7
    638a:	0e c0       	rjmp	.+28     	; 0x63a8 <vfprintf+0x248>
    638c:	44 24       	eor	r4, r4
    638e:	43 94       	inc	r4
    6390:	41 0e       	add	r4, r17
    6392:	81 2f       	mov	r24, r17
    6394:	90 e0       	ldi	r25, 0x00	; 0
    6396:	c8 16       	cp	r12, r24
    6398:	d9 06       	cpc	r13, r25
    639a:	2c f4       	brge	.+10     	; 0x63a6 <vfprintf+0x246>
    639c:	1c 19       	sub	r17, r12
    639e:	04 c0       	rjmp	.+8      	; 0x63a8 <vfprintf+0x248>
    63a0:	44 24       	eor	r4, r4
    63a2:	43 94       	inc	r4
    63a4:	01 c0       	rjmp	.+2      	; 0x63a8 <vfprintf+0x248>
    63a6:	10 e0       	ldi	r17, 0x00	; 0
    63a8:	97 fe       	sbrs	r9, 7
    63aa:	06 c0       	rjmp	.+12     	; 0x63b8 <vfprintf+0x258>
    63ac:	1c 14       	cp	r1, r12
    63ae:	1d 04       	cpc	r1, r13
    63b0:	34 f4       	brge	.+12     	; 0x63be <vfprintf+0x25e>
    63b2:	c6 01       	movw	r24, r12
    63b4:	01 96       	adiw	r24, 0x01	; 1
    63b6:	05 c0       	rjmp	.+10     	; 0x63c2 <vfprintf+0x262>
    63b8:	85 e0       	ldi	r24, 0x05	; 5
    63ba:	90 e0       	ldi	r25, 0x00	; 0
    63bc:	02 c0       	rjmp	.+4      	; 0x63c2 <vfprintf+0x262>
    63be:	81 e0       	ldi	r24, 0x01	; 1
    63c0:	90 e0       	ldi	r25, 0x00	; 0
    63c2:	01 11       	cpse	r16, r1
    63c4:	01 96       	adiw	r24, 0x01	; 1
    63c6:	11 23       	and	r17, r17
    63c8:	31 f0       	breq	.+12     	; 0x63d6 <vfprintf+0x276>
    63ca:	21 2f       	mov	r18, r17
    63cc:	30 e0       	ldi	r19, 0x00	; 0
    63ce:	2f 5f       	subi	r18, 0xFF	; 255
    63d0:	3f 4f       	sbci	r19, 0xFF	; 255
    63d2:	82 0f       	add	r24, r18
    63d4:	93 1f       	adc	r25, r19
    63d6:	25 2d       	mov	r18, r5
    63d8:	30 e0       	ldi	r19, 0x00	; 0
    63da:	82 17       	cp	r24, r18
    63dc:	93 07       	cpc	r25, r19
    63de:	14 f4       	brge	.+4      	; 0x63e4 <vfprintf+0x284>
    63e0:	58 1a       	sub	r5, r24
    63e2:	01 c0       	rjmp	.+2      	; 0x63e6 <vfprintf+0x286>
    63e4:	51 2c       	mov	r5, r1
    63e6:	89 2d       	mov	r24, r9
    63e8:	89 70       	andi	r24, 0x09	; 9
    63ea:	41 f4       	brne	.+16     	; 0x63fc <vfprintf+0x29c>
    63ec:	55 20       	and	r5, r5
    63ee:	31 f0       	breq	.+12     	; 0x63fc <vfprintf+0x29c>
    63f0:	b7 01       	movw	r22, r14
    63f2:	80 e2       	ldi	r24, 0x20	; 32
    63f4:	90 e0       	ldi	r25, 0x00	; 0
    63f6:	a1 d4       	rcall	.+2370   	; 0x6d3a <fputc>
    63f8:	5a 94       	dec	r5
    63fa:	f8 cf       	rjmp	.-16     	; 0x63ec <vfprintf+0x28c>
    63fc:	00 23       	and	r16, r16
    63fe:	21 f0       	breq	.+8      	; 0x6408 <vfprintf+0x2a8>
    6400:	b7 01       	movw	r22, r14
    6402:	80 2f       	mov	r24, r16
    6404:	90 e0       	ldi	r25, 0x00	; 0
    6406:	99 d4       	rcall	.+2354   	; 0x6d3a <fputc>
    6408:	93 fc       	sbrc	r9, 3
    640a:	08 c0       	rjmp	.+16     	; 0x641c <vfprintf+0x2bc>
    640c:	55 20       	and	r5, r5
    640e:	31 f0       	breq	.+12     	; 0x641c <vfprintf+0x2bc>
    6410:	b7 01       	movw	r22, r14
    6412:	80 e3       	ldi	r24, 0x30	; 48
    6414:	90 e0       	ldi	r25, 0x00	; 0
    6416:	91 d4       	rcall	.+2338   	; 0x6d3a <fputc>
    6418:	5a 94       	dec	r5
    641a:	f8 cf       	rjmp	.-16     	; 0x640c <vfprintf+0x2ac>
    641c:	97 fe       	sbrs	r9, 7
    641e:	4a c0       	rjmp	.+148    	; 0x64b4 <vfprintf+0x354>
    6420:	46 01       	movw	r8, r12
    6422:	d7 fe       	sbrs	r13, 7
    6424:	02 c0       	rjmp	.+4      	; 0x642a <vfprintf+0x2ca>
    6426:	81 2c       	mov	r8, r1
    6428:	91 2c       	mov	r9, r1
    642a:	c6 01       	movw	r24, r12
    642c:	88 19       	sub	r24, r8
    642e:	99 09       	sbc	r25, r9
    6430:	f3 01       	movw	r30, r6
    6432:	e8 0f       	add	r30, r24
    6434:	f9 1f       	adc	r31, r25
    6436:	ed 87       	std	Y+13, r30	; 0x0d
    6438:	fe 87       	std	Y+14, r31	; 0x0e
    643a:	96 01       	movw	r18, r12
    643c:	24 19       	sub	r18, r4
    643e:	31 09       	sbc	r19, r1
    6440:	2f 87       	std	Y+15, r18	; 0x0f
    6442:	38 8b       	std	Y+16, r19	; 0x10
    6444:	01 2f       	mov	r16, r17
    6446:	10 e0       	ldi	r17, 0x00	; 0
    6448:	11 95       	neg	r17
    644a:	01 95       	neg	r16
    644c:	11 09       	sbc	r17, r1
    644e:	3f ef       	ldi	r19, 0xFF	; 255
    6450:	83 16       	cp	r8, r19
    6452:	93 06       	cpc	r9, r19
    6454:	21 f4       	brne	.+8      	; 0x645e <vfprintf+0x2fe>
    6456:	b7 01       	movw	r22, r14
    6458:	8e e2       	ldi	r24, 0x2E	; 46
    645a:	90 e0       	ldi	r25, 0x00	; 0
    645c:	6e d4       	rcall	.+2268   	; 0x6d3a <fputc>
    645e:	c8 14       	cp	r12, r8
    6460:	d9 04       	cpc	r13, r9
    6462:	4c f0       	brlt	.+18     	; 0x6476 <vfprintf+0x316>
    6464:	8f 85       	ldd	r24, Y+15	; 0x0f
    6466:	98 89       	ldd	r25, Y+16	; 0x10
    6468:	88 15       	cp	r24, r8
    646a:	99 05       	cpc	r25, r9
    646c:	24 f4       	brge	.+8      	; 0x6476 <vfprintf+0x316>
    646e:	ed 85       	ldd	r30, Y+13	; 0x0d
    6470:	fe 85       	ldd	r31, Y+14	; 0x0e
    6472:	81 81       	ldd	r24, Z+1	; 0x01
    6474:	01 c0       	rjmp	.+2      	; 0x6478 <vfprintf+0x318>
    6476:	80 e3       	ldi	r24, 0x30	; 48
    6478:	f1 e0       	ldi	r31, 0x01	; 1
    647a:	8f 1a       	sub	r8, r31
    647c:	91 08       	sbc	r9, r1
    647e:	2d 85       	ldd	r18, Y+13	; 0x0d
    6480:	3e 85       	ldd	r19, Y+14	; 0x0e
    6482:	2f 5f       	subi	r18, 0xFF	; 255
    6484:	3f 4f       	sbci	r19, 0xFF	; 255
    6486:	2d 87       	std	Y+13, r18	; 0x0d
    6488:	3e 87       	std	Y+14, r19	; 0x0e
    648a:	80 16       	cp	r8, r16
    648c:	91 06       	cpc	r9, r17
    648e:	24 f0       	brlt	.+8      	; 0x6498 <vfprintf+0x338>
    6490:	b7 01       	movw	r22, r14
    6492:	90 e0       	ldi	r25, 0x00	; 0
    6494:	52 d4       	rcall	.+2212   	; 0x6d3a <fputc>
    6496:	db cf       	rjmp	.-74     	; 0x644e <vfprintf+0x2ee>
    6498:	c8 14       	cp	r12, r8
    649a:	d9 04       	cpc	r13, r9
    649c:	41 f4       	brne	.+16     	; 0x64ae <vfprintf+0x34e>
    649e:	9a 81       	ldd	r25, Y+2	; 0x02
    64a0:	96 33       	cpi	r25, 0x36	; 54
    64a2:	20 f4       	brcc	.+8      	; 0x64ac <vfprintf+0x34c>
    64a4:	95 33       	cpi	r25, 0x35	; 53
    64a6:	19 f4       	brne	.+6      	; 0x64ae <vfprintf+0x34e>
    64a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    64aa:	34 ff       	sbrs	r19, 4
    64ac:	81 e3       	ldi	r24, 0x31	; 49
    64ae:	b7 01       	movw	r22, r14
    64b0:	90 e0       	ldi	r25, 0x00	; 0
    64b2:	48 c0       	rjmp	.+144    	; 0x6544 <vfprintf+0x3e4>
    64b4:	8a 81       	ldd	r24, Y+2	; 0x02
    64b6:	81 33       	cpi	r24, 0x31	; 49
    64b8:	19 f0       	breq	.+6      	; 0x64c0 <vfprintf+0x360>
    64ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    64bc:	9f 7e       	andi	r25, 0xEF	; 239
    64be:	9c 87       	std	Y+12, r25	; 0x0c
    64c0:	b7 01       	movw	r22, r14
    64c2:	90 e0       	ldi	r25, 0x00	; 0
    64c4:	3a d4       	rcall	.+2164   	; 0x6d3a <fputc>
    64c6:	11 11       	cpse	r17, r1
    64c8:	05 c0       	rjmp	.+10     	; 0x64d4 <vfprintf+0x374>
    64ca:	94 fc       	sbrc	r9, 4
    64cc:	16 c0       	rjmp	.+44     	; 0x64fa <vfprintf+0x39a>
    64ce:	85 e6       	ldi	r24, 0x65	; 101
    64d0:	90 e0       	ldi	r25, 0x00	; 0
    64d2:	15 c0       	rjmp	.+42     	; 0x64fe <vfprintf+0x39e>
    64d4:	b7 01       	movw	r22, r14
    64d6:	8e e2       	ldi	r24, 0x2E	; 46
    64d8:	90 e0       	ldi	r25, 0x00	; 0
    64da:	2f d4       	rcall	.+2142   	; 0x6d3a <fputc>
    64dc:	1e 5f       	subi	r17, 0xFE	; 254
    64de:	82 e0       	ldi	r24, 0x02	; 2
    64e0:	01 e0       	ldi	r16, 0x01	; 1
    64e2:	08 0f       	add	r16, r24
    64e4:	f3 01       	movw	r30, r6
    64e6:	e8 0f       	add	r30, r24
    64e8:	f1 1d       	adc	r31, r1
    64ea:	80 81       	ld	r24, Z
    64ec:	b7 01       	movw	r22, r14
    64ee:	90 e0       	ldi	r25, 0x00	; 0
    64f0:	24 d4       	rcall	.+2120   	; 0x6d3a <fputc>
    64f2:	80 2f       	mov	r24, r16
    64f4:	01 13       	cpse	r16, r17
    64f6:	f4 cf       	rjmp	.-24     	; 0x64e0 <vfprintf+0x380>
    64f8:	e8 cf       	rjmp	.-48     	; 0x64ca <vfprintf+0x36a>
    64fa:	85 e4       	ldi	r24, 0x45	; 69
    64fc:	90 e0       	ldi	r25, 0x00	; 0
    64fe:	b7 01       	movw	r22, r14
    6500:	1c d4       	rcall	.+2104   	; 0x6d3a <fputc>
    6502:	d7 fc       	sbrc	r13, 7
    6504:	06 c0       	rjmp	.+12     	; 0x6512 <vfprintf+0x3b2>
    6506:	c1 14       	cp	r12, r1
    6508:	d1 04       	cpc	r13, r1
    650a:	41 f4       	brne	.+16     	; 0x651c <vfprintf+0x3bc>
    650c:	ec 85       	ldd	r30, Y+12	; 0x0c
    650e:	e4 ff       	sbrs	r30, 4
    6510:	05 c0       	rjmp	.+10     	; 0x651c <vfprintf+0x3bc>
    6512:	d1 94       	neg	r13
    6514:	c1 94       	neg	r12
    6516:	d1 08       	sbc	r13, r1
    6518:	8d e2       	ldi	r24, 0x2D	; 45
    651a:	01 c0       	rjmp	.+2      	; 0x651e <vfprintf+0x3be>
    651c:	8b e2       	ldi	r24, 0x2B	; 43
    651e:	b7 01       	movw	r22, r14
    6520:	90 e0       	ldi	r25, 0x00	; 0
    6522:	0b d4       	rcall	.+2070   	; 0x6d3a <fputc>
    6524:	80 e3       	ldi	r24, 0x30	; 48
    6526:	2a e0       	ldi	r18, 0x0A	; 10
    6528:	c2 16       	cp	r12, r18
    652a:	d1 04       	cpc	r13, r1
    652c:	2c f0       	brlt	.+10     	; 0x6538 <vfprintf+0x3d8>
    652e:	8f 5f       	subi	r24, 0xFF	; 255
    6530:	fa e0       	ldi	r31, 0x0A	; 10
    6532:	cf 1a       	sub	r12, r31
    6534:	d1 08       	sbc	r13, r1
    6536:	f7 cf       	rjmp	.-18     	; 0x6526 <vfprintf+0x3c6>
    6538:	b7 01       	movw	r22, r14
    653a:	90 e0       	ldi	r25, 0x00	; 0
    653c:	fe d3       	rcall	.+2044   	; 0x6d3a <fputc>
    653e:	b7 01       	movw	r22, r14
    6540:	c6 01       	movw	r24, r12
    6542:	c0 96       	adiw	r24, 0x30	; 48
    6544:	fa d3       	rcall	.+2036   	; 0x6d3a <fputc>
    6546:	49 c1       	rjmp	.+658    	; 0x67da <vfprintf+0x67a>
    6548:	83 36       	cpi	r24, 0x63	; 99
    654a:	31 f0       	breq	.+12     	; 0x6558 <vfprintf+0x3f8>
    654c:	83 37       	cpi	r24, 0x73	; 115
    654e:	79 f0       	breq	.+30     	; 0x656e <vfprintf+0x40e>
    6550:	83 35       	cpi	r24, 0x53	; 83
    6552:	09 f0       	breq	.+2      	; 0x6556 <vfprintf+0x3f6>
    6554:	52 c0       	rjmp	.+164    	; 0x65fa <vfprintf+0x49a>
    6556:	1f c0       	rjmp	.+62     	; 0x6596 <vfprintf+0x436>
    6558:	56 01       	movw	r10, r12
    655a:	32 e0       	ldi	r19, 0x02	; 2
    655c:	a3 0e       	add	r10, r19
    655e:	b1 1c       	adc	r11, r1
    6560:	f6 01       	movw	r30, r12
    6562:	80 81       	ld	r24, Z
    6564:	89 83       	std	Y+1, r24	; 0x01
    6566:	01 e0       	ldi	r16, 0x01	; 1
    6568:	10 e0       	ldi	r17, 0x00	; 0
    656a:	63 01       	movw	r12, r6
    656c:	11 c0       	rjmp	.+34     	; 0x6590 <vfprintf+0x430>
    656e:	56 01       	movw	r10, r12
    6570:	f2 e0       	ldi	r31, 0x02	; 2
    6572:	af 0e       	add	r10, r31
    6574:	b1 1c       	adc	r11, r1
    6576:	f6 01       	movw	r30, r12
    6578:	c0 80       	ld	r12, Z
    657a:	d1 80       	ldd	r13, Z+1	; 0x01
    657c:	96 fe       	sbrs	r9, 6
    657e:	03 c0       	rjmp	.+6      	; 0x6586 <vfprintf+0x426>
    6580:	61 2f       	mov	r22, r17
    6582:	70 e0       	ldi	r23, 0x00	; 0
    6584:	02 c0       	rjmp	.+4      	; 0x658a <vfprintf+0x42a>
    6586:	6f ef       	ldi	r22, 0xFF	; 255
    6588:	7f ef       	ldi	r23, 0xFF	; 255
    658a:	c6 01       	movw	r24, r12
    658c:	81 d3       	rcall	.+1794   	; 0x6c90 <strnlen>
    658e:	8c 01       	movw	r16, r24
    6590:	f9 2d       	mov	r31, r9
    6592:	ff 77       	andi	r31, 0x7F	; 127
    6594:	13 c0       	rjmp	.+38     	; 0x65bc <vfprintf+0x45c>
    6596:	56 01       	movw	r10, r12
    6598:	22 e0       	ldi	r18, 0x02	; 2
    659a:	a2 0e       	add	r10, r18
    659c:	b1 1c       	adc	r11, r1
    659e:	f6 01       	movw	r30, r12
    65a0:	c0 80       	ld	r12, Z
    65a2:	d1 80       	ldd	r13, Z+1	; 0x01
    65a4:	96 fe       	sbrs	r9, 6
    65a6:	03 c0       	rjmp	.+6      	; 0x65ae <vfprintf+0x44e>
    65a8:	61 2f       	mov	r22, r17
    65aa:	70 e0       	ldi	r23, 0x00	; 0
    65ac:	02 c0       	rjmp	.+4      	; 0x65b2 <vfprintf+0x452>
    65ae:	6f ef       	ldi	r22, 0xFF	; 255
    65b0:	7f ef       	ldi	r23, 0xFF	; 255
    65b2:	c6 01       	movw	r24, r12
    65b4:	62 d3       	rcall	.+1732   	; 0x6c7a <strnlen_P>
    65b6:	8c 01       	movw	r16, r24
    65b8:	f9 2d       	mov	r31, r9
    65ba:	f0 68       	ori	r31, 0x80	; 128
    65bc:	9f 2e       	mov	r9, r31
    65be:	f3 fd       	sbrc	r31, 3
    65c0:	18 c0       	rjmp	.+48     	; 0x65f2 <vfprintf+0x492>
    65c2:	85 2d       	mov	r24, r5
    65c4:	90 e0       	ldi	r25, 0x00	; 0
    65c6:	08 17       	cp	r16, r24
    65c8:	19 07       	cpc	r17, r25
    65ca:	98 f4       	brcc	.+38     	; 0x65f2 <vfprintf+0x492>
    65cc:	b7 01       	movw	r22, r14
    65ce:	80 e2       	ldi	r24, 0x20	; 32
    65d0:	90 e0       	ldi	r25, 0x00	; 0
    65d2:	b3 d3       	rcall	.+1894   	; 0x6d3a <fputc>
    65d4:	5a 94       	dec	r5
    65d6:	f5 cf       	rjmp	.-22     	; 0x65c2 <vfprintf+0x462>
    65d8:	f6 01       	movw	r30, r12
    65da:	97 fc       	sbrc	r9, 7
    65dc:	85 91       	lpm	r24, Z+
    65de:	97 fe       	sbrs	r9, 7
    65e0:	81 91       	ld	r24, Z+
    65e2:	6f 01       	movw	r12, r30
    65e4:	b7 01       	movw	r22, r14
    65e6:	90 e0       	ldi	r25, 0x00	; 0
    65e8:	a8 d3       	rcall	.+1872   	; 0x6d3a <fputc>
    65ea:	51 10       	cpse	r5, r1
    65ec:	5a 94       	dec	r5
    65ee:	01 50       	subi	r16, 0x01	; 1
    65f0:	11 09       	sbc	r17, r1
    65f2:	01 15       	cp	r16, r1
    65f4:	11 05       	cpc	r17, r1
    65f6:	81 f7       	brne	.-32     	; 0x65d8 <vfprintf+0x478>
    65f8:	f0 c0       	rjmp	.+480    	; 0x67da <vfprintf+0x67a>
    65fa:	84 36       	cpi	r24, 0x64	; 100
    65fc:	11 f0       	breq	.+4      	; 0x6602 <vfprintf+0x4a2>
    65fe:	89 36       	cpi	r24, 0x69	; 105
    6600:	59 f5       	brne	.+86     	; 0x6658 <vfprintf+0x4f8>
    6602:	56 01       	movw	r10, r12
    6604:	97 fe       	sbrs	r9, 7
    6606:	09 c0       	rjmp	.+18     	; 0x661a <vfprintf+0x4ba>
    6608:	24 e0       	ldi	r18, 0x04	; 4
    660a:	a2 0e       	add	r10, r18
    660c:	b1 1c       	adc	r11, r1
    660e:	f6 01       	movw	r30, r12
    6610:	60 81       	ld	r22, Z
    6612:	71 81       	ldd	r23, Z+1	; 0x01
    6614:	82 81       	ldd	r24, Z+2	; 0x02
    6616:	93 81       	ldd	r25, Z+3	; 0x03
    6618:	0a c0       	rjmp	.+20     	; 0x662e <vfprintf+0x4ce>
    661a:	f2 e0       	ldi	r31, 0x02	; 2
    661c:	af 0e       	add	r10, r31
    661e:	b1 1c       	adc	r11, r1
    6620:	f6 01       	movw	r30, r12
    6622:	60 81       	ld	r22, Z
    6624:	71 81       	ldd	r23, Z+1	; 0x01
    6626:	07 2e       	mov	r0, r23
    6628:	00 0c       	add	r0, r0
    662a:	88 0b       	sbc	r24, r24
    662c:	99 0b       	sbc	r25, r25
    662e:	f9 2d       	mov	r31, r9
    6630:	ff 76       	andi	r31, 0x6F	; 111
    6632:	9f 2e       	mov	r9, r31
    6634:	97 ff       	sbrs	r25, 7
    6636:	09 c0       	rjmp	.+18     	; 0x664a <vfprintf+0x4ea>
    6638:	90 95       	com	r25
    663a:	80 95       	com	r24
    663c:	70 95       	com	r23
    663e:	61 95       	neg	r22
    6640:	7f 4f       	sbci	r23, 0xFF	; 255
    6642:	8f 4f       	sbci	r24, 0xFF	; 255
    6644:	9f 4f       	sbci	r25, 0xFF	; 255
    6646:	f0 68       	ori	r31, 0x80	; 128
    6648:	9f 2e       	mov	r9, r31
    664a:	2a e0       	ldi	r18, 0x0A	; 10
    664c:	30 e0       	ldi	r19, 0x00	; 0
    664e:	a3 01       	movw	r20, r6
    6650:	eb d3       	rcall	.+2006   	; 0x6e28 <__ultoa_invert>
    6652:	c8 2e       	mov	r12, r24
    6654:	c6 18       	sub	r12, r6
    6656:	3e c0       	rjmp	.+124    	; 0x66d4 <vfprintf+0x574>
    6658:	09 2d       	mov	r16, r9
    665a:	85 37       	cpi	r24, 0x75	; 117
    665c:	21 f4       	brne	.+8      	; 0x6666 <vfprintf+0x506>
    665e:	0f 7e       	andi	r16, 0xEF	; 239
    6660:	2a e0       	ldi	r18, 0x0A	; 10
    6662:	30 e0       	ldi	r19, 0x00	; 0
    6664:	1d c0       	rjmp	.+58     	; 0x66a0 <vfprintf+0x540>
    6666:	09 7f       	andi	r16, 0xF9	; 249
    6668:	8f 36       	cpi	r24, 0x6F	; 111
    666a:	91 f0       	breq	.+36     	; 0x6690 <vfprintf+0x530>
    666c:	18 f4       	brcc	.+6      	; 0x6674 <vfprintf+0x514>
    666e:	88 35       	cpi	r24, 0x58	; 88
    6670:	59 f0       	breq	.+22     	; 0x6688 <vfprintf+0x528>
    6672:	bc c0       	rjmp	.+376    	; 0x67ec <vfprintf+0x68c>
    6674:	80 37       	cpi	r24, 0x70	; 112
    6676:	19 f0       	breq	.+6      	; 0x667e <vfprintf+0x51e>
    6678:	88 37       	cpi	r24, 0x78	; 120
    667a:	11 f0       	breq	.+4      	; 0x6680 <vfprintf+0x520>
    667c:	b7 c0       	rjmp	.+366    	; 0x67ec <vfprintf+0x68c>
    667e:	00 61       	ori	r16, 0x10	; 16
    6680:	04 ff       	sbrs	r16, 4
    6682:	09 c0       	rjmp	.+18     	; 0x6696 <vfprintf+0x536>
    6684:	04 60       	ori	r16, 0x04	; 4
    6686:	07 c0       	rjmp	.+14     	; 0x6696 <vfprintf+0x536>
    6688:	94 fe       	sbrs	r9, 4
    668a:	08 c0       	rjmp	.+16     	; 0x669c <vfprintf+0x53c>
    668c:	06 60       	ori	r16, 0x06	; 6
    668e:	06 c0       	rjmp	.+12     	; 0x669c <vfprintf+0x53c>
    6690:	28 e0       	ldi	r18, 0x08	; 8
    6692:	30 e0       	ldi	r19, 0x00	; 0
    6694:	05 c0       	rjmp	.+10     	; 0x66a0 <vfprintf+0x540>
    6696:	20 e1       	ldi	r18, 0x10	; 16
    6698:	30 e0       	ldi	r19, 0x00	; 0
    669a:	02 c0       	rjmp	.+4      	; 0x66a0 <vfprintf+0x540>
    669c:	20 e1       	ldi	r18, 0x10	; 16
    669e:	32 e0       	ldi	r19, 0x02	; 2
    66a0:	56 01       	movw	r10, r12
    66a2:	07 ff       	sbrs	r16, 7
    66a4:	09 c0       	rjmp	.+18     	; 0x66b8 <vfprintf+0x558>
    66a6:	84 e0       	ldi	r24, 0x04	; 4
    66a8:	a8 0e       	add	r10, r24
    66aa:	b1 1c       	adc	r11, r1
    66ac:	f6 01       	movw	r30, r12
    66ae:	60 81       	ld	r22, Z
    66b0:	71 81       	ldd	r23, Z+1	; 0x01
    66b2:	82 81       	ldd	r24, Z+2	; 0x02
    66b4:	93 81       	ldd	r25, Z+3	; 0x03
    66b6:	08 c0       	rjmp	.+16     	; 0x66c8 <vfprintf+0x568>
    66b8:	f2 e0       	ldi	r31, 0x02	; 2
    66ba:	af 0e       	add	r10, r31
    66bc:	b1 1c       	adc	r11, r1
    66be:	f6 01       	movw	r30, r12
    66c0:	60 81       	ld	r22, Z
    66c2:	71 81       	ldd	r23, Z+1	; 0x01
    66c4:	80 e0       	ldi	r24, 0x00	; 0
    66c6:	90 e0       	ldi	r25, 0x00	; 0
    66c8:	a3 01       	movw	r20, r6
    66ca:	ae d3       	rcall	.+1884   	; 0x6e28 <__ultoa_invert>
    66cc:	c8 2e       	mov	r12, r24
    66ce:	c6 18       	sub	r12, r6
    66d0:	0f 77       	andi	r16, 0x7F	; 127
    66d2:	90 2e       	mov	r9, r16
    66d4:	96 fe       	sbrs	r9, 6
    66d6:	0b c0       	rjmp	.+22     	; 0x66ee <vfprintf+0x58e>
    66d8:	09 2d       	mov	r16, r9
    66da:	0e 7f       	andi	r16, 0xFE	; 254
    66dc:	c1 16       	cp	r12, r17
    66de:	50 f4       	brcc	.+20     	; 0x66f4 <vfprintf+0x594>
    66e0:	94 fe       	sbrs	r9, 4
    66e2:	0a c0       	rjmp	.+20     	; 0x66f8 <vfprintf+0x598>
    66e4:	92 fc       	sbrc	r9, 2
    66e6:	08 c0       	rjmp	.+16     	; 0x66f8 <vfprintf+0x598>
    66e8:	09 2d       	mov	r16, r9
    66ea:	0e 7e       	andi	r16, 0xEE	; 238
    66ec:	05 c0       	rjmp	.+10     	; 0x66f8 <vfprintf+0x598>
    66ee:	dc 2c       	mov	r13, r12
    66f0:	09 2d       	mov	r16, r9
    66f2:	03 c0       	rjmp	.+6      	; 0x66fa <vfprintf+0x59a>
    66f4:	dc 2c       	mov	r13, r12
    66f6:	01 c0       	rjmp	.+2      	; 0x66fa <vfprintf+0x59a>
    66f8:	d1 2e       	mov	r13, r17
    66fa:	04 ff       	sbrs	r16, 4
    66fc:	0d c0       	rjmp	.+26     	; 0x6718 <vfprintf+0x5b8>
    66fe:	fe 01       	movw	r30, r28
    6700:	ec 0d       	add	r30, r12
    6702:	f1 1d       	adc	r31, r1
    6704:	80 81       	ld	r24, Z
    6706:	80 33       	cpi	r24, 0x30	; 48
    6708:	11 f4       	brne	.+4      	; 0x670e <vfprintf+0x5ae>
    670a:	09 7e       	andi	r16, 0xE9	; 233
    670c:	09 c0       	rjmp	.+18     	; 0x6720 <vfprintf+0x5c0>
    670e:	02 ff       	sbrs	r16, 2
    6710:	06 c0       	rjmp	.+12     	; 0x671e <vfprintf+0x5be>
    6712:	d3 94       	inc	r13
    6714:	d3 94       	inc	r13
    6716:	04 c0       	rjmp	.+8      	; 0x6720 <vfprintf+0x5c0>
    6718:	80 2f       	mov	r24, r16
    671a:	86 78       	andi	r24, 0x86	; 134
    671c:	09 f0       	breq	.+2      	; 0x6720 <vfprintf+0x5c0>
    671e:	d3 94       	inc	r13
    6720:	03 fd       	sbrc	r16, 3
    6722:	10 c0       	rjmp	.+32     	; 0x6744 <vfprintf+0x5e4>
    6724:	00 ff       	sbrs	r16, 0
    6726:	06 c0       	rjmp	.+12     	; 0x6734 <vfprintf+0x5d4>
    6728:	1c 2d       	mov	r17, r12
    672a:	d5 14       	cp	r13, r5
    672c:	78 f4       	brcc	.+30     	; 0x674c <vfprintf+0x5ec>
    672e:	15 0d       	add	r17, r5
    6730:	1d 19       	sub	r17, r13
    6732:	0c c0       	rjmp	.+24     	; 0x674c <vfprintf+0x5ec>
    6734:	d5 14       	cp	r13, r5
    6736:	50 f4       	brcc	.+20     	; 0x674c <vfprintf+0x5ec>
    6738:	b7 01       	movw	r22, r14
    673a:	80 e2       	ldi	r24, 0x20	; 32
    673c:	90 e0       	ldi	r25, 0x00	; 0
    673e:	fd d2       	rcall	.+1530   	; 0x6d3a <fputc>
    6740:	d3 94       	inc	r13
    6742:	f8 cf       	rjmp	.-16     	; 0x6734 <vfprintf+0x5d4>
    6744:	d5 14       	cp	r13, r5
    6746:	10 f4       	brcc	.+4      	; 0x674c <vfprintf+0x5ec>
    6748:	5d 18       	sub	r5, r13
    674a:	01 c0       	rjmp	.+2      	; 0x674e <vfprintf+0x5ee>
    674c:	51 2c       	mov	r5, r1
    674e:	04 ff       	sbrs	r16, 4
    6750:	0f c0       	rjmp	.+30     	; 0x6770 <vfprintf+0x610>
    6752:	b7 01       	movw	r22, r14
    6754:	80 e3       	ldi	r24, 0x30	; 48
    6756:	90 e0       	ldi	r25, 0x00	; 0
    6758:	f0 d2       	rcall	.+1504   	; 0x6d3a <fputc>
    675a:	02 ff       	sbrs	r16, 2
    675c:	16 c0       	rjmp	.+44     	; 0x678a <vfprintf+0x62a>
    675e:	01 fd       	sbrc	r16, 1
    6760:	03 c0       	rjmp	.+6      	; 0x6768 <vfprintf+0x608>
    6762:	88 e7       	ldi	r24, 0x78	; 120
    6764:	90 e0       	ldi	r25, 0x00	; 0
    6766:	02 c0       	rjmp	.+4      	; 0x676c <vfprintf+0x60c>
    6768:	88 e5       	ldi	r24, 0x58	; 88
    676a:	90 e0       	ldi	r25, 0x00	; 0
    676c:	b7 01       	movw	r22, r14
    676e:	0c c0       	rjmp	.+24     	; 0x6788 <vfprintf+0x628>
    6770:	80 2f       	mov	r24, r16
    6772:	86 78       	andi	r24, 0x86	; 134
    6774:	51 f0       	breq	.+20     	; 0x678a <vfprintf+0x62a>
    6776:	01 ff       	sbrs	r16, 1
    6778:	02 c0       	rjmp	.+4      	; 0x677e <vfprintf+0x61e>
    677a:	8b e2       	ldi	r24, 0x2B	; 43
    677c:	01 c0       	rjmp	.+2      	; 0x6780 <vfprintf+0x620>
    677e:	80 e2       	ldi	r24, 0x20	; 32
    6780:	07 fd       	sbrc	r16, 7
    6782:	8d e2       	ldi	r24, 0x2D	; 45
    6784:	b7 01       	movw	r22, r14
    6786:	90 e0       	ldi	r25, 0x00	; 0
    6788:	d8 d2       	rcall	.+1456   	; 0x6d3a <fputc>
    678a:	c1 16       	cp	r12, r17
    678c:	30 f4       	brcc	.+12     	; 0x679a <vfprintf+0x63a>
    678e:	b7 01       	movw	r22, r14
    6790:	80 e3       	ldi	r24, 0x30	; 48
    6792:	90 e0       	ldi	r25, 0x00	; 0
    6794:	d2 d2       	rcall	.+1444   	; 0x6d3a <fputc>
    6796:	11 50       	subi	r17, 0x01	; 1
    6798:	f8 cf       	rjmp	.-16     	; 0x678a <vfprintf+0x62a>
    679a:	ca 94       	dec	r12
    679c:	f3 01       	movw	r30, r6
    679e:	ec 0d       	add	r30, r12
    67a0:	f1 1d       	adc	r31, r1
    67a2:	80 81       	ld	r24, Z
    67a4:	b7 01       	movw	r22, r14
    67a6:	90 e0       	ldi	r25, 0x00	; 0
    67a8:	c8 d2       	rcall	.+1424   	; 0x6d3a <fputc>
    67aa:	c1 10       	cpse	r12, r1
    67ac:	f6 cf       	rjmp	.-20     	; 0x679a <vfprintf+0x63a>
    67ae:	15 c0       	rjmp	.+42     	; 0x67da <vfprintf+0x67a>
    67b0:	f4 e0       	ldi	r31, 0x04	; 4
    67b2:	f5 15       	cp	r31, r5
    67b4:	50 f5       	brcc	.+84     	; 0x680a <vfprintf+0x6aa>
    67b6:	84 e0       	ldi	r24, 0x04	; 4
    67b8:	58 1a       	sub	r5, r24
    67ba:	93 fe       	sbrs	r9, 3
    67bc:	1e c0       	rjmp	.+60     	; 0x67fa <vfprintf+0x69a>
    67be:	01 11       	cpse	r16, r1
    67c0:	25 c0       	rjmp	.+74     	; 0x680c <vfprintf+0x6ac>
    67c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    67c4:	23 ff       	sbrs	r18, 3
    67c6:	27 c0       	rjmp	.+78     	; 0x6816 <vfprintf+0x6b6>
    67c8:	08 ea       	ldi	r16, 0xA8	; 168
    67ca:	12 e0       	ldi	r17, 0x02	; 2
    67cc:	39 2d       	mov	r19, r9
    67ce:	30 71       	andi	r19, 0x10	; 16
    67d0:	93 2e       	mov	r9, r19
    67d2:	f8 01       	movw	r30, r16
    67d4:	84 91       	lpm	r24, Z
    67d6:	81 11       	cpse	r24, r1
    67d8:	21 c0       	rjmp	.+66     	; 0x681c <vfprintf+0x6bc>
    67da:	55 20       	and	r5, r5
    67dc:	09 f4       	brne	.+2      	; 0x67e0 <vfprintf+0x680>
    67de:	fc cc       	rjmp	.-1544   	; 0x61d8 <vfprintf+0x78>
    67e0:	b7 01       	movw	r22, r14
    67e2:	80 e2       	ldi	r24, 0x20	; 32
    67e4:	90 e0       	ldi	r25, 0x00	; 0
    67e6:	a9 d2       	rcall	.+1362   	; 0x6d3a <fputc>
    67e8:	5a 94       	dec	r5
    67ea:	f7 cf       	rjmp	.-18     	; 0x67da <vfprintf+0x67a>
    67ec:	f7 01       	movw	r30, r14
    67ee:	86 81       	ldd	r24, Z+6	; 0x06
    67f0:	97 81       	ldd	r25, Z+7	; 0x07
    67f2:	23 c0       	rjmp	.+70     	; 0x683a <vfprintf+0x6da>
    67f4:	8f ef       	ldi	r24, 0xFF	; 255
    67f6:	9f ef       	ldi	r25, 0xFF	; 255
    67f8:	20 c0       	rjmp	.+64     	; 0x683a <vfprintf+0x6da>
    67fa:	b7 01       	movw	r22, r14
    67fc:	80 e2       	ldi	r24, 0x20	; 32
    67fe:	90 e0       	ldi	r25, 0x00	; 0
    6800:	9c d2       	rcall	.+1336   	; 0x6d3a <fputc>
    6802:	5a 94       	dec	r5
    6804:	51 10       	cpse	r5, r1
    6806:	f9 cf       	rjmp	.-14     	; 0x67fa <vfprintf+0x69a>
    6808:	da cf       	rjmp	.-76     	; 0x67be <vfprintf+0x65e>
    680a:	51 2c       	mov	r5, r1
    680c:	b7 01       	movw	r22, r14
    680e:	80 2f       	mov	r24, r16
    6810:	90 e0       	ldi	r25, 0x00	; 0
    6812:	93 d2       	rcall	.+1318   	; 0x6d3a <fputc>
    6814:	d6 cf       	rjmp	.-84     	; 0x67c2 <vfprintf+0x662>
    6816:	0c ea       	ldi	r16, 0xAC	; 172
    6818:	12 e0       	ldi	r17, 0x02	; 2
    681a:	d8 cf       	rjmp	.-80     	; 0x67cc <vfprintf+0x66c>
    681c:	91 10       	cpse	r9, r1
    681e:	80 52       	subi	r24, 0x20	; 32
    6820:	b7 01       	movw	r22, r14
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	8a d2       	rcall	.+1300   	; 0x6d3a <fputc>
    6826:	0f 5f       	subi	r16, 0xFF	; 255
    6828:	1f 4f       	sbci	r17, 0xFF	; 255
    682a:	d3 cf       	rjmp	.-90     	; 0x67d2 <vfprintf+0x672>
    682c:	23 e0       	ldi	r18, 0x03	; 3
    682e:	25 15       	cp	r18, r5
    6830:	10 f4       	brcc	.+4      	; 0x6836 <vfprintf+0x6d6>
    6832:	83 e0       	ldi	r24, 0x03	; 3
    6834:	c1 cf       	rjmp	.-126    	; 0x67b8 <vfprintf+0x658>
    6836:	51 2c       	mov	r5, r1
    6838:	c4 cf       	rjmp	.-120    	; 0x67c2 <vfprintf+0x662>
    683a:	60 96       	adiw	r28, 0x10	; 16
    683c:	cd bf       	out	0x3d, r28	; 61
    683e:	de bf       	out	0x3e, r29	; 62
    6840:	df 91       	pop	r29
    6842:	cf 91       	pop	r28
    6844:	1f 91       	pop	r17
    6846:	0f 91       	pop	r16
    6848:	ff 90       	pop	r15
    684a:	ef 90       	pop	r14
    684c:	df 90       	pop	r13
    684e:	cf 90       	pop	r12
    6850:	bf 90       	pop	r11
    6852:	af 90       	pop	r10
    6854:	9f 90       	pop	r9
    6856:	8f 90       	pop	r8
    6858:	7f 90       	pop	r7
    685a:	6f 90       	pop	r6
    685c:	5f 90       	pop	r5
    685e:	4f 90       	pop	r4
    6860:	3f 90       	pop	r3
    6862:	2f 90       	pop	r2
    6864:	08 95       	ret

00006866 <__udivmodhi4>:
    6866:	aa 1b       	sub	r26, r26
    6868:	bb 1b       	sub	r27, r27
    686a:	51 e1       	ldi	r21, 0x11	; 17
    686c:	07 c0       	rjmp	.+14     	; 0x687c <__udivmodhi4_ep>

0000686e <__udivmodhi4_loop>:
    686e:	aa 1f       	adc	r26, r26
    6870:	bb 1f       	adc	r27, r27
    6872:	a6 17       	cp	r26, r22
    6874:	b7 07       	cpc	r27, r23
    6876:	10 f0       	brcs	.+4      	; 0x687c <__udivmodhi4_ep>
    6878:	a6 1b       	sub	r26, r22
    687a:	b7 0b       	sbc	r27, r23

0000687c <__udivmodhi4_ep>:
    687c:	88 1f       	adc	r24, r24
    687e:	99 1f       	adc	r25, r25
    6880:	5a 95       	dec	r21
    6882:	a9 f7       	brne	.-22     	; 0x686e <__udivmodhi4_loop>
    6884:	80 95       	com	r24
    6886:	90 95       	com	r25
    6888:	bc 01       	movw	r22, r24
    688a:	cd 01       	movw	r24, r26
    688c:	08 95       	ret

0000688e <__udivmodsi4>:
    688e:	a1 e2       	ldi	r26, 0x21	; 33
    6890:	1a 2e       	mov	r1, r26
    6892:	aa 1b       	sub	r26, r26
    6894:	bb 1b       	sub	r27, r27
    6896:	fd 01       	movw	r30, r26
    6898:	0d c0       	rjmp	.+26     	; 0x68b4 <__udivmodsi4_ep>

0000689a <__udivmodsi4_loop>:
    689a:	aa 1f       	adc	r26, r26
    689c:	bb 1f       	adc	r27, r27
    689e:	ee 1f       	adc	r30, r30
    68a0:	ff 1f       	adc	r31, r31
    68a2:	a2 17       	cp	r26, r18
    68a4:	b3 07       	cpc	r27, r19
    68a6:	e4 07       	cpc	r30, r20
    68a8:	f5 07       	cpc	r31, r21
    68aa:	20 f0       	brcs	.+8      	; 0x68b4 <__udivmodsi4_ep>
    68ac:	a2 1b       	sub	r26, r18
    68ae:	b3 0b       	sbc	r27, r19
    68b0:	e4 0b       	sbc	r30, r20
    68b2:	f5 0b       	sbc	r31, r21

000068b4 <__udivmodsi4_ep>:
    68b4:	66 1f       	adc	r22, r22
    68b6:	77 1f       	adc	r23, r23
    68b8:	88 1f       	adc	r24, r24
    68ba:	99 1f       	adc	r25, r25
    68bc:	1a 94       	dec	r1
    68be:	69 f7       	brne	.-38     	; 0x689a <__udivmodsi4_loop>
    68c0:	60 95       	com	r22
    68c2:	70 95       	com	r23
    68c4:	80 95       	com	r24
    68c6:	90 95       	com	r25
    68c8:	9b 01       	movw	r18, r22
    68ca:	ac 01       	movw	r20, r24
    68cc:	bd 01       	movw	r22, r26
    68ce:	cf 01       	movw	r24, r30
    68d0:	08 95       	ret

000068d2 <__divmodsi4>:
    68d2:	05 2e       	mov	r0, r21
    68d4:	97 fb       	bst	r25, 7
    68d6:	16 f4       	brtc	.+4      	; 0x68dc <__divmodsi4+0xa>
    68d8:	00 94       	com	r0
    68da:	0f d0       	rcall	.+30     	; 0x68fa <__negsi2>
    68dc:	57 fd       	sbrc	r21, 7
    68de:	05 d0       	rcall	.+10     	; 0x68ea <__divmodsi4_neg2>
    68e0:	d6 df       	rcall	.-84     	; 0x688e <__udivmodsi4>
    68e2:	07 fc       	sbrc	r0, 7
    68e4:	02 d0       	rcall	.+4      	; 0x68ea <__divmodsi4_neg2>
    68e6:	46 f4       	brtc	.+16     	; 0x68f8 <__divmodsi4_exit>
    68e8:	08 c0       	rjmp	.+16     	; 0x68fa <__negsi2>

000068ea <__divmodsi4_neg2>:
    68ea:	50 95       	com	r21
    68ec:	40 95       	com	r20
    68ee:	30 95       	com	r19
    68f0:	21 95       	neg	r18
    68f2:	3f 4f       	sbci	r19, 0xFF	; 255
    68f4:	4f 4f       	sbci	r20, 0xFF	; 255
    68f6:	5f 4f       	sbci	r21, 0xFF	; 255

000068f8 <__divmodsi4_exit>:
    68f8:	08 95       	ret

000068fa <__negsi2>:
    68fa:	90 95       	com	r25
    68fc:	80 95       	com	r24
    68fe:	70 95       	com	r23
    6900:	61 95       	neg	r22
    6902:	7f 4f       	sbci	r23, 0xFF	; 255
    6904:	8f 4f       	sbci	r24, 0xFF	; 255
    6906:	9f 4f       	sbci	r25, 0xFF	; 255
    6908:	08 95       	ret

0000690a <__tablejump2__>:
    690a:	ee 0f       	add	r30, r30
    690c:	ff 1f       	adc	r31, r31
    690e:	88 1f       	adc	r24, r24
    6910:	8b bf       	out	0x3b, r24	; 59
    6912:	07 90       	elpm	r0, Z+
    6914:	f6 91       	elpm	r31, Z
    6916:	e0 2d       	mov	r30, r0
    6918:	1b be       	out	0x3b, r1	; 59
    691a:	19 94       	eijmp

0000691c <__umulhisi3>:
    691c:	a2 9f       	mul	r26, r18
    691e:	b0 01       	movw	r22, r0
    6920:	b3 9f       	mul	r27, r19
    6922:	c0 01       	movw	r24, r0
    6924:	a3 9f       	mul	r26, r19
    6926:	70 0d       	add	r23, r0
    6928:	81 1d       	adc	r24, r1
    692a:	11 24       	eor	r1, r1
    692c:	91 1d       	adc	r25, r1
    692e:	b2 9f       	mul	r27, r18
    6930:	70 0d       	add	r23, r0
    6932:	81 1d       	adc	r24, r1
    6934:	11 24       	eor	r1, r1
    6936:	91 1d       	adc	r25, r1
    6938:	08 95       	ret

0000693a <__usmulhisi3>:
    693a:	f0 df       	rcall	.-32     	; 0x691c <__umulhisi3>

0000693c <__usmulhisi3_tail>:
    693c:	b7 ff       	sbrs	r27, 7
    693e:	08 95       	ret
    6940:	82 1b       	sub	r24, r18
    6942:	93 0b       	sbc	r25, r19
    6944:	08 95       	ret

00006946 <__mulshisi3>:
    6946:	b7 ff       	sbrs	r27, 7
    6948:	b6 c0       	rjmp	.+364    	; 0x6ab6 <__muluhisi3>

0000694a <__mulohisi3>:
    694a:	b5 d0       	rcall	.+362    	; 0x6ab6 <__muluhisi3>
    694c:	82 1b       	sub	r24, r18
    694e:	93 0b       	sbc	r25, r19
    6950:	08 95       	ret

00006952 <__muldi3>:
    6952:	df 93       	push	r29
    6954:	cf 93       	push	r28
    6956:	1f 93       	push	r17
    6958:	0f 93       	push	r16
    695a:	9a 9d       	mul	r25, r10
    695c:	f0 2d       	mov	r31, r0
    695e:	21 9f       	mul	r18, r17
    6960:	f0 0d       	add	r31, r0
    6962:	8b 9d       	mul	r24, r11
    6964:	f0 0d       	add	r31, r0
    6966:	8a 9d       	mul	r24, r10
    6968:	e0 2d       	mov	r30, r0
    696a:	f1 0d       	add	r31, r1
    696c:	03 9f       	mul	r16, r19
    696e:	f0 0d       	add	r31, r0
    6970:	02 9f       	mul	r16, r18
    6972:	e0 0d       	add	r30, r0
    6974:	f1 1d       	adc	r31, r1
    6976:	4e 9d       	mul	r20, r14
    6978:	e0 0d       	add	r30, r0
    697a:	f1 1d       	adc	r31, r1
    697c:	5e 9d       	mul	r21, r14
    697e:	f0 0d       	add	r31, r0
    6980:	4f 9d       	mul	r20, r15
    6982:	f0 0d       	add	r31, r0
    6984:	7f 93       	push	r23
    6986:	6f 93       	push	r22
    6988:	bf 92       	push	r11
    698a:	af 92       	push	r10
    698c:	5f 93       	push	r21
    698e:	4f 93       	push	r20
    6990:	d5 01       	movw	r26, r10
    6992:	c4 df       	rcall	.-120    	; 0x691c <__umulhisi3>
    6994:	8b 01       	movw	r16, r22
    6996:	ac 01       	movw	r20, r24
    6998:	d7 01       	movw	r26, r14
    699a:	c0 df       	rcall	.-128    	; 0x691c <__umulhisi3>
    699c:	eb 01       	movw	r28, r22
    699e:	e8 0f       	add	r30, r24
    69a0:	f9 1f       	adc	r31, r25
    69a2:	d6 01       	movw	r26, r12
    69a4:	1f d0       	rcall	.+62     	; 0x69e4 <__muldi3_6>
    69a6:	2f 91       	pop	r18
    69a8:	3f 91       	pop	r19
    69aa:	d6 01       	movw	r26, r12
    69ac:	b7 df       	rcall	.-146    	; 0x691c <__umulhisi3>
    69ae:	c6 0f       	add	r28, r22
    69b0:	d7 1f       	adc	r29, r23
    69b2:	e8 1f       	adc	r30, r24
    69b4:	f9 1f       	adc	r31, r25
    69b6:	af 91       	pop	r26
    69b8:	bf 91       	pop	r27
    69ba:	14 d0       	rcall	.+40     	; 0x69e4 <__muldi3_6>
    69bc:	2f 91       	pop	r18
    69be:	3f 91       	pop	r19
    69c0:	ad df       	rcall	.-166    	; 0x691c <__umulhisi3>
    69c2:	c6 0f       	add	r28, r22
    69c4:	d7 1f       	adc	r29, r23
    69c6:	e8 1f       	adc	r30, r24
    69c8:	f9 1f       	adc	r31, r25
    69ca:	d6 01       	movw	r26, r12
    69cc:	a7 df       	rcall	.-178    	; 0x691c <__umulhisi3>
    69ce:	e6 0f       	add	r30, r22
    69d0:	f7 1f       	adc	r31, r23
    69d2:	98 01       	movw	r18, r16
    69d4:	be 01       	movw	r22, r28
    69d6:	cf 01       	movw	r24, r30
    69d8:	11 24       	eor	r1, r1
    69da:	0f 91       	pop	r16
    69dc:	1f 91       	pop	r17
    69de:	cf 91       	pop	r28
    69e0:	df 91       	pop	r29
    69e2:	08 95       	ret

000069e4 <__muldi3_6>:
    69e4:	9b df       	rcall	.-202    	; 0x691c <__umulhisi3>
    69e6:	46 0f       	add	r20, r22
    69e8:	57 1f       	adc	r21, r23
    69ea:	c8 1f       	adc	r28, r24
    69ec:	d9 1f       	adc	r29, r25
    69ee:	08 f4       	brcc	.+2      	; 0x69f2 <__muldi3_6+0xe>
    69f0:	31 96       	adiw	r30, 0x01	; 1
    69f2:	08 95       	ret

000069f4 <__ashldi3>:
    69f4:	0f 93       	push	r16
    69f6:	08 30       	cpi	r16, 0x08	; 8
    69f8:	90 f0       	brcs	.+36     	; 0x6a1e <__ashldi3+0x2a>
    69fa:	98 2f       	mov	r25, r24
    69fc:	87 2f       	mov	r24, r23
    69fe:	76 2f       	mov	r23, r22
    6a00:	65 2f       	mov	r22, r21
    6a02:	54 2f       	mov	r21, r20
    6a04:	43 2f       	mov	r20, r19
    6a06:	32 2f       	mov	r19, r18
    6a08:	22 27       	eor	r18, r18
    6a0a:	08 50       	subi	r16, 0x08	; 8
    6a0c:	f4 cf       	rjmp	.-24     	; 0x69f6 <__ashldi3+0x2>
    6a0e:	22 0f       	add	r18, r18
    6a10:	33 1f       	adc	r19, r19
    6a12:	44 1f       	adc	r20, r20
    6a14:	55 1f       	adc	r21, r21
    6a16:	66 1f       	adc	r22, r22
    6a18:	77 1f       	adc	r23, r23
    6a1a:	88 1f       	adc	r24, r24
    6a1c:	99 1f       	adc	r25, r25
    6a1e:	0a 95       	dec	r16
    6a20:	b2 f7       	brpl	.-20     	; 0x6a0e <__ashldi3+0x1a>
    6a22:	0f 91       	pop	r16
    6a24:	08 95       	ret

00006a26 <__ashrdi3>:
    6a26:	97 fb       	bst	r25, 7
    6a28:	10 f8       	bld	r1, 0

00006a2a <__lshrdi3>:
    6a2a:	16 94       	lsr	r1
    6a2c:	00 08       	sbc	r0, r0
    6a2e:	0f 93       	push	r16
    6a30:	08 30       	cpi	r16, 0x08	; 8
    6a32:	98 f0       	brcs	.+38     	; 0x6a5a <__lshrdi3+0x30>
    6a34:	08 50       	subi	r16, 0x08	; 8
    6a36:	23 2f       	mov	r18, r19
    6a38:	34 2f       	mov	r19, r20
    6a3a:	45 2f       	mov	r20, r21
    6a3c:	56 2f       	mov	r21, r22
    6a3e:	67 2f       	mov	r22, r23
    6a40:	78 2f       	mov	r23, r24
    6a42:	89 2f       	mov	r24, r25
    6a44:	90 2d       	mov	r25, r0
    6a46:	f4 cf       	rjmp	.-24     	; 0x6a30 <__lshrdi3+0x6>
    6a48:	05 94       	asr	r0
    6a4a:	97 95       	ror	r25
    6a4c:	87 95       	ror	r24
    6a4e:	77 95       	ror	r23
    6a50:	67 95       	ror	r22
    6a52:	57 95       	ror	r21
    6a54:	47 95       	ror	r20
    6a56:	37 95       	ror	r19
    6a58:	27 95       	ror	r18
    6a5a:	0a 95       	dec	r16
    6a5c:	aa f7       	brpl	.-22     	; 0x6a48 <__lshrdi3+0x1e>
    6a5e:	0f 91       	pop	r16
    6a60:	08 95       	ret

00006a62 <__adddi3>:
    6a62:	2a 0d       	add	r18, r10
    6a64:	3b 1d       	adc	r19, r11
    6a66:	4c 1d       	adc	r20, r12
    6a68:	5d 1d       	adc	r21, r13
    6a6a:	6e 1d       	adc	r22, r14
    6a6c:	7f 1d       	adc	r23, r15
    6a6e:	80 1f       	adc	r24, r16
    6a70:	91 1f       	adc	r25, r17
    6a72:	08 95       	ret

00006a74 <__adddi3_s8>:
    6a74:	00 24       	eor	r0, r0
    6a76:	a7 fd       	sbrc	r26, 7
    6a78:	00 94       	com	r0
    6a7a:	2a 0f       	add	r18, r26
    6a7c:	30 1d       	adc	r19, r0
    6a7e:	40 1d       	adc	r20, r0
    6a80:	50 1d       	adc	r21, r0
    6a82:	60 1d       	adc	r22, r0
    6a84:	70 1d       	adc	r23, r0
    6a86:	80 1d       	adc	r24, r0
    6a88:	90 1d       	adc	r25, r0
    6a8a:	08 95       	ret

00006a8c <__subdi3>:
    6a8c:	2a 19       	sub	r18, r10
    6a8e:	3b 09       	sbc	r19, r11
    6a90:	4c 09       	sbc	r20, r12
    6a92:	5d 09       	sbc	r21, r13
    6a94:	6e 09       	sbc	r22, r14
    6a96:	7f 09       	sbc	r23, r15
    6a98:	80 0b       	sbc	r24, r16
    6a9a:	91 0b       	sbc	r25, r17
    6a9c:	08 95       	ret

00006a9e <__cmpdi2_s8>:
    6a9e:	00 24       	eor	r0, r0
    6aa0:	a7 fd       	sbrc	r26, 7
    6aa2:	00 94       	com	r0
    6aa4:	2a 17       	cp	r18, r26
    6aa6:	30 05       	cpc	r19, r0
    6aa8:	40 05       	cpc	r20, r0
    6aaa:	50 05       	cpc	r21, r0
    6aac:	60 05       	cpc	r22, r0
    6aae:	70 05       	cpc	r23, r0
    6ab0:	80 05       	cpc	r24, r0
    6ab2:	90 05       	cpc	r25, r0
    6ab4:	08 95       	ret

00006ab6 <__muluhisi3>:
    6ab6:	32 df       	rcall	.-412    	; 0x691c <__umulhisi3>
    6ab8:	a5 9f       	mul	r26, r21
    6aba:	90 0d       	add	r25, r0
    6abc:	b4 9f       	mul	r27, r20
    6abe:	90 0d       	add	r25, r0
    6ac0:	a4 9f       	mul	r26, r20
    6ac2:	80 0d       	add	r24, r0
    6ac4:	91 1d       	adc	r25, r1
    6ac6:	11 24       	eor	r1, r1
    6ac8:	08 95       	ret

00006aca <__ftoa_engine>:
    6aca:	28 30       	cpi	r18, 0x08	; 8
    6acc:	08 f0       	brcs	.+2      	; 0x6ad0 <__ftoa_engine+0x6>
    6ace:	27 e0       	ldi	r18, 0x07	; 7
    6ad0:	33 27       	eor	r19, r19
    6ad2:	da 01       	movw	r26, r20
    6ad4:	99 0f       	add	r25, r25
    6ad6:	31 1d       	adc	r19, r1
    6ad8:	87 fd       	sbrc	r24, 7
    6ada:	91 60       	ori	r25, 0x01	; 1
    6adc:	00 96       	adiw	r24, 0x00	; 0
    6ade:	61 05       	cpc	r22, r1
    6ae0:	71 05       	cpc	r23, r1
    6ae2:	39 f4       	brne	.+14     	; 0x6af2 <__ftoa_engine+0x28>
    6ae4:	32 60       	ori	r19, 0x02	; 2
    6ae6:	2e 5f       	subi	r18, 0xFE	; 254
    6ae8:	3d 93       	st	X+, r19
    6aea:	30 e3       	ldi	r19, 0x30	; 48
    6aec:	2a 95       	dec	r18
    6aee:	e1 f7       	brne	.-8      	; 0x6ae8 <__ftoa_engine+0x1e>
    6af0:	08 95       	ret
    6af2:	9f 3f       	cpi	r25, 0xFF	; 255
    6af4:	30 f0       	brcs	.+12     	; 0x6b02 <__ftoa_engine+0x38>
    6af6:	80 38       	cpi	r24, 0x80	; 128
    6af8:	71 05       	cpc	r23, r1
    6afa:	61 05       	cpc	r22, r1
    6afc:	09 f0       	breq	.+2      	; 0x6b00 <__ftoa_engine+0x36>
    6afe:	3c 5f       	subi	r19, 0xFC	; 252
    6b00:	3c 5f       	subi	r19, 0xFC	; 252
    6b02:	3d 93       	st	X+, r19
    6b04:	91 30       	cpi	r25, 0x01	; 1
    6b06:	08 f0       	brcs	.+2      	; 0x6b0a <__ftoa_engine+0x40>
    6b08:	80 68       	ori	r24, 0x80	; 128
    6b0a:	91 1d       	adc	r25, r1
    6b0c:	df 93       	push	r29
    6b0e:	cf 93       	push	r28
    6b10:	1f 93       	push	r17
    6b12:	0f 93       	push	r16
    6b14:	ff 92       	push	r15
    6b16:	ef 92       	push	r14
    6b18:	19 2f       	mov	r17, r25
    6b1a:	98 7f       	andi	r25, 0xF8	; 248
    6b1c:	96 95       	lsr	r25
    6b1e:	e9 2f       	mov	r30, r25
    6b20:	96 95       	lsr	r25
    6b22:	96 95       	lsr	r25
    6b24:	e9 0f       	add	r30, r25
    6b26:	ff 27       	eor	r31, r31
    6b28:	e6 5f       	subi	r30, 0xF6	; 246
    6b2a:	fc 4f       	sbci	r31, 0xFC	; 252
    6b2c:	99 27       	eor	r25, r25
    6b2e:	33 27       	eor	r19, r19
    6b30:	ee 24       	eor	r14, r14
    6b32:	ff 24       	eor	r15, r15
    6b34:	a7 01       	movw	r20, r14
    6b36:	e7 01       	movw	r28, r14
    6b38:	05 90       	lpm	r0, Z+
    6b3a:	08 94       	sec
    6b3c:	07 94       	ror	r0
    6b3e:	28 f4       	brcc	.+10     	; 0x6b4a <__ftoa_engine+0x80>
    6b40:	36 0f       	add	r19, r22
    6b42:	e7 1e       	adc	r14, r23
    6b44:	f8 1e       	adc	r15, r24
    6b46:	49 1f       	adc	r20, r25
    6b48:	51 1d       	adc	r21, r1
    6b4a:	66 0f       	add	r22, r22
    6b4c:	77 1f       	adc	r23, r23
    6b4e:	88 1f       	adc	r24, r24
    6b50:	99 1f       	adc	r25, r25
    6b52:	06 94       	lsr	r0
    6b54:	a1 f7       	brne	.-24     	; 0x6b3e <__ftoa_engine+0x74>
    6b56:	05 90       	lpm	r0, Z+
    6b58:	07 94       	ror	r0
    6b5a:	28 f4       	brcc	.+10     	; 0x6b66 <__ftoa_engine+0x9c>
    6b5c:	e7 0e       	add	r14, r23
    6b5e:	f8 1e       	adc	r15, r24
    6b60:	49 1f       	adc	r20, r25
    6b62:	56 1f       	adc	r21, r22
    6b64:	c1 1d       	adc	r28, r1
    6b66:	77 0f       	add	r23, r23
    6b68:	88 1f       	adc	r24, r24
    6b6a:	99 1f       	adc	r25, r25
    6b6c:	66 1f       	adc	r22, r22
    6b6e:	06 94       	lsr	r0
    6b70:	a1 f7       	brne	.-24     	; 0x6b5a <__ftoa_engine+0x90>
    6b72:	05 90       	lpm	r0, Z+
    6b74:	07 94       	ror	r0
    6b76:	28 f4       	brcc	.+10     	; 0x6b82 <__ftoa_engine+0xb8>
    6b78:	f8 0e       	add	r15, r24
    6b7a:	49 1f       	adc	r20, r25
    6b7c:	56 1f       	adc	r21, r22
    6b7e:	c7 1f       	adc	r28, r23
    6b80:	d1 1d       	adc	r29, r1
    6b82:	88 0f       	add	r24, r24
    6b84:	99 1f       	adc	r25, r25
    6b86:	66 1f       	adc	r22, r22
    6b88:	77 1f       	adc	r23, r23
    6b8a:	06 94       	lsr	r0
    6b8c:	a1 f7       	brne	.-24     	; 0x6b76 <__ftoa_engine+0xac>
    6b8e:	05 90       	lpm	r0, Z+
    6b90:	07 94       	ror	r0
    6b92:	20 f4       	brcc	.+8      	; 0x6b9c <__ftoa_engine+0xd2>
    6b94:	49 0f       	add	r20, r25
    6b96:	56 1f       	adc	r21, r22
    6b98:	c7 1f       	adc	r28, r23
    6b9a:	d8 1f       	adc	r29, r24
    6b9c:	99 0f       	add	r25, r25
    6b9e:	66 1f       	adc	r22, r22
    6ba0:	77 1f       	adc	r23, r23
    6ba2:	88 1f       	adc	r24, r24
    6ba4:	06 94       	lsr	r0
    6ba6:	a9 f7       	brne	.-22     	; 0x6b92 <__ftoa_engine+0xc8>
    6ba8:	84 91       	lpm	r24, Z
    6baa:	10 95       	com	r17
    6bac:	17 70       	andi	r17, 0x07	; 7
    6bae:	41 f0       	breq	.+16     	; 0x6bc0 <__ftoa_engine+0xf6>
    6bb0:	d6 95       	lsr	r29
    6bb2:	c7 95       	ror	r28
    6bb4:	57 95       	ror	r21
    6bb6:	47 95       	ror	r20
    6bb8:	f7 94       	ror	r15
    6bba:	e7 94       	ror	r14
    6bbc:	1a 95       	dec	r17
    6bbe:	c1 f7       	brne	.-16     	; 0x6bb0 <__ftoa_engine+0xe6>
    6bc0:	e0 eb       	ldi	r30, 0xB0	; 176
    6bc2:	f2 e0       	ldi	r31, 0x02	; 2
    6bc4:	68 94       	set
    6bc6:	15 90       	lpm	r1, Z+
    6bc8:	15 91       	lpm	r17, Z+
    6bca:	35 91       	lpm	r19, Z+
    6bcc:	65 91       	lpm	r22, Z+
    6bce:	95 91       	lpm	r25, Z+
    6bd0:	05 90       	lpm	r0, Z+
    6bd2:	7f e2       	ldi	r23, 0x2F	; 47
    6bd4:	73 95       	inc	r23
    6bd6:	e1 18       	sub	r14, r1
    6bd8:	f1 0a       	sbc	r15, r17
    6bda:	43 0b       	sbc	r20, r19
    6bdc:	56 0b       	sbc	r21, r22
    6bde:	c9 0b       	sbc	r28, r25
    6be0:	d0 09       	sbc	r29, r0
    6be2:	c0 f7       	brcc	.-16     	; 0x6bd4 <__ftoa_engine+0x10a>
    6be4:	e1 0c       	add	r14, r1
    6be6:	f1 1e       	adc	r15, r17
    6be8:	43 1f       	adc	r20, r19
    6bea:	56 1f       	adc	r21, r22
    6bec:	c9 1f       	adc	r28, r25
    6bee:	d0 1d       	adc	r29, r0
    6bf0:	7e f4       	brtc	.+30     	; 0x6c10 <__ftoa_engine+0x146>
    6bf2:	70 33       	cpi	r23, 0x30	; 48
    6bf4:	11 f4       	brne	.+4      	; 0x6bfa <__ftoa_engine+0x130>
    6bf6:	8a 95       	dec	r24
    6bf8:	e6 cf       	rjmp	.-52     	; 0x6bc6 <__ftoa_engine+0xfc>
    6bfa:	e8 94       	clt
    6bfc:	01 50       	subi	r16, 0x01	; 1
    6bfe:	30 f0       	brcs	.+12     	; 0x6c0c <__ftoa_engine+0x142>
    6c00:	08 0f       	add	r16, r24
    6c02:	0a f4       	brpl	.+2      	; 0x6c06 <__ftoa_engine+0x13c>
    6c04:	00 27       	eor	r16, r16
    6c06:	02 17       	cp	r16, r18
    6c08:	08 f4       	brcc	.+2      	; 0x6c0c <__ftoa_engine+0x142>
    6c0a:	20 2f       	mov	r18, r16
    6c0c:	23 95       	inc	r18
    6c0e:	02 2f       	mov	r16, r18
    6c10:	7a 33       	cpi	r23, 0x3A	; 58
    6c12:	28 f0       	brcs	.+10     	; 0x6c1e <__ftoa_engine+0x154>
    6c14:	79 e3       	ldi	r23, 0x39	; 57
    6c16:	7d 93       	st	X+, r23
    6c18:	2a 95       	dec	r18
    6c1a:	e9 f7       	brne	.-6      	; 0x6c16 <__ftoa_engine+0x14c>
    6c1c:	10 c0       	rjmp	.+32     	; 0x6c3e <__ftoa_engine+0x174>
    6c1e:	7d 93       	st	X+, r23
    6c20:	2a 95       	dec	r18
    6c22:	89 f6       	brne	.-94     	; 0x6bc6 <__ftoa_engine+0xfc>
    6c24:	06 94       	lsr	r0
    6c26:	97 95       	ror	r25
    6c28:	67 95       	ror	r22
    6c2a:	37 95       	ror	r19
    6c2c:	17 95       	ror	r17
    6c2e:	17 94       	ror	r1
    6c30:	e1 18       	sub	r14, r1
    6c32:	f1 0a       	sbc	r15, r17
    6c34:	43 0b       	sbc	r20, r19
    6c36:	56 0b       	sbc	r21, r22
    6c38:	c9 0b       	sbc	r28, r25
    6c3a:	d0 09       	sbc	r29, r0
    6c3c:	98 f0       	brcs	.+38     	; 0x6c64 <__ftoa_engine+0x19a>
    6c3e:	23 95       	inc	r18
    6c40:	7e 91       	ld	r23, -X
    6c42:	73 95       	inc	r23
    6c44:	7a 33       	cpi	r23, 0x3A	; 58
    6c46:	08 f0       	brcs	.+2      	; 0x6c4a <__ftoa_engine+0x180>
    6c48:	70 e3       	ldi	r23, 0x30	; 48
    6c4a:	7c 93       	st	X, r23
    6c4c:	20 13       	cpse	r18, r16
    6c4e:	b8 f7       	brcc	.-18     	; 0x6c3e <__ftoa_engine+0x174>
    6c50:	7e 91       	ld	r23, -X
    6c52:	70 61       	ori	r23, 0x10	; 16
    6c54:	7d 93       	st	X+, r23
    6c56:	30 f0       	brcs	.+12     	; 0x6c64 <__ftoa_engine+0x19a>
    6c58:	83 95       	inc	r24
    6c5a:	71 e3       	ldi	r23, 0x31	; 49
    6c5c:	7d 93       	st	X+, r23
    6c5e:	70 e3       	ldi	r23, 0x30	; 48
    6c60:	2a 95       	dec	r18
    6c62:	e1 f7       	brne	.-8      	; 0x6c5c <__ftoa_engine+0x192>
    6c64:	11 24       	eor	r1, r1
    6c66:	ef 90       	pop	r14
    6c68:	ff 90       	pop	r15
    6c6a:	0f 91       	pop	r16
    6c6c:	1f 91       	pop	r17
    6c6e:	cf 91       	pop	r28
    6c70:	df 91       	pop	r29
    6c72:	99 27       	eor	r25, r25
    6c74:	87 fd       	sbrc	r24, 7
    6c76:	90 95       	com	r25
    6c78:	08 95       	ret

00006c7a <strnlen_P>:
    6c7a:	fc 01       	movw	r30, r24
    6c7c:	05 90       	lpm	r0, Z+
    6c7e:	61 50       	subi	r22, 0x01	; 1
    6c80:	70 40       	sbci	r23, 0x00	; 0
    6c82:	01 10       	cpse	r0, r1
    6c84:	d8 f7       	brcc	.-10     	; 0x6c7c <strnlen_P+0x2>
    6c86:	80 95       	com	r24
    6c88:	90 95       	com	r25
    6c8a:	8e 0f       	add	r24, r30
    6c8c:	9f 1f       	adc	r25, r31
    6c8e:	08 95       	ret

00006c90 <strnlen>:
    6c90:	fc 01       	movw	r30, r24
    6c92:	61 50       	subi	r22, 0x01	; 1
    6c94:	70 40       	sbci	r23, 0x00	; 0
    6c96:	01 90       	ld	r0, Z+
    6c98:	01 10       	cpse	r0, r1
    6c9a:	d8 f7       	brcc	.-10     	; 0x6c92 <strnlen+0x2>
    6c9c:	80 95       	com	r24
    6c9e:	90 95       	com	r25
    6ca0:	8e 0f       	add	r24, r30
    6ca2:	9f 1f       	adc	r25, r31
    6ca4:	08 95       	ret

00006ca6 <fdevopen>:
    6ca6:	0f 93       	push	r16
    6ca8:	1f 93       	push	r17
    6caa:	cf 93       	push	r28
    6cac:	df 93       	push	r29
    6cae:	00 97       	sbiw	r24, 0x00	; 0
    6cb0:	31 f4       	brne	.+12     	; 0x6cbe <fdevopen+0x18>
    6cb2:	61 15       	cp	r22, r1
    6cb4:	71 05       	cpc	r23, r1
    6cb6:	19 f4       	brne	.+6      	; 0x6cbe <fdevopen+0x18>
    6cb8:	80 e0       	ldi	r24, 0x00	; 0
    6cba:	90 e0       	ldi	r25, 0x00	; 0
    6cbc:	39 c0       	rjmp	.+114    	; 0x6d30 <fdevopen+0x8a>
    6cbe:	8b 01       	movw	r16, r22
    6cc0:	ec 01       	movw	r28, r24
    6cc2:	6e e0       	ldi	r22, 0x0E	; 14
    6cc4:	70 e0       	ldi	r23, 0x00	; 0
    6cc6:	81 e0       	ldi	r24, 0x01	; 1
    6cc8:	90 e0       	ldi	r25, 0x00	; 0
    6cca:	0c d1       	rcall	.+536    	; 0x6ee4 <calloc>
    6ccc:	fc 01       	movw	r30, r24
    6cce:	89 2b       	or	r24, r25
    6cd0:	99 f3       	breq	.-26     	; 0x6cb8 <fdevopen+0x12>
    6cd2:	80 e8       	ldi	r24, 0x80	; 128
    6cd4:	83 83       	std	Z+3, r24	; 0x03
    6cd6:	01 15       	cp	r16, r1
    6cd8:	11 05       	cpc	r17, r1
    6cda:	71 f0       	breq	.+28     	; 0x6cf8 <fdevopen+0x52>
    6cdc:	02 87       	std	Z+10, r16	; 0x0a
    6cde:	13 87       	std	Z+11, r17	; 0x0b
    6ce0:	81 e8       	ldi	r24, 0x81	; 129
    6ce2:	83 83       	std	Z+3, r24	; 0x03
    6ce4:	80 91 b9 24 	lds	r24, 0x24B9	; 0x8024b9 <__iob>
    6ce8:	90 91 ba 24 	lds	r25, 0x24BA	; 0x8024ba <__iob+0x1>
    6cec:	89 2b       	or	r24, r25
    6cee:	21 f4       	brne	.+8      	; 0x6cf8 <fdevopen+0x52>
    6cf0:	e0 93 b9 24 	sts	0x24B9, r30	; 0x8024b9 <__iob>
    6cf4:	f0 93 ba 24 	sts	0x24BA, r31	; 0x8024ba <__iob+0x1>
    6cf8:	20 97       	sbiw	r28, 0x00	; 0
    6cfa:	c9 f0       	breq	.+50     	; 0x6d2e <fdevopen+0x88>
    6cfc:	c0 87       	std	Z+8, r28	; 0x08
    6cfe:	d1 87       	std	Z+9, r29	; 0x09
    6d00:	83 81       	ldd	r24, Z+3	; 0x03
    6d02:	82 60       	ori	r24, 0x02	; 2
    6d04:	83 83       	std	Z+3, r24	; 0x03
    6d06:	80 91 bb 24 	lds	r24, 0x24BB	; 0x8024bb <__iob+0x2>
    6d0a:	90 91 bc 24 	lds	r25, 0x24BC	; 0x8024bc <__iob+0x3>
    6d0e:	89 2b       	or	r24, r25
    6d10:	71 f4       	brne	.+28     	; 0x6d2e <fdevopen+0x88>
    6d12:	e0 93 bb 24 	sts	0x24BB, r30	; 0x8024bb <__iob+0x2>
    6d16:	f0 93 bc 24 	sts	0x24BC, r31	; 0x8024bc <__iob+0x3>
    6d1a:	80 91 bd 24 	lds	r24, 0x24BD	; 0x8024bd <__iob+0x4>
    6d1e:	90 91 be 24 	lds	r25, 0x24BE	; 0x8024be <__iob+0x5>
    6d22:	89 2b       	or	r24, r25
    6d24:	21 f4       	brne	.+8      	; 0x6d2e <fdevopen+0x88>
    6d26:	e0 93 bd 24 	sts	0x24BD, r30	; 0x8024bd <__iob+0x4>
    6d2a:	f0 93 be 24 	sts	0x24BE, r31	; 0x8024be <__iob+0x5>
    6d2e:	cf 01       	movw	r24, r30
    6d30:	df 91       	pop	r29
    6d32:	cf 91       	pop	r28
    6d34:	1f 91       	pop	r17
    6d36:	0f 91       	pop	r16
    6d38:	08 95       	ret

00006d3a <fputc>:
    6d3a:	0f 93       	push	r16
    6d3c:	1f 93       	push	r17
    6d3e:	cf 93       	push	r28
    6d40:	df 93       	push	r29
    6d42:	fb 01       	movw	r30, r22
    6d44:	23 81       	ldd	r18, Z+3	; 0x03
    6d46:	21 fd       	sbrc	r18, 1
    6d48:	03 c0       	rjmp	.+6      	; 0x6d50 <fputc+0x16>
    6d4a:	8f ef       	ldi	r24, 0xFF	; 255
    6d4c:	9f ef       	ldi	r25, 0xFF	; 255
    6d4e:	2c c0       	rjmp	.+88     	; 0x6da8 <fputc+0x6e>
    6d50:	22 ff       	sbrs	r18, 2
    6d52:	16 c0       	rjmp	.+44     	; 0x6d80 <fputc+0x46>
    6d54:	46 81       	ldd	r20, Z+6	; 0x06
    6d56:	57 81       	ldd	r21, Z+7	; 0x07
    6d58:	24 81       	ldd	r18, Z+4	; 0x04
    6d5a:	35 81       	ldd	r19, Z+5	; 0x05
    6d5c:	42 17       	cp	r20, r18
    6d5e:	53 07       	cpc	r21, r19
    6d60:	44 f4       	brge	.+16     	; 0x6d72 <fputc+0x38>
    6d62:	a0 81       	ld	r26, Z
    6d64:	b1 81       	ldd	r27, Z+1	; 0x01
    6d66:	9d 01       	movw	r18, r26
    6d68:	2f 5f       	subi	r18, 0xFF	; 255
    6d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    6d6c:	20 83       	st	Z, r18
    6d6e:	31 83       	std	Z+1, r19	; 0x01
    6d70:	8c 93       	st	X, r24
    6d72:	26 81       	ldd	r18, Z+6	; 0x06
    6d74:	37 81       	ldd	r19, Z+7	; 0x07
    6d76:	2f 5f       	subi	r18, 0xFF	; 255
    6d78:	3f 4f       	sbci	r19, 0xFF	; 255
    6d7a:	26 83       	std	Z+6, r18	; 0x06
    6d7c:	37 83       	std	Z+7, r19	; 0x07
    6d7e:	14 c0       	rjmp	.+40     	; 0x6da8 <fputc+0x6e>
    6d80:	8b 01       	movw	r16, r22
    6d82:	ec 01       	movw	r28, r24
    6d84:	fb 01       	movw	r30, r22
    6d86:	00 84       	ldd	r0, Z+8	; 0x08
    6d88:	f1 85       	ldd	r31, Z+9	; 0x09
    6d8a:	e0 2d       	mov	r30, r0
    6d8c:	19 95       	eicall
    6d8e:	89 2b       	or	r24, r25
    6d90:	e1 f6       	brne	.-72     	; 0x6d4a <fputc+0x10>
    6d92:	d8 01       	movw	r26, r16
    6d94:	16 96       	adiw	r26, 0x06	; 6
    6d96:	8d 91       	ld	r24, X+
    6d98:	9c 91       	ld	r25, X
    6d9a:	17 97       	sbiw	r26, 0x07	; 7
    6d9c:	01 96       	adiw	r24, 0x01	; 1
    6d9e:	16 96       	adiw	r26, 0x06	; 6
    6da0:	8d 93       	st	X+, r24
    6da2:	9c 93       	st	X, r25
    6da4:	17 97       	sbiw	r26, 0x07	; 7
    6da6:	ce 01       	movw	r24, r28
    6da8:	df 91       	pop	r29
    6daa:	cf 91       	pop	r28
    6dac:	1f 91       	pop	r17
    6dae:	0f 91       	pop	r16
    6db0:	08 95       	ret

00006db2 <printf>:
    6db2:	cf 93       	push	r28
    6db4:	df 93       	push	r29
    6db6:	cd b7       	in	r28, 0x3d	; 61
    6db8:	de b7       	in	r29, 0x3e	; 62
    6dba:	ae 01       	movw	r20, r28
    6dbc:	4a 5f       	subi	r20, 0xFA	; 250
    6dbe:	5f 4f       	sbci	r21, 0xFF	; 255
    6dc0:	fa 01       	movw	r30, r20
    6dc2:	61 91       	ld	r22, Z+
    6dc4:	71 91       	ld	r23, Z+
    6dc6:	af 01       	movw	r20, r30
    6dc8:	80 91 bb 24 	lds	r24, 0x24BB	; 0x8024bb <__iob+0x2>
    6dcc:	90 91 bc 24 	lds	r25, 0x24BC	; 0x8024bc <__iob+0x3>
    6dd0:	c7 d9       	rcall	.-3186   	; 0x6160 <vfprintf>
    6dd2:	df 91       	pop	r29
    6dd4:	cf 91       	pop	r28
    6dd6:	08 95       	ret

00006dd8 <sprintf>:
    6dd8:	0f 93       	push	r16
    6dda:	1f 93       	push	r17
    6ddc:	cf 93       	push	r28
    6dde:	df 93       	push	r29
    6de0:	cd b7       	in	r28, 0x3d	; 61
    6de2:	de b7       	in	r29, 0x3e	; 62
    6de4:	2e 97       	sbiw	r28, 0x0e	; 14
    6de6:	cd bf       	out	0x3d, r28	; 61
    6de8:	de bf       	out	0x3e, r29	; 62
    6dea:	0e 89       	ldd	r16, Y+22	; 0x16
    6dec:	1f 89       	ldd	r17, Y+23	; 0x17
    6dee:	86 e0       	ldi	r24, 0x06	; 6
    6df0:	8c 83       	std	Y+4, r24	; 0x04
    6df2:	09 83       	std	Y+1, r16	; 0x01
    6df4:	1a 83       	std	Y+2, r17	; 0x02
    6df6:	8f ef       	ldi	r24, 0xFF	; 255
    6df8:	9f e7       	ldi	r25, 0x7F	; 127
    6dfa:	8d 83       	std	Y+5, r24	; 0x05
    6dfc:	9e 83       	std	Y+6, r25	; 0x06
    6dfe:	ae 01       	movw	r20, r28
    6e00:	46 5e       	subi	r20, 0xE6	; 230
    6e02:	5f 4f       	sbci	r21, 0xFF	; 255
    6e04:	68 8d       	ldd	r22, Y+24	; 0x18
    6e06:	79 8d       	ldd	r23, Y+25	; 0x19
    6e08:	ce 01       	movw	r24, r28
    6e0a:	01 96       	adiw	r24, 0x01	; 1
    6e0c:	a9 d9       	rcall	.-3246   	; 0x6160 <vfprintf>
    6e0e:	ef 81       	ldd	r30, Y+7	; 0x07
    6e10:	f8 85       	ldd	r31, Y+8	; 0x08
    6e12:	e0 0f       	add	r30, r16
    6e14:	f1 1f       	adc	r31, r17
    6e16:	10 82       	st	Z, r1
    6e18:	2e 96       	adiw	r28, 0x0e	; 14
    6e1a:	cd bf       	out	0x3d, r28	; 61
    6e1c:	de bf       	out	0x3e, r29	; 62
    6e1e:	df 91       	pop	r29
    6e20:	cf 91       	pop	r28
    6e22:	1f 91       	pop	r17
    6e24:	0f 91       	pop	r16
    6e26:	08 95       	ret

00006e28 <__ultoa_invert>:
    6e28:	fa 01       	movw	r30, r20
    6e2a:	aa 27       	eor	r26, r26
    6e2c:	28 30       	cpi	r18, 0x08	; 8
    6e2e:	51 f1       	breq	.+84     	; 0x6e84 <__ultoa_invert+0x5c>
    6e30:	20 31       	cpi	r18, 0x10	; 16
    6e32:	81 f1       	breq	.+96     	; 0x6e94 <__ultoa_invert+0x6c>
    6e34:	e8 94       	clt
    6e36:	6f 93       	push	r22
    6e38:	6e 7f       	andi	r22, 0xFE	; 254
    6e3a:	6e 5f       	subi	r22, 0xFE	; 254
    6e3c:	7f 4f       	sbci	r23, 0xFF	; 255
    6e3e:	8f 4f       	sbci	r24, 0xFF	; 255
    6e40:	9f 4f       	sbci	r25, 0xFF	; 255
    6e42:	af 4f       	sbci	r26, 0xFF	; 255
    6e44:	b1 e0       	ldi	r27, 0x01	; 1
    6e46:	3e d0       	rcall	.+124    	; 0x6ec4 <__ultoa_invert+0x9c>
    6e48:	b4 e0       	ldi	r27, 0x04	; 4
    6e4a:	3c d0       	rcall	.+120    	; 0x6ec4 <__ultoa_invert+0x9c>
    6e4c:	67 0f       	add	r22, r23
    6e4e:	78 1f       	adc	r23, r24
    6e50:	89 1f       	adc	r24, r25
    6e52:	9a 1f       	adc	r25, r26
    6e54:	a1 1d       	adc	r26, r1
    6e56:	68 0f       	add	r22, r24
    6e58:	79 1f       	adc	r23, r25
    6e5a:	8a 1f       	adc	r24, r26
    6e5c:	91 1d       	adc	r25, r1
    6e5e:	a1 1d       	adc	r26, r1
    6e60:	6a 0f       	add	r22, r26
    6e62:	71 1d       	adc	r23, r1
    6e64:	81 1d       	adc	r24, r1
    6e66:	91 1d       	adc	r25, r1
    6e68:	a1 1d       	adc	r26, r1
    6e6a:	20 d0       	rcall	.+64     	; 0x6eac <__ultoa_invert+0x84>
    6e6c:	09 f4       	brne	.+2      	; 0x6e70 <__ultoa_invert+0x48>
    6e6e:	68 94       	set
    6e70:	3f 91       	pop	r19
    6e72:	2a e0       	ldi	r18, 0x0A	; 10
    6e74:	26 9f       	mul	r18, r22
    6e76:	11 24       	eor	r1, r1
    6e78:	30 19       	sub	r19, r0
    6e7a:	30 5d       	subi	r19, 0xD0	; 208
    6e7c:	31 93       	st	Z+, r19
    6e7e:	de f6       	brtc	.-74     	; 0x6e36 <__ultoa_invert+0xe>
    6e80:	cf 01       	movw	r24, r30
    6e82:	08 95       	ret
    6e84:	46 2f       	mov	r20, r22
    6e86:	47 70       	andi	r20, 0x07	; 7
    6e88:	40 5d       	subi	r20, 0xD0	; 208
    6e8a:	41 93       	st	Z+, r20
    6e8c:	b3 e0       	ldi	r27, 0x03	; 3
    6e8e:	0f d0       	rcall	.+30     	; 0x6eae <__ultoa_invert+0x86>
    6e90:	c9 f7       	brne	.-14     	; 0x6e84 <__ultoa_invert+0x5c>
    6e92:	f6 cf       	rjmp	.-20     	; 0x6e80 <__ultoa_invert+0x58>
    6e94:	46 2f       	mov	r20, r22
    6e96:	4f 70       	andi	r20, 0x0F	; 15
    6e98:	40 5d       	subi	r20, 0xD0	; 208
    6e9a:	4a 33       	cpi	r20, 0x3A	; 58
    6e9c:	18 f0       	brcs	.+6      	; 0x6ea4 <__ultoa_invert+0x7c>
    6e9e:	49 5d       	subi	r20, 0xD9	; 217
    6ea0:	31 fd       	sbrc	r19, 1
    6ea2:	40 52       	subi	r20, 0x20	; 32
    6ea4:	41 93       	st	Z+, r20
    6ea6:	02 d0       	rcall	.+4      	; 0x6eac <__ultoa_invert+0x84>
    6ea8:	a9 f7       	brne	.-22     	; 0x6e94 <__ultoa_invert+0x6c>
    6eaa:	ea cf       	rjmp	.-44     	; 0x6e80 <__ultoa_invert+0x58>
    6eac:	b4 e0       	ldi	r27, 0x04	; 4
    6eae:	a6 95       	lsr	r26
    6eb0:	97 95       	ror	r25
    6eb2:	87 95       	ror	r24
    6eb4:	77 95       	ror	r23
    6eb6:	67 95       	ror	r22
    6eb8:	ba 95       	dec	r27
    6eba:	c9 f7       	brne	.-14     	; 0x6eae <__ultoa_invert+0x86>
    6ebc:	00 97       	sbiw	r24, 0x00	; 0
    6ebe:	61 05       	cpc	r22, r1
    6ec0:	71 05       	cpc	r23, r1
    6ec2:	08 95       	ret
    6ec4:	9b 01       	movw	r18, r22
    6ec6:	ac 01       	movw	r20, r24
    6ec8:	0a 2e       	mov	r0, r26
    6eca:	06 94       	lsr	r0
    6ecc:	57 95       	ror	r21
    6ece:	47 95       	ror	r20
    6ed0:	37 95       	ror	r19
    6ed2:	27 95       	ror	r18
    6ed4:	ba 95       	dec	r27
    6ed6:	c9 f7       	brne	.-14     	; 0x6eca <__ultoa_invert+0xa2>
    6ed8:	62 0f       	add	r22, r18
    6eda:	73 1f       	adc	r23, r19
    6edc:	84 1f       	adc	r24, r20
    6ede:	95 1f       	adc	r25, r21
    6ee0:	a0 1d       	adc	r26, r0
    6ee2:	08 95       	ret

00006ee4 <calloc>:
    6ee4:	0f 93       	push	r16
    6ee6:	1f 93       	push	r17
    6ee8:	cf 93       	push	r28
    6eea:	df 93       	push	r29
    6eec:	86 9f       	mul	r24, r22
    6eee:	80 01       	movw	r16, r0
    6ef0:	87 9f       	mul	r24, r23
    6ef2:	10 0d       	add	r17, r0
    6ef4:	96 9f       	mul	r25, r22
    6ef6:	10 0d       	add	r17, r0
    6ef8:	11 24       	eor	r1, r1
    6efa:	c8 01       	movw	r24, r16
    6efc:	0d d0       	rcall	.+26     	; 0x6f18 <malloc>
    6efe:	ec 01       	movw	r28, r24
    6f00:	00 97       	sbiw	r24, 0x00	; 0
    6f02:	21 f0       	breq	.+8      	; 0x6f0c <calloc+0x28>
    6f04:	a8 01       	movw	r20, r16
    6f06:	60 e0       	ldi	r22, 0x00	; 0
    6f08:	70 e0       	ldi	r23, 0x00	; 0
    6f0a:	27 d1       	rcall	.+590    	; 0x715a <memset>
    6f0c:	ce 01       	movw	r24, r28
    6f0e:	df 91       	pop	r29
    6f10:	cf 91       	pop	r28
    6f12:	1f 91       	pop	r17
    6f14:	0f 91       	pop	r16
    6f16:	08 95       	ret

00006f18 <malloc>:
    6f18:	0f 93       	push	r16
    6f1a:	1f 93       	push	r17
    6f1c:	cf 93       	push	r28
    6f1e:	df 93       	push	r29
    6f20:	82 30       	cpi	r24, 0x02	; 2
    6f22:	91 05       	cpc	r25, r1
    6f24:	10 f4       	brcc	.+4      	; 0x6f2a <malloc+0x12>
    6f26:	82 e0       	ldi	r24, 0x02	; 2
    6f28:	90 e0       	ldi	r25, 0x00	; 0
    6f2a:	e0 91 c1 24 	lds	r30, 0x24C1	; 0x8024c1 <__flp>
    6f2e:	f0 91 c2 24 	lds	r31, 0x24C2	; 0x8024c2 <__flp+0x1>
    6f32:	20 e0       	ldi	r18, 0x00	; 0
    6f34:	30 e0       	ldi	r19, 0x00	; 0
    6f36:	a0 e0       	ldi	r26, 0x00	; 0
    6f38:	b0 e0       	ldi	r27, 0x00	; 0
    6f3a:	30 97       	sbiw	r30, 0x00	; 0
    6f3c:	19 f1       	breq	.+70     	; 0x6f84 <malloc+0x6c>
    6f3e:	40 81       	ld	r20, Z
    6f40:	51 81       	ldd	r21, Z+1	; 0x01
    6f42:	02 81       	ldd	r16, Z+2	; 0x02
    6f44:	13 81       	ldd	r17, Z+3	; 0x03
    6f46:	48 17       	cp	r20, r24
    6f48:	59 07       	cpc	r21, r25
    6f4a:	c8 f0       	brcs	.+50     	; 0x6f7e <malloc+0x66>
    6f4c:	84 17       	cp	r24, r20
    6f4e:	95 07       	cpc	r25, r21
    6f50:	69 f4       	brne	.+26     	; 0x6f6c <malloc+0x54>
    6f52:	10 97       	sbiw	r26, 0x00	; 0
    6f54:	31 f0       	breq	.+12     	; 0x6f62 <malloc+0x4a>
    6f56:	12 96       	adiw	r26, 0x02	; 2
    6f58:	0c 93       	st	X, r16
    6f5a:	12 97       	sbiw	r26, 0x02	; 2
    6f5c:	13 96       	adiw	r26, 0x03	; 3
    6f5e:	1c 93       	st	X, r17
    6f60:	27 c0       	rjmp	.+78     	; 0x6fb0 <malloc+0x98>
    6f62:	00 93 c1 24 	sts	0x24C1, r16	; 0x8024c1 <__flp>
    6f66:	10 93 c2 24 	sts	0x24C2, r17	; 0x8024c2 <__flp+0x1>
    6f6a:	22 c0       	rjmp	.+68     	; 0x6fb0 <malloc+0x98>
    6f6c:	21 15       	cp	r18, r1
    6f6e:	31 05       	cpc	r19, r1
    6f70:	19 f0       	breq	.+6      	; 0x6f78 <malloc+0x60>
    6f72:	42 17       	cp	r20, r18
    6f74:	53 07       	cpc	r21, r19
    6f76:	18 f4       	brcc	.+6      	; 0x6f7e <malloc+0x66>
    6f78:	9a 01       	movw	r18, r20
    6f7a:	bd 01       	movw	r22, r26
    6f7c:	ef 01       	movw	r28, r30
    6f7e:	df 01       	movw	r26, r30
    6f80:	f8 01       	movw	r30, r16
    6f82:	db cf       	rjmp	.-74     	; 0x6f3a <malloc+0x22>
    6f84:	21 15       	cp	r18, r1
    6f86:	31 05       	cpc	r19, r1
    6f88:	f9 f0       	breq	.+62     	; 0x6fc8 <malloc+0xb0>
    6f8a:	28 1b       	sub	r18, r24
    6f8c:	39 0b       	sbc	r19, r25
    6f8e:	24 30       	cpi	r18, 0x04	; 4
    6f90:	31 05       	cpc	r19, r1
    6f92:	80 f4       	brcc	.+32     	; 0x6fb4 <malloc+0x9c>
    6f94:	8a 81       	ldd	r24, Y+2	; 0x02
    6f96:	9b 81       	ldd	r25, Y+3	; 0x03
    6f98:	61 15       	cp	r22, r1
    6f9a:	71 05       	cpc	r23, r1
    6f9c:	21 f0       	breq	.+8      	; 0x6fa6 <malloc+0x8e>
    6f9e:	fb 01       	movw	r30, r22
    6fa0:	82 83       	std	Z+2, r24	; 0x02
    6fa2:	93 83       	std	Z+3, r25	; 0x03
    6fa4:	04 c0       	rjmp	.+8      	; 0x6fae <malloc+0x96>
    6fa6:	80 93 c1 24 	sts	0x24C1, r24	; 0x8024c1 <__flp>
    6faa:	90 93 c2 24 	sts	0x24C2, r25	; 0x8024c2 <__flp+0x1>
    6fae:	fe 01       	movw	r30, r28
    6fb0:	32 96       	adiw	r30, 0x02	; 2
    6fb2:	44 c0       	rjmp	.+136    	; 0x703c <malloc+0x124>
    6fb4:	fe 01       	movw	r30, r28
    6fb6:	e2 0f       	add	r30, r18
    6fb8:	f3 1f       	adc	r31, r19
    6fba:	81 93       	st	Z+, r24
    6fbc:	91 93       	st	Z+, r25
    6fbe:	22 50       	subi	r18, 0x02	; 2
    6fc0:	31 09       	sbc	r19, r1
    6fc2:	28 83       	st	Y, r18
    6fc4:	39 83       	std	Y+1, r19	; 0x01
    6fc6:	3a c0       	rjmp	.+116    	; 0x703c <malloc+0x124>
    6fc8:	20 91 bf 24 	lds	r18, 0x24BF	; 0x8024bf <__brkval>
    6fcc:	30 91 c0 24 	lds	r19, 0x24C0	; 0x8024c0 <__brkval+0x1>
    6fd0:	23 2b       	or	r18, r19
    6fd2:	41 f4       	brne	.+16     	; 0x6fe4 <malloc+0xcc>
    6fd4:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    6fd8:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    6fdc:	20 93 bf 24 	sts	0x24BF, r18	; 0x8024bf <__brkval>
    6fe0:	30 93 c0 24 	sts	0x24C0, r19	; 0x8024c0 <__brkval+0x1>
    6fe4:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    6fe8:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    6fec:	21 15       	cp	r18, r1
    6fee:	31 05       	cpc	r19, r1
    6ff0:	41 f4       	brne	.+16     	; 0x7002 <malloc+0xea>
    6ff2:	2d b7       	in	r18, 0x3d	; 61
    6ff4:	3e b7       	in	r19, 0x3e	; 62
    6ff6:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    6ffa:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    6ffe:	24 1b       	sub	r18, r20
    7000:	35 0b       	sbc	r19, r21
    7002:	e0 91 bf 24 	lds	r30, 0x24BF	; 0x8024bf <__brkval>
    7006:	f0 91 c0 24 	lds	r31, 0x24C0	; 0x8024c0 <__brkval+0x1>
    700a:	e2 17       	cp	r30, r18
    700c:	f3 07       	cpc	r31, r19
    700e:	a0 f4       	brcc	.+40     	; 0x7038 <malloc+0x120>
    7010:	2e 1b       	sub	r18, r30
    7012:	3f 0b       	sbc	r19, r31
    7014:	28 17       	cp	r18, r24
    7016:	39 07       	cpc	r19, r25
    7018:	78 f0       	brcs	.+30     	; 0x7038 <malloc+0x120>
    701a:	ac 01       	movw	r20, r24
    701c:	4e 5f       	subi	r20, 0xFE	; 254
    701e:	5f 4f       	sbci	r21, 0xFF	; 255
    7020:	24 17       	cp	r18, r20
    7022:	35 07       	cpc	r19, r21
    7024:	48 f0       	brcs	.+18     	; 0x7038 <malloc+0x120>
    7026:	4e 0f       	add	r20, r30
    7028:	5f 1f       	adc	r21, r31
    702a:	40 93 bf 24 	sts	0x24BF, r20	; 0x8024bf <__brkval>
    702e:	50 93 c0 24 	sts	0x24C0, r21	; 0x8024c0 <__brkval+0x1>
    7032:	81 93       	st	Z+, r24
    7034:	91 93       	st	Z+, r25
    7036:	02 c0       	rjmp	.+4      	; 0x703c <malloc+0x124>
    7038:	e0 e0       	ldi	r30, 0x00	; 0
    703a:	f0 e0       	ldi	r31, 0x00	; 0
    703c:	cf 01       	movw	r24, r30
    703e:	df 91       	pop	r29
    7040:	cf 91       	pop	r28
    7042:	1f 91       	pop	r17
    7044:	0f 91       	pop	r16
    7046:	08 95       	ret

00007048 <free>:
    7048:	cf 93       	push	r28
    704a:	df 93       	push	r29
    704c:	00 97       	sbiw	r24, 0x00	; 0
    704e:	09 f4       	brne	.+2      	; 0x7052 <free+0xa>
    7050:	81 c0       	rjmp	.+258    	; 0x7154 <free+0x10c>
    7052:	fc 01       	movw	r30, r24
    7054:	32 97       	sbiw	r30, 0x02	; 2
    7056:	12 82       	std	Z+2, r1	; 0x02
    7058:	13 82       	std	Z+3, r1	; 0x03
    705a:	a0 91 c1 24 	lds	r26, 0x24C1	; 0x8024c1 <__flp>
    705e:	b0 91 c2 24 	lds	r27, 0x24C2	; 0x8024c2 <__flp+0x1>
    7062:	10 97       	sbiw	r26, 0x00	; 0
    7064:	81 f4       	brne	.+32     	; 0x7086 <free+0x3e>
    7066:	20 81       	ld	r18, Z
    7068:	31 81       	ldd	r19, Z+1	; 0x01
    706a:	82 0f       	add	r24, r18
    706c:	93 1f       	adc	r25, r19
    706e:	20 91 bf 24 	lds	r18, 0x24BF	; 0x8024bf <__brkval>
    7072:	30 91 c0 24 	lds	r19, 0x24C0	; 0x8024c0 <__brkval+0x1>
    7076:	28 17       	cp	r18, r24
    7078:	39 07       	cpc	r19, r25
    707a:	51 f5       	brne	.+84     	; 0x70d0 <free+0x88>
    707c:	e0 93 bf 24 	sts	0x24BF, r30	; 0x8024bf <__brkval>
    7080:	f0 93 c0 24 	sts	0x24C0, r31	; 0x8024c0 <__brkval+0x1>
    7084:	67 c0       	rjmp	.+206    	; 0x7154 <free+0x10c>
    7086:	ed 01       	movw	r28, r26
    7088:	20 e0       	ldi	r18, 0x00	; 0
    708a:	30 e0       	ldi	r19, 0x00	; 0
    708c:	ce 17       	cp	r28, r30
    708e:	df 07       	cpc	r29, r31
    7090:	40 f4       	brcc	.+16     	; 0x70a2 <free+0x5a>
    7092:	4a 81       	ldd	r20, Y+2	; 0x02
    7094:	5b 81       	ldd	r21, Y+3	; 0x03
    7096:	9e 01       	movw	r18, r28
    7098:	41 15       	cp	r20, r1
    709a:	51 05       	cpc	r21, r1
    709c:	f1 f0       	breq	.+60     	; 0x70da <free+0x92>
    709e:	ea 01       	movw	r28, r20
    70a0:	f5 cf       	rjmp	.-22     	; 0x708c <free+0x44>
    70a2:	c2 83       	std	Z+2, r28	; 0x02
    70a4:	d3 83       	std	Z+3, r29	; 0x03
    70a6:	40 81       	ld	r20, Z
    70a8:	51 81       	ldd	r21, Z+1	; 0x01
    70aa:	84 0f       	add	r24, r20
    70ac:	95 1f       	adc	r25, r21
    70ae:	c8 17       	cp	r28, r24
    70b0:	d9 07       	cpc	r29, r25
    70b2:	59 f4       	brne	.+22     	; 0x70ca <free+0x82>
    70b4:	88 81       	ld	r24, Y
    70b6:	99 81       	ldd	r25, Y+1	; 0x01
    70b8:	84 0f       	add	r24, r20
    70ba:	95 1f       	adc	r25, r21
    70bc:	02 96       	adiw	r24, 0x02	; 2
    70be:	80 83       	st	Z, r24
    70c0:	91 83       	std	Z+1, r25	; 0x01
    70c2:	8a 81       	ldd	r24, Y+2	; 0x02
    70c4:	9b 81       	ldd	r25, Y+3	; 0x03
    70c6:	82 83       	std	Z+2, r24	; 0x02
    70c8:	93 83       	std	Z+3, r25	; 0x03
    70ca:	21 15       	cp	r18, r1
    70cc:	31 05       	cpc	r19, r1
    70ce:	29 f4       	brne	.+10     	; 0x70da <free+0x92>
    70d0:	e0 93 c1 24 	sts	0x24C1, r30	; 0x8024c1 <__flp>
    70d4:	f0 93 c2 24 	sts	0x24C2, r31	; 0x8024c2 <__flp+0x1>
    70d8:	3d c0       	rjmp	.+122    	; 0x7154 <free+0x10c>
    70da:	e9 01       	movw	r28, r18
    70dc:	ea 83       	std	Y+2, r30	; 0x02
    70de:	fb 83       	std	Y+3, r31	; 0x03
    70e0:	49 91       	ld	r20, Y+
    70e2:	59 91       	ld	r21, Y+
    70e4:	c4 0f       	add	r28, r20
    70e6:	d5 1f       	adc	r29, r21
    70e8:	ec 17       	cp	r30, r28
    70ea:	fd 07       	cpc	r31, r29
    70ec:	61 f4       	brne	.+24     	; 0x7106 <free+0xbe>
    70ee:	80 81       	ld	r24, Z
    70f0:	91 81       	ldd	r25, Z+1	; 0x01
    70f2:	84 0f       	add	r24, r20
    70f4:	95 1f       	adc	r25, r21
    70f6:	02 96       	adiw	r24, 0x02	; 2
    70f8:	e9 01       	movw	r28, r18
    70fa:	88 83       	st	Y, r24
    70fc:	99 83       	std	Y+1, r25	; 0x01
    70fe:	82 81       	ldd	r24, Z+2	; 0x02
    7100:	93 81       	ldd	r25, Z+3	; 0x03
    7102:	8a 83       	std	Y+2, r24	; 0x02
    7104:	9b 83       	std	Y+3, r25	; 0x03
    7106:	e0 e0       	ldi	r30, 0x00	; 0
    7108:	f0 e0       	ldi	r31, 0x00	; 0
    710a:	12 96       	adiw	r26, 0x02	; 2
    710c:	8d 91       	ld	r24, X+
    710e:	9c 91       	ld	r25, X
    7110:	13 97       	sbiw	r26, 0x03	; 3
    7112:	00 97       	sbiw	r24, 0x00	; 0
    7114:	19 f0       	breq	.+6      	; 0x711c <free+0xd4>
    7116:	fd 01       	movw	r30, r26
    7118:	dc 01       	movw	r26, r24
    711a:	f7 cf       	rjmp	.-18     	; 0x710a <free+0xc2>
    711c:	8d 91       	ld	r24, X+
    711e:	9c 91       	ld	r25, X
    7120:	11 97       	sbiw	r26, 0x01	; 1
    7122:	9d 01       	movw	r18, r26
    7124:	2e 5f       	subi	r18, 0xFE	; 254
    7126:	3f 4f       	sbci	r19, 0xFF	; 255
    7128:	82 0f       	add	r24, r18
    712a:	93 1f       	adc	r25, r19
    712c:	20 91 bf 24 	lds	r18, 0x24BF	; 0x8024bf <__brkval>
    7130:	30 91 c0 24 	lds	r19, 0x24C0	; 0x8024c0 <__brkval+0x1>
    7134:	28 17       	cp	r18, r24
    7136:	39 07       	cpc	r19, r25
    7138:	69 f4       	brne	.+26     	; 0x7154 <free+0x10c>
    713a:	30 97       	sbiw	r30, 0x00	; 0
    713c:	29 f4       	brne	.+10     	; 0x7148 <free+0x100>
    713e:	10 92 c1 24 	sts	0x24C1, r1	; 0x8024c1 <__flp>
    7142:	10 92 c2 24 	sts	0x24C2, r1	; 0x8024c2 <__flp+0x1>
    7146:	02 c0       	rjmp	.+4      	; 0x714c <free+0x104>
    7148:	12 82       	std	Z+2, r1	; 0x02
    714a:	13 82       	std	Z+3, r1	; 0x03
    714c:	a0 93 bf 24 	sts	0x24BF, r26	; 0x8024bf <__brkval>
    7150:	b0 93 c0 24 	sts	0x24C0, r27	; 0x8024c0 <__brkval+0x1>
    7154:	df 91       	pop	r29
    7156:	cf 91       	pop	r28
    7158:	08 95       	ret

0000715a <memset>:
    715a:	dc 01       	movw	r26, r24
    715c:	01 c0       	rjmp	.+2      	; 0x7160 <memset+0x6>
    715e:	6d 93       	st	X+, r22
    7160:	41 50       	subi	r20, 0x01	; 1
    7162:	50 40       	sbci	r21, 0x00	; 0
    7164:	e0 f7       	brcc	.-8      	; 0x715e <memset+0x4>
    7166:	08 95       	ret

00007168 <_exit>:
    7168:	f8 94       	cli

0000716a <__stop_program>:
    716a:	ff cf       	rjmp	.-2      	; 0x716a <__stop_program>
