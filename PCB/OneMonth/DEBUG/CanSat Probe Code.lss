
CanSat Probe Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00802000  00003f1c  00003fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002e2  00802064  00802064  00004014  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004070  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000650  00000000  00000000  000040b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015225  00000000  00000000  00004700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006a28  00000000  00000000  00019925  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000c3d9  00000000  00000000  0002034d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001540  00000000  00000000  0002c728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000356eb  00000000  00000000  0002dc68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006819  00000000  00000000  00063353  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c0  00000000  00000000  00069b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000e241  00000000  00000000  0006a130  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bd c1       	rjmp	.+890    	; 0x37c <__ctors_end>
       2:	00 00       	nop
       4:	e1 c1       	rjmp	.+962    	; 0x3c8 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__vector_2>
       c:	dd c1       	rjmp	.+954    	; 0x3c8 <__bad_interrupt>
       e:	00 00       	nop
      10:	db c1       	rjmp	.+950    	; 0x3c8 <__bad_interrupt>
      12:	00 00       	nop
      14:	d9 c1       	rjmp	.+946    	; 0x3c8 <__bad_interrupt>
      16:	00 00       	nop
      18:	d7 c1       	rjmp	.+942    	; 0x3c8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d5 c1       	rjmp	.+938    	; 0x3c8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d3 c1       	rjmp	.+934    	; 0x3c8 <__bad_interrupt>
      22:	00 00       	nop
      24:	d1 c1       	rjmp	.+930    	; 0x3c8 <__bad_interrupt>
      26:	00 00       	nop
      28:	cf c1       	rjmp	.+926    	; 0x3c8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cd c1       	rjmp	.+922    	; 0x3c8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	cb c1       	rjmp	.+918    	; 0x3c8 <__bad_interrupt>
      32:	00 00       	nop
      34:	61 c2       	rjmp	.+1218   	; 0x4f8 <__vector_13>
      36:	00 00       	nop
      38:	0c 94 87 10 	jmp	0x210e	; 0x210e <__vector_14>
      3c:	c5 c1       	rjmp	.+906    	; 0x3c8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c3 c1       	rjmp	.+902    	; 0x3c8 <__bad_interrupt>
      42:	00 00       	nop
      44:	c1 c1       	rjmp	.+898    	; 0x3c8 <__bad_interrupt>
      46:	00 00       	nop
      48:	bf c1       	rjmp	.+894    	; 0x3c8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bd c1       	rjmp	.+890    	; 0x3c8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	bb c1       	rjmp	.+886    	; 0x3c8 <__bad_interrupt>
      52:	00 00       	nop
      54:	b9 c1       	rjmp	.+882    	; 0x3c8 <__bad_interrupt>
      56:	00 00       	nop
      58:	b7 c1       	rjmp	.+878    	; 0x3c8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b5 c1       	rjmp	.+874    	; 0x3c8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b3 c1       	rjmp	.+870    	; 0x3c8 <__bad_interrupt>
      62:	00 00       	nop
      64:	b1 c1       	rjmp	.+866    	; 0x3c8 <__bad_interrupt>
      66:	00 00       	nop
      68:	af c1       	rjmp	.+862    	; 0x3c8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ad c1       	rjmp	.+858    	; 0x3c8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	ab c1       	rjmp	.+854    	; 0x3c8 <__bad_interrupt>
      72:	00 00       	nop
      74:	a9 c1       	rjmp	.+850    	; 0x3c8 <__bad_interrupt>
      76:	00 00       	nop
      78:	a7 c1       	rjmp	.+846    	; 0x3c8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a5 c1       	rjmp	.+842    	; 0x3c8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a3 c1       	rjmp	.+838    	; 0x3c8 <__bad_interrupt>
      82:	00 00       	nop
      84:	a1 c1       	rjmp	.+834    	; 0x3c8 <__bad_interrupt>
      86:	00 00       	nop
      88:	9f c1       	rjmp	.+830    	; 0x3c8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9d c1       	rjmp	.+826    	; 0x3c8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9b c1       	rjmp	.+822    	; 0x3c8 <__bad_interrupt>
      92:	00 00       	nop
      94:	99 c1       	rjmp	.+818    	; 0x3c8 <__bad_interrupt>
      96:	00 00       	nop
      98:	97 c1       	rjmp	.+814    	; 0x3c8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c1 c5       	rjmp	.+2946   	; 0xc20 <__vector_39>
      9e:	00 00       	nop
      a0:	fc c5       	rjmp	.+3064   	; 0xc9a <__vector_40>
      a2:	00 00       	nop
      a4:	37 c6       	rjmp	.+3182   	; 0xd14 <__vector_41>
      a6:	00 00       	nop
      a8:	72 c6       	rjmp	.+3300   	; 0xd8e <__vector_42>
      aa:	00 00       	nop
      ac:	8d c1       	rjmp	.+794    	; 0x3c8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8b c1       	rjmp	.+790    	; 0x3c8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	89 c1       	rjmp	.+786    	; 0x3c8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	83 c2       	rjmp	.+1286   	; 0x5c0 <__vector_46>
      ba:	00 00       	nop
      bc:	85 c1       	rjmp	.+778    	; 0x3c8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	83 c1       	rjmp	.+774    	; 0x3c8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	81 c1       	rjmp	.+770    	; 0x3c8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7f c1       	rjmp	.+766    	; 0x3c8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7d c1       	rjmp	.+762    	; 0x3c8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7b c1       	rjmp	.+758    	; 0x3c8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	79 c1       	rjmp	.+754    	; 0x3c8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	77 c1       	rjmp	.+750    	; 0x3c8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	75 c1       	rjmp	.+746    	; 0x3c8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	73 c1       	rjmp	.+742    	; 0x3c8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	71 c1       	rjmp	.+738    	; 0x3c8 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	6f c1       	rjmp	.+734    	; 0x3c8 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	6d c1       	rjmp	.+730    	; 0x3c8 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	6b c1       	rjmp	.+726    	; 0x3c8 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	69 c1       	rjmp	.+722    	; 0x3c8 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	67 c1       	rjmp	.+718    	; 0x3c8 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	65 c1       	rjmp	.+714    	; 0x3c8 <__bad_interrupt>
      fe:	00 00       	nop
     100:	63 c1       	rjmp	.+710    	; 0x3c8 <__bad_interrupt>
     102:	00 00       	nop
     104:	61 c1       	rjmp	.+706    	; 0x3c8 <__bad_interrupt>
     106:	00 00       	nop
     108:	5f c1       	rjmp	.+702    	; 0x3c8 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	5d c1       	rjmp	.+698    	; 0x3c8 <__bad_interrupt>
     10e:	00 00       	nop
     110:	5b c1       	rjmp	.+694    	; 0x3c8 <__bad_interrupt>
     112:	00 00       	nop
     114:	59 c1       	rjmp	.+690    	; 0x3c8 <__bad_interrupt>
     116:	00 00       	nop
     118:	57 c1       	rjmp	.+686    	; 0x3c8 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8d c4       	rjmp	.+2330   	; 0xa38 <__vector_71>
     11e:	00 00       	nop
     120:	c8 c4       	rjmp	.+2448   	; 0xab2 <__vector_72>
     122:	00 00       	nop
     124:	03 c5       	rjmp	.+2566   	; 0xb2c <__vector_73>
     126:	00 00       	nop
     128:	3e c5       	rjmp	.+2684   	; 0xba6 <__vector_74>
     12a:	00 00       	nop
     12c:	4d c1       	rjmp	.+666    	; 0x3c8 <__bad_interrupt>
     12e:	00 00       	nop
     130:	15 c2       	rjmp	.+1066   	; 0x55c <__vector_76>
     132:	00 00       	nop
     134:	0c 94 9b 10 	jmp	0x2136	; 0x2136 <__vector_77>
     138:	47 c1       	rjmp	.+654    	; 0x3c8 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	45 c1       	rjmp	.+650    	; 0x3c8 <__bad_interrupt>
     13e:	00 00       	nop
     140:	43 c1       	rjmp	.+646    	; 0x3c8 <__bad_interrupt>
     142:	00 00       	nop
     144:	41 c1       	rjmp	.+642    	; 0x3c8 <__bad_interrupt>
     146:	00 00       	nop
     148:	3f c1       	rjmp	.+638    	; 0x3c8 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	3d c1       	rjmp	.+634    	; 0x3c8 <__bad_interrupt>
     14e:	00 00       	nop
     150:	3b c1       	rjmp	.+630    	; 0x3c8 <__bad_interrupt>
     152:	00 00       	nop
     154:	39 c1       	rjmp	.+626    	; 0x3c8 <__bad_interrupt>
     156:	00 00       	nop
     158:	37 c1       	rjmp	.+622    	; 0x3c8 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	35 c1       	rjmp	.+618    	; 0x3c8 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 1f 11 	jmp	0x223e	; 0x223e <__vector_88>
     164:	31 c1       	rjmp	.+610    	; 0x3c8 <__bad_interrupt>
     166:	00 00       	nop
     168:	2f c1       	rjmp	.+606    	; 0x3c8 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b8 c2       	rjmp	.+1392   	; 0x6de <__vector_91>
     16e:	00 00       	nop
     170:	2b c1       	rjmp	.+598    	; 0x3c8 <__bad_interrupt>
     172:	00 00       	nop
     174:	17 c3       	rjmp	.+1582   	; 0x7a4 <__vector_93>
     176:	00 00       	nop
     178:	27 c1       	rjmp	.+590    	; 0x3c8 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	25 c1       	rjmp	.+586    	; 0x3c8 <__bad_interrupt>
     17e:	00 00       	nop
     180:	23 c1       	rjmp	.+582    	; 0x3c8 <__bad_interrupt>
     182:	00 00       	nop
     184:	21 c1       	rjmp	.+578    	; 0x3c8 <__bad_interrupt>
     186:	00 00       	nop
     188:	1f c1       	rjmp	.+574    	; 0x3c8 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	1d c1       	rjmp	.+570    	; 0x3c8 <__bad_interrupt>
     18e:	00 00       	nop
     190:	1b c1       	rjmp	.+566    	; 0x3c8 <__bad_interrupt>
     192:	00 00       	nop
     194:	19 c1       	rjmp	.+562    	; 0x3c8 <__bad_interrupt>
     196:	00 00       	nop
     198:	17 c1       	rjmp	.+558    	; 0x3c8 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	15 c1       	rjmp	.+554    	; 0x3c8 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	13 c1       	rjmp	.+550    	; 0x3c8 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	11 c1       	rjmp	.+546    	; 0x3c8 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	0f c1       	rjmp	.+542    	; 0x3c8 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	3b c2       	rjmp	.+1142   	; 0x624 <__vector_107>
     1ae:	00 00       	nop
     1b0:	0b c1       	rjmp	.+534    	; 0x3c8 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	09 c1       	rjmp	.+530    	; 0x3c8 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	07 c1       	rjmp	.+526    	; 0x3c8 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	05 c1       	rjmp	.+522    	; 0x3c8 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	03 c1       	rjmp	.+518    	; 0x3c8 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	01 c1       	rjmp	.+514    	; 0x3c8 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	ff c0       	rjmp	.+510    	; 0x3c8 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	fd c0       	rjmp	.+506    	; 0x3c8 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	fb c0       	rjmp	.+502    	; 0x3c8 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	f9 c0       	rjmp	.+498    	; 0x3c8 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	f7 c0       	rjmp	.+494    	; 0x3c8 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	f5 c0       	rjmp	.+490    	; 0x3c8 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	f3 c0       	rjmp	.+486    	; 0x3c8 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	f1 c0       	rjmp	.+482    	; 0x3c8 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	ef c0       	rjmp	.+478    	; 0x3c8 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	ed c0       	rjmp	.+474    	; 0x3c8 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	eb c0       	rjmp	.+470    	; 0x3c8 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	e9 c0       	rjmp	.+466    	; 0x3c8 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	e7 c0       	rjmp	.+462    	; 0x3c8 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	51 11       	cpse	r21, r1
     1fe:	6e 11       	cpse	r22, r14
     200:	57 11       	cpse	r21, r7
     202:	5b 11       	cpse	r21, r11
     204:	5f 11       	cpse	r21, r15
     206:	65 11       	cpse	r22, r5
     208:	6e 11       	cpse	r22, r14
     20a:	69 11       	cpse	r22, r9
     20c:	6b 11       	cpse	r22, r11
     20e:	67 11       	cpse	r22, r7
     210:	6e 11       	cpse	r22, r14
     212:	6e 11       	cpse	r22, r14
     214:	6e 11       	cpse	r22, r14
     216:	6e 11       	cpse	r22, r14
     218:	6e 11       	cpse	r22, r14
     21a:	6e 11       	cpse	r22, r14
     21c:	6e 11       	cpse	r22, r14
     21e:	6e 11       	cpse	r22, r14
     220:	6e 11       	cpse	r22, r14
     222:	6e 11       	cpse	r22, r14
     224:	6e 11       	cpse	r22, r14
     226:	6e 11       	cpse	r22, r14
     228:	6e 11       	cpse	r22, r14
     22a:	6e 11       	cpse	r22, r14
     22c:	6e 11       	cpse	r22, r14
     22e:	6e 11       	cpse	r22, r14
     230:	6e 11       	cpse	r22, r14
     232:	6e 11       	cpse	r22, r14
     234:	6e 11       	cpse	r22, r14
     236:	6e 11       	cpse	r22, r14
     238:	6e 11       	cpse	r22, r14
     23a:	54 11       	cpse	r21, r4
     23c:	6e 11       	cpse	r22, r14
     23e:	6e 11       	cpse	r22, r14
     240:	6e 11       	cpse	r22, r14
     242:	6e 11       	cpse	r22, r14
     244:	6e 11       	cpse	r22, r14
     246:	6e 11       	cpse	r22, r14
     248:	6e 11       	cpse	r22, r14
     24a:	6e 11       	cpse	r22, r14
     24c:	6e 11       	cpse	r22, r14
     24e:	6e 11       	cpse	r22, r14
     250:	6e 11       	cpse	r22, r14
     252:	6e 11       	cpse	r22, r14
     254:	6e 11       	cpse	r22, r14
     256:	6e 11       	cpse	r22, r14
     258:	6e 11       	cpse	r22, r14
     25a:	6e 11       	cpse	r22, r14
     25c:	6e 11       	cpse	r22, r14
     25e:	6e 11       	cpse	r22, r14
     260:	6e 11       	cpse	r22, r14
     262:	6e 11       	cpse	r22, r14
     264:	6e 11       	cpse	r22, r14
     266:	6e 11       	cpse	r22, r14
     268:	6e 11       	cpse	r22, r14
     26a:	6e 11       	cpse	r22, r14
     26c:	6e 11       	cpse	r22, r14
     26e:	6e 11       	cpse	r22, r14
     270:	6e 11       	cpse	r22, r14
     272:	6e 11       	cpse	r22, r14
     274:	6e 11       	cpse	r22, r14
     276:	63 11       	cpse	r22, r3
     278:	6d 11       	cpse	r22, r13

0000027a <__trampolines_end>:
     27a:	6e 61       	ori	r22, 0x1E	; 30
     27c:	6e 00       	.word	0x006e	; ????

0000027e <__c.2332>:
     27e:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     28e:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     29e:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2ae:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2be:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2ce:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2de:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2ee:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2fe:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     30e:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     31e:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     32e:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     33e:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     34e:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     35e:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     36e:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000037c <__ctors_end>:
     37c:	11 24       	eor	r1, r1
     37e:	1f be       	out	0x3f, r1	; 63
     380:	cf ef       	ldi	r28, 0xFF	; 255
     382:	cd bf       	out	0x3d, r28	; 61
     384:	df e3       	ldi	r29, 0x3F	; 63
     386:	de bf       	out	0x3e, r29	; 62
     388:	00 e0       	ldi	r16, 0x00	; 0
     38a:	0c bf       	out	0x3c, r16	; 60
     38c:	18 be       	out	0x38, r1	; 56
     38e:	19 be       	out	0x39, r1	; 57
     390:	1a be       	out	0x3a, r1	; 58
     392:	1b be       	out	0x3b, r1	; 59

00000394 <__do_copy_data>:
     394:	10 e2       	ldi	r17, 0x20	; 32
     396:	a0 e0       	ldi	r26, 0x00	; 0
     398:	b0 e2       	ldi	r27, 0x20	; 32
     39a:	ec e1       	ldi	r30, 0x1C	; 28
     39c:	ff e3       	ldi	r31, 0x3F	; 63
     39e:	00 e0       	ldi	r16, 0x00	; 0
     3a0:	0b bf       	out	0x3b, r16	; 59
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <__do_copy_data+0x14>
     3a4:	07 90       	elpm	r0, Z+
     3a6:	0d 92       	st	X+, r0
     3a8:	a4 36       	cpi	r26, 0x64	; 100
     3aa:	b1 07       	cpc	r27, r17
     3ac:	d9 f7       	brne	.-10     	; 0x3a4 <__do_copy_data+0x10>
     3ae:	1b be       	out	0x3b, r1	; 59

000003b0 <__do_clear_bss>:
     3b0:	23 e2       	ldi	r18, 0x23	; 35
     3b2:	a4 e6       	ldi	r26, 0x64	; 100
     3b4:	b0 e2       	ldi	r27, 0x20	; 32
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <.do_clear_bss_start>

000003b8 <.do_clear_bss_loop>:
     3b8:	1d 92       	st	X+, r1

000003ba <.do_clear_bss_start>:
     3ba:	a6 34       	cpi	r26, 0x46	; 70
     3bc:	b2 07       	cpc	r27, r18
     3be:	e1 f7       	brne	.-8      	; 0x3b8 <.do_clear_bss_loop>
     3c0:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <main>
     3c4:	0c 94 8c 1f 	jmp	0x3f18	; 0x3f18 <_exit>

000003c8 <__bad_interrupt>:
     3c8:	1b ce       	rjmp	.-970    	; 0x0 <__vectors>

000003ca <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     3ce:	e0 91 64 20 	lds	r30, 0x2064	; 0x802064 <__data_end>
     3d2:	f0 91 65 20 	lds	r31, 0x2065	; 0x802065 <__data_end+0x1>
     3d6:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     3d8:	83 ff       	sbrs	r24, 3
     3da:	08 c0       	rjmp	.+16     	; 0x3ec <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     3dc:	88 60       	ori	r24, 0x08	; 8
     3de:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     3e4:	86 ef       	ldi	r24, 0xF6	; 246
     3e6:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <__data_end+0xa>
     3ea:	83 c0       	rjmp	.+262    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     3ec:	98 2f       	mov	r25, r24
     3ee:	94 71       	andi	r25, 0x14	; 20
     3f0:	31 f0       	breq	.+12     	; 0x3fe <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     3f2:	83 e0       	ldi	r24, 0x03	; 3
     3f4:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     3f6:	8f ef       	ldi	r24, 0xFF	; 255
     3f8:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <__data_end+0xa>
     3fc:	7a c0       	rjmp	.+244    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     3fe:	86 ff       	sbrs	r24, 6
     400:	43 c0       	rjmp	.+134    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     402:	c4 e6       	ldi	r28, 0x64	; 100
     404:	d0 e2       	ldi	r29, 0x20	; 32
     406:	aa 81       	ldd	r26, Y+2	; 0x02
     408:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     40a:	8c 81       	ldd	r24, Y+4	; 0x04
     40c:	9d 81       	ldd	r25, Y+5	; 0x05
     40e:	14 96       	adiw	r26, 0x04	; 4
     410:	2d 91       	ld	r18, X+
     412:	3c 91       	ld	r19, X
     414:	15 97       	sbiw	r26, 0x05	; 5
     416:	82 17       	cp	r24, r18
     418:	93 07       	cpc	r25, r19
     41a:	6c f4       	brge	.+26     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     41c:	9c 01       	movw	r18, r24
     41e:	2f 5f       	subi	r18, 0xFF	; 255
     420:	3f 4f       	sbci	r19, 0xFF	; 255
     422:	20 93 68 20 	sts	0x2068, r18	; 0x802068 <__data_end+0x4>
     426:	30 93 69 20 	sts	0x2069, r19	; 0x802069 <__data_end+0x5>
     42a:	a8 0f       	add	r26, r24
     42c:	b9 1f       	adc	r27, r25
     42e:	11 96       	adiw	r26, 0x01	; 1
     430:	8c 91       	ld	r24, X
     432:	87 83       	std	Z+7, r24	; 0x07
     434:	5e c0       	rjmp	.+188    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>

	} else if (transfer.data_count < pkg->length) {
     436:	80 91 6a 20 	lds	r24, 0x206A	; 0x80206a <__data_end+0x6>
     43a:	90 91 6b 20 	lds	r25, 0x206B	; 0x80206b <__data_end+0x7>
     43e:	18 96       	adiw	r26, 0x08	; 8
     440:	2d 91       	ld	r18, X+
     442:	3c 91       	ld	r19, X
     444:	19 97       	sbiw	r26, 0x09	; 9
     446:	82 17       	cp	r24, r18
     448:	93 07       	cpc	r25, r19
     44a:	c8 f4       	brcc	.+50     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>

		if (transfer.read) {
     44c:	20 91 6c 20 	lds	r18, 0x206C	; 0x80206c <__data_end+0x8>
     450:	22 23       	and	r18, r18
     452:	21 f0       	breq	.+8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     454:	86 81       	ldd	r24, Z+6	; 0x06
     456:	81 60       	ori	r24, 0x01	; 1
     458:	86 83       	std	Z+6, r24	; 0x06
     45a:	4b c0       	rjmp	.+150    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>

		} else {
			const uint8_t * const data = pkg->buffer;
     45c:	16 96       	adiw	r26, 0x06	; 6
     45e:	2d 91       	ld	r18, X+
     460:	3c 91       	ld	r19, X
     462:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     464:	ac 01       	movw	r20, r24
     466:	4f 5f       	subi	r20, 0xFF	; 255
     468:	5f 4f       	sbci	r21, 0xFF	; 255
     46a:	40 93 6a 20 	sts	0x206A, r20	; 0x80206a <__data_end+0x6>
     46e:	50 93 6b 20 	sts	0x206B, r21	; 0x80206b <__data_end+0x7>
     472:	d9 01       	movw	r26, r18
     474:	a8 0f       	add	r26, r24
     476:	b9 1f       	adc	r27, r25
     478:	8c 91       	ld	r24, X
     47a:	87 83       	std	Z+7, r24	; 0x07
     47c:	3a c0       	rjmp	.+116    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     47e:	83 e0       	ldi	r24, 0x03	; 3
     480:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     482:	10 92 6e 20 	sts	0x206E, r1	; 0x80206e <__data_end+0xa>
     486:	35 c0       	rjmp	.+106    	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     488:	88 23       	and	r24, r24
     48a:	84 f5       	brge	.+96     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     48c:	a4 e6       	ldi	r26, 0x64	; 100
     48e:	b0 e2       	ldi	r27, 0x20	; 32
     490:	12 96       	adiw	r26, 0x02	; 2
     492:	cd 91       	ld	r28, X+
     494:	dc 91       	ld	r29, X
     496:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     498:	16 96       	adiw	r26, 0x06	; 6
     49a:	8d 91       	ld	r24, X+
     49c:	9c 91       	ld	r25, X
     49e:	17 97       	sbiw	r26, 0x07	; 7
     4a0:	28 85       	ldd	r18, Y+8	; 0x08
     4a2:	39 85       	ldd	r19, Y+9	; 0x09
     4a4:	82 17       	cp	r24, r18
     4a6:	93 07       	cpc	r25, r19
     4a8:	d8 f4       	brcc	.+54     	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>

		uint8_t * const data = pkg->buffer;
     4aa:	6e 81       	ldd	r22, Y+6	; 0x06
     4ac:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     4ae:	9c 01       	movw	r18, r24
     4b0:	2f 5f       	subi	r18, 0xFF	; 255
     4b2:	3f 4f       	sbci	r19, 0xFF	; 255
     4b4:	20 93 6a 20 	sts	0x206A, r18	; 0x80206a <__data_end+0x6>
     4b8:	30 93 6b 20 	sts	0x206B, r19	; 0x80206b <__data_end+0x7>
     4bc:	47 81       	ldd	r20, Z+7	; 0x07
     4be:	db 01       	movw	r26, r22
     4c0:	a8 0f       	add	r26, r24
     4c2:	b9 1f       	adc	r27, r25
     4c4:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     4c6:	88 85       	ldd	r24, Y+8	; 0x08
     4c8:	99 85       	ldd	r25, Y+9	; 0x09
     4ca:	28 17       	cp	r18, r24
     4cc:	39 07       	cpc	r19, r25
     4ce:	18 f4       	brcc	.+6      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     4d0:	82 e0       	ldi	r24, 0x02	; 2
     4d2:	83 83       	std	Z+3, r24	; 0x03
     4d4:	0e c0       	rjmp	.+28     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     4d6:	87 e0       	ldi	r24, 0x07	; 7
     4d8:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     4da:	10 92 6e 20 	sts	0x206E, r1	; 0x80206e <__data_end+0xa>
     4de:	09 c0       	rjmp	.+18     	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     4e4:	89 ef       	ldi	r24, 0xF9	; 249
     4e6:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <__data_end+0xa>
     4ea:	03 c0       	rjmp	.+6      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     4ec:	8b ef       	ldi	r24, 0xFB	; 251
     4ee:	80 93 6e 20 	sts	0x206E, r24	; 0x80206e <__data_end+0xa>
	}
}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     4f8:	1f 92       	push	r1
     4fa:	0f 92       	push	r0
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	0f 92       	push	r0
     500:	11 24       	eor	r1, r1
     502:	08 b6       	in	r0, 0x38	; 56
     504:	0f 92       	push	r0
     506:	18 be       	out	0x38, r1	; 56
     508:	09 b6       	in	r0, 0x39	; 57
     50a:	0f 92       	push	r0
     50c:	19 be       	out	0x39, r1	; 57
     50e:	0b b6       	in	r0, 0x3b	; 59
     510:	0f 92       	push	r0
     512:	1b be       	out	0x3b, r1	; 59
     514:	2f 93       	push	r18
     516:	3f 93       	push	r19
     518:	4f 93       	push	r20
     51a:	5f 93       	push	r21
     51c:	6f 93       	push	r22
     51e:	7f 93       	push	r23
     520:	8f 93       	push	r24
     522:	9f 93       	push	r25
     524:	af 93       	push	r26
     526:	bf 93       	push	r27
     528:	ef 93       	push	r30
     52a:	ff 93       	push	r31
     52c:	4e df       	rcall	.-356    	; 0x3ca <twim_interrupt_handler>
     52e:	ff 91       	pop	r31
     530:	ef 91       	pop	r30
     532:	bf 91       	pop	r27
     534:	af 91       	pop	r26
     536:	9f 91       	pop	r25
     538:	8f 91       	pop	r24
     53a:	7f 91       	pop	r23
     53c:	6f 91       	pop	r22
     53e:	5f 91       	pop	r21
     540:	4f 91       	pop	r20
     542:	3f 91       	pop	r19
     544:	2f 91       	pop	r18
     546:	0f 90       	pop	r0
     548:	0b be       	out	0x3b, r0	; 59
     54a:	0f 90       	pop	r0
     54c:	09 be       	out	0x39, r0	; 57
     54e:	0f 90       	pop	r0
     550:	08 be       	out	0x38, r0	; 56
     552:	0f 90       	pop	r0
     554:	0f be       	out	0x3f, r0	; 63
     556:	0f 90       	pop	r0
     558:	1f 90       	pop	r1
     55a:	18 95       	reti

0000055c <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     55c:	1f 92       	push	r1
     55e:	0f 92       	push	r0
     560:	0f b6       	in	r0, 0x3f	; 63
     562:	0f 92       	push	r0
     564:	11 24       	eor	r1, r1
     566:	08 b6       	in	r0, 0x38	; 56
     568:	0f 92       	push	r0
     56a:	18 be       	out	0x38, r1	; 56
     56c:	09 b6       	in	r0, 0x39	; 57
     56e:	0f 92       	push	r0
     570:	19 be       	out	0x39, r1	; 57
     572:	0b b6       	in	r0, 0x3b	; 59
     574:	0f 92       	push	r0
     576:	1b be       	out	0x3b, r1	; 59
     578:	2f 93       	push	r18
     57a:	3f 93       	push	r19
     57c:	4f 93       	push	r20
     57e:	5f 93       	push	r21
     580:	6f 93       	push	r22
     582:	7f 93       	push	r23
     584:	8f 93       	push	r24
     586:	9f 93       	push	r25
     588:	af 93       	push	r26
     58a:	bf 93       	push	r27
     58c:	ef 93       	push	r30
     58e:	ff 93       	push	r31
     590:	1c df       	rcall	.-456    	; 0x3ca <twim_interrupt_handler>
     592:	ff 91       	pop	r31
     594:	ef 91       	pop	r30
     596:	bf 91       	pop	r27
     598:	af 91       	pop	r26
     59a:	9f 91       	pop	r25
     59c:	8f 91       	pop	r24
     59e:	7f 91       	pop	r23
     5a0:	6f 91       	pop	r22
     5a2:	5f 91       	pop	r21
     5a4:	4f 91       	pop	r20
     5a6:	3f 91       	pop	r19
     5a8:	2f 91       	pop	r18
     5aa:	0f 90       	pop	r0
     5ac:	0b be       	out	0x3b, r0	; 59
     5ae:	0f 90       	pop	r0
     5b0:	09 be       	out	0x39, r0	; 57
     5b2:	0f 90       	pop	r0
     5b4:	08 be       	out	0x38, r0	; 56
     5b6:	0f 90       	pop	r0
     5b8:	0f be       	out	0x3f, r0	; 63
     5ba:	0f 90       	pop	r0
     5bc:	1f 90       	pop	r1
     5be:	18 95       	reti

000005c0 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     5c0:	1f 92       	push	r1
     5c2:	0f 92       	push	r0
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	0f 92       	push	r0
     5c8:	11 24       	eor	r1, r1
     5ca:	08 b6       	in	r0, 0x38	; 56
     5cc:	0f 92       	push	r0
     5ce:	18 be       	out	0x38, r1	; 56
     5d0:	09 b6       	in	r0, 0x39	; 57
     5d2:	0f 92       	push	r0
     5d4:	19 be       	out	0x39, r1	; 57
     5d6:	0b b6       	in	r0, 0x3b	; 59
     5d8:	0f 92       	push	r0
     5da:	1b be       	out	0x3b, r1	; 59
     5dc:	2f 93       	push	r18
     5de:	3f 93       	push	r19
     5e0:	4f 93       	push	r20
     5e2:	5f 93       	push	r21
     5e4:	6f 93       	push	r22
     5e6:	7f 93       	push	r23
     5e8:	8f 93       	push	r24
     5ea:	9f 93       	push	r25
     5ec:	af 93       	push	r26
     5ee:	bf 93       	push	r27
     5f0:	ef 93       	push	r30
     5f2:	ff 93       	push	r31
     5f4:	ea de       	rcall	.-556    	; 0x3ca <twim_interrupt_handler>
     5f6:	ff 91       	pop	r31
     5f8:	ef 91       	pop	r30
     5fa:	bf 91       	pop	r27
     5fc:	af 91       	pop	r26
     5fe:	9f 91       	pop	r25
     600:	8f 91       	pop	r24
     602:	7f 91       	pop	r23
     604:	6f 91       	pop	r22
     606:	5f 91       	pop	r21
     608:	4f 91       	pop	r20
     60a:	3f 91       	pop	r19
     60c:	2f 91       	pop	r18
     60e:	0f 90       	pop	r0
     610:	0b be       	out	0x3b, r0	; 59
     612:	0f 90       	pop	r0
     614:	09 be       	out	0x39, r0	; 57
     616:	0f 90       	pop	r0
     618:	08 be       	out	0x38, r0	; 56
     61a:	0f 90       	pop	r0
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	0f 90       	pop	r0
     620:	1f 90       	pop	r1
     622:	18 95       	reti

00000624 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     624:	1f 92       	push	r1
     626:	0f 92       	push	r0
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	0f 92       	push	r0
     62c:	11 24       	eor	r1, r1
     62e:	08 b6       	in	r0, 0x38	; 56
     630:	0f 92       	push	r0
     632:	18 be       	out	0x38, r1	; 56
     634:	09 b6       	in	r0, 0x39	; 57
     636:	0f 92       	push	r0
     638:	19 be       	out	0x39, r1	; 57
     63a:	0b b6       	in	r0, 0x3b	; 59
     63c:	0f 92       	push	r0
     63e:	1b be       	out	0x3b, r1	; 59
     640:	2f 93       	push	r18
     642:	3f 93       	push	r19
     644:	4f 93       	push	r20
     646:	5f 93       	push	r21
     648:	6f 93       	push	r22
     64a:	7f 93       	push	r23
     64c:	8f 93       	push	r24
     64e:	9f 93       	push	r25
     650:	af 93       	push	r26
     652:	bf 93       	push	r27
     654:	ef 93       	push	r30
     656:	ff 93       	push	r31
     658:	b8 de       	rcall	.-656    	; 0x3ca <twim_interrupt_handler>
     65a:	ff 91       	pop	r31
     65c:	ef 91       	pop	r30
     65e:	bf 91       	pop	r27
     660:	af 91       	pop	r26
     662:	9f 91       	pop	r25
     664:	8f 91       	pop	r24
     666:	7f 91       	pop	r23
     668:	6f 91       	pop	r22
     66a:	5f 91       	pop	r21
     66c:	4f 91       	pop	r20
     66e:	3f 91       	pop	r19
     670:	2f 91       	pop	r18
     672:	0f 90       	pop	r0
     674:	0b be       	out	0x3b, r0	; 59
     676:	0f 90       	pop	r0
     678:	09 be       	out	0x39, r0	; 57
     67a:	0f 90       	pop	r0
     67c:	08 be       	out	0x38, r0	; 56
     67e:	0f 90       	pop	r0
     680:	0f be       	out	0x3f, r0	; 63
     682:	0f 90       	pop	r0
     684:	1f 90       	pop	r1
     686:	18 95       	reti

00000688 <wdt_reset_mcu>:
uint8_t temp;
	/*
	 * WDT enabled (minimum timeout period for max. security)
	 */
	temp = WDT_PER_8CLK_gc | (1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     688:	63 e0       	ldi	r22, 0x03	; 3
     68a:	80 e8       	ldi	r24, 0x80	; 128
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	bc d3       	rcall	.+1912   	; 0xe08 <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
     690:	e0 e8       	ldi	r30, 0x80	; 128
     692:	f0 e0       	ldi	r31, 0x00	; 0
     694:	82 81       	ldd	r24, Z+2	; 0x02
     696:	80 fd       	sbrc	r24, 0
     698:	fd cf       	rjmp	.-6      	; 0x694 <wdt_reset_mcu+0xc>
	wdt_wait_while_busy();
	/*
	 * WDT enabled (maximum window period for max. security)
	 */
	temp = WDT_WPER_8KCLK_gc | (1 << WDT_WEN_bp) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
     69a:	6b e2       	ldi	r22, 0x2B	; 43
     69c:	81 e8       	ldi	r24, 0x81	; 129
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	b3 d3       	rcall	.+1894   	; 0xe08 <ccp_write_io>
     6a2:	e0 e8       	ldi	r30, 0x80	; 128
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	82 81       	ldd	r24, Z+2	; 0x02
     6a8:	80 fd       	sbrc	r24, 0
     6aa:	fd cf       	rjmp	.-6      	; 0x6a6 <wdt_reset_mcu+0x1e>
	wdt_wait_while_busy();
	/*
	 * WDT Reset during window => WDT generates an Hard Reset.
	 */
	wdt_reset();
     6ac:	a8 95       	wdr
     6ae:	ff cf       	rjmp	.-2      	; 0x6ae <wdt_reset_mcu+0x26>

000006b0 <init_gps_interrupts>:
{
	/*	This function will be called once to set up the XBee port for sending/receiving interrupts
		It should not enable interrupts globally, just for receiving and sending on this one port
	*/
//	printf("y u no work");
	GPS_USART.CTRLA = 0b00010100; //RXint low-level, TXint low-level, DREint off;
     6b0:	84 e1       	ldi	r24, 0x14	; 20
     6b2:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
	gpgga_index = 0;
     6b6:	10 92 1e 23 	sts	0x231E, r1	; 0x80231e <gpgga_index>
	uint8_t dollar_counter = 0;
	uint8_t current_sentence = SENTENCE_NONE;
	last_finished = SENTENCE_NONE;
     6ba:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <last_finished>
     6be:	08 95       	ret

000006c0 <init_gps_buffers>:
}

void init_gps_buffers(void)
/* Don't use the buffers before calling this. Please. It's kind of important. */
{
	rbu8_init(&gps_receive_buffer, RAW_gps_receive_buffer, GPS_RECEIVE_BUFFER_SIZE);
     6c0:	40 e0       	ldi	r20, 0x00	; 0
     6c2:	51 e0       	ldi	r21, 0x01	; 1
     6c4:	61 e8       	ldi	r22, 0x81	; 129
     6c6:	71 e2       	ldi	r23, 0x21	; 33
     6c8:	81 e2       	ldi	r24, 0x21	; 33
     6ca:	91 e2       	ldi	r25, 0x21	; 33
     6cc:	a8 d0       	rcall	.+336    	; 0x81e <rbu8_init>
	rbu8_init(&gps_send_buffer, RAW_gps_send_buffer, GPS_TRANSMIT_BUFFER_SIZE);
     6ce:	40 e4       	ldi	r20, 0x40	; 64
     6d0:	50 e0       	ldi	r21, 0x00	; 0
     6d2:	61 e8       	ldi	r22, 0x81	; 129
     6d4:	72 e2       	ldi	r23, 0x22	; 34
     6d6:	81 ec       	ldi	r24, 0xC1	; 193
     6d8:	92 e2       	ldi	r25, 0x22	; 34
     6da:	a1 c0       	rjmp	.+322    	; 0x81e <rbu8_init>
     6dc:	08 95       	ret

000006de <__vector_91>:
}

ISR (GPS_RECEIVE_INTERRUPT_VECTOR)
{
     6de:	1f 92       	push	r1
     6e0:	0f 92       	push	r0
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	0f 92       	push	r0
     6e6:	11 24       	eor	r1, r1
     6e8:	08 b6       	in	r0, 0x38	; 56
     6ea:	0f 92       	push	r0
     6ec:	18 be       	out	0x38, r1	; 56
     6ee:	09 b6       	in	r0, 0x39	; 57
     6f0:	0f 92       	push	r0
     6f2:	19 be       	out	0x39, r1	; 57
     6f4:	0b b6       	in	r0, 0x3b	; 59
     6f6:	0f 92       	push	r0
     6f8:	1b be       	out	0x3b, r1	; 59
     6fa:	2f 93       	push	r18
     6fc:	8f 93       	push	r24
     6fe:	9f 93       	push	r25
     700:	af 93       	push	r26
     702:	bf 93       	push	r27
     704:	ef 93       	push	r30
     706:	ff 93       	push	r31
		It should not have any code that waits for anything. Examples include
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	uint8_t c = GPS_USART.DATA;
     708:	90 91 b0 09 	lds	r25, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	//printf("%c", c);
	//putchar(c);
	//putchar(c);
	if (current_sentence == SENTENCE_GPGGA)
     70c:	80 91 80 21 	lds	r24, 0x2180	; 0x802180 <current_sentence>
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	51 f4       	brne	.+20     	; 0x728 <__vector_91+0x4a>
	{
		gpgga_buff[gpgga_index] = c;
     714:	20 91 1e 23 	lds	r18, 0x231E	; 0x80231e <gpgga_index>
     718:	e2 2f       	mov	r30, r18
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	e7 53       	subi	r30, 0x37	; 55
     71e:	fd 4d       	sbci	r31, 0xDD	; 221
     720:	90 83       	st	Z, r25
		gpgga_index++;
     722:	2f 5f       	subi	r18, 0xFF	; 255
     724:	20 93 1e 23 	sts	0x231E, r18	; 0x80231e <gpgga_index>
		//printf("GPGGA %i = %i\n", gpgga_index, gpgga_buff[gpgga_index]);
	}	
	
	if (c == '\n')
     728:	9a 30       	cpi	r25, 0x0A	; 10
     72a:	39 f4       	brne	.+14     	; 0x73a <__vector_91+0x5c>
	{
		last_finished = current_sentence;
     72c:	80 93 29 21 	sts	0x2129, r24	; 0x802129 <last_finished>
		current_sentence = SENTENCE_NONE;
     730:	10 92 80 21 	sts	0x2180, r1	; 0x802180 <current_sentence>
		dollar_counter = 0;
     734:	10 92 20 21 	sts	0x2120, r1	; 0x802120 <dollar_counter>
     738:	23 c0       	rjmp	.+70     	; 0x780 <__vector_91+0xa2>
	}
	else if (c == '$' && current_sentence == SENTENCE_NONE)
     73a:	94 32       	cpi	r25, 0x24	; 36
     73c:	11 f4       	brne	.+4      	; 0x742 <__vector_91+0x64>
     73e:	88 23       	and	r24, r24
     740:	d9 f0       	breq	.+54     	; 0x778 <__vector_91+0x9a>
	{
		dollar_counter = 1;
	}
	
	if (dollar_counter > 0)
     742:	80 91 20 21 	lds	r24, 0x2120	; 0x802120 <dollar_counter>
     746:	88 23       	and	r24, r24
     748:	d9 f0       	breq	.+54     	; 0x780 <__vector_91+0xa2>
	{
		if (dollar_counter == 5 && c == 'G' )
     74a:	85 30       	cpi	r24, 0x05	; 5
     74c:	b1 f4       	brne	.+44     	; 0x77a <__vector_91+0x9c>
     74e:	97 34       	cpi	r25, 0x47	; 71
     750:	a1 f4       	brne	.+40     	; 0x77a <__vector_91+0x9c>
		{
			current_sentence= SENTENCE_GPGGA;
     752:	81 e0       	ldi	r24, 0x01	; 1
     754:	80 93 80 21 	sts	0x2180, r24	; 0x802180 <current_sentence>
			memcpy(gpgga_buff, "$GPGG", 5);
     758:	85 e0       	ldi	r24, 0x05	; 5
     75a:	eb e1       	ldi	r30, 0x1B	; 27
     75c:	f0 e2       	ldi	r31, 0x20	; 32
     75e:	a9 ec       	ldi	r26, 0xC9	; 201
     760:	b2 e2       	ldi	r27, 0x22	; 34
     762:	01 90       	ld	r0, Z+
     764:	0d 92       	st	X+, r0
     766:	8a 95       	dec	r24
     768:	e1 f7       	brne	.-8      	; 0x762 <__vector_91+0x84>
			gpgga_index = 5;
     76a:	85 e0       	ldi	r24, 0x05	; 5
     76c:	80 93 1e 23 	sts	0x231E, r24	; 0x80231e <gpgga_index>
			dollar_counter++;
     770:	86 e0       	ldi	r24, 0x06	; 6
     772:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <dollar_counter>
     776:	04 c0       	rjmp	.+8      	; 0x780 <__vector_91+0xa2>
	else if (c == '$' && current_sentence == SENTENCE_NONE)
	{
		dollar_counter = 1;
	}
	
	if (dollar_counter > 0)
     778:	81 e0       	ldi	r24, 0x01	; 1
			gpgga_index = 5;
			dollar_counter++;
		}
		else
		{
			dollar_counter++;
     77a:	8f 5f       	subi	r24, 0xFF	; 255
     77c:	80 93 20 21 	sts	0x2120, r24	; 0x802120 <dollar_counter>
		}
	}
	//printf("Interrupt Executed.\n");
	//rbu8_write(&gps_receive_buffer, &(GPS_USART.DATA), 1);
}
     780:	ff 91       	pop	r31
     782:	ef 91       	pop	r30
     784:	bf 91       	pop	r27
     786:	af 91       	pop	r26
     788:	9f 91       	pop	r25
     78a:	8f 91       	pop	r24
     78c:	2f 91       	pop	r18
     78e:	0f 90       	pop	r0
     790:	0b be       	out	0x3b, r0	; 59
     792:	0f 90       	pop	r0
     794:	09 be       	out	0x39, r0	; 57
     796:	0f 90       	pop	r0
     798:	08 be       	out	0x38, r0	; 56
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	1f 90       	pop	r1
     7a2:	18 95       	reti

000007a4 <__vector_93>:

ISR (GPS_SEND_INTERRUPT_VECTOR)
{
     7a4:	1f 92       	push	r1
     7a6:	0f 92       	push	r0
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	0f 92       	push	r0
     7ac:	11 24       	eor	r1, r1
     7ae:	08 b6       	in	r0, 0x38	; 56
     7b0:	0f 92       	push	r0
     7b2:	18 be       	out	0x38, r1	; 56
     7b4:	09 b6       	in	r0, 0x39	; 57
     7b6:	0f 92       	push	r0
     7b8:	19 be       	out	0x39, r1	; 57
     7ba:	0b b6       	in	r0, 0x3b	; 59
     7bc:	0f 92       	push	r0
     7be:	1b be       	out	0x3b, r1	; 59
     7c0:	2f 93       	push	r18
     7c2:	3f 93       	push	r19
     7c4:	4f 93       	push	r20
     7c6:	5f 93       	push	r21
     7c8:	6f 93       	push	r22
     7ca:	7f 93       	push	r23
     7cc:	8f 93       	push	r24
     7ce:	9f 93       	push	r25
     7d0:	af 93       	push	r26
     7d2:	bf 93       	push	r27
     7d4:	ef 93       	push	r30
     7d6:	ff 93       	push	r31
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	
  rbu8_read(&gps_send_buffer, &(GPS_USART.DATA), 1);
     7d8:	41 e0       	ldi	r20, 0x01	; 1
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	60 eb       	ldi	r22, 0xB0	; 176
     7de:	79 e0       	ldi	r23, 0x09	; 9
     7e0:	81 ec       	ldi	r24, 0xC1	; 193
     7e2:	92 e2       	ldi	r25, 0x22	; 34
     7e4:	38 d0       	rcall	.+112    	; 0x856 <rbu8_read>
  rbu8_delete_oldest(&gps_send_buffer, 1);
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	81 ec       	ldi	r24, 0xC1	; 193
     7ec:	92 e2       	ldi	r25, 0x22	; 34
     7ee:	83 d0       	rcall	.+262    	; 0x8f6 <rbu8_delete_oldest>
     7f0:	ff 91       	pop	r31
     7f2:	ef 91       	pop	r30
     7f4:	bf 91       	pop	r27
     7f6:	af 91       	pop	r26
     7f8:	9f 91       	pop	r25
     7fa:	8f 91       	pop	r24
     7fc:	7f 91       	pop	r23
     7fe:	6f 91       	pop	r22
     800:	5f 91       	pop	r21
     802:	4f 91       	pop	r20
     804:	3f 91       	pop	r19
     806:	2f 91       	pop	r18
     808:	0f 90       	pop	r0
     80a:	0b be       	out	0x3b, r0	; 59
     80c:	0f 90       	pop	r0
     80e:	09 be       	out	0x39, r0	; 57
     810:	0f 90       	pop	r0
     812:	08 be       	out	0x38, r0	; 56
     814:	0f 90       	pop	r0
     816:	0f be       	out	0x3f, r0	; 63
     818:	0f 90       	pop	r0
     81a:	1f 90       	pop	r1
     81c:	18 95       	reti

0000081e <rbu8_init>:
void rbu8_init(RingBufferu8_t* buffer, uint8_t* backing_array, uint16_t backing_array_length)
/*	Call to reset the head and tail variables of a RingBuffer. 
	backing_array is the array that the ring buffer actually stores its data in
	backing_array_length is kind of exactly what it says it is
*/
{
     81e:	fc 01       	movw	r30, r24
	buffer->head = 0; //Beginning of array
     820:	12 82       	std	Z+2, r1	; 0x02
     822:	13 82       	std	Z+3, r1	; 0x03
	buffer->tail = 0; //End of array
     824:	14 82       	std	Z+4, r1	; 0x04
     826:	15 82       	std	Z+5, r1	; 0x05
	buffer->buffer = backing_array;
     828:	66 83       	std	Z+6, r22	; 0x06
     82a:	77 83       	std	Z+7, r23	; 0x07
	buffer->array_length = backing_array_length;
     82c:	40 83       	st	Z, r20
     82e:	51 83       	std	Z+1, r21	; 0x01
     830:	08 95       	ret

00000832 <rbu8_length>:
uint16_t rbu8_length(RingBufferu8_t* buffer)
/*	Returns the number of bytes of data currently stored in the RingBuffer pointed to by its argument
	The return value will always be greater than or equal to 0
	And less than or equal to buffer->array_length
*/
{
     832:	fc 01       	movw	r30, r24
	if (buffer->head >= buffer->tail)
     834:	82 81       	ldd	r24, Z+2	; 0x02
     836:	93 81       	ldd	r25, Z+3	; 0x03
     838:	44 81       	ldd	r20, Z+4	; 0x04
     83a:	55 81       	ldd	r21, Z+5	; 0x05
     83c:	84 17       	cp	r24, r20
     83e:	95 07       	cpc	r25, r21
     840:	18 f0       	brcs	.+6      	; 0x848 <rbu8_length+0x16>
	//We are not currently wrapped around the end of the buffer, so we are using the space between the head and tail
	{
		return buffer->head - buffer->tail;
     842:	84 1b       	sub	r24, r20
     844:	95 0b       	sbc	r25, r21
     846:	08 95       	ret
	}
	else
	//We have wrapped around the end of the buffer, so subtract the unused space between the head and tail
	{
		return buffer->array_length - (buffer->tail - buffer->head);
     848:	20 81       	ld	r18, Z
     84a:	31 81       	ldd	r19, Z+1	; 0x01
     84c:	82 0f       	add	r24, r18
     84e:	93 1f       	adc	r25, r19
     850:	84 1b       	sub	r24, r20
     852:	95 0b       	sbc	r25, r21
	}
}
     854:	08 95       	ret

00000856 <rbu8_read>:
	length - number of bytes to be read
	Return values
	* 0 - success
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
     856:	8f 92       	push	r8
     858:	9f 92       	push	r9
     85a:	af 92       	push	r10
     85c:	bf 92       	push	r11
     85e:	cf 92       	push	r12
     860:	df 92       	push	r13
     862:	ef 92       	push	r14
     864:	ff 92       	push	r15
     866:	0f 93       	push	r16
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	8c 01       	movw	r16, r24
     870:	6a 01       	movw	r12, r20
	uint16_t index = buffer->tail;
     872:	dc 01       	movw	r26, r24
     874:	14 96       	adiw	r26, 0x04	; 4
     876:	cd 91       	ld	r28, X+
     878:	dc 91       	ld	r29, X
     87a:	15 97       	sbiw	r26, 0x05	; 5
     87c:	e6 2e       	mov	r14, r22
     87e:	f7 2e       	mov	r15, r23
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
     880:	a1 2c       	mov	r10, r1
     882:	b1 2c       	mov	r11, r1
     884:	84 2e       	mov	r8, r20
     886:	9d 2c       	mov	r9, r13
     888:	18 c0       	rjmp	.+48     	; 0x8ba <rbu8_read+0x64>
	{

		dest[i] = buffer->buffer[index];
     88a:	d8 01       	movw	r26, r16
     88c:	16 96       	adiw	r26, 0x06	; 6
     88e:	ed 91       	ld	r30, X+
     890:	fc 91       	ld	r31, X
     892:	17 97       	sbiw	r26, 0x07	; 7
     894:	ec 0f       	add	r30, r28
     896:	fd 1f       	adc	r31, r29
     898:	80 81       	ld	r24, Z
     89a:	f7 01       	movw	r30, r14
     89c:	81 93       	st	Z+, r24
     89e:	7f 01       	movw	r14, r30
		if (index == buffer->array_length - 1) //Reset if we've hit the end
     8a0:	8d 91       	ld	r24, X+
     8a2:	9c 91       	ld	r25, X
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	c8 17       	cp	r28, r24
     8a8:	d9 07       	cpc	r29, r25
     8aa:	11 f0       	breq	.+4      	; 0x8b0 <rbu8_read+0x5a>
		{
			index = 0;
		}
		else
		{
			index++;
     8ac:	21 96       	adiw	r28, 0x01	; 1
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <rbu8_read+0x5e>
	{

		dest[i] = buffer->buffer[index];
		if (index == buffer->array_length - 1) //Reset if we've hit the end
		{
			index = 0;
     8b0:	c0 e0       	ldi	r28, 0x00	; 0
     8b2:	d0 e0       	ldi	r29, 0x00	; 0
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
	uint16_t index = buffer->tail;
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
     8b4:	ff ef       	ldi	r31, 0xFF	; 255
     8b6:	af 1a       	sub	r10, r31
     8b8:	bf 0a       	sbc	r11, r31
     8ba:	c8 01       	movw	r24, r16
     8bc:	ba df       	rcall	.-140    	; 0x832 <rbu8_length>
     8be:	9c 01       	movw	r18, r24
     8c0:	c8 16       	cp	r12, r24
     8c2:	d9 06       	cpc	r13, r25
     8c4:	10 f4       	brcc	.+4      	; 0x8ca <rbu8_read+0x74>
     8c6:	28 2d       	mov	r18, r8
     8c8:	39 2d       	mov	r19, r9
     8ca:	a2 16       	cp	r10, r18
     8cc:	b3 06       	cpc	r11, r19
     8ce:	e8 f2       	brcs	.-70     	; 0x88a <rbu8_read+0x34>
     8d0:	21 e0       	ldi	r18, 0x01	; 1
     8d2:	8c 15       	cp	r24, r12
     8d4:	9d 05       	cpc	r25, r13
     8d6:	08 f0       	brcs	.+2      	; 0x8da <rbu8_read+0x84>
     8d8:	20 e0       	ldi	r18, 0x00	; 0
	}
	if (length > rbu8_length(buffer))
		return 1;
	else
		return 0;
}
     8da:	82 2f       	mov	r24, r18
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	df 90       	pop	r13
     8ea:	cf 90       	pop	r12
     8ec:	bf 90       	pop	r11
     8ee:	af 90       	pop	r10
     8f0:	9f 90       	pop	r9
     8f2:	8f 90       	pop	r8
     8f4:	08 95       	ret

000008f6 <rbu8_delete_oldest>:

void rbu8_delete_oldest(RingBufferu8_t* buffer, uint16_t length)
/*	Deletes data from the ring buffer
	All it really has to do is move buffer->tail up length bytes or until one byte below buffer->head, whichever is lower
*/
{
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	ec 01       	movw	r28, r24
	uint16_t move_distance = min(length, rbu8_length(buffer));
     900:	8b 01       	movw	r16, r22
     902:	97 df       	rcall	.-210    	; 0x832 <rbu8_length>
     904:	9c 01       	movw	r18, r24
     906:	08 17       	cp	r16, r24
     908:	19 07       	cpc	r17, r25
     90a:	08 f4       	brcc	.+2      	; 0x90e <rbu8_delete_oldest+0x18>
	if (move_distance >= rbu8_length(buffer))
     90c:	98 01       	movw	r18, r16
     90e:	28 17       	cp	r18, r24
     910:	39 07       	cpc	r19, r25
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
     912:	68 f0       	brcs	.+26     	; 0x92e <rbu8_delete_oldest+0x38>
     914:	8c 81       	ldd	r24, Y+4	; 0x04
     916:	9d 81       	ldd	r25, Y+5	; 0x05
     918:	82 0f       	add	r24, r18
     91a:	93 1f       	adc	r25, r19
     91c:	68 81       	ld	r22, Y
     91e:	79 81       	ldd	r23, Y+1	; 0x01
     920:	0e 94 33 1b 	call	0x3666	; 0x3666 <__udivmodhi4>
     924:	8c 83       	std	Y+4, r24	; 0x04
		buffer->head = buffer->tail;
     926:	9d 83       	std	Y+5, r25	; 0x05
     928:	8a 83       	std	Y+2, r24	; 0x02
     92a:	9b 83       	std	Y+3, r25	; 0x03
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
     92c:	0a c0       	rjmp	.+20     	; 0x942 <rbu8_delete_oldest+0x4c>
     92e:	8c 81       	ldd	r24, Y+4	; 0x04
     930:	9d 81       	ldd	r25, Y+5	; 0x05
     932:	82 0f       	add	r24, r18
     934:	93 1f       	adc	r25, r19
     936:	68 81       	ld	r22, Y
     938:	79 81       	ldd	r23, Y+1	; 0x01
     93a:	0e 94 33 1b 	call	0x3666	; 0x3666 <__udivmodhi4>
     93e:	8c 83       	std	Y+4, r24	; 0x04
	}
}
     940:	9d 83       	std	Y+5, r25	; 0x05
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	08 95       	ret

0000094c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29
     950:	1f 92       	push	r1
     952:	1f 92       	push	r1
     954:	cd b7       	in	r28, 0x3d	; 61
     956:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     958:	8f ef       	ldi	r24, 0xFF	; 255
     95a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     95e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     962:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     966:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     96a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     96e:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     972:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     976:	8f b7       	in	r24, 0x3f	; 63
     978:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     97a:	f8 94       	cli
	return flags;
     97c:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     97e:	e0 e5       	ldi	r30, 0x50	; 80
     980:	f0 e0       	ldi	r31, 0x00	; 0
     982:	80 81       	ld	r24, Z
     984:	82 60       	ori	r24, 0x02	; 2
     986:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     988:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     98a:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     98c:	81 ff       	sbrs	r24, 1
     98e:	fd cf       	rjmp	.-6      	; 0x98a <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	80 e4       	ldi	r24, 0x40	; 64
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	38 d2       	rcall	.+1136   	; 0xe08 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     998:	8f b7       	in	r24, 0x3f	; 63
     99a:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     99c:	f8 94       	cli
	return flags;
     99e:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     9a0:	e0 e5       	ldi	r30, 0x50	; 80
     9a2:	f0 e0       	ldi	r31, 0x00	; 0
     9a4:	80 81       	ld	r24, Z
     9a6:	8e 7f       	andi	r24, 0xFE	; 254
     9a8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9aa:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
     9ba:	1f 92       	push	r1
     9bc:	cd b7       	in	r28, 0x3d	; 61
     9be:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     9c0:	9f b7       	in	r25, 0x3f	; 63
     9c2:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     9c4:	f8 94       	cli
	return flags;
     9c6:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     9c8:	e8 2f       	mov	r30, r24
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	e0 59       	subi	r30, 0x90	; 144
     9ce:	ff 4f       	sbci	r31, 0xFF	; 255
     9d0:	60 95       	com	r22
     9d2:	80 81       	ld	r24, Z
     9d4:	68 23       	and	r22, r24
     9d6:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9d8:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     9da:	0f 90       	pop	r0
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	1f 92       	push	r1
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     9ec:	80 91 24 23 	lds	r24, 0x2324	; 0x802324 <stdio_base>
     9f0:	90 91 25 23 	lds	r25, 0x2325	; 0x802325 <stdio_base+0x1>
     9f4:	e0 91 20 23 	lds	r30, 0x2320	; 0x802320 <ptr_get>
     9f8:	f0 91 21 23 	lds	r31, 0x2321	; 0x802321 <ptr_get+0x1>
     9fc:	be 01       	movw	r22, r28
     9fe:	6f 5f       	subi	r22, 0xFF	; 255
     a00:	7f 4f       	sbci	r23, 0xFF	; 255
     a02:	19 95       	eicall
	return c;
     a04:	89 81       	ldd	r24, Y+1	; 0x01
}
     a06:	08 2e       	mov	r0, r24
     a08:	00 0c       	add	r0, r0
     a0a:	99 0b       	sbc	r25, r25
     a0c:	0f 90       	pop	r0
     a0e:	df 91       	pop	r29
     a10:	cf 91       	pop	r28
     a12:	08 95       	ret

00000a14 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     a14:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     a16:	80 91 24 23 	lds	r24, 0x2324	; 0x802324 <stdio_base>
     a1a:	90 91 25 23 	lds	r25, 0x2325	; 0x802325 <stdio_base+0x1>
     a1e:	e0 91 22 23 	lds	r30, 0x2322	; 0x802322 <ptr_put>
     a22:	f0 91 23 23 	lds	r31, 0x2323	; 0x802323 <ptr_put+0x1>
     a26:	19 95       	eicall
     a28:	99 23       	and	r25, r25
     a2a:	1c f0       	brlt	.+6      	; 0xa32 <_write+0x1e>
		return -1;
	}
	return 1;
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     a32:	8f ef       	ldi	r24, 0xFF	; 255
     a34:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     a36:	08 95       	ret

00000a38 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     a38:	1f 92       	push	r1
     a3a:	0f 92       	push	r0
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	0f 92       	push	r0
     a40:	11 24       	eor	r1, r1
     a42:	08 b6       	in	r0, 0x38	; 56
     a44:	0f 92       	push	r0
     a46:	18 be       	out	0x38, r1	; 56
     a48:	09 b6       	in	r0, 0x39	; 57
     a4a:	0f 92       	push	r0
     a4c:	19 be       	out	0x39, r1	; 57
     a4e:	0b b6       	in	r0, 0x3b	; 59
     a50:	0f 92       	push	r0
     a52:	1b be       	out	0x3b, r1	; 59
     a54:	2f 93       	push	r18
     a56:	3f 93       	push	r19
     a58:	4f 93       	push	r20
     a5a:	5f 93       	push	r21
     a5c:	6f 93       	push	r22
     a5e:	7f 93       	push	r23
     a60:	8f 93       	push	r24
     a62:	9f 93       	push	r25
     a64:	af 93       	push	r26
     a66:	bf 93       	push	r27
     a68:	ef 93       	push	r30
     a6a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     a6c:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     a70:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     a74:	e0 91 28 23 	lds	r30, 0x2328	; 0x802328 <adca_callback>
     a78:	f0 91 29 23 	lds	r31, 0x2329	; 0x802329 <adca_callback+0x1>
     a7c:	61 e0       	ldi	r22, 0x01	; 1
     a7e:	80 e0       	ldi	r24, 0x00	; 0
     a80:	92 e0       	ldi	r25, 0x02	; 2
     a82:	19 95       	eicall
}
     a84:	ff 91       	pop	r31
     a86:	ef 91       	pop	r30
     a88:	bf 91       	pop	r27
     a8a:	af 91       	pop	r26
     a8c:	9f 91       	pop	r25
     a8e:	8f 91       	pop	r24
     a90:	7f 91       	pop	r23
     a92:	6f 91       	pop	r22
     a94:	5f 91       	pop	r21
     a96:	4f 91       	pop	r20
     a98:	3f 91       	pop	r19
     a9a:	2f 91       	pop	r18
     a9c:	0f 90       	pop	r0
     a9e:	0b be       	out	0x3b, r0	; 59
     aa0:	0f 90       	pop	r0
     aa2:	09 be       	out	0x39, r0	; 57
     aa4:	0f 90       	pop	r0
     aa6:	08 be       	out	0x38, r0	; 56
     aa8:	0f 90       	pop	r0
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	0f 90       	pop	r0
     aae:	1f 90       	pop	r1
     ab0:	18 95       	reti

00000ab2 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     ab2:	1f 92       	push	r1
     ab4:	0f 92       	push	r0
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	0f 92       	push	r0
     aba:	11 24       	eor	r1, r1
     abc:	08 b6       	in	r0, 0x38	; 56
     abe:	0f 92       	push	r0
     ac0:	18 be       	out	0x38, r1	; 56
     ac2:	09 b6       	in	r0, 0x39	; 57
     ac4:	0f 92       	push	r0
     ac6:	19 be       	out	0x39, r1	; 57
     ac8:	0b b6       	in	r0, 0x3b	; 59
     aca:	0f 92       	push	r0
     acc:	1b be       	out	0x3b, r1	; 59
     ace:	2f 93       	push	r18
     ad0:	3f 93       	push	r19
     ad2:	4f 93       	push	r20
     ad4:	5f 93       	push	r21
     ad6:	6f 93       	push	r22
     ad8:	7f 93       	push	r23
     ada:	8f 93       	push	r24
     adc:	9f 93       	push	r25
     ade:	af 93       	push	r26
     ae0:	bf 93       	push	r27
     ae2:	ef 93       	push	r30
     ae4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     ae6:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     aea:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     aee:	e0 91 28 23 	lds	r30, 0x2328	; 0x802328 <adca_callback>
     af2:	f0 91 29 23 	lds	r31, 0x2329	; 0x802329 <adca_callback+0x1>
     af6:	62 e0       	ldi	r22, 0x02	; 2
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	19 95       	eicall
}
     afe:	ff 91       	pop	r31
     b00:	ef 91       	pop	r30
     b02:	bf 91       	pop	r27
     b04:	af 91       	pop	r26
     b06:	9f 91       	pop	r25
     b08:	8f 91       	pop	r24
     b0a:	7f 91       	pop	r23
     b0c:	6f 91       	pop	r22
     b0e:	5f 91       	pop	r21
     b10:	4f 91       	pop	r20
     b12:	3f 91       	pop	r19
     b14:	2f 91       	pop	r18
     b16:	0f 90       	pop	r0
     b18:	0b be       	out	0x3b, r0	; 59
     b1a:	0f 90       	pop	r0
     b1c:	09 be       	out	0x39, r0	; 57
     b1e:	0f 90       	pop	r0
     b20:	08 be       	out	0x38, r0	; 56
     b22:	0f 90       	pop	r0
     b24:	0f be       	out	0x3f, r0	; 63
     b26:	0f 90       	pop	r0
     b28:	1f 90       	pop	r1
     b2a:	18 95       	reti

00000b2c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     b2c:	1f 92       	push	r1
     b2e:	0f 92       	push	r0
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	0f 92       	push	r0
     b34:	11 24       	eor	r1, r1
     b36:	08 b6       	in	r0, 0x38	; 56
     b38:	0f 92       	push	r0
     b3a:	18 be       	out	0x38, r1	; 56
     b3c:	09 b6       	in	r0, 0x39	; 57
     b3e:	0f 92       	push	r0
     b40:	19 be       	out	0x39, r1	; 57
     b42:	0b b6       	in	r0, 0x3b	; 59
     b44:	0f 92       	push	r0
     b46:	1b be       	out	0x3b, r1	; 59
     b48:	2f 93       	push	r18
     b4a:	3f 93       	push	r19
     b4c:	4f 93       	push	r20
     b4e:	5f 93       	push	r21
     b50:	6f 93       	push	r22
     b52:	7f 93       	push	r23
     b54:	8f 93       	push	r24
     b56:	9f 93       	push	r25
     b58:	af 93       	push	r26
     b5a:	bf 93       	push	r27
     b5c:	ef 93       	push	r30
     b5e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     b60:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     b64:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     b68:	e0 91 28 23 	lds	r30, 0x2328	; 0x802328 <adca_callback>
     b6c:	f0 91 29 23 	lds	r31, 0x2329	; 0x802329 <adca_callback+0x1>
     b70:	64 e0       	ldi	r22, 0x04	; 4
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	92 e0       	ldi	r25, 0x02	; 2
     b76:	19 95       	eicall
}
     b78:	ff 91       	pop	r31
     b7a:	ef 91       	pop	r30
     b7c:	bf 91       	pop	r27
     b7e:	af 91       	pop	r26
     b80:	9f 91       	pop	r25
     b82:	8f 91       	pop	r24
     b84:	7f 91       	pop	r23
     b86:	6f 91       	pop	r22
     b88:	5f 91       	pop	r21
     b8a:	4f 91       	pop	r20
     b8c:	3f 91       	pop	r19
     b8e:	2f 91       	pop	r18
     b90:	0f 90       	pop	r0
     b92:	0b be       	out	0x3b, r0	; 59
     b94:	0f 90       	pop	r0
     b96:	09 be       	out	0x39, r0	; 57
     b98:	0f 90       	pop	r0
     b9a:	08 be       	out	0x38, r0	; 56
     b9c:	0f 90       	pop	r0
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	0f 90       	pop	r0
     ba2:	1f 90       	pop	r1
     ba4:	18 95       	reti

00000ba6 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     ba6:	1f 92       	push	r1
     ba8:	0f 92       	push	r0
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	0f 92       	push	r0
     bae:	11 24       	eor	r1, r1
     bb0:	08 b6       	in	r0, 0x38	; 56
     bb2:	0f 92       	push	r0
     bb4:	18 be       	out	0x38, r1	; 56
     bb6:	09 b6       	in	r0, 0x39	; 57
     bb8:	0f 92       	push	r0
     bba:	19 be       	out	0x39, r1	; 57
     bbc:	0b b6       	in	r0, 0x3b	; 59
     bbe:	0f 92       	push	r0
     bc0:	1b be       	out	0x3b, r1	; 59
     bc2:	2f 93       	push	r18
     bc4:	3f 93       	push	r19
     bc6:	4f 93       	push	r20
     bc8:	5f 93       	push	r21
     bca:	6f 93       	push	r22
     bcc:	7f 93       	push	r23
     bce:	8f 93       	push	r24
     bd0:	9f 93       	push	r25
     bd2:	af 93       	push	r26
     bd4:	bf 93       	push	r27
     bd6:	ef 93       	push	r30
     bd8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     bda:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     bde:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     be2:	e0 91 28 23 	lds	r30, 0x2328	; 0x802328 <adca_callback>
     be6:	f0 91 29 23 	lds	r31, 0x2329	; 0x802329 <adca_callback+0x1>
     bea:	68 e0       	ldi	r22, 0x08	; 8
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	92 e0       	ldi	r25, 0x02	; 2
     bf0:	19 95       	eicall
}
     bf2:	ff 91       	pop	r31
     bf4:	ef 91       	pop	r30
     bf6:	bf 91       	pop	r27
     bf8:	af 91       	pop	r26
     bfa:	9f 91       	pop	r25
     bfc:	8f 91       	pop	r24
     bfe:	7f 91       	pop	r23
     c00:	6f 91       	pop	r22
     c02:	5f 91       	pop	r21
     c04:	4f 91       	pop	r20
     c06:	3f 91       	pop	r19
     c08:	2f 91       	pop	r18
     c0a:	0f 90       	pop	r0
     c0c:	0b be       	out	0x3b, r0	; 59
     c0e:	0f 90       	pop	r0
     c10:	09 be       	out	0x39, r0	; 57
     c12:	0f 90       	pop	r0
     c14:	08 be       	out	0x38, r0	; 56
     c16:	0f 90       	pop	r0
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	0f 90       	pop	r0
     c1c:	1f 90       	pop	r1
     c1e:	18 95       	reti

00000c20 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     c20:	1f 92       	push	r1
     c22:	0f 92       	push	r0
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	0f 92       	push	r0
     c28:	11 24       	eor	r1, r1
     c2a:	08 b6       	in	r0, 0x38	; 56
     c2c:	0f 92       	push	r0
     c2e:	18 be       	out	0x38, r1	; 56
     c30:	09 b6       	in	r0, 0x39	; 57
     c32:	0f 92       	push	r0
     c34:	19 be       	out	0x39, r1	; 57
     c36:	0b b6       	in	r0, 0x3b	; 59
     c38:	0f 92       	push	r0
     c3a:	1b be       	out	0x3b, r1	; 59
     c3c:	2f 93       	push	r18
     c3e:	3f 93       	push	r19
     c40:	4f 93       	push	r20
     c42:	5f 93       	push	r21
     c44:	6f 93       	push	r22
     c46:	7f 93       	push	r23
     c48:	8f 93       	push	r24
     c4a:	9f 93       	push	r25
     c4c:	af 93       	push	r26
     c4e:	bf 93       	push	r27
     c50:	ef 93       	push	r30
     c52:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     c54:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     c58:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     c5c:	e0 91 26 23 	lds	r30, 0x2326	; 0x802326 <adcb_callback>
     c60:	f0 91 27 23 	lds	r31, 0x2327	; 0x802327 <adcb_callback+0x1>
     c64:	61 e0       	ldi	r22, 0x01	; 1
     c66:	80 e4       	ldi	r24, 0x40	; 64
     c68:	92 e0       	ldi	r25, 0x02	; 2
     c6a:	19 95       	eicall
}
     c6c:	ff 91       	pop	r31
     c6e:	ef 91       	pop	r30
     c70:	bf 91       	pop	r27
     c72:	af 91       	pop	r26
     c74:	9f 91       	pop	r25
     c76:	8f 91       	pop	r24
     c78:	7f 91       	pop	r23
     c7a:	6f 91       	pop	r22
     c7c:	5f 91       	pop	r21
     c7e:	4f 91       	pop	r20
     c80:	3f 91       	pop	r19
     c82:	2f 91       	pop	r18
     c84:	0f 90       	pop	r0
     c86:	0b be       	out	0x3b, r0	; 59
     c88:	0f 90       	pop	r0
     c8a:	09 be       	out	0x39, r0	; 57
     c8c:	0f 90       	pop	r0
     c8e:	08 be       	out	0x38, r0	; 56
     c90:	0f 90       	pop	r0
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	0f 90       	pop	r0
     c96:	1f 90       	pop	r1
     c98:	18 95       	reti

00000c9a <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     c9a:	1f 92       	push	r1
     c9c:	0f 92       	push	r0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	0f 92       	push	r0
     ca2:	11 24       	eor	r1, r1
     ca4:	08 b6       	in	r0, 0x38	; 56
     ca6:	0f 92       	push	r0
     ca8:	18 be       	out	0x38, r1	; 56
     caa:	09 b6       	in	r0, 0x39	; 57
     cac:	0f 92       	push	r0
     cae:	19 be       	out	0x39, r1	; 57
     cb0:	0b b6       	in	r0, 0x3b	; 59
     cb2:	0f 92       	push	r0
     cb4:	1b be       	out	0x3b, r1	; 59
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     cce:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     cd2:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     cd6:	e0 91 26 23 	lds	r30, 0x2326	; 0x802326 <adcb_callback>
     cda:	f0 91 27 23 	lds	r31, 0x2327	; 0x802327 <adcb_callback+0x1>
     cde:	62 e0       	ldi	r22, 0x02	; 2
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	92 e0       	ldi	r25, 0x02	; 2
     ce4:	19 95       	eicall
}
     ce6:	ff 91       	pop	r31
     ce8:	ef 91       	pop	r30
     cea:	bf 91       	pop	r27
     cec:	af 91       	pop	r26
     cee:	9f 91       	pop	r25
     cf0:	8f 91       	pop	r24
     cf2:	7f 91       	pop	r23
     cf4:	6f 91       	pop	r22
     cf6:	5f 91       	pop	r21
     cf8:	4f 91       	pop	r20
     cfa:	3f 91       	pop	r19
     cfc:	2f 91       	pop	r18
     cfe:	0f 90       	pop	r0
     d00:	0b be       	out	0x3b, r0	; 59
     d02:	0f 90       	pop	r0
     d04:	09 be       	out	0x39, r0	; 57
     d06:	0f 90       	pop	r0
     d08:	08 be       	out	0x38, r0	; 56
     d0a:	0f 90       	pop	r0
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	0f 90       	pop	r0
     d10:	1f 90       	pop	r1
     d12:	18 95       	reti

00000d14 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	0f 92       	push	r0
     d1c:	11 24       	eor	r1, r1
     d1e:	08 b6       	in	r0, 0x38	; 56
     d20:	0f 92       	push	r0
     d22:	18 be       	out	0x38, r1	; 56
     d24:	09 b6       	in	r0, 0x39	; 57
     d26:	0f 92       	push	r0
     d28:	19 be       	out	0x39, r1	; 57
     d2a:	0b b6       	in	r0, 0x3b	; 59
     d2c:	0f 92       	push	r0
     d2e:	1b be       	out	0x3b, r1	; 59
     d30:	2f 93       	push	r18
     d32:	3f 93       	push	r19
     d34:	4f 93       	push	r20
     d36:	5f 93       	push	r21
     d38:	6f 93       	push	r22
     d3a:	7f 93       	push	r23
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25
     d40:	af 93       	push	r26
     d42:	bf 93       	push	r27
     d44:	ef 93       	push	r30
     d46:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     d48:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     d4c:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     d50:	e0 91 26 23 	lds	r30, 0x2326	; 0x802326 <adcb_callback>
     d54:	f0 91 27 23 	lds	r31, 0x2327	; 0x802327 <adcb_callback+0x1>
     d58:	64 e0       	ldi	r22, 0x04	; 4
     d5a:	80 e4       	ldi	r24, 0x40	; 64
     d5c:	92 e0       	ldi	r25, 0x02	; 2
     d5e:	19 95       	eicall
}
     d60:	ff 91       	pop	r31
     d62:	ef 91       	pop	r30
     d64:	bf 91       	pop	r27
     d66:	af 91       	pop	r26
     d68:	9f 91       	pop	r25
     d6a:	8f 91       	pop	r24
     d6c:	7f 91       	pop	r23
     d6e:	6f 91       	pop	r22
     d70:	5f 91       	pop	r21
     d72:	4f 91       	pop	r20
     d74:	3f 91       	pop	r19
     d76:	2f 91       	pop	r18
     d78:	0f 90       	pop	r0
     d7a:	0b be       	out	0x3b, r0	; 59
     d7c:	0f 90       	pop	r0
     d7e:	09 be       	out	0x39, r0	; 57
     d80:	0f 90       	pop	r0
     d82:	08 be       	out	0x38, r0	; 56
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	0f 90       	pop	r0
     d8a:	1f 90       	pop	r1
     d8c:	18 95       	reti

00000d8e <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     d8e:	1f 92       	push	r1
     d90:	0f 92       	push	r0
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	0f 92       	push	r0
     d96:	11 24       	eor	r1, r1
     d98:	08 b6       	in	r0, 0x38	; 56
     d9a:	0f 92       	push	r0
     d9c:	18 be       	out	0x38, r1	; 56
     d9e:	09 b6       	in	r0, 0x39	; 57
     da0:	0f 92       	push	r0
     da2:	19 be       	out	0x39, r1	; 57
     da4:	0b b6       	in	r0, 0x3b	; 59
     da6:	0f 92       	push	r0
     da8:	1b be       	out	0x3b, r1	; 59
     daa:	2f 93       	push	r18
     dac:	3f 93       	push	r19
     dae:	4f 93       	push	r20
     db0:	5f 93       	push	r21
     db2:	6f 93       	push	r22
     db4:	7f 93       	push	r23
     db6:	8f 93       	push	r24
     db8:	9f 93       	push	r25
     dba:	af 93       	push	r26
     dbc:	bf 93       	push	r27
     dbe:	ef 93       	push	r30
     dc0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     dc2:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     dc6:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     dca:	e0 91 26 23 	lds	r30, 0x2326	; 0x802326 <adcb_callback>
     dce:	f0 91 27 23 	lds	r31, 0x2327	; 0x802327 <adcb_callback+0x1>
     dd2:	68 e0       	ldi	r22, 0x08	; 8
     dd4:	80 e4       	ldi	r24, 0x40	; 64
     dd6:	92 e0       	ldi	r25, 0x02	; 2
     dd8:	19 95       	eicall
}
     dda:	ff 91       	pop	r31
     ddc:	ef 91       	pop	r30
     dde:	bf 91       	pop	r27
     de0:	af 91       	pop	r26
     de2:	9f 91       	pop	r25
     de4:	8f 91       	pop	r24
     de6:	7f 91       	pop	r23
     de8:	6f 91       	pop	r22
     dea:	5f 91       	pop	r21
     dec:	4f 91       	pop	r20
     dee:	3f 91       	pop	r19
     df0:	2f 91       	pop	r18
     df2:	0f 90       	pop	r0
     df4:	0b be       	out	0x3b, r0	; 59
     df6:	0f 90       	pop	r0
     df8:	09 be       	out	0x39, r0	; 57
     dfa:	0f 90       	pop	r0
     dfc:	08 be       	out	0x38, r0	; 56
     dfe:	0f 90       	pop	r0
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	0f 90       	pop	r0
     e04:	1f 90       	pop	r1
     e06:	18 95       	reti

00000e08 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     e08:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     e0a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     e0c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     e0e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     e10:	60 83       	st	Z, r22
	ret                             // Return to caller
     e12:	08 95       	ret

00000e14 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     e14:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     e18:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     e1a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     e1c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     e20:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     e22:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     e26:	08 95       	ret

00000e28 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     e28:	fc 01       	movw	r30, r24
     e2a:	91 81       	ldd	r25, Z+1	; 0x01
     e2c:	95 ff       	sbrs	r25, 5
     e2e:	fd cf       	rjmp	.-6      	; 0xe2a <usart_putchar+0x2>
     e30:	60 83       	st	Z, r22
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	08 95       	ret

00000e38 <usart_getchar>:
     e38:	fc 01       	movw	r30, r24
     e3a:	91 81       	ldd	r25, Z+1	; 0x01
     e3c:	99 23       	and	r25, r25
     e3e:	ec f7       	brge	.-6      	; 0xe3a <usart_getchar+0x2>
     e40:	80 81       	ld	r24, Z
     e42:	08 95       	ret

00000e44 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     e44:	4f 92       	push	r4
     e46:	5f 92       	push	r5
     e48:	6f 92       	push	r6
     e4a:	7f 92       	push	r7
     e4c:	8f 92       	push	r8
     e4e:	9f 92       	push	r9
     e50:	af 92       	push	r10
     e52:	bf 92       	push	r11
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	7c 01       	movw	r14, r24
     e60:	4a 01       	movw	r8, r20
     e62:	5b 01       	movw	r10, r22
     e64:	28 01       	movw	r4, r16
     e66:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     e68:	fc 01       	movw	r30, r24
     e6a:	84 81       	ldd	r24, Z+4	; 0x04
     e6c:	82 ff       	sbrs	r24, 2
     e6e:	16 c0       	rjmp	.+44     	; 0xe9c <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     e70:	d9 01       	movw	r26, r18
     e72:	c8 01       	movw	r24, r16
     e74:	68 94       	set
     e76:	12 f8       	bld	r1, 2
     e78:	b6 95       	lsr	r27
     e7a:	a7 95       	ror	r26
     e7c:	97 95       	ror	r25
     e7e:	87 95       	ror	r24
     e80:	16 94       	lsr	r1
     e82:	d1 f7       	brne	.-12     	; 0xe78 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     e84:	b9 01       	movw	r22, r18
     e86:	a8 01       	movw	r20, r16
     e88:	03 2e       	mov	r0, r19
     e8a:	36 e1       	ldi	r19, 0x16	; 22
     e8c:	76 95       	lsr	r23
     e8e:	67 95       	ror	r22
     e90:	57 95       	ror	r21
     e92:	47 95       	ror	r20
     e94:	3a 95       	dec	r19
     e96:	d1 f7       	brne	.-12     	; 0xe8c <usart_set_baudrate+0x48>
     e98:	30 2d       	mov	r19, r0
     e9a:	15 c0       	rjmp	.+42     	; 0xec6 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     e9c:	d9 01       	movw	r26, r18
     e9e:	c8 01       	movw	r24, r16
     ea0:	68 94       	set
     ea2:	13 f8       	bld	r1, 3
     ea4:	b6 95       	lsr	r27
     ea6:	a7 95       	ror	r26
     ea8:	97 95       	ror	r25
     eaa:	87 95       	ror	r24
     eac:	16 94       	lsr	r1
     eae:	d1 f7       	brne	.-12     	; 0xea4 <usart_set_baudrate+0x60>
		min_rate /= 2;
     eb0:	b9 01       	movw	r22, r18
     eb2:	a8 01       	movw	r20, r16
     eb4:	03 2e       	mov	r0, r19
     eb6:	37 e1       	ldi	r19, 0x17	; 23
     eb8:	76 95       	lsr	r23
     eba:	67 95       	ror	r22
     ebc:	57 95       	ror	r21
     ebe:	47 95       	ror	r20
     ec0:	3a 95       	dec	r19
     ec2:	d1 f7       	brne	.-12     	; 0xeb8 <usart_set_baudrate+0x74>
     ec4:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     ec6:	88 15       	cp	r24, r8
     ec8:	99 05       	cpc	r25, r9
     eca:	aa 05       	cpc	r26, r10
     ecc:	bb 05       	cpc	r27, r11
     ece:	08 f4       	brcc	.+2      	; 0xed2 <usart_set_baudrate+0x8e>
     ed0:	a6 c0       	rjmp	.+332    	; 0x101e <usart_set_baudrate+0x1da>
     ed2:	84 16       	cp	r8, r20
     ed4:	95 06       	cpc	r9, r21
     ed6:	a6 06       	cpc	r10, r22
     ed8:	b7 06       	cpc	r11, r23
     eda:	08 f4       	brcc	.+2      	; 0xede <usart_set_baudrate+0x9a>
     edc:	a2 c0       	rjmp	.+324    	; 0x1022 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     ede:	f7 01       	movw	r30, r14
     ee0:	84 81       	ldd	r24, Z+4	; 0x04
     ee2:	82 fd       	sbrc	r24, 2
     ee4:	04 c0       	rjmp	.+8      	; 0xeee <usart_set_baudrate+0xaa>
		baud *= 2;
     ee6:	88 0c       	add	r8, r8
     ee8:	99 1c       	adc	r9, r9
     eea:	aa 1c       	adc	r10, r10
     eec:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     eee:	c3 01       	movw	r24, r6
     ef0:	b2 01       	movw	r22, r4
     ef2:	a5 01       	movw	r20, r10
     ef4:	94 01       	movw	r18, r8
     ef6:	0e 94 47 1b 	call	0x368e	; 0x368e <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     efa:	2f 3f       	cpi	r18, 0xFF	; 255
     efc:	31 05       	cpc	r19, r1
     efe:	41 05       	cpc	r20, r1
     f00:	51 05       	cpc	r21, r1
     f02:	08 f4       	brcc	.+2      	; 0xf06 <usart_set_baudrate+0xc2>
     f04:	90 c0       	rjmp	.+288    	; 0x1026 <usart_set_baudrate+0x1e2>
     f06:	8f ef       	ldi	r24, 0xFF	; 255
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	a0 e0       	ldi	r26, 0x00	; 0
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	c9 ef       	ldi	r28, 0xF9	; 249
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <usart_set_baudrate+0xd8>
     f12:	28 17       	cp	r18, r24
     f14:	39 07       	cpc	r19, r25
     f16:	4a 07       	cpc	r20, r26
     f18:	5b 07       	cpc	r21, r27
     f1a:	58 f0       	brcs	.+22     	; 0xf32 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	aa 1f       	adc	r26, r26
     f22:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     f24:	cd 3f       	cpi	r28, 0xFD	; 253
     f26:	0c f4       	brge	.+2      	; 0xf2a <usart_set_baudrate+0xe6>
			limit |= 1;
     f28:	81 60       	ori	r24, 0x01	; 1
     f2a:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     f2c:	c7 30       	cpi	r28, 0x07	; 7
     f2e:	89 f7       	brne	.-30     	; 0xf12 <usart_set_baudrate+0xce>
     f30:	4f c0       	rjmp	.+158    	; 0xfd0 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     f32:	cc 23       	and	r28, r28
     f34:	0c f0       	brlt	.+2      	; 0xf38 <usart_set_baudrate+0xf4>
     f36:	4c c0       	rjmp	.+152    	; 0xfd0 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     f38:	d5 01       	movw	r26, r10
     f3a:	c4 01       	movw	r24, r8
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	aa 1f       	adc	r26, r26
     f42:	bb 1f       	adc	r27, r27
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	aa 1f       	adc	r26, r26
     f4a:	bb 1f       	adc	r27, r27
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	aa 1f       	adc	r26, r26
     f52:	bb 1f       	adc	r27, r27
     f54:	48 1a       	sub	r4, r24
     f56:	59 0a       	sbc	r5, r25
     f58:	6a 0a       	sbc	r6, r26
     f5a:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     f5c:	ce 3f       	cpi	r28, 0xFE	; 254
     f5e:	f4 f4       	brge	.+60     	; 0xf9c <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     f60:	8d ef       	ldi	r24, 0xFD	; 253
     f62:	9f ef       	ldi	r25, 0xFF	; 255
     f64:	8c 1b       	sub	r24, r28
     f66:	91 09       	sbc	r25, r1
     f68:	c7 fd       	sbrc	r28, 7
     f6a:	93 95       	inc	r25
     f6c:	04 c0       	rjmp	.+8      	; 0xf76 <usart_set_baudrate+0x132>
     f6e:	44 0c       	add	r4, r4
     f70:	55 1c       	adc	r5, r5
     f72:	66 1c       	adc	r6, r6
     f74:	77 1c       	adc	r7, r7
     f76:	8a 95       	dec	r24
     f78:	d2 f7       	brpl	.-12     	; 0xf6e <usart_set_baudrate+0x12a>
     f7a:	d5 01       	movw	r26, r10
     f7c:	c4 01       	movw	r24, r8
     f7e:	b6 95       	lsr	r27
     f80:	a7 95       	ror	r26
     f82:	97 95       	ror	r25
     f84:	87 95       	ror	r24
     f86:	bc 01       	movw	r22, r24
     f88:	cd 01       	movw	r24, r26
     f8a:	64 0d       	add	r22, r4
     f8c:	75 1d       	adc	r23, r5
     f8e:	86 1d       	adc	r24, r6
     f90:	97 1d       	adc	r25, r7
     f92:	a5 01       	movw	r20, r10
     f94:	94 01       	movw	r18, r8
     f96:	0e 94 47 1b 	call	0x368e	; 0x368e <__udivmodsi4>
     f9a:	37 c0       	rjmp	.+110    	; 0x100a <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
     f9c:	83 e0       	ldi	r24, 0x03	; 3
     f9e:	8c 0f       	add	r24, r28
     fa0:	a5 01       	movw	r20, r10
     fa2:	94 01       	movw	r18, r8
     fa4:	04 c0       	rjmp	.+8      	; 0xfae <usart_set_baudrate+0x16a>
     fa6:	22 0f       	add	r18, r18
     fa8:	33 1f       	adc	r19, r19
     faa:	44 1f       	adc	r20, r20
     fac:	55 1f       	adc	r21, r21
     fae:	8a 95       	dec	r24
     fb0:	d2 f7       	brpl	.-12     	; 0xfa6 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
     fb2:	da 01       	movw	r26, r20
     fb4:	c9 01       	movw	r24, r18
     fb6:	b6 95       	lsr	r27
     fb8:	a7 95       	ror	r26
     fba:	97 95       	ror	r25
     fbc:	87 95       	ror	r24
     fbe:	bc 01       	movw	r22, r24
     fc0:	cd 01       	movw	r24, r26
     fc2:	64 0d       	add	r22, r4
     fc4:	75 1d       	adc	r23, r5
     fc6:	86 1d       	adc	r24, r6
     fc8:	97 1d       	adc	r25, r7
     fca:	0e 94 47 1b 	call	0x368e	; 0x368e <__udivmodsi4>
     fce:	1d c0       	rjmp	.+58     	; 0x100a <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     fd0:	83 e0       	ldi	r24, 0x03	; 3
     fd2:	8c 0f       	add	r24, r28
     fd4:	a5 01       	movw	r20, r10
     fd6:	94 01       	movw	r18, r8
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <usart_set_baudrate+0x19e>
     fda:	22 0f       	add	r18, r18
     fdc:	33 1f       	adc	r19, r19
     fde:	44 1f       	adc	r20, r20
     fe0:	55 1f       	adc	r21, r21
     fe2:	8a 95       	dec	r24
     fe4:	d2 f7       	brpl	.-12     	; 0xfda <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
     fe6:	da 01       	movw	r26, r20
     fe8:	c9 01       	movw	r24, r18
     fea:	b6 95       	lsr	r27
     fec:	a7 95       	ror	r26
     fee:	97 95       	ror	r25
     ff0:	87 95       	ror	r24
     ff2:	bc 01       	movw	r22, r24
     ff4:	cd 01       	movw	r24, r26
     ff6:	64 0d       	add	r22, r4
     ff8:	75 1d       	adc	r23, r5
     ffa:	86 1d       	adc	r24, r6
     ffc:	97 1d       	adc	r25, r7
     ffe:	0e 94 47 1b 	call	0x368e	; 0x368e <__udivmodsi4>
    1002:	21 50       	subi	r18, 0x01	; 1
    1004:	31 09       	sbc	r19, r1
    1006:	41 09       	sbc	r20, r1
    1008:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    100a:	83 2f       	mov	r24, r19
    100c:	8f 70       	andi	r24, 0x0F	; 15
    100e:	c2 95       	swap	r28
    1010:	c0 7f       	andi	r28, 0xF0	; 240
    1012:	c8 2b       	or	r28, r24
    1014:	f7 01       	movw	r30, r14
    1016:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1018:	26 83       	std	Z+6, r18	; 0x06

	return true;
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	18 c0       	rjmp	.+48     	; 0x104e <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	16 c0       	rjmp	.+44     	; 0x104e <usart_set_baudrate+0x20a>
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	14 c0       	rjmp	.+40     	; 0x104e <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1026:	d5 01       	movw	r26, r10
    1028:	c4 01       	movw	r24, r8
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	aa 1f       	adc	r26, r26
    1030:	bb 1f       	adc	r27, r27
    1032:	88 0f       	add	r24, r24
    1034:	99 1f       	adc	r25, r25
    1036:	aa 1f       	adc	r26, r26
    1038:	bb 1f       	adc	r27, r27
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	aa 1f       	adc	r26, r26
    1040:	bb 1f       	adc	r27, r27
    1042:	48 1a       	sub	r4, r24
    1044:	59 0a       	sbc	r5, r25
    1046:	6a 0a       	sbc	r6, r26
    1048:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    104a:	c9 ef       	ldi	r28, 0xF9	; 249
    104c:	89 cf       	rjmp	.-238    	; 0xf60 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	ff 90       	pop	r15
    1056:	ef 90       	pop	r14
    1058:	bf 90       	pop	r11
    105a:	af 90       	pop	r10
    105c:	9f 90       	pop	r9
    105e:	8f 90       	pop	r8
    1060:	7f 90       	pop	r7
    1062:	6f 90       	pop	r6
    1064:	5f 90       	pop	r5
    1066:	4f 90       	pop	r4
    1068:	08 95       	ret

0000106a <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	ec 01       	movw	r28, r24
    1074:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	09 f4       	brne	.+2      	; 0x107c <usart_init_rs232+0x12>
    107a:	36 c1       	rjmp	.+620    	; 0x12e8 <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    107c:	80 3c       	cpi	r24, 0xC0	; 192
    107e:	91 05       	cpc	r25, r1
    1080:	21 f4       	brne	.+8      	; 0x108a <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1082:	60 e1       	ldi	r22, 0x10	; 16
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	97 dc       	rcall	.-1746   	; 0x9b6 <sysclk_enable_module>
    1088:	2f c1       	rjmp	.+606    	; 0x12e8 <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    108a:	c0 34       	cpi	r28, 0x40	; 64
    108c:	84 e0       	ldi	r24, 0x04	; 4
    108e:	d8 07       	cpc	r29, r24
    1090:	21 f4       	brne	.+8      	; 0x109a <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1092:	68 e0       	ldi	r22, 0x08	; 8
    1094:	80 e0       	ldi	r24, 0x00	; 0
    1096:	8f dc       	rcall	.-1762   	; 0x9b6 <sysclk_enable_module>
    1098:	27 c1       	rjmp	.+590    	; 0x12e8 <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    109a:	c1 15       	cp	r28, r1
    109c:	e4 e0       	ldi	r30, 0x04	; 4
    109e:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    10a0:	21 f4       	brne	.+8      	; 0x10aa <usart_init_rs232+0x40>
    10a2:	64 e0       	ldi	r22, 0x04	; 4
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	87 dc       	rcall	.-1778   	; 0x9b6 <sysclk_enable_module>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    10a8:	1f c1       	rjmp	.+574    	; 0x12e8 <usart_init_rs232+0x27e>
    10aa:	c0 38       	cpi	r28, 0x80	; 128
    10ac:	f1 e0       	ldi	r31, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    10ae:	df 07       	cpc	r29, r31
    10b0:	21 f4       	brne	.+8      	; 0x10ba <usart_init_rs232+0x50>
    10b2:	62 e0       	ldi	r22, 0x02	; 2
    10b4:	80 e0       	ldi	r24, 0x00	; 0
    10b6:	7f dc       	rcall	.-1794   	; 0x9b6 <sysclk_enable_module>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    10b8:	17 c1       	rjmp	.+558    	; 0x12e8 <usart_init_rs232+0x27e>
    10ba:	c1 15       	cp	r28, r1
    10bc:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    10be:	d8 07       	cpc	r29, r24
    10c0:	21 f4       	brne	.+8      	; 0x10ca <usart_init_rs232+0x60>
    10c2:	61 e0       	ldi	r22, 0x01	; 1
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	77 dc       	rcall	.-1810   	; 0x9b6 <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    10c8:	0f c1       	rjmp	.+542    	; 0x12e8 <usart_init_rs232+0x27e>
    10ca:	c0 38       	cpi	r28, 0x80	; 128
    10cc:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    10ce:	de 07       	cpc	r29, r30
    10d0:	21 f4       	brne	.+8      	; 0x10da <usart_init_rs232+0x70>
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    10d6:	6f dc       	rcall	.-1826   	; 0x9b6 <sysclk_enable_module>
    10d8:	07 c1       	rjmp	.+526    	; 0x12e8 <usart_init_rs232+0x27e>
    10da:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    10dc:	f3 e0       	ldi	r31, 0x03	; 3
    10de:	df 07       	cpc	r29, r31
    10e0:	21 f4       	brne	.+8      	; 0x10ea <usart_init_rs232+0x80>
    10e2:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    10e4:	82 e0       	ldi	r24, 0x02	; 2
    10e6:	67 dc       	rcall	.-1842   	; 0x9b6 <sysclk_enable_module>
    10e8:	ff c0       	rjmp	.+510    	; 0x12e8 <usart_init_rs232+0x27e>
    10ea:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    10ec:	82 e0       	ldi	r24, 0x02	; 2
    10ee:	d8 07       	cpc	r29, r24
    10f0:	21 f4       	brne	.+8      	; 0x10fa <usart_init_rs232+0x90>
    10f2:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	5f dc       	rcall	.-1858   	; 0x9b6 <sysclk_enable_module>
    10f8:	f7 c0       	rjmp	.+494    	; 0x12e8 <usart_init_rs232+0x27e>
    10fa:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    10fc:	e2 e0       	ldi	r30, 0x02	; 2
    10fe:	de 07       	cpc	r29, r30
    1100:	21 f4       	brne	.+8      	; 0x110a <usart_init_rs232+0xa0>
    1102:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	57 dc       	rcall	.-1874   	; 0x9b6 <sysclk_enable_module>
    1108:	ef c0       	rjmp	.+478    	; 0x12e8 <usart_init_rs232+0x27e>
    110a:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    110c:	f3 e0       	ldi	r31, 0x03	; 3
    110e:	df 07       	cpc	r29, r31
    1110:	21 f4       	brne	.+8      	; 0x111a <usart_init_rs232+0xb0>
    1112:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	4f dc       	rcall	.-1890   	; 0x9b6 <sysclk_enable_module>
    1118:	e7 c0       	rjmp	.+462    	; 0x12e8 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    111a:	c0 32       	cpi	r28, 0x20	; 32
    111c:	83 e0       	ldi	r24, 0x03	; 3
    111e:	d8 07       	cpc	r29, r24
    1120:	21 f4       	brne	.+8      	; 0x112a <usart_init_rs232+0xc0>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1122:	64 e0       	ldi	r22, 0x04	; 4
    1124:	82 e0       	ldi	r24, 0x02	; 2
    1126:	47 dc       	rcall	.-1906   	; 0x9b6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1128:	df c0       	rjmp	.+446    	; 0x12e8 <usart_init_rs232+0x27e>
    112a:	c1 15       	cp	r28, r1
    112c:	e8 e0       	ldi	r30, 0x08	; 8
    112e:	de 07       	cpc	r29, r30
    1130:	21 f4       	brne	.+8      	; 0x113a <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	83 e0       	ldi	r24, 0x03	; 3
    1136:	3f dc       	rcall	.-1922   	; 0x9b6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1138:	d7 c0       	rjmp	.+430    	; 0x12e8 <usart_init_rs232+0x27e>
    113a:	c1 15       	cp	r28, r1
    113c:	f9 e0       	ldi	r31, 0x09	; 9
    113e:	df 07       	cpc	r29, r31
    1140:	21 f4       	brne	.+8      	; 0x114a <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1142:	61 e0       	ldi	r22, 0x01	; 1
    1144:	84 e0       	ldi	r24, 0x04	; 4
    1146:	37 dc       	rcall	.-1938   	; 0x9b6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1148:	cf c0       	rjmp	.+414    	; 0x12e8 <usart_init_rs232+0x27e>
    114a:	c1 15       	cp	r28, r1
    114c:	8a e0       	ldi	r24, 0x0A	; 10
    114e:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1150:	21 f4       	brne	.+8      	; 0x115a <usart_init_rs232+0xf0>
    1152:	61 e0       	ldi	r22, 0x01	; 1
    1154:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1156:	2f dc       	rcall	.-1954   	; 0x9b6 <sysclk_enable_module>
    1158:	c7 c0       	rjmp	.+398    	; 0x12e8 <usart_init_rs232+0x27e>
    115a:	c1 15       	cp	r28, r1
    115c:	eb e0       	ldi	r30, 0x0B	; 11
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    115e:	de 07       	cpc	r29, r30
    1160:	21 f4       	brne	.+8      	; 0x116a <usart_init_rs232+0x100>
    1162:	61 e0       	ldi	r22, 0x01	; 1
    1164:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1166:	27 dc       	rcall	.-1970   	; 0x9b6 <sysclk_enable_module>
    1168:	bf c0       	rjmp	.+382    	; 0x12e8 <usart_init_rs232+0x27e>
    116a:	c0 34       	cpi	r28, 0x40	; 64
    116c:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    116e:	df 07       	cpc	r29, r31
    1170:	21 f4       	brne	.+8      	; 0x117a <usart_init_rs232+0x110>
    1172:	62 e0       	ldi	r22, 0x02	; 2
    1174:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1176:	1f dc       	rcall	.-1986   	; 0x9b6 <sysclk_enable_module>
    1178:	b7 c0       	rjmp	.+366    	; 0x12e8 <usart_init_rs232+0x27e>
    117a:	c0 34       	cpi	r28, 0x40	; 64
    117c:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    117e:	d8 07       	cpc	r29, r24
    1180:	21 f4       	brne	.+8      	; 0x118a <usart_init_rs232+0x120>
    1182:	62 e0       	ldi	r22, 0x02	; 2
    1184:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1186:	17 dc       	rcall	.-2002   	; 0x9b6 <sysclk_enable_module>
    1188:	af c0       	rjmp	.+350    	; 0x12e8 <usart_init_rs232+0x27e>
    118a:	c0 34       	cpi	r28, 0x40	; 64
    118c:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    118e:	de 07       	cpc	r29, r30
    1190:	21 f4       	brne	.+8      	; 0x119a <usart_init_rs232+0x130>
    1192:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1194:	85 e0       	ldi	r24, 0x05	; 5
    1196:	0f dc       	rcall	.-2018   	; 0x9b6 <sysclk_enable_module>
    1198:	a7 c0       	rjmp	.+334    	; 0x12e8 <usart_init_rs232+0x27e>
    119a:	c0 34       	cpi	r28, 0x40	; 64
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    119c:	fb e0       	ldi	r31, 0x0B	; 11
    119e:	df 07       	cpc	r29, r31
    11a0:	21 f4       	brne	.+8      	; 0x11aa <usart_init_rs232+0x140>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    11a2:	62 e0       	ldi	r22, 0x02	; 2
    11a4:	86 e0       	ldi	r24, 0x06	; 6
    11a6:	07 dc       	rcall	.-2034   	; 0x9b6 <sysclk_enable_module>
    11a8:	9f c0       	rjmp	.+318    	; 0x12e8 <usart_init_rs232+0x27e>
    11aa:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    11ac:	88 e0       	ldi	r24, 0x08	; 8
    11ae:	d8 07       	cpc	r29, r24
    11b0:	21 f4       	brne	.+8      	; 0x11ba <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    11b2:	64 e0       	ldi	r22, 0x04	; 4
    11b4:	83 e0       	ldi	r24, 0x03	; 3
    11b6:	ff db       	rcall	.-2050   	; 0x9b6 <sysclk_enable_module>
    11b8:	97 c0       	rjmp	.+302    	; 0x12e8 <usart_init_rs232+0x27e>
    11ba:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    11bc:	e9 e0       	ldi	r30, 0x09	; 9
    11be:	de 07       	cpc	r29, r30
    11c0:	21 f4       	brne	.+8      	; 0x11ca <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    11c2:	64 e0       	ldi	r22, 0x04	; 4
    11c4:	84 e0       	ldi	r24, 0x04	; 4
    11c6:	f7 db       	rcall	.-2066   	; 0x9b6 <sysclk_enable_module>
    11c8:	8f c0       	rjmp	.+286    	; 0x12e8 <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    11ca:	c0 39       	cpi	r28, 0x90	; 144
    11cc:	fa e0       	ldi	r31, 0x0A	; 10
    11ce:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    11d0:	21 f4       	brne	.+8      	; 0x11da <usart_init_rs232+0x170>
    11d2:	64 e0       	ldi	r22, 0x04	; 4
    11d4:	85 e0       	ldi	r24, 0x05	; 5
    11d6:	ef db       	rcall	.-2082   	; 0x9b6 <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    11d8:	87 c0       	rjmp	.+270    	; 0x12e8 <usart_init_rs232+0x27e>
    11da:	c0 39       	cpi	r28, 0x90	; 144
    11dc:	8b e0       	ldi	r24, 0x0B	; 11
    11de:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    11e0:	21 f4       	brne	.+8      	; 0x11ea <usart_init_rs232+0x180>
    11e2:	64 e0       	ldi	r22, 0x04	; 4
    11e4:	86 e0       	ldi	r24, 0x06	; 6
    11e6:	e7 db       	rcall	.-2098   	; 0x9b6 <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    11e8:	7f c0       	rjmp	.+254    	; 0x12e8 <usart_init_rs232+0x27e>
    11ea:	c0 3c       	cpi	r28, 0xC0	; 192
    11ec:	e8 e0       	ldi	r30, 0x08	; 8
    11ee:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    11f0:	21 f4       	brne	.+8      	; 0x11fa <usart_init_rs232+0x190>
    11f2:	68 e0       	ldi	r22, 0x08	; 8
    11f4:	83 e0       	ldi	r24, 0x03	; 3
    11f6:	df db       	rcall	.-2114   	; 0x9b6 <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    11f8:	77 c0       	rjmp	.+238    	; 0x12e8 <usart_init_rs232+0x27e>
    11fa:	c0 3c       	cpi	r28, 0xC0	; 192
    11fc:	f9 e0       	ldi	r31, 0x09	; 9
    11fe:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1200:	21 f4       	brne	.+8      	; 0x120a <usart_init_rs232+0x1a0>
    1202:	68 e0       	ldi	r22, 0x08	; 8
    1204:	84 e0       	ldi	r24, 0x04	; 4
    1206:	d7 db       	rcall	.-2130   	; 0x9b6 <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1208:	6f c0       	rjmp	.+222    	; 0x12e8 <usart_init_rs232+0x27e>
    120a:	c0 3c       	cpi	r28, 0xC0	; 192
    120c:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    120e:	d8 07       	cpc	r29, r24
    1210:	21 f4       	brne	.+8      	; 0x121a <usart_init_rs232+0x1b0>
    1212:	68 e0       	ldi	r22, 0x08	; 8
    1214:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1216:	cf db       	rcall	.-2146   	; 0x9b6 <sysclk_enable_module>
    1218:	67 c0       	rjmp	.+206    	; 0x12e8 <usart_init_rs232+0x27e>
    121a:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    121c:	eb e0       	ldi	r30, 0x0B	; 11
    121e:	de 07       	cpc	r29, r30
    1220:	21 f4       	brne	.+8      	; 0x122a <usart_init_rs232+0x1c0>
    1222:	68 e0       	ldi	r22, 0x08	; 8
    1224:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1226:	c7 db       	rcall	.-2162   	; 0x9b6 <sysclk_enable_module>
    1228:	5f c0       	rjmp	.+190    	; 0x12e8 <usart_init_rs232+0x27e>
    122a:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    122c:	f8 e0       	ldi	r31, 0x08	; 8
    122e:	df 07       	cpc	r29, r31
    1230:	21 f4       	brne	.+8      	; 0x123a <usart_init_rs232+0x1d0>
    1232:	60 e1       	ldi	r22, 0x10	; 16
    1234:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1236:	bf db       	rcall	.-2178   	; 0x9b6 <sysclk_enable_module>
    1238:	57 c0       	rjmp	.+174    	; 0x12e8 <usart_init_rs232+0x27e>
    123a:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    123c:	89 e0       	ldi	r24, 0x09	; 9
    123e:	d8 07       	cpc	r29, r24
    1240:	21 f4       	brne	.+8      	; 0x124a <usart_init_rs232+0x1e0>
    1242:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1244:	84 e0       	ldi	r24, 0x04	; 4
    1246:	b7 db       	rcall	.-2194   	; 0x9b6 <sysclk_enable_module>
    1248:	4f c0       	rjmp	.+158    	; 0x12e8 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    124a:	c0 3a       	cpi	r28, 0xA0	; 160
    124c:	ea e0       	ldi	r30, 0x0A	; 10
    124e:	de 07       	cpc	r29, r30
    1250:	21 f4       	brne	.+8      	; 0x125a <usart_init_rs232+0x1f0>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1252:	60 e1       	ldi	r22, 0x10	; 16
    1254:	85 e0       	ldi	r24, 0x05	; 5
    1256:	af db       	rcall	.-2210   	; 0x9b6 <sysclk_enable_module>
    1258:	47 c0       	rjmp	.+142    	; 0x12e8 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    125a:	c0 3a       	cpi	r28, 0xA0	; 160
    125c:	fb e0       	ldi	r31, 0x0B	; 11
    125e:	df 07       	cpc	r29, r31
    1260:	21 f4       	brne	.+8      	; 0x126a <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1262:	60 e1       	ldi	r22, 0x10	; 16
    1264:	86 e0       	ldi	r24, 0x06	; 6
    1266:	a7 db       	rcall	.-2226   	; 0x9b6 <sysclk_enable_module>
    1268:	3f c0       	rjmp	.+126    	; 0x12e8 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    126a:	c0 3b       	cpi	r28, 0xB0	; 176
    126c:	88 e0       	ldi	r24, 0x08	; 8
    126e:	d8 07       	cpc	r29, r24
    1270:	21 f4       	brne	.+8      	; 0x127a <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1272:	60 e2       	ldi	r22, 0x20	; 32
    1274:	83 e0       	ldi	r24, 0x03	; 3
    1276:	9f db       	rcall	.-2242   	; 0x9b6 <sysclk_enable_module>
    1278:	37 c0       	rjmp	.+110    	; 0x12e8 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    127a:	c0 3b       	cpi	r28, 0xB0	; 176
    127c:	e9 e0       	ldi	r30, 0x09	; 9
    127e:	de 07       	cpc	r29, r30
    1280:	21 f4       	brne	.+8      	; 0x128a <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1282:	60 e2       	ldi	r22, 0x20	; 32
    1284:	84 e0       	ldi	r24, 0x04	; 4
    1286:	97 db       	rcall	.-2258   	; 0x9b6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1288:	2f c0       	rjmp	.+94     	; 0x12e8 <usart_init_rs232+0x27e>
    128a:	c0 3b       	cpi	r28, 0xB0	; 176
    128c:	fa e0       	ldi	r31, 0x0A	; 10
    128e:	df 07       	cpc	r29, r31
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1290:	21 f4       	brne	.+8      	; 0x129a <usart_init_rs232+0x230>
    1292:	60 e2       	ldi	r22, 0x20	; 32
    1294:	85 e0       	ldi	r24, 0x05	; 5
    1296:	8f db       	rcall	.-2274   	; 0x9b6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1298:	27 c0       	rjmp	.+78     	; 0x12e8 <usart_init_rs232+0x27e>
    129a:	c0 3b       	cpi	r28, 0xB0	; 176
    129c:	8b e0       	ldi	r24, 0x0B	; 11
    129e:	d8 07       	cpc	r29, r24
    12a0:	21 f4       	brne	.+8      	; 0x12aa <usart_init_rs232+0x240>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    12a2:	60 e2       	ldi	r22, 0x20	; 32
    12a4:	86 e0       	ldi	r24, 0x06	; 6
    12a6:	87 db       	rcall	.-2290   	; 0x9b6 <sysclk_enable_module>
    12a8:	1f c0       	rjmp	.+62     	; 0x12e8 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    12aa:	c0 38       	cpi	r28, 0x80	; 128
    12ac:	e4 e0       	ldi	r30, 0x04	; 4
    12ae:	de 07       	cpc	r29, r30
    12b0:	21 f4       	brne	.+8      	; 0x12ba <usart_init_rs232+0x250>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    12b2:	60 e4       	ldi	r22, 0x40	; 64
    12b4:	83 e0       	ldi	r24, 0x03	; 3
    12b6:	7f db       	rcall	.-2306   	; 0x9b6 <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    12b8:	17 c0       	rjmp	.+46     	; 0x12e8 <usart_init_rs232+0x27e>
    12ba:	c0 39       	cpi	r28, 0x90	; 144
    12bc:	f4 e0       	ldi	r31, 0x04	; 4
    12be:	df 07       	cpc	r29, r31
    12c0:	21 f4       	brne	.+8      	; 0x12ca <usart_init_rs232+0x260>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    12c2:	60 e4       	ldi	r22, 0x40	; 64
    12c4:	84 e0       	ldi	r24, 0x04	; 4
    12c6:	77 db       	rcall	.-2322   	; 0x9b6 <sysclk_enable_module>
    12c8:	0f c0       	rjmp	.+30     	; 0x12e8 <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    12ca:	c0 3a       	cpi	r28, 0xA0	; 160
    12cc:	84 e0       	ldi	r24, 0x04	; 4
    12ce:	d8 07       	cpc	r29, r24
    12d0:	21 f4       	brne	.+8      	; 0x12da <usart_init_rs232+0x270>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    12d2:	60 e4       	ldi	r22, 0x40	; 64
    12d4:	85 e0       	ldi	r24, 0x05	; 5
    12d6:	6f db       	rcall	.-2338   	; 0x9b6 <sysclk_enable_module>
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    12d8:	07 c0       	rjmp	.+14     	; 0x12e8 <usart_init_rs232+0x27e>
    12da:	c0 3b       	cpi	r28, 0xB0	; 176
    12dc:	e4 e0       	ldi	r30, 0x04	; 4
    12de:	de 07       	cpc	r29, r30
    12e0:	19 f4       	brne	.+6      	; 0x12e8 <usart_init_rs232+0x27e>
    12e2:	60 e4       	ldi	r22, 0x40	; 64
    12e4:	86 e0       	ldi	r24, 0x06	; 6
    12e6:	67 db       	rcall	.-2354   	; 0x9b6 <sysclk_enable_module>
    12e8:	8d 81       	ldd	r24, Y+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    12ea:	8f 73       	andi	r24, 0x3F	; 63
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	f8 01       	movw	r30, r16
    12f0:	95 81       	ldd	r25, Z+5	; 0x05
    12f2:	84 81       	ldd	r24, Z+4	; 0x04
    12f4:	89 2b       	or	r24, r25
    12f6:	96 81       	ldd	r25, Z+6	; 0x06
    12f8:	91 11       	cpse	r25, r1
    12fa:	98 e0       	ldi	r25, 0x08	; 8
    12fc:	89 2b       	or	r24, r25
    12fe:	8d 83       	std	Y+5, r24	; 0x05
    1300:	f8 01       	movw	r30, r16
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1302:	40 81       	ld	r20, Z
    1304:	51 81       	ldd	r21, Z+1	; 0x01
    1306:	62 81       	ldd	r22, Z+2	; 0x02
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1308:	73 81       	ldd	r23, Z+3	; 0x03
    130a:	00 e0       	ldi	r16, 0x00	; 0
    130c:	18 e4       	ldi	r17, 0x48	; 72
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    130e:	28 ee       	ldi	r18, 0xE8	; 232
    1310:	31 e0       	ldi	r19, 0x01	; 1
    1312:	ce 01       	movw	r24, r28
    1314:	97 dd       	rcall	.-1234   	; 0xe44 <usart_set_baudrate>
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	98 60       	ori	r25, 0x08	; 8
    131a:	9c 83       	std	Y+4, r25	; 0x04
    131c:	9c 81       	ldd	r25, Y+4	; 0x04
    131e:	90 61       	ori	r25, 0x10	; 16
    1320:	9c 83       	std	Y+4, r25	; 0x04
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	08 95       	ret

0000132c <Get_altitude>:
	//printf("altitude = %f \n", (float)altitude);
	return altitude;
}*/

//Old, working function. Uses TEMP from pressure sensor calculations. May as well use
float Get_altitude(uint32_t initial, uint32_t pressure){
    132c:	8f 92       	push	r8
    132e:	9f 92       	push	r9
    1330:	af 92       	push	r10
    1332:	bf 92       	push	r11
    1334:	cf 92       	push	r12
    1336:	df 92       	push	r13
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	49 01       	movw	r8, r18
    133e:	5a 01       	movw	r10, r20
	//printf("temperature = %li \n", TEMP/100);
	//float altitude = (((287.058 * (((float)(TEMP)/100)+273.15)/9.8))*log((float)initial/get_pressure())*3.28);	Not this one, this one's bad
	//float altitude = (pow(((initial/100)/(pressure/100)),(1/5.257))-1)*((TEMP/100)+273.15)/.0065; //This is now right, just gotta use the thermistor
	float altitude = ( (float)initial-(float)pressure) / (1.225f * 9.81f);
	//printf("altitude = %f \n", (float)altitude);
	return altitude;
    1340:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__floatunsisf>
    1344:	6b 01       	movw	r12, r22
    1346:	7c 01       	movw	r14, r24
    1348:	c5 01       	movw	r24, r10
    134a:	b4 01       	movw	r22, r8
    134c:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__floatunsisf>
    1350:	9b 01       	movw	r18, r22
    1352:	ac 01       	movw	r20, r24
    1354:	c7 01       	movw	r24, r14
    1356:	b6 01       	movw	r22, r12
    1358:	0e 94 c1 15 	call	0x2b82	; 0x2b82 <__subsf3>
    135c:	29 ea       	ldi	r18, 0xA9	; 169
    135e:	36 e4       	ldi	r19, 0x46	; 70
    1360:	40 e4       	ldi	r20, 0x40	; 64
    1362:	51 e4       	ldi	r21, 0x41	; 65
    1364:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__divsf3>
}
    1368:	ff 90       	pop	r15
    136a:	ef 90       	pop	r14
    136c:	df 90       	pop	r13
    136e:	cf 90       	pop	r12
    1370:	bf 90       	pop	r11
    1372:	af 90       	pop	r10
    1374:	9f 90       	pop	r9
    1376:	8f 90       	pop	r8
    1378:	08 95       	ret

0000137a <init_GPS_pins_and_usart>:
		{
			return i;
		}
	}
	return i+1;
}
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	27 97       	sbiw	r28, 0x07	; 7
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	e0 e6       	ldi	r30, 0x60	; 96
    138a:	f6 e0       	ldi	r31, 0x06	; 6
    138c:	80 81       	ld	r24, Z
    138e:	80 68       	ori	r24, 0x80	; 128
    1390:	80 83       	st	Z, r24
    1392:	80 81       	ld	r24, Z
    1394:	8f 7b       	andi	r24, 0xBF	; 191
    1396:	80 83       	st	Z, r24
    1398:	80 e8       	ldi	r24, 0x80	; 128
    139a:	85 83       	std	Z+5, r24	; 0x05
    139c:	60 e2       	ldi	r22, 0x20	; 32
    139e:	84 e0       	ldi	r24, 0x04	; 4
    13a0:	0a db       	rcall	.-2540   	; 0x9b6 <sysclk_enable_module>
    13a2:	e6 e0       	ldi	r30, 0x06	; 6
    13a4:	f0 e2       	ldi	r31, 0x20	; 32
    13a6:	84 81       	ldd	r24, Z+4	; 0x04
    13a8:	8d 83       	std	Y+5, r24	; 0x05
    13aa:	85 81       	ldd	r24, Z+5	; 0x05
    13ac:	8e 83       	std	Y+6, r24	; 0x06
    13ae:	86 81       	ldd	r24, Z+6	; 0x06
    13b0:	8f 83       	std	Y+7, r24	; 0x07
    13b2:	80 81       	ld	r24, Z
    13b4:	91 81       	ldd	r25, Z+1	; 0x01
    13b6:	a2 81       	ldd	r26, Z+2	; 0x02
    13b8:	b3 81       	ldd	r27, Z+3	; 0x03
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	ab 83       	std	Y+3, r26	; 0x03
    13c0:	bc 83       	std	Y+4, r27	; 0x04
    13c2:	60 e2       	ldi	r22, 0x20	; 32
    13c4:	84 e0       	ldi	r24, 0x04	; 4
    13c6:	f7 da       	rcall	.-2578   	; 0x9b6 <sysclk_enable_module>
    13c8:	be 01       	movw	r22, r28
    13ca:	6f 5f       	subi	r22, 0xFF	; 255
    13cc:	7f 4f       	sbci	r23, 0xFF	; 255
    13ce:	80 eb       	ldi	r24, 0xB0	; 176
    13d0:	99 e0       	ldi	r25, 0x09	; 9
    13d2:	4b de       	rcall	.-874    	; 0x106a <usart_init_rs232>
    13d4:	27 96       	adiw	r28, 0x07	; 7
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	08 95       	ret

000013e0 <startswith>:
    13e0:	dc 01       	movw	r26, r24
    13e2:	fb 01       	movw	r30, r22
    13e4:	80 81       	ld	r24, Z
    13e6:	88 23       	and	r24, r24
    13e8:	01 f1       	breq	.+64     	; 0x142a <startswith+0x4a>
    13ea:	08 2e       	mov	r0, r24
    13ec:	00 0c       	add	r0, r0
    13ee:	99 0b       	sbc	r25, r25
    13f0:	2c 91       	ld	r18, X
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	82 17       	cp	r24, r18
    13f6:	93 07       	cpc	r25, r19
    13f8:	d1 f4       	brne	.+52     	; 0x142e <startswith+0x4e>
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0b c0       	rjmp	.+22     	; 0x1414 <startswith+0x34>
    13fe:	02 2e       	mov	r0, r18
    1400:	00 0c       	add	r0, r0
    1402:	33 0b       	sbc	r19, r19
    1404:	fd 01       	movw	r30, r26
    1406:	e4 0f       	add	r30, r20
    1408:	f5 1f       	adc	r31, r21
    140a:	40 81       	ld	r20, Z
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	24 17       	cp	r18, r20
    1410:	35 07       	cpc	r19, r21
    1412:	79 f4       	brne	.+30     	; 0x1432 <startswith+0x52>
    1414:	9f 5f       	subi	r25, 0xFF	; 255
    1416:	49 2f       	mov	r20, r25
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	fb 01       	movw	r30, r22
    141c:	e4 0f       	add	r30, r20
    141e:	f5 1f       	adc	r31, r21
    1420:	20 81       	ld	r18, Z
    1422:	21 11       	cpse	r18, r1
    1424:	ec cf       	rjmp	.-40     	; 0x13fe <startswith+0x1e>
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	08 95       	ret
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	08 95       	ret
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	08 95       	ret
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	08 95       	ret

00001436 <getGPSDatafromNMEA>:

GPS_data_t getGPSDatafromNMEA(uint8_t* NMEA_sentence, uint8_t sentencelength)
{
    1436:	2f 92       	push	r2
    1438:	3f 92       	push	r3
    143a:	4f 92       	push	r4
    143c:	5f 92       	push	r5
    143e:	6f 92       	push	r6
    1440:	7f 92       	push	r7
    1442:	8f 92       	push	r8
    1444:	9f 92       	push	r9
    1446:	af 92       	push	r10
    1448:	bf 92       	push	r11
    144a:	cf 92       	push	r12
    144c:	df 92       	push	r13
    144e:	ef 92       	push	r14
    1450:	ff 92       	push	r15
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	a2 97       	sbiw	r28, 0x22	; 34
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	4c 01       	movw	r8, r24
    1466:	69 83       	std	Y+1, r22	; 0x01
    1468:	7a 83       	std	Y+2, r23	; 0x02
    146a:	24 2e       	mov	r2, r20
	uint8_t speedwritten=0;
	uint8_t heightwritten=0;
	uint8_t no_of_sateliiteswritten=0;
	uint8_t comma_position=0;
	int a=0;
	if (startswith(NMEA_sentence, "$GPGGA"))
    146c:	61 e2       	ldi	r22, 0x21	; 33
    146e:	70 e2       	ldi	r23, 0x20	; 32
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	b5 df       	rcall	.-150    	; 0x13e0 <startswith>
    1476:	88 23       	and	r24, r24
    1478:	09 f4       	brne	.+2      	; 0x147c <getGPSDatafromNMEA+0x46>
    147a:	49 c2       	rjmp	.+1170   	; 0x190e <getGPSDatafromNMEA+0x4d8>
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    147c:	31 2c       	mov	r3, r1
    147e:	12 14       	cp	r1, r2
    1480:	13 04       	cpc	r1, r3
    1482:	0c f0       	brlt	.+2      	; 0x1486 <getGPSDatafromNMEA+0x50>
    1484:	44 c2       	rjmp	.+1160   	; 0x190e <getGPSDatafromNMEA+0x4d8>
    1486:	49 80       	ldd	r4, Y+1	; 0x01
    1488:	5a 80       	ldd	r5, Y+2	; 0x02
    148a:	00 e0       	ldi	r16, 0x00	; 0
    148c:	10 e0       	ldi	r17, 0x00	; 0
    148e:	f1 2c       	mov	r15, r1
										 + 1000l*(NMEA_sentence[a+7] - '0')
										  + 100l*(NMEA_sentence[a+8] - '0')
										   + 10l*(NMEA_sentence[a+9] - '0')
										       + (NMEA_sentence[a+10] - '0');
					//printf("%lu\n",GPSData.lonminutes);
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
    1490:	df 2c       	mov	r13, r15
    1492:	48 a2       	std	Y+32, r4	; 0x20
    1494:	59 a2       	std	Y+33, r5	; 0x21
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
		{
			//printf("hate6");
			if (NMEA_sentence[a]==',')
    1496:	a8 a1       	ldd	r26, Y+32	; 0x20
    1498:	b9 a1       	ldd	r27, Y+33	; 0x21
    149a:	8d 91       	ld	r24, X+
    149c:	a8 a3       	std	Y+32, r26	; 0x20
    149e:	b9 a3       	std	Y+33, r27	; 0x21
    14a0:	8c 32       	cpi	r24, 0x2C	; 44
    14a2:	09 f0       	breq	.+2      	; 0x14a6 <getGPSDatafromNMEA+0x70>
    14a4:	2e c2       	rjmp	.+1116   	; 0x1902 <getGPSDatafromNMEA+0x4cc>
			{
				//printf("gfhghhf");
				countcommas++;
    14a6:	d3 94       	inc	r13
				if (countcommas == 1)
    14a8:	b1 e0       	ldi	r27, 0x01	; 1
    14aa:	db 12       	cpse	r13, r27
    14ac:	23 c0       	rjmp	.+70     	; 0x14f4 <getGPSDatafromNMEA+0xbe>
				{
					//printf("Begin %u, end %u\n", NMEA_sentence[a + 1] - '0', NMEA_sentence[a + 2] - '0');
					GPSData.hour = 10 * (NMEA_sentence[a + 1] - (uint8_t)'0') + (NMEA_sentence[a + 2] - (uint8_t)'0');
    14ae:	e8 a1       	ldd	r30, Y+32	; 0x20
    14b0:	f9 a1       	ldd	r31, Y+33	; 0x21
    14b2:	80 81       	ld	r24, Z
    14b4:	88 0f       	add	r24, r24
    14b6:	80 56       	subi	r24, 0x60	; 96
    14b8:	98 2f       	mov	r25, r24
    14ba:	99 0f       	add	r25, r25
    14bc:	99 0f       	add	r25, r25
    14be:	89 0f       	add	r24, r25
    14c0:	91 81       	ldd	r25, Z+1	; 0x01
    14c2:	90 53       	subi	r25, 0x30	; 48
    14c4:	89 0f       	add	r24, r25
    14c6:	8d 87       	std	Y+13, r24	; 0x0d
					GPSData.minutes = 10 * (NMEA_sentence[a + 3] - '0') + NMEA_sentence[a + 4] - '0';
    14c8:	82 81       	ldd	r24, Z+2	; 0x02
    14ca:	88 0f       	add	r24, r24
    14cc:	80 56       	subi	r24, 0x60	; 96
    14ce:	98 2f       	mov	r25, r24
    14d0:	99 0f       	add	r25, r25
    14d2:	99 0f       	add	r25, r25
    14d4:	89 0f       	add	r24, r25
    14d6:	93 81       	ldd	r25, Z+3	; 0x03
    14d8:	90 53       	subi	r25, 0x30	; 48
    14da:	89 0f       	add	r24, r25
    14dc:	8e 87       	std	Y+14, r24	; 0x0e
					GPSData.seconds = 10 * (NMEA_sentence[a + 5] - '0') + NMEA_sentence[a + 6] - '0';
    14de:	84 81       	ldd	r24, Z+4	; 0x04
    14e0:	88 0f       	add	r24, r24
    14e2:	80 56       	subi	r24, 0x60	; 96
    14e4:	a8 2e       	mov	r10, r24
    14e6:	aa 0c       	add	r10, r10
    14e8:	aa 0c       	add	r10, r10
    14ea:	a8 0e       	add	r10, r24
    14ec:	95 81       	ldd	r25, Z+5	; 0x05
    14ee:	90 53       	subi	r25, 0x30	; 48
    14f0:	a9 0e       	add	r10, r25
    14f2:	07 c2       	rjmp	.+1038   	; 0x1902 <getGPSDatafromNMEA+0x4cc>
				}
				else if (countcommas == 2 && NMEA_sentence[a+1] != ',')
    14f4:	f2 e0       	ldi	r31, 0x02	; 2
    14f6:	df 12       	cpse	r13, r31
    14f8:	bb c0       	rjmp	.+374    	; 0x1670 <getGPSDatafromNMEA+0x23a>
    14fa:	a8 a1       	ldd	r26, Y+32	; 0x20
    14fc:	b9 a1       	ldd	r27, Y+33	; 0x21
    14fe:	8c 91       	ld	r24, X
    1500:	8c 32       	cpi	r24, 0x2C	; 44
    1502:	09 f4       	brne	.+2      	; 0x1506 <getGPSDatafromNMEA+0xd0>
    1504:	f0 c1       	rjmp	.+992    	; 0x18e6 <getGPSDatafromNMEA+0x4b0>
				{
					GPSData.latdegrees = 10*(NMEA_sentence[a+1] - '0') + (NMEA_sentence[a+2] - '0');
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	c0 97       	sbiw	r24, 0x30	; 48
    150a:	9c 01       	movw	r18, r24
    150c:	22 0f       	add	r18, r18
    150e:	33 1f       	adc	r19, r19
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	82 0f       	add	r24, r18
    151e:	93 1f       	adc	r25, r19
    1520:	11 96       	adiw	r26, 0x01	; 1
    1522:	2c 91       	ld	r18, X
    1524:	11 97       	sbiw	r26, 0x01	; 1
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	20 53       	subi	r18, 0x30	; 48
    152a:	31 09       	sbc	r19, r1
    152c:	2c 01       	movw	r4, r24
    152e:	42 0e       	add	r4, r18
    1530:	53 1e       	adc	r5, r19
    1532:	4b 86       	std	Y+11, r4	; 0x0b
    1534:	5c 86       	std	Y+12, r5	; 0x0c
					//printf("%u\n",GPSData.latdegrees);
					GPSData.latminutes = 100000l*(NMEA_sentence[a+3] - '0') + 10000l*(NMEA_sentence[a+4] - '0') + 1000l*(NMEA_sentence[a+6] - '0') + 100l*(NMEA_sentence[a+7] - '0') + 10l*(NMEA_sentence[a+8] - '0') + (NMEA_sentence[a+9] - '0');
    1536:	12 96       	adiw	r26, 0x02	; 2
    1538:	ac 91       	ld	r26, X
    153a:	b0 e0       	ldi	r27, 0x00	; 0
    153c:	d0 97       	sbiw	r26, 0x30	; 48
    153e:	20 ea       	ldi	r18, 0xA0	; 160
    1540:	36 e8       	ldi	r19, 0x86	; 134
    1542:	41 e0       	ldi	r20, 0x01	; 1
    1544:	50 e0       	ldi	r21, 0x00	; 0
    1546:	0e 94 a3 1b 	call	0x3746	; 0x3746 <__mulshisi3>
    154a:	2b 01       	movw	r4, r22
    154c:	3c 01       	movw	r6, r24
    154e:	e8 a1       	ldd	r30, Y+32	; 0x20
    1550:	f9 a1       	ldd	r31, Y+33	; 0x21
    1552:	a3 81       	ldd	r26, Z+3	; 0x03
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	d0 97       	sbiw	r26, 0x30	; 48
    1558:	20 e1       	ldi	r18, 0x10	; 16
    155a:	37 e2       	ldi	r19, 0x27	; 39
    155c:	0e 94 9d 1b 	call	0x373a	; 0x373a <__usmulhisi3>
    1560:	46 0e       	add	r4, r22
    1562:	57 1e       	adc	r5, r23
    1564:	68 1e       	adc	r6, r24
    1566:	79 1e       	adc	r7, r25
    1568:	a5 81       	ldd	r26, Z+5	; 0x05
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	d0 97       	sbiw	r26, 0x30	; 48
    156e:	28 ee       	ldi	r18, 0xE8	; 232
    1570:	33 e0       	ldi	r19, 0x03	; 3
    1572:	0e 94 9d 1b 	call	0x373a	; 0x373a <__usmulhisi3>
    1576:	46 0e       	add	r4, r22
    1578:	57 1e       	adc	r5, r23
    157a:	68 1e       	adc	r6, r24
    157c:	79 1e       	adc	r7, r25
    157e:	a6 81       	ldd	r26, Z+6	; 0x06
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	d0 97       	sbiw	r26, 0x30	; 48
    1584:	24 e6       	ldi	r18, 0x64	; 100
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	0e 94 9d 1b 	call	0x373a	; 0x373a <__usmulhisi3>
    158c:	ab 01       	movw	r20, r22
    158e:	bc 01       	movw	r22, r24
    1590:	44 0d       	add	r20, r4
    1592:	55 1d       	adc	r21, r5
    1594:	66 1d       	adc	r22, r6
    1596:	77 1d       	adc	r23, r7
    1598:	97 81       	ldd	r25, Z+7	; 0x07
    159a:	89 2f       	mov	r24, r25
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	c0 97       	sbiw	r24, 0x30	; 48
    15a0:	09 2e       	mov	r0, r25
    15a2:	00 0c       	add	r0, r0
    15a4:	aa 0b       	sbc	r26, r26
    15a6:	bb 0b       	sbc	r27, r27
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	aa 1f       	adc	r26, r26
    15ae:	bb 1f       	adc	r27, r27
    15b0:	2c 01       	movw	r4, r24
    15b2:	3d 01       	movw	r6, r26
    15b4:	44 0c       	add	r4, r4
    15b6:	55 1c       	adc	r5, r5
    15b8:	66 1c       	adc	r6, r6
    15ba:	77 1c       	adc	r7, r7
    15bc:	44 0c       	add	r4, r4
    15be:	55 1c       	adc	r5, r5
    15c0:	66 1c       	adc	r6, r6
    15c2:	77 1c       	adc	r7, r7
    15c4:	84 0d       	add	r24, r4
    15c6:	95 1d       	adc	r25, r5
    15c8:	a6 1d       	adc	r26, r6
    15ca:	b7 1d       	adc	r27, r7
    15cc:	84 0f       	add	r24, r20
    15ce:	95 1f       	adc	r25, r21
    15d0:	a6 1f       	adc	r26, r22
    15d2:	b7 1f       	adc	r27, r23
    15d4:	40 85       	ldd	r20, Z+8	; 0x08
    15d6:	50 e0       	ldi	r21, 0x00	; 0
    15d8:	40 53       	subi	r20, 0x30	; 48
    15da:	51 09       	sbc	r21, r1
    15dc:	05 2e       	mov	r0, r21
    15de:	00 0c       	add	r0, r0
    15e0:	66 0b       	sbc	r22, r22
    15e2:	77 0b       	sbc	r23, r23
    15e4:	2c 01       	movw	r4, r24
    15e6:	3d 01       	movw	r6, r26
    15e8:	44 0e       	add	r4, r20
    15ea:	55 1e       	adc	r5, r21
    15ec:	66 1e       	adc	r6, r22
    15ee:	77 1e       	adc	r7, r23
    15f0:	4f 82       	std	Y+7, r4	; 0x07
    15f2:	58 86       	std	Y+8, r5	; 0x08
    15f4:	69 86       	std	Y+9, r6	; 0x09
    15f6:	7a 86       	std	Y+10, r7	; 0x0a
					//printf("%lu\n",GPSData.latminutes);

					GPSData.latdecimal = (NMEA_sentence[a+11] == 'N' ? 1.0 : -1.0) * ((double)GPSData.latdegrees + ((double)GPSData.latminutes/(60.0*10000.0)));
    15f8:	82 85       	ldd	r24, Z+10	; 0x0a
    15fa:	8e 34       	cpi	r24, 0x4E	; 78
    15fc:	51 f0       	breq	.+20     	; 0x1612 <getGPSDatafromNMEA+0x1dc>
    15fe:	b1 2c       	mov	r11, r1
    1600:	c1 2c       	mov	r12, r1
    1602:	68 94       	set
    1604:	ee 24       	eor	r14, r14
    1606:	e7 f8       	bld	r14, 7
    1608:	0f 2e       	mov	r0, r31
    160a:	ff eb       	ldi	r31, 0xBF	; 191
    160c:	ff 2e       	mov	r15, r31
    160e:	f0 2d       	mov	r31, r0
    1610:	09 c0       	rjmp	.+18     	; 0x1624 <getGPSDatafromNMEA+0x1ee>
    1612:	b1 2c       	mov	r11, r1
    1614:	c1 2c       	mov	r12, r1
    1616:	68 94       	set
    1618:	ee 24       	eor	r14, r14
    161a:	e7 f8       	bld	r14, 7
    161c:	0f 2e       	mov	r0, r31
    161e:	ff e3       	ldi	r31, 0x3F	; 63
    1620:	ff 2e       	mov	r15, r31
    1622:	f0 2d       	mov	r31, r0
    1624:	6f 81       	ldd	r22, Y+7	; 0x07
    1626:	78 85       	ldd	r23, Y+8	; 0x08
    1628:	89 85       	ldd	r24, Y+9	; 0x09
    162a:	9a 85       	ldd	r25, Y+10	; 0x0a
    162c:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__floatunsisf>
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	3c e7       	ldi	r19, 0x7C	; 124
    1634:	42 e1       	ldi	r20, 0x12	; 18
    1636:	59 e4       	ldi	r21, 0x49	; 73
    1638:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__divsf3>
    163c:	2b 01       	movw	r4, r22
    163e:	3c 01       	movw	r6, r24
    1640:	2b 85       	ldd	r18, Y+11	; 0x0b
    1642:	3c 85       	ldd	r19, Y+12	; 0x0c
    1644:	b9 01       	movw	r22, r18
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__floatunsisf>
    164e:	9b 01       	movw	r18, r22
    1650:	ac 01       	movw	r20, r24
    1652:	c3 01       	movw	r24, r6
    1654:	b2 01       	movw	r22, r4
    1656:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__addsf3>
    165a:	2b 2d       	mov	r18, r11
    165c:	3c 2d       	mov	r19, r12
    165e:	4e 2d       	mov	r20, r14
    1660:	5f 2d       	mov	r21, r15
    1662:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__mulsf3>
    1666:	6f 87       	std	Y+15, r22	; 0x0f
    1668:	78 8b       	std	Y+16, r23	; 0x10
    166a:	89 8b       	std	Y+17, r24	; 0x11
    166c:	9a 8b       	std	Y+18, r25	; 0x12
    166e:	49 c1       	rjmp	.+658    	; 0x1902 <getGPSDatafromNMEA+0x4cc>
				}
				else if (countcommas == 2)
				{
					GPSData.latdecimal = 0.0;
				}
				else if (countcommas == 4 && NMEA_sentence[a+1] != ',')
    1670:	34 e0       	ldi	r19, 0x04	; 4
    1672:	d3 12       	cpse	r13, r19
    1674:	c5 c0       	rjmp	.+394    	; 0x1800 <getGPSDatafromNMEA+0x3ca>
    1676:	a8 a1       	ldd	r26, Y+32	; 0x20
    1678:	b9 a1       	ldd	r27, Y+33	; 0x21
    167a:	2c 91       	ld	r18, X
    167c:	2c 32       	cpi	r18, 0x2C	; 44
    167e:	09 f4       	brne	.+2      	; 0x1682 <getGPSDatafromNMEA+0x24c>
    1680:	37 c1       	rjmp	.+622    	; 0x18f0 <getGPSDatafromNMEA+0x4ba>
				{
					GPSData.londegrees = 100*(NMEA_sentence[a+1] - '0') +10*(NMEA_sentence[a+2] - '0') + (NMEA_sentence[a+3] - '0');
    1682:	11 96       	adiw	r26, 0x01	; 1
    1684:	8c 91       	ld	r24, X
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	c0 97       	sbiw	r24, 0x30	; 48
    168a:	ac 01       	movw	r20, r24
    168c:	44 0f       	add	r20, r20
    168e:	55 1f       	adc	r21, r21
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	84 0f       	add	r24, r20
    169e:	95 1f       	adc	r25, r21
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	20 53       	subi	r18, 0x30	; 48
    16a4:	31 09       	sbc	r19, r1
    16a6:	b4 e6       	ldi	r27, 0x64	; 100
    16a8:	b2 9f       	mul	r27, r18
    16aa:	a0 01       	movw	r20, r0
    16ac:	b3 9f       	mul	r27, r19
    16ae:	50 0d       	add	r21, r0
    16b0:	11 24       	eor	r1, r1
    16b2:	84 0f       	add	r24, r20
    16b4:	95 1f       	adc	r25, r21
    16b6:	e8 a1       	ldd	r30, Y+32	; 0x20
    16b8:	f9 a1       	ldd	r31, Y+33	; 0x21
    16ba:	22 81       	ldd	r18, Z+2	; 0x02
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	20 53       	subi	r18, 0x30	; 48
    16c0:	31 09       	sbc	r19, r1
    16c2:	2c 01       	movw	r4, r24
    16c4:	42 0e       	add	r4, r18
    16c6:	53 1e       	adc	r5, r19
    16c8:	4f 8a       	std	Y+23, r4	; 0x17
    16ca:	58 8e       	std	Y+24, r5	; 0x18
					//printf("%u\n",GPSData.londegrees);
					GPSData.lonminutes = 100000l*(NMEA_sentence[a+4] - '0')
    16cc:	a3 81       	ldd	r26, Z+3	; 0x03
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	d0 97       	sbiw	r26, 0x30	; 48
    16d2:	20 ea       	ldi	r18, 0xA0	; 160
    16d4:	36 e8       	ldi	r19, 0x86	; 134
    16d6:	41 e0       	ldi	r20, 0x01	; 1
    16d8:	50 e0       	ldi	r21, 0x00	; 0
    16da:	0e 94 a3 1b 	call	0x3746	; 0x3746 <__mulshisi3>
    16de:	2b 01       	movw	r4, r22
    16e0:	3c 01       	movw	r6, r24
    16e2:	a4 81       	ldd	r26, Z+4	; 0x04
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	d0 97       	sbiw	r26, 0x30	; 48
    16e8:	20 e1       	ldi	r18, 0x10	; 16
    16ea:	37 e2       	ldi	r19, 0x27	; 39
    16ec:	0e 94 9d 1b 	call	0x373a	; 0x373a <__usmulhisi3>
    16f0:	46 0e       	add	r4, r22
    16f2:	57 1e       	adc	r5, r23
    16f4:	68 1e       	adc	r6, r24
    16f6:	79 1e       	adc	r7, r25
    16f8:	a6 81       	ldd	r26, Z+6	; 0x06
    16fa:	b0 e0       	ldi	r27, 0x00	; 0
    16fc:	d0 97       	sbiw	r26, 0x30	; 48
    16fe:	28 ee       	ldi	r18, 0xE8	; 232
    1700:	33 e0       	ldi	r19, 0x03	; 3
    1702:	0e 94 9d 1b 	call	0x373a	; 0x373a <__usmulhisi3>
    1706:	46 0e       	add	r4, r22
    1708:	57 1e       	adc	r5, r23
    170a:	68 1e       	adc	r6, r24
    170c:	79 1e       	adc	r7, r25
    170e:	a7 81       	ldd	r26, Z+7	; 0x07
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	d0 97       	sbiw	r26, 0x30	; 48
    1714:	24 e6       	ldi	r18, 0x64	; 100
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	0e 94 9d 1b 	call	0x373a	; 0x373a <__usmulhisi3>
    171c:	ab 01       	movw	r20, r22
    171e:	bc 01       	movw	r22, r24
    1720:	44 0d       	add	r20, r4
    1722:	55 1d       	adc	r21, r5
    1724:	66 1d       	adc	r22, r6
    1726:	77 1d       	adc	r23, r7
    1728:	90 85       	ldd	r25, Z+8	; 0x08
    172a:	89 2f       	mov	r24, r25
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	c0 97       	sbiw	r24, 0x30	; 48
    1730:	09 2e       	mov	r0, r25
    1732:	00 0c       	add	r0, r0
    1734:	aa 0b       	sbc	r26, r26
    1736:	bb 0b       	sbc	r27, r27
    1738:	88 0f       	add	r24, r24
    173a:	99 1f       	adc	r25, r25
    173c:	aa 1f       	adc	r26, r26
    173e:	bb 1f       	adc	r27, r27
    1740:	2c 01       	movw	r4, r24
    1742:	3d 01       	movw	r6, r26
    1744:	44 0c       	add	r4, r4
    1746:	55 1c       	adc	r5, r5
    1748:	66 1c       	adc	r6, r6
    174a:	77 1c       	adc	r7, r7
    174c:	44 0c       	add	r4, r4
    174e:	55 1c       	adc	r5, r5
    1750:	66 1c       	adc	r6, r6
    1752:	77 1c       	adc	r7, r7
    1754:	84 0d       	add	r24, r4
    1756:	95 1d       	adc	r25, r5
    1758:	a6 1d       	adc	r26, r6
    175a:	b7 1d       	adc	r27, r7
    175c:	84 0f       	add	r24, r20
    175e:	95 1f       	adc	r25, r21
    1760:	a6 1f       	adc	r26, r22
    1762:	b7 1f       	adc	r27, r23
    1764:	41 85       	ldd	r20, Z+9	; 0x09
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	40 53       	subi	r20, 0x30	; 48
    176a:	51 09       	sbc	r21, r1
    176c:	05 2e       	mov	r0, r21
    176e:	00 0c       	add	r0, r0
    1770:	66 0b       	sbc	r22, r22
    1772:	77 0b       	sbc	r23, r23
    1774:	2c 01       	movw	r4, r24
    1776:	3d 01       	movw	r6, r26
    1778:	44 0e       	add	r4, r20
    177a:	55 1e       	adc	r5, r21
    177c:	66 1e       	adc	r6, r22
    177e:	77 1e       	adc	r7, r23
    1780:	4b 8a       	std	Y+19, r4	; 0x13
    1782:	5c 8a       	std	Y+20, r5	; 0x14
    1784:	6d 8a       	std	Y+21, r6	; 0x15
    1786:	7e 8a       	std	Y+22, r7	; 0x16
										 + 1000l*(NMEA_sentence[a+7] - '0')
										  + 100l*(NMEA_sentence[a+8] - '0')
										   + 10l*(NMEA_sentence[a+9] - '0')
										       + (NMEA_sentence[a+10] - '0');
					//printf("%lu\n",GPSData.lonminutes);
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
    1788:	83 85       	ldd	r24, Z+11	; 0x0b
    178a:	85 34       	cpi	r24, 0x45	; 69
    178c:	51 f0       	breq	.+20     	; 0x17a2 <getGPSDatafromNMEA+0x36c>
    178e:	b1 2c       	mov	r11, r1
    1790:	c1 2c       	mov	r12, r1
    1792:	68 94       	set
    1794:	ee 24       	eor	r14, r14
    1796:	e7 f8       	bld	r14, 7
    1798:	0f 2e       	mov	r0, r31
    179a:	ff eb       	ldi	r31, 0xBF	; 191
    179c:	ff 2e       	mov	r15, r31
    179e:	f0 2d       	mov	r31, r0
    17a0:	09 c0       	rjmp	.+18     	; 0x17b4 <getGPSDatafromNMEA+0x37e>
    17a2:	b1 2c       	mov	r11, r1
    17a4:	c1 2c       	mov	r12, r1
    17a6:	68 94       	set
    17a8:	ee 24       	eor	r14, r14
    17aa:	e7 f8       	bld	r14, 7
    17ac:	0f 2e       	mov	r0, r31
    17ae:	ff e3       	ldi	r31, 0x3F	; 63
    17b0:	ff 2e       	mov	r15, r31
    17b2:	f0 2d       	mov	r31, r0
    17b4:	6b 89       	ldd	r22, Y+19	; 0x13
    17b6:	7c 89       	ldd	r23, Y+20	; 0x14
    17b8:	8d 89       	ldd	r24, Y+21	; 0x15
    17ba:	9e 89       	ldd	r25, Y+22	; 0x16
    17bc:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__floatunsisf>
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	3c e7       	ldi	r19, 0x7C	; 124
    17c4:	42 e1       	ldi	r20, 0x12	; 18
    17c6:	59 e4       	ldi	r21, 0x49	; 73
    17c8:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__divsf3>
    17cc:	2b 01       	movw	r4, r22
    17ce:	3c 01       	movw	r6, r24
    17d0:	2f 89       	ldd	r18, Y+23	; 0x17
    17d2:	38 8d       	ldd	r19, Y+24	; 0x18
    17d4:	b9 01       	movw	r22, r18
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__floatunsisf>
    17de:	9b 01       	movw	r18, r22
    17e0:	ac 01       	movw	r20, r24
    17e2:	c3 01       	movw	r24, r6
    17e4:	b2 01       	movw	r22, r4
    17e6:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__addsf3>
    17ea:	2b 2d       	mov	r18, r11
    17ec:	3c 2d       	mov	r19, r12
    17ee:	4e 2d       	mov	r20, r14
    17f0:	5f 2d       	mov	r21, r15
    17f2:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__mulsf3>
    17f6:	69 8f       	std	Y+25, r22	; 0x19
    17f8:	7a 8f       	std	Y+26, r23	; 0x1a
    17fa:	8b 8f       	std	Y+27, r24	; 0x1b
    17fc:	9c 8f       	std	Y+28, r25	; 0x1c
    17fe:	81 c0       	rjmp	.+258    	; 0x1902 <getGPSDatafromNMEA+0x4cc>
				}
				else if(countcommas == 4)
				{
					GPSData.londecimal = 0.0;
				}
				else if (countcommas == 6)
    1800:	36 e0       	ldi	r19, 0x06	; 6
    1802:	d3 12       	cpse	r13, r19
    1804:	06 c0       	rjmp	.+12     	; 0x1812 <getGPSDatafromNMEA+0x3dc>
				{
					GPSData.fix_status = NMEA_sentence[a + 1] - '0';
    1806:	a8 a1       	ldd	r26, Y+32	; 0x20
    1808:	b9 a1       	ldd	r27, Y+33	; 0x21
    180a:	8c 91       	ld	r24, X
    180c:	80 53       	subi	r24, 0x30	; 48
    180e:	8d 8f       	std	Y+29, r24	; 0x1d
    1810:	78 c0       	rjmp	.+240    	; 0x1902 <getGPSDatafromNMEA+0x4cc>
				}
				else if (countcommas == 9)
    1812:	b9 e0       	ldi	r27, 0x09	; 9
    1814:	db 12       	cpse	r13, r27
    1816:	75 c0       	rjmp	.+234    	; 0x1902 <getGPSDatafromNMEA+0x4cc>
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    1818:	e8 a1       	ldd	r30, Y+32	; 0x20
    181a:	f9 a1       	ldd	r31, Y+33	; 0x21
    181c:	c0 80       	ld	r12, Z
    181e:	fc e2       	ldi	r31, 0x2C	; 44
    1820:	cf 16       	cp	r12, r31
    1822:	09 f4       	brne	.+2      	; 0x1826 <getGPSDatafromNMEA+0x3f0>
    1824:	6a c0       	rjmp	.+212    	; 0x18fa <getGPSDatafromNMEA+0x4c4>
    1826:	b1 2c       	mov	r11, r1
    1828:	1b 82       	std	Y+3, r1	; 0x03
    182a:	1c 82       	std	Y+4, r1	; 0x04
    182c:	1d 82       	std	Y+5, r1	; 0x05
    182e:	1e 82       	std	Y+6, r1	; 0x06
    1830:	71 2c       	mov	r7, r1
    1832:	e9 80       	ldd	r14, Y+1	; 0x01
    1834:	fa 80       	ldd	r15, Y+2	; 0x02
    1836:	e0 0e       	add	r14, r16
    1838:	f1 1e       	adc	r15, r17
    183a:	0e 8f       	std	Y+30, r16	; 0x1e
    183c:	1f 8f       	std	Y+31, r17	; 0x1f
    183e:	1c 2d       	mov	r17, r12
    1840:	7a a2       	std	Y+34, r7	; 0x22
					{
						if (NMEA_sentence[a + inc + 1] == '.')
    1842:	1e 32       	cpi	r17, 0x2E	; 46
    1844:	09 f4       	brne	.+2      	; 0x1848 <getGPSDatafromNMEA+0x412>
    1846:	42 c0       	rjmp	.+132    	; 0x18cc <getGPSDatafromNMEA+0x496>
						{
							period_reached = 1;
							period_counter = 1;
						}
						else if (!period_reached)
    1848:	5a a0       	ldd	r5, Y+34	; 0x22
    184a:	51 10       	cpse	r5, r1
    184c:	1f c0       	rjmp	.+62     	; 0x188c <getGPSDatafromNMEA+0x456>
						{
							altitude *= 10;
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e2       	ldi	r20, 0x20	; 32
    1854:	51 e4       	ldi	r21, 0x41	; 65
    1856:	6b 81       	ldd	r22, Y+3	; 0x03
    1858:	7c 81       	ldd	r23, Y+4	; 0x04
    185a:	8d 81       	ldd	r24, Y+5	; 0x05
    185c:	9e 81       	ldd	r25, Y+6	; 0x06
    185e:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <__mulsf3>
    1862:	2b 01       	movw	r4, r22
    1864:	3c 01       	movw	r6, r24
							altitude += (float)(NMEA_sentence[a + inc + 1] - '0');
    1866:	61 2f       	mov	r22, r17
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	60 53       	subi	r22, 0x30	; 48
    186c:	71 09       	sbc	r23, r1
    186e:	07 2e       	mov	r0, r23
    1870:	00 0c       	add	r0, r0
    1872:	88 0b       	sbc	r24, r24
    1874:	99 0b       	sbc	r25, r25
    1876:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__floatsisf>
    187a:	a3 01       	movw	r20, r6
    187c:	92 01       	movw	r18, r4
    187e:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__addsf3>
    1882:	6b 83       	std	Y+3, r22	; 0x03
    1884:	7c 83       	std	Y+4, r23	; 0x04
    1886:	8d 83       	std	Y+5, r24	; 0x05
    1888:	9e 83       	std	Y+6, r25	; 0x06
    188a:	22 c0       	rjmp	.+68     	; 0x18d0 <getGPSDatafromNMEA+0x49a>
    188c:	c1 2e       	mov	r12, r17
    188e:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1890:	1f 8d       	ldd	r17, Y+31	; 0x1f
						}
						else if (period_reached && period_counter == 1)
						{
							altitude += ((float)(NMEA_sentence[a + inc + 1] - '0')) / 10.0;
    1892:	6c 2d       	mov	r22, r12
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	60 53       	subi	r22, 0x30	; 48
    1898:	71 09       	sbc	r23, r1
    189a:	07 2e       	mov	r0, r23
    189c:	00 0c       	add	r0, r0
    189e:	88 0b       	sbc	r24, r24
    18a0:	99 0b       	sbc	r25, r25
    18a2:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <__floatsisf>
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	40 e2       	ldi	r20, 0x20	; 32
    18ac:	51 e4       	ldi	r21, 0x41	; 65
    18ae:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <__divsf3>
    18b2:	9b 01       	movw	r18, r22
    18b4:	ac 01       	movw	r20, r24
    18b6:	6b 81       	ldd	r22, Y+3	; 0x03
    18b8:	7c 81       	ldd	r23, Y+4	; 0x04
    18ba:	8d 81       	ldd	r24, Y+5	; 0x05
    18bc:	9e 81       	ldd	r25, Y+6	; 0x06
    18be:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <__addsf3>
    18c2:	6b 83       	std	Y+3, r22	; 0x03
    18c4:	7c 83       	std	Y+4, r23	; 0x04
    18c6:	8d 83       	std	Y+5, r24	; 0x05
    18c8:	9e 83       	std	Y+6, r25	; 0x06
							break;
    18ca:	1b c0       	rjmp	.+54     	; 0x1902 <getGPSDatafromNMEA+0x4cc>
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
					{
						if (NMEA_sentence[a + inc + 1] == '.')
						{
							period_reached = 1;
    18cc:	21 e0       	ldi	r18, 0x01	; 1
    18ce:	2a a3       	std	Y+34, r18	; 0x22
						{
							altitude += ((float)(NMEA_sentence[a + inc + 1] - '0')) / 10.0;
							break;
						}
						
						inc++;
    18d0:	b3 94       	inc	r11
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    18d2:	f7 01       	movw	r30, r14
    18d4:	eb 0d       	add	r30, r11
    18d6:	f1 1d       	adc	r31, r1
    18d8:	11 81       	ldd	r17, Z+1	; 0x01
    18da:	1c 32       	cpi	r17, 0x2C	; 44
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <getGPSDatafromNMEA+0x4aa>
    18de:	b1 cf       	rjmp	.-158    	; 0x1842 <getGPSDatafromNMEA+0x40c>
    18e0:	0e 8d       	ldd	r16, Y+30	; 0x1e
    18e2:	1f 8d       	ldd	r17, Y+31	; 0x1f
    18e4:	0e c0       	rjmp	.+28     	; 0x1902 <getGPSDatafromNMEA+0x4cc>

					//printf("%f\n",GPSData.latdecimal);
				}
				else if (countcommas == 2)
				{
					GPSData.latdecimal = 0.0;
    18e6:	1f 86       	std	Y+15, r1	; 0x0f
    18e8:	18 8a       	std	Y+16, r1	; 0x10
    18ea:	19 8a       	std	Y+17, r1	; 0x11
    18ec:	1a 8a       	std	Y+18, r1	; 0x12
    18ee:	09 c0       	rjmp	.+18     	; 0x1902 <getGPSDatafromNMEA+0x4cc>
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
					//printf("%f\n",GPSData.londecimal);
				}
				else if(countcommas == 4)
				{
					GPSData.londecimal = 0.0;
    18f0:	19 8e       	std	Y+25, r1	; 0x19
    18f2:	1a 8e       	std	Y+26, r1	; 0x1a
    18f4:	1b 8e       	std	Y+27, r1	; 0x1b
    18f6:	1c 8e       	std	Y+28, r1	; 0x1c
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <getGPSDatafromNMEA+0x4cc>
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    18fa:	1b 82       	std	Y+3, r1	; 0x03
    18fc:	1c 82       	std	Y+4, r1	; 0x04
    18fe:	1d 82       	std	Y+5, r1	; 0x05
    1900:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t comma_position=0;
	int a=0;
	if (startswith(NMEA_sentence, "$GPGGA"))
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    1902:	0f 5f       	subi	r16, 0xFF	; 255
    1904:	1f 4f       	sbci	r17, 0xFF	; 255
    1906:	02 15       	cp	r16, r2
    1908:	13 05       	cpc	r17, r3
    190a:	09 f0       	breq	.+2      	; 0x190e <getGPSDatafromNMEA+0x4d8>
    190c:	c4 cd       	rjmp	.-1144   	; 0x1496 <getGPSDatafromNMEA+0x60>
	
	
	
//printf("GPSDATA altitude test %s \n ", GPSData.altitude);
//printf("GPS no of satellites test= %s \n", GPSData.noofsatellites);
return GPSData;
    190e:	4b 84       	ldd	r4, Y+11	; 0x0b
    1910:	5c 84       	ldd	r5, Y+12	; 0x0c
    1912:	d4 01       	movw	r26, r8
    1914:	4d 92       	st	X+, r4
    1916:	5c 92       	st	X, r5
    1918:	11 97       	sbiw	r26, 0x01	; 1
    191a:	4f 80       	ldd	r4, Y+7	; 0x07
    191c:	58 84       	ldd	r5, Y+8	; 0x08
    191e:	69 84       	ldd	r6, Y+9	; 0x09
    1920:	7a 84       	ldd	r7, Y+10	; 0x0a
    1922:	12 96       	adiw	r26, 0x02	; 2
    1924:	4d 92       	st	X+, r4
    1926:	5d 92       	st	X+, r5
    1928:	6d 92       	st	X+, r6
    192a:	7c 92       	st	X, r7
    192c:	15 97       	sbiw	r26, 0x05	; 5
    192e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1930:	98 89       	ldd	r25, Y+16	; 0x10
    1932:	a9 89       	ldd	r26, Y+17	; 0x11
    1934:	ba 89       	ldd	r27, Y+18	; 0x12
    1936:	f4 01       	movw	r30, r8
    1938:	87 83       	std	Z+7, r24	; 0x07
    193a:	90 87       	std	Z+8, r25	; 0x08
    193c:	a1 87       	std	Z+9, r26	; 0x09
    193e:	b2 87       	std	Z+10, r27	; 0x0a
    1940:	4f 88       	ldd	r4, Y+23	; 0x17
    1942:	58 8c       	ldd	r5, Y+24	; 0x18
    1944:	43 86       	std	Z+11, r4	; 0x0b
    1946:	54 86       	std	Z+12, r5	; 0x0c
    1948:	4b 88       	ldd	r4, Y+19	; 0x13
    194a:	5c 88       	ldd	r5, Y+20	; 0x14
    194c:	6d 88       	ldd	r6, Y+21	; 0x15
    194e:	7e 88       	ldd	r7, Y+22	; 0x16
    1950:	45 86       	std	Z+13, r4	; 0x0d
    1952:	56 86       	std	Z+14, r5	; 0x0e
    1954:	67 86       	std	Z+15, r6	; 0x0f
    1956:	70 8a       	std	Z+16, r7	; 0x10
    1958:	89 8d       	ldd	r24, Y+25	; 0x19
    195a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    195c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    195e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    1960:	82 8b       	std	Z+18, r24	; 0x12
    1962:	93 8b       	std	Z+19, r25	; 0x13
    1964:	a4 8b       	std	Z+20, r26	; 0x14
    1966:	b5 8b       	std	Z+21, r27	; 0x15
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	ad 81       	ldd	r26, Y+5	; 0x05
    196e:	be 81       	ldd	r27, Y+6	; 0x06
    1970:	86 8b       	std	Z+22, r24	; 0x16
    1972:	97 8b       	std	Z+23, r25	; 0x17
    1974:	a0 8f       	std	Z+24, r26	; 0x18
    1976:	b1 8f       	std	Z+25, r27	; 0x19
    1978:	4d 84       	ldd	r4, Y+13	; 0x0d
    197a:	42 8e       	std	Z+26, r4	; 0x1a
    197c:	5e 84       	ldd	r5, Y+14	; 0x0e
    197e:	53 8e       	std	Z+27, r5	; 0x1b
    1980:	a4 8e       	std	Z+28, r10	; 0x1c
    1982:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1984:	65 8e       	std	Z+29, r6	; 0x1d


}
    1986:	c4 01       	movw	r24, r8
    1988:	a2 96       	adiw	r28, 0x22	; 34
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	de bf       	out	0x3e, r29	; 62
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	1f 91       	pop	r17
    1994:	0f 91       	pop	r16
    1996:	ff 90       	pop	r15
    1998:	ef 90       	pop	r14
    199a:	df 90       	pop	r13
    199c:	cf 90       	pop	r12
    199e:	bf 90       	pop	r11
    19a0:	af 90       	pop	r10
    19a2:	9f 90       	pop	r9
    19a4:	8f 90       	pop	r8
    19a6:	7f 90       	pop	r7
    19a8:	6f 90       	pop	r6
    19aa:	5f 90       	pop	r5
    19ac:	4f 90       	pop	r4
    19ae:	3f 90       	pop	r3
    19b0:	2f 90       	pop	r2
    19b2:	08 95       	ret

000019b4 <__portable_avr_delay_cycles>:
	
}

void heatshield_solenoid(PORT_t* port){
	(*port).DIRSET = 0b10000000;
	(*port).OUTSET = 0b10000000;
    19b4:	04 c0       	rjmp	.+8      	; 0x19be <__portable_avr_delay_cycles+0xa>
    19b6:	61 50       	subi	r22, 0x01	; 1
    19b8:	71 09       	sbc	r23, r1
    19ba:	81 09       	sbc	r24, r1
    19bc:	91 09       	sbc	r25, r1
    19be:	61 15       	cp	r22, r1
    19c0:	71 05       	cpc	r23, r1
    19c2:	81 05       	cpc	r24, r1
    19c4:	91 05       	cpc	r25, r1
    19c6:	b9 f7       	brne	.-18     	; 0x19b6 <__portable_avr_delay_cycles+0x2>
    19c8:	08 95       	ret

000019ca <heatshield_hotwire>:
}

void heatshield_hotwire (void){
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
	PORTD.DIR |= 0b00000010;
    19ce:	c0 e6       	ldi	r28, 0x60	; 96
    19d0:	d6 e0       	ldi	r29, 0x06	; 6
    19d2:	88 81       	ld	r24, Y
    19d4:	82 60       	ori	r24, 0x02	; 2
    19d6:	88 83       	st	Y, r24
	PORTD.OUT |= 0b00000010; //TODO: fix these port addresses
    19d8:	8c 81       	ldd	r24, Y+4	; 0x04
    19da:	82 60       	ori	r24, 0x02	; 2
    19dc:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(4000);
    19de:	66 e5       	ldi	r22, 0x56	; 86
    19e0:	75 e8       	ldi	r23, 0x85	; 133
    19e2:	85 e4       	ldi	r24, 0x45	; 69
    19e4:	91 e0       	ldi	r25, 0x01	; 1
    19e6:	e6 df       	rcall	.-52     	; 0x19b4 <__portable_avr_delay_cycles>
	PORTD.OUT &= 0b11111101;
    19e8:	8c 81       	ldd	r24, Y+4	; 0x04
    19ea:	8d 7f       	andi	r24, 0xFD	; 253
    19ec:	8c 83       	std	Y+4, r24	; 0x04
}
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	08 95       	ret

000019f4 <parachute_hotwire>:

void parachute_hotwire (void) {
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
	PORTD.DIR |= 0b00000010;
    19f8:	c0 e6       	ldi	r28, 0x60	; 96
    19fa:	d6 e0       	ldi	r29, 0x06	; 6
    19fc:	88 81       	ld	r24, Y
    19fe:	82 60       	ori	r24, 0x02	; 2
    1a00:	88 83       	st	Y, r24
	PORTD.OUT |= 0b00000010; //TODO: fix these port addresses
    1a02:	8c 81       	ldd	r24, Y+4	; 0x04
    1a04:	82 60       	ori	r24, 0x02	; 2
    1a06:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(4000);
    1a08:	66 e5       	ldi	r22, 0x56	; 86
    1a0a:	75 e8       	ldi	r23, 0x85	; 133
    1a0c:	85 e4       	ldi	r24, 0x45	; 69
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	d1 df       	rcall	.-94     	; 0x19b4 <__portable_avr_delay_cycles>
	PORTD.OUT &= 0b11111101;
    1a12:	8c 81       	ldd	r24, Y+4	; 0x04
    1a14:	8d 7f       	andi	r24, 0xFD	; 253
    1a16:	8c 83       	std	Y+4, r24	; 0x04
}
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	08 95       	ret

00001a1e <heatshield_detatch_hotwire>:

void heatshield_detatch_hotwire(void){
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
	PORTD.DIR |= 0b00000010;
    1a22:	c0 e6       	ldi	r28, 0x60	; 96
    1a24:	d6 e0       	ldi	r29, 0x06	; 6
    1a26:	88 81       	ld	r24, Y
    1a28:	82 60       	ori	r24, 0x02	; 2
    1a2a:	88 83       	st	Y, r24
	PORTD.OUT |= 0b00000010; //TODO: fix these port addresses
    1a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2e:	82 60       	ori	r24, 0x02	; 2
    1a30:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(4000);
    1a32:	66 e5       	ldi	r22, 0x56	; 86
    1a34:	75 e8       	ldi	r23, 0x85	; 133
    1a36:	85 e4       	ldi	r24, 0x45	; 69
    1a38:	91 e0       	ldi	r25, 0x01	; 1
    1a3a:	bc df       	rcall	.-136    	; 0x19b4 <__portable_avr_delay_cycles>
	PORTD.OUT &= 0b11111101;	
    1a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3e:	8d 7f       	andi	r24, 0xFD	; 253
    1a40:	8c 83       	std	Y+4, r24	; 0x04
}
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	08 95       	ret

00001a48 <buzzer_on>:

void buzzer_on(void){
	PORTB.DIR |= 0b00000001; 
    1a48:	e0 e2       	ldi	r30, 0x20	; 32
    1a4a:	f6 e0       	ldi	r31, 0x06	; 6
    1a4c:	80 81       	ld	r24, Z
    1a4e:	81 60       	ori	r24, 0x01	; 1
    1a50:	80 83       	st	Z, r24
	PORTB.OUT |= 0b00000001;
    1a52:	84 81       	ldd	r24, Z+4	; 0x04
    1a54:	81 60       	ori	r24, 0x01	; 1
    1a56:	84 83       	std	Z+4, r24	; 0x04
    1a58:	08 95       	ret

00001a5a <buzzer_off>:
	
}
void buzzer_off(void){
	PORTB.DIR |= 0b00000001;  
    1a5a:	e0 e2       	ldi	r30, 0x20	; 32
    1a5c:	f6 e0       	ldi	r31, 0x06	; 6
    1a5e:	80 81       	ld	r24, Z
    1a60:	81 60       	ori	r24, 0x01	; 1
    1a62:	80 83       	st	Z, r24
	PORTB.OUT &= 0b11111110;
    1a64:	84 81       	ldd	r24, Z+4	; 0x04
    1a66:	8e 7f       	andi	r24, 0xFE	; 254
    1a68:	84 83       	std	Z+4, r24	; 0x04
    1a6a:	08 95       	ret

00001a6c <camera_on>:
	
}
void camera_on(void){
	PORTE.DIR |= 0b01000000;
    1a6c:	e0 e8       	ldi	r30, 0x80	; 128
    1a6e:	f6 e0       	ldi	r31, 0x06	; 6
    1a70:	80 81       	ld	r24, Z
    1a72:	80 64       	ori	r24, 0x40	; 64
    1a74:	80 83       	st	Z, r24
	PORTE.OUT |= 0b01000000;
    1a76:	84 81       	ldd	r24, Z+4	; 0x04
    1a78:	80 64       	ori	r24, 0x40	; 64
    1a7a:	84 83       	std	Z+4, r24	; 0x04
    1a7c:	08 95       	ret

00001a7e <__vector_2>:
		return 0;
	}
}

ISR(MPU9250_INT_vect)
{
    1a7e:	1f 92       	push	r1
    1a80:	0f 92       	push	r0
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	0f 92       	push	r0
    1a86:	11 24       	eor	r1, r1
    1a88:	08 b6       	in	r0, 0x38	; 56
    1a8a:	0f 92       	push	r0
    1a8c:	18 be       	out	0x38, r1	; 56
    1a8e:	09 b6       	in	r0, 0x39	; 57
    1a90:	0f 92       	push	r0
    1a92:	19 be       	out	0x39, r1	; 57
    1a94:	8f 93       	push	r24
    1a96:	9f 93       	push	r25
    1a98:	af 93       	push	r26
    1a9a:	bf 93       	push	r27
	data_rdy_flag = 1;
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	80 93 74 20 	sts	0x2074, r24	; 0x802074 <data_rdy_flag>
	timerflag = 1;
    1aa2:	80 93 73 20 	sts	0x2073, r24	; 0x802073 <timerflag>
	time++;
    1aa6:	80 91 6f 20 	lds	r24, 0x206F	; 0x80206f <time>
    1aaa:	90 91 70 20 	lds	r25, 0x2070	; 0x802070 <time+0x1>
    1aae:	a0 91 71 20 	lds	r26, 0x2071	; 0x802071 <time+0x2>
    1ab2:	b0 91 72 20 	lds	r27, 0x2072	; 0x802072 <time+0x3>
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	a1 1d       	adc	r26, r1
    1aba:	b1 1d       	adc	r27, r1
    1abc:	80 93 6f 20 	sts	0x206F, r24	; 0x80206f <time>
    1ac0:	90 93 70 20 	sts	0x2070, r25	; 0x802070 <time+0x1>
    1ac4:	a0 93 71 20 	sts	0x2071, r26	; 0x802071 <time+0x2>
    1ac8:	b0 93 72 20 	sts	0x2072, r27	; 0x802072 <time+0x3>
}
    1acc:	bf 91       	pop	r27
    1ace:	af 91       	pop	r26
    1ad0:	9f 91       	pop	r25
    1ad2:	8f 91       	pop	r24
    1ad4:	0f 90       	pop	r0
    1ad6:	09 be       	out	0x39, r0	; 57
    1ad8:	0f 90       	pop	r0
    1ada:	08 be       	out	0x38, r0	; 56
    1adc:	0f 90       	pop	r0
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	0f 90       	pop	r0
    1ae2:	1f 90       	pop	r1
    1ae4:	18 95       	reti

00001ae6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1ae6:	04 c0       	rjmp	.+8      	; 0x1af0 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1ae8:	61 50       	subi	r22, 0x01	; 1
    1aea:	71 09       	sbc	r23, r1
    1aec:	81 09       	sbc	r24, r1
    1aee:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1af0:	61 15       	cp	r22, r1
    1af2:	71 05       	cpc	r23, r1
    1af4:	81 05       	cpc	r24, r1
    1af6:	91 05       	cpc	r25, r1
    1af8:	b9 f7       	brne	.-18     	; 0x1ae8 <__portable_avr_delay_cycles+0x2>
    1afa:	08 95       	ret

00001afc <spi_init>:
uint16_t C4; // Temperature coefficient of pressure offset; TCO
uint16_t C5; // Reference temperature; Tref
uint16_t C6; // Temperature coefficient of the pressure; TEMPSENS

void spi_init(void){
	PORTC.DIRSET = 0b10110000; //Open the output pins for the SPI
    1afc:	e0 e4       	ldi	r30, 0x40	; 64
    1afe:	f6 e0       	ldi	r31, 0x06	; 6
    1b00:	80 eb       	ldi	r24, 0xB0	; 176
    1b02:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = 0b01000000; //Open the input pins for the SPI
    1b04:	90 e4       	ldi	r25, 0x40	; 64
    1b06:	92 83       	std	Z+2, r25	; 0x02
	PORTC.OUT = 0b10110000;
    1b08:	84 83       	std	Z+4, r24	; 0x04
	SPIC.CTRL = 0b01010011;
    1b0a:	83 e5       	ldi	r24, 0x53	; 83
    1b0c:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
	PORTD.DIRSET = 0b00000010;
    1b10:	82 e0       	ldi	r24, 0x02	; 2
    1b12:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
    1b16:	08 95       	ret

00001b18 <spi_write>:
}

void spi_write(uint8_t command){
	SPIC.DATA = command;
    1b18:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); //waits until the status register changes
    1b1c:	e0 ec       	ldi	r30, 0xC0	; 192
    1b1e:	f8 e0       	ldi	r31, 0x08	; 8
    1b20:	82 81       	ldd	r24, Z+2	; 0x02
    1b22:	88 23       	and	r24, r24
    1b24:	ec f7       	brge	.-6      	; 0x1b20 <spi_write+0x8>
}
    1b26:	08 95       	ret

00001b28 <spi_read>:

uint8_t spi_read(void){
	spi_write(0xFF); //writes a max byte 
    1b28:	8f ef       	ldi	r24, 0xFF	; 255
    1b2a:	f6 df       	rcall	.-20     	; 0x1b18 <spi_write>
	return SPIC.DATA; //gets the data and returns value
    1b2c:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    1b30:	08 95       	ret

00001b32 <prom_read>:
	C6 = prom_read(0xAC);
}



uint16_t prom_read(uint8_t command){ // reads the specified data value stored in the sensor.
    1b32:	1f 93       	push	r17
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
	pd.P = P;
	return pd;
}

void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
    1b38:	12 e0       	ldi	r17, 0x02	; 2
    1b3a:	10 93 66 06 	sts	0x0666, r17	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>

uint16_t prom_read(uint8_t command){ // reads the specified data value stored in the sensor.
	uint16_t data;
	pres_select();
	spi_write(command);
	data = ((uint16_t)spi_read())<<8;
    1b3e:	ec df       	rcall	.-40     	; 0x1b18 <spi_write>
    1b40:	f3 df       	rcall	.-26     	; 0x1b28 <spi_read>
    1b42:	c8 2f       	mov	r28, r24
    1b44:	d0 e0       	ldi	r29, 0x00	; 0
	data += spi_read();
    1b46:	dc 2f       	mov	r29, r28
    1b48:	cc 27       	eor	r28, r28
    1b4a:	ee df       	rcall	.-36     	; 0x1b28 <spi_read>
    1b4c:	c8 0f       	add	r28, r24
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    1b4e:	d1 1d       	adc	r29, r1
    1b50:	10 93 65 06 	sts	0x0665, r17	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	pres_select();
	spi_write(command);
	data = ((uint16_t)spi_read())<<8;
	data += spi_read();
	pres_deselect();
	delay_ms(1);
    1b54:	66 ed       	ldi	r22, 0xD6	; 214
    1b56:	74 e1       	ldi	r23, 0x14	; 20
    1b58:	80 e0       	ldi	r24, 0x00	; 0
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
	return data;
}
    1b5c:	c4 df       	rcall	.-120    	; 0x1ae6 <__portable_avr_delay_cycles>
    1b5e:	ce 01       	movw	r24, r28
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	08 95       	ret

00001b68 <ms5607init>:
uint8_t spi_read(void){
	spi_write(0xFF); //writes a max byte 
	return SPIC.DATA; //gets the data and returns value
}

void ms5607init(void){
    1b68:	cf 93       	push	r28
	pd.P = P;
	return pd;
}

void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
    1b6a:	c2 e0       	ldi	r28, 0x02	; 2
    1b6c:	c0 93 66 06 	sts	0x0666, r28	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	return SPIC.DATA; //gets the data and returns value
}

void ms5607init(void){
	pres_select(); // Turn on output pin for port 4. 
	spi_write(0x1E);
    1b70:	8e e1       	ldi	r24, 0x1E	; 30
    1b72:	d2 df       	rcall	.-92     	; 0x1b18 <spi_write>
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    1b74:	c0 93 65 06 	sts	0x0665, r28	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>

void ms5607init(void){
	pres_select(); // Turn on output pin for port 4. 
	spi_write(0x1E);
	pres_deselect(); //reset command for the sensor; refer to datasheet for more.
	delay_ms(10);
    1b78:	66 e5       	ldi	r22, 0x56	; 86
    1b7a:	70 ed       	ldi	r23, 0xD0	; 208
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
	
	
	
	//Get the programmatical settings from the sensor for future calculations.
	C1 = prom_read(0xA2);
    1b80:	b2 df       	rcall	.-156    	; 0x1ae6 <__portable_avr_delay_cycles>
    1b82:	82 ea       	ldi	r24, 0xA2	; 162
    1b84:	d6 df       	rcall	.-84     	; 0x1b32 <prom_read>
    1b86:	80 93 2e 23 	sts	0x232E, r24	; 0x80232e <C1>
    1b8a:	90 93 2f 23 	sts	0x232F, r25	; 0x80232f <C1+0x1>
	C2 = prom_read(0xA4);
    1b8e:	84 ea       	ldi	r24, 0xA4	; 164
    1b90:	d0 df       	rcall	.-96     	; 0x1b32 <prom_read>
    1b92:	80 93 32 23 	sts	0x2332, r24	; 0x802332 <C2>
    1b96:	90 93 33 23 	sts	0x2333, r25	; 0x802333 <C2+0x1>
	C3 = prom_read(0xA6);
    1b9a:	86 ea       	ldi	r24, 0xA6	; 166
    1b9c:	ca df       	rcall	.-108    	; 0x1b32 <prom_read>
    1b9e:	80 93 30 23 	sts	0x2330, r24	; 0x802330 <C3>
    1ba2:	90 93 31 23 	sts	0x2331, r25	; 0x802331 <C3+0x1>
	C4 = prom_read(0xA8);
    1ba6:	88 ea       	ldi	r24, 0xA8	; 168
    1ba8:	c4 df       	rcall	.-120    	; 0x1b32 <prom_read>
    1baa:	80 93 38 23 	sts	0x2338, r24	; 0x802338 <C4>
    1bae:	90 93 39 23 	sts	0x2339, r25	; 0x802339 <C4+0x1>
	C5 = prom_read(0xAA);
    1bb2:	8a ea       	ldi	r24, 0xAA	; 170
    1bb4:	be df       	rcall	.-132    	; 0x1b32 <prom_read>
    1bb6:	80 93 36 23 	sts	0x2336, r24	; 0x802336 <C5>
    1bba:	90 93 37 23 	sts	0x2337, r25	; 0x802337 <C5+0x1>
	C6 = prom_read(0xAC);
    1bbe:	8c ea       	ldi	r24, 0xAC	; 172
    1bc0:	b8 df       	rcall	.-144    	; 0x1b32 <prom_read>
    1bc2:	80 93 34 23 	sts	0x2334, r24	; 0x802334 <C6>
    1bc6:	90 93 35 23 	sts	0x2335, r25	; 0x802335 <C6+0x1>
}
    1bca:	cf 91       	pop	r28
    1bcc:	08 95       	ret

00001bce <data_read>:
	pres_deselect();
	delay_ms(1);
	return data;
}

uint32_t data_read(uint8_t command){
    1bce:	8f 92       	push	r8
    1bd0:	9f 92       	push	r9
    1bd2:	af 92       	push	r10
    1bd4:	bf 92       	push	r11
    1bd6:	cf 92       	push	r12
    1bd8:	df 92       	push	r13
    1bda:	ef 92       	push	r14
    1bdc:	ff 92       	push	r15
    1bde:	1f 93       	push	r17
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
	pd.P = P;
	return pd;
}

void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
    1be4:	0f 2e       	mov	r0, r31
    1be6:	f6 e6       	ldi	r31, 0x66	; 102
    1be8:	ef 2e       	mov	r14, r31
    1bea:	f6 e0       	ldi	r31, 0x06	; 6
    1bec:	ff 2e       	mov	r15, r31
    1bee:	f0 2d       	mov	r31, r0
    1bf0:	12 e0       	ldi	r17, 0x02	; 2
    1bf2:	f7 01       	movw	r30, r14
}

uint32_t data_read(uint8_t command){
	uint32_t data;
	pres_select();
	spi_write(command);
    1bf4:	10 83       	st	Z, r17
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    1bf6:	90 df       	rcall	.-224    	; 0x1b18 <spi_write>
    1bf8:	c5 e6       	ldi	r28, 0x65	; 101
    1bfa:	d6 e0       	ldi	r29, 0x06	; 6
uint32_t data_read(uint8_t command){
	uint32_t data;
	pres_select();
	spi_write(command);
	pres_deselect();
	delay_ms(10); //delay to wait for the data output
    1bfc:	18 83       	st	Y, r17
    1bfe:	66 e5       	ldi	r22, 0x56	; 86
    1c00:	70 ed       	ldi	r23, 0xD0	; 208
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	90 e0       	ldi	r25, 0x00	; 0
	pres_select();
	spi_write(0x00);
    1c06:	6f df       	rcall	.-290    	; 0x1ae6 <__portable_avr_delay_cycles>
    1c08:	f7 01       	movw	r30, r14
	data = ((uint32_t)spi_read())<<16; //gets the first 16 bits of the sensor reading, shunts it to the front of the integer.
    1c0a:	10 83       	st	Z, r17
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	84 df       	rcall	.-248    	; 0x1b18 <spi_write>
    1c10:	8b df       	rcall	.-234    	; 0x1b28 <spi_read>
    1c12:	c8 2e       	mov	r12, r24
    1c14:	d1 2c       	mov	r13, r1
    1c16:	e1 2c       	mov	r14, r1
    1c18:	f1 2c       	mov	r15, r1
	data += ((uint32_t)spi_read())<<8; // gets another 8 bits of the reading, shunts it in as well.
    1c1a:	56 01       	movw	r10, r12
    1c1c:	99 24       	eor	r9, r9
    1c1e:	88 24       	eor	r8, r8
    1c20:	83 df       	rcall	.-250    	; 0x1b28 <spi_read>
    1c22:	c8 2e       	mov	r12, r24
    1c24:	d1 2c       	mov	r13, r1
    1c26:	e1 2c       	mov	r14, r1
    1c28:	f1 2c       	mov	r15, r1
    1c2a:	fe 2c       	mov	r15, r14
    1c2c:	ed 2c       	mov	r14, r13
    1c2e:	dc 2c       	mov	r13, r12
    1c30:	cc 24       	eor	r12, r12
    1c32:	c8 0c       	add	r12, r8
	data += (uint32_t)spi_read(); // gets the final 8 bits from the sensor.
    1c34:	d9 1c       	adc	r13, r9
    1c36:	ea 1c       	adc	r14, r10
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    1c38:	fb 1c       	adc	r15, r11
	data = ((uint32_t)spi_read())<<16; //gets the first 16 bits of the sensor reading, shunts it to the front of the integer.
	data += ((uint32_t)spi_read())<<8; // gets another 8 bits of the reading, shunts it in as well.
	data += (uint32_t)spi_read(); // gets the final 8 bits from the sensor.
	pres_deselect();
	//delay_ms(10);
	return data;
    1c3a:	76 df       	rcall	.-276    	; 0x1b28 <spi_read>
    1c3c:	18 83       	st	Y, r17
    1c3e:	a7 01       	movw	r20, r14
    1c40:	96 01       	movw	r18, r12
    1c42:	28 0f       	add	r18, r24
    1c44:	31 1d       	adc	r19, r1
    1c46:	41 1d       	adc	r20, r1
    1c48:	51 1d       	adc	r21, r1
}
    1c4a:	ca 01       	movw	r24, r20
    1c4c:	b9 01       	movw	r22, r18
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	1f 91       	pop	r17
    1c54:	ff 90       	pop	r15
    1c56:	ef 90       	pop	r14
    1c58:	df 90       	pop	r13
    1c5a:	cf 90       	pop	r12
    1c5c:	bf 90       	pop	r11
    1c5e:	af 90       	pop	r10
    1c60:	9f 90       	pop	r9
    1c62:	8f 90       	pop	r8
    1c64:	08 95       	ret

00001c66 <get_pressure>:

PressData get_pressure(void){ //refer to the datasheet for these calculations.
    1c66:	2f 92       	push	r2
    1c68:	3f 92       	push	r3
    1c6a:	4f 92       	push	r4
    1c6c:	5f 92       	push	r5
    1c6e:	6f 92       	push	r6
    1c70:	7f 92       	push	r7
    1c72:	8f 92       	push	r8
    1c74:	9f 92       	push	r9
    1c76:	af 92       	push	r10
    1c78:	bf 92       	push	r11
    1c7a:	cf 92       	push	r12
    1c7c:	df 92       	push	r13
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	cd b7       	in	r28, 0x3d	; 61
    1c8c:	de b7       	in	r29, 0x3e	; 62
    1c8e:	65 97       	sbiw	r28, 0x15	; 21
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	de bf       	out	0x3e, r29	; 62
	
	uint32_t D1 = data_read(0x48); // Gets digital pressure value
    1c94:	88 e4       	ldi	r24, 0x48	; 72
    1c96:	9b df       	rcall	.-202    	; 0x1bce <data_read>
    1c98:	2b 01       	movw	r4, r22
	uint32_t D2 = data_read(0x58); // Gets temperature value
    1c9a:	3c 01       	movw	r6, r24
    1c9c:	88 e5       	ldi	r24, 0x58	; 88
	
	
	("D1: %lu, D2: %lu", D1, D2);
	
	int32_t dT = (int64_t)D2 - (int64_t)C5 * 256; // Runs calculations to get dT
	int32_t TEMP = 2000 + (int64_t)dT * (int64_t)C6 / 8388608; // Finds actual temp
    1c9e:	97 df       	rcall	.-210    	; 0x1bce <data_read>
    1ca0:	20 91 36 23 	lds	r18, 0x2336	; 0x802336 <C5>
    1ca4:	30 91 37 23 	lds	r19, 0x2337	; 0x802337 <C5+0x1>
    1ca8:	89 01       	movw	r16, r18
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	32 2f       	mov	r19, r18
    1cb0:	21 2f       	mov	r18, r17
    1cb2:	10 2f       	mov	r17, r16
    1cb4:	00 27       	eor	r16, r16
    1cb6:	6b 01       	movw	r12, r22
    1cb8:	7c 01       	movw	r14, r24
    1cba:	c0 1a       	sub	r12, r16
    1cbc:	d1 0a       	sbc	r13, r17
    1cbe:	e2 0a       	sbc	r14, r18
    1cc0:	f3 0a       	sbc	r15, r19
    1cc2:	c9 86       	std	Y+9, r12	; 0x09
    1cc4:	da 86       	std	Y+10, r13	; 0x0a
    1cc6:	eb 86       	std	Y+11, r14	; 0x0b
    1cc8:	fc 86       	std	Y+12, r15	; 0x0c
    1cca:	ff 0c       	add	r15, r15
    1ccc:	cc 08       	sbc	r12, r12
    1cce:	dc 2c       	mov	r13, r12
    1cd0:	76 01       	movw	r14, r12
    1cd2:	cd 86       	std	Y+13, r12	; 0x0d
    1cd4:	de 86       	std	Y+14, r13	; 0x0e
    1cd6:	ef 86       	std	Y+15, r14	; 0x0f
	//printf("TEMP: %li", TEMP);
	
	int64_t OFF =	(int64_t)C2 * 131072 + ((int64_t)C4 * (int64_t)dT) / 64;
	int64_t SENS = (int64_t)C1 * 65536 + ((int64_t)C3 * (int64_t)dT) / 128; 
	int32_t P = ((int64_t)D1 * (int64_t)SENS / 2097152 - (int64_t)OFF) / 32768; // Gets the actual temperature and type casts it.
    1cd8:	f8 8a       	std	Y+16, r15	; 0x10
    1cda:	40 91 30 23 	lds	r20, 0x2330	; 0x802330 <C3>
    1cde:	50 91 31 23 	lds	r21, 0x2331	; 0x802331 <C3+0x1>
    1ce2:	a9 84       	ldd	r10, Y+9	; 0x09
    1ce4:	ba 84       	ldd	r11, Y+10	; 0x0a
    1ce6:	cb 84       	ldd	r12, Y+11	; 0x0b
    1ce8:	dc 84       	ldd	r13, Y+12	; 0x0c
    1cea:	ed 84       	ldd	r14, Y+13	; 0x0d
    1cec:	fe 2c       	mov	r15, r14
    1cee:	0e 2d       	mov	r16, r14
    1cf0:	1e 2d       	mov	r17, r14
    1cf2:	24 2f       	mov	r18, r20
    1cf4:	35 2f       	mov	r19, r21
    1cf6:	40 e0       	ldi	r20, 0x00	; 0
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	70 e0       	ldi	r23, 0x00	; 0
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	0e 94 a9 1b 	call	0x3752	; 0x3752 <__muldi3>
    1d06:	02 2f       	mov	r16, r18
    1d08:	13 2f       	mov	r17, r19
    1d0a:	b4 2f       	mov	r27, r20
    1d0c:	f5 2f       	mov	r31, r21
    1d0e:	e6 2f       	mov	r30, r22
    1d10:	79 8b       	std	Y+17, r23	; 0x11
    1d12:	28 2e       	mov	r2, r24
    1d14:	39 2e       	mov	r3, r25
    1d16:	a0 e0       	ldi	r26, 0x00	; 0
    1d18:	0e 94 4f 1c 	call	0x389e	; 0x389e <__cmpdi2_s8>
    1d1c:	5c f4       	brge	.+22     	; 0x1d34 <get_pressure+0xce>
    1d1e:	af e7       	ldi	r26, 0x7F	; 127
    1d20:	0e 94 3a 1c 	call	0x3874	; 0x3874 <__adddi3_s8>
    1d24:	02 2f       	mov	r16, r18
    1d26:	13 2f       	mov	r17, r19
    1d28:	b4 2f       	mov	r27, r20
    1d2a:	f5 2f       	mov	r31, r21
    1d2c:	e6 2f       	mov	r30, r22
    1d2e:	79 8b       	std	Y+17, r23	; 0x11
    1d30:	28 2e       	mov	r2, r24
    1d32:	39 2e       	mov	r3, r25
    1d34:	20 2f       	mov	r18, r16
    1d36:	31 2f       	mov	r19, r17
    1d38:	4b 2f       	mov	r20, r27
    1d3a:	5f 2f       	mov	r21, r31
    1d3c:	6e 2f       	mov	r22, r30
    1d3e:	79 89       	ldd	r23, Y+17	; 0x11
    1d40:	82 2d       	mov	r24, r2
    1d42:	93 2d       	mov	r25, r3
    1d44:	07 e0       	ldi	r16, 0x07	; 7
    1d46:	0e 94 13 1c 	call	0x3826	; 0x3826 <__ashrdi3>
    1d4a:	22 2e       	mov	r2, r18
    1d4c:	33 2e       	mov	r3, r19
    1d4e:	84 2e       	mov	r8, r20
    1d50:	95 2e       	mov	r9, r21
    1d52:	b6 2f       	mov	r27, r22
    1d54:	a7 2f       	mov	r26, r23
    1d56:	f8 2f       	mov	r31, r24
    1d58:	e9 2f       	mov	r30, r25
    1d5a:	a0 90 2e 23 	lds	r10, 0x232E	; 0x80232e <C1>
    1d5e:	b0 90 2f 23 	lds	r11, 0x232F	; 0x80232f <C1+0x1>
    1d62:	2a 2d       	mov	r18, r10
    1d64:	3b 2d       	mov	r19, r11
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	00 e1       	ldi	r16, 0x10	; 16
    1d74:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__ashldi3>
    1d78:	a2 2e       	mov	r10, r18
    1d7a:	b3 2e       	mov	r11, r19
    1d7c:	c4 2e       	mov	r12, r20
    1d7e:	d5 2e       	mov	r13, r21
    1d80:	e6 2e       	mov	r14, r22
    1d82:	f7 2e       	mov	r15, r23
    1d84:	08 2f       	mov	r16, r24
    1d86:	19 2f       	mov	r17, r25
    1d88:	22 2d       	mov	r18, r2
    1d8a:	33 2d       	mov	r19, r3
    1d8c:	48 2d       	mov	r20, r8
    1d8e:	59 2d       	mov	r21, r9
    1d90:	6b 2f       	mov	r22, r27
    1d92:	7a 2f       	mov	r23, r26
    1d94:	8f 2f       	mov	r24, r31
    1d96:	9e 2f       	mov	r25, r30
    1d98:	0e 94 31 1c 	call	0x3862	; 0x3862 <__adddi3>
    1d9c:	12 01       	movw	r2, r4
    1d9e:	23 01       	movw	r4, r6
    1da0:	a2 2c       	mov	r10, r2
    1da2:	b3 2c       	mov	r11, r3
    1da4:	c4 2c       	mov	r12, r4
    1da6:	d5 2c       	mov	r13, r5
    1da8:	e1 2c       	mov	r14, r1
    1daa:	f1 2c       	mov	r15, r1
    1dac:	00 e0       	ldi	r16, 0x00	; 0
    1dae:	10 e0       	ldi	r17, 0x00	; 0
    1db0:	0e 94 a9 1b 	call	0x3752	; 0x3752 <__muldi3>
    1db4:	f2 2e       	mov	r15, r18
    1db6:	03 2f       	mov	r16, r19
    1db8:	14 2f       	mov	r17, r20
    1dba:	b5 2f       	mov	r27, r21
    1dbc:	f6 2f       	mov	r31, r22
    1dbe:	e7 2f       	mov	r30, r23
    1dc0:	58 2e       	mov	r5, r24
    1dc2:	69 2e       	mov	r6, r25
    1dc4:	a0 e0       	ldi	r26, 0x00	; 0
    1dc6:	0e 94 4f 1c 	call	0x389e	; 0x389e <__cmpdi2_s8>
    1dca:	84 f4       	brge	.+32     	; 0x1dec <get_pressure+0x186>
    1dcc:	21 50       	subi	r18, 0x01	; 1
    1dce:	31 09       	sbc	r19, r1
    1dd0:	40 4e       	sbci	r20, 0xE0	; 224
    1dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd4:	6f 4f       	sbci	r22, 0xFF	; 255
    1dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd8:	8f 4f       	sbci	r24, 0xFF	; 255
    1dda:	9f 4f       	sbci	r25, 0xFF	; 255
    1ddc:	f2 2e       	mov	r15, r18
    1dde:	03 2f       	mov	r16, r19
    1de0:	14 2f       	mov	r17, r20
    1de2:	b5 2f       	mov	r27, r21
    1de4:	f6 2f       	mov	r31, r22
    1de6:	e7 2f       	mov	r30, r23
    1de8:	58 2e       	mov	r5, r24
    1dea:	69 2e       	mov	r6, r25
    1dec:	2f 2d       	mov	r18, r15
    1dee:	30 2f       	mov	r19, r16
    1df0:	41 2f       	mov	r20, r17
    1df2:	5b 2f       	mov	r21, r27
    1df4:	6f 2f       	mov	r22, r31
    1df6:	7e 2f       	mov	r23, r30
    1df8:	85 2d       	mov	r24, r5
    1dfa:	96 2d       	mov	r25, r6
    1dfc:	05 e1       	ldi	r16, 0x15	; 21
    1dfe:	0e 94 13 1c 	call	0x3826	; 0x3826 <__ashrdi3>
    1e02:	72 2e       	mov	r7, r18
    1e04:	83 2e       	mov	r8, r19
    1e06:	94 2e       	mov	r9, r20
    1e08:	59 8b       	std	Y+17, r21	; 0x11
    1e0a:	6a 8b       	std	Y+18, r22	; 0x12
    1e0c:	7b 8b       	std	Y+19, r23	; 0x13
    1e0e:	8c 8b       	std	Y+20, r24	; 0x14
    1e10:	9d 8b       	std	Y+21, r25	; 0x15
    1e12:	40 91 38 23 	lds	r20, 0x2338	; 0x802338 <C4>
    1e16:	50 91 39 23 	lds	r21, 0x2339	; 0x802339 <C4+0x1>
    1e1a:	a9 84       	ldd	r10, Y+9	; 0x09
    1e1c:	ba 84       	ldd	r11, Y+10	; 0x0a
    1e1e:	cb 84       	ldd	r12, Y+11	; 0x0b
    1e20:	dc 84       	ldd	r13, Y+12	; 0x0c
    1e22:	ed 84       	ldd	r14, Y+13	; 0x0d
    1e24:	fe 2c       	mov	r15, r14
    1e26:	0e 2d       	mov	r16, r14
    1e28:	1e 2d       	mov	r17, r14
    1e2a:	24 2f       	mov	r18, r20
    1e2c:	35 2f       	mov	r19, r21
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	50 e0       	ldi	r21, 0x00	; 0
    1e32:	60 e0       	ldi	r22, 0x00	; 0
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	0e 94 a9 1b 	call	0x3752	; 0x3752 <__muldi3>
    1e3e:	f2 2e       	mov	r15, r18
    1e40:	03 2f       	mov	r16, r19
    1e42:	14 2f       	mov	r17, r20
    1e44:	b5 2f       	mov	r27, r21
    1e46:	f6 2f       	mov	r31, r22
    1e48:	e7 2f       	mov	r30, r23
    1e4a:	28 2e       	mov	r2, r24
    1e4c:	39 2e       	mov	r3, r25
    1e4e:	a0 e0       	ldi	r26, 0x00	; 0
    1e50:	0e 94 4f 1c 	call	0x389e	; 0x389e <__cmpdi2_s8>
    1e54:	5c f4       	brge	.+22     	; 0x1e6c <get_pressure+0x206>
    1e56:	af e3       	ldi	r26, 0x3F	; 63
    1e58:	0e 94 3a 1c 	call	0x3874	; 0x3874 <__adddi3_s8>
    1e5c:	f2 2e       	mov	r15, r18
    1e5e:	03 2f       	mov	r16, r19
    1e60:	14 2f       	mov	r17, r20
    1e62:	b5 2f       	mov	r27, r21
    1e64:	f6 2f       	mov	r31, r22
    1e66:	e7 2f       	mov	r30, r23
    1e68:	28 2e       	mov	r2, r24
    1e6a:	39 2e       	mov	r3, r25
    1e6c:	2f 2d       	mov	r18, r15
    1e6e:	30 2f       	mov	r19, r16
    1e70:	41 2f       	mov	r20, r17
    1e72:	5b 2f       	mov	r21, r27
    1e74:	6f 2f       	mov	r22, r31
    1e76:	7e 2f       	mov	r23, r30
    1e78:	82 2d       	mov	r24, r2
    1e7a:	93 2d       	mov	r25, r3
    1e7c:	06 e0       	ldi	r16, 0x06	; 6
    1e7e:	0e 94 13 1c 	call	0x3826	; 0x3826 <__ashrdi3>
    1e82:	32 2e       	mov	r3, r18
    1e84:	43 2e       	mov	r4, r19
    1e86:	54 2e       	mov	r5, r20
    1e88:	65 2e       	mov	r6, r21
    1e8a:	b6 2f       	mov	r27, r22
    1e8c:	a7 2f       	mov	r26, r23
    1e8e:	f8 2f       	mov	r31, r24
    1e90:	e9 2f       	mov	r30, r25
    1e92:	a0 90 32 23 	lds	r10, 0x2332	; 0x802332 <C2>
    1e96:	b0 90 33 23 	lds	r11, 0x2333	; 0x802333 <C2+0x1>
    1e9a:	2a 2d       	mov	r18, r10
    1e9c:	3b 2d       	mov	r19, r11
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	50 e0       	ldi	r21, 0x00	; 0
    1ea2:	60 e0       	ldi	r22, 0x00	; 0
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	01 e1       	ldi	r16, 0x11	; 17
    1eac:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__ashldi3>
    1eb0:	a2 2e       	mov	r10, r18
    1eb2:	b3 2e       	mov	r11, r19
    1eb4:	c4 2e       	mov	r12, r20
    1eb6:	d5 2e       	mov	r13, r21
    1eb8:	e6 2e       	mov	r14, r22
    1eba:	f7 2e       	mov	r15, r23
    1ebc:	08 2f       	mov	r16, r24
    1ebe:	19 2f       	mov	r17, r25
    1ec0:	23 2d       	mov	r18, r3
    1ec2:	34 2d       	mov	r19, r4
    1ec4:	45 2d       	mov	r20, r5
    1ec6:	56 2d       	mov	r21, r6
    1ec8:	6b 2f       	mov	r22, r27
    1eca:	7a 2f       	mov	r23, r26
    1ecc:	8f 2f       	mov	r24, r31
    1ece:	9e 2f       	mov	r25, r30
    1ed0:	0e 94 31 1c 	call	0x3862	; 0x3862 <__adddi3>
    1ed4:	a2 2e       	mov	r10, r18
    1ed6:	b3 2e       	mov	r11, r19
    1ed8:	c4 2e       	mov	r12, r20
    1eda:	d5 2e       	mov	r13, r21
    1edc:	e6 2e       	mov	r14, r22
    1ede:	f7 2e       	mov	r15, r23
    1ee0:	08 2f       	mov	r16, r24
    1ee2:	19 2f       	mov	r17, r25
    1ee4:	27 2d       	mov	r18, r7
    1ee6:	38 2d       	mov	r19, r8
    1ee8:	49 2d       	mov	r20, r9
    1eea:	59 89       	ldd	r21, Y+17	; 0x11
    1eec:	6a 89       	ldd	r22, Y+18	; 0x12
    1eee:	7b 89       	ldd	r23, Y+19	; 0x13
    1ef0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ef2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ef4:	0e 94 46 1c 	call	0x388c	; 0x388c <__subdi3>
    1ef8:	f2 2e       	mov	r15, r18
    1efa:	03 2f       	mov	r16, r19
    1efc:	14 2f       	mov	r17, r20
    1efe:	b5 2f       	mov	r27, r21
    1f00:	f6 2f       	mov	r31, r22
    1f02:	e7 2f       	mov	r30, r23
    1f04:	58 2e       	mov	r5, r24
    1f06:	69 2e       	mov	r6, r25
    1f08:	a0 e0       	ldi	r26, 0x00	; 0
    1f0a:	0e 94 4f 1c 	call	0x389e	; 0x389e <__cmpdi2_s8>
    1f0e:	84 f4       	brge	.+32     	; 0x1f30 <get_pressure+0x2ca>
    1f10:	21 50       	subi	r18, 0x01	; 1
    1f12:	30 48       	sbci	r19, 0x80	; 128
    1f14:	4f 4f       	sbci	r20, 0xFF	; 255
    1f16:	5f 4f       	sbci	r21, 0xFF	; 255
    1f18:	6f 4f       	sbci	r22, 0xFF	; 255
    1f1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f1c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f20:	f2 2e       	mov	r15, r18
    1f22:	03 2f       	mov	r16, r19
    1f24:	14 2f       	mov	r17, r20
    1f26:	b5 2f       	mov	r27, r21
    1f28:	f6 2f       	mov	r31, r22
    1f2a:	e7 2f       	mov	r30, r23
    1f2c:	58 2e       	mov	r5, r24
    1f2e:	69 2e       	mov	r6, r25
    1f30:	2f 2d       	mov	r18, r15
    1f32:	30 2f       	mov	r19, r16
    1f34:	41 2f       	mov	r20, r17
    1f36:	5b 2f       	mov	r21, r27
    1f38:	6f 2f       	mov	r22, r31
    1f3a:	7e 2f       	mov	r23, r30
    1f3c:	85 2d       	mov	r24, r5
    1f3e:	96 2d       	mov	r25, r6
    1f40:	0f e0       	ldi	r16, 0x0F	; 15
    1f42:	0e 94 13 1c 	call	0x3826	; 0x3826 <__ashrdi3>
    1f46:	92 2e       	mov	r9, r18
    1f48:	73 2e       	mov	r7, r19
    1f4a:	84 2e       	mov	r8, r20
    1f4c:	99 8a       	std	Y+17, r9	; 0x11
    1f4e:	8a 8a       	std	Y+18, r8	; 0x12
	//printf("Test: %lld\n", test);
	//int32_t P = 0;
	PressData pd;
	pd.TEMP = TEMP;
	pd.P = P;
	return pd;
    1f50:	35 2e       	mov	r3, r21
    1f52:	40 91 34 23 	lds	r20, 0x2334	; 0x802334 <C6>
    1f56:	50 91 35 23 	lds	r21, 0x2335	; 0x802335 <C6+0x1>
    1f5a:	a9 84       	ldd	r10, Y+9	; 0x09
    1f5c:	ba 84       	ldd	r11, Y+10	; 0x0a
    1f5e:	cb 84       	ldd	r12, Y+11	; 0x0b
    1f60:	dc 84       	ldd	r13, Y+12	; 0x0c
    1f62:	ed 84       	ldd	r14, Y+13	; 0x0d
    1f64:	fe 2c       	mov	r15, r14
    1f66:	0e 2d       	mov	r16, r14
    1f68:	1e 2d       	mov	r17, r14
    1f6a:	24 2f       	mov	r18, r20
    1f6c:	35 2f       	mov	r19, r21
    1f6e:	40 e0       	ldi	r20, 0x00	; 0
    1f70:	50 e0       	ldi	r21, 0x00	; 0
    1f72:	60 e0       	ldi	r22, 0x00	; 0
    1f74:	70 e0       	ldi	r23, 0x00	; 0
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	0e 94 a9 1b 	call	0x3752	; 0x3752 <__muldi3>
    1f7e:	f2 2e       	mov	r15, r18
    1f80:	03 2f       	mov	r16, r19
    1f82:	14 2f       	mov	r17, r20
    1f84:	b5 2f       	mov	r27, r21
    1f86:	f6 2f       	mov	r31, r22
    1f88:	e7 2f       	mov	r30, r23
    1f8a:	28 2e       	mov	r2, r24
    1f8c:	99 2e       	mov	r9, r25
    1f8e:	a0 e0       	ldi	r26, 0x00	; 0
    1f90:	0e 94 4f 1c 	call	0x389e	; 0x389e <__cmpdi2_s8>
    1f94:	84 f4       	brge	.+32     	; 0x1fb6 <get_pressure+0x350>
    1f96:	21 50       	subi	r18, 0x01	; 1
    1f98:	31 09       	sbc	r19, r1
    1f9a:	40 48       	sbci	r20, 0x80	; 128
    1f9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1f9e:	6f 4f       	sbci	r22, 0xFF	; 255
    1fa0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fa2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fa4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa6:	f2 2e       	mov	r15, r18
    1fa8:	03 2f       	mov	r16, r19
    1faa:	14 2f       	mov	r17, r20
    1fac:	b5 2f       	mov	r27, r21
    1fae:	f6 2f       	mov	r31, r22
    1fb0:	e7 2f       	mov	r30, r23
    1fb2:	28 2e       	mov	r2, r24
    1fb4:	99 2e       	mov	r9, r25
    1fb6:	2f 2d       	mov	r18, r15
    1fb8:	30 2f       	mov	r19, r16
    1fba:	41 2f       	mov	r20, r17
    1fbc:	5b 2f       	mov	r21, r27
    1fbe:	6f 2f       	mov	r22, r31
    1fc0:	7e 2f       	mov	r23, r30
    1fc2:	82 2d       	mov	r24, r2
    1fc4:	99 2d       	mov	r25, r9
    1fc6:	07 e1       	ldi	r16, 0x17	; 23
    1fc8:	0e 94 13 1c 	call	0x3826	; 0x3826 <__ashrdi3>
    1fcc:	82 2e       	mov	r8, r18
    1fce:	93 2e       	mov	r9, r19
    1fd0:	a4 2e       	mov	r10, r20
    1fd2:	b5 2e       	mov	r11, r21
    1fd4:	d5 01       	movw	r26, r10
    1fd6:	c4 01       	movw	r24, r8
    1fd8:	80 53       	subi	r24, 0x30	; 48
    1fda:	98 4f       	sbci	r25, 0xF8	; 248
    1fdc:	af 4f       	sbci	r26, 0xFF	; 255
    1fde:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	ab 83       	std	Y+3, r26	; 0x03
    1fe6:	bc 83       	std	Y+4, r27	; 0x04
    1fe8:	d9 88       	ldd	r13, Y+17	; 0x11
    1fea:	ea 88       	ldd	r14, Y+18	; 0x12
    1fec:	28 2f       	mov	r18, r24
    1fee:	3a 81       	ldd	r19, Y+2	; 0x02
    1ff0:	4b 81       	ldd	r20, Y+3	; 0x03
    1ff2:	5c 81       	ldd	r21, Y+4	; 0x04
    1ff4:	6d 2d       	mov	r22, r13
}
    1ff6:	77 2d       	mov	r23, r7
    1ff8:	8e 2d       	mov	r24, r14
    1ffa:	93 2d       	mov	r25, r3
    1ffc:	65 96       	adiw	r28, 0x15	; 21
    1ffe:	cd bf       	out	0x3d, r28	; 61
    2000:	de bf       	out	0x3e, r29	; 62
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	1f 91       	pop	r17
    2008:	0f 91       	pop	r16
    200a:	ff 90       	pop	r15
    200c:	ef 90       	pop	r14
    200e:	df 90       	pop	r13
    2010:	cf 90       	pop	r12
    2012:	bf 90       	pop	r11
    2014:	af 90       	pop	r10
    2016:	9f 90       	pop	r9
    2018:	8f 90       	pop	r8
    201a:	7f 90       	pop	r7
    201c:	6f 90       	pop	r6
    201e:	5f 90       	pop	r5
    2020:	4f 90       	pop	r4
    2022:	3f 90       	pop	r3
    2024:	2f 90       	pop	r2
    2026:	08 95       	ret

00002028 <adc_init>:
#include <asf.h>
#include <math.h>
#include "thermistor.h"


void adc_init(void){	//This is for PA6... mostly
    2028:	ff 92       	push	r15
    202a:	0f 93       	push	r16
    202c:	1f 93       	push	r17
    202e:	cf 93       	push	r28
    2030:	df 93       	push	r29
	PORTA.DIRCLR = 0b01000000;
    2032:	e0 e0       	ldi	r30, 0x00	; 0
    2034:	f6 e0       	ldi	r31, 0x06	; 6
    2036:	80 e4       	ldi	r24, 0x40	; 64
    2038:	82 83       	std	Z+2, r24	; 0x02
	PORTA.DIR = 0b10111111;
    203a:	8f eb       	ldi	r24, 0xBF	; 191
    203c:	80 83       	st	Z, r24
	ADCA.CTRLA = 0b00000001;
    203e:	c0 e0       	ldi	r28, 0x00	; 0
    2040:	d2 e0       	ldi	r29, 0x02	; 2
    2042:	ff 24       	eor	r15, r15
    2044:	f3 94       	inc	r15
    2046:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000;
    2048:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000;
    204a:	80 e1       	ldi	r24, 0x10	; 16
    204c:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101;
    204e:	85 e0       	ldi	r24, 0x05	; 5
    2050:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    2052:	61 e2       	ldi	r22, 0x21	; 33
    2054:	70 e0       	ldi	r23, 0x00	; 0
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	0e 94 0a 07 	call	0xe14	; 0xe14 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    205c:	08 2f       	mov	r16, r24
    205e:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    2060:	10 2f       	mov	r17, r16
    2062:	00 27       	eor	r16, r16
    2064:	60 e2       	ldi	r22, 0x20	; 32
    2066:	70 e0       	ldi	r23, 0x00	; 0
    2068:	82 e0       	ldi	r24, 0x02	; 2
    206a:	0e 94 0a 07 	call	0xe14	; 0xe14 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    206e:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    2070:	0c 87       	std	Y+12, r16	; 0x0c
    2072:	1d 87       	std	Y+13, r17	; 0x0d
	
	ADCA.CH0.CTRL = 0b00000001;
    2074:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000110;
    2076:	86 e0       	ldi	r24, 0x06	; 6
    2078:	89 a3       	std	Y+33, r24	; 0x21
}
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	1f 91       	pop	r17
    2080:	0f 91       	pop	r16
    2082:	ff 90       	pop	r15
    2084:	08 95       	ret

00002086 <timer_counter_init>:
	   //PORTD.DIRSET = 0b00000001;
	   //TCD0.CTRLA = 0b00000111;
	   //TCD0.CTRLB = 0b00000011;
	   //TCD0.PER = (uint16_t)(period);
	   
	   PORTE.DIRSET = 0b00000001;
    2086:	81 e0       	ldi	r24, 0x01	; 1
    2088:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
	   TCE0.CTRLA = 0b00000111;
    208c:	e0 e0       	ldi	r30, 0x00	; 0
    208e:	fa e0       	ldi	r31, 0x0A	; 10
    2090:	87 e0       	ldi	r24, 0x07	; 7
    2092:	80 83       	st	Z, r24
	   TCE0.CTRLB = 0b00000011;
    2094:	83 e0       	ldi	r24, 0x03	; 3
    2096:	81 83       	std	Z+1, r24	; 0x01
    2098:	08 95       	ret

0000209a <buzzer_counter_init>:
	   //TCA0.CCC = TCA0.PER-(TCA0.PER/10);
	   //TCD0.CCA = TCD0.PER*((float)duty_cycle/100);
   }
   
void buzzer_counter_init(uint16_t period, uint16_t duty_cycle){
	  TCC0.CTRLA = 0b00000101; //div/64
    209a:	e0 e0       	ldi	r30, 0x00	; 0
    209c:	f8 e0       	ldi	r31, 0x08	; 8
    209e:	25 e0       	ldi	r18, 0x05	; 5
    20a0:	20 83       	st	Z, r18
	  TCC0.CTRLB = 0b00000011;
    20a2:	23 e0       	ldi	r18, 0x03	; 3
    20a4:	21 83       	std	Z+1, r18	; 0x01
	  TCC0.PER = (uint16_t)(period);
    20a6:	86 a3       	std	Z+38, r24	; 0x26
    20a8:	97 a3       	std	Z+39, r25	; 0x27
    20aa:	08 95       	ret

000020ac <servo_counter>:

  }
  
void servo_counter(float duty_cycle){
    20ac:	8f 92       	push	r8
    20ae:	9f 92       	push	r9
    20b0:	af 92       	push	r10
    20b2:	bf 92       	push	r11
    20b4:	cf 92       	push	r12
    20b6:	df 92       	push	r13
    20b8:	ef 92       	push	r14
    20ba:	ff 92       	push	r15
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	6b 01       	movw	r12, r22
    20c2:	7c 01       	movw	r14, r24
	float hertz = 100000; // Arbitrary hertz value, since we're using PWM, should be a 1ms period.
	uint16_t blink_period = (uint16_t)(32000000 / (1024 * hertz) - 1);
	TCE0.PER = (uint16_t)(blink_period);
    20c4:	c0 e0       	ldi	r28, 0x00	; 0
    20c6:	da e0       	ldi	r29, 0x0A	; 10
    20c8:	1e a2       	std	Y+38, r1	; 0x26
    20ca:	1f a2       	std	Y+39, r1	; 0x27
	TCE0.CCA = TCE0.PER * (1-duty_cycle);
    20cc:	6e a1       	ldd	r22, Y+38	; 0x26
    20ce:	7f a1       	ldd	r23, Y+39	; 0x27
    20d0:	80 e0       	ldi	r24, 0x00	; 0
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	54 d6       	rcall	.+3240   	; 0x2d7e <__floatunsisf>
    20d6:	4b 01       	movw	r8, r22
    20d8:	5c 01       	movw	r10, r24
    20da:	a7 01       	movw	r20, r14
    20dc:	96 01       	movw	r18, r12
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	80 e8       	ldi	r24, 0x80	; 128
    20e4:	9f e3       	ldi	r25, 0x3F	; 63
    20e6:	4d d5       	rcall	.+2714   	; 0x2b82 <__subsf3>
    20e8:	9b 01       	movw	r18, r22
    20ea:	ac 01       	movw	r20, r24
    20ec:	c5 01       	movw	r24, r10
    20ee:	b4 01       	movw	r22, r8
    20f0:	d4 d6       	rcall	.+3496   	; 0x2e9a <__mulsf3>
    20f2:	19 d6       	rcall	.+3122   	; 0x2d26 <__fixunssfsi>
    20f4:	68 a7       	std	Y+40, r22	; 0x28
    20f6:	79 a7       	std	Y+41, r23	; 0x29
  }
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	ff 90       	pop	r15
    20fe:	ef 90       	pop	r14
    2100:	df 90       	pop	r13
    2102:	cf 90       	pop	r12
    2104:	bf 90       	pop	r11
    2106:	af 90       	pop	r10
    2108:	9f 90       	pop	r9
    210a:	8f 90       	pop	r8
    210c:	08 95       	ret

0000210e <__vector_14>:
	tc_write_period(&TCE0, period);
	tc_write_cc(&TCE0, TC_CCA, on);
	tc_write_cc(&TCE0, TC_CCB, off);
}*/

ISR(TCC0_OVF_vect){
    210e:	1f 92       	push	r1
    2110:	0f 92       	push	r0
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	0f 92       	push	r0
    2116:	11 24       	eor	r1, r1
    2118:	08 b6       	in	r0, 0x38	; 56
    211a:	0f 92       	push	r0
    211c:	18 be       	out	0x38, r1	; 56
    211e:	8f 93       	push	r24
	PORTB.OUTTGL = 0b00000001;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x700627>
//	printf("buzz");
//	PORTA.OUTTGL = 0b00000111;
}
    2126:	8f 91       	pop	r24
    2128:	0f 90       	pop	r0
    212a:	08 be       	out	0x38, r0	; 56
    212c:	0f 90       	pop	r0
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	0f 90       	pop	r0
    2132:	1f 90       	pop	r1
    2134:	18 95       	reti

00002136 <__vector_77>:


ISR(TCD0_OVF_vect){
    2136:	1f 92       	push	r1
    2138:	0f 92       	push	r0
    213a:	0f b6       	in	r0, 0x3f	; 63
    213c:	0f 92       	push	r0
    213e:	11 24       	eor	r1, r1
    2140:	08 b6       	in	r0, 0x38	; 56
    2142:	0f 92       	push	r0
    2144:	18 be       	out	0x38, r1	; 56
    2146:	8f 93       	push	r24
 	PORTA.OUTTGL = 0b00011110;
    2148:	8e e1       	ldi	r24, 0x1E	; 30
    214a:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x700607>
    214e:	8f 91       	pop	r24
    2150:	0f 90       	pop	r0
    2152:	08 be       	out	0x38, r0	; 56
    2154:	0f 90       	pop	r0
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	0f 90       	pop	r0
    215a:	1f 90       	pop	r1
    215c:	18 95       	reti

0000215e <usart_serial_getchar>:
		read_buffer[loc] = usart_getchar(usart_channel);
		loc++;
		
	}
	return read_buffer;
}
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
    2162:	eb 01       	movw	r28, r22
    2164:	0e 94 1c 07 	call	0xe38	; 0xe38 <usart_getchar>
    2168:	88 83       	st	Y, r24
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	08 95       	ret

00002170 <usart_serial_putchar>:
    2170:	0c 94 14 07 	jmp	0xe28	; 0xe28 <usart_putchar>
    2174:	08 95       	ret

00002176 <usart_init>:
    2176:	cf 93       	push	r28
    2178:	df 93       	push	r29
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	27 97       	sbiw	r28, 0x07	; 7
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	de bf       	out	0x3e, r29	; 62
    2184:	e0 e6       	ldi	r30, 0x60	; 96
    2186:	f6 e0       	ldi	r31, 0x06	; 6
    2188:	88 e0       	ldi	r24, 0x08	; 8
    218a:	81 83       	std	Z+1, r24	; 0x01
    218c:	85 83       	std	Z+5, r24	; 0x05
    218e:	e0 e4       	ldi	r30, 0x40	; 64
    2190:	f6 e0       	ldi	r31, 0x06	; 6
    2192:	81 83       	std	Z+1, r24	; 0x01
    2194:	85 83       	std	Z+5, r24	; 0x05
    2196:	80 ea       	ldi	r24, 0xA0	; 160
    2198:	99 e0       	ldi	r25, 0x09	; 9
    219a:	80 93 24 23 	sts	0x2324, r24	; 0x802324 <stdio_base>
    219e:	90 93 25 23 	sts	0x2325, r25	; 0x802325 <stdio_base+0x1>
    21a2:	88 eb       	ldi	r24, 0xB8	; 184
    21a4:	90 e1       	ldi	r25, 0x10	; 16
    21a6:	80 93 22 23 	sts	0x2322, r24	; 0x802322 <ptr_put>
    21aa:	90 93 23 23 	sts	0x2323, r25	; 0x802323 <ptr_put+0x1>
    21ae:	8f ea       	ldi	r24, 0xAF	; 175
    21b0:	90 e1       	ldi	r25, 0x10	; 16
    21b2:	80 93 20 23 	sts	0x2320, r24	; 0x802320 <ptr_get>
    21b6:	90 93 21 23 	sts	0x2321, r25	; 0x802321 <ptr_get+0x1>
    21ba:	e4 e1       	ldi	r30, 0x14	; 20
    21bc:	f0 e2       	ldi	r31, 0x20	; 32
    21be:	84 81       	ldd	r24, Z+4	; 0x04
    21c0:	8d 83       	std	Y+5, r24	; 0x05
    21c2:	85 81       	ldd	r24, Z+5	; 0x05
    21c4:	8e 83       	std	Y+6, r24	; 0x06
    21c6:	86 81       	ldd	r24, Z+6	; 0x06
    21c8:	8f 83       	std	Y+7, r24	; 0x07
    21ca:	80 81       	ld	r24, Z
    21cc:	91 81       	ldd	r25, Z+1	; 0x01
    21ce:	a2 81       	ldd	r26, Z+2	; 0x02
    21d0:	b3 81       	ldd	r27, Z+3	; 0x03
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	9a 83       	std	Y+2, r25	; 0x02
    21d6:	ab 83       	std	Y+3, r26	; 0x03
    21d8:	bc 83       	std	Y+4, r27	; 0x04
    21da:	60 e1       	ldi	r22, 0x10	; 16
    21dc:	84 e0       	ldi	r24, 0x04	; 4
    21de:	0e 94 db 04 	call	0x9b6	; 0x9b6 <sysclk_enable_module>
    21e2:	be 01       	movw	r22, r28
    21e4:	6f 5f       	subi	r22, 0xFF	; 255
    21e6:	7f 4f       	sbci	r23, 0xFF	; 255
    21e8:	80 ea       	ldi	r24, 0xA0	; 160
    21ea:	99 e0       	ldi	r25, 0x09	; 9
    21ec:	0e 94 35 08 	call	0x106a	; 0x106a <usart_init_rs232>
    21f0:	61 ef       	ldi	r22, 0xF1	; 241
    21f2:	74 e0       	ldi	r23, 0x04	; 4
    21f4:	8a e0       	ldi	r24, 0x0A	; 10
    21f6:	95 e0       	ldi	r25, 0x05	; 5
    21f8:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <fdevopen>
    21fc:	ed e0       	ldi	r30, 0x0D	; 13
    21fe:	f0 e2       	ldi	r31, 0x20	; 32
    2200:	84 81       	ldd	r24, Z+4	; 0x04
    2202:	8d 83       	std	Y+5, r24	; 0x05
    2204:	85 81       	ldd	r24, Z+5	; 0x05
    2206:	8e 83       	std	Y+6, r24	; 0x06
    2208:	86 81       	ldd	r24, Z+6	; 0x06
    220a:	8f 83       	std	Y+7, r24	; 0x07
    220c:	80 81       	ld	r24, Z
    220e:	91 81       	ldd	r25, Z+1	; 0x01
    2210:	a2 81       	ldd	r26, Z+2	; 0x02
    2212:	b3 81       	ldd	r27, Z+3	; 0x03
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	9a 83       	std	Y+2, r25	; 0x02
    2218:	ab 83       	std	Y+3, r26	; 0x03
    221a:	bc 83       	std	Y+4, r27	; 0x04
    221c:	60 e1       	ldi	r22, 0x10	; 16
    221e:	83 e0       	ldi	r24, 0x03	; 3
    2220:	0e 94 db 04 	call	0x9b6	; 0x9b6 <sysclk_enable_module>
    2224:	be 01       	movw	r22, r28
    2226:	6f 5f       	subi	r22, 0xFF	; 255
    2228:	7f 4f       	sbci	r23, 0xFF	; 255
    222a:	80 ea       	ldi	r24, 0xA0	; 160
    222c:	98 e0       	ldi	r25, 0x08	; 8
    222e:	0e 94 35 08 	call	0x106a	; 0x106a <usart_init_rs232>
    2232:	27 96       	adiw	r28, 0x07	; 7
    2234:	cd bf       	out	0x3d, r28	; 61
    2236:	de bf       	out	0x3e, r29	; 62
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	08 95       	ret

0000223e <__vector_88>:
	
ISR(USARTD0_RXC_vect){
    223e:	1f 92       	push	r1
    2240:	0f 92       	push	r0
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	0f 92       	push	r0
    2246:	11 24       	eor	r1, r1
    2248:	08 b6       	in	r0, 0x38	; 56
    224a:	0f 92       	push	r0
    224c:	18 be       	out	0x38, r1	; 56
    224e:	09 b6       	in	r0, 0x39	; 57
    2250:	0f 92       	push	r0
    2252:	19 be       	out	0x39, r1	; 57
    2254:	0b b6       	in	r0, 0x3b	; 59
    2256:	0f 92       	push	r0
    2258:	1b be       	out	0x3b, r1	; 59
    225a:	2f 93       	push	r18
    225c:	3f 93       	push	r19
    225e:	4f 93       	push	r20
    2260:	5f 93       	push	r21
    2262:	6f 93       	push	r22
    2264:	7f 93       	push	r23
    2266:	8f 93       	push	r24
    2268:	9f 93       	push	r25
    226a:	af 93       	push	r26
    226c:	bf 93       	push	r27
    226e:	ef 93       	push	r30
    2270:	ff 93       	push	r31
	//If we send reset things to the board
	xbee_rx_temporary = usart_getchar(&USARTD0);
    2272:	80 ea       	ldi	r24, 0xA0	; 160
    2274:	99 e0       	ldi	r25, 0x09	; 9
    2276:	0e 94 1c 07 	call	0xe38	; 0xe38 <usart_getchar>
    227a:	80 93 3a 23 	sts	0x233A, r24	; 0x80233a <xbee_rx_temporary>
	
	switch(xbee_rx_temporary){
    227e:	e0 91 3a 23 	lds	r30, 0x233A	; 0x80233a <xbee_rx_temporary>
    2282:	8e 2f       	mov	r24, r30
    2284:	ee 0f       	add	r30, r30
    2286:	99 0b       	sbc	r25, r25
    2288:	aa 0b       	sbc	r26, r26
    228a:	bb 0b       	sbc	r27, r27
    228c:	fc 01       	movw	r30, r24
    228e:	b1 97       	sbiw	r30, 0x21	; 33
    2290:	ef 33       	cpi	r30, 0x3F	; 63
    2292:	f1 05       	cpc	r31, r1
    2294:	18 f5       	brcc	.+70     	; 0x22dc <__vector_88+0x9e>
    2296:	88 27       	eor	r24, r24
    2298:	e2 50       	subi	r30, 0x02	; 2
    229a:	ff 4f       	sbci	r31, 0xFF	; 255
    229c:	8f 4f       	sbci	r24, 0xFF	; 255
    229e:	0c 94 85 1b 	jmp	0x370a	; 0x370a <__tablejump2__>
		case '!':						//reset MCU 
			wdt_reset_mcu();
    22a2:	0e 94 44 03 	call	0x688	; 0x688 <wdt_reset_mcu>
			break;
    22a6:	1a c0       	rjmp	.+52     	; 0x22dc <__vector_88+0x9e>
		case '@':						//change to flight state 0
			state = 0;
    22a8:	10 92 3b 23 	sts	0x233B, r1	; 0x80233b <state>
			break;
    22ac:	17 c0       	rjmp	.+46     	; 0x22dc <__vector_88+0x9e>
		case '#':						//change to flight state 1
			state = 1;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	80 93 3b 23 	sts	0x233B, r24	; 0x80233b <state>
			break;
    22b4:	13 c0       	rjmp	.+38     	; 0x22dc <__vector_88+0x9e>
		case '$':						//change to flight state 2
			state = 2;
    22b6:	82 e0       	ldi	r24, 0x02	; 2
    22b8:	80 93 3b 23 	sts	0x233B, r24	; 0x80233b <state>
			break;
    22bc:	0f c0       	rjmp	.+30     	; 0x22dc <__vector_88+0x9e>
		case '%':						//change to flight state 3
			state = 3;
    22be:	83 e0       	ldi	r24, 0x03	; 3
    22c0:	80 93 3b 23 	sts	0x233B, r24	; 0x80233b <state>
			break;
		case '^':						//deploy heatshield
			heatshield_hotwire();
			break;
		case '&':						//deploy parachute
			parachute_hotwire();
    22c4:	0b c0       	rjmp	.+22     	; 0x22dc <__vector_88+0x9e>
			break;
		case '*':						//detatching heatshield
			heatshield_detatch_hotwire();
			break;
		case '(':						//buzzer on
			buzzer_on();
    22c6:	81 db       	rcall	.-2302   	; 0x19ca <heatshield_hotwire>
			break;
    22c8:	09 c0       	rjmp	.+18     	; 0x22dc <__vector_88+0x9e>
		case ')':						//buzzer off
			buzzer_off();
    22ca:	94 db       	rcall	.-2264   	; 0x19f4 <parachute_hotwire>
    22cc:	07 c0       	rjmp	.+14     	; 0x22dc <__vector_88+0x9e>
			break;
    22ce:	a7 db       	rcall	.-2226   	; 0x1a1e <heatshield_detatch_hotwire>
		case '_':						//camera on
			camera_on();
    22d0:	05 c0       	rjmp	.+10     	; 0x22dc <__vector_88+0x9e>
    22d2:	ba db       	rcall	.-2188   	; 0x1a48 <buzzer_on>
			break;
	}
	
}
    22d4:	03 c0       	rjmp	.+6      	; 0x22dc <__vector_88+0x9e>
    22d6:	c1 db       	rcall	.-2174   	; 0x1a5a <buzzer_off>
    22d8:	01 c0       	rjmp	.+2      	; 0x22dc <__vector_88+0x9e>
    22da:	c8 db       	rcall	.-2160   	; 0x1a6c <camera_on>
    22dc:	ff 91       	pop	r31
    22de:	ef 91       	pop	r30
    22e0:	bf 91       	pop	r27
    22e2:	af 91       	pop	r26
    22e4:	9f 91       	pop	r25
    22e6:	8f 91       	pop	r24
    22e8:	7f 91       	pop	r23
    22ea:	6f 91       	pop	r22
    22ec:	5f 91       	pop	r21
    22ee:	4f 91       	pop	r20
    22f0:	3f 91       	pop	r19
    22f2:	2f 91       	pop	r18
    22f4:	0f 90       	pop	r0
    22f6:	0b be       	out	0x3b, r0	; 59
    22f8:	0f 90       	pop	r0
    22fa:	09 be       	out	0x39, r0	; 57
    22fc:	0f 90       	pop	r0
    22fe:	08 be       	out	0x38, r0	; 56
    2300:	0f 90       	pop	r0
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	0f 90       	pop	r0
    2306:	1f 90       	pop	r1
    2308:	18 95       	reti

0000230a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    230a:	04 c0       	rjmp	.+8      	; 0x2314 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    230c:	61 50       	subi	r22, 0x01	; 1
    230e:	71 09       	sbc	r23, r1
    2310:	81 09       	sbc	r24, r1
    2312:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2314:	61 15       	cp	r22, r1
    2316:	71 05       	cpc	r23, r1
    2318:	81 05       	cpc	r24, r1
    231a:	91 05       	cpc	r25, r1
    231c:	b9 f7       	brne	.-18     	; 0x230c <__portable_avr_delay_cycles+0x2>
    231e:	08 95       	ret

00002320 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2320:	00 97       	sbiw	r24, 0x00	; 0
    2322:	09 f4       	brne	.+2      	; 0x2326 <sysclk_enable_peripheral_clock+0x6>
    2324:	5c c1       	rjmp	.+696    	; 0x25de <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    2326:	80 3c       	cpi	r24, 0xC0	; 192
    2328:	91 05       	cpc	r25, r1
    232a:	29 f4       	brne	.+10     	; 0x2336 <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    232c:	60 e1       	ldi	r22, 0x10	; 16
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    2334:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    2336:	80 34       	cpi	r24, 0x40	; 64
    2338:	24 e0       	ldi	r18, 0x04	; 4
    233a:	92 07       	cpc	r25, r18
    233c:	29 f4       	brne	.+10     	; 0x2348 <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    233e:	68 e0       	ldi	r22, 0x08	; 8
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    2346:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    2348:	81 15       	cp	r24, r1
    234a:	24 e0       	ldi	r18, 0x04	; 4
    234c:	92 07       	cpc	r25, r18
    234e:	29 f4       	brne	.+10     	; 0x235a <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2350:	64 e0       	ldi	r22, 0x04	; 4
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    2358:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    235a:	80 38       	cpi	r24, 0x80	; 128
    235c:	21 e0       	ldi	r18, 0x01	; 1
    235e:	92 07       	cpc	r25, r18
    2360:	29 f4       	brne	.+10     	; 0x236c <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2362:	62 e0       	ldi	r22, 0x02	; 2
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    236a:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    236c:	81 15       	cp	r24, r1
    236e:	21 e0       	ldi	r18, 0x01	; 1
    2370:	92 07       	cpc	r25, r18
    2372:	29 f4       	brne	.+10     	; 0x237e <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2374:	61 e0       	ldi	r22, 0x01	; 1
    2376:	80 e0       	ldi	r24, 0x00	; 0
    2378:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    237c:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    237e:	80 38       	cpi	r24, 0x80	; 128
    2380:	23 e0       	ldi	r18, 0x03	; 3
    2382:	92 07       	cpc	r25, r18
    2384:	29 f4       	brne	.+10     	; 0x2390 <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2386:	61 e0       	ldi	r22, 0x01	; 1
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    238e:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    2390:	80 39       	cpi	r24, 0x90	; 144
    2392:	23 e0       	ldi	r18, 0x03	; 3
    2394:	92 07       	cpc	r25, r18
    2396:	29 f4       	brne	.+10     	; 0x23a2 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2398:	61 e0       	ldi	r22, 0x01	; 1
    239a:	82 e0       	ldi	r24, 0x02	; 2
    239c:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    23a0:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    23a2:	81 15       	cp	r24, r1
    23a4:	22 e0       	ldi	r18, 0x02	; 2
    23a6:	92 07       	cpc	r25, r18
    23a8:	29 f4       	brne	.+10     	; 0x23b4 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    23aa:	62 e0       	ldi	r22, 0x02	; 2
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    23b2:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    23b4:	80 34       	cpi	r24, 0x40	; 64
    23b6:	22 e0       	ldi	r18, 0x02	; 2
    23b8:	92 07       	cpc	r25, r18
    23ba:	29 f4       	brne	.+10     	; 0x23c6 <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    23bc:	62 e0       	ldi	r22, 0x02	; 2
    23be:	82 e0       	ldi	r24, 0x02	; 2
    23c0:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    23c4:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    23c6:	81 15       	cp	r24, r1
    23c8:	23 e0       	ldi	r18, 0x03	; 3
    23ca:	92 07       	cpc	r25, r18
    23cc:	29 f4       	brne	.+10     	; 0x23d8 <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    23ce:	64 e0       	ldi	r22, 0x04	; 4
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    23d6:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    23d8:	80 32       	cpi	r24, 0x20	; 32
    23da:	23 e0       	ldi	r18, 0x03	; 3
    23dc:	92 07       	cpc	r25, r18
    23de:	29 f4       	brne	.+10     	; 0x23ea <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    23e0:	64 e0       	ldi	r22, 0x04	; 4
    23e2:	82 e0       	ldi	r24, 0x02	; 2
    23e4:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    23e8:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    23ea:	81 15       	cp	r24, r1
    23ec:	28 e0       	ldi	r18, 0x08	; 8
    23ee:	92 07       	cpc	r25, r18
    23f0:	29 f4       	brne	.+10     	; 0x23fc <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    23f2:	61 e0       	ldi	r22, 0x01	; 1
    23f4:	83 e0       	ldi	r24, 0x03	; 3
    23f6:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    23fa:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    23fc:	81 15       	cp	r24, r1
    23fe:	29 e0       	ldi	r18, 0x09	; 9
    2400:	92 07       	cpc	r25, r18
    2402:	29 f4       	brne	.+10     	; 0x240e <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2404:	61 e0       	ldi	r22, 0x01	; 1
    2406:	84 e0       	ldi	r24, 0x04	; 4
    2408:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    240c:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    240e:	81 15       	cp	r24, r1
    2410:	2a e0       	ldi	r18, 0x0A	; 10
    2412:	92 07       	cpc	r25, r18
    2414:	29 f4       	brne	.+10     	; 0x2420 <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2416:	61 e0       	ldi	r22, 0x01	; 1
    2418:	85 e0       	ldi	r24, 0x05	; 5
    241a:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    241e:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    2420:	81 15       	cp	r24, r1
    2422:	2b e0       	ldi	r18, 0x0B	; 11
    2424:	92 07       	cpc	r25, r18
    2426:	29 f4       	brne	.+10     	; 0x2432 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    2428:	61 e0       	ldi	r22, 0x01	; 1
    242a:	86 e0       	ldi	r24, 0x06	; 6
    242c:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    2430:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    2432:	80 34       	cpi	r24, 0x40	; 64
    2434:	28 e0       	ldi	r18, 0x08	; 8
    2436:	92 07       	cpc	r25, r18
    2438:	29 f4       	brne	.+10     	; 0x2444 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    243a:	62 e0       	ldi	r22, 0x02	; 2
    243c:	83 e0       	ldi	r24, 0x03	; 3
    243e:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    2442:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2444:	80 34       	cpi	r24, 0x40	; 64
    2446:	29 e0       	ldi	r18, 0x09	; 9
    2448:	92 07       	cpc	r25, r18
    244a:	29 f4       	brne	.+10     	; 0x2456 <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    244c:	62 e0       	ldi	r22, 0x02	; 2
    244e:	84 e0       	ldi	r24, 0x04	; 4
    2450:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    2454:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2456:	80 34       	cpi	r24, 0x40	; 64
    2458:	2a e0       	ldi	r18, 0x0A	; 10
    245a:	92 07       	cpc	r25, r18
    245c:	29 f4       	brne	.+10     	; 0x2468 <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    245e:	62 e0       	ldi	r22, 0x02	; 2
    2460:	85 e0       	ldi	r24, 0x05	; 5
    2462:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    2466:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    2468:	80 34       	cpi	r24, 0x40	; 64
    246a:	2b e0       	ldi	r18, 0x0B	; 11
    246c:	92 07       	cpc	r25, r18
    246e:	29 f4       	brne	.+10     	; 0x247a <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    2470:	62 e0       	ldi	r22, 0x02	; 2
    2472:	86 e0       	ldi	r24, 0x06	; 6
    2474:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    2478:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    247a:	80 39       	cpi	r24, 0x90	; 144
    247c:	28 e0       	ldi	r18, 0x08	; 8
    247e:	92 07       	cpc	r25, r18
    2480:	29 f4       	brne	.+10     	; 0x248c <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2482:	64 e0       	ldi	r22, 0x04	; 4
    2484:	83 e0       	ldi	r24, 0x03	; 3
    2486:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    248a:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    248c:	80 39       	cpi	r24, 0x90	; 144
    248e:	29 e0       	ldi	r18, 0x09	; 9
    2490:	92 07       	cpc	r25, r18
    2492:	29 f4       	brne	.+10     	; 0x249e <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2494:	64 e0       	ldi	r22, 0x04	; 4
    2496:	84 e0       	ldi	r24, 0x04	; 4
    2498:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    249c:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    249e:	80 39       	cpi	r24, 0x90	; 144
    24a0:	2a e0       	ldi	r18, 0x0A	; 10
    24a2:	92 07       	cpc	r25, r18
    24a4:	29 f4       	brne	.+10     	; 0x24b0 <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    24a6:	64 e0       	ldi	r22, 0x04	; 4
    24a8:	85 e0       	ldi	r24, 0x05	; 5
    24aa:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    24ae:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    24b0:	80 39       	cpi	r24, 0x90	; 144
    24b2:	2b e0       	ldi	r18, 0x0B	; 11
    24b4:	92 07       	cpc	r25, r18
    24b6:	29 f4       	brne	.+10     	; 0x24c2 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    24b8:	64 e0       	ldi	r22, 0x04	; 4
    24ba:	86 e0       	ldi	r24, 0x06	; 6
    24bc:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    24c0:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    24c2:	80 3c       	cpi	r24, 0xC0	; 192
    24c4:	28 e0       	ldi	r18, 0x08	; 8
    24c6:	92 07       	cpc	r25, r18
    24c8:	29 f4       	brne	.+10     	; 0x24d4 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    24ca:	68 e0       	ldi	r22, 0x08	; 8
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    24d2:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    24d4:	80 3c       	cpi	r24, 0xC0	; 192
    24d6:	29 e0       	ldi	r18, 0x09	; 9
    24d8:	92 07       	cpc	r25, r18
    24da:	29 f4       	brne	.+10     	; 0x24e6 <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    24dc:	68 e0       	ldi	r22, 0x08	; 8
    24de:	84 e0       	ldi	r24, 0x04	; 4
    24e0:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    24e4:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    24e6:	80 3c       	cpi	r24, 0xC0	; 192
    24e8:	2a e0       	ldi	r18, 0x0A	; 10
    24ea:	92 07       	cpc	r25, r18
    24ec:	29 f4       	brne	.+10     	; 0x24f8 <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    24ee:	68 e0       	ldi	r22, 0x08	; 8
    24f0:	85 e0       	ldi	r24, 0x05	; 5
    24f2:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    24f6:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    24f8:	80 3c       	cpi	r24, 0xC0	; 192
    24fa:	2b e0       	ldi	r18, 0x0B	; 11
    24fc:	92 07       	cpc	r25, r18
    24fe:	29 f4       	brne	.+10     	; 0x250a <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    2500:	68 e0       	ldi	r22, 0x08	; 8
    2502:	86 e0       	ldi	r24, 0x06	; 6
    2504:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    2508:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    250a:	80 3a       	cpi	r24, 0xA0	; 160
    250c:	28 e0       	ldi	r18, 0x08	; 8
    250e:	92 07       	cpc	r25, r18
    2510:	29 f4       	brne	.+10     	; 0x251c <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2512:	60 e1       	ldi	r22, 0x10	; 16
    2514:	83 e0       	ldi	r24, 0x03	; 3
    2516:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    251a:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    251c:	80 3a       	cpi	r24, 0xA0	; 160
    251e:	29 e0       	ldi	r18, 0x09	; 9
    2520:	92 07       	cpc	r25, r18
    2522:	29 f4       	brne	.+10     	; 0x252e <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2524:	60 e1       	ldi	r22, 0x10	; 16
    2526:	84 e0       	ldi	r24, 0x04	; 4
    2528:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    252c:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    252e:	80 3a       	cpi	r24, 0xA0	; 160
    2530:	2a e0       	ldi	r18, 0x0A	; 10
    2532:	92 07       	cpc	r25, r18
    2534:	29 f4       	brne	.+10     	; 0x2540 <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2536:	60 e1       	ldi	r22, 0x10	; 16
    2538:	85 e0       	ldi	r24, 0x05	; 5
    253a:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    253e:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    2540:	80 3a       	cpi	r24, 0xA0	; 160
    2542:	2b e0       	ldi	r18, 0x0B	; 11
    2544:	92 07       	cpc	r25, r18
    2546:	29 f4       	brne	.+10     	; 0x2552 <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    2548:	60 e1       	ldi	r22, 0x10	; 16
    254a:	86 e0       	ldi	r24, 0x06	; 6
    254c:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    2550:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    2552:	80 3b       	cpi	r24, 0xB0	; 176
    2554:	28 e0       	ldi	r18, 0x08	; 8
    2556:	92 07       	cpc	r25, r18
    2558:	29 f4       	brne	.+10     	; 0x2564 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    255a:	60 e2       	ldi	r22, 0x20	; 32
    255c:	83 e0       	ldi	r24, 0x03	; 3
    255e:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    2562:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    2564:	80 3b       	cpi	r24, 0xB0	; 176
    2566:	29 e0       	ldi	r18, 0x09	; 9
    2568:	92 07       	cpc	r25, r18
    256a:	29 f4       	brne	.+10     	; 0x2576 <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    256c:	60 e2       	ldi	r22, 0x20	; 32
    256e:	84 e0       	ldi	r24, 0x04	; 4
    2570:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    2574:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    2576:	80 3b       	cpi	r24, 0xB0	; 176
    2578:	2a e0       	ldi	r18, 0x0A	; 10
    257a:	92 07       	cpc	r25, r18
    257c:	29 f4       	brne	.+10     	; 0x2588 <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    257e:	60 e2       	ldi	r22, 0x20	; 32
    2580:	85 e0       	ldi	r24, 0x05	; 5
    2582:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    2586:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    2588:	80 3b       	cpi	r24, 0xB0	; 176
    258a:	2b e0       	ldi	r18, 0x0B	; 11
    258c:	92 07       	cpc	r25, r18
    258e:	29 f4       	brne	.+10     	; 0x259a <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    2590:	60 e2       	ldi	r22, 0x20	; 32
    2592:	86 e0       	ldi	r24, 0x06	; 6
    2594:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    2598:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    259a:	80 38       	cpi	r24, 0x80	; 128
    259c:	24 e0       	ldi	r18, 0x04	; 4
    259e:	92 07       	cpc	r25, r18
    25a0:	29 f4       	brne	.+10     	; 0x25ac <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    25a2:	60 e4       	ldi	r22, 0x40	; 64
    25a4:	83 e0       	ldi	r24, 0x03	; 3
    25a6:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    25aa:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    25ac:	80 39       	cpi	r24, 0x90	; 144
    25ae:	24 e0       	ldi	r18, 0x04	; 4
    25b0:	92 07       	cpc	r25, r18
    25b2:	29 f4       	brne	.+10     	; 0x25be <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    25b4:	60 e4       	ldi	r22, 0x40	; 64
    25b6:	84 e0       	ldi	r24, 0x04	; 4
    25b8:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    25bc:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    25be:	80 3a       	cpi	r24, 0xA0	; 160
    25c0:	24 e0       	ldi	r18, 0x04	; 4
    25c2:	92 07       	cpc	r25, r18
    25c4:	29 f4       	brne	.+10     	; 0x25d0 <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    25c6:	60 e4       	ldi	r22, 0x40	; 64
    25c8:	85 e0       	ldi	r24, 0x05	; 5
    25ca:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    25ce:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    25d0:	80 3b       	cpi	r24, 0xB0	; 176
    25d2:	94 40       	sbci	r25, 0x04	; 4
    25d4:	21 f4       	brne	.+8      	; 0x25de <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    25d6:	60 e4       	ldi	r22, 0x40	; 64
    25d8:	86 e0       	ldi	r24, 0x06	; 6
    25da:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <sysclk_enable_module>
    25de:	08 95       	ret

000025e0 <main>:

extern uint8_t state;
//void blink (int, int);

int main (void)
{
    25e0:	cf 93       	push	r28
    25e2:	df 93       	push	r29
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	c0 5a       	subi	r28, 0xA0	; 160
    25ea:	d1 09       	sbc	r29, r1
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	de bf       	out	0x3e, r29	; 62
	
	sysclk_init();
    25f0:	0e 94 a6 04 	call	0x94c	; 0x94c <sysclk_init>
	//sysclk_enable_peripheral_clock(&TCF0);
	sysclk_enable_peripheral_clock(&TCD0);
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	99 e0       	ldi	r25, 0x09	; 9
    25f8:	93 de       	rcall	.-730    	; 0x2320 <sysclk_enable_peripheral_clock>


	sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
    25fa:	68 e0       	ldi	r22, 0x08	; 8
    25fc:	83 e0       	ldi	r24, 0x03	; 3
    25fe:	0e 94 db 04 	call	0x9b6	; 0x9b6 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C,SYSCLK_HIRES);
    2602:	64 e0       	ldi	r22, 0x04	; 4
    2604:	83 e0       	ldi	r24, 0x03	; 3
    2606:	0e 94 db 04 	call	0x9b6	; 0x9b6 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    260a:	64 e0       	ldi	r22, 0x04	; 4
    260c:	84 e0       	ldi	r24, 0x04	; 4
    260e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_E,SYSCLK_HIRES);	
    2612:	64 e0       	ldi	r22, 0x04	; 4
    2614:	85 e0       	ldi	r24, 0x05	; 5
    2616:	0e 94 db 04 	call	0x9b6	; 0x9b6 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    261a:	64 e0       	ldi	r22, 0x04	; 4
    261c:	86 e0       	ldi	r24, 0x06	; 6
    261e:	0e 94 db 04 	call	0x9b6	; 0x9b6 <sysclk_enable_module>
// 	PORTD.OUTSET = 0b00001000;
// 	timer_founter_init(3124, 0);
// 	delay_ms(15000);
// 	PORTD.OUTCLR = 0b00001000;
//	timer_founter_init(3124, 10);
	sysclk_enable_peripheral_clock(&TCE0);
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	9a e0       	ldi	r25, 0x0A	; 10
	sysclk_enable_peripheral_clock(&TCC0);
    2626:	7c de       	rcall	.-776    	; 0x2320 <sysclk_enable_peripheral_clock>
	timer_counter_init();
    2628:	80 e0       	ldi	r24, 0x00	; 0
	//heatshield_servo();
		
	sysclk_enable_peripheral_clock(&USARTC0);
    262a:	98 e0       	ldi	r25, 0x08	; 8
    262c:	79 de       	rcall	.-782    	; 0x2320 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTD1);
    262e:	2b dd       	rcall	.-1450   	; 0x2086 <timer_counter_init>
	usart_init();
    2630:	80 ea       	ldi	r24, 0xA0	; 160
	
	sysclk_enable_peripheral_clock(&SPIC);
    2632:	98 e0       	ldi	r25, 0x08	; 8
	spi_init();
    2634:	75 de       	rcall	.-790    	; 0x2320 <sysclk_enable_peripheral_clock>
    2636:	80 eb       	ldi	r24, 0xB0	; 176
	ms5607init();
    2638:	99 e0       	ldi	r25, 0x09	; 9
    263a:	72 de       	rcall	.-796    	; 0x2320 <sysclk_enable_peripheral_clock>
	
	sysclk_enable_peripheral_clock(&ADCA);
    263c:	9c dd       	rcall	.-1224   	; 0x2176 <usart_init>
    263e:	80 ec       	ldi	r24, 0xC0	; 192
    2640:	98 e0       	ldi	r25, 0x08	; 8
    2642:	6e de       	rcall	.-804    	; 0x2320 <sysclk_enable_peripheral_clock>
	adc_init();
    2644:	5b da       	rcall	.-2890   	; 0x1afc <spi_init>
    2646:	90 da       	rcall	.-2784   	; 0x1b68 <ms5607init>
	float tiltZ;	
	
	//printf("Is this thing on?\n");
	
	//printf((const char*)gps_data.latdegrees);
	PressData pdi = get_pressure();
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	92 e0       	ldi	r25, 0x02	; 2
    264c:	69 de       	rcall	.-814    	; 0x2320 <sysclk_enable_peripheral_clock>
    264e:	ec dc       	rcall	.-1576   	; 0x2028 <adc_init>
    2650:	0a db       	rcall	.-2540   	; 0x1c66 <get_pressure>
    2652:	67 96       	adiw	r28, 0x17	; 23
    2654:	2f af       	std	Y+63, r18	; 0x3f
    2656:	67 97       	sbiw	r28, 0x17	; 23
    2658:	68 96       	adiw	r28, 0x18	; 24
    265a:	3f af       	std	Y+63, r19	; 0x3f
    265c:	68 97       	sbiw	r28, 0x18	; 24
    265e:	69 96       	adiw	r28, 0x19	; 25
    2660:	4f af       	std	Y+63, r20	; 0x3f
    2662:	69 97       	sbiw	r28, 0x19	; 25
    2664:	6a 96       	adiw	r28, 0x1a	; 26
    2666:	5f af       	std	Y+63, r21	; 0x3f
    2668:	6a 97       	sbiw	r28, 0x1a	; 26
    266a:	6b 96       	adiw	r28, 0x1b	; 27
    266c:	6f af       	std	Y+63, r22	; 0x3f
    266e:	6b 97       	sbiw	r28, 0x1b	; 27
    2670:	6c 96       	adiw	r28, 0x1c	; 28
    2672:	7f af       	std	Y+63, r23	; 0x3f
    2674:	6c 97       	sbiw	r28, 0x1c	; 28
    2676:	6d 96       	adiw	r28, 0x1d	; 29
    2678:	8f af       	std	Y+63, r24	; 0x3f
    267a:	6d 97       	sbiw	r28, 0x1d	; 29
	int32_t initial = pdi.P;
    267c:	6e 96       	adiw	r28, 0x1e	; 30
    267e:	9f af       	std	Y+63, r25	; 0x3f
    2680:	6e 97       	sbiw	r28, 0x1e	; 30
    2682:	6e 96       	adiw	r28, 0x1e	; 30
    2684:	8c ad       	ldd	r24, Y+60	; 0x3c
    2686:	9d ad       	ldd	r25, Y+61	; 0x3d
    2688:	ae ad       	ldd	r26, Y+62	; 0x3e
    268a:	bf ad       	ldd	r27, Y+63	; 0x3f
    268c:	6e 97       	sbiw	r28, 0x1e	; 30
    268e:	c7 56       	subi	r28, 0x67	; 103
    2690:	df 4f       	sbci	r29, 0xFF	; 255
    2692:	88 83       	st	Y, r24
    2694:	99 83       	std	Y+1, r25	; 0x01
    2696:	aa 83       	std	Y+2, r26	; 0x02

	//initial_altitude = Get_altitude(101300, initial);
	//timer_founter_init(62499, 5);

	//timer_dounter_init(12500, 10);
	init_GPS_pins_and_usart();
    2698:	bb 83       	std	Y+3, r27	; 0x03
    269a:	c9 59       	subi	r28, 0x99	; 153
	init_gps_interrupts();
    269c:	d0 40       	sbci	r29, 0x00	; 0
    269e:	0e 94 bd 09 	call	0x137a	; 0x137a <init_GPS_pins_and_usart>
	init_gps_buffers();
	
	//timer_counter_init(6249,10);
	//TCD0.INTCTRLA = 0b00000001;
	
	PORTD_DIRSET = 0b00100000;
    26a2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <init_gps_interrupts>
    26a6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <init_gps_buffers>
	PORTD_OUTCLR = 0b00100000;
    26aa:	68 94       	set
    26ac:	ff 24       	eor	r15, r15
    26ae:	f5 f8       	bld	r15, 5
	delay_ms(100);
    26b0:	f0 92 61 06 	sts	0x0661, r15	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
    26b4:	06 e6       	ldi	r16, 0x66	; 102
    26b6:	16 e0       	ldi	r17, 0x06	; 6
    26b8:	d8 01       	movw	r26, r16
	PORTD_OUTSET = 0b00100000;
    26ba:	fc 92       	st	X, r15
    26bc:	66 e5       	ldi	r22, 0x56	; 86
	delay_ms(1);
    26be:	73 e2       	ldi	r23, 0x23	; 35
    26c0:	88 e0       	ldi	r24, 0x08	; 8
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	22 de       	rcall	.-956    	; 0x230a <__portable_avr_delay_cycles>
    26c6:	f0 92 65 06 	sts	0x0665, r15	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	PORTD_OUTCLR = 0b00100000;
    26ca:	66 ed       	ldi	r22, 0xD6	; 214
    26cc:	74 e1       	ldi	r23, 0x14	; 20
	//delay_ms(5000);
	//printf("Hello World! \n");

	buzzer_on();
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	90 e0       	ldi	r25, 0x00	; 0
	TCC0.INTCTRLA = 0b00000001;
    26d2:	1b de       	rcall	.-970    	; 0x230a <__portable_avr_delay_cycles>
    26d4:	f8 01       	movw	r30, r16
    26d6:	f0 82       	st	Z, r15
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    26d8:	b7 d9       	rcall	.-3218   	; 0x1a48 <buzzer_on>
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    26e0:	e0 ea       	ldi	r30, 0xA0	; 160
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	87 e0       	ldi	r24, 0x07	; 7
		PMIC.INTPRI = 0;
    26e6:	82 83       	std	Z+2, r24	; 0x02
	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);
	cpu_irq_enable();
    26e8:	82 81       	ldd	r24, Z+2	; 0x02
	//uint16_t period;
	//uint16_t duty_cycle;
	double smoothing_factor = 0.50;
	

	uint8_t state = 0;
    26ea:	8f 77       	andi	r24, 0x7F	; 127
	uint32_t temperature;
	//uint32_t initial_pressure = get_pressure();
	int32_t altitude;
	int32_t initial_altitude = 0;
	int32_t smooth_altitude = 0;
	int32_t max_altitude = 0;
    26ec:	82 83       	std	Z+2, r24	; 0x02
    26ee:	11 82       	std	Z+1, r1	; 0x01
    26f0:	78 94       	sei
    26f2:	91 2c       	mov	r9, r1
    26f4:	c3 56       	subi	r28, 0x63	; 99
    26f6:	df 4f       	sbci	r29, 0xFF	; 255
    26f8:	18 82       	st	Y, r1
    26fa:	19 82       	std	Y+1, r1	; 0x01
	uint32_t pressure;
	uint32_t temperature;
	//uint32_t initial_pressure = get_pressure();
	int32_t altitude;
	int32_t initial_altitude = 0;
	int32_t smooth_altitude = 0;
    26fc:	1a 82       	std	Y+2, r1	; 0x02
    26fe:	1b 82       	std	Y+3, r1	; 0x03
    2700:	cd 59       	subi	r28, 0x9D	; 157
    2702:	d0 40       	sbci	r29, 0x00	; 0
    2704:	ca 57       	subi	r28, 0x7A	; 122
    2706:	df 4f       	sbci	r29, 0xFF	; 255
    2708:	18 82       	st	Y, r1
	}
	uint32_t time_ms;
	
	
	uint16_t teamID = 5186;
	uint32_t my_time = 0;
    270a:	19 82       	std	Y+1, r1	; 0x01
    270c:	1a 82       	std	Y+2, r1	; 0x02
    270e:	1b 82       	std	Y+3, r1	; 0x03
			{
				//printf("GGA!!!\n");
				
				ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
				{
					memcpy(gpstmp, gpgga_buff, 85);
    2710:	c6 58       	subi	r28, 0x86	; 134
    2712:	d0 40       	sbci	r29, 0x00	; 0
    2714:	41 2c       	mov	r4, r1
    2716:	51 2c       	mov	r5, r1
    2718:	32 01       	movw	r6, r4
    271a:	ce 01       	movw	r24, r28
    271c:	01 96       	adiw	r24, 0x01	; 1
    271e:	cc 57       	subi	r28, 0x7C	; 124
		if(state==1){
			//printf("Flight State 1 \n");
			if(altitude-initial_altitude<300){
				PORTE.DIRSET = 0b00000010;	//Activate Camera
				PORTE.OUTSET = 0b00000010;	//Activate Camera
				PORTA.DIRSET = 0b10000000;	//Detach Heat Shield
    2720:	df 4f       	sbci	r29, 0xFF	; 255
    2722:	88 83       	st	Y, r24
//  	PORTA_OUT = 0b00011110;
//  	elay_ms(250);
//  	PORTA_OUT = 0b00000000;
//  	delay_ms(250);
		
		PressData pd = get_pressure();
    2724:	99 83       	std	Y+1, r25	; 0x01
    2726:	c4 58       	subi	r28, 0x84	; 132
    2728:	d0 40       	sbci	r29, 0x00	; 0
    272a:	b9 2c       	mov	r11, r9
    272c:	a8 2c       	mov	r10, r8
    272e:	9b da       	rcall	.-2762   	; 0x1c66 <get_pressure>
    2730:	96 2e       	mov	r9, r22
    2732:	17 2f       	mov	r17, r23
    2734:	08 2f       	mov	r16, r24
    2736:	89 2e       	mov	r8, r25
    2738:	ed 96       	adiw	r28, 0x3d	; 61
    273a:	2f af       	std	Y+63, r18	; 0x3f
    273c:	ed 97       	sbiw	r28, 0x3d	; 61
    273e:	ee 96       	adiw	r28, 0x3e	; 62
    2740:	3f af       	std	Y+63, r19	; 0x3f
    2742:	ee 97       	sbiw	r28, 0x3e	; 62
    2744:	ef 96       	adiw	r28, 0x3f	; 63
    2746:	4f af       	std	Y+63, r20	; 0x3f
    2748:	ef 97       	sbiw	r28, 0x3f	; 63
    274a:	c1 58       	subi	r28, 0x81	; 129
    274c:	df 4f       	sbci	r29, 0xFF	; 255
    274e:	58 83       	st	Y, r21
    2750:	cf 57       	subi	r28, 0x7F	; 127
    2752:	d0 40       	sbci	r29, 0x00	; 0
    2754:	c0 58       	subi	r28, 0x80	; 128
    2756:	df 4f       	sbci	r29, 0xFF	; 255
    2758:	68 83       	st	Y, r22
    275a:	c0 58       	subi	r28, 0x80	; 128
    275c:	d0 40       	sbci	r29, 0x00	; 0
    275e:	cf 57       	subi	r28, 0x7F	; 127
    2760:	df 4f       	sbci	r29, 0xFF	; 255
    2762:	78 83       	st	Y, r23
    2764:	c1 58       	subi	r28, 0x81	; 129
    2766:	d0 40       	sbci	r29, 0x00	; 0
    2768:	ce 57       	subi	r28, 0x7E	; 126
    276a:	df 4f       	sbci	r29, 0xFF	; 255
    276c:	88 83       	st	Y, r24
    276e:	c2 58       	subi	r28, 0x82	; 130
    2770:	d0 40       	sbci	r29, 0x00	; 0
    2772:	cd 57       	subi	r28, 0x7D	; 125
		pressure = pd.P;
		TEMP = pd.TEMP;
    2774:	df 4f       	sbci	r29, 0xFF	; 255
    2776:	98 83       	st	Y, r25
    2778:	c3 58       	subi	r28, 0x83	; 131
    277a:	d0 40       	sbci	r29, 0x00	; 0
    277c:	c4 58       	subi	r28, 0x84	; 132
    277e:	df 4f       	sbci	r29, 0xFF	; 255
    2780:	88 81       	ld	r24, Y
    2782:	99 81       	ldd	r25, Y+1	; 0x01
    2784:	aa 81       	ldd	r26, Y+2	; 0x02
    2786:	bb 81       	ldd	r27, Y+3	; 0x03
    2788:	cc 57       	subi	r28, 0x7C	; 124
    278a:	d0 40       	sbci	r29, 0x00	; 0
    278c:	80 93 2a 23 	sts	0x232A, r24	; 0x80232a <TEMP>
// 		pressure = get_pressure();
// 		temperature = getTemperature();
		//printf("Pressure = %lu\n", pressure);
		//temperature = (temperature/100)+273;
		//printf("initial pressure: %lu \n", initial_pressure);
		altitude = Get_altitude(initial, pressure);
    2790:	90 93 2b 23 	sts	0x232B, r25	; 0x80232b <TEMP+0x1>
    2794:	a0 93 2c 23 	sts	0x232C, r26	; 0x80232c <TEMP+0x2>
    2798:	b0 93 2d 23 	sts	0x232D, r27	; 0x80232d <TEMP+0x3>
    279c:	29 2d       	mov	r18, r9
    279e:	31 2f       	mov	r19, r17
    27a0:	40 2f       	mov	r20, r16
    27a2:	58 2d       	mov	r21, r8
    27a4:	c7 56       	subi	r28, 0x67	; 103
    27a6:	df 4f       	sbci	r29, 0xFF	; 255
    27a8:	68 81       	ld	r22, Y
    27aa:	79 81       	ldd	r23, Y+1	; 0x01
    27ac:	8a 81       	ldd	r24, Y+2	; 0x02
    27ae:	9b 81       	ldd	r25, Y+3	; 0x03
		smooth_altitude = (int32_t)(smoothing_factor * altitude + (1-smoothing_factor)*smooth_altitude);
    27b0:	c9 59       	subi	r28, 0x99	; 153
    27b2:	d0 40       	sbci	r29, 0x00	; 0
    27b4:	0e 94 96 09 	call	0x132c	; 0x132c <Get_altitude>
    27b8:	b1 d2       	rcall	.+1378   	; 0x2d1c <__fixsfsi>
    27ba:	6b 01       	movw	r12, r22
    27bc:	7c 01       	movw	r14, r24
    27be:	e1 d2       	rcall	.+1474   	; 0x2d82 <__floatsisf>
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e0       	ldi	r20, 0x00	; 0
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	68 d3       	rcall	.+1744   	; 0x2e9a <__mulsf3>
    27ca:	c6 57       	subi	r28, 0x76	; 118
    27cc:	df 4f       	sbci	r29, 0xFF	; 255
    27ce:	68 83       	st	Y, r22
    27d0:	79 83       	std	Y+1, r23	; 0x01
    27d2:	8a 83       	std	Y+2, r24	; 0x02
    27d4:	9b 83       	std	Y+3, r25	; 0x03
    27d6:	ca 58       	subi	r28, 0x8A	; 138
    27d8:	d0 40       	sbci	r29, 0x00	; 0
    27da:	ca 57       	subi	r28, 0x7A	; 122
    27dc:	df 4f       	sbci	r29, 0xFF	; 255
    27de:	68 81       	ld	r22, Y
    27e0:	79 81       	ldd	r23, Y+1	; 0x01
    27e2:	8a 81       	ldd	r24, Y+2	; 0x02
    27e4:	9b 81       	ldd	r25, Y+3	; 0x03
    27e6:	c6 58       	subi	r28, 0x86	; 134
    27e8:	d0 40       	sbci	r29, 0x00	; 0
    27ea:	cb d2       	rcall	.+1430   	; 0x2d82 <__floatsisf>
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e0       	ldi	r20, 0x00	; 0
    27f2:	5f e3       	ldi	r21, 0x3F	; 63
    27f4:	52 d3       	rcall	.+1700   	; 0x2e9a <__mulsf3>
    27f6:	9b 01       	movw	r18, r22
    27f8:	ac 01       	movw	r20, r24
    27fa:	c6 57       	subi	r28, 0x76	; 118
    27fc:	df 4f       	sbci	r29, 0xFF	; 255
    27fe:	68 81       	ld	r22, Y
    2800:	79 81       	ldd	r23, Y+1	; 0x01
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	9b 81       	ldd	r25, Y+3	; 0x03
    2806:	ca 58       	subi	r28, 0x8A	; 138
    2808:	d0 40       	sbci	r29, 0x00	; 0
    280a:	bc d1       	rcall	.+888    	; 0x2b84 <__addsf3>
    280c:	87 d2       	rcall	.+1294   	; 0x2d1c <__fixsfsi>
    280e:	ca 57       	subi	r28, 0x7A	; 122
    2810:	df 4f       	sbci	r29, 0xFF	; 255
    2812:	68 83       	st	Y, r22
		my_time = my_time + 1;
    2814:	79 83       	std	Y+1, r23	; 0x01
    2816:	8a 83       	std	Y+2, r24	; 0x02
    2818:	9b 83       	std	Y+3, r25	; 0x03
    281a:	c6 58       	subi	r28, 0x86	; 134
    281c:	d0 40       	sbci	r29, 0x00	; 0
	
		if (last_finished != SENTENCE_NONE)
		{
			//printf("Is it you?");
			if (last_finished == SENTENCE_GPGGA)
    281e:	9f ef       	ldi	r25, 0xFF	; 255
    2820:	49 1a       	sub	r4, r25
    2822:	59 0a       	sbc	r5, r25
    2824:	69 0a       	sbc	r6, r25
    2826:	79 0a       	sbc	r7, r25
			{
				//printf("GGA!!!\n");
				
				ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    2828:	80 91 29 21 	lds	r24, 0x2129	; 0x802129 <last_finished>
				{
					memcpy(gpstmp, gpgga_buff, 85);
    282c:	81 30       	cpi	r24, 0x01	; 1
    282e:	09 f0       	breq	.+2      	; 0x2832 <main+0x252>
    2830:	99 c0       	rjmp	.+306    	; 0x2964 <main+0x384>
    2832:	9f b7       	in	r25, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	85 e5       	ldi	r24, 0x55	; 85
    2838:	e9 ec       	ldi	r30, 0xC9	; 201
    283a:	f2 e2       	ldi	r31, 0x22	; 34
    283c:	de 01       	movw	r26, r28
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    283e:	11 96       	adiw	r26, 0x01	; 1
	uint16_t packetlen(const uint8_t* buff)
	{
		uint16_t i = 0;
		for (i = 0; i < 1024; i++)
		{
			if (buff[i] == '\n')
    2840:	01 90       	ld	r0, Z+
    2842:	0d 92       	st	X+, r0
    2844:	8a 95       	dec	r24
    2846:	e1 f7       	brne	.-8      	; 0x2840 <main+0x260>
    2848:	9f bf       	out	0x3f, r25	; 63
	int32_t gps_local_delta; //local time + this = gps time (ish)
	//uint16_t packetlen(const uint8_t* buff);
	uint16_t packetlen(const uint8_t* buff)
	{
		uint16_t i = 0;
		for (i = 0; i < 1024; i++)
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	8a 30       	cpi	r24, 0x0A	; 10
		{
			if (buff[i] == '\n')
    284e:	79 f0       	breq	.+30     	; 0x286e <main+0x28e>
    2850:	fe 01       	movw	r30, r28
    2852:	32 96       	adiw	r30, 0x02	; 2
	int32_t gps_local_delta; //local time + this = gps time (ish)
	//uint16_t packetlen(const uint8_t* buff);
	uint16_t packetlen(const uint8_t* buff)
	{
		uint16_t i = 0;
		for (i = 0; i < 1024; i++)
    2854:	81 e0       	ldi	r24, 0x01	; 1
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	21 91       	ld	r18, Z+
    285a:	2a 30       	cpi	r18, 0x0A	; 10
    285c:	51 f0       	breq	.+20     	; 0x2872 <main+0x292>
		{
			if (buff[i] == '\n')
			return i;
		}
		return 1024;
    285e:	01 96       	adiw	r24, 0x01	; 1
    2860:	81 15       	cp	r24, r1
    2862:	a4 e0       	ldi	r26, 0x04	; 4
	int32_t gps_local_delta; //local time + this = gps time (ish)
	//uint16_t packetlen(const uint8_t* buff);
	uint16_t packetlen(const uint8_t* buff)
	{
		uint16_t i = 0;
		for (i = 0; i < 1024; i++)
    2864:	9a 07       	cpc	r25, r26
    2866:	c1 f7       	brne	.-16     	; 0x2858 <main+0x278>
				
				ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
				{
					memcpy(gpstmp, gpgga_buff, 85);
				}
				gpstmp[packetlen(gpstmp)] = '\0';
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	94 e0       	ldi	r25, 0x04	; 4
    286c:	02 c0       	rjmp	.+4      	; 0x2872 <main+0x292>
    286e:	80 e0       	ldi	r24, 0x00	; 0
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	e1 e0       	ldi	r30, 0x01	; 1
    2874:	f0 e0       	ldi	r31, 0x00	; 0
				//printf(gpstmp);
				GPS_data_t gps_data = getGPSDatafromNMEA(gpstmp, strlen(gpstmp));
    2876:	ec 0f       	add	r30, r28
    2878:	fd 1f       	adc	r31, r29
    287a:	e8 0f       	add	r30, r24
    287c:	f9 1f       	adc	r31, r25
    287e:	10 82       	st	Z, r1
    2880:	cc 57       	subi	r28, 0x7C	; 124
    2882:	df 4f       	sbci	r29, 0xFF	; 255
    2884:	e8 81       	ld	r30, Y
    2886:	f9 81       	ldd	r31, Y+1	; 0x01
    2888:	c4 58       	subi	r28, 0x84	; 132
    288a:	d0 40       	sbci	r29, 0x00	; 0
    288c:	01 90       	ld	r0, Z+
    288e:	00 20       	and	r0, r0
    2890:	e9 f7       	brne	.-6      	; 0x288c <main+0x2ac>
    2892:	31 97       	sbiw	r30, 0x01	; 1
    2894:	af 01       	movw	r20, r30
    2896:	cc 57       	subi	r28, 0x7C	; 124
    2898:	df 4f       	sbci	r29, 0xFF	; 255
    289a:	88 81       	ld	r24, Y
    289c:	99 81       	ldd	r25, Y+1	; 0x01
    289e:	c4 58       	subi	r28, 0x84	; 132
    28a0:	d0 40       	sbci	r29, 0x00	; 0
    28a2:	48 1b       	sub	r20, r24
    28a4:	59 0b       	sbc	r21, r25
    28a6:	be 01       	movw	r22, r28
    28a8:	6f 5f       	subi	r22, 0xFF	; 255
				GPSAlt =	gps_data.altitude;
    28aa:	7f 4f       	sbci	r23, 0xFF	; 255
    28ac:	ce 01       	movw	r24, r28
    28ae:	82 5a       	subi	r24, 0xA2	; 162
    28b0:	9f 4f       	sbci	r25, 0xFF	; 255
    28b2:	0e 94 1b 0a 	call	0x1436	; 0x1436 <getGPSDatafromNMEA>
    28b6:	e8 96       	adiw	r28, 0x38	; 56
    28b8:	6c ad       	ldd	r22, Y+60	; 0x3c
    28ba:	7d ad       	ldd	r23, Y+61	; 0x3d
    28bc:	8e ad       	ldd	r24, Y+62	; 0x3e
    28be:	9f ad       	ldd	r25, Y+63	; 0x3f
    28c0:	e8 97       	sbiw	r28, 0x38	; 56
    28c2:	31 d2       	rcall	.+1122   	; 0x2d26 <__fixunssfsi>
    28c4:	ca 56       	subi	r28, 0x6A	; 106
    28c6:	df 4f       	sbci	r29, 0xFF	; 255
    28c8:	68 83       	st	Y, r22
    28ca:	c6 59       	subi	r28, 0x96	; 150
    28cc:	d0 40       	sbci	r29, 0x00	; 0
    28ce:	c9 56       	subi	r28, 0x69	; 105
    28d0:	df 4f       	sbci	r29, 0xFF	; 255
    28d2:	78 83       	st	Y, r23
    28d4:	c7 59       	subi	r28, 0x97	; 151
    28d6:	d0 40       	sbci	r29, 0x00	; 0
				GPSLat =	gps_data.latdecimal;
    28d8:	c8 56       	subi	r28, 0x68	; 104
    28da:	df 4f       	sbci	r29, 0xFF	; 255
    28dc:	88 83       	st	Y, r24
    28de:	c8 59       	subi	r28, 0x98	; 152
    28e0:	d0 40       	sbci	r29, 0x00	; 0
    28e2:	a9 2e       	mov	r10, r25
    28e4:	a9 96       	adiw	r28, 0x29	; 41
    28e6:	6c ad       	ldd	r22, Y+60	; 0x3c
    28e8:	7d ad       	ldd	r23, Y+61	; 0x3d
    28ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    28ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    28ee:	a9 97       	sbiw	r28, 0x29	; 41
    28f0:	1a d2       	rcall	.+1076   	; 0x2d26 <__fixunssfsi>
    28f2:	c2 57       	subi	r28, 0x72	; 114
    28f4:	df 4f       	sbci	r29, 0xFF	; 255
    28f6:	68 83       	st	Y, r22
    28f8:	ce 58       	subi	r28, 0x8E	; 142
    28fa:	d0 40       	sbci	r29, 0x00	; 0
    28fc:	c1 57       	subi	r28, 0x71	; 113
    28fe:	df 4f       	sbci	r29, 0xFF	; 255
    2900:	78 83       	st	Y, r23
    2902:	cf 58       	subi	r28, 0x8F	; 143
    2904:	d0 40       	sbci	r29, 0x00	; 0
    2906:	c0 57       	subi	r28, 0x70	; 112
    2908:	df 4f       	sbci	r29, 0xFF	; 255
    290a:	88 83       	st	Y, r24
    290c:	c0 59       	subi	r28, 0x90	; 144
				GPSLong=	gps_data.londecimal;
    290e:	d0 40       	sbci	r29, 0x00	; 0
    2910:	cf 56       	subi	r28, 0x6F	; 111
    2912:	df 4f       	sbci	r29, 0xFF	; 255
    2914:	98 83       	st	Y, r25
    2916:	c1 59       	subi	r28, 0x91	; 145
    2918:	d0 40       	sbci	r29, 0x00	; 0
    291a:	e4 96       	adiw	r28, 0x34	; 52
    291c:	6c ad       	ldd	r22, Y+60	; 0x3c
    291e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2920:	8e ad       	ldd	r24, Y+62	; 0x3e
    2922:	9f ad       	ldd	r25, Y+63	; 0x3f
    2924:	e4 97       	sbiw	r28, 0x34	; 52
    2926:	ff d1       	rcall	.+1022   	; 0x2d26 <__fixunssfsi>
    2928:	ce 56       	subi	r28, 0x6E	; 110
    292a:	df 4f       	sbci	r29, 0xFF	; 255
    292c:	68 83       	st	Y, r22
    292e:	c2 59       	subi	r28, 0x92	; 146
    2930:	d0 40       	sbci	r29, 0x00	; 0
    2932:	cd 56       	subi	r28, 0x6D	; 109
    2934:	df 4f       	sbci	r29, 0xFF	; 255
    2936:	78 83       	st	Y, r23
    2938:	c3 59       	subi	r28, 0x93	; 147
    293a:	d0 40       	sbci	r29, 0x00	; 0
    293c:	cc 56       	subi	r28, 0x6C	; 108
    293e:	df 4f       	sbci	r29, 0xFF	; 255
    2940:	88 83       	st	Y, r24
    2942:	c4 59       	subi	r28, 0x94	; 148
				
				last_finished = SENTENCE_NONE;
    2944:	d0 40       	sbci	r29, 0x00	; 0
    2946:	cb 56       	subi	r28, 0x6B	; 107
				
				if (gps_data.fix_status)
    2948:	df 4f       	sbci	r29, 0xFF	; 255
    294a:	98 83       	st	Y, r25
    294c:	c5 59       	subi	r28, 0x95	; 149
    294e:	d0 40       	sbci	r29, 0x00	; 0
    2950:	10 92 29 21 	sts	0x2129, r1	; 0x802129 <last_finished>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2954:	ec 96       	adiw	r28, 0x3c	; 60
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2956:	8f ad       	ldd	r24, Y+63	; 0x3f
		}
		//timer_founter_init(6249, 10);
		//printf("Temperature = %u \n", temperature);
		//printf("Pressure = %lu ~\n", pressure);
		//printf("Altitude = %li \n", (int32_t)altitude);
		delay_ms(500);
    2958:	ec 97       	sbiw	r28, 0x3c	; 60
    295a:	88 23       	and	r24, r24
    295c:	19 f0       	breq	.+6      	; 0x2964 <main+0x384>
    295e:	8f b7       	in	r24, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	8f bf       	out	0x3f, r24	; 63
		
		/*float data[16] = {teamID, my_time, packetCount, altitude, pressure, temperature, voltage, GPSTime, GPSLat, GPSLong, GPSAlt, GPSSats,
			tiltX,tiltY,tiltZ,state};*/
		//temperature = 42;
		//NEED TO MOVE FLIGHT STATE BACK TO THE END OF THIS LINE
		printf("$%u,%"PRIu32",%u,%"PRIi32",%"PRIi32",%"PRIi32",%f,%"PRIi32",%"PRIi32",%"PRIi32",%"PRIi32",%"PRIi32",%f,%f,%f,%u\n",teamID,my_time,packetCount,altitude,pressure,(TEMP + 50) / 100,voltage,GPSTime,GPSLat,GPSLong,GPSAlt,GPSSats,tiltX,tiltY,tiltZ,state);
    2964:	6b ea       	ldi	r22, 0xAB	; 171
    2966:	70 eb       	ldi	r23, 0xB0	; 176
    2968:	88 e2       	ldi	r24, 0x28	; 40
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	ce dc       	rcall	.-1636   	; 0x230a <__portable_avr_delay_cycles>
    296e:	1f 92       	push	r1
    2970:	bf 92       	push	r11
    2972:	1f 92       	push	r1
    2974:	1f 92       	push	r1
    2976:	1f 92       	push	r1
    2978:	1f 92       	push	r1
    297a:	1f 92       	push	r1
    297c:	1f 92       	push	r1
    297e:	1f 92       	push	r1
    2980:	1f 92       	push	r1
    2982:	1f 92       	push	r1
    2984:	1f 92       	push	r1
    2986:	1f 92       	push	r1
    2988:	1f 92       	push	r1
    298a:	1f 92       	push	r1
    298c:	1f 92       	push	r1
    298e:	1f 92       	push	r1
    2990:	1f 92       	push	r1
    2992:	af 92       	push	r10
    2994:	c8 56       	subi	r28, 0x68	; 104
    2996:	df 4f       	sbci	r29, 0xFF	; 255
    2998:	98 81       	ld	r25, Y
    299a:	c8 59       	subi	r28, 0x98	; 152
    299c:	d0 40       	sbci	r29, 0x00	; 0
    299e:	9f 93       	push	r25
    29a0:	c9 56       	subi	r28, 0x69	; 105
    29a2:	df 4f       	sbci	r29, 0xFF	; 255
    29a4:	a8 81       	ld	r26, Y
    29a6:	c7 59       	subi	r28, 0x97	; 151
    29a8:	d0 40       	sbci	r29, 0x00	; 0
    29aa:	af 93       	push	r26
    29ac:	ca 56       	subi	r28, 0x6A	; 106
    29ae:	df 4f       	sbci	r29, 0xFF	; 255
    29b0:	b8 81       	ld	r27, Y
    29b2:	c6 59       	subi	r28, 0x96	; 150
    29b4:	d0 40       	sbci	r29, 0x00	; 0
    29b6:	bf 93       	push	r27
    29b8:	cb 56       	subi	r28, 0x6B	; 107
    29ba:	df 4f       	sbci	r29, 0xFF	; 255
    29bc:	e8 81       	ld	r30, Y
    29be:	c5 59       	subi	r28, 0x95	; 149
    29c0:	d0 40       	sbci	r29, 0x00	; 0
    29c2:	ef 93       	push	r30
    29c4:	cc 56       	subi	r28, 0x6C	; 108
    29c6:	df 4f       	sbci	r29, 0xFF	; 255
    29c8:	f8 81       	ld	r31, Y
    29ca:	c4 59       	subi	r28, 0x94	; 148
    29cc:	d0 40       	sbci	r29, 0x00	; 0
    29ce:	ff 93       	push	r31
    29d0:	cd 56       	subi	r28, 0x6D	; 109
    29d2:	df 4f       	sbci	r29, 0xFF	; 255
    29d4:	28 81       	ld	r18, Y
    29d6:	c3 59       	subi	r28, 0x93	; 147
    29d8:	d0 40       	sbci	r29, 0x00	; 0
    29da:	2f 93       	push	r18
    29dc:	ce 56       	subi	r28, 0x6E	; 110
    29de:	df 4f       	sbci	r29, 0xFF	; 255
    29e0:	88 81       	ld	r24, Y
    29e2:	c2 59       	subi	r28, 0x92	; 146
    29e4:	d0 40       	sbci	r29, 0x00	; 0
    29e6:	8f 93       	push	r24
    29e8:	cf 56       	subi	r28, 0x6F	; 111
    29ea:	df 4f       	sbci	r29, 0xFF	; 255
    29ec:	98 81       	ld	r25, Y
    29ee:	c1 59       	subi	r28, 0x91	; 145
    29f0:	d0 40       	sbci	r29, 0x00	; 0
    29f2:	9f 93       	push	r25
    29f4:	c0 57       	subi	r28, 0x70	; 112
    29f6:	df 4f       	sbci	r29, 0xFF	; 255
    29f8:	a8 81       	ld	r26, Y
    29fa:	c0 59       	subi	r28, 0x90	; 144
    29fc:	d0 40       	sbci	r29, 0x00	; 0
    29fe:	af 93       	push	r26
    2a00:	c1 57       	subi	r28, 0x71	; 113
    2a02:	df 4f       	sbci	r29, 0xFF	; 255
    2a04:	b8 81       	ld	r27, Y
    2a06:	cf 58       	subi	r28, 0x8F	; 143
    2a08:	d0 40       	sbci	r29, 0x00	; 0
    2a0a:	bf 93       	push	r27
    2a0c:	c2 57       	subi	r28, 0x72	; 114
    2a0e:	df 4f       	sbci	r29, 0xFF	; 255
    2a10:	e8 81       	ld	r30, Y
    2a12:	ce 58       	subi	r28, 0x8E	; 142
    2a14:	d0 40       	sbci	r29, 0x00	; 0
    2a16:	ef 93       	push	r30
    2a18:	1f 92       	push	r1
    2a1a:	1f 92       	push	r1
    2a1c:	1f 92       	push	r1
    2a1e:	1f 92       	push	r1
    2a20:	1f 92       	push	r1
    2a22:	1f 92       	push	r1
    2a24:	1f 92       	push	r1
    2a26:	1f 92       	push	r1
    2a28:	80 91 2a 23 	lds	r24, 0x232A	; 0x80232a <TEMP>
    2a2c:	90 91 2b 23 	lds	r25, 0x232B	; 0x80232b <TEMP+0x1>
    2a30:	a0 91 2c 23 	lds	r26, 0x232C	; 0x80232c <TEMP+0x2>
    2a34:	b0 91 2d 23 	lds	r27, 0x232D	; 0x80232d <TEMP+0x3>
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	6e 5c       	subi	r22, 0xCE	; 206
    2a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a40:	8f 4f       	sbci	r24, 0xFF	; 255
    2a42:	9f 4f       	sbci	r25, 0xFF	; 255
    2a44:	24 e6       	ldi	r18, 0x64	; 100
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e0       	ldi	r20, 0x00	; 0
    2a4a:	50 e0       	ldi	r21, 0x00	; 0
    2a4c:	42 d6       	rcall	.+3204   	; 0x36d2 <__divmodsi4>
    2a4e:	5f 93       	push	r21
    2a50:	4f 93       	push	r20
    2a52:	3f 93       	push	r19
    2a54:	2f 93       	push	r18
    2a56:	8f 92       	push	r8
    2a58:	0f 93       	push	r16
    2a5a:	1f 93       	push	r17
    2a5c:	9f 92       	push	r9
    2a5e:	ff 92       	push	r15
    2a60:	ef 92       	push	r14
    2a62:	df 92       	push	r13
    2a64:	cf 92       	push	r12
    2a66:	3f 92       	push	r3
    2a68:	2f 92       	push	r2
    2a6a:	7f 92       	push	r7
    2a6c:	6f 92       	push	r6
    2a6e:	5f 92       	push	r5
    2a70:	4f 92       	push	r4
    2a72:	f4 e1       	ldi	r31, 0x14	; 20
    2a74:	ff 93       	push	r31
    2a76:	22 e4       	ldi	r18, 0x42	; 66
    2a78:	2f 93       	push	r18
		packetCount++;
    2a7a:	88 e2       	ldi	r24, 0x28	; 40
    2a7c:	90 e2       	ldi	r25, 0x20	; 32
    2a7e:	9f 93       	push	r25
	
	
	// Flight States!
	
		//FS0
		if(state==0){
    2a80:	8f 93       	push	r24
    2a82:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <printf>
    2a86:	bf ef       	ldi	r27, 0xFF	; 255
			//printf("Flight State 0 \n");
			PORTE.DIRSET = 0b01010101;
    2a88:	2b 1a       	sub	r2, r27
    2a8a:	3b 0a       	sbc	r3, r27
    2a8c:	cd bf       	out	0x3d, r28	; 61
			PORTE.OUTSET = 0b01010101;
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	b1 10       	cpse	r11, r1
			
			servo_counter(.75);
    2a92:	36 c0       	rjmp	.+108    	; 0x2b00 <main+0x520>
    2a94:	f5 e5       	ldi	r31, 0x55	; 85
    2a96:	f0 93 81 06 	sts	0x0681, r31	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    2a9a:	f0 93 85 06 	sts	0x0685, r31	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
			//PORTA.OUT = 0b00001000; //Hopefully this does the buzzer... buzzer is really quiet rn, gotta fix that. (this is just for testing)
			//printf("max alt: %"PRIi32"\n", max_altitude);
			if ((int32_t)max_altitude - (int32_t)altitude > 50){ //Work on Velocity later, this will work for now
    2a9e:	60 e0       	ldi	r22, 0x00	; 0
    2aa0:	70 e0       	ldi	r23, 0x00	; 0
    2aa2:	80 e4       	ldi	r24, 0x40	; 64
    2aa4:	9f e3       	ldi	r25, 0x3F	; 63
    2aa6:	02 db       	rcall	.-2556   	; 0x20ac <servo_counter>
    2aa8:	c3 56       	subi	r28, 0x63	; 99
    2aaa:	df 4f       	sbci	r29, 0xFF	; 255
    2aac:	88 81       	ld	r24, Y
    2aae:	99 81       	ldd	r25, Y+1	; 0x01
    2ab0:	aa 81       	ldd	r26, Y+2	; 0x02
    2ab2:	bb 81       	ldd	r27, Y+3	; 0x03
    2ab4:	cd 59       	subi	r28, 0x9D	; 157
    2ab6:	d0 40       	sbci	r29, 0x00	; 0
    2ab8:	8c 19       	sub	r24, r12
    2aba:	9d 09       	sbc	r25, r13
    2abc:	ae 09       	sbc	r26, r14
				PORTE.DIRSET = 0b00000001;	//Deploy Heat Shield
    2abe:	bf 09       	sbc	r27, r15
    2ac0:	c3 97       	sbiw	r24, 0x33	; 51
    2ac2:	a1 05       	cpc	r26, r1
				PORTE.OUTSET = 0b00000001;	//Deploy Heat Shield
    2ac4:	b1 05       	cpc	r27, r1
    2ac6:	3c f0       	brlt	.+14     	; 0x2ad6 <main+0x4f6>
				state = 1;
    2ac8:	21 e0       	ldi	r18, 0x01	; 1
    2aca:	20 93 81 06 	sts	0x0681, r18	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    2ace:	20 93 85 06 	sts	0x0685, r18	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    2ad2:	bb 24       	eor	r11, r11
    2ad4:	b3 94       	inc	r11
    2ad6:	c3 56       	subi	r28, 0x63	; 99
    2ad8:	df 4f       	sbci	r29, 0xFF	; 255
    2ada:	88 81       	ld	r24, Y
    2adc:	99 81       	ldd	r25, Y+1	; 0x01
    2ade:	aa 81       	ldd	r26, Y+2	; 0x02
    2ae0:	bb 81       	ldd	r27, Y+3	; 0x03
    2ae2:	cd 59       	subi	r28, 0x9D	; 157
    2ae4:	d0 40       	sbci	r29, 0x00	; 0
    2ae6:	8c 15       	cp	r24, r12
    2ae8:	9d 05       	cpc	r25, r13
    2aea:	ae 05       	cpc	r26, r14
    2aec:	bf 05       	cpc	r27, r15
    2aee:	44 f4       	brge	.+16     	; 0x2b00 <main+0x520>
    2af0:	c3 56       	subi	r28, 0x63	; 99
    2af2:	df 4f       	sbci	r29, 0xFF	; 255
    2af4:	c8 82       	st	Y, r12
				max_altitude = altitude;
			}
		}
		
		//FS1
		if(state==1){
    2af6:	d9 82       	std	Y+1, r13	; 0x01
    2af8:	ea 82       	std	Y+2, r14	; 0x02
    2afa:	fb 82       	std	Y+3, r15	; 0x03
			//printf("Flight State 1 \n");
			if(altitude-initial_altitude<300){
    2afc:	cd 59       	subi	r28, 0x9D	; 157
    2afe:	d0 40       	sbci	r29, 0x00	; 0
    2b00:	91 e0       	ldi	r25, 0x01	; 1
    2b02:	b9 12       	cpse	r11, r25
    2b04:	13 c0       	rjmp	.+38     	; 0x2b2c <main+0x54c>
    2b06:	ac e2       	ldi	r26, 0x2C	; 44
    2b08:	ca 16       	cp	r12, r26
    2b0a:	a1 e0       	ldi	r26, 0x01	; 1
				PORTE.DIRSET = 0b00000010;	//Activate Camera
    2b0c:	da 06       	cpc	r13, r26
    2b0e:	e1 04       	cpc	r14, r1
    2b10:	f1 04       	cpc	r15, r1
				PORTE.OUTSET = 0b00000010;	//Activate Camera
    2b12:	0c f0       	brlt	.+2      	; 0x2b16 <main+0x536>
    2b14:	0c ce       	rjmp	.-1000   	; 0x272e <main+0x14e>
				PORTA.DIRSET = 0b10000000;	//Detach Heat Shield
    2b16:	82 e0       	ldi	r24, 0x02	; 2
    2b18:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
				PORTA.OUTSET = 0b10000000;	//Detach Heat Shield
    2b1c:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
				state = 2;
			}
		}
		
		//FS2
		if(state==2){
    2b20:	b0 e8       	ldi	r27, 0x80	; 128
    2b22:	b0 93 01 06 	sts	0x0601, r27	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
			//printf("Flight State 2 \n");
			if(smooth_altitude-altitude<3 && altitude-initial_altitude<50){
    2b26:	b0 93 05 06 	sts	0x0605, r27	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    2b2a:	03 c0       	rjmp	.+6      	; 0x2b32 <main+0x552>
    2b2c:	e2 e0       	ldi	r30, 0x02	; 2
    2b2e:	be 12       	cpse	r11, r30
    2b30:	fe cd       	rjmp	.-1028   	; 0x272e <main+0x14e>
    2b32:	ca 57       	subi	r28, 0x7A	; 122
    2b34:	df 4f       	sbci	r29, 0xFF	; 255
    2b36:	88 81       	ld	r24, Y
    2b38:	99 81       	ldd	r25, Y+1	; 0x01
    2b3a:	aa 81       	ldd	r26, Y+2	; 0x02
    2b3c:	bb 81       	ldd	r27, Y+3	; 0x03
    2b3e:	c6 58       	subi	r28, 0x86	; 134
    2b40:	d0 40       	sbci	r29, 0x00	; 0
    2b42:	8c 19       	sub	r24, r12
    2b44:	9d 09       	sbc	r25, r13
    2b46:	ae 09       	sbc	r26, r14
    2b48:	bf 09       	sbc	r27, r15
    2b4a:	03 97       	sbiw	r24, 0x03	; 3
    2b4c:	a1 05       	cpc	r26, r1
    2b4e:	b1 05       	cpc	r27, r1
    2b50:	84 f4       	brge	.+32     	; 0x2b72 <main+0x592>
				buzzer_counter_init(104, 50);
    2b52:	f2 e3       	ldi	r31, 0x32	; 50
    2b54:	cf 16       	cp	r12, r31
    2b56:	d1 04       	cpc	r13, r1
    2b58:	e1 04       	cpc	r14, r1
    2b5a:	f1 04       	cpc	r15, r1
    2b5c:	74 f4       	brge	.+28     	; 0x2b7a <main+0x59a>
				state = 3;
    2b5e:	62 e3       	ldi	r22, 0x32	; 50
    2b60:	70 e0       	ldi	r23, 0x00	; 0
    2b62:	88 e6       	ldi	r24, 0x68	; 104
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	99 da       	rcall	.-2766   	; 0x209a <buzzer_counter_init>
    2b68:	0f 2e       	mov	r0, r31
    2b6a:	f3 e0       	ldi	r31, 0x03	; 3
    2b6c:	bf 2e       	mov	r11, r31
    2b6e:	f0 2d       	mov	r31, r0
    2b70:	de cd       	rjmp	.-1092   	; 0x272e <main+0x14e>
    2b72:	68 94       	set
    2b74:	bb 24       	eor	r11, r11
		}
	
	
	
	
	}
    2b76:	b1 f8       	bld	r11, 1
    2b78:	da cd       	rjmp	.-1100   	; 0x272e <main+0x14e>
    2b7a:	68 94       	set
    2b7c:	bb 24       	eor	r11, r11
    2b7e:	b1 f8       	bld	r11, 1
    2b80:	d6 cd       	rjmp	.-1108   	; 0x272e <main+0x14e>

00002b82 <__subsf3>:
    2b82:	50 58       	subi	r21, 0x80	; 128

00002b84 <__addsf3>:
    2b84:	bb 27       	eor	r27, r27
    2b86:	aa 27       	eor	r26, r26
    2b88:	0e d0       	rcall	.+28     	; 0x2ba6 <__addsf3x>
    2b8a:	4d c1       	rjmp	.+666    	; 0x2e26 <__fp_round>
    2b8c:	3e d1       	rcall	.+636    	; 0x2e0a <__fp_pscA>
    2b8e:	30 f0       	brcs	.+12     	; 0x2b9c <__addsf3+0x18>
    2b90:	43 d1       	rcall	.+646    	; 0x2e18 <__fp_pscB>
    2b92:	20 f0       	brcs	.+8      	; 0x2b9c <__addsf3+0x18>
    2b94:	31 f4       	brne	.+12     	; 0x2ba2 <__addsf3+0x1e>
    2b96:	9f 3f       	cpi	r25, 0xFF	; 255
    2b98:	11 f4       	brne	.+4      	; 0x2b9e <__addsf3+0x1a>
    2b9a:	1e f4       	brtc	.+6      	; 0x2ba2 <__addsf3+0x1e>
    2b9c:	33 c1       	rjmp	.+614    	; 0x2e04 <__fp_nan>
    2b9e:	0e f4       	brtc	.+2      	; 0x2ba2 <__addsf3+0x1e>
    2ba0:	e0 95       	com	r30
    2ba2:	e7 fb       	bst	r30, 7
    2ba4:	29 c1       	rjmp	.+594    	; 0x2df8 <__fp_inf>

00002ba6 <__addsf3x>:
    2ba6:	e9 2f       	mov	r30, r25
    2ba8:	4f d1       	rcall	.+670    	; 0x2e48 <__fp_split3>
    2baa:	80 f3       	brcs	.-32     	; 0x2b8c <__addsf3+0x8>
    2bac:	ba 17       	cp	r27, r26
    2bae:	62 07       	cpc	r22, r18
    2bb0:	73 07       	cpc	r23, r19
    2bb2:	84 07       	cpc	r24, r20
    2bb4:	95 07       	cpc	r25, r21
    2bb6:	18 f0       	brcs	.+6      	; 0x2bbe <__addsf3x+0x18>
    2bb8:	71 f4       	brne	.+28     	; 0x2bd6 <__addsf3x+0x30>
    2bba:	9e f5       	brtc	.+102    	; 0x2c22 <__addsf3x+0x7c>
    2bbc:	67 c1       	rjmp	.+718    	; 0x2e8c <__fp_zero>
    2bbe:	0e f4       	brtc	.+2      	; 0x2bc2 <__addsf3x+0x1c>
    2bc0:	e0 95       	com	r30
    2bc2:	0b 2e       	mov	r0, r27
    2bc4:	ba 2f       	mov	r27, r26
    2bc6:	a0 2d       	mov	r26, r0
    2bc8:	0b 01       	movw	r0, r22
    2bca:	b9 01       	movw	r22, r18
    2bcc:	90 01       	movw	r18, r0
    2bce:	0c 01       	movw	r0, r24
    2bd0:	ca 01       	movw	r24, r20
    2bd2:	a0 01       	movw	r20, r0
    2bd4:	11 24       	eor	r1, r1
    2bd6:	ff 27       	eor	r31, r31
    2bd8:	59 1b       	sub	r21, r25
    2bda:	99 f0       	breq	.+38     	; 0x2c02 <__addsf3x+0x5c>
    2bdc:	59 3f       	cpi	r21, 0xF9	; 249
    2bde:	50 f4       	brcc	.+20     	; 0x2bf4 <__addsf3x+0x4e>
    2be0:	50 3e       	cpi	r21, 0xE0	; 224
    2be2:	68 f1       	brcs	.+90     	; 0x2c3e <__addsf3x+0x98>
    2be4:	1a 16       	cp	r1, r26
    2be6:	f0 40       	sbci	r31, 0x00	; 0
    2be8:	a2 2f       	mov	r26, r18
    2bea:	23 2f       	mov	r18, r19
    2bec:	34 2f       	mov	r19, r20
    2bee:	44 27       	eor	r20, r20
    2bf0:	58 5f       	subi	r21, 0xF8	; 248
    2bf2:	f3 cf       	rjmp	.-26     	; 0x2bda <__addsf3x+0x34>
    2bf4:	46 95       	lsr	r20
    2bf6:	37 95       	ror	r19
    2bf8:	27 95       	ror	r18
    2bfa:	a7 95       	ror	r26
    2bfc:	f0 40       	sbci	r31, 0x00	; 0
    2bfe:	53 95       	inc	r21
    2c00:	c9 f7       	brne	.-14     	; 0x2bf4 <__addsf3x+0x4e>
    2c02:	7e f4       	brtc	.+30     	; 0x2c22 <__addsf3x+0x7c>
    2c04:	1f 16       	cp	r1, r31
    2c06:	ba 0b       	sbc	r27, r26
    2c08:	62 0b       	sbc	r22, r18
    2c0a:	73 0b       	sbc	r23, r19
    2c0c:	84 0b       	sbc	r24, r20
    2c0e:	ba f0       	brmi	.+46     	; 0x2c3e <__addsf3x+0x98>
    2c10:	91 50       	subi	r25, 0x01	; 1
    2c12:	a1 f0       	breq	.+40     	; 0x2c3c <__addsf3x+0x96>
    2c14:	ff 0f       	add	r31, r31
    2c16:	bb 1f       	adc	r27, r27
    2c18:	66 1f       	adc	r22, r22
    2c1a:	77 1f       	adc	r23, r23
    2c1c:	88 1f       	adc	r24, r24
    2c1e:	c2 f7       	brpl	.-16     	; 0x2c10 <__addsf3x+0x6a>
    2c20:	0e c0       	rjmp	.+28     	; 0x2c3e <__addsf3x+0x98>
    2c22:	ba 0f       	add	r27, r26
    2c24:	62 1f       	adc	r22, r18
    2c26:	73 1f       	adc	r23, r19
    2c28:	84 1f       	adc	r24, r20
    2c2a:	48 f4       	brcc	.+18     	; 0x2c3e <__addsf3x+0x98>
    2c2c:	87 95       	ror	r24
    2c2e:	77 95       	ror	r23
    2c30:	67 95       	ror	r22
    2c32:	b7 95       	ror	r27
    2c34:	f7 95       	ror	r31
    2c36:	9e 3f       	cpi	r25, 0xFE	; 254
    2c38:	08 f0       	brcs	.+2      	; 0x2c3c <__addsf3x+0x96>
    2c3a:	b3 cf       	rjmp	.-154    	; 0x2ba2 <__addsf3+0x1e>
    2c3c:	93 95       	inc	r25
    2c3e:	88 0f       	add	r24, r24
    2c40:	08 f0       	brcs	.+2      	; 0x2c44 <__addsf3x+0x9e>
    2c42:	99 27       	eor	r25, r25
    2c44:	ee 0f       	add	r30, r30
    2c46:	97 95       	ror	r25
    2c48:	87 95       	ror	r24
    2c4a:	08 95       	ret

00002c4c <__divsf3>:
    2c4c:	0c d0       	rcall	.+24     	; 0x2c66 <__divsf3x>
    2c4e:	eb c0       	rjmp	.+470    	; 0x2e26 <__fp_round>
    2c50:	e3 d0       	rcall	.+454    	; 0x2e18 <__fp_pscB>
    2c52:	40 f0       	brcs	.+16     	; 0x2c64 <__divsf3+0x18>
    2c54:	da d0       	rcall	.+436    	; 0x2e0a <__fp_pscA>
    2c56:	30 f0       	brcs	.+12     	; 0x2c64 <__divsf3+0x18>
    2c58:	21 f4       	brne	.+8      	; 0x2c62 <__divsf3+0x16>
    2c5a:	5f 3f       	cpi	r21, 0xFF	; 255
    2c5c:	19 f0       	breq	.+6      	; 0x2c64 <__divsf3+0x18>
    2c5e:	cc c0       	rjmp	.+408    	; 0x2df8 <__fp_inf>
    2c60:	51 11       	cpse	r21, r1
    2c62:	15 c1       	rjmp	.+554    	; 0x2e8e <__fp_szero>
    2c64:	cf c0       	rjmp	.+414    	; 0x2e04 <__fp_nan>

00002c66 <__divsf3x>:
    2c66:	f0 d0       	rcall	.+480    	; 0x2e48 <__fp_split3>
    2c68:	98 f3       	brcs	.-26     	; 0x2c50 <__divsf3+0x4>

00002c6a <__divsf3_pse>:
    2c6a:	99 23       	and	r25, r25
    2c6c:	c9 f3       	breq	.-14     	; 0x2c60 <__divsf3+0x14>
    2c6e:	55 23       	and	r21, r21
    2c70:	b1 f3       	breq	.-20     	; 0x2c5e <__divsf3+0x12>
    2c72:	95 1b       	sub	r25, r21
    2c74:	55 0b       	sbc	r21, r21
    2c76:	bb 27       	eor	r27, r27
    2c78:	aa 27       	eor	r26, r26
    2c7a:	62 17       	cp	r22, r18
    2c7c:	73 07       	cpc	r23, r19
    2c7e:	84 07       	cpc	r24, r20
    2c80:	38 f0       	brcs	.+14     	; 0x2c90 <__divsf3_pse+0x26>
    2c82:	9f 5f       	subi	r25, 0xFF	; 255
    2c84:	5f 4f       	sbci	r21, 0xFF	; 255
    2c86:	22 0f       	add	r18, r18
    2c88:	33 1f       	adc	r19, r19
    2c8a:	44 1f       	adc	r20, r20
    2c8c:	aa 1f       	adc	r26, r26
    2c8e:	a9 f3       	breq	.-22     	; 0x2c7a <__divsf3_pse+0x10>
    2c90:	33 d0       	rcall	.+102    	; 0x2cf8 <__divsf3_pse+0x8e>
    2c92:	0e 2e       	mov	r0, r30
    2c94:	3a f0       	brmi	.+14     	; 0x2ca4 <__divsf3_pse+0x3a>
    2c96:	e0 e8       	ldi	r30, 0x80	; 128
    2c98:	30 d0       	rcall	.+96     	; 0x2cfa <__divsf3_pse+0x90>
    2c9a:	91 50       	subi	r25, 0x01	; 1
    2c9c:	50 40       	sbci	r21, 0x00	; 0
    2c9e:	e6 95       	lsr	r30
    2ca0:	00 1c       	adc	r0, r0
    2ca2:	ca f7       	brpl	.-14     	; 0x2c96 <__divsf3_pse+0x2c>
    2ca4:	29 d0       	rcall	.+82     	; 0x2cf8 <__divsf3_pse+0x8e>
    2ca6:	fe 2f       	mov	r31, r30
    2ca8:	27 d0       	rcall	.+78     	; 0x2cf8 <__divsf3_pse+0x8e>
    2caa:	66 0f       	add	r22, r22
    2cac:	77 1f       	adc	r23, r23
    2cae:	88 1f       	adc	r24, r24
    2cb0:	bb 1f       	adc	r27, r27
    2cb2:	26 17       	cp	r18, r22
    2cb4:	37 07       	cpc	r19, r23
    2cb6:	48 07       	cpc	r20, r24
    2cb8:	ab 07       	cpc	r26, r27
    2cba:	b0 e8       	ldi	r27, 0x80	; 128
    2cbc:	09 f0       	breq	.+2      	; 0x2cc0 <__divsf3_pse+0x56>
    2cbe:	bb 0b       	sbc	r27, r27
    2cc0:	80 2d       	mov	r24, r0
    2cc2:	bf 01       	movw	r22, r30
    2cc4:	ff 27       	eor	r31, r31
    2cc6:	93 58       	subi	r25, 0x83	; 131
    2cc8:	5f 4f       	sbci	r21, 0xFF	; 255
    2cca:	2a f0       	brmi	.+10     	; 0x2cd6 <__divsf3_pse+0x6c>
    2ccc:	9e 3f       	cpi	r25, 0xFE	; 254
    2cce:	51 05       	cpc	r21, r1
    2cd0:	68 f0       	brcs	.+26     	; 0x2cec <__divsf3_pse+0x82>
    2cd2:	92 c0       	rjmp	.+292    	; 0x2df8 <__fp_inf>
    2cd4:	dc c0       	rjmp	.+440    	; 0x2e8e <__fp_szero>
    2cd6:	5f 3f       	cpi	r21, 0xFF	; 255
    2cd8:	ec f3       	brlt	.-6      	; 0x2cd4 <__divsf3_pse+0x6a>
    2cda:	98 3e       	cpi	r25, 0xE8	; 232
    2cdc:	dc f3       	brlt	.-10     	; 0x2cd4 <__divsf3_pse+0x6a>
    2cde:	86 95       	lsr	r24
    2ce0:	77 95       	ror	r23
    2ce2:	67 95       	ror	r22
    2ce4:	b7 95       	ror	r27
    2ce6:	f7 95       	ror	r31
    2ce8:	9f 5f       	subi	r25, 0xFF	; 255
    2cea:	c9 f7       	brne	.-14     	; 0x2cde <__divsf3_pse+0x74>
    2cec:	88 0f       	add	r24, r24
    2cee:	91 1d       	adc	r25, r1
    2cf0:	96 95       	lsr	r25
    2cf2:	87 95       	ror	r24
    2cf4:	97 f9       	bld	r25, 7
    2cf6:	08 95       	ret
    2cf8:	e1 e0       	ldi	r30, 0x01	; 1
    2cfa:	66 0f       	add	r22, r22
    2cfc:	77 1f       	adc	r23, r23
    2cfe:	88 1f       	adc	r24, r24
    2d00:	bb 1f       	adc	r27, r27
    2d02:	62 17       	cp	r22, r18
    2d04:	73 07       	cpc	r23, r19
    2d06:	84 07       	cpc	r24, r20
    2d08:	ba 07       	cpc	r27, r26
    2d0a:	20 f0       	brcs	.+8      	; 0x2d14 <__divsf3_pse+0xaa>
    2d0c:	62 1b       	sub	r22, r18
    2d0e:	73 0b       	sbc	r23, r19
    2d10:	84 0b       	sbc	r24, r20
    2d12:	ba 0b       	sbc	r27, r26
    2d14:	ee 1f       	adc	r30, r30
    2d16:	88 f7       	brcc	.-30     	; 0x2cfa <__divsf3_pse+0x90>
    2d18:	e0 95       	com	r30
    2d1a:	08 95       	ret

00002d1c <__fixsfsi>:
    2d1c:	04 d0       	rcall	.+8      	; 0x2d26 <__fixunssfsi>
    2d1e:	68 94       	set
    2d20:	b1 11       	cpse	r27, r1
    2d22:	b5 c0       	rjmp	.+362    	; 0x2e8e <__fp_szero>
    2d24:	08 95       	ret

00002d26 <__fixunssfsi>:
    2d26:	98 d0       	rcall	.+304    	; 0x2e58 <__fp_splitA>
    2d28:	88 f0       	brcs	.+34     	; 0x2d4c <__fixunssfsi+0x26>
    2d2a:	9f 57       	subi	r25, 0x7F	; 127
    2d2c:	90 f0       	brcs	.+36     	; 0x2d52 <__fixunssfsi+0x2c>
    2d2e:	b9 2f       	mov	r27, r25
    2d30:	99 27       	eor	r25, r25
    2d32:	b7 51       	subi	r27, 0x17	; 23
    2d34:	a0 f0       	brcs	.+40     	; 0x2d5e <__fixunssfsi+0x38>
    2d36:	d1 f0       	breq	.+52     	; 0x2d6c <__fixunssfsi+0x46>
    2d38:	66 0f       	add	r22, r22
    2d3a:	77 1f       	adc	r23, r23
    2d3c:	88 1f       	adc	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	1a f0       	brmi	.+6      	; 0x2d48 <__fixunssfsi+0x22>
    2d42:	ba 95       	dec	r27
    2d44:	c9 f7       	brne	.-14     	; 0x2d38 <__fixunssfsi+0x12>
    2d46:	12 c0       	rjmp	.+36     	; 0x2d6c <__fixunssfsi+0x46>
    2d48:	b1 30       	cpi	r27, 0x01	; 1
    2d4a:	81 f0       	breq	.+32     	; 0x2d6c <__fixunssfsi+0x46>
    2d4c:	9f d0       	rcall	.+318    	; 0x2e8c <__fp_zero>
    2d4e:	b1 e0       	ldi	r27, 0x01	; 1
    2d50:	08 95       	ret
    2d52:	9c c0       	rjmp	.+312    	; 0x2e8c <__fp_zero>
    2d54:	67 2f       	mov	r22, r23
    2d56:	78 2f       	mov	r23, r24
    2d58:	88 27       	eor	r24, r24
    2d5a:	b8 5f       	subi	r27, 0xF8	; 248
    2d5c:	39 f0       	breq	.+14     	; 0x2d6c <__fixunssfsi+0x46>
    2d5e:	b9 3f       	cpi	r27, 0xF9	; 249
    2d60:	cc f3       	brlt	.-14     	; 0x2d54 <__fixunssfsi+0x2e>
    2d62:	86 95       	lsr	r24
    2d64:	77 95       	ror	r23
    2d66:	67 95       	ror	r22
    2d68:	b3 95       	inc	r27
    2d6a:	d9 f7       	brne	.-10     	; 0x2d62 <__fixunssfsi+0x3c>
    2d6c:	3e f4       	brtc	.+14     	; 0x2d7c <__fixunssfsi+0x56>
    2d6e:	90 95       	com	r25
    2d70:	80 95       	com	r24
    2d72:	70 95       	com	r23
    2d74:	61 95       	neg	r22
    2d76:	7f 4f       	sbci	r23, 0xFF	; 255
    2d78:	8f 4f       	sbci	r24, 0xFF	; 255
    2d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d7c:	08 95       	ret

00002d7e <__floatunsisf>:
    2d7e:	e8 94       	clt
    2d80:	09 c0       	rjmp	.+18     	; 0x2d94 <__floatsisf+0x12>

00002d82 <__floatsisf>:
    2d82:	97 fb       	bst	r25, 7
    2d84:	3e f4       	brtc	.+14     	; 0x2d94 <__floatsisf+0x12>
    2d86:	90 95       	com	r25
    2d88:	80 95       	com	r24
    2d8a:	70 95       	com	r23
    2d8c:	61 95       	neg	r22
    2d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d90:	8f 4f       	sbci	r24, 0xFF	; 255
    2d92:	9f 4f       	sbci	r25, 0xFF	; 255
    2d94:	99 23       	and	r25, r25
    2d96:	a9 f0       	breq	.+42     	; 0x2dc2 <__floatsisf+0x40>
    2d98:	f9 2f       	mov	r31, r25
    2d9a:	96 e9       	ldi	r25, 0x96	; 150
    2d9c:	bb 27       	eor	r27, r27
    2d9e:	93 95       	inc	r25
    2da0:	f6 95       	lsr	r31
    2da2:	87 95       	ror	r24
    2da4:	77 95       	ror	r23
    2da6:	67 95       	ror	r22
    2da8:	b7 95       	ror	r27
    2daa:	f1 11       	cpse	r31, r1
    2dac:	f8 cf       	rjmp	.-16     	; 0x2d9e <__floatsisf+0x1c>
    2dae:	fa f4       	brpl	.+62     	; 0x2dee <__floatsisf+0x6c>
    2db0:	bb 0f       	add	r27, r27
    2db2:	11 f4       	brne	.+4      	; 0x2db8 <__floatsisf+0x36>
    2db4:	60 ff       	sbrs	r22, 0
    2db6:	1b c0       	rjmp	.+54     	; 0x2dee <__floatsisf+0x6c>
    2db8:	6f 5f       	subi	r22, 0xFF	; 255
    2dba:	7f 4f       	sbci	r23, 0xFF	; 255
    2dbc:	8f 4f       	sbci	r24, 0xFF	; 255
    2dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc0:	16 c0       	rjmp	.+44     	; 0x2dee <__floatsisf+0x6c>
    2dc2:	88 23       	and	r24, r24
    2dc4:	11 f0       	breq	.+4      	; 0x2dca <__floatsisf+0x48>
    2dc6:	96 e9       	ldi	r25, 0x96	; 150
    2dc8:	11 c0       	rjmp	.+34     	; 0x2dec <__floatsisf+0x6a>
    2dca:	77 23       	and	r23, r23
    2dcc:	21 f0       	breq	.+8      	; 0x2dd6 <__floatsisf+0x54>
    2dce:	9e e8       	ldi	r25, 0x8E	; 142
    2dd0:	87 2f       	mov	r24, r23
    2dd2:	76 2f       	mov	r23, r22
    2dd4:	05 c0       	rjmp	.+10     	; 0x2de0 <__floatsisf+0x5e>
    2dd6:	66 23       	and	r22, r22
    2dd8:	71 f0       	breq	.+28     	; 0x2df6 <__floatsisf+0x74>
    2dda:	96 e8       	ldi	r25, 0x86	; 134
    2ddc:	86 2f       	mov	r24, r22
    2dde:	70 e0       	ldi	r23, 0x00	; 0
    2de0:	60 e0       	ldi	r22, 0x00	; 0
    2de2:	2a f0       	brmi	.+10     	; 0x2dee <__floatsisf+0x6c>
    2de4:	9a 95       	dec	r25
    2de6:	66 0f       	add	r22, r22
    2de8:	77 1f       	adc	r23, r23
    2dea:	88 1f       	adc	r24, r24
    2dec:	da f7       	brpl	.-10     	; 0x2de4 <__floatsisf+0x62>
    2dee:	88 0f       	add	r24, r24
    2df0:	96 95       	lsr	r25
    2df2:	87 95       	ror	r24
    2df4:	97 f9       	bld	r25, 7
    2df6:	08 95       	ret

00002df8 <__fp_inf>:
    2df8:	97 f9       	bld	r25, 7
    2dfa:	9f 67       	ori	r25, 0x7F	; 127
    2dfc:	80 e8       	ldi	r24, 0x80	; 128
    2dfe:	70 e0       	ldi	r23, 0x00	; 0
    2e00:	60 e0       	ldi	r22, 0x00	; 0
    2e02:	08 95       	ret

00002e04 <__fp_nan>:
    2e04:	9f ef       	ldi	r25, 0xFF	; 255
    2e06:	80 ec       	ldi	r24, 0xC0	; 192
    2e08:	08 95       	ret

00002e0a <__fp_pscA>:
    2e0a:	00 24       	eor	r0, r0
    2e0c:	0a 94       	dec	r0
    2e0e:	16 16       	cp	r1, r22
    2e10:	17 06       	cpc	r1, r23
    2e12:	18 06       	cpc	r1, r24
    2e14:	09 06       	cpc	r0, r25
    2e16:	08 95       	ret

00002e18 <__fp_pscB>:
    2e18:	00 24       	eor	r0, r0
    2e1a:	0a 94       	dec	r0
    2e1c:	12 16       	cp	r1, r18
    2e1e:	13 06       	cpc	r1, r19
    2e20:	14 06       	cpc	r1, r20
    2e22:	05 06       	cpc	r0, r21
    2e24:	08 95       	ret

00002e26 <__fp_round>:
    2e26:	09 2e       	mov	r0, r25
    2e28:	03 94       	inc	r0
    2e2a:	00 0c       	add	r0, r0
    2e2c:	11 f4       	brne	.+4      	; 0x2e32 <__fp_round+0xc>
    2e2e:	88 23       	and	r24, r24
    2e30:	52 f0       	brmi	.+20     	; 0x2e46 <__fp_round+0x20>
    2e32:	bb 0f       	add	r27, r27
    2e34:	40 f4       	brcc	.+16     	; 0x2e46 <__fp_round+0x20>
    2e36:	bf 2b       	or	r27, r31
    2e38:	11 f4       	brne	.+4      	; 0x2e3e <__fp_round+0x18>
    2e3a:	60 ff       	sbrs	r22, 0
    2e3c:	04 c0       	rjmp	.+8      	; 0x2e46 <__fp_round+0x20>
    2e3e:	6f 5f       	subi	r22, 0xFF	; 255
    2e40:	7f 4f       	sbci	r23, 0xFF	; 255
    2e42:	8f 4f       	sbci	r24, 0xFF	; 255
    2e44:	9f 4f       	sbci	r25, 0xFF	; 255
    2e46:	08 95       	ret

00002e48 <__fp_split3>:
    2e48:	57 fd       	sbrc	r21, 7
    2e4a:	90 58       	subi	r25, 0x80	; 128
    2e4c:	44 0f       	add	r20, r20
    2e4e:	55 1f       	adc	r21, r21
    2e50:	59 f0       	breq	.+22     	; 0x2e68 <__fp_splitA+0x10>
    2e52:	5f 3f       	cpi	r21, 0xFF	; 255
    2e54:	71 f0       	breq	.+28     	; 0x2e72 <__fp_splitA+0x1a>
    2e56:	47 95       	ror	r20

00002e58 <__fp_splitA>:
    2e58:	88 0f       	add	r24, r24
    2e5a:	97 fb       	bst	r25, 7
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	61 f0       	breq	.+24     	; 0x2e78 <__fp_splitA+0x20>
    2e60:	9f 3f       	cpi	r25, 0xFF	; 255
    2e62:	79 f0       	breq	.+30     	; 0x2e82 <__fp_splitA+0x2a>
    2e64:	87 95       	ror	r24
    2e66:	08 95       	ret
    2e68:	12 16       	cp	r1, r18
    2e6a:	13 06       	cpc	r1, r19
    2e6c:	14 06       	cpc	r1, r20
    2e6e:	55 1f       	adc	r21, r21
    2e70:	f2 cf       	rjmp	.-28     	; 0x2e56 <__fp_split3+0xe>
    2e72:	46 95       	lsr	r20
    2e74:	f1 df       	rcall	.-30     	; 0x2e58 <__fp_splitA>
    2e76:	08 c0       	rjmp	.+16     	; 0x2e88 <__fp_splitA+0x30>
    2e78:	16 16       	cp	r1, r22
    2e7a:	17 06       	cpc	r1, r23
    2e7c:	18 06       	cpc	r1, r24
    2e7e:	99 1f       	adc	r25, r25
    2e80:	f1 cf       	rjmp	.-30     	; 0x2e64 <__fp_splitA+0xc>
    2e82:	86 95       	lsr	r24
    2e84:	71 05       	cpc	r23, r1
    2e86:	61 05       	cpc	r22, r1
    2e88:	08 94       	sec
    2e8a:	08 95       	ret

00002e8c <__fp_zero>:
    2e8c:	e8 94       	clt

00002e8e <__fp_szero>:
    2e8e:	bb 27       	eor	r27, r27
    2e90:	66 27       	eor	r22, r22
    2e92:	77 27       	eor	r23, r23
    2e94:	cb 01       	movw	r24, r22
    2e96:	97 f9       	bld	r25, 7
    2e98:	08 95       	ret

00002e9a <__mulsf3>:
    2e9a:	0b d0       	rcall	.+22     	; 0x2eb2 <__mulsf3x>
    2e9c:	c4 cf       	rjmp	.-120    	; 0x2e26 <__fp_round>
    2e9e:	b5 df       	rcall	.-150    	; 0x2e0a <__fp_pscA>
    2ea0:	28 f0       	brcs	.+10     	; 0x2eac <__mulsf3+0x12>
    2ea2:	ba df       	rcall	.-140    	; 0x2e18 <__fp_pscB>
    2ea4:	18 f0       	brcs	.+6      	; 0x2eac <__mulsf3+0x12>
    2ea6:	95 23       	and	r25, r21
    2ea8:	09 f0       	breq	.+2      	; 0x2eac <__mulsf3+0x12>
    2eaa:	a6 cf       	rjmp	.-180    	; 0x2df8 <__fp_inf>
    2eac:	ab cf       	rjmp	.-170    	; 0x2e04 <__fp_nan>
    2eae:	11 24       	eor	r1, r1
    2eb0:	ee cf       	rjmp	.-36     	; 0x2e8e <__fp_szero>

00002eb2 <__mulsf3x>:
    2eb2:	ca df       	rcall	.-108    	; 0x2e48 <__fp_split3>
    2eb4:	a0 f3       	brcs	.-24     	; 0x2e9e <__mulsf3+0x4>

00002eb6 <__mulsf3_pse>:
    2eb6:	95 9f       	mul	r25, r21
    2eb8:	d1 f3       	breq	.-12     	; 0x2eae <__mulsf3+0x14>
    2eba:	95 0f       	add	r25, r21
    2ebc:	50 e0       	ldi	r21, 0x00	; 0
    2ebe:	55 1f       	adc	r21, r21
    2ec0:	62 9f       	mul	r22, r18
    2ec2:	f0 01       	movw	r30, r0
    2ec4:	72 9f       	mul	r23, r18
    2ec6:	bb 27       	eor	r27, r27
    2ec8:	f0 0d       	add	r31, r0
    2eca:	b1 1d       	adc	r27, r1
    2ecc:	63 9f       	mul	r22, r19
    2ece:	aa 27       	eor	r26, r26
    2ed0:	f0 0d       	add	r31, r0
    2ed2:	b1 1d       	adc	r27, r1
    2ed4:	aa 1f       	adc	r26, r26
    2ed6:	64 9f       	mul	r22, r20
    2ed8:	66 27       	eor	r22, r22
    2eda:	b0 0d       	add	r27, r0
    2edc:	a1 1d       	adc	r26, r1
    2ede:	66 1f       	adc	r22, r22
    2ee0:	82 9f       	mul	r24, r18
    2ee2:	22 27       	eor	r18, r18
    2ee4:	b0 0d       	add	r27, r0
    2ee6:	a1 1d       	adc	r26, r1
    2ee8:	62 1f       	adc	r22, r18
    2eea:	73 9f       	mul	r23, r19
    2eec:	b0 0d       	add	r27, r0
    2eee:	a1 1d       	adc	r26, r1
    2ef0:	62 1f       	adc	r22, r18
    2ef2:	83 9f       	mul	r24, r19
    2ef4:	a0 0d       	add	r26, r0
    2ef6:	61 1d       	adc	r22, r1
    2ef8:	22 1f       	adc	r18, r18
    2efa:	74 9f       	mul	r23, r20
    2efc:	33 27       	eor	r19, r19
    2efe:	a0 0d       	add	r26, r0
    2f00:	61 1d       	adc	r22, r1
    2f02:	23 1f       	adc	r18, r19
    2f04:	84 9f       	mul	r24, r20
    2f06:	60 0d       	add	r22, r0
    2f08:	21 1d       	adc	r18, r1
    2f0a:	82 2f       	mov	r24, r18
    2f0c:	76 2f       	mov	r23, r22
    2f0e:	6a 2f       	mov	r22, r26
    2f10:	11 24       	eor	r1, r1
    2f12:	9f 57       	subi	r25, 0x7F	; 127
    2f14:	50 40       	sbci	r21, 0x00	; 0
    2f16:	8a f0       	brmi	.+34     	; 0x2f3a <__mulsf3_pse+0x84>
    2f18:	e1 f0       	breq	.+56     	; 0x2f52 <__mulsf3_pse+0x9c>
    2f1a:	88 23       	and	r24, r24
    2f1c:	4a f0       	brmi	.+18     	; 0x2f30 <__mulsf3_pse+0x7a>
    2f1e:	ee 0f       	add	r30, r30
    2f20:	ff 1f       	adc	r31, r31
    2f22:	bb 1f       	adc	r27, r27
    2f24:	66 1f       	adc	r22, r22
    2f26:	77 1f       	adc	r23, r23
    2f28:	88 1f       	adc	r24, r24
    2f2a:	91 50       	subi	r25, 0x01	; 1
    2f2c:	50 40       	sbci	r21, 0x00	; 0
    2f2e:	a9 f7       	brne	.-22     	; 0x2f1a <__mulsf3_pse+0x64>
    2f30:	9e 3f       	cpi	r25, 0xFE	; 254
    2f32:	51 05       	cpc	r21, r1
    2f34:	70 f0       	brcs	.+28     	; 0x2f52 <__mulsf3_pse+0x9c>
    2f36:	60 cf       	rjmp	.-320    	; 0x2df8 <__fp_inf>
    2f38:	aa cf       	rjmp	.-172    	; 0x2e8e <__fp_szero>
    2f3a:	5f 3f       	cpi	r21, 0xFF	; 255
    2f3c:	ec f3       	brlt	.-6      	; 0x2f38 <__mulsf3_pse+0x82>
    2f3e:	98 3e       	cpi	r25, 0xE8	; 232
    2f40:	dc f3       	brlt	.-10     	; 0x2f38 <__mulsf3_pse+0x82>
    2f42:	86 95       	lsr	r24
    2f44:	77 95       	ror	r23
    2f46:	67 95       	ror	r22
    2f48:	b7 95       	ror	r27
    2f4a:	f7 95       	ror	r31
    2f4c:	e7 95       	ror	r30
    2f4e:	9f 5f       	subi	r25, 0xFF	; 255
    2f50:	c1 f7       	brne	.-16     	; 0x2f42 <__mulsf3_pse+0x8c>
    2f52:	fe 2b       	or	r31, r30
    2f54:	88 0f       	add	r24, r24
    2f56:	91 1d       	adc	r25, r1
    2f58:	96 95       	lsr	r25
    2f5a:	87 95       	ror	r24
    2f5c:	97 f9       	bld	r25, 7
    2f5e:	08 95       	ret

00002f60 <vfprintf>:
    2f60:	2f 92       	push	r2
    2f62:	3f 92       	push	r3
    2f64:	4f 92       	push	r4
    2f66:	5f 92       	push	r5
    2f68:	6f 92       	push	r6
    2f6a:	7f 92       	push	r7
    2f6c:	8f 92       	push	r8
    2f6e:	9f 92       	push	r9
    2f70:	af 92       	push	r10
    2f72:	bf 92       	push	r11
    2f74:	cf 92       	push	r12
    2f76:	df 92       	push	r13
    2f78:	ef 92       	push	r14
    2f7a:	ff 92       	push	r15
    2f7c:	0f 93       	push	r16
    2f7e:	1f 93       	push	r17
    2f80:	cf 93       	push	r28
    2f82:	df 93       	push	r29
    2f84:	cd b7       	in	r28, 0x3d	; 61
    2f86:	de b7       	in	r29, 0x3e	; 62
    2f88:	60 97       	sbiw	r28, 0x10	; 16
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	de bf       	out	0x3e, r29	; 62
    2f8e:	7c 01       	movw	r14, r24
    2f90:	1b 01       	movw	r2, r22
    2f92:	6a 01       	movw	r12, r20
    2f94:	fc 01       	movw	r30, r24
    2f96:	16 82       	std	Z+6, r1	; 0x06
    2f98:	17 82       	std	Z+7, r1	; 0x07
    2f9a:	83 81       	ldd	r24, Z+3	; 0x03
    2f9c:	81 ff       	sbrs	r24, 1
    2f9e:	2a c3       	rjmp	.+1620   	; 0x35f4 <vfprintf+0x694>
    2fa0:	9e 01       	movw	r18, r28
    2fa2:	2f 5f       	subi	r18, 0xFF	; 255
    2fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa6:	39 01       	movw	r6, r18
    2fa8:	f7 01       	movw	r30, r14
    2faa:	93 81       	ldd	r25, Z+3	; 0x03
    2fac:	f1 01       	movw	r30, r2
    2fae:	93 fd       	sbrc	r25, 3
    2fb0:	85 91       	lpm	r24, Z+
    2fb2:	93 ff       	sbrs	r25, 3
    2fb4:	81 91       	ld	r24, Z+
    2fb6:	1f 01       	movw	r2, r30
    2fb8:	88 23       	and	r24, r24
    2fba:	09 f4       	brne	.+2      	; 0x2fbe <vfprintf+0x5e>
    2fbc:	17 c3       	rjmp	.+1582   	; 0x35ec <vfprintf+0x68c>
    2fbe:	85 32       	cpi	r24, 0x25	; 37
    2fc0:	39 f4       	brne	.+14     	; 0x2fd0 <vfprintf+0x70>
    2fc2:	93 fd       	sbrc	r25, 3
    2fc4:	85 91       	lpm	r24, Z+
    2fc6:	93 ff       	sbrs	r25, 3
    2fc8:	81 91       	ld	r24, Z+
    2fca:	1f 01       	movw	r2, r30
    2fcc:	85 32       	cpi	r24, 0x25	; 37
    2fce:	31 f4       	brne	.+12     	; 0x2fdc <vfprintf+0x7c>
    2fd0:	b7 01       	movw	r22, r14
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	b2 d5       	rcall	.+2916   	; 0x3b3a <fputc>
    2fd6:	56 01       	movw	r10, r12
    2fd8:	65 01       	movw	r12, r10
    2fda:	e6 cf       	rjmp	.-52     	; 0x2fa8 <vfprintf+0x48>
    2fdc:	10 e0       	ldi	r17, 0x00	; 0
    2fde:	51 2c       	mov	r5, r1
    2fe0:	91 2c       	mov	r9, r1
    2fe2:	ff e1       	ldi	r31, 0x1F	; 31
    2fe4:	f9 15       	cp	r31, r9
    2fe6:	d8 f0       	brcs	.+54     	; 0x301e <vfprintf+0xbe>
    2fe8:	8b 32       	cpi	r24, 0x2B	; 43
    2fea:	79 f0       	breq	.+30     	; 0x300a <vfprintf+0xaa>
    2fec:	38 f4       	brcc	.+14     	; 0x2ffc <vfprintf+0x9c>
    2fee:	80 32       	cpi	r24, 0x20	; 32
    2ff0:	79 f0       	breq	.+30     	; 0x3010 <vfprintf+0xb0>
    2ff2:	83 32       	cpi	r24, 0x23	; 35
    2ff4:	a1 f4       	brne	.+40     	; 0x301e <vfprintf+0xbe>
    2ff6:	f9 2d       	mov	r31, r9
    2ff8:	f0 61       	ori	r31, 0x10	; 16
    2ffa:	2e c0       	rjmp	.+92     	; 0x3058 <vfprintf+0xf8>
    2ffc:	8d 32       	cpi	r24, 0x2D	; 45
    2ffe:	61 f0       	breq	.+24     	; 0x3018 <vfprintf+0xb8>
    3000:	80 33       	cpi	r24, 0x30	; 48
    3002:	69 f4       	brne	.+26     	; 0x301e <vfprintf+0xbe>
    3004:	29 2d       	mov	r18, r9
    3006:	21 60       	ori	r18, 0x01	; 1
    3008:	2d c0       	rjmp	.+90     	; 0x3064 <vfprintf+0x104>
    300a:	39 2d       	mov	r19, r9
    300c:	32 60       	ori	r19, 0x02	; 2
    300e:	93 2e       	mov	r9, r19
    3010:	89 2d       	mov	r24, r9
    3012:	84 60       	ori	r24, 0x04	; 4
    3014:	98 2e       	mov	r9, r24
    3016:	2a c0       	rjmp	.+84     	; 0x306c <vfprintf+0x10c>
    3018:	e9 2d       	mov	r30, r9
    301a:	e8 60       	ori	r30, 0x08	; 8
    301c:	15 c0       	rjmp	.+42     	; 0x3048 <vfprintf+0xe8>
    301e:	97 fc       	sbrc	r9, 7
    3020:	2d c0       	rjmp	.+90     	; 0x307c <vfprintf+0x11c>
    3022:	20 ed       	ldi	r18, 0xD0	; 208
    3024:	28 0f       	add	r18, r24
    3026:	2a 30       	cpi	r18, 0x0A	; 10
    3028:	88 f4       	brcc	.+34     	; 0x304c <vfprintf+0xec>
    302a:	96 fe       	sbrs	r9, 6
    302c:	06 c0       	rjmp	.+12     	; 0x303a <vfprintf+0xda>
    302e:	3a e0       	ldi	r19, 0x0A	; 10
    3030:	13 9f       	mul	r17, r19
    3032:	20 0d       	add	r18, r0
    3034:	11 24       	eor	r1, r1
    3036:	12 2f       	mov	r17, r18
    3038:	19 c0       	rjmp	.+50     	; 0x306c <vfprintf+0x10c>
    303a:	8a e0       	ldi	r24, 0x0A	; 10
    303c:	58 9e       	mul	r5, r24
    303e:	20 0d       	add	r18, r0
    3040:	11 24       	eor	r1, r1
    3042:	52 2e       	mov	r5, r18
    3044:	e9 2d       	mov	r30, r9
    3046:	e0 62       	ori	r30, 0x20	; 32
    3048:	9e 2e       	mov	r9, r30
    304a:	10 c0       	rjmp	.+32     	; 0x306c <vfprintf+0x10c>
    304c:	8e 32       	cpi	r24, 0x2E	; 46
    304e:	31 f4       	brne	.+12     	; 0x305c <vfprintf+0xfc>
    3050:	96 fc       	sbrc	r9, 6
    3052:	cc c2       	rjmp	.+1432   	; 0x35ec <vfprintf+0x68c>
    3054:	f9 2d       	mov	r31, r9
    3056:	f0 64       	ori	r31, 0x40	; 64
    3058:	9f 2e       	mov	r9, r31
    305a:	08 c0       	rjmp	.+16     	; 0x306c <vfprintf+0x10c>
    305c:	8c 36       	cpi	r24, 0x6C	; 108
    305e:	21 f4       	brne	.+8      	; 0x3068 <vfprintf+0x108>
    3060:	29 2d       	mov	r18, r9
    3062:	20 68       	ori	r18, 0x80	; 128
    3064:	92 2e       	mov	r9, r18
    3066:	02 c0       	rjmp	.+4      	; 0x306c <vfprintf+0x10c>
    3068:	88 36       	cpi	r24, 0x68	; 104
    306a:	41 f4       	brne	.+16     	; 0x307c <vfprintf+0x11c>
    306c:	f1 01       	movw	r30, r2
    306e:	93 fd       	sbrc	r25, 3
    3070:	85 91       	lpm	r24, Z+
    3072:	93 ff       	sbrs	r25, 3
    3074:	81 91       	ld	r24, Z+
    3076:	1f 01       	movw	r2, r30
    3078:	81 11       	cpse	r24, r1
    307a:	b3 cf       	rjmp	.-154    	; 0x2fe2 <vfprintf+0x82>
    307c:	9b eb       	ldi	r25, 0xBB	; 187
    307e:	98 0f       	add	r25, r24
    3080:	93 30       	cpi	r25, 0x03	; 3
    3082:	20 f4       	brcc	.+8      	; 0x308c <vfprintf+0x12c>
    3084:	99 2d       	mov	r25, r9
    3086:	90 61       	ori	r25, 0x10	; 16
    3088:	80 5e       	subi	r24, 0xE0	; 224
    308a:	07 c0       	rjmp	.+14     	; 0x309a <vfprintf+0x13a>
    308c:	9b e9       	ldi	r25, 0x9B	; 155
    308e:	98 0f       	add	r25, r24
    3090:	93 30       	cpi	r25, 0x03	; 3
    3092:	08 f0       	brcs	.+2      	; 0x3096 <vfprintf+0x136>
    3094:	59 c1       	rjmp	.+690    	; 0x3348 <vfprintf+0x3e8>
    3096:	99 2d       	mov	r25, r9
    3098:	9f 7e       	andi	r25, 0xEF	; 239
    309a:	96 ff       	sbrs	r25, 6
    309c:	16 e0       	ldi	r17, 0x06	; 6
    309e:	9f 73       	andi	r25, 0x3F	; 63
    30a0:	99 2e       	mov	r9, r25
    30a2:	85 36       	cpi	r24, 0x65	; 101
    30a4:	19 f4       	brne	.+6      	; 0x30ac <vfprintf+0x14c>
    30a6:	90 64       	ori	r25, 0x40	; 64
    30a8:	99 2e       	mov	r9, r25
    30aa:	08 c0       	rjmp	.+16     	; 0x30bc <vfprintf+0x15c>
    30ac:	86 36       	cpi	r24, 0x66	; 102
    30ae:	21 f4       	brne	.+8      	; 0x30b8 <vfprintf+0x158>
    30b0:	39 2f       	mov	r19, r25
    30b2:	30 68       	ori	r19, 0x80	; 128
    30b4:	93 2e       	mov	r9, r19
    30b6:	02 c0       	rjmp	.+4      	; 0x30bc <vfprintf+0x15c>
    30b8:	11 11       	cpse	r17, r1
    30ba:	11 50       	subi	r17, 0x01	; 1
    30bc:	97 fe       	sbrs	r9, 7
    30be:	07 c0       	rjmp	.+14     	; 0x30ce <vfprintf+0x16e>
    30c0:	1c 33       	cpi	r17, 0x3C	; 60
    30c2:	50 f4       	brcc	.+20     	; 0x30d8 <vfprintf+0x178>
    30c4:	44 24       	eor	r4, r4
    30c6:	43 94       	inc	r4
    30c8:	41 0e       	add	r4, r17
    30ca:	27 e0       	ldi	r18, 0x07	; 7
    30cc:	0b c0       	rjmp	.+22     	; 0x30e4 <vfprintf+0x184>
    30ce:	18 30       	cpi	r17, 0x08	; 8
    30d0:	38 f0       	brcs	.+14     	; 0x30e0 <vfprintf+0x180>
    30d2:	27 e0       	ldi	r18, 0x07	; 7
    30d4:	17 e0       	ldi	r17, 0x07	; 7
    30d6:	05 c0       	rjmp	.+10     	; 0x30e2 <vfprintf+0x182>
    30d8:	27 e0       	ldi	r18, 0x07	; 7
    30da:	9c e3       	ldi	r25, 0x3C	; 60
    30dc:	49 2e       	mov	r4, r25
    30de:	02 c0       	rjmp	.+4      	; 0x30e4 <vfprintf+0x184>
    30e0:	21 2f       	mov	r18, r17
    30e2:	41 2c       	mov	r4, r1
    30e4:	56 01       	movw	r10, r12
    30e6:	84 e0       	ldi	r24, 0x04	; 4
    30e8:	a8 0e       	add	r10, r24
    30ea:	b1 1c       	adc	r11, r1
    30ec:	f6 01       	movw	r30, r12
    30ee:	60 81       	ld	r22, Z
    30f0:	71 81       	ldd	r23, Z+1	; 0x01
    30f2:	82 81       	ldd	r24, Z+2	; 0x02
    30f4:	93 81       	ldd	r25, Z+3	; 0x03
    30f6:	04 2d       	mov	r16, r4
    30f8:	a3 01       	movw	r20, r6
    30fa:	e7 d3       	rcall	.+1998   	; 0x38ca <__ftoa_engine>
    30fc:	6c 01       	movw	r12, r24
    30fe:	f9 81       	ldd	r31, Y+1	; 0x01
    3100:	fc 87       	std	Y+12, r31	; 0x0c
    3102:	f0 ff       	sbrs	r31, 0
    3104:	02 c0       	rjmp	.+4      	; 0x310a <vfprintf+0x1aa>
    3106:	f3 ff       	sbrs	r31, 3
    3108:	06 c0       	rjmp	.+12     	; 0x3116 <vfprintf+0x1b6>
    310a:	91 fc       	sbrc	r9, 1
    310c:	06 c0       	rjmp	.+12     	; 0x311a <vfprintf+0x1ba>
    310e:	92 fe       	sbrs	r9, 2
    3110:	06 c0       	rjmp	.+12     	; 0x311e <vfprintf+0x1be>
    3112:	00 e2       	ldi	r16, 0x20	; 32
    3114:	05 c0       	rjmp	.+10     	; 0x3120 <vfprintf+0x1c0>
    3116:	0d e2       	ldi	r16, 0x2D	; 45
    3118:	03 c0       	rjmp	.+6      	; 0x3120 <vfprintf+0x1c0>
    311a:	0b e2       	ldi	r16, 0x2B	; 43
    311c:	01 c0       	rjmp	.+2      	; 0x3120 <vfprintf+0x1c0>
    311e:	00 e0       	ldi	r16, 0x00	; 0
    3120:	8c 85       	ldd	r24, Y+12	; 0x0c
    3122:	8c 70       	andi	r24, 0x0C	; 12
    3124:	19 f0       	breq	.+6      	; 0x312c <vfprintf+0x1cc>
    3126:	01 11       	cpse	r16, r1
    3128:	43 c2       	rjmp	.+1158   	; 0x35b0 <vfprintf+0x650>
    312a:	80 c2       	rjmp	.+1280   	; 0x362c <vfprintf+0x6cc>
    312c:	97 fe       	sbrs	r9, 7
    312e:	10 c0       	rjmp	.+32     	; 0x3150 <vfprintf+0x1f0>
    3130:	4c 0c       	add	r4, r12
    3132:	fc 85       	ldd	r31, Y+12	; 0x0c
    3134:	f4 ff       	sbrs	r31, 4
    3136:	04 c0       	rjmp	.+8      	; 0x3140 <vfprintf+0x1e0>
    3138:	8a 81       	ldd	r24, Y+2	; 0x02
    313a:	81 33       	cpi	r24, 0x31	; 49
    313c:	09 f4       	brne	.+2      	; 0x3140 <vfprintf+0x1e0>
    313e:	4a 94       	dec	r4
    3140:	14 14       	cp	r1, r4
    3142:	74 f5       	brge	.+92     	; 0x31a0 <vfprintf+0x240>
    3144:	28 e0       	ldi	r18, 0x08	; 8
    3146:	24 15       	cp	r18, r4
    3148:	78 f5       	brcc	.+94     	; 0x31a8 <vfprintf+0x248>
    314a:	88 e0       	ldi	r24, 0x08	; 8
    314c:	48 2e       	mov	r4, r24
    314e:	2c c0       	rjmp	.+88     	; 0x31a8 <vfprintf+0x248>
    3150:	96 fc       	sbrc	r9, 6
    3152:	2a c0       	rjmp	.+84     	; 0x31a8 <vfprintf+0x248>
    3154:	81 2f       	mov	r24, r17
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	8c 15       	cp	r24, r12
    315a:	9d 05       	cpc	r25, r13
    315c:	9c f0       	brlt	.+38     	; 0x3184 <vfprintf+0x224>
    315e:	3c ef       	ldi	r19, 0xFC	; 252
    3160:	c3 16       	cp	r12, r19
    3162:	3f ef       	ldi	r19, 0xFF	; 255
    3164:	d3 06       	cpc	r13, r19
    3166:	74 f0       	brlt	.+28     	; 0x3184 <vfprintf+0x224>
    3168:	89 2d       	mov	r24, r9
    316a:	80 68       	ori	r24, 0x80	; 128
    316c:	98 2e       	mov	r9, r24
    316e:	0a c0       	rjmp	.+20     	; 0x3184 <vfprintf+0x224>
    3170:	e2 e0       	ldi	r30, 0x02	; 2
    3172:	f0 e0       	ldi	r31, 0x00	; 0
    3174:	ec 0f       	add	r30, r28
    3176:	fd 1f       	adc	r31, r29
    3178:	e1 0f       	add	r30, r17
    317a:	f1 1d       	adc	r31, r1
    317c:	80 81       	ld	r24, Z
    317e:	80 33       	cpi	r24, 0x30	; 48
    3180:	19 f4       	brne	.+6      	; 0x3188 <vfprintf+0x228>
    3182:	11 50       	subi	r17, 0x01	; 1
    3184:	11 11       	cpse	r17, r1
    3186:	f4 cf       	rjmp	.-24     	; 0x3170 <vfprintf+0x210>
    3188:	97 fe       	sbrs	r9, 7
    318a:	0e c0       	rjmp	.+28     	; 0x31a8 <vfprintf+0x248>
    318c:	44 24       	eor	r4, r4
    318e:	43 94       	inc	r4
    3190:	41 0e       	add	r4, r17
    3192:	81 2f       	mov	r24, r17
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	c8 16       	cp	r12, r24
    3198:	d9 06       	cpc	r13, r25
    319a:	2c f4       	brge	.+10     	; 0x31a6 <vfprintf+0x246>
    319c:	1c 19       	sub	r17, r12
    319e:	04 c0       	rjmp	.+8      	; 0x31a8 <vfprintf+0x248>
    31a0:	44 24       	eor	r4, r4
    31a2:	43 94       	inc	r4
    31a4:	01 c0       	rjmp	.+2      	; 0x31a8 <vfprintf+0x248>
    31a6:	10 e0       	ldi	r17, 0x00	; 0
    31a8:	97 fe       	sbrs	r9, 7
    31aa:	06 c0       	rjmp	.+12     	; 0x31b8 <vfprintf+0x258>
    31ac:	1c 14       	cp	r1, r12
    31ae:	1d 04       	cpc	r1, r13
    31b0:	34 f4       	brge	.+12     	; 0x31be <vfprintf+0x25e>
    31b2:	c6 01       	movw	r24, r12
    31b4:	01 96       	adiw	r24, 0x01	; 1
    31b6:	05 c0       	rjmp	.+10     	; 0x31c2 <vfprintf+0x262>
    31b8:	85 e0       	ldi	r24, 0x05	; 5
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	02 c0       	rjmp	.+4      	; 0x31c2 <vfprintf+0x262>
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	01 11       	cpse	r16, r1
    31c4:	01 96       	adiw	r24, 0x01	; 1
    31c6:	11 23       	and	r17, r17
    31c8:	31 f0       	breq	.+12     	; 0x31d6 <vfprintf+0x276>
    31ca:	21 2f       	mov	r18, r17
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	2f 5f       	subi	r18, 0xFF	; 255
    31d0:	3f 4f       	sbci	r19, 0xFF	; 255
    31d2:	82 0f       	add	r24, r18
    31d4:	93 1f       	adc	r25, r19
    31d6:	25 2d       	mov	r18, r5
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	82 17       	cp	r24, r18
    31dc:	93 07       	cpc	r25, r19
    31de:	14 f4       	brge	.+4      	; 0x31e4 <vfprintf+0x284>
    31e0:	58 1a       	sub	r5, r24
    31e2:	01 c0       	rjmp	.+2      	; 0x31e6 <vfprintf+0x286>
    31e4:	51 2c       	mov	r5, r1
    31e6:	89 2d       	mov	r24, r9
    31e8:	89 70       	andi	r24, 0x09	; 9
    31ea:	41 f4       	brne	.+16     	; 0x31fc <vfprintf+0x29c>
    31ec:	55 20       	and	r5, r5
    31ee:	31 f0       	breq	.+12     	; 0x31fc <vfprintf+0x29c>
    31f0:	b7 01       	movw	r22, r14
    31f2:	80 e2       	ldi	r24, 0x20	; 32
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	a1 d4       	rcall	.+2370   	; 0x3b3a <fputc>
    31f8:	5a 94       	dec	r5
    31fa:	f8 cf       	rjmp	.-16     	; 0x31ec <vfprintf+0x28c>
    31fc:	00 23       	and	r16, r16
    31fe:	21 f0       	breq	.+8      	; 0x3208 <vfprintf+0x2a8>
    3200:	b7 01       	movw	r22, r14
    3202:	80 2f       	mov	r24, r16
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	99 d4       	rcall	.+2354   	; 0x3b3a <fputc>
    3208:	93 fc       	sbrc	r9, 3
    320a:	08 c0       	rjmp	.+16     	; 0x321c <vfprintf+0x2bc>
    320c:	55 20       	and	r5, r5
    320e:	31 f0       	breq	.+12     	; 0x321c <vfprintf+0x2bc>
    3210:	b7 01       	movw	r22, r14
    3212:	80 e3       	ldi	r24, 0x30	; 48
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	91 d4       	rcall	.+2338   	; 0x3b3a <fputc>
    3218:	5a 94       	dec	r5
    321a:	f8 cf       	rjmp	.-16     	; 0x320c <vfprintf+0x2ac>
    321c:	97 fe       	sbrs	r9, 7
    321e:	4a c0       	rjmp	.+148    	; 0x32b4 <vfprintf+0x354>
    3220:	46 01       	movw	r8, r12
    3222:	d7 fe       	sbrs	r13, 7
    3224:	02 c0       	rjmp	.+4      	; 0x322a <vfprintf+0x2ca>
    3226:	81 2c       	mov	r8, r1
    3228:	91 2c       	mov	r9, r1
    322a:	c6 01       	movw	r24, r12
    322c:	88 19       	sub	r24, r8
    322e:	99 09       	sbc	r25, r9
    3230:	f3 01       	movw	r30, r6
    3232:	e8 0f       	add	r30, r24
    3234:	f9 1f       	adc	r31, r25
    3236:	ed 87       	std	Y+13, r30	; 0x0d
    3238:	fe 87       	std	Y+14, r31	; 0x0e
    323a:	96 01       	movw	r18, r12
    323c:	24 19       	sub	r18, r4
    323e:	31 09       	sbc	r19, r1
    3240:	2f 87       	std	Y+15, r18	; 0x0f
    3242:	38 8b       	std	Y+16, r19	; 0x10
    3244:	01 2f       	mov	r16, r17
    3246:	10 e0       	ldi	r17, 0x00	; 0
    3248:	11 95       	neg	r17
    324a:	01 95       	neg	r16
    324c:	11 09       	sbc	r17, r1
    324e:	3f ef       	ldi	r19, 0xFF	; 255
    3250:	83 16       	cp	r8, r19
    3252:	93 06       	cpc	r9, r19
    3254:	21 f4       	brne	.+8      	; 0x325e <vfprintf+0x2fe>
    3256:	b7 01       	movw	r22, r14
    3258:	8e e2       	ldi	r24, 0x2E	; 46
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	6e d4       	rcall	.+2268   	; 0x3b3a <fputc>
    325e:	c8 14       	cp	r12, r8
    3260:	d9 04       	cpc	r13, r9
    3262:	4c f0       	brlt	.+18     	; 0x3276 <vfprintf+0x316>
    3264:	8f 85       	ldd	r24, Y+15	; 0x0f
    3266:	98 89       	ldd	r25, Y+16	; 0x10
    3268:	88 15       	cp	r24, r8
    326a:	99 05       	cpc	r25, r9
    326c:	24 f4       	brge	.+8      	; 0x3276 <vfprintf+0x316>
    326e:	ed 85       	ldd	r30, Y+13	; 0x0d
    3270:	fe 85       	ldd	r31, Y+14	; 0x0e
    3272:	81 81       	ldd	r24, Z+1	; 0x01
    3274:	01 c0       	rjmp	.+2      	; 0x3278 <vfprintf+0x318>
    3276:	80 e3       	ldi	r24, 0x30	; 48
    3278:	f1 e0       	ldi	r31, 0x01	; 1
    327a:	8f 1a       	sub	r8, r31
    327c:	91 08       	sbc	r9, r1
    327e:	2d 85       	ldd	r18, Y+13	; 0x0d
    3280:	3e 85       	ldd	r19, Y+14	; 0x0e
    3282:	2f 5f       	subi	r18, 0xFF	; 255
    3284:	3f 4f       	sbci	r19, 0xFF	; 255
    3286:	2d 87       	std	Y+13, r18	; 0x0d
    3288:	3e 87       	std	Y+14, r19	; 0x0e
    328a:	80 16       	cp	r8, r16
    328c:	91 06       	cpc	r9, r17
    328e:	24 f0       	brlt	.+8      	; 0x3298 <vfprintf+0x338>
    3290:	b7 01       	movw	r22, r14
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	52 d4       	rcall	.+2212   	; 0x3b3a <fputc>
    3296:	db cf       	rjmp	.-74     	; 0x324e <vfprintf+0x2ee>
    3298:	c8 14       	cp	r12, r8
    329a:	d9 04       	cpc	r13, r9
    329c:	41 f4       	brne	.+16     	; 0x32ae <vfprintf+0x34e>
    329e:	9a 81       	ldd	r25, Y+2	; 0x02
    32a0:	96 33       	cpi	r25, 0x36	; 54
    32a2:	20 f4       	brcc	.+8      	; 0x32ac <vfprintf+0x34c>
    32a4:	95 33       	cpi	r25, 0x35	; 53
    32a6:	19 f4       	brne	.+6      	; 0x32ae <vfprintf+0x34e>
    32a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    32aa:	34 ff       	sbrs	r19, 4
    32ac:	81 e3       	ldi	r24, 0x31	; 49
    32ae:	b7 01       	movw	r22, r14
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	48 c0       	rjmp	.+144    	; 0x3344 <vfprintf+0x3e4>
    32b4:	8a 81       	ldd	r24, Y+2	; 0x02
    32b6:	81 33       	cpi	r24, 0x31	; 49
    32b8:	19 f0       	breq	.+6      	; 0x32c0 <vfprintf+0x360>
    32ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    32bc:	9f 7e       	andi	r25, 0xEF	; 239
    32be:	9c 87       	std	Y+12, r25	; 0x0c
    32c0:	b7 01       	movw	r22, r14
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	3a d4       	rcall	.+2164   	; 0x3b3a <fputc>
    32c6:	11 11       	cpse	r17, r1
    32c8:	05 c0       	rjmp	.+10     	; 0x32d4 <vfprintf+0x374>
    32ca:	94 fc       	sbrc	r9, 4
    32cc:	16 c0       	rjmp	.+44     	; 0x32fa <vfprintf+0x39a>
    32ce:	85 e6       	ldi	r24, 0x65	; 101
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	15 c0       	rjmp	.+42     	; 0x32fe <vfprintf+0x39e>
    32d4:	b7 01       	movw	r22, r14
    32d6:	8e e2       	ldi	r24, 0x2E	; 46
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	2f d4       	rcall	.+2142   	; 0x3b3a <fputc>
    32dc:	1e 5f       	subi	r17, 0xFE	; 254
    32de:	82 e0       	ldi	r24, 0x02	; 2
    32e0:	01 e0       	ldi	r16, 0x01	; 1
    32e2:	08 0f       	add	r16, r24
    32e4:	f3 01       	movw	r30, r6
    32e6:	e8 0f       	add	r30, r24
    32e8:	f1 1d       	adc	r31, r1
    32ea:	80 81       	ld	r24, Z
    32ec:	b7 01       	movw	r22, r14
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	24 d4       	rcall	.+2120   	; 0x3b3a <fputc>
    32f2:	80 2f       	mov	r24, r16
    32f4:	01 13       	cpse	r16, r17
    32f6:	f4 cf       	rjmp	.-24     	; 0x32e0 <vfprintf+0x380>
    32f8:	e8 cf       	rjmp	.-48     	; 0x32ca <vfprintf+0x36a>
    32fa:	85 e4       	ldi	r24, 0x45	; 69
    32fc:	90 e0       	ldi	r25, 0x00	; 0
    32fe:	b7 01       	movw	r22, r14
    3300:	1c d4       	rcall	.+2104   	; 0x3b3a <fputc>
    3302:	d7 fc       	sbrc	r13, 7
    3304:	06 c0       	rjmp	.+12     	; 0x3312 <vfprintf+0x3b2>
    3306:	c1 14       	cp	r12, r1
    3308:	d1 04       	cpc	r13, r1
    330a:	41 f4       	brne	.+16     	; 0x331c <vfprintf+0x3bc>
    330c:	ec 85       	ldd	r30, Y+12	; 0x0c
    330e:	e4 ff       	sbrs	r30, 4
    3310:	05 c0       	rjmp	.+10     	; 0x331c <vfprintf+0x3bc>
    3312:	d1 94       	neg	r13
    3314:	c1 94       	neg	r12
    3316:	d1 08       	sbc	r13, r1
    3318:	8d e2       	ldi	r24, 0x2D	; 45
    331a:	01 c0       	rjmp	.+2      	; 0x331e <vfprintf+0x3be>
    331c:	8b e2       	ldi	r24, 0x2B	; 43
    331e:	b7 01       	movw	r22, r14
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	0b d4       	rcall	.+2070   	; 0x3b3a <fputc>
    3324:	80 e3       	ldi	r24, 0x30	; 48
    3326:	2a e0       	ldi	r18, 0x0A	; 10
    3328:	c2 16       	cp	r12, r18
    332a:	d1 04       	cpc	r13, r1
    332c:	2c f0       	brlt	.+10     	; 0x3338 <vfprintf+0x3d8>
    332e:	8f 5f       	subi	r24, 0xFF	; 255
    3330:	fa e0       	ldi	r31, 0x0A	; 10
    3332:	cf 1a       	sub	r12, r31
    3334:	d1 08       	sbc	r13, r1
    3336:	f7 cf       	rjmp	.-18     	; 0x3326 <vfprintf+0x3c6>
    3338:	b7 01       	movw	r22, r14
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	fe d3       	rcall	.+2044   	; 0x3b3a <fputc>
    333e:	b7 01       	movw	r22, r14
    3340:	c6 01       	movw	r24, r12
    3342:	c0 96       	adiw	r24, 0x30	; 48
    3344:	fa d3       	rcall	.+2036   	; 0x3b3a <fputc>
    3346:	49 c1       	rjmp	.+658    	; 0x35da <vfprintf+0x67a>
    3348:	83 36       	cpi	r24, 0x63	; 99
    334a:	31 f0       	breq	.+12     	; 0x3358 <vfprintf+0x3f8>
    334c:	83 37       	cpi	r24, 0x73	; 115
    334e:	79 f0       	breq	.+30     	; 0x336e <vfprintf+0x40e>
    3350:	83 35       	cpi	r24, 0x53	; 83
    3352:	09 f0       	breq	.+2      	; 0x3356 <vfprintf+0x3f6>
    3354:	52 c0       	rjmp	.+164    	; 0x33fa <vfprintf+0x49a>
    3356:	1f c0       	rjmp	.+62     	; 0x3396 <vfprintf+0x436>
    3358:	56 01       	movw	r10, r12
    335a:	32 e0       	ldi	r19, 0x02	; 2
    335c:	a3 0e       	add	r10, r19
    335e:	b1 1c       	adc	r11, r1
    3360:	f6 01       	movw	r30, r12
    3362:	80 81       	ld	r24, Z
    3364:	89 83       	std	Y+1, r24	; 0x01
    3366:	01 e0       	ldi	r16, 0x01	; 1
    3368:	10 e0       	ldi	r17, 0x00	; 0
    336a:	63 01       	movw	r12, r6
    336c:	11 c0       	rjmp	.+34     	; 0x3390 <vfprintf+0x430>
    336e:	56 01       	movw	r10, r12
    3370:	f2 e0       	ldi	r31, 0x02	; 2
    3372:	af 0e       	add	r10, r31
    3374:	b1 1c       	adc	r11, r1
    3376:	f6 01       	movw	r30, r12
    3378:	c0 80       	ld	r12, Z
    337a:	d1 80       	ldd	r13, Z+1	; 0x01
    337c:	96 fe       	sbrs	r9, 6
    337e:	03 c0       	rjmp	.+6      	; 0x3386 <vfprintf+0x426>
    3380:	61 2f       	mov	r22, r17
    3382:	70 e0       	ldi	r23, 0x00	; 0
    3384:	02 c0       	rjmp	.+4      	; 0x338a <vfprintf+0x42a>
    3386:	6f ef       	ldi	r22, 0xFF	; 255
    3388:	7f ef       	ldi	r23, 0xFF	; 255
    338a:	c6 01       	movw	r24, r12
    338c:	81 d3       	rcall	.+1794   	; 0x3a90 <strnlen>
    338e:	8c 01       	movw	r16, r24
    3390:	f9 2d       	mov	r31, r9
    3392:	ff 77       	andi	r31, 0x7F	; 127
    3394:	13 c0       	rjmp	.+38     	; 0x33bc <vfprintf+0x45c>
    3396:	56 01       	movw	r10, r12
    3398:	22 e0       	ldi	r18, 0x02	; 2
    339a:	a2 0e       	add	r10, r18
    339c:	b1 1c       	adc	r11, r1
    339e:	f6 01       	movw	r30, r12
    33a0:	c0 80       	ld	r12, Z
    33a2:	d1 80       	ldd	r13, Z+1	; 0x01
    33a4:	96 fe       	sbrs	r9, 6
    33a6:	03 c0       	rjmp	.+6      	; 0x33ae <vfprintf+0x44e>
    33a8:	61 2f       	mov	r22, r17
    33aa:	70 e0       	ldi	r23, 0x00	; 0
    33ac:	02 c0       	rjmp	.+4      	; 0x33b2 <vfprintf+0x452>
    33ae:	6f ef       	ldi	r22, 0xFF	; 255
    33b0:	7f ef       	ldi	r23, 0xFF	; 255
    33b2:	c6 01       	movw	r24, r12
    33b4:	62 d3       	rcall	.+1732   	; 0x3a7a <strnlen_P>
    33b6:	8c 01       	movw	r16, r24
    33b8:	f9 2d       	mov	r31, r9
    33ba:	f0 68       	ori	r31, 0x80	; 128
    33bc:	9f 2e       	mov	r9, r31
    33be:	f3 fd       	sbrc	r31, 3
    33c0:	18 c0       	rjmp	.+48     	; 0x33f2 <vfprintf+0x492>
    33c2:	85 2d       	mov	r24, r5
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	08 17       	cp	r16, r24
    33c8:	19 07       	cpc	r17, r25
    33ca:	98 f4       	brcc	.+38     	; 0x33f2 <vfprintf+0x492>
    33cc:	b7 01       	movw	r22, r14
    33ce:	80 e2       	ldi	r24, 0x20	; 32
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	b3 d3       	rcall	.+1894   	; 0x3b3a <fputc>
    33d4:	5a 94       	dec	r5
    33d6:	f5 cf       	rjmp	.-22     	; 0x33c2 <vfprintf+0x462>
    33d8:	f6 01       	movw	r30, r12
    33da:	97 fc       	sbrc	r9, 7
    33dc:	85 91       	lpm	r24, Z+
    33de:	97 fe       	sbrs	r9, 7
    33e0:	81 91       	ld	r24, Z+
    33e2:	6f 01       	movw	r12, r30
    33e4:	b7 01       	movw	r22, r14
    33e6:	90 e0       	ldi	r25, 0x00	; 0
    33e8:	a8 d3       	rcall	.+1872   	; 0x3b3a <fputc>
    33ea:	51 10       	cpse	r5, r1
    33ec:	5a 94       	dec	r5
    33ee:	01 50       	subi	r16, 0x01	; 1
    33f0:	11 09       	sbc	r17, r1
    33f2:	01 15       	cp	r16, r1
    33f4:	11 05       	cpc	r17, r1
    33f6:	81 f7       	brne	.-32     	; 0x33d8 <vfprintf+0x478>
    33f8:	f0 c0       	rjmp	.+480    	; 0x35da <vfprintf+0x67a>
    33fa:	84 36       	cpi	r24, 0x64	; 100
    33fc:	11 f0       	breq	.+4      	; 0x3402 <vfprintf+0x4a2>
    33fe:	89 36       	cpi	r24, 0x69	; 105
    3400:	59 f5       	brne	.+86     	; 0x3458 <vfprintf+0x4f8>
    3402:	56 01       	movw	r10, r12
    3404:	97 fe       	sbrs	r9, 7
    3406:	09 c0       	rjmp	.+18     	; 0x341a <vfprintf+0x4ba>
    3408:	24 e0       	ldi	r18, 0x04	; 4
    340a:	a2 0e       	add	r10, r18
    340c:	b1 1c       	adc	r11, r1
    340e:	f6 01       	movw	r30, r12
    3410:	60 81       	ld	r22, Z
    3412:	71 81       	ldd	r23, Z+1	; 0x01
    3414:	82 81       	ldd	r24, Z+2	; 0x02
    3416:	93 81       	ldd	r25, Z+3	; 0x03
    3418:	0a c0       	rjmp	.+20     	; 0x342e <vfprintf+0x4ce>
    341a:	f2 e0       	ldi	r31, 0x02	; 2
    341c:	af 0e       	add	r10, r31
    341e:	b1 1c       	adc	r11, r1
    3420:	f6 01       	movw	r30, r12
    3422:	60 81       	ld	r22, Z
    3424:	71 81       	ldd	r23, Z+1	; 0x01
    3426:	07 2e       	mov	r0, r23
    3428:	00 0c       	add	r0, r0
    342a:	88 0b       	sbc	r24, r24
    342c:	99 0b       	sbc	r25, r25
    342e:	f9 2d       	mov	r31, r9
    3430:	ff 76       	andi	r31, 0x6F	; 111
    3432:	9f 2e       	mov	r9, r31
    3434:	97 ff       	sbrs	r25, 7
    3436:	09 c0       	rjmp	.+18     	; 0x344a <vfprintf+0x4ea>
    3438:	90 95       	com	r25
    343a:	80 95       	com	r24
    343c:	70 95       	com	r23
    343e:	61 95       	neg	r22
    3440:	7f 4f       	sbci	r23, 0xFF	; 255
    3442:	8f 4f       	sbci	r24, 0xFF	; 255
    3444:	9f 4f       	sbci	r25, 0xFF	; 255
    3446:	f0 68       	ori	r31, 0x80	; 128
    3448:	9f 2e       	mov	r9, r31
    344a:	2a e0       	ldi	r18, 0x0A	; 10
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	a3 01       	movw	r20, r6
    3450:	c3 d3       	rcall	.+1926   	; 0x3bd8 <__ultoa_invert>
    3452:	c8 2e       	mov	r12, r24
    3454:	c6 18       	sub	r12, r6
    3456:	3e c0       	rjmp	.+124    	; 0x34d4 <vfprintf+0x574>
    3458:	09 2d       	mov	r16, r9
    345a:	85 37       	cpi	r24, 0x75	; 117
    345c:	21 f4       	brne	.+8      	; 0x3466 <vfprintf+0x506>
    345e:	0f 7e       	andi	r16, 0xEF	; 239
    3460:	2a e0       	ldi	r18, 0x0A	; 10
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	1d c0       	rjmp	.+58     	; 0x34a0 <vfprintf+0x540>
    3466:	09 7f       	andi	r16, 0xF9	; 249
    3468:	8f 36       	cpi	r24, 0x6F	; 111
    346a:	91 f0       	breq	.+36     	; 0x3490 <vfprintf+0x530>
    346c:	18 f4       	brcc	.+6      	; 0x3474 <vfprintf+0x514>
    346e:	88 35       	cpi	r24, 0x58	; 88
    3470:	59 f0       	breq	.+22     	; 0x3488 <vfprintf+0x528>
    3472:	bc c0       	rjmp	.+376    	; 0x35ec <vfprintf+0x68c>
    3474:	80 37       	cpi	r24, 0x70	; 112
    3476:	19 f0       	breq	.+6      	; 0x347e <vfprintf+0x51e>
    3478:	88 37       	cpi	r24, 0x78	; 120
    347a:	11 f0       	breq	.+4      	; 0x3480 <vfprintf+0x520>
    347c:	b7 c0       	rjmp	.+366    	; 0x35ec <vfprintf+0x68c>
    347e:	00 61       	ori	r16, 0x10	; 16
    3480:	04 ff       	sbrs	r16, 4
    3482:	09 c0       	rjmp	.+18     	; 0x3496 <vfprintf+0x536>
    3484:	04 60       	ori	r16, 0x04	; 4
    3486:	07 c0       	rjmp	.+14     	; 0x3496 <vfprintf+0x536>
    3488:	94 fe       	sbrs	r9, 4
    348a:	08 c0       	rjmp	.+16     	; 0x349c <vfprintf+0x53c>
    348c:	06 60       	ori	r16, 0x06	; 6
    348e:	06 c0       	rjmp	.+12     	; 0x349c <vfprintf+0x53c>
    3490:	28 e0       	ldi	r18, 0x08	; 8
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	05 c0       	rjmp	.+10     	; 0x34a0 <vfprintf+0x540>
    3496:	20 e1       	ldi	r18, 0x10	; 16
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	02 c0       	rjmp	.+4      	; 0x34a0 <vfprintf+0x540>
    349c:	20 e1       	ldi	r18, 0x10	; 16
    349e:	32 e0       	ldi	r19, 0x02	; 2
    34a0:	56 01       	movw	r10, r12
    34a2:	07 ff       	sbrs	r16, 7
    34a4:	09 c0       	rjmp	.+18     	; 0x34b8 <vfprintf+0x558>
    34a6:	84 e0       	ldi	r24, 0x04	; 4
    34a8:	a8 0e       	add	r10, r24
    34aa:	b1 1c       	adc	r11, r1
    34ac:	f6 01       	movw	r30, r12
    34ae:	60 81       	ld	r22, Z
    34b0:	71 81       	ldd	r23, Z+1	; 0x01
    34b2:	82 81       	ldd	r24, Z+2	; 0x02
    34b4:	93 81       	ldd	r25, Z+3	; 0x03
    34b6:	08 c0       	rjmp	.+16     	; 0x34c8 <vfprintf+0x568>
    34b8:	f2 e0       	ldi	r31, 0x02	; 2
    34ba:	af 0e       	add	r10, r31
    34bc:	b1 1c       	adc	r11, r1
    34be:	f6 01       	movw	r30, r12
    34c0:	60 81       	ld	r22, Z
    34c2:	71 81       	ldd	r23, Z+1	; 0x01
    34c4:	80 e0       	ldi	r24, 0x00	; 0
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	a3 01       	movw	r20, r6
    34ca:	86 d3       	rcall	.+1804   	; 0x3bd8 <__ultoa_invert>
    34cc:	c8 2e       	mov	r12, r24
    34ce:	c6 18       	sub	r12, r6
    34d0:	0f 77       	andi	r16, 0x7F	; 127
    34d2:	90 2e       	mov	r9, r16
    34d4:	96 fe       	sbrs	r9, 6
    34d6:	0b c0       	rjmp	.+22     	; 0x34ee <vfprintf+0x58e>
    34d8:	09 2d       	mov	r16, r9
    34da:	0e 7f       	andi	r16, 0xFE	; 254
    34dc:	c1 16       	cp	r12, r17
    34de:	50 f4       	brcc	.+20     	; 0x34f4 <vfprintf+0x594>
    34e0:	94 fe       	sbrs	r9, 4
    34e2:	0a c0       	rjmp	.+20     	; 0x34f8 <vfprintf+0x598>
    34e4:	92 fc       	sbrc	r9, 2
    34e6:	08 c0       	rjmp	.+16     	; 0x34f8 <vfprintf+0x598>
    34e8:	09 2d       	mov	r16, r9
    34ea:	0e 7e       	andi	r16, 0xEE	; 238
    34ec:	05 c0       	rjmp	.+10     	; 0x34f8 <vfprintf+0x598>
    34ee:	dc 2c       	mov	r13, r12
    34f0:	09 2d       	mov	r16, r9
    34f2:	03 c0       	rjmp	.+6      	; 0x34fa <vfprintf+0x59a>
    34f4:	dc 2c       	mov	r13, r12
    34f6:	01 c0       	rjmp	.+2      	; 0x34fa <vfprintf+0x59a>
    34f8:	d1 2e       	mov	r13, r17
    34fa:	04 ff       	sbrs	r16, 4
    34fc:	0d c0       	rjmp	.+26     	; 0x3518 <vfprintf+0x5b8>
    34fe:	fe 01       	movw	r30, r28
    3500:	ec 0d       	add	r30, r12
    3502:	f1 1d       	adc	r31, r1
    3504:	80 81       	ld	r24, Z
    3506:	80 33       	cpi	r24, 0x30	; 48
    3508:	11 f4       	brne	.+4      	; 0x350e <vfprintf+0x5ae>
    350a:	09 7e       	andi	r16, 0xE9	; 233
    350c:	09 c0       	rjmp	.+18     	; 0x3520 <vfprintf+0x5c0>
    350e:	02 ff       	sbrs	r16, 2
    3510:	06 c0       	rjmp	.+12     	; 0x351e <vfprintf+0x5be>
    3512:	d3 94       	inc	r13
    3514:	d3 94       	inc	r13
    3516:	04 c0       	rjmp	.+8      	; 0x3520 <vfprintf+0x5c0>
    3518:	80 2f       	mov	r24, r16
    351a:	86 78       	andi	r24, 0x86	; 134
    351c:	09 f0       	breq	.+2      	; 0x3520 <vfprintf+0x5c0>
    351e:	d3 94       	inc	r13
    3520:	03 fd       	sbrc	r16, 3
    3522:	10 c0       	rjmp	.+32     	; 0x3544 <vfprintf+0x5e4>
    3524:	00 ff       	sbrs	r16, 0
    3526:	06 c0       	rjmp	.+12     	; 0x3534 <vfprintf+0x5d4>
    3528:	1c 2d       	mov	r17, r12
    352a:	d5 14       	cp	r13, r5
    352c:	78 f4       	brcc	.+30     	; 0x354c <vfprintf+0x5ec>
    352e:	15 0d       	add	r17, r5
    3530:	1d 19       	sub	r17, r13
    3532:	0c c0       	rjmp	.+24     	; 0x354c <vfprintf+0x5ec>
    3534:	d5 14       	cp	r13, r5
    3536:	50 f4       	brcc	.+20     	; 0x354c <vfprintf+0x5ec>
    3538:	b7 01       	movw	r22, r14
    353a:	80 e2       	ldi	r24, 0x20	; 32
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	fd d2       	rcall	.+1530   	; 0x3b3a <fputc>
    3540:	d3 94       	inc	r13
    3542:	f8 cf       	rjmp	.-16     	; 0x3534 <vfprintf+0x5d4>
    3544:	d5 14       	cp	r13, r5
    3546:	10 f4       	brcc	.+4      	; 0x354c <vfprintf+0x5ec>
    3548:	5d 18       	sub	r5, r13
    354a:	01 c0       	rjmp	.+2      	; 0x354e <vfprintf+0x5ee>
    354c:	51 2c       	mov	r5, r1
    354e:	04 ff       	sbrs	r16, 4
    3550:	0f c0       	rjmp	.+30     	; 0x3570 <vfprintf+0x610>
    3552:	b7 01       	movw	r22, r14
    3554:	80 e3       	ldi	r24, 0x30	; 48
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	f0 d2       	rcall	.+1504   	; 0x3b3a <fputc>
    355a:	02 ff       	sbrs	r16, 2
    355c:	16 c0       	rjmp	.+44     	; 0x358a <vfprintf+0x62a>
    355e:	01 fd       	sbrc	r16, 1
    3560:	03 c0       	rjmp	.+6      	; 0x3568 <vfprintf+0x608>
    3562:	88 e7       	ldi	r24, 0x78	; 120
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	02 c0       	rjmp	.+4      	; 0x356c <vfprintf+0x60c>
    3568:	88 e5       	ldi	r24, 0x58	; 88
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	b7 01       	movw	r22, r14
    356e:	0c c0       	rjmp	.+24     	; 0x3588 <vfprintf+0x628>
    3570:	80 2f       	mov	r24, r16
    3572:	86 78       	andi	r24, 0x86	; 134
    3574:	51 f0       	breq	.+20     	; 0x358a <vfprintf+0x62a>
    3576:	01 ff       	sbrs	r16, 1
    3578:	02 c0       	rjmp	.+4      	; 0x357e <vfprintf+0x61e>
    357a:	8b e2       	ldi	r24, 0x2B	; 43
    357c:	01 c0       	rjmp	.+2      	; 0x3580 <vfprintf+0x620>
    357e:	80 e2       	ldi	r24, 0x20	; 32
    3580:	07 fd       	sbrc	r16, 7
    3582:	8d e2       	ldi	r24, 0x2D	; 45
    3584:	b7 01       	movw	r22, r14
    3586:	90 e0       	ldi	r25, 0x00	; 0
    3588:	d8 d2       	rcall	.+1456   	; 0x3b3a <fputc>
    358a:	c1 16       	cp	r12, r17
    358c:	30 f4       	brcc	.+12     	; 0x359a <vfprintf+0x63a>
    358e:	b7 01       	movw	r22, r14
    3590:	80 e3       	ldi	r24, 0x30	; 48
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	d2 d2       	rcall	.+1444   	; 0x3b3a <fputc>
    3596:	11 50       	subi	r17, 0x01	; 1
    3598:	f8 cf       	rjmp	.-16     	; 0x358a <vfprintf+0x62a>
    359a:	ca 94       	dec	r12
    359c:	f3 01       	movw	r30, r6
    359e:	ec 0d       	add	r30, r12
    35a0:	f1 1d       	adc	r31, r1
    35a2:	80 81       	ld	r24, Z
    35a4:	b7 01       	movw	r22, r14
    35a6:	90 e0       	ldi	r25, 0x00	; 0
    35a8:	c8 d2       	rcall	.+1424   	; 0x3b3a <fputc>
    35aa:	c1 10       	cpse	r12, r1
    35ac:	f6 cf       	rjmp	.-20     	; 0x359a <vfprintf+0x63a>
    35ae:	15 c0       	rjmp	.+42     	; 0x35da <vfprintf+0x67a>
    35b0:	f4 e0       	ldi	r31, 0x04	; 4
    35b2:	f5 15       	cp	r31, r5
    35b4:	50 f5       	brcc	.+84     	; 0x360a <vfprintf+0x6aa>
    35b6:	84 e0       	ldi	r24, 0x04	; 4
    35b8:	58 1a       	sub	r5, r24
    35ba:	93 fe       	sbrs	r9, 3
    35bc:	1e c0       	rjmp	.+60     	; 0x35fa <vfprintf+0x69a>
    35be:	01 11       	cpse	r16, r1
    35c0:	25 c0       	rjmp	.+74     	; 0x360c <vfprintf+0x6ac>
    35c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    35c4:	23 ff       	sbrs	r18, 3
    35c6:	27 c0       	rjmp	.+78     	; 0x3616 <vfprintf+0x6b6>
    35c8:	0a e7       	ldi	r16, 0x7A	; 122
    35ca:	12 e0       	ldi	r17, 0x02	; 2
    35cc:	39 2d       	mov	r19, r9
    35ce:	30 71       	andi	r19, 0x10	; 16
    35d0:	93 2e       	mov	r9, r19
    35d2:	f8 01       	movw	r30, r16
    35d4:	84 91       	lpm	r24, Z
    35d6:	81 11       	cpse	r24, r1
    35d8:	21 c0       	rjmp	.+66     	; 0x361c <vfprintf+0x6bc>
    35da:	55 20       	and	r5, r5
    35dc:	09 f4       	brne	.+2      	; 0x35e0 <vfprintf+0x680>
    35de:	fc cc       	rjmp	.-1544   	; 0x2fd8 <vfprintf+0x78>
    35e0:	b7 01       	movw	r22, r14
    35e2:	80 e2       	ldi	r24, 0x20	; 32
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	a9 d2       	rcall	.+1362   	; 0x3b3a <fputc>
    35e8:	5a 94       	dec	r5
    35ea:	f7 cf       	rjmp	.-18     	; 0x35da <vfprintf+0x67a>
    35ec:	f7 01       	movw	r30, r14
    35ee:	86 81       	ldd	r24, Z+6	; 0x06
    35f0:	97 81       	ldd	r25, Z+7	; 0x07
    35f2:	23 c0       	rjmp	.+70     	; 0x363a <vfprintf+0x6da>
    35f4:	8f ef       	ldi	r24, 0xFF	; 255
    35f6:	9f ef       	ldi	r25, 0xFF	; 255
    35f8:	20 c0       	rjmp	.+64     	; 0x363a <vfprintf+0x6da>
    35fa:	b7 01       	movw	r22, r14
    35fc:	80 e2       	ldi	r24, 0x20	; 32
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	9c d2       	rcall	.+1336   	; 0x3b3a <fputc>
    3602:	5a 94       	dec	r5
    3604:	51 10       	cpse	r5, r1
    3606:	f9 cf       	rjmp	.-14     	; 0x35fa <vfprintf+0x69a>
    3608:	da cf       	rjmp	.-76     	; 0x35be <vfprintf+0x65e>
    360a:	51 2c       	mov	r5, r1
    360c:	b7 01       	movw	r22, r14
    360e:	80 2f       	mov	r24, r16
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	93 d2       	rcall	.+1318   	; 0x3b3a <fputc>
    3614:	d6 cf       	rjmp	.-84     	; 0x35c2 <vfprintf+0x662>
    3616:	0e e7       	ldi	r16, 0x7E	; 126
    3618:	12 e0       	ldi	r17, 0x02	; 2
    361a:	d8 cf       	rjmp	.-80     	; 0x35cc <vfprintf+0x66c>
    361c:	91 10       	cpse	r9, r1
    361e:	80 52       	subi	r24, 0x20	; 32
    3620:	b7 01       	movw	r22, r14
    3622:	90 e0       	ldi	r25, 0x00	; 0
    3624:	8a d2       	rcall	.+1300   	; 0x3b3a <fputc>
    3626:	0f 5f       	subi	r16, 0xFF	; 255
    3628:	1f 4f       	sbci	r17, 0xFF	; 255
    362a:	d3 cf       	rjmp	.-90     	; 0x35d2 <vfprintf+0x672>
    362c:	23 e0       	ldi	r18, 0x03	; 3
    362e:	25 15       	cp	r18, r5
    3630:	10 f4       	brcc	.+4      	; 0x3636 <vfprintf+0x6d6>
    3632:	83 e0       	ldi	r24, 0x03	; 3
    3634:	c1 cf       	rjmp	.-126    	; 0x35b8 <vfprintf+0x658>
    3636:	51 2c       	mov	r5, r1
    3638:	c4 cf       	rjmp	.-120    	; 0x35c2 <vfprintf+0x662>
    363a:	60 96       	adiw	r28, 0x10	; 16
    363c:	cd bf       	out	0x3d, r28	; 61
    363e:	de bf       	out	0x3e, r29	; 62
    3640:	df 91       	pop	r29
    3642:	cf 91       	pop	r28
    3644:	1f 91       	pop	r17
    3646:	0f 91       	pop	r16
    3648:	ff 90       	pop	r15
    364a:	ef 90       	pop	r14
    364c:	df 90       	pop	r13
    364e:	cf 90       	pop	r12
    3650:	bf 90       	pop	r11
    3652:	af 90       	pop	r10
    3654:	9f 90       	pop	r9
    3656:	8f 90       	pop	r8
    3658:	7f 90       	pop	r7
    365a:	6f 90       	pop	r6
    365c:	5f 90       	pop	r5
    365e:	4f 90       	pop	r4
    3660:	3f 90       	pop	r3
    3662:	2f 90       	pop	r2
    3664:	08 95       	ret

00003666 <__udivmodhi4>:
    3666:	aa 1b       	sub	r26, r26
    3668:	bb 1b       	sub	r27, r27
    366a:	51 e1       	ldi	r21, 0x11	; 17
    366c:	07 c0       	rjmp	.+14     	; 0x367c <__udivmodhi4_ep>

0000366e <__udivmodhi4_loop>:
    366e:	aa 1f       	adc	r26, r26
    3670:	bb 1f       	adc	r27, r27
    3672:	a6 17       	cp	r26, r22
    3674:	b7 07       	cpc	r27, r23
    3676:	10 f0       	brcs	.+4      	; 0x367c <__udivmodhi4_ep>
    3678:	a6 1b       	sub	r26, r22
    367a:	b7 0b       	sbc	r27, r23

0000367c <__udivmodhi4_ep>:
    367c:	88 1f       	adc	r24, r24
    367e:	99 1f       	adc	r25, r25
    3680:	5a 95       	dec	r21
    3682:	a9 f7       	brne	.-22     	; 0x366e <__udivmodhi4_loop>
    3684:	80 95       	com	r24
    3686:	90 95       	com	r25
    3688:	bc 01       	movw	r22, r24
    368a:	cd 01       	movw	r24, r26
    368c:	08 95       	ret

0000368e <__udivmodsi4>:
    368e:	a1 e2       	ldi	r26, 0x21	; 33
    3690:	1a 2e       	mov	r1, r26
    3692:	aa 1b       	sub	r26, r26
    3694:	bb 1b       	sub	r27, r27
    3696:	fd 01       	movw	r30, r26
    3698:	0d c0       	rjmp	.+26     	; 0x36b4 <__udivmodsi4_ep>

0000369a <__udivmodsi4_loop>:
    369a:	aa 1f       	adc	r26, r26
    369c:	bb 1f       	adc	r27, r27
    369e:	ee 1f       	adc	r30, r30
    36a0:	ff 1f       	adc	r31, r31
    36a2:	a2 17       	cp	r26, r18
    36a4:	b3 07       	cpc	r27, r19
    36a6:	e4 07       	cpc	r30, r20
    36a8:	f5 07       	cpc	r31, r21
    36aa:	20 f0       	brcs	.+8      	; 0x36b4 <__udivmodsi4_ep>
    36ac:	a2 1b       	sub	r26, r18
    36ae:	b3 0b       	sbc	r27, r19
    36b0:	e4 0b       	sbc	r30, r20
    36b2:	f5 0b       	sbc	r31, r21

000036b4 <__udivmodsi4_ep>:
    36b4:	66 1f       	adc	r22, r22
    36b6:	77 1f       	adc	r23, r23
    36b8:	88 1f       	adc	r24, r24
    36ba:	99 1f       	adc	r25, r25
    36bc:	1a 94       	dec	r1
    36be:	69 f7       	brne	.-38     	; 0x369a <__udivmodsi4_loop>
    36c0:	60 95       	com	r22
    36c2:	70 95       	com	r23
    36c4:	80 95       	com	r24
    36c6:	90 95       	com	r25
    36c8:	9b 01       	movw	r18, r22
    36ca:	ac 01       	movw	r20, r24
    36cc:	bd 01       	movw	r22, r26
    36ce:	cf 01       	movw	r24, r30
    36d0:	08 95       	ret

000036d2 <__divmodsi4>:
    36d2:	05 2e       	mov	r0, r21
    36d4:	97 fb       	bst	r25, 7
    36d6:	16 f4       	brtc	.+4      	; 0x36dc <__divmodsi4+0xa>
    36d8:	00 94       	com	r0
    36da:	0f d0       	rcall	.+30     	; 0x36fa <__negsi2>
    36dc:	57 fd       	sbrc	r21, 7
    36de:	05 d0       	rcall	.+10     	; 0x36ea <__divmodsi4_neg2>
    36e0:	d6 df       	rcall	.-84     	; 0x368e <__udivmodsi4>
    36e2:	07 fc       	sbrc	r0, 7
    36e4:	02 d0       	rcall	.+4      	; 0x36ea <__divmodsi4_neg2>
    36e6:	46 f4       	brtc	.+16     	; 0x36f8 <__divmodsi4_exit>
    36e8:	08 c0       	rjmp	.+16     	; 0x36fa <__negsi2>

000036ea <__divmodsi4_neg2>:
    36ea:	50 95       	com	r21
    36ec:	40 95       	com	r20
    36ee:	30 95       	com	r19
    36f0:	21 95       	neg	r18
    36f2:	3f 4f       	sbci	r19, 0xFF	; 255
    36f4:	4f 4f       	sbci	r20, 0xFF	; 255
    36f6:	5f 4f       	sbci	r21, 0xFF	; 255

000036f8 <__divmodsi4_exit>:
    36f8:	08 95       	ret

000036fa <__negsi2>:
    36fa:	90 95       	com	r25
    36fc:	80 95       	com	r24
    36fe:	70 95       	com	r23
    3700:	61 95       	neg	r22
    3702:	7f 4f       	sbci	r23, 0xFF	; 255
    3704:	8f 4f       	sbci	r24, 0xFF	; 255
    3706:	9f 4f       	sbci	r25, 0xFF	; 255
    3708:	08 95       	ret

0000370a <__tablejump2__>:
    370a:	ee 0f       	add	r30, r30
    370c:	ff 1f       	adc	r31, r31
    370e:	88 1f       	adc	r24, r24
    3710:	8b bf       	out	0x3b, r24	; 59
    3712:	07 90       	elpm	r0, Z+
    3714:	f6 91       	elpm	r31, Z
    3716:	e0 2d       	mov	r30, r0
    3718:	1b be       	out	0x3b, r1	; 59
    371a:	19 94       	eijmp

0000371c <__umulhisi3>:
    371c:	a2 9f       	mul	r26, r18
    371e:	b0 01       	movw	r22, r0
    3720:	b3 9f       	mul	r27, r19
    3722:	c0 01       	movw	r24, r0
    3724:	a3 9f       	mul	r26, r19
    3726:	70 0d       	add	r23, r0
    3728:	81 1d       	adc	r24, r1
    372a:	11 24       	eor	r1, r1
    372c:	91 1d       	adc	r25, r1
    372e:	b2 9f       	mul	r27, r18
    3730:	70 0d       	add	r23, r0
    3732:	81 1d       	adc	r24, r1
    3734:	11 24       	eor	r1, r1
    3736:	91 1d       	adc	r25, r1
    3738:	08 95       	ret

0000373a <__usmulhisi3>:
    373a:	f0 df       	rcall	.-32     	; 0x371c <__umulhisi3>

0000373c <__usmulhisi3_tail>:
    373c:	b7 ff       	sbrs	r27, 7
    373e:	08 95       	ret
    3740:	82 1b       	sub	r24, r18
    3742:	93 0b       	sbc	r25, r19
    3744:	08 95       	ret

00003746 <__mulshisi3>:
    3746:	b7 ff       	sbrs	r27, 7
    3748:	b6 c0       	rjmp	.+364    	; 0x38b6 <__muluhisi3>

0000374a <__mulohisi3>:
    374a:	b5 d0       	rcall	.+362    	; 0x38b6 <__muluhisi3>
    374c:	82 1b       	sub	r24, r18
    374e:	93 0b       	sbc	r25, r19
    3750:	08 95       	ret

00003752 <__muldi3>:
    3752:	df 93       	push	r29
    3754:	cf 93       	push	r28
    3756:	1f 93       	push	r17
    3758:	0f 93       	push	r16
    375a:	9a 9d       	mul	r25, r10
    375c:	f0 2d       	mov	r31, r0
    375e:	21 9f       	mul	r18, r17
    3760:	f0 0d       	add	r31, r0
    3762:	8b 9d       	mul	r24, r11
    3764:	f0 0d       	add	r31, r0
    3766:	8a 9d       	mul	r24, r10
    3768:	e0 2d       	mov	r30, r0
    376a:	f1 0d       	add	r31, r1
    376c:	03 9f       	mul	r16, r19
    376e:	f0 0d       	add	r31, r0
    3770:	02 9f       	mul	r16, r18
    3772:	e0 0d       	add	r30, r0
    3774:	f1 1d       	adc	r31, r1
    3776:	4e 9d       	mul	r20, r14
    3778:	e0 0d       	add	r30, r0
    377a:	f1 1d       	adc	r31, r1
    377c:	5e 9d       	mul	r21, r14
    377e:	f0 0d       	add	r31, r0
    3780:	4f 9d       	mul	r20, r15
    3782:	f0 0d       	add	r31, r0
    3784:	7f 93       	push	r23
    3786:	6f 93       	push	r22
    3788:	bf 92       	push	r11
    378a:	af 92       	push	r10
    378c:	5f 93       	push	r21
    378e:	4f 93       	push	r20
    3790:	d5 01       	movw	r26, r10
    3792:	c4 df       	rcall	.-120    	; 0x371c <__umulhisi3>
    3794:	8b 01       	movw	r16, r22
    3796:	ac 01       	movw	r20, r24
    3798:	d7 01       	movw	r26, r14
    379a:	c0 df       	rcall	.-128    	; 0x371c <__umulhisi3>
    379c:	eb 01       	movw	r28, r22
    379e:	e8 0f       	add	r30, r24
    37a0:	f9 1f       	adc	r31, r25
    37a2:	d6 01       	movw	r26, r12
    37a4:	1f d0       	rcall	.+62     	; 0x37e4 <__muldi3_6>
    37a6:	2f 91       	pop	r18
    37a8:	3f 91       	pop	r19
    37aa:	d6 01       	movw	r26, r12
    37ac:	b7 df       	rcall	.-146    	; 0x371c <__umulhisi3>
    37ae:	c6 0f       	add	r28, r22
    37b0:	d7 1f       	adc	r29, r23
    37b2:	e8 1f       	adc	r30, r24
    37b4:	f9 1f       	adc	r31, r25
    37b6:	af 91       	pop	r26
    37b8:	bf 91       	pop	r27
    37ba:	14 d0       	rcall	.+40     	; 0x37e4 <__muldi3_6>
    37bc:	2f 91       	pop	r18
    37be:	3f 91       	pop	r19
    37c0:	ad df       	rcall	.-166    	; 0x371c <__umulhisi3>
    37c2:	c6 0f       	add	r28, r22
    37c4:	d7 1f       	adc	r29, r23
    37c6:	e8 1f       	adc	r30, r24
    37c8:	f9 1f       	adc	r31, r25
    37ca:	d6 01       	movw	r26, r12
    37cc:	a7 df       	rcall	.-178    	; 0x371c <__umulhisi3>
    37ce:	e6 0f       	add	r30, r22
    37d0:	f7 1f       	adc	r31, r23
    37d2:	98 01       	movw	r18, r16
    37d4:	be 01       	movw	r22, r28
    37d6:	cf 01       	movw	r24, r30
    37d8:	11 24       	eor	r1, r1
    37da:	0f 91       	pop	r16
    37dc:	1f 91       	pop	r17
    37de:	cf 91       	pop	r28
    37e0:	df 91       	pop	r29
    37e2:	08 95       	ret

000037e4 <__muldi3_6>:
    37e4:	9b df       	rcall	.-202    	; 0x371c <__umulhisi3>
    37e6:	46 0f       	add	r20, r22
    37e8:	57 1f       	adc	r21, r23
    37ea:	c8 1f       	adc	r28, r24
    37ec:	d9 1f       	adc	r29, r25
    37ee:	08 f4       	brcc	.+2      	; 0x37f2 <__muldi3_6+0xe>
    37f0:	31 96       	adiw	r30, 0x01	; 1
    37f2:	08 95       	ret

000037f4 <__ashldi3>:
    37f4:	0f 93       	push	r16
    37f6:	08 30       	cpi	r16, 0x08	; 8
    37f8:	90 f0       	brcs	.+36     	; 0x381e <__ashldi3+0x2a>
    37fa:	98 2f       	mov	r25, r24
    37fc:	87 2f       	mov	r24, r23
    37fe:	76 2f       	mov	r23, r22
    3800:	65 2f       	mov	r22, r21
    3802:	54 2f       	mov	r21, r20
    3804:	43 2f       	mov	r20, r19
    3806:	32 2f       	mov	r19, r18
    3808:	22 27       	eor	r18, r18
    380a:	08 50       	subi	r16, 0x08	; 8
    380c:	f4 cf       	rjmp	.-24     	; 0x37f6 <__ashldi3+0x2>
    380e:	22 0f       	add	r18, r18
    3810:	33 1f       	adc	r19, r19
    3812:	44 1f       	adc	r20, r20
    3814:	55 1f       	adc	r21, r21
    3816:	66 1f       	adc	r22, r22
    3818:	77 1f       	adc	r23, r23
    381a:	88 1f       	adc	r24, r24
    381c:	99 1f       	adc	r25, r25
    381e:	0a 95       	dec	r16
    3820:	b2 f7       	brpl	.-20     	; 0x380e <__ashldi3+0x1a>
    3822:	0f 91       	pop	r16
    3824:	08 95       	ret

00003826 <__ashrdi3>:
    3826:	97 fb       	bst	r25, 7
    3828:	10 f8       	bld	r1, 0

0000382a <__lshrdi3>:
    382a:	16 94       	lsr	r1
    382c:	00 08       	sbc	r0, r0
    382e:	0f 93       	push	r16
    3830:	08 30       	cpi	r16, 0x08	; 8
    3832:	98 f0       	brcs	.+38     	; 0x385a <__lshrdi3+0x30>
    3834:	08 50       	subi	r16, 0x08	; 8
    3836:	23 2f       	mov	r18, r19
    3838:	34 2f       	mov	r19, r20
    383a:	45 2f       	mov	r20, r21
    383c:	56 2f       	mov	r21, r22
    383e:	67 2f       	mov	r22, r23
    3840:	78 2f       	mov	r23, r24
    3842:	89 2f       	mov	r24, r25
    3844:	90 2d       	mov	r25, r0
    3846:	f4 cf       	rjmp	.-24     	; 0x3830 <__lshrdi3+0x6>
    3848:	05 94       	asr	r0
    384a:	97 95       	ror	r25
    384c:	87 95       	ror	r24
    384e:	77 95       	ror	r23
    3850:	67 95       	ror	r22
    3852:	57 95       	ror	r21
    3854:	47 95       	ror	r20
    3856:	37 95       	ror	r19
    3858:	27 95       	ror	r18
    385a:	0a 95       	dec	r16
    385c:	aa f7       	brpl	.-22     	; 0x3848 <__lshrdi3+0x1e>
    385e:	0f 91       	pop	r16
    3860:	08 95       	ret

00003862 <__adddi3>:
    3862:	2a 0d       	add	r18, r10
    3864:	3b 1d       	adc	r19, r11
    3866:	4c 1d       	adc	r20, r12
    3868:	5d 1d       	adc	r21, r13
    386a:	6e 1d       	adc	r22, r14
    386c:	7f 1d       	adc	r23, r15
    386e:	80 1f       	adc	r24, r16
    3870:	91 1f       	adc	r25, r17
    3872:	08 95       	ret

00003874 <__adddi3_s8>:
    3874:	00 24       	eor	r0, r0
    3876:	a7 fd       	sbrc	r26, 7
    3878:	00 94       	com	r0
    387a:	2a 0f       	add	r18, r26
    387c:	30 1d       	adc	r19, r0
    387e:	40 1d       	adc	r20, r0
    3880:	50 1d       	adc	r21, r0
    3882:	60 1d       	adc	r22, r0
    3884:	70 1d       	adc	r23, r0
    3886:	80 1d       	adc	r24, r0
    3888:	90 1d       	adc	r25, r0
    388a:	08 95       	ret

0000388c <__subdi3>:
    388c:	2a 19       	sub	r18, r10
    388e:	3b 09       	sbc	r19, r11
    3890:	4c 09       	sbc	r20, r12
    3892:	5d 09       	sbc	r21, r13
    3894:	6e 09       	sbc	r22, r14
    3896:	7f 09       	sbc	r23, r15
    3898:	80 0b       	sbc	r24, r16
    389a:	91 0b       	sbc	r25, r17
    389c:	08 95       	ret

0000389e <__cmpdi2_s8>:
    389e:	00 24       	eor	r0, r0
    38a0:	a7 fd       	sbrc	r26, 7
    38a2:	00 94       	com	r0
    38a4:	2a 17       	cp	r18, r26
    38a6:	30 05       	cpc	r19, r0
    38a8:	40 05       	cpc	r20, r0
    38aa:	50 05       	cpc	r21, r0
    38ac:	60 05       	cpc	r22, r0
    38ae:	70 05       	cpc	r23, r0
    38b0:	80 05       	cpc	r24, r0
    38b2:	90 05       	cpc	r25, r0
    38b4:	08 95       	ret

000038b6 <__muluhisi3>:
    38b6:	32 df       	rcall	.-412    	; 0x371c <__umulhisi3>
    38b8:	a5 9f       	mul	r26, r21
    38ba:	90 0d       	add	r25, r0
    38bc:	b4 9f       	mul	r27, r20
    38be:	90 0d       	add	r25, r0
    38c0:	a4 9f       	mul	r26, r20
    38c2:	80 0d       	add	r24, r0
    38c4:	91 1d       	adc	r25, r1
    38c6:	11 24       	eor	r1, r1
    38c8:	08 95       	ret

000038ca <__ftoa_engine>:
    38ca:	28 30       	cpi	r18, 0x08	; 8
    38cc:	08 f0       	brcs	.+2      	; 0x38d0 <__ftoa_engine+0x6>
    38ce:	27 e0       	ldi	r18, 0x07	; 7
    38d0:	33 27       	eor	r19, r19
    38d2:	da 01       	movw	r26, r20
    38d4:	99 0f       	add	r25, r25
    38d6:	31 1d       	adc	r19, r1
    38d8:	87 fd       	sbrc	r24, 7
    38da:	91 60       	ori	r25, 0x01	; 1
    38dc:	00 96       	adiw	r24, 0x00	; 0
    38de:	61 05       	cpc	r22, r1
    38e0:	71 05       	cpc	r23, r1
    38e2:	39 f4       	brne	.+14     	; 0x38f2 <__ftoa_engine+0x28>
    38e4:	32 60       	ori	r19, 0x02	; 2
    38e6:	2e 5f       	subi	r18, 0xFE	; 254
    38e8:	3d 93       	st	X+, r19
    38ea:	30 e3       	ldi	r19, 0x30	; 48
    38ec:	2a 95       	dec	r18
    38ee:	e1 f7       	brne	.-8      	; 0x38e8 <__ftoa_engine+0x1e>
    38f0:	08 95       	ret
    38f2:	9f 3f       	cpi	r25, 0xFF	; 255
    38f4:	30 f0       	brcs	.+12     	; 0x3902 <__ftoa_engine+0x38>
    38f6:	80 38       	cpi	r24, 0x80	; 128
    38f8:	71 05       	cpc	r23, r1
    38fa:	61 05       	cpc	r22, r1
    38fc:	09 f0       	breq	.+2      	; 0x3900 <__ftoa_engine+0x36>
    38fe:	3c 5f       	subi	r19, 0xFC	; 252
    3900:	3c 5f       	subi	r19, 0xFC	; 252
    3902:	3d 93       	st	X+, r19
    3904:	91 30       	cpi	r25, 0x01	; 1
    3906:	08 f0       	brcs	.+2      	; 0x390a <__ftoa_engine+0x40>
    3908:	80 68       	ori	r24, 0x80	; 128
    390a:	91 1d       	adc	r25, r1
    390c:	df 93       	push	r29
    390e:	cf 93       	push	r28
    3910:	1f 93       	push	r17
    3912:	0f 93       	push	r16
    3914:	ff 92       	push	r15
    3916:	ef 92       	push	r14
    3918:	19 2f       	mov	r17, r25
    391a:	98 7f       	andi	r25, 0xF8	; 248
    391c:	96 95       	lsr	r25
    391e:	e9 2f       	mov	r30, r25
    3920:	96 95       	lsr	r25
    3922:	96 95       	lsr	r25
    3924:	e9 0f       	add	r30, r25
    3926:	ff 27       	eor	r31, r31
    3928:	e4 52       	subi	r30, 0x24	; 36
    392a:	fd 4f       	sbci	r31, 0xFD	; 253
    392c:	99 27       	eor	r25, r25
    392e:	33 27       	eor	r19, r19
    3930:	ee 24       	eor	r14, r14
    3932:	ff 24       	eor	r15, r15
    3934:	a7 01       	movw	r20, r14
    3936:	e7 01       	movw	r28, r14
    3938:	05 90       	lpm	r0, Z+
    393a:	08 94       	sec
    393c:	07 94       	ror	r0
    393e:	28 f4       	brcc	.+10     	; 0x394a <__ftoa_engine+0x80>
    3940:	36 0f       	add	r19, r22
    3942:	e7 1e       	adc	r14, r23
    3944:	f8 1e       	adc	r15, r24
    3946:	49 1f       	adc	r20, r25
    3948:	51 1d       	adc	r21, r1
    394a:	66 0f       	add	r22, r22
    394c:	77 1f       	adc	r23, r23
    394e:	88 1f       	adc	r24, r24
    3950:	99 1f       	adc	r25, r25
    3952:	06 94       	lsr	r0
    3954:	a1 f7       	brne	.-24     	; 0x393e <__ftoa_engine+0x74>
    3956:	05 90       	lpm	r0, Z+
    3958:	07 94       	ror	r0
    395a:	28 f4       	brcc	.+10     	; 0x3966 <__ftoa_engine+0x9c>
    395c:	e7 0e       	add	r14, r23
    395e:	f8 1e       	adc	r15, r24
    3960:	49 1f       	adc	r20, r25
    3962:	56 1f       	adc	r21, r22
    3964:	c1 1d       	adc	r28, r1
    3966:	77 0f       	add	r23, r23
    3968:	88 1f       	adc	r24, r24
    396a:	99 1f       	adc	r25, r25
    396c:	66 1f       	adc	r22, r22
    396e:	06 94       	lsr	r0
    3970:	a1 f7       	brne	.-24     	; 0x395a <__ftoa_engine+0x90>
    3972:	05 90       	lpm	r0, Z+
    3974:	07 94       	ror	r0
    3976:	28 f4       	brcc	.+10     	; 0x3982 <__ftoa_engine+0xb8>
    3978:	f8 0e       	add	r15, r24
    397a:	49 1f       	adc	r20, r25
    397c:	56 1f       	adc	r21, r22
    397e:	c7 1f       	adc	r28, r23
    3980:	d1 1d       	adc	r29, r1
    3982:	88 0f       	add	r24, r24
    3984:	99 1f       	adc	r25, r25
    3986:	66 1f       	adc	r22, r22
    3988:	77 1f       	adc	r23, r23
    398a:	06 94       	lsr	r0
    398c:	a1 f7       	brne	.-24     	; 0x3976 <__ftoa_engine+0xac>
    398e:	05 90       	lpm	r0, Z+
    3990:	07 94       	ror	r0
    3992:	20 f4       	brcc	.+8      	; 0x399c <__ftoa_engine+0xd2>
    3994:	49 0f       	add	r20, r25
    3996:	56 1f       	adc	r21, r22
    3998:	c7 1f       	adc	r28, r23
    399a:	d8 1f       	adc	r29, r24
    399c:	99 0f       	add	r25, r25
    399e:	66 1f       	adc	r22, r22
    39a0:	77 1f       	adc	r23, r23
    39a2:	88 1f       	adc	r24, r24
    39a4:	06 94       	lsr	r0
    39a6:	a9 f7       	brne	.-22     	; 0x3992 <__ftoa_engine+0xc8>
    39a8:	84 91       	lpm	r24, Z
    39aa:	10 95       	com	r17
    39ac:	17 70       	andi	r17, 0x07	; 7
    39ae:	41 f0       	breq	.+16     	; 0x39c0 <__ftoa_engine+0xf6>
    39b0:	d6 95       	lsr	r29
    39b2:	c7 95       	ror	r28
    39b4:	57 95       	ror	r21
    39b6:	47 95       	ror	r20
    39b8:	f7 94       	ror	r15
    39ba:	e7 94       	ror	r14
    39bc:	1a 95       	dec	r17
    39be:	c1 f7       	brne	.-16     	; 0x39b0 <__ftoa_engine+0xe6>
    39c0:	e2 e8       	ldi	r30, 0x82	; 130
    39c2:	f2 e0       	ldi	r31, 0x02	; 2
    39c4:	68 94       	set
    39c6:	15 90       	lpm	r1, Z+
    39c8:	15 91       	lpm	r17, Z+
    39ca:	35 91       	lpm	r19, Z+
    39cc:	65 91       	lpm	r22, Z+
    39ce:	95 91       	lpm	r25, Z+
    39d0:	05 90       	lpm	r0, Z+
    39d2:	7f e2       	ldi	r23, 0x2F	; 47
    39d4:	73 95       	inc	r23
    39d6:	e1 18       	sub	r14, r1
    39d8:	f1 0a       	sbc	r15, r17
    39da:	43 0b       	sbc	r20, r19
    39dc:	56 0b       	sbc	r21, r22
    39de:	c9 0b       	sbc	r28, r25
    39e0:	d0 09       	sbc	r29, r0
    39e2:	c0 f7       	brcc	.-16     	; 0x39d4 <__ftoa_engine+0x10a>
    39e4:	e1 0c       	add	r14, r1
    39e6:	f1 1e       	adc	r15, r17
    39e8:	43 1f       	adc	r20, r19
    39ea:	56 1f       	adc	r21, r22
    39ec:	c9 1f       	adc	r28, r25
    39ee:	d0 1d       	adc	r29, r0
    39f0:	7e f4       	brtc	.+30     	; 0x3a10 <__ftoa_engine+0x146>
    39f2:	70 33       	cpi	r23, 0x30	; 48
    39f4:	11 f4       	brne	.+4      	; 0x39fa <__ftoa_engine+0x130>
    39f6:	8a 95       	dec	r24
    39f8:	e6 cf       	rjmp	.-52     	; 0x39c6 <__ftoa_engine+0xfc>
    39fa:	e8 94       	clt
    39fc:	01 50       	subi	r16, 0x01	; 1
    39fe:	30 f0       	brcs	.+12     	; 0x3a0c <__ftoa_engine+0x142>
    3a00:	08 0f       	add	r16, r24
    3a02:	0a f4       	brpl	.+2      	; 0x3a06 <__ftoa_engine+0x13c>
    3a04:	00 27       	eor	r16, r16
    3a06:	02 17       	cp	r16, r18
    3a08:	08 f4       	brcc	.+2      	; 0x3a0c <__ftoa_engine+0x142>
    3a0a:	20 2f       	mov	r18, r16
    3a0c:	23 95       	inc	r18
    3a0e:	02 2f       	mov	r16, r18
    3a10:	7a 33       	cpi	r23, 0x3A	; 58
    3a12:	28 f0       	brcs	.+10     	; 0x3a1e <__ftoa_engine+0x154>
    3a14:	79 e3       	ldi	r23, 0x39	; 57
    3a16:	7d 93       	st	X+, r23
    3a18:	2a 95       	dec	r18
    3a1a:	e9 f7       	brne	.-6      	; 0x3a16 <__ftoa_engine+0x14c>
    3a1c:	10 c0       	rjmp	.+32     	; 0x3a3e <__ftoa_engine+0x174>
    3a1e:	7d 93       	st	X+, r23
    3a20:	2a 95       	dec	r18
    3a22:	89 f6       	brne	.-94     	; 0x39c6 <__ftoa_engine+0xfc>
    3a24:	06 94       	lsr	r0
    3a26:	97 95       	ror	r25
    3a28:	67 95       	ror	r22
    3a2a:	37 95       	ror	r19
    3a2c:	17 95       	ror	r17
    3a2e:	17 94       	ror	r1
    3a30:	e1 18       	sub	r14, r1
    3a32:	f1 0a       	sbc	r15, r17
    3a34:	43 0b       	sbc	r20, r19
    3a36:	56 0b       	sbc	r21, r22
    3a38:	c9 0b       	sbc	r28, r25
    3a3a:	d0 09       	sbc	r29, r0
    3a3c:	98 f0       	brcs	.+38     	; 0x3a64 <__ftoa_engine+0x19a>
    3a3e:	23 95       	inc	r18
    3a40:	7e 91       	ld	r23, -X
    3a42:	73 95       	inc	r23
    3a44:	7a 33       	cpi	r23, 0x3A	; 58
    3a46:	08 f0       	brcs	.+2      	; 0x3a4a <__ftoa_engine+0x180>
    3a48:	70 e3       	ldi	r23, 0x30	; 48
    3a4a:	7c 93       	st	X, r23
    3a4c:	20 13       	cpse	r18, r16
    3a4e:	b8 f7       	brcc	.-18     	; 0x3a3e <__ftoa_engine+0x174>
    3a50:	7e 91       	ld	r23, -X
    3a52:	70 61       	ori	r23, 0x10	; 16
    3a54:	7d 93       	st	X+, r23
    3a56:	30 f0       	brcs	.+12     	; 0x3a64 <__ftoa_engine+0x19a>
    3a58:	83 95       	inc	r24
    3a5a:	71 e3       	ldi	r23, 0x31	; 49
    3a5c:	7d 93       	st	X+, r23
    3a5e:	70 e3       	ldi	r23, 0x30	; 48
    3a60:	2a 95       	dec	r18
    3a62:	e1 f7       	brne	.-8      	; 0x3a5c <__ftoa_engine+0x192>
    3a64:	11 24       	eor	r1, r1
    3a66:	ef 90       	pop	r14
    3a68:	ff 90       	pop	r15
    3a6a:	0f 91       	pop	r16
    3a6c:	1f 91       	pop	r17
    3a6e:	cf 91       	pop	r28
    3a70:	df 91       	pop	r29
    3a72:	99 27       	eor	r25, r25
    3a74:	87 fd       	sbrc	r24, 7
    3a76:	90 95       	com	r25
    3a78:	08 95       	ret

00003a7a <strnlen_P>:
    3a7a:	fc 01       	movw	r30, r24
    3a7c:	05 90       	lpm	r0, Z+
    3a7e:	61 50       	subi	r22, 0x01	; 1
    3a80:	70 40       	sbci	r23, 0x00	; 0
    3a82:	01 10       	cpse	r0, r1
    3a84:	d8 f7       	brcc	.-10     	; 0x3a7c <strnlen_P+0x2>
    3a86:	80 95       	com	r24
    3a88:	90 95       	com	r25
    3a8a:	8e 0f       	add	r24, r30
    3a8c:	9f 1f       	adc	r25, r31
    3a8e:	08 95       	ret

00003a90 <strnlen>:
    3a90:	fc 01       	movw	r30, r24
    3a92:	61 50       	subi	r22, 0x01	; 1
    3a94:	70 40       	sbci	r23, 0x00	; 0
    3a96:	01 90       	ld	r0, Z+
    3a98:	01 10       	cpse	r0, r1
    3a9a:	d8 f7       	brcc	.-10     	; 0x3a92 <strnlen+0x2>
    3a9c:	80 95       	com	r24
    3a9e:	90 95       	com	r25
    3aa0:	8e 0f       	add	r24, r30
    3aa2:	9f 1f       	adc	r25, r31
    3aa4:	08 95       	ret

00003aa6 <fdevopen>:
    3aa6:	0f 93       	push	r16
    3aa8:	1f 93       	push	r17
    3aaa:	cf 93       	push	r28
    3aac:	df 93       	push	r29
    3aae:	00 97       	sbiw	r24, 0x00	; 0
    3ab0:	31 f4       	brne	.+12     	; 0x3abe <fdevopen+0x18>
    3ab2:	61 15       	cp	r22, r1
    3ab4:	71 05       	cpc	r23, r1
    3ab6:	19 f4       	brne	.+6      	; 0x3abe <fdevopen+0x18>
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	90 e0       	ldi	r25, 0x00	; 0
    3abc:	39 c0       	rjmp	.+114    	; 0x3b30 <fdevopen+0x8a>
    3abe:	8b 01       	movw	r16, r22
    3ac0:	ec 01       	movw	r28, r24
    3ac2:	6e e0       	ldi	r22, 0x0E	; 14
    3ac4:	70 e0       	ldi	r23, 0x00	; 0
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	e4 d0       	rcall	.+456    	; 0x3c94 <calloc>
    3acc:	fc 01       	movw	r30, r24
    3ace:	89 2b       	or	r24, r25
    3ad0:	99 f3       	breq	.-26     	; 0x3ab8 <fdevopen+0x12>
    3ad2:	80 e8       	ldi	r24, 0x80	; 128
    3ad4:	83 83       	std	Z+3, r24	; 0x03
    3ad6:	01 15       	cp	r16, r1
    3ad8:	11 05       	cpc	r17, r1
    3ada:	71 f0       	breq	.+28     	; 0x3af8 <fdevopen+0x52>
    3adc:	02 87       	std	Z+10, r16	; 0x0a
    3ade:	13 87       	std	Z+11, r17	; 0x0b
    3ae0:	81 e8       	ldi	r24, 0x81	; 129
    3ae2:	83 83       	std	Z+3, r24	; 0x03
    3ae4:	80 91 3c 23 	lds	r24, 0x233C	; 0x80233c <__iob>
    3ae8:	90 91 3d 23 	lds	r25, 0x233D	; 0x80233d <__iob+0x1>
    3aec:	89 2b       	or	r24, r25
    3aee:	21 f4       	brne	.+8      	; 0x3af8 <fdevopen+0x52>
    3af0:	e0 93 3c 23 	sts	0x233C, r30	; 0x80233c <__iob>
    3af4:	f0 93 3d 23 	sts	0x233D, r31	; 0x80233d <__iob+0x1>
    3af8:	20 97       	sbiw	r28, 0x00	; 0
    3afa:	c9 f0       	breq	.+50     	; 0x3b2e <fdevopen+0x88>
    3afc:	c0 87       	std	Z+8, r28	; 0x08
    3afe:	d1 87       	std	Z+9, r29	; 0x09
    3b00:	83 81       	ldd	r24, Z+3	; 0x03
    3b02:	82 60       	ori	r24, 0x02	; 2
    3b04:	83 83       	std	Z+3, r24	; 0x03
    3b06:	80 91 3e 23 	lds	r24, 0x233E	; 0x80233e <__iob+0x2>
    3b0a:	90 91 3f 23 	lds	r25, 0x233F	; 0x80233f <__iob+0x3>
    3b0e:	89 2b       	or	r24, r25
    3b10:	71 f4       	brne	.+28     	; 0x3b2e <fdevopen+0x88>
    3b12:	e0 93 3e 23 	sts	0x233E, r30	; 0x80233e <__iob+0x2>
    3b16:	f0 93 3f 23 	sts	0x233F, r31	; 0x80233f <__iob+0x3>
    3b1a:	80 91 40 23 	lds	r24, 0x2340	; 0x802340 <__iob+0x4>
    3b1e:	90 91 41 23 	lds	r25, 0x2341	; 0x802341 <__iob+0x5>
    3b22:	89 2b       	or	r24, r25
    3b24:	21 f4       	brne	.+8      	; 0x3b2e <fdevopen+0x88>
    3b26:	e0 93 40 23 	sts	0x2340, r30	; 0x802340 <__iob+0x4>
    3b2a:	f0 93 41 23 	sts	0x2341, r31	; 0x802341 <__iob+0x5>
    3b2e:	cf 01       	movw	r24, r30
    3b30:	df 91       	pop	r29
    3b32:	cf 91       	pop	r28
    3b34:	1f 91       	pop	r17
    3b36:	0f 91       	pop	r16
    3b38:	08 95       	ret

00003b3a <fputc>:
    3b3a:	0f 93       	push	r16
    3b3c:	1f 93       	push	r17
    3b3e:	cf 93       	push	r28
    3b40:	df 93       	push	r29
    3b42:	fb 01       	movw	r30, r22
    3b44:	23 81       	ldd	r18, Z+3	; 0x03
    3b46:	21 fd       	sbrc	r18, 1
    3b48:	03 c0       	rjmp	.+6      	; 0x3b50 <fputc+0x16>
    3b4a:	8f ef       	ldi	r24, 0xFF	; 255
    3b4c:	9f ef       	ldi	r25, 0xFF	; 255
    3b4e:	2c c0       	rjmp	.+88     	; 0x3ba8 <fputc+0x6e>
    3b50:	22 ff       	sbrs	r18, 2
    3b52:	16 c0       	rjmp	.+44     	; 0x3b80 <fputc+0x46>
    3b54:	46 81       	ldd	r20, Z+6	; 0x06
    3b56:	57 81       	ldd	r21, Z+7	; 0x07
    3b58:	24 81       	ldd	r18, Z+4	; 0x04
    3b5a:	35 81       	ldd	r19, Z+5	; 0x05
    3b5c:	42 17       	cp	r20, r18
    3b5e:	53 07       	cpc	r21, r19
    3b60:	44 f4       	brge	.+16     	; 0x3b72 <fputc+0x38>
    3b62:	a0 81       	ld	r26, Z
    3b64:	b1 81       	ldd	r27, Z+1	; 0x01
    3b66:	9d 01       	movw	r18, r26
    3b68:	2f 5f       	subi	r18, 0xFF	; 255
    3b6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b6c:	20 83       	st	Z, r18
    3b6e:	31 83       	std	Z+1, r19	; 0x01
    3b70:	8c 93       	st	X, r24
    3b72:	26 81       	ldd	r18, Z+6	; 0x06
    3b74:	37 81       	ldd	r19, Z+7	; 0x07
    3b76:	2f 5f       	subi	r18, 0xFF	; 255
    3b78:	3f 4f       	sbci	r19, 0xFF	; 255
    3b7a:	26 83       	std	Z+6, r18	; 0x06
    3b7c:	37 83       	std	Z+7, r19	; 0x07
    3b7e:	14 c0       	rjmp	.+40     	; 0x3ba8 <fputc+0x6e>
    3b80:	8b 01       	movw	r16, r22
    3b82:	ec 01       	movw	r28, r24
    3b84:	fb 01       	movw	r30, r22
    3b86:	00 84       	ldd	r0, Z+8	; 0x08
    3b88:	f1 85       	ldd	r31, Z+9	; 0x09
    3b8a:	e0 2d       	mov	r30, r0
    3b8c:	19 95       	eicall
    3b8e:	89 2b       	or	r24, r25
    3b90:	e1 f6       	brne	.-72     	; 0x3b4a <fputc+0x10>
    3b92:	d8 01       	movw	r26, r16
    3b94:	16 96       	adiw	r26, 0x06	; 6
    3b96:	8d 91       	ld	r24, X+
    3b98:	9c 91       	ld	r25, X
    3b9a:	17 97       	sbiw	r26, 0x07	; 7
    3b9c:	01 96       	adiw	r24, 0x01	; 1
    3b9e:	16 96       	adiw	r26, 0x06	; 6
    3ba0:	8d 93       	st	X+, r24
    3ba2:	9c 93       	st	X, r25
    3ba4:	17 97       	sbiw	r26, 0x07	; 7
    3ba6:	ce 01       	movw	r24, r28
    3ba8:	df 91       	pop	r29
    3baa:	cf 91       	pop	r28
    3bac:	1f 91       	pop	r17
    3bae:	0f 91       	pop	r16
    3bb0:	08 95       	ret

00003bb2 <printf>:
    3bb2:	cf 93       	push	r28
    3bb4:	df 93       	push	r29
    3bb6:	cd b7       	in	r28, 0x3d	; 61
    3bb8:	de b7       	in	r29, 0x3e	; 62
    3bba:	ae 01       	movw	r20, r28
    3bbc:	4a 5f       	subi	r20, 0xFA	; 250
    3bbe:	5f 4f       	sbci	r21, 0xFF	; 255
    3bc0:	fa 01       	movw	r30, r20
    3bc2:	61 91       	ld	r22, Z+
    3bc4:	71 91       	ld	r23, Z+
    3bc6:	af 01       	movw	r20, r30
    3bc8:	80 91 3e 23 	lds	r24, 0x233E	; 0x80233e <__iob+0x2>
    3bcc:	90 91 3f 23 	lds	r25, 0x233F	; 0x80233f <__iob+0x3>
    3bd0:	c7 d9       	rcall	.-3186   	; 0x2f60 <vfprintf>
    3bd2:	df 91       	pop	r29
    3bd4:	cf 91       	pop	r28
    3bd6:	08 95       	ret

00003bd8 <__ultoa_invert>:
    3bd8:	fa 01       	movw	r30, r20
    3bda:	aa 27       	eor	r26, r26
    3bdc:	28 30       	cpi	r18, 0x08	; 8
    3bde:	51 f1       	breq	.+84     	; 0x3c34 <__ultoa_invert+0x5c>
    3be0:	20 31       	cpi	r18, 0x10	; 16
    3be2:	81 f1       	breq	.+96     	; 0x3c44 <__ultoa_invert+0x6c>
    3be4:	e8 94       	clt
    3be6:	6f 93       	push	r22
    3be8:	6e 7f       	andi	r22, 0xFE	; 254
    3bea:	6e 5f       	subi	r22, 0xFE	; 254
    3bec:	7f 4f       	sbci	r23, 0xFF	; 255
    3bee:	8f 4f       	sbci	r24, 0xFF	; 255
    3bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf2:	af 4f       	sbci	r26, 0xFF	; 255
    3bf4:	b1 e0       	ldi	r27, 0x01	; 1
    3bf6:	3e d0       	rcall	.+124    	; 0x3c74 <__ultoa_invert+0x9c>
    3bf8:	b4 e0       	ldi	r27, 0x04	; 4
    3bfa:	3c d0       	rcall	.+120    	; 0x3c74 <__ultoa_invert+0x9c>
    3bfc:	67 0f       	add	r22, r23
    3bfe:	78 1f       	adc	r23, r24
    3c00:	89 1f       	adc	r24, r25
    3c02:	9a 1f       	adc	r25, r26
    3c04:	a1 1d       	adc	r26, r1
    3c06:	68 0f       	add	r22, r24
    3c08:	79 1f       	adc	r23, r25
    3c0a:	8a 1f       	adc	r24, r26
    3c0c:	91 1d       	adc	r25, r1
    3c0e:	a1 1d       	adc	r26, r1
    3c10:	6a 0f       	add	r22, r26
    3c12:	71 1d       	adc	r23, r1
    3c14:	81 1d       	adc	r24, r1
    3c16:	91 1d       	adc	r25, r1
    3c18:	a1 1d       	adc	r26, r1
    3c1a:	20 d0       	rcall	.+64     	; 0x3c5c <__ultoa_invert+0x84>
    3c1c:	09 f4       	brne	.+2      	; 0x3c20 <__ultoa_invert+0x48>
    3c1e:	68 94       	set
    3c20:	3f 91       	pop	r19
    3c22:	2a e0       	ldi	r18, 0x0A	; 10
    3c24:	26 9f       	mul	r18, r22
    3c26:	11 24       	eor	r1, r1
    3c28:	30 19       	sub	r19, r0
    3c2a:	30 5d       	subi	r19, 0xD0	; 208
    3c2c:	31 93       	st	Z+, r19
    3c2e:	de f6       	brtc	.-74     	; 0x3be6 <__ultoa_invert+0xe>
    3c30:	cf 01       	movw	r24, r30
    3c32:	08 95       	ret
    3c34:	46 2f       	mov	r20, r22
    3c36:	47 70       	andi	r20, 0x07	; 7
    3c38:	40 5d       	subi	r20, 0xD0	; 208
    3c3a:	41 93       	st	Z+, r20
    3c3c:	b3 e0       	ldi	r27, 0x03	; 3
    3c3e:	0f d0       	rcall	.+30     	; 0x3c5e <__ultoa_invert+0x86>
    3c40:	c9 f7       	brne	.-14     	; 0x3c34 <__ultoa_invert+0x5c>
    3c42:	f6 cf       	rjmp	.-20     	; 0x3c30 <__ultoa_invert+0x58>
    3c44:	46 2f       	mov	r20, r22
    3c46:	4f 70       	andi	r20, 0x0F	; 15
    3c48:	40 5d       	subi	r20, 0xD0	; 208
    3c4a:	4a 33       	cpi	r20, 0x3A	; 58
    3c4c:	18 f0       	brcs	.+6      	; 0x3c54 <__ultoa_invert+0x7c>
    3c4e:	49 5d       	subi	r20, 0xD9	; 217
    3c50:	31 fd       	sbrc	r19, 1
    3c52:	40 52       	subi	r20, 0x20	; 32
    3c54:	41 93       	st	Z+, r20
    3c56:	02 d0       	rcall	.+4      	; 0x3c5c <__ultoa_invert+0x84>
    3c58:	a9 f7       	brne	.-22     	; 0x3c44 <__ultoa_invert+0x6c>
    3c5a:	ea cf       	rjmp	.-44     	; 0x3c30 <__ultoa_invert+0x58>
    3c5c:	b4 e0       	ldi	r27, 0x04	; 4
    3c5e:	a6 95       	lsr	r26
    3c60:	97 95       	ror	r25
    3c62:	87 95       	ror	r24
    3c64:	77 95       	ror	r23
    3c66:	67 95       	ror	r22
    3c68:	ba 95       	dec	r27
    3c6a:	c9 f7       	brne	.-14     	; 0x3c5e <__ultoa_invert+0x86>
    3c6c:	00 97       	sbiw	r24, 0x00	; 0
    3c6e:	61 05       	cpc	r22, r1
    3c70:	71 05       	cpc	r23, r1
    3c72:	08 95       	ret
    3c74:	9b 01       	movw	r18, r22
    3c76:	ac 01       	movw	r20, r24
    3c78:	0a 2e       	mov	r0, r26
    3c7a:	06 94       	lsr	r0
    3c7c:	57 95       	ror	r21
    3c7e:	47 95       	ror	r20
    3c80:	37 95       	ror	r19
    3c82:	27 95       	ror	r18
    3c84:	ba 95       	dec	r27
    3c86:	c9 f7       	brne	.-14     	; 0x3c7a <__ultoa_invert+0xa2>
    3c88:	62 0f       	add	r22, r18
    3c8a:	73 1f       	adc	r23, r19
    3c8c:	84 1f       	adc	r24, r20
    3c8e:	95 1f       	adc	r25, r21
    3c90:	a0 1d       	adc	r26, r0
    3c92:	08 95       	ret

00003c94 <calloc>:
    3c94:	0f 93       	push	r16
    3c96:	1f 93       	push	r17
    3c98:	cf 93       	push	r28
    3c9a:	df 93       	push	r29
    3c9c:	86 9f       	mul	r24, r22
    3c9e:	80 01       	movw	r16, r0
    3ca0:	87 9f       	mul	r24, r23
    3ca2:	10 0d       	add	r17, r0
    3ca4:	96 9f       	mul	r25, r22
    3ca6:	10 0d       	add	r17, r0
    3ca8:	11 24       	eor	r1, r1
    3caa:	c8 01       	movw	r24, r16
    3cac:	0d d0       	rcall	.+26     	; 0x3cc8 <malloc>
    3cae:	ec 01       	movw	r28, r24
    3cb0:	00 97       	sbiw	r24, 0x00	; 0
    3cb2:	21 f0       	breq	.+8      	; 0x3cbc <calloc+0x28>
    3cb4:	a8 01       	movw	r20, r16
    3cb6:	60 e0       	ldi	r22, 0x00	; 0
    3cb8:	70 e0       	ldi	r23, 0x00	; 0
    3cba:	27 d1       	rcall	.+590    	; 0x3f0a <memset>
    3cbc:	ce 01       	movw	r24, r28
    3cbe:	df 91       	pop	r29
    3cc0:	cf 91       	pop	r28
    3cc2:	1f 91       	pop	r17
    3cc4:	0f 91       	pop	r16
    3cc6:	08 95       	ret

00003cc8 <malloc>:
    3cc8:	0f 93       	push	r16
    3cca:	1f 93       	push	r17
    3ccc:	cf 93       	push	r28
    3cce:	df 93       	push	r29
    3cd0:	82 30       	cpi	r24, 0x02	; 2
    3cd2:	91 05       	cpc	r25, r1
    3cd4:	10 f4       	brcc	.+4      	; 0x3cda <malloc+0x12>
    3cd6:	82 e0       	ldi	r24, 0x02	; 2
    3cd8:	90 e0       	ldi	r25, 0x00	; 0
    3cda:	e0 91 44 23 	lds	r30, 0x2344	; 0x802344 <__flp>
    3cde:	f0 91 45 23 	lds	r31, 0x2345	; 0x802345 <__flp+0x1>
    3ce2:	20 e0       	ldi	r18, 0x00	; 0
    3ce4:	30 e0       	ldi	r19, 0x00	; 0
    3ce6:	a0 e0       	ldi	r26, 0x00	; 0
    3ce8:	b0 e0       	ldi	r27, 0x00	; 0
    3cea:	30 97       	sbiw	r30, 0x00	; 0
    3cec:	19 f1       	breq	.+70     	; 0x3d34 <malloc+0x6c>
    3cee:	40 81       	ld	r20, Z
    3cf0:	51 81       	ldd	r21, Z+1	; 0x01
    3cf2:	02 81       	ldd	r16, Z+2	; 0x02
    3cf4:	13 81       	ldd	r17, Z+3	; 0x03
    3cf6:	48 17       	cp	r20, r24
    3cf8:	59 07       	cpc	r21, r25
    3cfa:	c8 f0       	brcs	.+50     	; 0x3d2e <malloc+0x66>
    3cfc:	84 17       	cp	r24, r20
    3cfe:	95 07       	cpc	r25, r21
    3d00:	69 f4       	brne	.+26     	; 0x3d1c <malloc+0x54>
    3d02:	10 97       	sbiw	r26, 0x00	; 0
    3d04:	31 f0       	breq	.+12     	; 0x3d12 <malloc+0x4a>
    3d06:	12 96       	adiw	r26, 0x02	; 2
    3d08:	0c 93       	st	X, r16
    3d0a:	12 97       	sbiw	r26, 0x02	; 2
    3d0c:	13 96       	adiw	r26, 0x03	; 3
    3d0e:	1c 93       	st	X, r17
    3d10:	27 c0       	rjmp	.+78     	; 0x3d60 <malloc+0x98>
    3d12:	00 93 44 23 	sts	0x2344, r16	; 0x802344 <__flp>
    3d16:	10 93 45 23 	sts	0x2345, r17	; 0x802345 <__flp+0x1>
    3d1a:	22 c0       	rjmp	.+68     	; 0x3d60 <malloc+0x98>
    3d1c:	21 15       	cp	r18, r1
    3d1e:	31 05       	cpc	r19, r1
    3d20:	19 f0       	breq	.+6      	; 0x3d28 <malloc+0x60>
    3d22:	42 17       	cp	r20, r18
    3d24:	53 07       	cpc	r21, r19
    3d26:	18 f4       	brcc	.+6      	; 0x3d2e <malloc+0x66>
    3d28:	9a 01       	movw	r18, r20
    3d2a:	bd 01       	movw	r22, r26
    3d2c:	ef 01       	movw	r28, r30
    3d2e:	df 01       	movw	r26, r30
    3d30:	f8 01       	movw	r30, r16
    3d32:	db cf       	rjmp	.-74     	; 0x3cea <malloc+0x22>
    3d34:	21 15       	cp	r18, r1
    3d36:	31 05       	cpc	r19, r1
    3d38:	f9 f0       	breq	.+62     	; 0x3d78 <malloc+0xb0>
    3d3a:	28 1b       	sub	r18, r24
    3d3c:	39 0b       	sbc	r19, r25
    3d3e:	24 30       	cpi	r18, 0x04	; 4
    3d40:	31 05       	cpc	r19, r1
    3d42:	80 f4       	brcc	.+32     	; 0x3d64 <malloc+0x9c>
    3d44:	8a 81       	ldd	r24, Y+2	; 0x02
    3d46:	9b 81       	ldd	r25, Y+3	; 0x03
    3d48:	61 15       	cp	r22, r1
    3d4a:	71 05       	cpc	r23, r1
    3d4c:	21 f0       	breq	.+8      	; 0x3d56 <malloc+0x8e>
    3d4e:	fb 01       	movw	r30, r22
    3d50:	82 83       	std	Z+2, r24	; 0x02
    3d52:	93 83       	std	Z+3, r25	; 0x03
    3d54:	04 c0       	rjmp	.+8      	; 0x3d5e <malloc+0x96>
    3d56:	80 93 44 23 	sts	0x2344, r24	; 0x802344 <__flp>
    3d5a:	90 93 45 23 	sts	0x2345, r25	; 0x802345 <__flp+0x1>
    3d5e:	fe 01       	movw	r30, r28
    3d60:	32 96       	adiw	r30, 0x02	; 2
    3d62:	44 c0       	rjmp	.+136    	; 0x3dec <malloc+0x124>
    3d64:	fe 01       	movw	r30, r28
    3d66:	e2 0f       	add	r30, r18
    3d68:	f3 1f       	adc	r31, r19
    3d6a:	81 93       	st	Z+, r24
    3d6c:	91 93       	st	Z+, r25
    3d6e:	22 50       	subi	r18, 0x02	; 2
    3d70:	31 09       	sbc	r19, r1
    3d72:	28 83       	st	Y, r18
    3d74:	39 83       	std	Y+1, r19	; 0x01
    3d76:	3a c0       	rjmp	.+116    	; 0x3dec <malloc+0x124>
    3d78:	20 91 42 23 	lds	r18, 0x2342	; 0x802342 <__brkval>
    3d7c:	30 91 43 23 	lds	r19, 0x2343	; 0x802343 <__brkval+0x1>
    3d80:	23 2b       	or	r18, r19
    3d82:	41 f4       	brne	.+16     	; 0x3d94 <malloc+0xcc>
    3d84:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    3d88:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    3d8c:	20 93 42 23 	sts	0x2342, r18	; 0x802342 <__brkval>
    3d90:	30 93 43 23 	sts	0x2343, r19	; 0x802343 <__brkval+0x1>
    3d94:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    3d98:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    3d9c:	21 15       	cp	r18, r1
    3d9e:	31 05       	cpc	r19, r1
    3da0:	41 f4       	brne	.+16     	; 0x3db2 <malloc+0xea>
    3da2:	2d b7       	in	r18, 0x3d	; 61
    3da4:	3e b7       	in	r19, 0x3e	; 62
    3da6:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    3daa:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    3dae:	24 1b       	sub	r18, r20
    3db0:	35 0b       	sbc	r19, r21
    3db2:	e0 91 42 23 	lds	r30, 0x2342	; 0x802342 <__brkval>
    3db6:	f0 91 43 23 	lds	r31, 0x2343	; 0x802343 <__brkval+0x1>
    3dba:	e2 17       	cp	r30, r18
    3dbc:	f3 07       	cpc	r31, r19
    3dbe:	a0 f4       	brcc	.+40     	; 0x3de8 <malloc+0x120>
    3dc0:	2e 1b       	sub	r18, r30
    3dc2:	3f 0b       	sbc	r19, r31
    3dc4:	28 17       	cp	r18, r24
    3dc6:	39 07       	cpc	r19, r25
    3dc8:	78 f0       	brcs	.+30     	; 0x3de8 <malloc+0x120>
    3dca:	ac 01       	movw	r20, r24
    3dcc:	4e 5f       	subi	r20, 0xFE	; 254
    3dce:	5f 4f       	sbci	r21, 0xFF	; 255
    3dd0:	24 17       	cp	r18, r20
    3dd2:	35 07       	cpc	r19, r21
    3dd4:	48 f0       	brcs	.+18     	; 0x3de8 <malloc+0x120>
    3dd6:	4e 0f       	add	r20, r30
    3dd8:	5f 1f       	adc	r21, r31
    3dda:	40 93 42 23 	sts	0x2342, r20	; 0x802342 <__brkval>
    3dde:	50 93 43 23 	sts	0x2343, r21	; 0x802343 <__brkval+0x1>
    3de2:	81 93       	st	Z+, r24
    3de4:	91 93       	st	Z+, r25
    3de6:	02 c0       	rjmp	.+4      	; 0x3dec <malloc+0x124>
    3de8:	e0 e0       	ldi	r30, 0x00	; 0
    3dea:	f0 e0       	ldi	r31, 0x00	; 0
    3dec:	cf 01       	movw	r24, r30
    3dee:	df 91       	pop	r29
    3df0:	cf 91       	pop	r28
    3df2:	1f 91       	pop	r17
    3df4:	0f 91       	pop	r16
    3df6:	08 95       	ret

00003df8 <free>:
    3df8:	cf 93       	push	r28
    3dfa:	df 93       	push	r29
    3dfc:	00 97       	sbiw	r24, 0x00	; 0
    3dfe:	09 f4       	brne	.+2      	; 0x3e02 <free+0xa>
    3e00:	81 c0       	rjmp	.+258    	; 0x3f04 <free+0x10c>
    3e02:	fc 01       	movw	r30, r24
    3e04:	32 97       	sbiw	r30, 0x02	; 2
    3e06:	12 82       	std	Z+2, r1	; 0x02
    3e08:	13 82       	std	Z+3, r1	; 0x03
    3e0a:	a0 91 44 23 	lds	r26, 0x2344	; 0x802344 <__flp>
    3e0e:	b0 91 45 23 	lds	r27, 0x2345	; 0x802345 <__flp+0x1>
    3e12:	10 97       	sbiw	r26, 0x00	; 0
    3e14:	81 f4       	brne	.+32     	; 0x3e36 <free+0x3e>
    3e16:	20 81       	ld	r18, Z
    3e18:	31 81       	ldd	r19, Z+1	; 0x01
    3e1a:	82 0f       	add	r24, r18
    3e1c:	93 1f       	adc	r25, r19
    3e1e:	20 91 42 23 	lds	r18, 0x2342	; 0x802342 <__brkval>
    3e22:	30 91 43 23 	lds	r19, 0x2343	; 0x802343 <__brkval+0x1>
    3e26:	28 17       	cp	r18, r24
    3e28:	39 07       	cpc	r19, r25
    3e2a:	51 f5       	brne	.+84     	; 0x3e80 <free+0x88>
    3e2c:	e0 93 42 23 	sts	0x2342, r30	; 0x802342 <__brkval>
    3e30:	f0 93 43 23 	sts	0x2343, r31	; 0x802343 <__brkval+0x1>
    3e34:	67 c0       	rjmp	.+206    	; 0x3f04 <free+0x10c>
    3e36:	ed 01       	movw	r28, r26
    3e38:	20 e0       	ldi	r18, 0x00	; 0
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	ce 17       	cp	r28, r30
    3e3e:	df 07       	cpc	r29, r31
    3e40:	40 f4       	brcc	.+16     	; 0x3e52 <free+0x5a>
    3e42:	4a 81       	ldd	r20, Y+2	; 0x02
    3e44:	5b 81       	ldd	r21, Y+3	; 0x03
    3e46:	9e 01       	movw	r18, r28
    3e48:	41 15       	cp	r20, r1
    3e4a:	51 05       	cpc	r21, r1
    3e4c:	f1 f0       	breq	.+60     	; 0x3e8a <free+0x92>
    3e4e:	ea 01       	movw	r28, r20
    3e50:	f5 cf       	rjmp	.-22     	; 0x3e3c <free+0x44>
    3e52:	c2 83       	std	Z+2, r28	; 0x02
    3e54:	d3 83       	std	Z+3, r29	; 0x03
    3e56:	40 81       	ld	r20, Z
    3e58:	51 81       	ldd	r21, Z+1	; 0x01
    3e5a:	84 0f       	add	r24, r20
    3e5c:	95 1f       	adc	r25, r21
    3e5e:	c8 17       	cp	r28, r24
    3e60:	d9 07       	cpc	r29, r25
    3e62:	59 f4       	brne	.+22     	; 0x3e7a <free+0x82>
    3e64:	88 81       	ld	r24, Y
    3e66:	99 81       	ldd	r25, Y+1	; 0x01
    3e68:	84 0f       	add	r24, r20
    3e6a:	95 1f       	adc	r25, r21
    3e6c:	02 96       	adiw	r24, 0x02	; 2
    3e6e:	80 83       	st	Z, r24
    3e70:	91 83       	std	Z+1, r25	; 0x01
    3e72:	8a 81       	ldd	r24, Y+2	; 0x02
    3e74:	9b 81       	ldd	r25, Y+3	; 0x03
    3e76:	82 83       	std	Z+2, r24	; 0x02
    3e78:	93 83       	std	Z+3, r25	; 0x03
    3e7a:	21 15       	cp	r18, r1
    3e7c:	31 05       	cpc	r19, r1
    3e7e:	29 f4       	brne	.+10     	; 0x3e8a <free+0x92>
    3e80:	e0 93 44 23 	sts	0x2344, r30	; 0x802344 <__flp>
    3e84:	f0 93 45 23 	sts	0x2345, r31	; 0x802345 <__flp+0x1>
    3e88:	3d c0       	rjmp	.+122    	; 0x3f04 <free+0x10c>
    3e8a:	e9 01       	movw	r28, r18
    3e8c:	ea 83       	std	Y+2, r30	; 0x02
    3e8e:	fb 83       	std	Y+3, r31	; 0x03
    3e90:	49 91       	ld	r20, Y+
    3e92:	59 91       	ld	r21, Y+
    3e94:	c4 0f       	add	r28, r20
    3e96:	d5 1f       	adc	r29, r21
    3e98:	ec 17       	cp	r30, r28
    3e9a:	fd 07       	cpc	r31, r29
    3e9c:	61 f4       	brne	.+24     	; 0x3eb6 <free+0xbe>
    3e9e:	80 81       	ld	r24, Z
    3ea0:	91 81       	ldd	r25, Z+1	; 0x01
    3ea2:	84 0f       	add	r24, r20
    3ea4:	95 1f       	adc	r25, r21
    3ea6:	02 96       	adiw	r24, 0x02	; 2
    3ea8:	e9 01       	movw	r28, r18
    3eaa:	88 83       	st	Y, r24
    3eac:	99 83       	std	Y+1, r25	; 0x01
    3eae:	82 81       	ldd	r24, Z+2	; 0x02
    3eb0:	93 81       	ldd	r25, Z+3	; 0x03
    3eb2:	8a 83       	std	Y+2, r24	; 0x02
    3eb4:	9b 83       	std	Y+3, r25	; 0x03
    3eb6:	e0 e0       	ldi	r30, 0x00	; 0
    3eb8:	f0 e0       	ldi	r31, 0x00	; 0
    3eba:	12 96       	adiw	r26, 0x02	; 2
    3ebc:	8d 91       	ld	r24, X+
    3ebe:	9c 91       	ld	r25, X
    3ec0:	13 97       	sbiw	r26, 0x03	; 3
    3ec2:	00 97       	sbiw	r24, 0x00	; 0
    3ec4:	19 f0       	breq	.+6      	; 0x3ecc <free+0xd4>
    3ec6:	fd 01       	movw	r30, r26
    3ec8:	dc 01       	movw	r26, r24
    3eca:	f7 cf       	rjmp	.-18     	; 0x3eba <free+0xc2>
    3ecc:	8d 91       	ld	r24, X+
    3ece:	9c 91       	ld	r25, X
    3ed0:	11 97       	sbiw	r26, 0x01	; 1
    3ed2:	9d 01       	movw	r18, r26
    3ed4:	2e 5f       	subi	r18, 0xFE	; 254
    3ed6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ed8:	82 0f       	add	r24, r18
    3eda:	93 1f       	adc	r25, r19
    3edc:	20 91 42 23 	lds	r18, 0x2342	; 0x802342 <__brkval>
    3ee0:	30 91 43 23 	lds	r19, 0x2343	; 0x802343 <__brkval+0x1>
    3ee4:	28 17       	cp	r18, r24
    3ee6:	39 07       	cpc	r19, r25
    3ee8:	69 f4       	brne	.+26     	; 0x3f04 <free+0x10c>
    3eea:	30 97       	sbiw	r30, 0x00	; 0
    3eec:	29 f4       	brne	.+10     	; 0x3ef8 <free+0x100>
    3eee:	10 92 44 23 	sts	0x2344, r1	; 0x802344 <__flp>
    3ef2:	10 92 45 23 	sts	0x2345, r1	; 0x802345 <__flp+0x1>
    3ef6:	02 c0       	rjmp	.+4      	; 0x3efc <free+0x104>
    3ef8:	12 82       	std	Z+2, r1	; 0x02
    3efa:	13 82       	std	Z+3, r1	; 0x03
    3efc:	a0 93 42 23 	sts	0x2342, r26	; 0x802342 <__brkval>
    3f00:	b0 93 43 23 	sts	0x2343, r27	; 0x802343 <__brkval+0x1>
    3f04:	df 91       	pop	r29
    3f06:	cf 91       	pop	r28
    3f08:	08 95       	ret

00003f0a <memset>:
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	01 c0       	rjmp	.+2      	; 0x3f10 <memset+0x6>
    3f0e:	6d 93       	st	X+, r22
    3f10:	41 50       	subi	r20, 0x01	; 1
    3f12:	50 40       	sbci	r21, 0x00	; 0
    3f14:	e0 f7       	brcc	.-8      	; 0x3f0e <memset+0x4>
    3f16:	08 95       	ret

00003f18 <_exit>:
    3f18:	f8 94       	cli

00003f1a <__stop_program>:
    3f1a:	ff cf       	rjmp	.-2      	; 0x3f1a <__stop_program>
