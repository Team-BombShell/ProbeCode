
CanSat Probe Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006f50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00802000  00006f50  00006fe4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000042b  00802144  00802144  00007128  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007128  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006d8  00000000  00000000  000071c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00016312  00000000  00000000  000078a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006e63  00000000  00000000  0001dbb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000d397  00000000  00000000  00024a15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000179c  00000000  00000000  00031dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00035a12  00000000  00000000  00033548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007a5d  00000000  00000000  00068f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000628  00000000  00000000  000709b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000eb92  00000000  00000000  00070fe0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	d4 c1       	rjmp	.+936    	; 0x3aa <__ctors_end>
       2:	00 00       	nop
       4:	f8 c1       	rjmp	.+1008   	; 0x3f6 <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 c2 22 	jmp	0x4584	; 0x4584 <__vector_2>
       c:	f4 c1       	rjmp	.+1000   	; 0x3f6 <__bad_interrupt>
       e:	00 00       	nop
      10:	f2 c1       	rjmp	.+996    	; 0x3f6 <__bad_interrupt>
      12:	00 00       	nop
      14:	f0 c1       	rjmp	.+992    	; 0x3f6 <__bad_interrupt>
      16:	00 00       	nop
      18:	ee c1       	rjmp	.+988    	; 0x3f6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ec c1       	rjmp	.+984    	; 0x3f6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	ea c1       	rjmp	.+980    	; 0x3f6 <__bad_interrupt>
      22:	00 00       	nop
      24:	e8 c1       	rjmp	.+976    	; 0x3f6 <__bad_interrupt>
      26:	00 00       	nop
      28:	e6 c1       	rjmp	.+972    	; 0x3f6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e4 c1       	rjmp	.+968    	; 0x3f6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	e2 c1       	rjmp	.+964    	; 0x3f6 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c2       	rjmp	.+1264   	; 0x526 <__vector_13>
      36:	00 00       	nop
      38:	0c 94 1b 26 	jmp	0x4c36	; 0x4c36 <__vector_14>
      3c:	dc c1       	rjmp	.+952    	; 0x3f6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	da c1       	rjmp	.+948    	; 0x3f6 <__bad_interrupt>
      42:	00 00       	nop
      44:	d8 c1       	rjmp	.+944    	; 0x3f6 <__bad_interrupt>
      46:	00 00       	nop
      48:	d6 c1       	rjmp	.+940    	; 0x3f6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d4 c1       	rjmp	.+936    	; 0x3f6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	d2 c1       	rjmp	.+932    	; 0x3f6 <__bad_interrupt>
      52:	00 00       	nop
      54:	d0 c1       	rjmp	.+928    	; 0x3f6 <__bad_interrupt>
      56:	00 00       	nop
      58:	ce c1       	rjmp	.+924    	; 0x3f6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	cc c1       	rjmp	.+920    	; 0x3f6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ca c1       	rjmp	.+916    	; 0x3f6 <__bad_interrupt>
      62:	00 00       	nop
      64:	c8 c1       	rjmp	.+912    	; 0x3f6 <__bad_interrupt>
      66:	00 00       	nop
      68:	c6 c1       	rjmp	.+908    	; 0x3f6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	c4 c1       	rjmp	.+904    	; 0x3f6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	c2 c1       	rjmp	.+900    	; 0x3f6 <__bad_interrupt>
      72:	00 00       	nop
      74:	c0 c1       	rjmp	.+896    	; 0x3f6 <__bad_interrupt>
      76:	00 00       	nop
      78:	be c1       	rjmp	.+892    	; 0x3f6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bc c1       	rjmp	.+888    	; 0x3f6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ba c1       	rjmp	.+884    	; 0x3f6 <__bad_interrupt>
      82:	00 00       	nop
      84:	b8 c1       	rjmp	.+880    	; 0x3f6 <__bad_interrupt>
      86:	00 00       	nop
      88:	b6 c1       	rjmp	.+876    	; 0x3f6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b4 c1       	rjmp	.+872    	; 0x3f6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b2 c1       	rjmp	.+868    	; 0x3f6 <__bad_interrupt>
      92:	00 00       	nop
      94:	b0 c1       	rjmp	.+864    	; 0x3f6 <__bad_interrupt>
      96:	00 00       	nop
      98:	ae c1       	rjmp	.+860    	; 0x3f6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__vector_39>
      a0:	0c 94 28 18 	jmp	0x3050	; 0x3050 <__vector_40>
      a4:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <__vector_41>
      a8:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <__vector_42>
      ac:	a4 c1       	rjmp	.+840    	; 0x3f6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	a2 c1       	rjmp	.+836    	; 0x3f6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	a0 c1       	rjmp	.+832    	; 0x3f6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	9a c2       	rjmp	.+1332   	; 0x5ee <__vector_46>
      ba:	00 00       	nop
      bc:	9c c1       	rjmp	.+824    	; 0x3f6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	9a c1       	rjmp	.+820    	; 0x3f6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	98 c1       	rjmp	.+816    	; 0x3f6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	96 c1       	rjmp	.+812    	; 0x3f6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	94 c1       	rjmp	.+808    	; 0x3f6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	92 c1       	rjmp	.+804    	; 0x3f6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	90 c1       	rjmp	.+800    	; 0x3f6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	8e c1       	rjmp	.+796    	; 0x3f6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	8c c1       	rjmp	.+792    	; 0x3f6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	8a c1       	rjmp	.+788    	; 0x3f6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	88 c1       	rjmp	.+784    	; 0x3f6 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	86 c1       	rjmp	.+780    	; 0x3f6 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	84 c1       	rjmp	.+776    	; 0x3f6 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	82 c1       	rjmp	.+772    	; 0x3f6 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	80 c1       	rjmp	.+768    	; 0x3f6 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	7e c1       	rjmp	.+764    	; 0x3f6 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	7c c1       	rjmp	.+760    	; 0x3f6 <__bad_interrupt>
      fe:	00 00       	nop
     100:	7a c1       	rjmp	.+756    	; 0x3f6 <__bad_interrupt>
     102:	00 00       	nop
     104:	78 c1       	rjmp	.+752    	; 0x3f6 <__bad_interrupt>
     106:	00 00       	nop
     108:	76 c1       	rjmp	.+748    	; 0x3f6 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	74 c1       	rjmp	.+744    	; 0x3f6 <__bad_interrupt>
     10e:	00 00       	nop
     110:	72 c1       	rjmp	.+740    	; 0x3f6 <__bad_interrupt>
     112:	00 00       	nop
     114:	70 c1       	rjmp	.+736    	; 0x3f6 <__bad_interrupt>
     116:	00 00       	nop
     118:	6e c1       	rjmp	.+732    	; 0x3f6 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__vector_71>
     120:	0c 94 34 17 	jmp	0x2e68	; 0x2e68 <__vector_72>
     124:	0c 94 71 17 	jmp	0x2ee2	; 0x2ee2 <__vector_73>
     128:	0c 94 ae 17 	jmp	0x2f5c	; 0x2f5c <__vector_74>
     12c:	64 c1       	rjmp	.+712    	; 0x3f6 <__bad_interrupt>
     12e:	00 00       	nop
     130:	2c c2       	rjmp	.+1112   	; 0x58a <__vector_76>
     132:	00 00       	nop
     134:	0c 94 2f 26 	jmp	0x4c5e	; 0x4c5e <__vector_77>
     138:	5e c1       	rjmp	.+700    	; 0x3f6 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	5c c1       	rjmp	.+696    	; 0x3f6 <__bad_interrupt>
     13e:	00 00       	nop
     140:	5a c1       	rjmp	.+692    	; 0x3f6 <__bad_interrupt>
     142:	00 00       	nop
     144:	58 c1       	rjmp	.+688    	; 0x3f6 <__bad_interrupt>
     146:	00 00       	nop
     148:	56 c1       	rjmp	.+684    	; 0x3f6 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	54 c1       	rjmp	.+680    	; 0x3f6 <__bad_interrupt>
     14e:	00 00       	nop
     150:	52 c1       	rjmp	.+676    	; 0x3f6 <__bad_interrupt>
     152:	00 00       	nop
     154:	50 c1       	rjmp	.+672    	; 0x3f6 <__bad_interrupt>
     156:	00 00       	nop
     158:	4e c1       	rjmp	.+668    	; 0x3f6 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	4c c1       	rjmp	.+664    	; 0x3f6 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 b3 26 	jmp	0x4d66	; 0x4d66 <__vector_88>
     164:	48 c1       	rjmp	.+656    	; 0x3f6 <__bad_interrupt>
     166:	00 00       	nop
     168:	46 c1       	rjmp	.+652    	; 0x3f6 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	4c c3       	rjmp	.+1688   	; 0x806 <__vector_91>
     16e:	00 00       	nop
     170:	42 c1       	rjmp	.+644    	; 0x3f6 <__bad_interrupt>
     172:	00 00       	nop
     174:	ab c3       	rjmp	.+1878   	; 0x8cc <__vector_93>
     176:	00 00       	nop
     178:	3e c1       	rjmp	.+636    	; 0x3f6 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	3c c1       	rjmp	.+632    	; 0x3f6 <__bad_interrupt>
     17e:	00 00       	nop
     180:	3a c1       	rjmp	.+628    	; 0x3f6 <__bad_interrupt>
     182:	00 00       	nop
     184:	38 c1       	rjmp	.+624    	; 0x3f6 <__bad_interrupt>
     186:	00 00       	nop
     188:	36 c1       	rjmp	.+620    	; 0x3f6 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	34 c1       	rjmp	.+616    	; 0x3f6 <__bad_interrupt>
     18e:	00 00       	nop
     190:	32 c1       	rjmp	.+612    	; 0x3f6 <__bad_interrupt>
     192:	00 00       	nop
     194:	30 c1       	rjmp	.+608    	; 0x3f6 <__bad_interrupt>
     196:	00 00       	nop
     198:	2e c1       	rjmp	.+604    	; 0x3f6 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	2c c1       	rjmp	.+600    	; 0x3f6 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	2a c1       	rjmp	.+596    	; 0x3f6 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	28 c1       	rjmp	.+592    	; 0x3f6 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	26 c1       	rjmp	.+588    	; 0x3f6 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	52 c2       	rjmp	.+1188   	; 0x652 <__vector_107>
     1ae:	00 00       	nop
     1b0:	22 c1       	rjmp	.+580    	; 0x3f6 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	20 c1       	rjmp	.+576    	; 0x3f6 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	1e c1       	rjmp	.+572    	; 0x3f6 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	1c c1       	rjmp	.+568    	; 0x3f6 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	1a c1       	rjmp	.+564    	; 0x3f6 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	18 c1       	rjmp	.+560    	; 0x3f6 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	16 c1       	rjmp	.+556    	; 0x3f6 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	14 c1       	rjmp	.+552    	; 0x3f6 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	12 c1       	rjmp	.+548    	; 0x3f6 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	10 c1       	rjmp	.+544    	; 0x3f6 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	0e c1       	rjmp	.+540    	; 0x3f6 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	0c c1       	rjmp	.+536    	; 0x3f6 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	0a c1       	rjmp	.+532    	; 0x3f6 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	08 c1       	rjmp	.+528    	; 0x3f6 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	06 c1       	rjmp	.+524    	; 0x3f6 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	04 c1       	rjmp	.+520    	; 0x3f6 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	02 c1       	rjmp	.+516    	; 0x3f6 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	00 c1       	rjmp	.+512    	; 0x3f6 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	fe c0       	rjmp	.+508    	; 0x3f6 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	e5 26       	eor	r14, r21
     1fe:	06 27       	eor	r16, r22
     200:	eb 26       	eor	r14, r27
     202:	ef 26       	eor	r14, r31
     204:	f3 26       	eor	r15, r19
     206:	fa 26       	eor	r15, r26
     208:	06 27       	eor	r16, r22
     20a:	00 27       	eor	r16, r16
     20c:	03 27       	eor	r16, r19
     20e:	fd 26       	eor	r15, r29
     210:	06 27       	eor	r16, r22
     212:	06 27       	eor	r16, r22
     214:	06 27       	eor	r16, r22
     216:	06 27       	eor	r16, r22
     218:	06 27       	eor	r16, r22
     21a:	06 27       	eor	r16, r22
     21c:	06 27       	eor	r16, r22
     21e:	06 27       	eor	r16, r22
     220:	06 27       	eor	r16, r22
     222:	06 27       	eor	r16, r22
     224:	06 27       	eor	r16, r22
     226:	06 27       	eor	r16, r22
     228:	06 27       	eor	r16, r22
     22a:	06 27       	eor	r16, r22
     22c:	06 27       	eor	r16, r22
     22e:	06 27       	eor	r16, r22
     230:	06 27       	eor	r16, r22
     232:	06 27       	eor	r16, r22
     234:	06 27       	eor	r16, r22
     236:	06 27       	eor	r16, r22
     238:	06 27       	eor	r16, r22
     23a:	e8 26       	eor	r14, r24
     23c:	06 27       	eor	r16, r22
     23e:	06 27       	eor	r16, r22
     240:	06 27       	eor	r16, r22
     242:	06 27       	eor	r16, r22
     244:	06 27       	eor	r16, r22
     246:	06 27       	eor	r16, r22
     248:	06 27       	eor	r16, r22
     24a:	06 27       	eor	r16, r22
     24c:	06 27       	eor	r16, r22
     24e:	06 27       	eor	r16, r22
     250:	06 27       	eor	r16, r22
     252:	06 27       	eor	r16, r22
     254:	06 27       	eor	r16, r22
     256:	06 27       	eor	r16, r22
     258:	06 27       	eor	r16, r22
     25a:	06 27       	eor	r16, r22
     25c:	06 27       	eor	r16, r22
     25e:	06 27       	eor	r16, r22
     260:	06 27       	eor	r16, r22
     262:	06 27       	eor	r16, r22
     264:	06 27       	eor	r16, r22
     266:	06 27       	eor	r16, r22
     268:	06 27       	eor	r16, r22
     26a:	06 27       	eor	r16, r22
     26c:	06 27       	eor	r16, r22
     26e:	06 27       	eor	r16, r22
     270:	06 27       	eor	r16, r22
     272:	06 27       	eor	r16, r22
     274:	06 27       	eor	r16, r22
     276:	f7 26       	eor	r15, r23
     278:	05 27       	eor	r16, r21
     27a:	08 4a       	sbci	r16, 0xA8	; 168
     27c:	d7 3b       	cpi	r29, 0xB7	; 183
     27e:	3b ce       	rjmp	.-906    	; 0xfffffef6 <__eeprom_end+0xff7efef6>
     280:	01 6e       	ori	r16, 0xE1	; 225
     282:	84 bc       	out	0x24, r8	; 36
     284:	bf fd       	.word	0xfdbf	; ????
     286:	c1 2f       	mov	r28, r17
     288:	3d 6c       	ori	r19, 0xCD	; 205
     28a:	74 31       	cpi	r23, 0x14	; 20
     28c:	9a bd       	out	0x2a, r25	; 42
     28e:	56 83       	std	Z+6, r21	; 0x06
     290:	3d da       	rcall	.-2950   	; 0xfffff70c <__eeprom_end+0xff7ef70c>
     292:	3d 00       	.word	0x003d	; ????
     294:	c7 7f       	andi	r28, 0xF7	; 247
     296:	11 be       	out	0x31, r1	; 49
     298:	d9 e4       	ldi	r29, 0x49	; 73
     29a:	bb 4c       	sbci	r27, 0xCB	; 203
     29c:	3e 91       	ld	r19, -X
     29e:	6b aa       	std	Y+51, r6	; 0x33
     2a0:	aa be       	out	0x3a, r10	; 58
     2a2:	00 00       	nop
     2a4:	00 80       	ld	r0, Z
     2a6:	3f 00       	.word	0x003f	; ????

000002a8 <__trampolines_end>:
     2a8:	6e 61       	ori	r22, 0x1E	; 30
     2aa:	6e 00       	.word	0x006e	; ????

000002ac <__c.2332>:
     2ac:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     2bc:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2cc:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2dc:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2ec:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2fc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     30c:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     31c:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     32c:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     33c:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     34c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     35c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     36c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     37c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     38c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     39c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003aa <__ctors_end>:
     3aa:	11 24       	eor	r1, r1
     3ac:	1f be       	out	0x3f, r1	; 63
     3ae:	cf ef       	ldi	r28, 0xFF	; 255
     3b0:	cd bf       	out	0x3d, r28	; 61
     3b2:	df e3       	ldi	r29, 0x3F	; 63
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	00 e0       	ldi	r16, 0x00	; 0
     3b8:	0c bf       	out	0x3c, r16	; 60
     3ba:	18 be       	out	0x38, r1	; 56
     3bc:	19 be       	out	0x39, r1	; 57
     3be:	1a be       	out	0x3a, r1	; 58
     3c0:	1b be       	out	0x3b, r1	; 59

000003c2 <__do_copy_data>:
     3c2:	11 e2       	ldi	r17, 0x21	; 33
     3c4:	a0 e0       	ldi	r26, 0x00	; 0
     3c6:	b0 e2       	ldi	r27, 0x20	; 32
     3c8:	e0 e5       	ldi	r30, 0x50	; 80
     3ca:	ff e6       	ldi	r31, 0x6F	; 111
     3cc:	00 e0       	ldi	r16, 0x00	; 0
     3ce:	0b bf       	out	0x3b, r16	; 59
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <__do_copy_data+0x14>
     3d2:	07 90       	elpm	r0, Z+
     3d4:	0d 92       	st	X+, r0
     3d6:	a4 34       	cpi	r26, 0x44	; 68
     3d8:	b1 07       	cpc	r27, r17
     3da:	d9 f7       	brne	.-10     	; 0x3d2 <__do_copy_data+0x10>
     3dc:	1b be       	out	0x3b, r1	; 59

000003de <__do_clear_bss>:
     3de:	25 e2       	ldi	r18, 0x25	; 37
     3e0:	a4 e4       	ldi	r26, 0x44	; 68
     3e2:	b1 e2       	ldi	r27, 0x21	; 33
     3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <.do_clear_bss_start>

000003e6 <.do_clear_bss_loop>:
     3e6:	1d 92       	st	X+, r1

000003e8 <.do_clear_bss_start>:
     3e8:	af 36       	cpi	r26, 0x6F	; 111
     3ea:	b2 07       	cpc	r27, r18
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <.do_clear_bss_loop>
     3ee:	0e 94 a1 28 	call	0x5142	; 0x5142 <main>
     3f2:	0c 94 a6 37 	jmp	0x6f4c	; 0x6f4c <_exit>

000003f6 <__bad_interrupt>:
     3f6:	04 ce       	rjmp	.-1016   	; 0x0 <__vectors>

000003f8 <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     3fc:	e0 91 44 21 	lds	r30, 0x2144	; 0x802144 <__data_end>
     400:	f0 91 45 21 	lds	r31, 0x2145	; 0x802145 <__data_end+0x1>
     404:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     406:	83 ff       	sbrs	r24, 3
     408:	08 c0       	rjmp	.+16     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     40a:	88 60       	ori	r24, 0x08	; 8
     40c:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     412:	86 ef       	ldi	r24, 0xF6	; 246
     414:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <__data_end+0xa>
     418:	83 c0       	rjmp	.+262    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     41a:	98 2f       	mov	r25, r24
     41c:	94 71       	andi	r25, 0x14	; 20
     41e:	31 f0       	breq	.+12     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     420:	83 e0       	ldi	r24, 0x03	; 3
     422:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     424:	8f ef       	ldi	r24, 0xFF	; 255
     426:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <__data_end+0xa>
     42a:	7a c0       	rjmp	.+244    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     42c:	86 ff       	sbrs	r24, 6
     42e:	43 c0       	rjmp	.+134    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     430:	c4 e4       	ldi	r28, 0x44	; 68
     432:	d1 e2       	ldi	r29, 0x21	; 33
     434:	aa 81       	ldd	r26, Y+2	; 0x02
     436:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     438:	8c 81       	ldd	r24, Y+4	; 0x04
     43a:	9d 81       	ldd	r25, Y+5	; 0x05
     43c:	14 96       	adiw	r26, 0x04	; 4
     43e:	2d 91       	ld	r18, X+
     440:	3c 91       	ld	r19, X
     442:	15 97       	sbiw	r26, 0x05	; 5
     444:	82 17       	cp	r24, r18
     446:	93 07       	cpc	r25, r19
     448:	6c f4       	brge	.+26     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     44a:	9c 01       	movw	r18, r24
     44c:	2f 5f       	subi	r18, 0xFF	; 255
     44e:	3f 4f       	sbci	r19, 0xFF	; 255
     450:	20 93 48 21 	sts	0x2148, r18	; 0x802148 <__data_end+0x4>
     454:	30 93 49 21 	sts	0x2149, r19	; 0x802149 <__data_end+0x5>
     458:	a8 0f       	add	r26, r24
     45a:	b9 1f       	adc	r27, r25
     45c:	11 96       	adiw	r26, 0x01	; 1
     45e:	8c 91       	ld	r24, X
     460:	87 83       	std	Z+7, r24	; 0x07
     462:	5e c0       	rjmp	.+188    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

	} else if (transfer.data_count < pkg->length) {
     464:	80 91 4a 21 	lds	r24, 0x214A	; 0x80214a <__data_end+0x6>
     468:	90 91 4b 21 	lds	r25, 0x214B	; 0x80214b <__data_end+0x7>
     46c:	18 96       	adiw	r26, 0x08	; 8
     46e:	2d 91       	ld	r18, X+
     470:	3c 91       	ld	r19, X
     472:	19 97       	sbiw	r26, 0x09	; 9
     474:	82 17       	cp	r24, r18
     476:	93 07       	cpc	r25, r19
     478:	c8 f4       	brcc	.+50     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>

		if (transfer.read) {
     47a:	20 91 4c 21 	lds	r18, 0x214C	; 0x80214c <__data_end+0x8>
     47e:	22 23       	and	r18, r18
     480:	21 f0       	breq	.+8      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     482:	86 81       	ldd	r24, Z+6	; 0x06
     484:	81 60       	ori	r24, 0x01	; 1
     486:	86 83       	std	Z+6, r24	; 0x06
     488:	4b c0       	rjmp	.+150    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

		} else {
			const uint8_t * const data = pkg->buffer;
     48a:	16 96       	adiw	r26, 0x06	; 6
     48c:	2d 91       	ld	r18, X+
     48e:	3c 91       	ld	r19, X
     490:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     492:	ac 01       	movw	r20, r24
     494:	4f 5f       	subi	r20, 0xFF	; 255
     496:	5f 4f       	sbci	r21, 0xFF	; 255
     498:	40 93 4a 21 	sts	0x214A, r20	; 0x80214a <__data_end+0x6>
     49c:	50 93 4b 21 	sts	0x214B, r21	; 0x80214b <__data_end+0x7>
     4a0:	d9 01       	movw	r26, r18
     4a2:	a8 0f       	add	r26, r24
     4a4:	b9 1f       	adc	r27, r25
     4a6:	8c 91       	ld	r24, X
     4a8:	87 83       	std	Z+7, r24	; 0x07
     4aa:	3a c0       	rjmp	.+116    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     4ac:	83 e0       	ldi	r24, 0x03	; 3
     4ae:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     4b0:	10 92 4e 21 	sts	0x214E, r1	; 0x80214e <__data_end+0xa>
     4b4:	35 c0       	rjmp	.+106    	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     4b6:	88 23       	and	r24, r24
     4b8:	84 f5       	brge	.+96     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     4ba:	a4 e4       	ldi	r26, 0x44	; 68
     4bc:	b1 e2       	ldi	r27, 0x21	; 33
     4be:	12 96       	adiw	r26, 0x02	; 2
     4c0:	cd 91       	ld	r28, X+
     4c2:	dc 91       	ld	r29, X
     4c4:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     4c6:	16 96       	adiw	r26, 0x06	; 6
     4c8:	8d 91       	ld	r24, X+
     4ca:	9c 91       	ld	r25, X
     4cc:	17 97       	sbiw	r26, 0x07	; 7
     4ce:	28 85       	ldd	r18, Y+8	; 0x08
     4d0:	39 85       	ldd	r19, Y+9	; 0x09
     4d2:	82 17       	cp	r24, r18
     4d4:	93 07       	cpc	r25, r19
     4d6:	d8 f4       	brcc	.+54     	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>

		uint8_t * const data = pkg->buffer;
     4d8:	6e 81       	ldd	r22, Y+6	; 0x06
     4da:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     4dc:	9c 01       	movw	r18, r24
     4de:	2f 5f       	subi	r18, 0xFF	; 255
     4e0:	3f 4f       	sbci	r19, 0xFF	; 255
     4e2:	20 93 4a 21 	sts	0x214A, r18	; 0x80214a <__data_end+0x6>
     4e6:	30 93 4b 21 	sts	0x214B, r19	; 0x80214b <__data_end+0x7>
     4ea:	47 81       	ldd	r20, Z+7	; 0x07
     4ec:	db 01       	movw	r26, r22
     4ee:	a8 0f       	add	r26, r24
     4f0:	b9 1f       	adc	r27, r25
     4f2:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     4f4:	88 85       	ldd	r24, Y+8	; 0x08
     4f6:	99 85       	ldd	r25, Y+9	; 0x09
     4f8:	28 17       	cp	r18, r24
     4fa:	39 07       	cpc	r19, r25
     4fc:	18 f4       	brcc	.+6      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	83 83       	std	Z+3, r24	; 0x03
     502:	0e c0       	rjmp	.+28     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     504:	87 e0       	ldi	r24, 0x07	; 7
     506:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     508:	10 92 4e 21 	sts	0x214E, r1	; 0x80214e <__data_end+0xa>
     50c:	09 c0       	rjmp	.+18     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     50e:	83 e0       	ldi	r24, 0x03	; 3
     510:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     512:	89 ef       	ldi	r24, 0xF9	; 249
     514:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <__data_end+0xa>
     518:	03 c0       	rjmp	.+6      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     51a:	8b ef       	ldi	r24, 0xFB	; 251
     51c:	80 93 4e 21 	sts	0x214E, r24	; 0x80214e <__data_end+0xa>
	}
}
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     526:	1f 92       	push	r1
     528:	0f 92       	push	r0
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	0f 92       	push	r0
     52e:	11 24       	eor	r1, r1
     530:	08 b6       	in	r0, 0x38	; 56
     532:	0f 92       	push	r0
     534:	18 be       	out	0x38, r1	; 56
     536:	09 b6       	in	r0, 0x39	; 57
     538:	0f 92       	push	r0
     53a:	19 be       	out	0x39, r1	; 57
     53c:	0b b6       	in	r0, 0x3b	; 59
     53e:	0f 92       	push	r0
     540:	1b be       	out	0x3b, r1	; 59
     542:	2f 93       	push	r18
     544:	3f 93       	push	r19
     546:	4f 93       	push	r20
     548:	5f 93       	push	r21
     54a:	6f 93       	push	r22
     54c:	7f 93       	push	r23
     54e:	8f 93       	push	r24
     550:	9f 93       	push	r25
     552:	af 93       	push	r26
     554:	bf 93       	push	r27
     556:	ef 93       	push	r30
     558:	ff 93       	push	r31
     55a:	4e df       	rcall	.-356    	; 0x3f8 <twim_interrupt_handler>
     55c:	ff 91       	pop	r31
     55e:	ef 91       	pop	r30
     560:	bf 91       	pop	r27
     562:	af 91       	pop	r26
     564:	9f 91       	pop	r25
     566:	8f 91       	pop	r24
     568:	7f 91       	pop	r23
     56a:	6f 91       	pop	r22
     56c:	5f 91       	pop	r21
     56e:	4f 91       	pop	r20
     570:	3f 91       	pop	r19
     572:	2f 91       	pop	r18
     574:	0f 90       	pop	r0
     576:	0b be       	out	0x3b, r0	; 59
     578:	0f 90       	pop	r0
     57a:	09 be       	out	0x39, r0	; 57
     57c:	0f 90       	pop	r0
     57e:	08 be       	out	0x38, r0	; 56
     580:	0f 90       	pop	r0
     582:	0f be       	out	0x3f, r0	; 63
     584:	0f 90       	pop	r0
     586:	1f 90       	pop	r1
     588:	18 95       	reti

0000058a <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     58a:	1f 92       	push	r1
     58c:	0f 92       	push	r0
     58e:	0f b6       	in	r0, 0x3f	; 63
     590:	0f 92       	push	r0
     592:	11 24       	eor	r1, r1
     594:	08 b6       	in	r0, 0x38	; 56
     596:	0f 92       	push	r0
     598:	18 be       	out	0x38, r1	; 56
     59a:	09 b6       	in	r0, 0x39	; 57
     59c:	0f 92       	push	r0
     59e:	19 be       	out	0x39, r1	; 57
     5a0:	0b b6       	in	r0, 0x3b	; 59
     5a2:	0f 92       	push	r0
     5a4:	1b be       	out	0x3b, r1	; 59
     5a6:	2f 93       	push	r18
     5a8:	3f 93       	push	r19
     5aa:	4f 93       	push	r20
     5ac:	5f 93       	push	r21
     5ae:	6f 93       	push	r22
     5b0:	7f 93       	push	r23
     5b2:	8f 93       	push	r24
     5b4:	9f 93       	push	r25
     5b6:	af 93       	push	r26
     5b8:	bf 93       	push	r27
     5ba:	ef 93       	push	r30
     5bc:	ff 93       	push	r31
     5be:	1c df       	rcall	.-456    	; 0x3f8 <twim_interrupt_handler>
     5c0:	ff 91       	pop	r31
     5c2:	ef 91       	pop	r30
     5c4:	bf 91       	pop	r27
     5c6:	af 91       	pop	r26
     5c8:	9f 91       	pop	r25
     5ca:	8f 91       	pop	r24
     5cc:	7f 91       	pop	r23
     5ce:	6f 91       	pop	r22
     5d0:	5f 91       	pop	r21
     5d2:	4f 91       	pop	r20
     5d4:	3f 91       	pop	r19
     5d6:	2f 91       	pop	r18
     5d8:	0f 90       	pop	r0
     5da:	0b be       	out	0x3b, r0	; 59
     5dc:	0f 90       	pop	r0
     5de:	09 be       	out	0x39, r0	; 57
     5e0:	0f 90       	pop	r0
     5e2:	08 be       	out	0x38, r0	; 56
     5e4:	0f 90       	pop	r0
     5e6:	0f be       	out	0x3f, r0	; 63
     5e8:	0f 90       	pop	r0
     5ea:	1f 90       	pop	r1
     5ec:	18 95       	reti

000005ee <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     5ee:	1f 92       	push	r1
     5f0:	0f 92       	push	r0
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	0f 92       	push	r0
     5f6:	11 24       	eor	r1, r1
     5f8:	08 b6       	in	r0, 0x38	; 56
     5fa:	0f 92       	push	r0
     5fc:	18 be       	out	0x38, r1	; 56
     5fe:	09 b6       	in	r0, 0x39	; 57
     600:	0f 92       	push	r0
     602:	19 be       	out	0x39, r1	; 57
     604:	0b b6       	in	r0, 0x3b	; 59
     606:	0f 92       	push	r0
     608:	1b be       	out	0x3b, r1	; 59
     60a:	2f 93       	push	r18
     60c:	3f 93       	push	r19
     60e:	4f 93       	push	r20
     610:	5f 93       	push	r21
     612:	6f 93       	push	r22
     614:	7f 93       	push	r23
     616:	8f 93       	push	r24
     618:	9f 93       	push	r25
     61a:	af 93       	push	r26
     61c:	bf 93       	push	r27
     61e:	ef 93       	push	r30
     620:	ff 93       	push	r31
     622:	ea de       	rcall	.-556    	; 0x3f8 <twim_interrupt_handler>
     624:	ff 91       	pop	r31
     626:	ef 91       	pop	r30
     628:	bf 91       	pop	r27
     62a:	af 91       	pop	r26
     62c:	9f 91       	pop	r25
     62e:	8f 91       	pop	r24
     630:	7f 91       	pop	r23
     632:	6f 91       	pop	r22
     634:	5f 91       	pop	r21
     636:	4f 91       	pop	r20
     638:	3f 91       	pop	r19
     63a:	2f 91       	pop	r18
     63c:	0f 90       	pop	r0
     63e:	0b be       	out	0x3b, r0	; 59
     640:	0f 90       	pop	r0
     642:	09 be       	out	0x39, r0	; 57
     644:	0f 90       	pop	r0
     646:	08 be       	out	0x38, r0	; 56
     648:	0f 90       	pop	r0
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	0f 90       	pop	r0
     64e:	1f 90       	pop	r1
     650:	18 95       	reti

00000652 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     652:	1f 92       	push	r1
     654:	0f 92       	push	r0
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	0f 92       	push	r0
     65a:	11 24       	eor	r1, r1
     65c:	08 b6       	in	r0, 0x38	; 56
     65e:	0f 92       	push	r0
     660:	18 be       	out	0x38, r1	; 56
     662:	09 b6       	in	r0, 0x39	; 57
     664:	0f 92       	push	r0
     666:	19 be       	out	0x39, r1	; 57
     668:	0b b6       	in	r0, 0x3b	; 59
     66a:	0f 92       	push	r0
     66c:	1b be       	out	0x3b, r1	; 59
     66e:	2f 93       	push	r18
     670:	3f 93       	push	r19
     672:	4f 93       	push	r20
     674:	5f 93       	push	r21
     676:	6f 93       	push	r22
     678:	7f 93       	push	r23
     67a:	8f 93       	push	r24
     67c:	9f 93       	push	r25
     67e:	af 93       	push	r26
     680:	bf 93       	push	r27
     682:	ef 93       	push	r30
     684:	ff 93       	push	r31
     686:	b8 de       	rcall	.-656    	; 0x3f8 <twim_interrupt_handler>
     688:	ff 91       	pop	r31
     68a:	ef 91       	pop	r30
     68c:	bf 91       	pop	r27
     68e:	af 91       	pop	r26
     690:	9f 91       	pop	r25
     692:	8f 91       	pop	r24
     694:	7f 91       	pop	r23
     696:	6f 91       	pop	r22
     698:	5f 91       	pop	r21
     69a:	4f 91       	pop	r20
     69c:	3f 91       	pop	r19
     69e:	2f 91       	pop	r18
     6a0:	0f 90       	pop	r0
     6a2:	0b be       	out	0x3b, r0	; 59
     6a4:	0f 90       	pop	r0
     6a6:	09 be       	out	0x39, r0	; 57
     6a8:	0f 90       	pop	r0
     6aa:	08 be       	out	0x38, r0	; 56
     6ac:	0f 90       	pop	r0
     6ae:	0f be       	out	0x3f, r0	; 63
     6b0:	0f 90       	pop	r0
     6b2:	1f 90       	pop	r1
     6b4:	18 95       	reti

000006b6 <twi_master_init>:
 *                  (see \ref twi_options_t)
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arguments in \c opt.
 */
status_code_t twi_master_init(TWI_t *twi, const twi_options_t *opt)
{
     6b6:	fc 01       	movw	r30, r24
	uint8_t const ctrla = CONF_TWIM_INTLVL | TWI_MASTER_RIEN_bm |
		TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;

	twi->MASTER.BAUD   = opt->speed_reg;
     6b8:	db 01       	movw	r26, r22
     6ba:	14 96       	adiw	r26, 0x04	; 4
     6bc:	8c 91       	ld	r24, X
     6be:	85 83       	std	Z+5, r24	; 0x05
	twi->MASTER.CTRLA  = ctrla;
     6c0:	88 eb       	ldi	r24, 0xB8	; 184
     6c2:	81 83       	std	Z+1, r24	; 0x01
	twi->MASTER.STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	84 83       	std	Z+4, r24	; 0x04

	transfer.locked    = false;
     6c8:	e4 e4       	ldi	r30, 0x44	; 68
     6ca:	f1 e2       	ldi	r31, 0x21	; 33
     6cc:	11 86       	std	Z+9, r1	; 0x09
	transfer.status    = STATUS_OK;
     6ce:	12 86       	std	Z+10, r1	; 0x0a

	/* Enable configured PMIC interrupt level. */

	PMIC.CTRL |= CONF_PMIC_INTLVL;
     6d0:	e0 ea       	ldi	r30, 0xA0	; 160
     6d2:	f0 e0       	ldi	r31, 0x00	; 0
     6d4:	82 81       	ldd	r24, Z+2	; 0x02
     6d6:	82 60       	ori	r24, 0x02	; 2
     6d8:	82 83       	std	Z+2, r24	; 0x02

	cpu_irq_enable();
     6da:	78 94       	sei

	return STATUS_OK;
}
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	08 95       	ret

000006e0 <twi_master_transfer>:
 *      - ERR_PROTOCOL to indicate an unexpected bus state
 *      - ERR_INVALID_ARG to indicate invalid arguments.
 */
status_code_t twi_master_transfer(TWI_t *twi,
		const twi_package_t *package, bool read)
{
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	1f 92       	push	r1
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
     6ea:	9c 01       	movw	r18, r24
     6ec:	fb 01       	movw	r30, r22
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
     6ee:	89 2b       	or	r24, r25
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <twi_master_transfer+0x14>
     6f2:	51 c0       	rjmp	.+162    	; 0x796 <twi_master_transfer+0xb6>
     6f4:	30 97       	sbiw	r30, 0x00	; 0
     6f6:	09 f4       	brne	.+2      	; 0x6fa <twi_master_transfer+0x1a>
     6f8:	50 c0       	rjmp	.+160    	; 0x79a <twi_master_transfer+0xba>
		return ERR_INVALID_ARG;
	}

	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);
     6fa:	92 85       	ldd	r25, Z+10	; 0x0a
 *
 * \return STATUS_OK if the bus is acquired, else ERR_BUSY.
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {
     6fc:	80 91 4d 21 	lds	r24, 0x214D	; 0x80214d <__data_end+0x9>
     700:	88 23       	and	r24, r24
     702:	19 f0       	breq	.+6      	; 0x70a <twi_master_transfer+0x2a>

		if (no_wait) { return ERR_BUSY; }
     704:	99 23       	and	r25, r25
     706:	f1 f3       	breq	.-4      	; 0x704 <twi_master_transfer+0x24>
     708:	4a c0       	rjmp	.+148    	; 0x79e <twi_master_transfer+0xbe>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     70a:	8f b7       	in	r24, 0x3f	; 63
     70c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     70e:	f8 94       	cli
	return flags;
     710:	89 81       	ldd	r24, Y+1	; 0x01
	}

	irqflags_t const flags = cpu_irq_save ();

	transfer.locked = true;
     712:	a4 e4       	ldi	r26, 0x44	; 68
     714:	b1 e2       	ldi	r27, 0x21	; 33
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	19 96       	adiw	r26, 0x09	; 9
     71a:	9c 93       	st	X, r25
     71c:	19 97       	sbiw	r26, 0x09	; 9
	transfer.status = OPERATION_IN_PROGRESS;
     71e:	90 e8       	ldi	r25, 0x80	; 128
     720:	1a 96       	adiw	r26, 0x0a	; 10
     722:	9c 93       	st	X, r25
     724:	1a 97       	sbiw	r26, 0x0a	; 10
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     726:	8f bf       	out	0x3f, r24	; 63
	/* Initiate a transaction when the bus is ready. */

	status_code_t status = twim_acquire(package->no_wait);

	if (STATUS_OK == status) {
		transfer.bus         = (TWI_t *) twi;
     728:	2d 93       	st	X+, r18
     72a:	3c 93       	st	X, r19
     72c:	11 97       	sbiw	r26, 0x01	; 1
		transfer.pkg         = (twi_package_t *) package;
     72e:	12 96       	adiw	r26, 0x02	; 2
     730:	6d 93       	st	X+, r22
     732:	7c 93       	st	X, r23
     734:	13 97       	sbiw	r26, 0x03	; 3
		transfer.addr_count  = 0;
     736:	14 96       	adiw	r26, 0x04	; 4
     738:	1d 92       	st	X+, r1
     73a:	1c 92       	st	X, r1
     73c:	15 97       	sbiw	r26, 0x05	; 5
		transfer.data_count  = 0;
     73e:	16 96       	adiw	r26, 0x06	; 6
     740:	1d 92       	st	X+, r1
     742:	1c 92       	st	X, r1
     744:	17 97       	sbiw	r26, 0x07	; 7
		transfer.read        = read;
     746:	18 96       	adiw	r26, 0x08	; 8
     748:	4c 93       	st	X, r20

		uint8_t const chip = (package->chip) << 1;
     74a:	80 81       	ld	r24, Z
     74c:	88 0f       	add	r24, r24

		if (package->addr_length || (false == read)) {
     74e:	64 81       	ldd	r22, Z+4	; 0x04
     750:	75 81       	ldd	r23, Z+5	; 0x05
     752:	67 2b       	or	r22, r23
     754:	11 f4       	brne	.+4      	; 0x75a <twi_master_transfer+0x7a>
     756:	41 11       	cpse	r20, r1
     758:	03 c0       	rjmp	.+6      	; 0x760 <twi_master_transfer+0x80>
			transfer.bus->MASTER.ADDR = chip;
     75a:	f9 01       	movw	r30, r18
     75c:	86 83       	std	Z+6, r24	; 0x06
     75e:	03 c0       	rjmp	.+6      	; 0x766 <twi_master_transfer+0x86>
		} else if (read) {
			transfer.bus->MASTER.ADDR = chip | 0x01;
     760:	81 60       	ori	r24, 0x01	; 1
     762:	f9 01       	movw	r30, r18
     764:	86 83       	std	Z+6, r24	; 0x06
{
	/* First wait for the driver event handler to indicate something
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);
     766:	e4 e4       	ldi	r30, 0x44	; 68
     768:	f1 e2       	ldi	r31, 0x21	; 33
     76a:	92 85       	ldd	r25, Z+10	; 0x0a
     76c:	90 38       	cpi	r25, 0x80	; 128
     76e:	e9 f3       	breq	.-6      	; 0x76a <twi_master_transfer+0x8a>
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     770:	f9 01       	movw	r30, r18
     772:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     774:	83 70       	andi	r24, 0x03	; 3
     776:	81 30       	cpi	r24, 0x01	; 1
     778:	49 f0       	breq	.+18     	; 0x78c <twi_master_transfer+0xac>
     77a:	a4 e4       	ldi	r26, 0x44	; 68
     77c:	b1 e2       	ldi	r27, 0x21	; 33
     77e:	ed 91       	ld	r30, X+
     780:	fc 91       	ld	r31, X
     782:	11 97       	sbiw	r26, 0x01	; 1
 * \retval  false   The bus is currently busy.
 */
static inline bool twim_idle (const TWI_t * twi)
{

	return ((twi->MASTER.STATUS & TWI_MASTER_BUSSTATE_gm)
     784:	84 81       	ldd	r24, Z+4	; 0x04
	 * other than a transfer in-progress, then test the bus interface
	 * for an Idle bus state.
	 */
	while (OPERATION_IN_PROGRESS == transfer.status);

	while (! twim_idle(transfer.bus)) { barrier(); }
     786:	83 70       	andi	r24, 0x03	; 3
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	c9 f7       	brne	.-14     	; 0x77e <twi_master_transfer+0x9e>

	status_code_t const status = transfer.status;
     78c:	e4 e4       	ldi	r30, 0x44	; 68
     78e:	f1 e2       	ldi	r31, 0x21	; 33
     790:	82 85       	ldd	r24, Z+10	; 0x0a

	transfer.locked = false;
     792:	11 86       	std	Z+9, r1	; 0x09
     794:	05 c0       	rjmp	.+10     	; 0x7a0 <twi_master_transfer+0xc0>
		const twi_package_t *package, bool read)
{
	/* Do a sanity check on the arguments. */

	if ((twi == NULL) || (package == NULL)) {
		return ERR_INVALID_ARG;
     796:	88 ef       	ldi	r24, 0xF8	; 248
     798:	03 c0       	rjmp	.+6      	; 0x7a0 <twi_master_transfer+0xc0>
     79a:	88 ef       	ldi	r24, 0xF8	; 248
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <twi_master_transfer+0xc0>
 */
static inline status_code_t twim_acquire(bool no_wait)
{
	while (transfer.locked) {

		if (no_wait) { return ERR_BUSY; }
     79e:	86 ef       	ldi	r24, 0xF6	; 246

		status = twim_release();
	}

	return status;
}
     7a0:	0f 90       	pop	r0
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <wdt_reset_mcu>:
uint8_t temp;
	/*
	 * WDT enabled (minimum timeout period for max. security)
	 */
	temp = WDT_PER_8CLK_gc | (1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     7a8:	63 e0       	ldi	r22, 0x03	; 3
     7aa:	80 e8       	ldi	r24, 0x80	; 128
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 df 18 	call	0x31be	; 0x31be <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
     7b2:	e0 e8       	ldi	r30, 0x80	; 128
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	82 81       	ldd	r24, Z+2	; 0x02
     7b8:	80 fd       	sbrc	r24, 0
     7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <wdt_reset_mcu+0xe>
	wdt_wait_while_busy();
	/*
	 * WDT enabled (maximum window period for max. security)
	 */
	temp = WDT_WPER_8KCLK_gc | (1 << WDT_WEN_bp) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
     7bc:	6b e2       	ldi	r22, 0x2B	; 43
     7be:	81 e8       	ldi	r24, 0x81	; 129
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 df 18 	call	0x31be	; 0x31be <ccp_write_io>
     7c6:	e0 e8       	ldi	r30, 0x80	; 128
     7c8:	f0 e0       	ldi	r31, 0x00	; 0
     7ca:	82 81       	ldd	r24, Z+2	; 0x02
     7cc:	80 fd       	sbrc	r24, 0
     7ce:	fd cf       	rjmp	.-6      	; 0x7ca <wdt_reset_mcu+0x22>
	wdt_wait_while_busy();
	/*
	 * WDT Reset during window => WDT generates an Hard Reset.
	 */
	wdt_reset();
     7d0:	a8 95       	wdr
     7d2:	ff cf       	rjmp	.-2      	; 0x7d2 <wdt_reset_mcu+0x2a>

000007d4 <init_gps_interrupts>:
{
	/*	This function will be called once to set up the XBee port for sending/receiving interrupts
		It should not enable interrupts globally, just for receiving and sending on this one port
	*/
//	printf("y u no work");
	GPS_USART.CTRLA = 0b00010100; //RXint low-level, TXint low-level, DREint off;
     7d4:	84 e1       	ldi	r24, 0x14	; 20
     7d6:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <__TEXT_REGION_LENGTH__+0x7009b3>
	gpgga_index = 0;
     7da:	10 92 32 25 	sts	0x2532, r1	; 0x802532 <gpgga_index>
	uint8_t dollar_counter = 0;
	uint8_t current_sentence = SENTENCE_NONE;
	last_finished = SENTENCE_NONE;
     7de:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <last_finished>
     7e2:	08 95       	ret

000007e4 <init_gps_buffers>:
}

void init_gps_buffers(void)
/* Don't use the buffers before calling this. Please. It's kind of important. */
{
	rbu8_init(&gps_receive_buffer, RAW_gps_receive_buffer, GPS_RECEIVE_BUFFER_SIZE);
     7e4:	40 e0       	ldi	r20, 0x00	; 0
     7e6:	51 e0       	ldi	r21, 0x01	; 1
     7e8:	65 e9       	ldi	r22, 0x95	; 149
     7ea:	73 e2       	ldi	r23, 0x23	; 35
     7ec:	85 e3       	ldi	r24, 0x35	; 53
     7ee:	93 e2       	ldi	r25, 0x23	; 35
     7f0:	0e 94 ea 15 	call	0x2bd4	; 0x2bd4 <rbu8_init>
	rbu8_init(&gps_send_buffer, RAW_gps_send_buffer, GPS_TRANSMIT_BUFFER_SIZE);
     7f4:	40 e4       	ldi	r20, 0x40	; 64
     7f6:	50 e0       	ldi	r21, 0x00	; 0
     7f8:	65 e9       	ldi	r22, 0x95	; 149
     7fa:	74 e2       	ldi	r23, 0x24	; 36
     7fc:	85 ed       	ldi	r24, 0xD5	; 213
     7fe:	94 e2       	ldi	r25, 0x24	; 36
     800:	0c 94 ea 15 	jmp	0x2bd4	; 0x2bd4 <rbu8_init>
     804:	08 95       	ret

00000806 <__vector_91>:
}

ISR (GPS_RECEIVE_INTERRUPT_VECTOR)
{
     806:	1f 92       	push	r1
     808:	0f 92       	push	r0
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	0f 92       	push	r0
     80e:	11 24       	eor	r1, r1
     810:	08 b6       	in	r0, 0x38	; 56
     812:	0f 92       	push	r0
     814:	18 be       	out	0x38, r1	; 56
     816:	09 b6       	in	r0, 0x39	; 57
     818:	0f 92       	push	r0
     81a:	19 be       	out	0x39, r1	; 57
     81c:	0b b6       	in	r0, 0x3b	; 59
     81e:	0f 92       	push	r0
     820:	1b be       	out	0x3b, r1	; 59
     822:	2f 93       	push	r18
     824:	8f 93       	push	r24
     826:	9f 93       	push	r25
     828:	af 93       	push	r26
     82a:	bf 93       	push	r27
     82c:	ef 93       	push	r30
     82e:	ff 93       	push	r31
		It should not have any code that waits for anything. Examples include
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	uint8_t c = GPS_USART.DATA;
     830:	90 91 b0 09 	lds	r25, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	//printf("%c", c);
	//putchar(c);
	//putchar(c);
	if (current_sentence == SENTENCE_GPGGA)
     834:	80 91 94 23 	lds	r24, 0x2394	; 0x802394 <current_sentence>
     838:	81 30       	cpi	r24, 0x01	; 1
     83a:	51 f4       	brne	.+20     	; 0x850 <__vector_91+0x4a>
	{
		gpgga_buff[gpgga_index] = c;
     83c:	20 91 32 25 	lds	r18, 0x2532	; 0x802532 <gpgga_index>
     840:	e2 2f       	mov	r30, r18
     842:	f0 e0       	ldi	r31, 0x00	; 0
     844:	e3 52       	subi	r30, 0x23	; 35
     846:	fb 4d       	sbci	r31, 0xDB	; 219
     848:	90 83       	st	Z, r25
		gpgga_index++;
     84a:	2f 5f       	subi	r18, 0xFF	; 255
     84c:	20 93 32 25 	sts	0x2532, r18	; 0x802532 <gpgga_index>
		//printf("GPGGA %i = %i\n", gpgga_index, gpgga_buff[gpgga_index]);
	}	
	
	if (c == '\n')
     850:	9a 30       	cpi	r25, 0x0A	; 10
     852:	39 f4       	brne	.+14     	; 0x862 <__vector_91+0x5c>
	{
		last_finished = current_sentence;
     854:	80 93 3d 23 	sts	0x233D, r24	; 0x80233d <last_finished>
		current_sentence = SENTENCE_NONE;
     858:	10 92 94 23 	sts	0x2394, r1	; 0x802394 <current_sentence>
		dollar_counter = 0;
     85c:	10 92 34 23 	sts	0x2334, r1	; 0x802334 <dollar_counter>
     860:	23 c0       	rjmp	.+70     	; 0x8a8 <__vector_91+0xa2>
	}
	else if (c == '$' && current_sentence == SENTENCE_NONE)
     862:	94 32       	cpi	r25, 0x24	; 36
     864:	11 f4       	brne	.+4      	; 0x86a <__vector_91+0x64>
     866:	88 23       	and	r24, r24
     868:	d9 f0       	breq	.+54     	; 0x8a0 <__vector_91+0x9a>
	{
		dollar_counter = 1;
	}
	
	if (dollar_counter > 0)
     86a:	80 91 34 23 	lds	r24, 0x2334	; 0x802334 <dollar_counter>
     86e:	88 23       	and	r24, r24
     870:	d9 f0       	breq	.+54     	; 0x8a8 <__vector_91+0xa2>
	{
		if (dollar_counter == 5 && c == 'G' )
     872:	85 30       	cpi	r24, 0x05	; 5
     874:	b1 f4       	brne	.+44     	; 0x8a2 <__vector_91+0x9c>
     876:	97 34       	cpi	r25, 0x47	; 71
     878:	a1 f4       	brne	.+40     	; 0x8a2 <__vector_91+0x9c>
		{
			current_sentence= SENTENCE_GPGGA;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	80 93 94 23 	sts	0x2394, r24	; 0x802394 <current_sentence>
			memcpy(gpgga_buff, "$GPGG", 5);
     880:	85 e0       	ldi	r24, 0x05	; 5
     882:	e0 e4       	ldi	r30, 0x40	; 64
     884:	f0 e2       	ldi	r31, 0x20	; 32
     886:	ad ed       	ldi	r26, 0xDD	; 221
     888:	b4 e2       	ldi	r27, 0x24	; 36
     88a:	01 90       	ld	r0, Z+
     88c:	0d 92       	st	X+, r0
     88e:	8a 95       	dec	r24
     890:	e1 f7       	brne	.-8      	; 0x88a <__vector_91+0x84>
			gpgga_index = 5;
     892:	85 e0       	ldi	r24, 0x05	; 5
     894:	80 93 32 25 	sts	0x2532, r24	; 0x802532 <gpgga_index>
			dollar_counter++;
     898:	86 e0       	ldi	r24, 0x06	; 6
     89a:	80 93 34 23 	sts	0x2334, r24	; 0x802334 <dollar_counter>
     89e:	04 c0       	rjmp	.+8      	; 0x8a8 <__vector_91+0xa2>
	else if (c == '$' && current_sentence == SENTENCE_NONE)
	{
		dollar_counter = 1;
	}
	
	if (dollar_counter > 0)
     8a0:	81 e0       	ldi	r24, 0x01	; 1
			gpgga_index = 5;
			dollar_counter++;
		}
		else
		{
			dollar_counter++;
     8a2:	8f 5f       	subi	r24, 0xFF	; 255
     8a4:	80 93 34 23 	sts	0x2334, r24	; 0x802334 <dollar_counter>
		}
	}
	//printf("Interrupt Executed.\n");
	//rbu8_write(&gps_receive_buffer, &(GPS_USART.DATA), 1);
}
     8a8:	ff 91       	pop	r31
     8aa:	ef 91       	pop	r30
     8ac:	bf 91       	pop	r27
     8ae:	af 91       	pop	r26
     8b0:	9f 91       	pop	r25
     8b2:	8f 91       	pop	r24
     8b4:	2f 91       	pop	r18
     8b6:	0f 90       	pop	r0
     8b8:	0b be       	out	0x3b, r0	; 59
     8ba:	0f 90       	pop	r0
     8bc:	09 be       	out	0x39, r0	; 57
     8be:	0f 90       	pop	r0
     8c0:	08 be       	out	0x38, r0	; 56
     8c2:	0f 90       	pop	r0
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	0f 90       	pop	r0
     8c8:	1f 90       	pop	r1
     8ca:	18 95       	reti

000008cc <__vector_93>:

ISR (GPS_SEND_INTERRUPT_VECTOR)
{
     8cc:	1f 92       	push	r1
     8ce:	0f 92       	push	r0
     8d0:	0f b6       	in	r0, 0x3f	; 63
     8d2:	0f 92       	push	r0
     8d4:	11 24       	eor	r1, r1
     8d6:	08 b6       	in	r0, 0x38	; 56
     8d8:	0f 92       	push	r0
     8da:	18 be       	out	0x38, r1	; 56
     8dc:	09 b6       	in	r0, 0x39	; 57
     8de:	0f 92       	push	r0
     8e0:	19 be       	out	0x39, r1	; 57
     8e2:	0b b6       	in	r0, 0x3b	; 59
     8e4:	0f 92       	push	r0
     8e6:	1b be       	out	0x3b, r1	; 59
     8e8:	2f 93       	push	r18
     8ea:	3f 93       	push	r19
     8ec:	4f 93       	push	r20
     8ee:	5f 93       	push	r21
     8f0:	6f 93       	push	r22
     8f2:	7f 93       	push	r23
     8f4:	8f 93       	push	r24
     8f6:	9f 93       	push	r25
     8f8:	af 93       	push	r26
     8fa:	bf 93       	push	r27
     8fc:	ef 93       	push	r30
     8fe:	ff 93       	push	r31
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	
  rbu8_read(&gps_send_buffer, &(GPS_USART.DATA), 1);
     900:	41 e0       	ldi	r20, 0x01	; 1
     902:	50 e0       	ldi	r21, 0x00	; 0
     904:	60 eb       	ldi	r22, 0xB0	; 176
     906:	79 e0       	ldi	r23, 0x09	; 9
     908:	85 ed       	ldi	r24, 0xD5	; 213
     90a:	94 e2       	ldi	r25, 0x24	; 36
     90c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <rbu8_read>
  rbu8_delete_oldest(&gps_send_buffer, 1);
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	85 ed       	ldi	r24, 0xD5	; 213
     916:	94 e2       	ldi	r25, 0x24	; 36
     918:	0e 94 56 16 	call	0x2cac	; 0x2cac <rbu8_delete_oldest>
     91c:	ff 91       	pop	r31
     91e:	ef 91       	pop	r30
     920:	bf 91       	pop	r27
     922:	af 91       	pop	r26
     924:	9f 91       	pop	r25
     926:	8f 91       	pop	r24
     928:	7f 91       	pop	r23
     92a:	6f 91       	pop	r22
     92c:	5f 91       	pop	r21
     92e:	4f 91       	pop	r20
     930:	3f 91       	pop	r19
     932:	2f 91       	pop	r18
     934:	0f 90       	pop	r0
     936:	0b be       	out	0x3b, r0	; 59
     938:	0f 90       	pop	r0
     93a:	09 be       	out	0x39, r0	; 57
     93c:	0f 90       	pop	r0
     93e:	08 be       	out	0x38, r0	; 56
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <init_imu>:
}

bool imu_is_data_ready(void)
{
	return (bool)is_data_rdy();
}
     94a:	60 91 06 20 	lds	r22, 0x2006	; 0x802006 <imu>
     94e:	70 91 07 20 	lds	r23, 0x2007	; 0x802007 <imu+0x1>
     952:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <imu+0x2>
     956:	90 91 09 20 	lds	r25, 0x2009	; 0x802009 <imu+0x3>
     95a:	44 e6       	ldi	r20, 0x64	; 100
     95c:	0c 94 c5 20 	jmp	0x418a	; 0x418a <init_mpu9250>
     960:	08 95       	ret

00000962 <imu_update>:

imu_data_t imu_update(uint16_t cycles)
{
     962:	2f 92       	push	r2
     964:	3f 92       	push	r3
     966:	4f 92       	push	r4
     968:	5f 92       	push	r5
     96a:	6f 92       	push	r6
     96c:	7f 92       	push	r7
     96e:	8f 92       	push	r8
     970:	9f 92       	push	r9
     972:	af 92       	push	r10
     974:	bf 92       	push	r11
     976:	cf 92       	push	r12
     978:	df 92       	push	r13
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
     986:	cd b7       	in	r28, 0x3d	; 61
     988:	de b7       	in	r29, 0x3e	; 62
     98a:	eb 97       	sbiw	r28, 0x3b	; 59
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	de bf       	out	0x3e, r29	; 62
     990:	8a a3       	std	Y+34, r24	; 0x22
     992:	9b a3       	std	Y+35, r25	; 0x23
// 	if(cycles % MPU_UPDATE_DIV == 0)
// 	{
 		data = read_mpu9250(imu);
     994:	40 91 06 20 	lds	r20, 0x2006	; 0x802006 <imu>
     998:	50 91 07 20 	lds	r21, 0x2007	; 0x802007 <imu+0x1>
     99c:	60 91 08 20 	lds	r22, 0x2008	; 0x802008 <imu+0x2>
     9a0:	70 91 09 20 	lds	r23, 0x2009	; 0x802009 <imu+0x3>
     9a4:	ce 01       	movw	r24, r28
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	0e 94 fd 20 	call	0x41fa	; 0x41fa <read_mpu9250>
     9ac:	85 e1       	ldi	r24, 0x15	; 21
     9ae:	fe 01       	movw	r30, r28
     9b0:	31 96       	adiw	r30, 0x01	; 1
     9b2:	a4 e3       	ldi	r26, 0x34	; 52
     9b4:	b5 e2       	ldi	r27, 0x25	; 37
     9b6:	01 90       	ld	r0, Z+
     9b8:	0d 92       	st	X+, r0
     9ba:	8a 95       	dec	r24
     9bc:	e1 f7       	brne	.-8      	; 0x9b6 <imu_update+0x54>
// 	}
	
	printf("Acc Data: %i %i %i\n", data.acc_x, data.acc_y, data.acc_z);
     9be:	0f 2e       	mov	r0, r31
     9c0:	f4 e3       	ldi	r31, 0x34	; 52
     9c2:	2f 2e       	mov	r2, r31
     9c4:	f5 e2       	ldi	r31, 0x25	; 37
     9c6:	3f 2e       	mov	r3, r31
     9c8:	f0 2d       	mov	r31, r0
     9ca:	f1 01       	movw	r30, r2
     9cc:	86 81       	ldd	r24, Z+6	; 0x06
     9ce:	8f 93       	push	r24
     9d0:	85 81       	ldd	r24, Z+5	; 0x05
     9d2:	8f 93       	push	r24
     9d4:	84 81       	ldd	r24, Z+4	; 0x04
     9d6:	8f 93       	push	r24
     9d8:	83 81       	ldd	r24, Z+3	; 0x03
     9da:	8f 93       	push	r24
     9dc:	82 81       	ldd	r24, Z+2	; 0x02
     9de:	8f 93       	push	r24
     9e0:	81 81       	ldd	r24, Z+1	; 0x01
     9e2:	8f 93       	push	r24
     9e4:	86 e4       	ldi	r24, 0x46	; 70
     9e6:	90 e2       	ldi	r25, 0x20	; 32
     9e8:	9f 93       	push	r25
     9ea:	8f 93       	push	r24
     9ec:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <printf>
	//printf("%i, %i, %i\n", data.gyro_x, data.gyro_y, data.gyro_z);
	
	
	data.gyro_x -= -21;
     9f0:	f1 01       	movw	r30, r2
     9f2:	01 85       	ldd	r16, Z+9	; 0x09
     9f4:	12 85       	ldd	r17, Z+10	; 0x0a
     9f6:	0b 5e       	subi	r16, 0xEB	; 235
     9f8:	1f 4f       	sbci	r17, 0xFF	; 255
     9fa:	01 87       	std	Z+9, r16	; 0x09
     9fc:	12 87       	std	Z+10, r17	; 0x0a
	data.gyro_y -= 4.4;
     9fe:	63 85       	ldd	r22, Z+11	; 0x0b
     a00:	74 85       	ldd	r23, Z+12	; 0x0c
     a02:	07 2e       	mov	r0, r23
     a04:	00 0c       	add	r0, r0
     a06:	88 0b       	sbc	r24, r24
     a08:	99 0b       	sbc	r25, r25
     a0a:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     a0e:	2d ec       	ldi	r18, 0xCD	; 205
     a10:	3c ec       	ldi	r19, 0xCC	; 204
     a12:	4c e8       	ldi	r20, 0x8C	; 140
     a14:	50 e4       	ldi	r21, 0x40	; 64
     a16:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
     a1a:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <__fixsfsi>
     a1e:	2b 01       	movw	r4, r22
     a20:	3c 01       	movw	r6, r24
     a22:	f1 01       	movw	r30, r2
     a24:	63 87       	std	Z+11, r22	; 0x0b
     a26:	74 87       	std	Z+12, r23	; 0x0c
	data.gyro_z -= -11.5;
     a28:	65 85       	ldd	r22, Z+13	; 0x0d
     a2a:	76 85       	ldd	r23, Z+14	; 0x0e
     a2c:	07 2e       	mov	r0, r23
     a2e:	00 0c       	add	r0, r0
     a30:	88 0b       	sbc	r24, r24
     a32:	99 0b       	sbc	r25, r25
     a34:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	48 e3       	ldi	r20, 0x38	; 56
     a3e:	51 e4       	ldi	r21, 0x41	; 65
     a40:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     a44:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <__fixsfsi>
     a48:	6e 8f       	std	Y+30, r22	; 0x1e
     a4a:	7f 8f       	std	Y+31, r23	; 0x1f
     a4c:	88 a3       	std	Y+32, r24	; 0x20
     a4e:	99 a3       	std	Y+33, r25	; 0x21
     a50:	ee 8c       	ldd	r14, Y+30	; 0x1e
     a52:	ff 8c       	ldd	r15, Y+31	; 0x1f
     a54:	f1 01       	movw	r30, r2
     a56:	e5 86       	std	Z+13, r14	; 0x0d
     a58:	f6 86       	std	Z+14, r15	; 0x0e
	
	MahonyAHRSupdate(	mapdouble((double)data.gyro_x+(GYR_X_OFF), -32768.0, 32767.0, -2000, 2000),
     a5a:	61 81       	ldd	r22, Z+1	; 0x01
     a5c:	72 81       	ldd	r23, Z+2	; 0x02
     a5e:	07 2e       	mov	r0, r23
     a60:	00 0c       	add	r0, r0
     a62:	88 0b       	sbc	r24, r24
     a64:	99 0b       	sbc	r25, r25
     a66:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     a6a:	6b 01       	movw	r12, r22
     a6c:	7c 01       	movw	r14, r24
     a6e:	60 91 10 20 	lds	r22, 0x2010	; 0x802010 <ACC_X_OFF>
     a72:	70 91 11 20 	lds	r23, 0x2011	; 0x802011 <ACC_X_OFF+0x1>
     a76:	07 2e       	mov	r0, r23
     a78:	00 0c       	add	r0, r0
     a7a:	88 0b       	sbc	r24, r24
     a7c:	99 0b       	sbc	r25, r25
     a7e:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     a82:	9b 01       	movw	r18, r22
     a84:	ac 01       	movw	r20, r24
     a86:	c7 01       	movw	r24, r14
     a88:	b6 01       	movw	r22, r12
     a8a:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     a8e:	5b 01       	movw	r10, r22
     a90:	6c 01       	movw	r12, r24
     a92:	60 91 4f 21 	lds	r22, 0x214F	; 0x80214f <GYR_Z_OFF>
     a96:	70 91 50 21 	lds	r23, 0x2150	; 0x802150 <GYR_Z_OFF+0x1>
     a9a:	07 2e       	mov	r0, r23
     a9c:	00 0c       	add	r0, r0
     a9e:	88 0b       	sbc	r24, r24
     aa0:	99 0b       	sbc	r25, r25
     aa2:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     aa6:	6a 8f       	std	Y+26, r22	; 0x1a
     aa8:	7b 8f       	std	Y+27, r23	; 0x1b
     aaa:	8c 8f       	std	Y+28, r24	; 0x1c
     aac:	9d 8f       	std	Y+29, r25	; 0x1d
     aae:	2e 8d       	ldd	r18, Y+30	; 0x1e
     ab0:	3f 8d       	ldd	r19, Y+31	; 0x1f
     ab2:	b9 01       	movw	r22, r18
     ab4:	33 0f       	add	r19, r19
     ab6:	88 0b       	sbc	r24, r24
     ab8:	99 0b       	sbc	r25, r25
     aba:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     abe:	9b 01       	movw	r18, r22
     ac0:	ac 01       	movw	r20, r24
     ac2:	6a 8d       	ldd	r22, Y+26	; 0x1a
     ac4:	7b 8d       	ldd	r23, Y+27	; 0x1b
     ac6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     ac8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     aca:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	40 e0       	ldi	r20, 0x00	; 0
     ad4:	57 e4       	ldi	r21, 0x47	; 71
     ad6:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     ada:	20 e0       	ldi	r18, 0x00	; 0
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	4a e7       	ldi	r20, 0x7A	; 122
     ae0:	55 e4       	ldi	r21, 0x45	; 69
     ae2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
     ae6:	20 e0       	ldi	r18, 0x00	; 0
     ae8:	3f ef       	ldi	r19, 0xFF	; 255
     aea:	4f e7       	ldi	r20, 0x7F	; 127
     aec:	57 e4       	ldi	r21, 0x47	; 71
     aee:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
     af2:	20 e0       	ldi	r18, 0x00	; 0
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	4a ef       	ldi	r20, 0xFA	; 250
     af8:	54 e4       	ldi	r21, 0x44	; 68
     afa:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
     afe:	6e 8f       	std	Y+30, r22	; 0x1e
     b00:	7f 8f       	std	Y+31, r23	; 0x1f
     b02:	88 a3       	std	Y+32, r24	; 0x20
     b04:	99 a3       	std	Y+33, r25	; 0x21
     b06:	60 91 51 21 	lds	r22, 0x2151	; 0x802151 <GYR_Y_OFF>
     b0a:	70 91 52 21 	lds	r23, 0x2152	; 0x802152 <GYR_Y_OFF+0x1>
     b0e:	07 2e       	mov	r0, r23
     b10:	00 0c       	add	r0, r0
     b12:	88 0b       	sbc	r24, r24
     b14:	99 0b       	sbc	r25, r25
     b16:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     b1a:	6a 8f       	std	Y+26, r22	; 0x1a
     b1c:	7b 8f       	std	Y+27, r23	; 0x1b
     b1e:	8c 8f       	std	Y+28, r24	; 0x1c
     b20:	9d 8f       	std	Y+29, r25	; 0x1d
     b22:	b2 01       	movw	r22, r4
     b24:	55 0c       	add	r5, r5
     b26:	88 0b       	sbc	r24, r24
     b28:	99 0b       	sbc	r25, r25
     b2a:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     b2e:	9b 01       	movw	r18, r22
     b30:	ac 01       	movw	r20, r24
     b32:	6a 8d       	ldd	r22, Y+26	; 0x1a
     b34:	7b 8d       	ldd	r23, Y+27	; 0x1b
     b36:	8c 8d       	ldd	r24, Y+28	; 0x1c
     b38:	9d 8d       	ldd	r25, Y+29	; 0x1d
     b3a:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	57 e4       	ldi	r21, 0x47	; 71
     b46:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	4a e7       	ldi	r20, 0x7A	; 122
     b50:	55 e4       	ldi	r21, 0x45	; 69
     b52:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	3f ef       	ldi	r19, 0xFF	; 255
     b5a:	4f e7       	ldi	r20, 0x7F	; 127
     b5c:	57 e4       	ldi	r21, 0x47	; 71
     b5e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	4a ef       	ldi	r20, 0xFA	; 250
     b68:	54 e4       	ldi	r21, 0x44	; 68
     b6a:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
     b6e:	6a 8f       	std	Y+26, r22	; 0x1a
     b70:	7b 8f       	std	Y+27, r23	; 0x1b
     b72:	8c 8f       	std	Y+28, r24	; 0x1c
     b74:	9d 8f       	std	Y+29, r25	; 0x1d
     b76:	60 91 0a 20 	lds	r22, 0x200A	; 0x80200a <GYR_X_OFF>
     b7a:	70 91 0b 20 	lds	r23, 0x200B	; 0x80200b <GYR_X_OFF+0x1>
     b7e:	07 2e       	mov	r0, r23
     b80:	00 0c       	add	r0, r0
     b82:	88 0b       	sbc	r24, r24
     b84:	99 0b       	sbc	r25, r25
     b86:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     b8a:	2b 01       	movw	r4, r22
     b8c:	3c 01       	movw	r6, r24
     b8e:	b8 01       	movw	r22, r16
     b90:	11 0f       	add	r17, r17
     b92:	88 0b       	sbc	r24, r24
     b94:	99 0b       	sbc	r25, r25
     b96:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     b9a:	9b 01       	movw	r18, r22
     b9c:	ac 01       	movw	r20, r24
     b9e:	c3 01       	movw	r24, r6
     ba0:	b2 01       	movw	r22, r4
     ba2:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	57 e4       	ldi	r21, 0x47	; 71
     bae:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	4a e7       	ldi	r20, 0x7A	; 122
     bb8:	55 e4       	ldi	r21, 0x45	; 69
     bba:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	3f ef       	ldi	r19, 0xFF	; 255
     bc2:	4f e7       	ldi	r20, 0x7F	; 127
     bc4:	57 e4       	ldi	r21, 0x47	; 71
     bc6:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	4a ef       	ldi	r20, 0xFA	; 250
     bd0:	54 e4       	ldi	r21, 0x44	; 68
     bd2:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
     bd6:	2b 01       	movw	r4, r22
     bd8:	3c 01       	movw	r6, r24
     bda:	f1 01       	movw	r30, r2
     bdc:	63 89       	ldd	r22, Z+19	; 0x13
     bde:	74 89       	ldd	r23, Z+20	; 0x14
     be0:	07 2e       	mov	r0, r23
     be2:	00 0c       	add	r0, r0
     be4:	88 0b       	sbc	r24, r24
     be6:	99 0b       	sbc	r25, r25
     be8:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     bec:	6e 8b       	std	Y+22, r22	; 0x16
     bee:	7f 8b       	std	Y+23, r23	; 0x17
     bf0:	88 8f       	std	Y+24, r24	; 0x18
     bf2:	99 8f       	std	Y+25, r25	; 0x19
     bf4:	60 91 12 20 	lds	r22, 0x2012	; 0x802012 <MAG_Z_OFF>
     bf8:	70 91 13 20 	lds	r23, 0x2013	; 0x802013 <MAG_Z_OFF+0x1>
     bfc:	07 2e       	mov	r0, r23
     bfe:	00 0c       	add	r0, r0
     c00:	88 0b       	sbc	r24, r24
     c02:	99 0b       	sbc	r25, r25
     c04:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     c08:	9b 01       	movw	r18, r22
     c0a:	ac 01       	movw	r20, r24
     c0c:	6e 89       	ldd	r22, Y+22	; 0x16
     c0e:	7f 89       	ldd	r23, Y+23	; 0x17
     c10:	88 8d       	ldd	r24, Y+24	; 0x18
     c12:	99 8d       	ldd	r25, Y+25	; 0x19
     c14:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     c18:	dc 01       	movw	r26, r24
     c1a:	cb 01       	movw	r24, r22
     c1c:	b0 58       	subi	r27, 0x80	; 128
     c1e:	bf 93       	push	r27
     c20:	af 93       	push	r26
     c22:	9f 93       	push	r25
     c24:	8f 93       	push	r24
     c26:	f1 01       	movw	r30, r2
     c28:	67 85       	ldd	r22, Z+15	; 0x0f
     c2a:	70 89       	ldd	r23, Z+16	; 0x10
     c2c:	07 2e       	mov	r0, r23
     c2e:	00 0c       	add	r0, r0
     c30:	88 0b       	sbc	r24, r24
     c32:	99 0b       	sbc	r25, r25
     c34:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     c38:	6e 8b       	std	Y+22, r22	; 0x16
     c3a:	7f 8b       	std	Y+23, r23	; 0x17
     c3c:	88 8f       	std	Y+24, r24	; 0x18
     c3e:	99 8f       	std	Y+25, r25	; 0x19
     c40:	60 91 16 20 	lds	r22, 0x2016	; 0x802016 <MAG_X_OFF>
     c44:	70 91 17 20 	lds	r23, 0x2017	; 0x802017 <MAG_X_OFF+0x1>
     c48:	07 2e       	mov	r0, r23
     c4a:	00 0c       	add	r0, r0
     c4c:	88 0b       	sbc	r24, r24
     c4e:	99 0b       	sbc	r25, r25
     c50:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     c54:	9b 01       	movw	r18, r22
     c56:	ac 01       	movw	r20, r24
     c58:	6e 89       	ldd	r22, Y+22	; 0x16
     c5a:	7f 89       	ldd	r23, Y+23	; 0x17
     c5c:	88 8d       	ldd	r24, Y+24	; 0x18
     c5e:	99 8d       	ldd	r25, Y+25	; 0x19
     c60:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     c64:	9f 93       	push	r25
     c66:	8f 93       	push	r24
     c68:	7f 93       	push	r23
     c6a:	6f 93       	push	r22
     c6c:	f1 01       	movw	r30, r2
     c6e:	61 89       	ldd	r22, Z+17	; 0x11
     c70:	72 89       	ldd	r23, Z+18	; 0x12
     c72:	07 2e       	mov	r0, r23
     c74:	00 0c       	add	r0, r0
     c76:	88 0b       	sbc	r24, r24
     c78:	99 0b       	sbc	r25, r25
     c7a:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     c7e:	6e 8b       	std	Y+22, r22	; 0x16
     c80:	7f 8b       	std	Y+23, r23	; 0x17
     c82:	88 8f       	std	Y+24, r24	; 0x18
     c84:	99 8f       	std	Y+25, r25	; 0x19
     c86:	60 91 14 20 	lds	r22, 0x2014	; 0x802014 <MAG_Y_OFF>
     c8a:	70 91 15 20 	lds	r23, 0x2015	; 0x802015 <MAG_Y_OFF+0x1>
     c8e:	07 2e       	mov	r0, r23
     c90:	00 0c       	add	r0, r0
     c92:	88 0b       	sbc	r24, r24
     c94:	99 0b       	sbc	r25, r25
     c96:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
     c9e:	6e 89       	ldd	r22, Y+22	; 0x16
     ca0:	7f 89       	ldd	r23, Y+23	; 0x17
     ca2:	88 8d       	ldd	r24, Y+24	; 0x18
     ca4:	99 8d       	ldd	r25, Y+25	; 0x19
     ca6:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     caa:	9f 93       	push	r25
     cac:	8f 93       	push	r24
     cae:	7f 93       	push	r23
     cb0:	6f 93       	push	r22
     cb2:	f1 01       	movw	r30, r2
     cb4:	65 81       	ldd	r22, Z+5	; 0x05
     cb6:	76 81       	ldd	r23, Z+6	; 0x06
     cb8:	07 2e       	mov	r0, r23
     cba:	00 0c       	add	r0, r0
     cbc:	88 0b       	sbc	r24, r24
     cbe:	99 0b       	sbc	r25, r25
     cc0:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     cc4:	6e 8b       	std	Y+22, r22	; 0x16
     cc6:	7f 8b       	std	Y+23, r23	; 0x17
     cc8:	88 8f       	std	Y+24, r24	; 0x18
     cca:	99 8f       	std	Y+25, r25	; 0x19
     ccc:	60 91 0c 20 	lds	r22, 0x200C	; 0x80200c <ACC_Z_OFF>
     cd0:	70 91 0d 20 	lds	r23, 0x200D	; 0x80200d <ACC_Z_OFF+0x1>
     cd4:	07 2e       	mov	r0, r23
     cd6:	00 0c       	add	r0, r0
     cd8:	88 0b       	sbc	r24, r24
     cda:	99 0b       	sbc	r25, r25
     cdc:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     ce0:	9b 01       	movw	r18, r22
     ce2:	ac 01       	movw	r20, r24
     ce4:	6e 89       	ldd	r22, Y+22	; 0x16
     ce6:	7f 89       	ldd	r23, Y+23	; 0x17
     ce8:	88 8d       	ldd	r24, Y+24	; 0x18
     cea:	99 8d       	ldd	r25, Y+25	; 0x19
     cec:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     cf0:	9f 93       	push	r25
     cf2:	8f 93       	push	r24
     cf4:	7f 93       	push	r23
     cf6:	6f 93       	push	r22
     cf8:	f1 01       	movw	r30, r2
     cfa:	63 81       	ldd	r22, Z+3	; 0x03
     cfc:	74 81       	ldd	r23, Z+4	; 0x04
     cfe:	07 2e       	mov	r0, r23
     d00:	00 0c       	add	r0, r0
     d02:	88 0b       	sbc	r24, r24
     d04:	99 0b       	sbc	r25, r25
     d06:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     d0a:	6e 8b       	std	Y+22, r22	; 0x16
     d0c:	7f 8b       	std	Y+23, r23	; 0x17
     d0e:	88 8f       	std	Y+24, r24	; 0x18
     d10:	99 8f       	std	Y+25, r25	; 0x19
     d12:	60 91 0e 20 	lds	r22, 0x200E	; 0x80200e <ACC_Y_OFF>
     d16:	70 91 0f 20 	lds	r23, 0x200F	; 0x80200f <ACC_Y_OFF+0x1>
     d1a:	07 2e       	mov	r0, r23
     d1c:	00 0c       	add	r0, r0
     d1e:	88 0b       	sbc	r24, r24
     d20:	99 0b       	sbc	r25, r25
     d22:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
     d26:	9b 01       	movw	r18, r22
     d28:	ac 01       	movw	r20, r24
     d2a:	6e 89       	ldd	r22, Y+22	; 0x16
     d2c:	7f 89       	ldd	r23, Y+23	; 0x17
     d2e:	88 8d       	ldd	r24, Y+24	; 0x18
     d30:	99 8d       	ldd	r25, Y+25	; 0x19
     d32:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     d36:	9f 93       	push	r25
     d38:	8f 93       	push	r24
     d3a:	7f 93       	push	r23
     d3c:	6f 93       	push	r22
     d3e:	ee 8c       	ldd	r14, Y+30	; 0x1e
     d40:	ff 8c       	ldd	r15, Y+31	; 0x1f
     d42:	08 a1       	ldd	r16, Y+32	; 0x20
     d44:	19 a1       	ldd	r17, Y+33	; 0x21
     d46:	2a 8d       	ldd	r18, Y+26	; 0x1a
     d48:	3b 8d       	ldd	r19, Y+27	; 0x1b
     d4a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     d4c:	5d 8d       	ldd	r21, Y+29	; 0x1d
     d4e:	c3 01       	movw	r24, r6
     d50:	b2 01       	movw	r22, r4
     d52:	08 d7       	rcall	.+3600   	; 0x1b64 <MahonyAHRSupdate>
						(double)data.mag_y+(MAG_Y_OFF), (double)data.mag_x+(MAG_X_OFF), -((double)data.mag_z+(MAG_Z_OFF)));

	
	
	imu_data_t imudata;					
	imudata.yaw   = atan2(2.0 * (q1 * q2 + q0 * q3), q0 * q0 + q1 * q1 - q2 * q2 - q3 * q3);
     d54:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
     d58:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
     d5c:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
     d60:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
     d64:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <q0>
     d68:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <q0+0x1>
     d6c:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <q0+0x2>
     d70:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <q0+0x3>
     d74:	80 90 67 21 	lds	r8, 0x2167	; 0x802167 <q1>
     d78:	90 90 68 21 	lds	r9, 0x2168	; 0x802168 <q1+0x1>
     d7c:	a0 90 69 21 	lds	r10, 0x2169	; 0x802169 <q1+0x2>
     d80:	b0 90 6a 21 	lds	r11, 0x216A	; 0x80216a <q1+0x3>
     d84:	40 90 67 21 	lds	r4, 0x2167	; 0x802167 <q1>
     d88:	50 90 68 21 	lds	r5, 0x2168	; 0x802168 <q1+0x1>
     d8c:	60 90 69 21 	lds	r6, 0x2169	; 0x802169 <q1+0x2>
     d90:	70 90 6a 21 	lds	r7, 0x216A	; 0x80216a <q1+0x3>
     d94:	e0 90 63 21 	lds	r14, 0x2163	; 0x802163 <q2>
     d98:	f0 90 64 21 	lds	r15, 0x2164	; 0x802164 <q2+0x1>
     d9c:	00 91 65 21 	lds	r16, 0x2165	; 0x802165 <q2+0x2>
     da0:	10 91 66 21 	lds	r17, 0x2166	; 0x802166 <q2+0x3>
     da4:	ee 8e       	std	Y+30, r14	; 0x1e
     da6:	ff 8e       	std	Y+31, r15	; 0x1f
     da8:	08 a3       	std	Y+32, r16	; 0x20
     daa:	19 a3       	std	Y+33, r17	; 0x21
     dac:	e0 90 63 21 	lds	r14, 0x2163	; 0x802163 <q2>
     db0:	f0 90 64 21 	lds	r15, 0x2164	; 0x802164 <q2+0x1>
     db4:	00 91 65 21 	lds	r16, 0x2165	; 0x802165 <q2+0x2>
     db8:	10 91 66 21 	lds	r17, 0x2166	; 0x802166 <q2+0x3>
     dbc:	ea 8e       	std	Y+26, r14	; 0x1a
     dbe:	fb 8e       	std	Y+27, r15	; 0x1b
     dc0:	0c 8f       	std	Y+28, r16	; 0x1c
     dc2:	1d 8f       	std	Y+29, r17	; 0x1d
     dc4:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q3>
     dc8:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q3+0x1>
     dcc:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q3+0x2>
     dd0:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q3+0x3>
     dd4:	ee 8a       	std	Y+22, r14	; 0x16
     dd6:	ff 8a       	std	Y+23, r15	; 0x17
     dd8:	08 8f       	std	Y+24, r16	; 0x18
     dda:	19 8f       	std	Y+25, r17	; 0x19
     ddc:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q3>
     de0:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q3+0x1>
     de4:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q3+0x2>
     de8:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q3+0x3>
     dec:	ec a2       	std	Y+36, r14	; 0x24
     dee:	fd a2       	std	Y+37, r15	; 0x25
     df0:	0e a3       	std	Y+38, r16	; 0x26
     df2:	1f a3       	std	Y+39, r17	; 0x27
     df4:	e0 90 67 21 	lds	r14, 0x2167	; 0x802167 <q1>
     df8:	f0 90 68 21 	lds	r15, 0x2168	; 0x802168 <q1+0x1>
     dfc:	00 91 69 21 	lds	r16, 0x2169	; 0x802169 <q1+0x2>
     e00:	10 91 6a 21 	lds	r17, 0x216A	; 0x80216a <q1+0x3>
     e04:	e8 a6       	std	Y+40, r14	; 0x28
     e06:	f9 a6       	std	Y+41, r15	; 0x29
     e08:	0a a7       	std	Y+42, r16	; 0x2a
     e0a:	1b a7       	std	Y+43, r17	; 0x2b
     e0c:	e0 90 63 21 	lds	r14, 0x2163	; 0x802163 <q2>
     e10:	f0 90 64 21 	lds	r15, 0x2164	; 0x802164 <q2+0x1>
     e14:	00 91 65 21 	lds	r16, 0x2165	; 0x802165 <q2+0x2>
     e18:	10 91 66 21 	lds	r17, 0x2166	; 0x802166 <q2+0x3>
     e1c:	ec a6       	std	Y+44, r14	; 0x2c
     e1e:	fd a6       	std	Y+45, r15	; 0x2d
     e20:	0e a7       	std	Y+46, r16	; 0x2e
     e22:	1f a7       	std	Y+47, r17	; 0x2f
     e24:	e0 90 18 20 	lds	r14, 0x2018	; 0x802018 <q0>
     e28:	f0 90 19 20 	lds	r15, 0x2019	; 0x802019 <q0+0x1>
     e2c:	00 91 1a 20 	lds	r16, 0x201A	; 0x80201a <q0+0x2>
     e30:	10 91 1b 20 	lds	r17, 0x201B	; 0x80201b <q0+0x3>
     e34:	e8 ae       	std	Y+56, r14	; 0x38
     e36:	f9 ae       	std	Y+57, r15	; 0x39
     e38:	0a af       	std	Y+58, r16	; 0x3a
     e3a:	1b af       	std	Y+59, r17	; 0x3b
     e3c:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q3>
     e40:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q3+0x1>
     e44:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q3+0x2>
     e48:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q3+0x3>
     e4c:	e8 aa       	std	Y+48, r14	; 0x30
     e4e:	f9 aa       	std	Y+49, r15	; 0x31
     e50:	0a ab       	std	Y+50, r16	; 0x32
     e52:	1b ab       	std	Y+51, r17	; 0x33
     e54:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
     e58:	6b 01       	movw	r12, r22
     e5a:	7c 01       	movw	r14, r24
     e5c:	a3 01       	movw	r20, r6
     e5e:	92 01       	movw	r18, r4
     e60:	c5 01       	movw	r24, r10
     e62:	b4 01       	movw	r22, r8
     e64:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
     e68:	9b 01       	movw	r18, r22
     e6a:	ac 01       	movw	r20, r24
     e6c:	c7 01       	movw	r24, r14
     e6e:	b6 01       	movw	r22, r12
     e70:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     e74:	4b 01       	movw	r8, r22
     e76:	5c 01       	movw	r10, r24
     e78:	2a 8d       	ldd	r18, Y+26	; 0x1a
     e7a:	3b 8d       	ldd	r19, Y+27	; 0x1b
     e7c:	4c 8d       	ldd	r20, Y+28	; 0x1c
     e7e:	5d 8d       	ldd	r21, Y+29	; 0x1d
     e80:	6e 8d       	ldd	r22, Y+30	; 0x1e
     e82:	7f 8d       	ldd	r23, Y+31	; 0x1f
     e84:	88 a1       	ldd	r24, Y+32	; 0x20
     e86:	99 a1       	ldd	r25, Y+33	; 0x21
     e88:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
     e8c:	9b 01       	movw	r18, r22
     e8e:	ac 01       	movw	r20, r24
     e90:	c5 01       	movw	r24, r10
     e92:	b4 01       	movw	r22, r8
     e94:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
     e98:	4b 01       	movw	r8, r22
     e9a:	5c 01       	movw	r10, r24
     e9c:	2c a1       	ldd	r18, Y+36	; 0x24
     e9e:	3d a1       	ldd	r19, Y+37	; 0x25
     ea0:	4e a1       	ldd	r20, Y+38	; 0x26
     ea2:	5f a1       	ldd	r21, Y+39	; 0x27
     ea4:	6e 89       	ldd	r22, Y+22	; 0x16
     ea6:	7f 89       	ldd	r23, Y+23	; 0x17
     ea8:	88 8d       	ldd	r24, Y+24	; 0x18
     eaa:	99 8d       	ldd	r25, Y+25	; 0x19
     eac:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
     eb0:	9b 01       	movw	r18, r22
     eb2:	ac 01       	movw	r20, r24
     eb4:	c5 01       	movw	r24, r10
     eb6:	b4 01       	movw	r22, r8
     eb8:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
     ebc:	2b 01       	movw	r4, r22
     ebe:	3c 01       	movw	r6, r24
     ec0:	2c a5       	ldd	r18, Y+44	; 0x2c
     ec2:	3d a5       	ldd	r19, Y+45	; 0x2d
     ec4:	4e a5       	ldd	r20, Y+46	; 0x2e
     ec6:	5f a5       	ldd	r21, Y+47	; 0x2f
     ec8:	68 a5       	ldd	r22, Y+40	; 0x28
     eca:	79 a5       	ldd	r23, Y+41	; 0x29
     ecc:	8a a5       	ldd	r24, Y+42	; 0x2a
     ece:	9b a5       	ldd	r25, Y+43	; 0x2b
     ed0:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
     ed4:	4b 01       	movw	r8, r22
     ed6:	5c 01       	movw	r10, r24
     ed8:	28 a9       	ldd	r18, Y+48	; 0x30
     eda:	39 a9       	ldd	r19, Y+49	; 0x31
     edc:	4a a9       	ldd	r20, Y+50	; 0x32
     ede:	5b a9       	ldd	r21, Y+51	; 0x33
     ee0:	68 ad       	ldd	r22, Y+56	; 0x38
     ee2:	79 ad       	ldd	r23, Y+57	; 0x39
     ee4:	8a ad       	ldd	r24, Y+58	; 0x3a
     ee6:	9b ad       	ldd	r25, Y+59	; 0x3b
     ee8:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
     eec:	9b 01       	movw	r18, r22
     eee:	ac 01       	movw	r20, r24
     ef0:	c5 01       	movw	r24, r10
     ef2:	b4 01       	movw	r22, r8
     ef4:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     ef8:	9b 01       	movw	r18, r22
     efa:	ac 01       	movw	r20, r24
     efc:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
     f00:	a3 01       	movw	r20, r6
     f02:	92 01       	movw	r18, r4
     f04:	0e 94 3b 2d 	call	0x5a76	; 0x5a76 <atan2>
     f08:	4b 01       	movw	r8, r22
     f0a:	5c 01       	movw	r10, r24
	imudata.pitch = -asin(2.0 * (q1 * q3 - q0 * q2));
     f0c:	80 91 67 21 	lds	r24, 0x2167	; 0x802167 <q1>
     f10:	90 91 68 21 	lds	r25, 0x2168	; 0x802168 <q1+0x1>
     f14:	a0 91 69 21 	lds	r26, 0x2169	; 0x802169 <q1+0x2>
     f18:	b0 91 6a 21 	lds	r27, 0x216A	; 0x80216a <q1+0x3>
     f1c:	80 91 5f 21 	lds	r24, 0x215F	; 0x80215f <q3>
     f20:	90 91 60 21 	lds	r25, 0x2160	; 0x802160 <q3+0x1>
     f24:	a0 91 61 21 	lds	r26, 0x2161	; 0x802161 <q3+0x2>
     f28:	b0 91 62 21 	lds	r27, 0x2162	; 0x802162 <q3+0x3>
     f2c:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <q0>
     f30:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <q0+0x1>
     f34:	a0 91 1a 20 	lds	r26, 0x201A	; 0x80201a <q0+0x2>
     f38:	b0 91 1b 20 	lds	r27, 0x201B	; 0x80201b <q0+0x3>
     f3c:	80 91 63 21 	lds	r24, 0x2163	; 0x802163 <q2>
     f40:	90 91 64 21 	lds	r25, 0x2164	; 0x802164 <q2+0x1>
     f44:	a0 91 65 21 	lds	r26, 0x2165	; 0x802165 <q2+0x2>
     f48:	b0 91 66 21 	lds	r27, 0x2166	; 0x802166 <q2+0x3>
	imudata.roll  = atan2(2.0 * (q0 * q1 + q2 * q3), q0 * q0 - q1 * q1 - q2 * q2 + q3 * q3);
     f4c:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <q0>
     f50:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <q0+0x1>
     f54:	a0 91 1a 20 	lds	r26, 0x201A	; 0x80201a <q0+0x2>
     f58:	b0 91 1b 20 	lds	r27, 0x201B	; 0x80201b <q0+0x3>
     f5c:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <q0>
     f60:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <q0+0x1>
     f64:	a0 91 1a 20 	lds	r26, 0x201A	; 0x80201a <q0+0x2>
     f68:	b0 91 1b 20 	lds	r27, 0x201B	; 0x80201b <q0+0x3>
     f6c:	80 91 67 21 	lds	r24, 0x2167	; 0x802167 <q1>
     f70:	90 91 68 21 	lds	r25, 0x2168	; 0x802168 <q1+0x1>
     f74:	a0 91 69 21 	lds	r26, 0x2169	; 0x802169 <q1+0x2>
     f78:	b0 91 6a 21 	lds	r27, 0x216A	; 0x80216a <q1+0x3>
     f7c:	80 91 67 21 	lds	r24, 0x2167	; 0x802167 <q1>
     f80:	90 91 68 21 	lds	r25, 0x2168	; 0x802168 <q1+0x1>
     f84:	a0 91 69 21 	lds	r26, 0x2169	; 0x802169 <q1+0x2>
     f88:	b0 91 6a 21 	lds	r27, 0x216A	; 0x80216a <q1+0x3>
     f8c:	80 91 63 21 	lds	r24, 0x2163	; 0x802163 <q2>
     f90:	90 91 64 21 	lds	r25, 0x2164	; 0x802164 <q2+0x1>
     f94:	a0 91 65 21 	lds	r26, 0x2165	; 0x802165 <q2+0x2>
     f98:	b0 91 66 21 	lds	r27, 0x2166	; 0x802166 <q2+0x3>
     f9c:	80 91 63 21 	lds	r24, 0x2163	; 0x802163 <q2>
     fa0:	90 91 64 21 	lds	r25, 0x2164	; 0x802164 <q2+0x1>
     fa4:	a0 91 65 21 	lds	r26, 0x2165	; 0x802165 <q2+0x2>
     fa8:	b0 91 66 21 	lds	r27, 0x2166	; 0x802166 <q2+0x3>
     fac:	80 91 5f 21 	lds	r24, 0x215F	; 0x80215f <q3>
     fb0:	90 91 60 21 	lds	r25, 0x2160	; 0x802160 <q3+0x1>
     fb4:	a0 91 61 21 	lds	r26, 0x2161	; 0x802161 <q3+0x2>
     fb8:	b0 91 62 21 	lds	r27, 0x2162	; 0x802162 <q3+0x3>
     fbc:	80 91 5f 21 	lds	r24, 0x215F	; 0x80215f <q3>
     fc0:	90 91 60 21 	lds	r25, 0x2160	; 0x802160 <q3+0x1>
     fc4:	a0 91 61 21 	lds	r26, 0x2161	; 0x802161 <q3+0x2>
     fc8:	b0 91 62 21 	lds	r27, 0x2162	; 0x802162 <q3+0x3>
     fcc:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <q0>
     fd0:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <q0+0x1>
     fd4:	a0 91 1a 20 	lds	r26, 0x201A	; 0x80201a <q0+0x2>
     fd8:	b0 91 1b 20 	lds	r27, 0x201B	; 0x80201b <q0+0x3>
     fdc:	80 91 67 21 	lds	r24, 0x2167	; 0x802167 <q1>
     fe0:	90 91 68 21 	lds	r25, 0x2168	; 0x802168 <q1+0x1>
     fe4:	a0 91 69 21 	lds	r26, 0x2169	; 0x802169 <q1+0x2>
     fe8:	b0 91 6a 21 	lds	r27, 0x216A	; 0x80216a <q1+0x3>
     fec:	80 91 63 21 	lds	r24, 0x2163	; 0x802163 <q2>
     ff0:	90 91 64 21 	lds	r25, 0x2164	; 0x802164 <q2+0x1>
     ff4:	a0 91 65 21 	lds	r26, 0x2165	; 0x802165 <q2+0x2>
     ff8:	b0 91 66 21 	lds	r27, 0x2166	; 0x802166 <q2+0x3>
     ffc:	80 91 5f 21 	lds	r24, 0x215F	; 0x80215f <q3>
    1000:	90 91 60 21 	lds	r25, 0x2160	; 0x802160 <q3+0x1>
    1004:	a0 91 61 21 	lds	r26, 0x2161	; 0x802161 <q3+0x2>
    1008:	b0 91 62 21 	lds	r27, 0x2162	; 0x802162 <q3+0x3>
	imudata.pitch = atan((float)(data.acc_y)/(float)data.acc_z);
    100c:	f1 01       	movw	r30, r2
    100e:	65 81       	ldd	r22, Z+5	; 0x05
    1010:	76 81       	ldd	r23, Z+6	; 0x06
    1012:	07 2e       	mov	r0, r23
    1014:	00 0c       	add	r0, r0
    1016:	88 0b       	sbc	r24, r24
    1018:	99 0b       	sbc	r25, r25
    101a:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
    101e:	6b 01       	movw	r12, r22
    1020:	7c 01       	movw	r14, r24
    1022:	f1 01       	movw	r30, r2
    1024:	63 81       	ldd	r22, Z+3	; 0x03
    1026:	74 81       	ldd	r23, Z+4	; 0x04
    1028:	07 2e       	mov	r0, r23
    102a:	00 0c       	add	r0, r0
    102c:	88 0b       	sbc	r24, r24
    102e:	99 0b       	sbc	r25, r25
    1030:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
    1034:	a7 01       	movw	r20, r14
    1036:	96 01       	movw	r18, r12
    1038:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
    103c:	0e 94 66 2d 	call	0x5acc	; 0x5acc <atan>
    1040:	2b 01       	movw	r4, r22
    1042:	3c 01       	movw	r6, r24
	imudata.roll = atan((float)data.acc_x/(float)data.acc_z);
    1044:	f1 01       	movw	r30, r2
    1046:	61 81       	ldd	r22, Z+1	; 0x01
    1048:	72 81       	ldd	r23, Z+2	; 0x02
    104a:	07 2e       	mov	r0, r23
    104c:	00 0c       	add	r0, r0
    104e:	88 0b       	sbc	r24, r24
    1050:	99 0b       	sbc	r25, r25
    1052:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
    1056:	a7 01       	movw	r20, r14
    1058:	96 01       	movw	r18, r12
    105a:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
    105e:	0e 94 66 2d 	call	0x5acc	; 0x5acc <atan>
    1062:	6b 01       	movw	r12, r22
    1064:	7c 01       	movw	r14, r24
	//imudata.yaw	  += 4.17;		//WMM2015 magnetic declination for Stephenville TX
	imudata.roll  *= 180.0 / PI;
	
	
	
	return imudata;
    1066:	2d ee       	ldi	r18, 0xED	; 237
    1068:	3e e2       	ldi	r19, 0x2E	; 46
    106a:	45 e6       	ldi	r20, 0x65	; 101
    106c:	52 e4       	ldi	r21, 0x42	; 66
    106e:	c3 01       	movw	r24, r6
    1070:	b2 01       	movw	r22, r4
    1072:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1076:	ea a1       	ldd	r30, Y+34	; 0x22
    1078:	fb a1       	ldd	r31, Y+35	; 0x23
    107a:	60 83       	st	Z, r22
    107c:	71 83       	std	Z+1, r23	; 0x01
    107e:	82 83       	std	Z+2, r24	; 0x02
    1080:	93 83       	std	Z+3, r25	; 0x03
    1082:	2d ee       	ldi	r18, 0xED	; 237
    1084:	3e e2       	ldi	r19, 0x2E	; 46
    1086:	45 e6       	ldi	r20, 0x65	; 101
    1088:	52 e4       	ldi	r21, 0x42	; 66
    108a:	c7 01       	movw	r24, r14
    108c:	b6 01       	movw	r22, r12
    108e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1092:	ea a1       	ldd	r30, Y+34	; 0x22
    1094:	fb a1       	ldd	r31, Y+35	; 0x23
    1096:	64 83       	std	Z+4, r22	; 0x04
    1098:	75 83       	std	Z+5, r23	; 0x05
    109a:	86 83       	std	Z+6, r24	; 0x06
    109c:	97 83       	std	Z+7, r25	; 0x07
    109e:	2d ee       	ldi	r18, 0xED	; 237
    10a0:	3e e2       	ldi	r19, 0x2E	; 46
    10a2:	45 e6       	ldi	r20, 0x65	; 101
    10a4:	52 e4       	ldi	r21, 0x42	; 66
    10a6:	c5 01       	movw	r24, r10
    10a8:	b4 01       	movw	r22, r8
    10aa:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    10ae:	ea a1       	ldd	r30, Y+34	; 0x22
    10b0:	fb a1       	ldd	r31, Y+35	; 0x23
    10b2:	60 87       	std	Z+8, r22	; 0x08
    10b4:	71 87       	std	Z+9, r23	; 0x09
    10b6:	82 87       	std	Z+10, r24	; 0x0a
    10b8:	93 87       	std	Z+11, r25	; 0x0b
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	de bf       	out	0x3e, r29	; 62
}
    10be:	cf 01       	movw	r24, r30
    10c0:	eb 96       	adiw	r28, 0x3b	; 59
    10c2:	cd bf       	out	0x3d, r28	; 61
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	df 90       	pop	r13
    10d4:	cf 90       	pop	r12
    10d6:	bf 90       	pop	r11
    10d8:	af 90       	pop	r10
    10da:	9f 90       	pop	r9
    10dc:	8f 90       	pop	r8
    10de:	7f 90       	pop	r7
    10e0:	6f 90       	pop	r6
    10e2:	5f 90       	pop	r5
    10e4:	4f 90       	pop	r4
    10e6:	3f 90       	pop	r3
    10e8:	2f 90       	pop	r2
    10ea:	08 95       	ret

000010ec <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

double invSqrt(double x) {
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
	double halfx = 0.5 * x;
	double y = x;
	long i = *(long*)&y;
	i = 0x5f3759df - (i>>1);
	y = *(double*)&i;
    10f8:	8b 01       	movw	r16, r22
    10fa:	9c 01       	movw	r18, r24
    10fc:	35 95       	asr	r19
    10fe:	27 95       	ror	r18
    1100:	17 95       	ror	r17
    1102:	07 95       	ror	r16
    1104:	0f 2e       	mov	r0, r31
    1106:	ff ed       	ldi	r31, 0xDF	; 223
    1108:	cf 2e       	mov	r12, r31
    110a:	f9 e5       	ldi	r31, 0x59	; 89
    110c:	df 2e       	mov	r13, r31
    110e:	f7 e3       	ldi	r31, 0x37	; 55
    1110:	ef 2e       	mov	r14, r31
    1112:	ff e5       	ldi	r31, 0x5F	; 95
    1114:	ff 2e       	mov	r15, r31
    1116:	f0 2d       	mov	r31, r0
    1118:	c0 1a       	sub	r12, r16
    111a:	d1 0a       	sbc	r13, r17
    111c:	e2 0a       	sbc	r14, r18
    111e:	f3 0a       	sbc	r15, r19
	y = y * (1.5 - (halfx * y * y));
	return y;
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e0       	ldi	r20, 0x00	; 0
    1126:	5f e3       	ldi	r21, 0x3F	; 63
    1128:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    112c:	a7 01       	movw	r20, r14
    112e:	96 01       	movw	r18, r12
    1130:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1134:	a7 01       	movw	r20, r14
    1136:	96 01       	movw	r18, r12
    1138:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    113c:	9b 01       	movw	r18, r22
    113e:	ac 01       	movw	r20, r24
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	80 ec       	ldi	r24, 0xC0	; 192
    1146:	9f e3       	ldi	r25, 0x3F	; 63
    1148:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    114c:	a7 01       	movw	r20, r14
    114e:	96 01       	movw	r18, r12
    1150:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
}
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	df 90       	pop	r13
    115e:	cf 90       	pop	r12
    1160:	08 95       	ret

00001162 <MahonyAHRSupdateIMU>:
}

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MahonyAHRSupdateIMU(double gx, double gy, double gz, double ax, double ay, double az) {
    1162:	4f 92       	push	r4
    1164:	5f 92       	push	r5
    1166:	6f 92       	push	r6
    1168:	7f 92       	push	r7
    116a:	8f 92       	push	r8
    116c:	9f 92       	push	r9
    116e:	af 92       	push	r10
    1170:	bf 92       	push	r11
    1172:	cf 92       	push	r12
    1174:	df 92       	push	r13
    1176:	ef 92       	push	r14
    1178:	ff 92       	push	r15
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	a4 97       	sbiw	r28, 0x24	; 36
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	de bf       	out	0x3e, r29	; 62
    118c:	69 87       	std	Y+9, r22	; 0x09
    118e:	7a 87       	std	Y+10, r23	; 0x0a
    1190:	8b 87       	std	Y+11, r24	; 0x0b
    1192:	9c 87       	std	Y+12, r25	; 0x0c
    1194:	2d 87       	std	Y+13, r18	; 0x0d
    1196:	3e 87       	std	Y+14, r19	; 0x0e
    1198:	4f 87       	std	Y+15, r20	; 0x0f
    119a:	58 8b       	std	Y+16, r21	; 0x10
    119c:	e9 8a       	std	Y+17, r14	; 0x11
    119e:	fa 8a       	std	Y+18, r15	; 0x12
    11a0:	0b 8b       	std	Y+19, r16	; 0x13
    11a2:	1c 8b       	std	Y+20, r17	; 0x14
	double halfvx, halfvy, halfvz;
	double halfex, halfey, halfez;
	double qa, qb, qc;

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0) && (ay == 0.0) && (az == 0.0))) {
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	a9 01       	movw	r20, r18
    11aa:	c6 01       	movw	r24, r12
    11ac:	b5 01       	movw	r22, r10
    11ae:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <__cmpsf2>
    11b2:	81 11       	cpse	r24, r1
    11b4:	17 c0       	rjmp	.+46     	; 0x11e4 <MahonyAHRSupdateIMU+0x82>
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	a9 01       	movw	r20, r18
    11bc:	68 ad       	ldd	r22, Y+56	; 0x38
    11be:	79 ad       	ldd	r23, Y+57	; 0x39
    11c0:	8a ad       	ldd	r24, Y+58	; 0x3a
    11c2:	9b ad       	ldd	r25, Y+59	; 0x3b
    11c4:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <__cmpsf2>
    11c8:	81 11       	cpse	r24, r1
    11ca:	0c c0       	rjmp	.+24     	; 0x11e4 <MahonyAHRSupdateIMU+0x82>
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	a9 01       	movw	r20, r18
    11d2:	6c ad       	ldd	r22, Y+60	; 0x3c
    11d4:	7d ad       	ldd	r23, Y+61	; 0x3d
    11d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    11d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    11da:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <__cmpsf2>
    11de:	88 23       	and	r24, r24
    11e0:	09 f4       	brne	.+2      	; 0x11e4 <MahonyAHRSupdateIMU+0x82>
    11e2:	60 c2       	rjmp	.+1216   	; 0x16a4 <MahonyAHRSupdateIMU+0x542>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    11e4:	a6 01       	movw	r20, r12
    11e6:	95 01       	movw	r18, r10
    11e8:	c6 01       	movw	r24, r12
    11ea:	b5 01       	movw	r22, r10
    11ec:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    11f0:	2b 01       	movw	r4, r22
    11f2:	3c 01       	movw	r6, r24
    11f4:	28 ad       	ldd	r18, Y+56	; 0x38
    11f6:	39 ad       	ldd	r19, Y+57	; 0x39
    11f8:	4a ad       	ldd	r20, Y+58	; 0x3a
    11fa:	5b ad       	ldd	r21, Y+59	; 0x3b
    11fc:	ca 01       	movw	r24, r20
    11fe:	b9 01       	movw	r22, r18
    1200:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1204:	9b 01       	movw	r18, r22
    1206:	ac 01       	movw	r20, r24
    1208:	c3 01       	movw	r24, r6
    120a:	b2 01       	movw	r22, r4
    120c:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1210:	2b 01       	movw	r4, r22
    1212:	3c 01       	movw	r6, r24
    1214:	2c ad       	ldd	r18, Y+60	; 0x3c
    1216:	3d ad       	ldd	r19, Y+61	; 0x3d
    1218:	4e ad       	ldd	r20, Y+62	; 0x3e
    121a:	5f ad       	ldd	r21, Y+63	; 0x3f
    121c:	ca 01       	movw	r24, r20
    121e:	b9 01       	movw	r22, r18
    1220:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1224:	9b 01       	movw	r18, r22
    1226:	ac 01       	movw	r20, r24
    1228:	c3 01       	movw	r24, r6
    122a:	b2 01       	movw	r22, r4
    122c:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1230:	5d df       	rcall	.-326    	; 0x10ec <invSqrt>
    1232:	2b 01       	movw	r4, r22
    1234:	3c 01       	movw	r6, r24
		ax *= recipNorm;
    1236:	9b 01       	movw	r18, r22
    1238:	ac 01       	movw	r20, r24
    123a:	c6 01       	movw	r24, r12
    123c:	b5 01       	movw	r22, r10
    123e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1242:	69 83       	std	Y+1, r22	; 0x01
    1244:	7a 83       	std	Y+2, r23	; 0x02
    1246:	8b 83       	std	Y+3, r24	; 0x03
    1248:	9c 83       	std	Y+4, r25	; 0x04
		ay *= recipNorm;
    124a:	a3 01       	movw	r20, r6
    124c:	92 01       	movw	r18, r4
    124e:	68 ad       	ldd	r22, Y+56	; 0x38
    1250:	79 ad       	ldd	r23, Y+57	; 0x39
    1252:	8a ad       	ldd	r24, Y+58	; 0x3a
    1254:	9b ad       	ldd	r25, Y+59	; 0x3b
    1256:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    125a:	6d 83       	std	Y+5, r22	; 0x05
    125c:	7e 83       	std	Y+6, r23	; 0x06
    125e:	8f 83       	std	Y+7, r24	; 0x07
    1260:	98 87       	std	Y+8, r25	; 0x08
		az *= recipNorm;        
    1262:	a3 01       	movw	r20, r6
    1264:	92 01       	movw	r18, r4
    1266:	6c ad       	ldd	r22, Y+60	; 0x3c
    1268:	7d ad       	ldd	r23, Y+61	; 0x3d
    126a:	8e ad       	ldd	r24, Y+62	; 0x3e
    126c:	9f ad       	ldd	r25, Y+63	; 0x3f
    126e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1272:	6d 8b       	std	Y+21, r22	; 0x15
    1274:	7e 8b       	std	Y+22, r23	; 0x16
    1276:	8f 8b       	std	Y+23, r24	; 0x17
    1278:	98 8f       	std	Y+24, r25	; 0x18

		// Estimated direction of gravity and vector perpendicular to magnetic flux
		halfvx = q1 * q3 - q0 * q2;
    127a:	60 91 67 21 	lds	r22, 0x2167	; 0x802167 <q1>
    127e:	70 91 68 21 	lds	r23, 0x2168	; 0x802168 <q1+0x1>
    1282:	80 91 69 21 	lds	r24, 0x2169	; 0x802169 <q1+0x2>
    1286:	90 91 6a 21 	lds	r25, 0x216A	; 0x80216a <q1+0x3>
    128a:	20 91 5f 21 	lds	r18, 0x215F	; 0x80215f <q3>
    128e:	30 91 60 21 	lds	r19, 0x2160	; 0x802160 <q3+0x1>
    1292:	40 91 61 21 	lds	r20, 0x2161	; 0x802161 <q3+0x2>
    1296:	50 91 62 21 	lds	r21, 0x2162	; 0x802162 <q3+0x3>
    129a:	80 90 18 20 	lds	r8, 0x2018	; 0x802018 <q0>
    129e:	90 90 19 20 	lds	r9, 0x2019	; 0x802019 <q0+0x1>
    12a2:	a0 90 1a 20 	lds	r10, 0x201A	; 0x80201a <q0+0x2>
    12a6:	b0 90 1b 20 	lds	r11, 0x201B	; 0x80201b <q0+0x3>
    12aa:	40 90 63 21 	lds	r4, 0x2163	; 0x802163 <q2>
    12ae:	50 90 64 21 	lds	r5, 0x2164	; 0x802164 <q2+0x1>
    12b2:	60 90 65 21 	lds	r6, 0x2165	; 0x802165 <q2+0x2>
    12b6:	70 90 66 21 	lds	r7, 0x2166	; 0x802166 <q2+0x3>
    12ba:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    12be:	6b 01       	movw	r12, r22
    12c0:	7c 01       	movw	r14, r24
    12c2:	a3 01       	movw	r20, r6
    12c4:	92 01       	movw	r18, r4
    12c6:	c5 01       	movw	r24, r10
    12c8:	b4 01       	movw	r22, r8
    12ca:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    12ce:	9b 01       	movw	r18, r22
    12d0:	ac 01       	movw	r20, r24
    12d2:	c7 01       	movw	r24, r14
    12d4:	b6 01       	movw	r22, r12
    12d6:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    12da:	69 8f       	std	Y+25, r22	; 0x19
    12dc:	7a 8f       	std	Y+26, r23	; 0x1a
    12de:	8b 8f       	std	Y+27, r24	; 0x1b
    12e0:	9c 8f       	std	Y+28, r25	; 0x1c
		halfvy = q0 * q1 + q2 * q3;
    12e2:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
    12e6:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
    12ea:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
    12ee:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
    12f2:	20 91 67 21 	lds	r18, 0x2167	; 0x802167 <q1>
    12f6:	30 91 68 21 	lds	r19, 0x2168	; 0x802168 <q1+0x1>
    12fa:	40 91 69 21 	lds	r20, 0x2169	; 0x802169 <q1+0x2>
    12fe:	50 91 6a 21 	lds	r21, 0x216A	; 0x80216a <q1+0x3>
    1302:	80 90 63 21 	lds	r8, 0x2163	; 0x802163 <q2>
    1306:	90 90 64 21 	lds	r9, 0x2164	; 0x802164 <q2+0x1>
    130a:	a0 90 65 21 	lds	r10, 0x2165	; 0x802165 <q2+0x2>
    130e:	b0 90 66 21 	lds	r11, 0x2166	; 0x802166 <q2+0x3>
    1312:	40 90 5f 21 	lds	r4, 0x215F	; 0x80215f <q3>
    1316:	50 90 60 21 	lds	r5, 0x2160	; 0x802160 <q3+0x1>
    131a:	60 90 61 21 	lds	r6, 0x2161	; 0x802161 <q3+0x2>
    131e:	70 90 62 21 	lds	r7, 0x2162	; 0x802162 <q3+0x3>
    1322:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1326:	6b 01       	movw	r12, r22
    1328:	7c 01       	movw	r14, r24
    132a:	a3 01       	movw	r20, r6
    132c:	92 01       	movw	r18, r4
    132e:	c5 01       	movw	r24, r10
    1330:	b4 01       	movw	r22, r8
    1332:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1336:	9b 01       	movw	r18, r22
    1338:	ac 01       	movw	r20, r24
    133a:	c7 01       	movw	r24, r14
    133c:	b6 01       	movw	r22, r12
    133e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1342:	6d 8f       	std	Y+29, r22	; 0x1d
    1344:	7e 8f       	std	Y+30, r23	; 0x1e
    1346:	8f 8f       	std	Y+31, r24	; 0x1f
    1348:	98 a3       	std	Y+32, r25	; 0x20
		halfvz = q0 * q0 - 0.5 + q3 * q3;
    134a:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
    134e:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
    1352:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
    1356:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
    135a:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <q0>
    135e:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <q0+0x1>
    1362:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <q0+0x2>
    1366:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <q0+0x3>
    136a:	80 90 5f 21 	lds	r8, 0x215F	; 0x80215f <q3>
    136e:	90 90 60 21 	lds	r9, 0x2160	; 0x802160 <q3+0x1>
    1372:	a0 90 61 21 	lds	r10, 0x2161	; 0x802161 <q3+0x2>
    1376:	b0 90 62 21 	lds	r11, 0x2162	; 0x802162 <q3+0x3>
    137a:	40 90 5f 21 	lds	r4, 0x215F	; 0x80215f <q3>
    137e:	50 90 60 21 	lds	r5, 0x2160	; 0x802160 <q3+0x1>
    1382:	60 90 61 21 	lds	r6, 0x2161	; 0x802161 <q3+0x2>
    1386:	70 90 62 21 	lds	r7, 0x2162	; 0x802162 <q3+0x3>
    138a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	5f e3       	ldi	r21, 0x3F	; 63
    1396:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    139a:	6b 01       	movw	r12, r22
    139c:	7c 01       	movw	r14, r24
    139e:	a3 01       	movw	r20, r6
    13a0:	92 01       	movw	r18, r4
    13a2:	c5 01       	movw	r24, r10
    13a4:	b4 01       	movw	r22, r8
    13a6:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    13aa:	9b 01       	movw	r18, r22
    13ac:	ac 01       	movw	r20, r24
    13ae:	c7 01       	movw	r24, r14
    13b0:	b6 01       	movw	r22, r12
    13b2:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    13b6:	6b 01       	movw	r12, r22
    13b8:	7c 01       	movw	r14, r24
	
		// Error is sum of cross product between estimated and measured direction of gravity
		halfex = (ay * halfvz - az * halfvy);
    13ba:	9b 01       	movw	r18, r22
    13bc:	ac 01       	movw	r20, r24
    13be:	6d 81       	ldd	r22, Y+5	; 0x05
    13c0:	7e 81       	ldd	r23, Y+6	; 0x06
    13c2:	8f 81       	ldd	r24, Y+7	; 0x07
    13c4:	98 85       	ldd	r25, Y+8	; 0x08
    13c6:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    13ca:	4b 01       	movw	r8, r22
    13cc:	5c 01       	movw	r10, r24
    13ce:	2d 8d       	ldd	r18, Y+29	; 0x1d
    13d0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    13d2:	4f 8d       	ldd	r20, Y+31	; 0x1f
    13d4:	58 a1       	ldd	r21, Y+32	; 0x20
    13d6:	6d 89       	ldd	r22, Y+21	; 0x15
    13d8:	7e 89       	ldd	r23, Y+22	; 0x16
    13da:	8f 89       	ldd	r24, Y+23	; 0x17
    13dc:	98 8d       	ldd	r25, Y+24	; 0x18
    13de:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    13e2:	9b 01       	movw	r18, r22
    13e4:	ac 01       	movw	r20, r24
    13e6:	c5 01       	movw	r24, r10
    13e8:	b4 01       	movw	r22, r8
    13ea:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    13ee:	69 a3       	std	Y+33, r22	; 0x21
    13f0:	7a a3       	std	Y+34, r23	; 0x22
    13f2:	8b a3       	std	Y+35, r24	; 0x23
    13f4:	9c a3       	std	Y+36, r25	; 0x24
		halfey = (az * halfvx - ax * halfvz);
    13f6:	29 8d       	ldd	r18, Y+25	; 0x19
    13f8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    13fa:	4b 8d       	ldd	r20, Y+27	; 0x1b
    13fc:	5c 8d       	ldd	r21, Y+28	; 0x1c
    13fe:	6d 89       	ldd	r22, Y+21	; 0x15
    1400:	7e 89       	ldd	r23, Y+22	; 0x16
    1402:	8f 89       	ldd	r24, Y+23	; 0x17
    1404:	98 8d       	ldd	r25, Y+24	; 0x18
    1406:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    140a:	4b 01       	movw	r8, r22
    140c:	5c 01       	movw	r10, r24
    140e:	a7 01       	movw	r20, r14
    1410:	96 01       	movw	r18, r12
    1412:	69 81       	ldd	r22, Y+1	; 0x01
    1414:	7a 81       	ldd	r23, Y+2	; 0x02
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	9c 81       	ldd	r25, Y+4	; 0x04
    141a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    141e:	9b 01       	movw	r18, r22
    1420:	ac 01       	movw	r20, r24
    1422:	c5 01       	movw	r24, r10
    1424:	b4 01       	movw	r22, r8
    1426:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    142a:	4b 01       	movw	r8, r22
    142c:	5c 01       	movw	r10, r24
		halfez = (ax * halfvy - ay * halfvx);
    142e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1430:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1432:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1434:	58 a1       	ldd	r21, Y+32	; 0x20
    1436:	69 81       	ldd	r22, Y+1	; 0x01
    1438:	7a 81       	ldd	r23, Y+2	; 0x02
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1442:	6b 01       	movw	r12, r22
    1444:	7c 01       	movw	r14, r24
    1446:	29 8d       	ldd	r18, Y+25	; 0x19
    1448:	3a 8d       	ldd	r19, Y+26	; 0x1a
    144a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    144c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    144e:	6d 81       	ldd	r22, Y+5	; 0x05
    1450:	7e 81       	ldd	r23, Y+6	; 0x06
    1452:	8f 81       	ldd	r24, Y+7	; 0x07
    1454:	98 85       	ldd	r25, Y+8	; 0x08
    1456:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    145a:	9b 01       	movw	r18, r22
    145c:	ac 01       	movw	r20, r24
    145e:	c7 01       	movw	r24, r14
    1460:	b6 01       	movw	r22, r12
    1462:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    1466:	6b 01       	movw	r12, r22
    1468:	7c 01       	movw	r14, r24

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0) {
    146a:	60 91 6b 21 	lds	r22, 0x216B	; 0x80216b <twoKi>
    146e:	70 91 6c 21 	lds	r23, 0x216C	; 0x80216c <twoKi+0x1>
    1472:	80 91 6d 21 	lds	r24, 0x216D	; 0x80216d <twoKi+0x2>
    1476:	90 91 6e 21 	lds	r25, 0x216E	; 0x80216e <twoKi+0x3>
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	a9 01       	movw	r20, r18
    1480:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <__gesf2>
    1484:	18 16       	cp	r1, r24
    1486:	0c f0       	brlt	.+2      	; 0x148a <MahonyAHRSupdateIMU+0x328>
    1488:	ab c0       	rjmp	.+342    	; 0x15e0 <MahonyAHRSupdateIMU+0x47e>
			integralFBx += twoKi * halfex * (1.0 / sampleFreq);	// integral error scaled by Ki
    148a:	20 91 6b 21 	lds	r18, 0x216B	; 0x80216b <twoKi>
    148e:	30 91 6c 21 	lds	r19, 0x216C	; 0x80216c <twoKi+0x1>
    1492:	40 91 6d 21 	lds	r20, 0x216D	; 0x80216d <twoKi+0x2>
    1496:	50 91 6e 21 	lds	r21, 0x216E	; 0x80216e <twoKi+0x3>
    149a:	40 90 5b 21 	lds	r4, 0x215B	; 0x80215b <integralFBx>
    149e:	50 90 5c 21 	lds	r5, 0x215C	; 0x80215c <integralFBx+0x1>
    14a2:	60 90 5d 21 	lds	r6, 0x215D	; 0x80215d <integralFBx+0x2>
    14a6:	70 90 5e 21 	lds	r7, 0x215E	; 0x80215e <integralFBx+0x3>
    14aa:	69 a1       	ldd	r22, Y+33	; 0x21
    14ac:	7a a1       	ldd	r23, Y+34	; 0x22
    14ae:	8b a1       	ldd	r24, Y+35	; 0x23
    14b0:	9c a1       	ldd	r25, Y+36	; 0x24
    14b2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    14b6:	2a ef       	ldi	r18, 0xFA	; 250
    14b8:	39 ec       	ldi	r19, 0xC9	; 201
    14ba:	44 e3       	ldi	r20, 0x34	; 52
    14bc:	59 e3       	ldi	r21, 0x39	; 57
    14be:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    14c2:	a3 01       	movw	r20, r6
    14c4:	92 01       	movw	r18, r4
    14c6:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    14ca:	60 93 5b 21 	sts	0x215B, r22	; 0x80215b <integralFBx>
    14ce:	70 93 5c 21 	sts	0x215C, r23	; 0x80215c <integralFBx+0x1>
    14d2:	80 93 5d 21 	sts	0x215D, r24	; 0x80215d <integralFBx+0x2>
    14d6:	90 93 5e 21 	sts	0x215E, r25	; 0x80215e <integralFBx+0x3>
			integralFBy += twoKi * halfey * (1.0 / sampleFreq);
    14da:	20 91 6b 21 	lds	r18, 0x216B	; 0x80216b <twoKi>
    14de:	30 91 6c 21 	lds	r19, 0x216C	; 0x80216c <twoKi+0x1>
    14e2:	40 91 6d 21 	lds	r20, 0x216D	; 0x80216d <twoKi+0x2>
    14e6:	50 91 6e 21 	lds	r21, 0x216E	; 0x80216e <twoKi+0x3>
    14ea:	40 90 57 21 	lds	r4, 0x2157	; 0x802157 <integralFBy>
    14ee:	50 90 58 21 	lds	r5, 0x2158	; 0x802158 <integralFBy+0x1>
    14f2:	60 90 59 21 	lds	r6, 0x2159	; 0x802159 <integralFBy+0x2>
    14f6:	70 90 5a 21 	lds	r7, 0x215A	; 0x80215a <integralFBy+0x3>
    14fa:	c5 01       	movw	r24, r10
    14fc:	b4 01       	movw	r22, r8
    14fe:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1502:	2a ef       	ldi	r18, 0xFA	; 250
    1504:	39 ec       	ldi	r19, 0xC9	; 201
    1506:	44 e3       	ldi	r20, 0x34	; 52
    1508:	59 e3       	ldi	r21, 0x39	; 57
    150a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    150e:	a3 01       	movw	r20, r6
    1510:	92 01       	movw	r18, r4
    1512:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1516:	60 93 57 21 	sts	0x2157, r22	; 0x802157 <integralFBy>
    151a:	70 93 58 21 	sts	0x2158, r23	; 0x802158 <integralFBy+0x1>
    151e:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <integralFBy+0x2>
    1522:	90 93 5a 21 	sts	0x215A, r25	; 0x80215a <integralFBy+0x3>
			integralFBz += twoKi * halfez * (1.0 / sampleFreq);
    1526:	20 91 6b 21 	lds	r18, 0x216B	; 0x80216b <twoKi>
    152a:	30 91 6c 21 	lds	r19, 0x216C	; 0x80216c <twoKi+0x1>
    152e:	40 91 6d 21 	lds	r20, 0x216D	; 0x80216d <twoKi+0x2>
    1532:	50 91 6e 21 	lds	r21, 0x216E	; 0x80216e <twoKi+0x3>
    1536:	40 90 53 21 	lds	r4, 0x2153	; 0x802153 <integralFBz>
    153a:	50 90 54 21 	lds	r5, 0x2154	; 0x802154 <integralFBz+0x1>
    153e:	60 90 55 21 	lds	r6, 0x2155	; 0x802155 <integralFBz+0x2>
    1542:	70 90 56 21 	lds	r7, 0x2156	; 0x802156 <integralFBz+0x3>
    1546:	c7 01       	movw	r24, r14
    1548:	b6 01       	movw	r22, r12
    154a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    154e:	2a ef       	ldi	r18, 0xFA	; 250
    1550:	39 ec       	ldi	r19, 0xC9	; 201
    1552:	44 e3       	ldi	r20, 0x34	; 52
    1554:	59 e3       	ldi	r21, 0x39	; 57
    1556:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    155a:	a3 01       	movw	r20, r6
    155c:	92 01       	movw	r18, r4
    155e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1562:	60 93 53 21 	sts	0x2153, r22	; 0x802153 <integralFBz>
    1566:	70 93 54 21 	sts	0x2154, r23	; 0x802154 <integralFBz+0x1>
    156a:	80 93 55 21 	sts	0x2155, r24	; 0x802155 <integralFBz+0x2>
    156e:	90 93 56 21 	sts	0x2156, r25	; 0x802156 <integralFBz+0x3>
			gx += integralFBx;	// apply integral feedback
    1572:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <integralFBx>
    1576:	30 91 5c 21 	lds	r19, 0x215C	; 0x80215c <integralFBx+0x1>
    157a:	40 91 5d 21 	lds	r20, 0x215D	; 0x80215d <integralFBx+0x2>
    157e:	50 91 5e 21 	lds	r21, 0x215E	; 0x80215e <integralFBx+0x3>
    1582:	69 85       	ldd	r22, Y+9	; 0x09
    1584:	7a 85       	ldd	r23, Y+10	; 0x0a
    1586:	8b 85       	ldd	r24, Y+11	; 0x0b
    1588:	9c 85       	ldd	r25, Y+12	; 0x0c
    158a:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    158e:	69 87       	std	Y+9, r22	; 0x09
    1590:	7a 87       	std	Y+10, r23	; 0x0a
    1592:	8b 87       	std	Y+11, r24	; 0x0b
    1594:	9c 87       	std	Y+12, r25	; 0x0c
			gy += integralFBy;
    1596:	20 91 57 21 	lds	r18, 0x2157	; 0x802157 <integralFBy>
    159a:	30 91 58 21 	lds	r19, 0x2158	; 0x802158 <integralFBy+0x1>
    159e:	40 91 59 21 	lds	r20, 0x2159	; 0x802159 <integralFBy+0x2>
    15a2:	50 91 5a 21 	lds	r21, 0x215A	; 0x80215a <integralFBy+0x3>
    15a6:	6d 85       	ldd	r22, Y+13	; 0x0d
    15a8:	7e 85       	ldd	r23, Y+14	; 0x0e
    15aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ac:	98 89       	ldd	r25, Y+16	; 0x10
    15ae:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    15b2:	6d 87       	std	Y+13, r22	; 0x0d
    15b4:	7e 87       	std	Y+14, r23	; 0x0e
    15b6:	8f 87       	std	Y+15, r24	; 0x0f
    15b8:	98 8b       	std	Y+16, r25	; 0x10
			gz += integralFBz;
    15ba:	20 91 53 21 	lds	r18, 0x2153	; 0x802153 <integralFBz>
    15be:	30 91 54 21 	lds	r19, 0x2154	; 0x802154 <integralFBz+0x1>
    15c2:	40 91 55 21 	lds	r20, 0x2155	; 0x802155 <integralFBz+0x2>
    15c6:	50 91 56 21 	lds	r21, 0x2156	; 0x802156 <integralFBz+0x3>
    15ca:	69 89       	ldd	r22, Y+17	; 0x11
    15cc:	7a 89       	ldd	r23, Y+18	; 0x12
    15ce:	8b 89       	ldd	r24, Y+19	; 0x13
    15d0:	9c 89       	ldd	r25, Y+20	; 0x14
    15d2:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    15d6:	69 8b       	std	Y+17, r22	; 0x11
    15d8:	7a 8b       	std	Y+18, r23	; 0x12
    15da:	8b 8b       	std	Y+19, r24	; 0x13
    15dc:	9c 8b       	std	Y+20, r25	; 0x14
    15de:	18 c0       	rjmp	.+48     	; 0x1610 <MahonyAHRSupdateIMU+0x4ae>
		}
		else {
			integralFBx = 0.0;	// prevent integral windup
    15e0:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <integralFBx>
    15e4:	10 92 5c 21 	sts	0x215C, r1	; 0x80215c <integralFBx+0x1>
    15e8:	10 92 5d 21 	sts	0x215D, r1	; 0x80215d <integralFBx+0x2>
    15ec:	10 92 5e 21 	sts	0x215E, r1	; 0x80215e <integralFBx+0x3>
			integralFBy = 0.0;
    15f0:	10 92 57 21 	sts	0x2157, r1	; 0x802157 <integralFBy>
    15f4:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <integralFBy+0x1>
    15f8:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <integralFBy+0x2>
    15fc:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <integralFBy+0x3>
			integralFBz = 0.0;
    1600:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <integralFBz>
    1604:	10 92 54 21 	sts	0x2154, r1	; 0x802154 <integralFBz+0x1>
    1608:	10 92 55 21 	sts	0x2155, r1	; 0x802155 <integralFBz+0x2>
    160c:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <integralFBz+0x3>
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
    1610:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <twoKp>
    1614:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <twoKp+0x1>
    1618:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <twoKp+0x2>
    161c:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <twoKp+0x3>
    1620:	69 a1       	ldd	r22, Y+33	; 0x21
    1622:	7a a1       	ldd	r23, Y+34	; 0x22
    1624:	8b a1       	ldd	r24, Y+35	; 0x23
    1626:	9c a1       	ldd	r25, Y+36	; 0x24
    1628:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    162c:	9b 01       	movw	r18, r22
    162e:	ac 01       	movw	r20, r24
    1630:	69 85       	ldd	r22, Y+9	; 0x09
    1632:	7a 85       	ldd	r23, Y+10	; 0x0a
    1634:	8b 85       	ldd	r24, Y+11	; 0x0b
    1636:	9c 85       	ldd	r25, Y+12	; 0x0c
    1638:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    163c:	69 87       	std	Y+9, r22	; 0x09
    163e:	7a 87       	std	Y+10, r23	; 0x0a
    1640:	8b 87       	std	Y+11, r24	; 0x0b
    1642:	9c 87       	std	Y+12, r25	; 0x0c
		gy += twoKp * halfey;
    1644:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <twoKp>
    1648:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <twoKp+0x1>
    164c:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <twoKp+0x2>
    1650:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <twoKp+0x3>
    1654:	c5 01       	movw	r24, r10
    1656:	b4 01       	movw	r22, r8
    1658:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    165c:	9b 01       	movw	r18, r22
    165e:	ac 01       	movw	r20, r24
    1660:	6d 85       	ldd	r22, Y+13	; 0x0d
    1662:	7e 85       	ldd	r23, Y+14	; 0x0e
    1664:	8f 85       	ldd	r24, Y+15	; 0x0f
    1666:	98 89       	ldd	r25, Y+16	; 0x10
    1668:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    166c:	6d 87       	std	Y+13, r22	; 0x0d
    166e:	7e 87       	std	Y+14, r23	; 0x0e
    1670:	8f 87       	std	Y+15, r24	; 0x0f
    1672:	98 8b       	std	Y+16, r25	; 0x10
		gz += twoKp * halfez;
    1674:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <twoKp>
    1678:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <twoKp+0x1>
    167c:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <twoKp+0x2>
    1680:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <twoKp+0x3>
    1684:	c7 01       	movw	r24, r14
    1686:	b6 01       	movw	r22, r12
    1688:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    168c:	9b 01       	movw	r18, r22
    168e:	ac 01       	movw	r20, r24
    1690:	69 89       	ldd	r22, Y+17	; 0x11
    1692:	7a 89       	ldd	r23, Y+18	; 0x12
    1694:	8b 89       	ldd	r24, Y+19	; 0x13
    1696:	9c 89       	ldd	r25, Y+20	; 0x14
    1698:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    169c:	69 8b       	std	Y+17, r22	; 0x11
    169e:	7a 8b       	std	Y+18, r23	; 0x12
    16a0:	8b 8b       	std	Y+19, r24	; 0x13
    16a2:	9c 8b       	std	Y+20, r25	; 0x14
	}
	
	// Integrate rate of change of quaternion
	gx *= (0.5 * (1.0 / sampleFreq));		// pre-multiply common factors
    16a4:	2a ef       	ldi	r18, 0xFA	; 250
    16a6:	39 ec       	ldi	r19, 0xC9	; 201
    16a8:	44 eb       	ldi	r20, 0xB4	; 180
    16aa:	58 e3       	ldi	r21, 0x38	; 56
    16ac:	69 85       	ldd	r22, Y+9	; 0x09
    16ae:	7a 85       	ldd	r23, Y+10	; 0x0a
    16b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    16b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    16b4:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    16b8:	69 87       	std	Y+9, r22	; 0x09
    16ba:	7a 87       	std	Y+10, r23	; 0x0a
    16bc:	8b 87       	std	Y+11, r24	; 0x0b
    16be:	9c 87       	std	Y+12, r25	; 0x0c
	gy *= (0.5 * (1.0 / sampleFreq));
    16c0:	2a ef       	ldi	r18, 0xFA	; 250
    16c2:	39 ec       	ldi	r19, 0xC9	; 201
    16c4:	44 eb       	ldi	r20, 0xB4	; 180
    16c6:	58 e3       	ldi	r21, 0x38	; 56
    16c8:	6d 85       	ldd	r22, Y+13	; 0x0d
    16ca:	7e 85       	ldd	r23, Y+14	; 0x0e
    16cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ce:	98 89       	ldd	r25, Y+16	; 0x10
    16d0:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    16d4:	6d 87       	std	Y+13, r22	; 0x0d
    16d6:	7e 87       	std	Y+14, r23	; 0x0e
    16d8:	8f 87       	std	Y+15, r24	; 0x0f
    16da:	98 8b       	std	Y+16, r25	; 0x10
	gz *= (0.5 * (1.0 / sampleFreq));
    16dc:	2a ef       	ldi	r18, 0xFA	; 250
    16de:	39 ec       	ldi	r19, 0xC9	; 201
    16e0:	44 eb       	ldi	r20, 0xB4	; 180
    16e2:	58 e3       	ldi	r21, 0x38	; 56
    16e4:	69 89       	ldd	r22, Y+17	; 0x11
    16e6:	7a 89       	ldd	r23, Y+18	; 0x12
    16e8:	8b 89       	ldd	r24, Y+19	; 0x13
    16ea:	9c 89       	ldd	r25, Y+20	; 0x14
    16ec:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    16f0:	69 8b       	std	Y+17, r22	; 0x11
    16f2:	7a 8b       	std	Y+18, r23	; 0x12
    16f4:	8b 8b       	std	Y+19, r24	; 0x13
    16f6:	9c 8b       	std	Y+20, r25	; 0x14
	qa = q0;
    16f8:	e0 90 18 20 	lds	r14, 0x2018	; 0x802018 <q0>
    16fc:	f0 90 19 20 	lds	r15, 0x2019	; 0x802019 <q0+0x1>
    1700:	00 91 1a 20 	lds	r16, 0x201A	; 0x80201a <q0+0x2>
    1704:	10 91 1b 20 	lds	r17, 0x201B	; 0x80201b <q0+0x3>
    1708:	ed 82       	std	Y+5, r14	; 0x05
    170a:	fe 82       	std	Y+6, r15	; 0x06
    170c:	0f 83       	std	Y+7, r16	; 0x07
    170e:	18 87       	std	Y+8, r17	; 0x08
	qb = q1;
    1710:	80 90 67 21 	lds	r8, 0x2167	; 0x802167 <q1>
    1714:	90 90 68 21 	lds	r9, 0x2168	; 0x802168 <q1+0x1>
    1718:	a0 90 69 21 	lds	r10, 0x2169	; 0x802169 <q1+0x2>
    171c:	b0 90 6a 21 	lds	r11, 0x216A	; 0x80216a <q1+0x3>
	qc = q2;
    1720:	e0 90 63 21 	lds	r14, 0x2163	; 0x802163 <q2>
    1724:	f0 90 64 21 	lds	r15, 0x2164	; 0x802164 <q2+0x1>
    1728:	00 91 65 21 	lds	r16, 0x2165	; 0x802165 <q2+0x2>
    172c:	10 91 66 21 	lds	r17, 0x2166	; 0x802166 <q2+0x3>
    1730:	ed 8a       	std	Y+21, r14	; 0x15
    1732:	fe 8a       	std	Y+22, r15	; 0x16
    1734:	0f 8b       	std	Y+23, r16	; 0x17
    1736:	18 8f       	std	Y+24, r17	; 0x18
	q0 += (-qb * gx - qc * gy - q3 * gz);
    1738:	40 90 5f 21 	lds	r4, 0x215F	; 0x80215f <q3>
    173c:	50 90 60 21 	lds	r5, 0x2160	; 0x802160 <q3+0x1>
    1740:	60 90 61 21 	lds	r6, 0x2161	; 0x802161 <q3+0x2>
    1744:	70 90 62 21 	lds	r7, 0x2162	; 0x802162 <q3+0x3>
    1748:	c0 90 18 20 	lds	r12, 0x2018	; 0x802018 <q0>
    174c:	d0 90 19 20 	lds	r13, 0x2019	; 0x802019 <q0+0x1>
    1750:	e0 90 1a 20 	lds	r14, 0x201A	; 0x80201a <q0+0x2>
    1754:	f0 90 1b 20 	lds	r15, 0x201B	; 0x80201b <q0+0x3>
    1758:	c5 01       	movw	r24, r10
    175a:	b4 01       	movw	r22, r8
    175c:	90 58       	subi	r25, 0x80	; 128
    175e:	29 85       	ldd	r18, Y+9	; 0x09
    1760:	3a 85       	ldd	r19, Y+10	; 0x0a
    1762:	4b 85       	ldd	r20, Y+11	; 0x0b
    1764:	5c 85       	ldd	r21, Y+12	; 0x0c
    1766:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    176a:	69 83       	std	Y+1, r22	; 0x01
    176c:	7a 83       	std	Y+2, r23	; 0x02
    176e:	8b 83       	std	Y+3, r24	; 0x03
    1770:	9c 83       	std	Y+4, r25	; 0x04
    1772:	2d 89       	ldd	r18, Y+21	; 0x15
    1774:	3e 89       	ldd	r19, Y+22	; 0x16
    1776:	4f 89       	ldd	r20, Y+23	; 0x17
    1778:	58 8d       	ldd	r21, Y+24	; 0x18
    177a:	6d 85       	ldd	r22, Y+13	; 0x0d
    177c:	7e 85       	ldd	r23, Y+14	; 0x0e
    177e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1780:	98 89       	ldd	r25, Y+16	; 0x10
    1782:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1786:	9b 01       	movw	r18, r22
    1788:	ac 01       	movw	r20, r24
    178a:	69 81       	ldd	r22, Y+1	; 0x01
    178c:	7a 81       	ldd	r23, Y+2	; 0x02
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    1796:	69 83       	std	Y+1, r22	; 0x01
    1798:	7a 83       	std	Y+2, r23	; 0x02
    179a:	8b 83       	std	Y+3, r24	; 0x03
    179c:	9c 83       	std	Y+4, r25	; 0x04
    179e:	a3 01       	movw	r20, r6
    17a0:	92 01       	movw	r18, r4
    17a2:	69 89       	ldd	r22, Y+17	; 0x11
    17a4:	7a 89       	ldd	r23, Y+18	; 0x12
    17a6:	8b 89       	ldd	r24, Y+19	; 0x13
    17a8:	9c 89       	ldd	r25, Y+20	; 0x14
    17aa:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    17ae:	9b 01       	movw	r18, r22
    17b0:	ac 01       	movw	r20, r24
    17b2:	69 81       	ldd	r22, Y+1	; 0x01
    17b4:	7a 81       	ldd	r23, Y+2	; 0x02
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ba:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    17be:	a7 01       	movw	r20, r14
    17c0:	96 01       	movw	r18, r12
    17c2:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    17c6:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <q0>
    17ca:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <q0+0x1>
    17ce:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <q0+0x2>
    17d2:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <q0+0x3>
	q1 += (qa * gx + qc * gz - q3 * gy);
    17d6:	40 90 5f 21 	lds	r4, 0x215F	; 0x80215f <q3>
    17da:	50 90 60 21 	lds	r5, 0x2160	; 0x802160 <q3+0x1>
    17de:	60 90 61 21 	lds	r6, 0x2161	; 0x802161 <q3+0x2>
    17e2:	70 90 62 21 	lds	r7, 0x2162	; 0x802162 <q3+0x3>
    17e6:	c0 90 67 21 	lds	r12, 0x2167	; 0x802167 <q1>
    17ea:	d0 90 68 21 	lds	r13, 0x2168	; 0x802168 <q1+0x1>
    17ee:	e0 90 69 21 	lds	r14, 0x2169	; 0x802169 <q1+0x2>
    17f2:	f0 90 6a 21 	lds	r15, 0x216A	; 0x80216a <q1+0x3>
    17f6:	2d 81       	ldd	r18, Y+5	; 0x05
    17f8:	3e 81       	ldd	r19, Y+6	; 0x06
    17fa:	4f 81       	ldd	r20, Y+7	; 0x07
    17fc:	58 85       	ldd	r21, Y+8	; 0x08
    17fe:	69 85       	ldd	r22, Y+9	; 0x09
    1800:	7a 85       	ldd	r23, Y+10	; 0x0a
    1802:	8b 85       	ldd	r24, Y+11	; 0x0b
    1804:	9c 85       	ldd	r25, Y+12	; 0x0c
    1806:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    180a:	69 83       	std	Y+1, r22	; 0x01
    180c:	7a 83       	std	Y+2, r23	; 0x02
    180e:	8b 83       	std	Y+3, r24	; 0x03
    1810:	9c 83       	std	Y+4, r25	; 0x04
    1812:	2d 89       	ldd	r18, Y+21	; 0x15
    1814:	3e 89       	ldd	r19, Y+22	; 0x16
    1816:	4f 89       	ldd	r20, Y+23	; 0x17
    1818:	58 8d       	ldd	r21, Y+24	; 0x18
    181a:	69 89       	ldd	r22, Y+17	; 0x11
    181c:	7a 89       	ldd	r23, Y+18	; 0x12
    181e:	8b 89       	ldd	r24, Y+19	; 0x13
    1820:	9c 89       	ldd	r25, Y+20	; 0x14
    1822:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1826:	9b 01       	movw	r18, r22
    1828:	ac 01       	movw	r20, r24
    182a:	69 81       	ldd	r22, Y+1	; 0x01
    182c:	7a 81       	ldd	r23, Y+2	; 0x02
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	9c 81       	ldd	r25, Y+4	; 0x04
    1832:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1836:	69 83       	std	Y+1, r22	; 0x01
    1838:	7a 83       	std	Y+2, r23	; 0x02
    183a:	8b 83       	std	Y+3, r24	; 0x03
    183c:	9c 83       	std	Y+4, r25	; 0x04
    183e:	a3 01       	movw	r20, r6
    1840:	92 01       	movw	r18, r4
    1842:	6d 85       	ldd	r22, Y+13	; 0x0d
    1844:	7e 85       	ldd	r23, Y+14	; 0x0e
    1846:	8f 85       	ldd	r24, Y+15	; 0x0f
    1848:	98 89       	ldd	r25, Y+16	; 0x10
    184a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    184e:	9b 01       	movw	r18, r22
    1850:	ac 01       	movw	r20, r24
    1852:	69 81       	ldd	r22, Y+1	; 0x01
    1854:	7a 81       	ldd	r23, Y+2	; 0x02
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    185e:	a7 01       	movw	r20, r14
    1860:	96 01       	movw	r18, r12
    1862:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1866:	60 93 67 21 	sts	0x2167, r22	; 0x802167 <q1>
    186a:	70 93 68 21 	sts	0x2168, r23	; 0x802168 <q1+0x1>
    186e:	80 93 69 21 	sts	0x2169, r24	; 0x802169 <q1+0x2>
    1872:	90 93 6a 21 	sts	0x216A, r25	; 0x80216a <q1+0x3>
	q2 += (qa * gy - qb * gz + q3 * gx);
    1876:	40 90 5f 21 	lds	r4, 0x215F	; 0x80215f <q3>
    187a:	50 90 60 21 	lds	r5, 0x2160	; 0x802160 <q3+0x1>
    187e:	60 90 61 21 	lds	r6, 0x2161	; 0x802161 <q3+0x2>
    1882:	70 90 62 21 	lds	r7, 0x2162	; 0x802162 <q3+0x3>
    1886:	c0 90 63 21 	lds	r12, 0x2163	; 0x802163 <q2>
    188a:	d0 90 64 21 	lds	r13, 0x2164	; 0x802164 <q2+0x1>
    188e:	e0 90 65 21 	lds	r14, 0x2165	; 0x802165 <q2+0x2>
    1892:	f0 90 66 21 	lds	r15, 0x2166	; 0x802166 <q2+0x3>
    1896:	2d 81       	ldd	r18, Y+5	; 0x05
    1898:	3e 81       	ldd	r19, Y+6	; 0x06
    189a:	4f 81       	ldd	r20, Y+7	; 0x07
    189c:	58 85       	ldd	r21, Y+8	; 0x08
    189e:	6d 85       	ldd	r22, Y+13	; 0x0d
    18a0:	7e 85       	ldd	r23, Y+14	; 0x0e
    18a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18a4:	98 89       	ldd	r25, Y+16	; 0x10
    18a6:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    18aa:	69 83       	std	Y+1, r22	; 0x01
    18ac:	7a 83       	std	Y+2, r23	; 0x02
    18ae:	8b 83       	std	Y+3, r24	; 0x03
    18b0:	9c 83       	std	Y+4, r25	; 0x04
    18b2:	a5 01       	movw	r20, r10
    18b4:	94 01       	movw	r18, r8
    18b6:	69 89       	ldd	r22, Y+17	; 0x11
    18b8:	7a 89       	ldd	r23, Y+18	; 0x12
    18ba:	8b 89       	ldd	r24, Y+19	; 0x13
    18bc:	9c 89       	ldd	r25, Y+20	; 0x14
    18be:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    18c2:	9b 01       	movw	r18, r22
    18c4:	ac 01       	movw	r20, r24
    18c6:	69 81       	ldd	r22, Y+1	; 0x01
    18c8:	7a 81       	ldd	r23, Y+2	; 0x02
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	9c 81       	ldd	r25, Y+4	; 0x04
    18ce:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    18d2:	69 83       	std	Y+1, r22	; 0x01
    18d4:	7a 83       	std	Y+2, r23	; 0x02
    18d6:	8b 83       	std	Y+3, r24	; 0x03
    18d8:	9c 83       	std	Y+4, r25	; 0x04
    18da:	a3 01       	movw	r20, r6
    18dc:	92 01       	movw	r18, r4
    18de:	69 85       	ldd	r22, Y+9	; 0x09
    18e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    18e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    18e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    18e6:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    18ea:	9b 01       	movw	r18, r22
    18ec:	ac 01       	movw	r20, r24
    18ee:	69 81       	ldd	r22, Y+1	; 0x01
    18f0:	7a 81       	ldd	r23, Y+2	; 0x02
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	9c 81       	ldd	r25, Y+4	; 0x04
    18f6:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    18fa:	a7 01       	movw	r20, r14
    18fc:	96 01       	movw	r18, r12
    18fe:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1902:	60 93 63 21 	sts	0x2163, r22	; 0x802163 <q2>
    1906:	70 93 64 21 	sts	0x2164, r23	; 0x802164 <q2+0x1>
    190a:	80 93 65 21 	sts	0x2165, r24	; 0x802165 <q2+0x2>
    190e:	90 93 66 21 	sts	0x2166, r25	; 0x802166 <q2+0x3>
	q3 += (qa * gz + qb * gy - qc * gx); 
    1912:	c0 90 5f 21 	lds	r12, 0x215F	; 0x80215f <q3>
    1916:	d0 90 60 21 	lds	r13, 0x2160	; 0x802160 <q3+0x1>
    191a:	e0 90 61 21 	lds	r14, 0x2161	; 0x802161 <q3+0x2>
    191e:	f0 90 62 21 	lds	r15, 0x2162	; 0x802162 <q3+0x3>
    1922:	2d 81       	ldd	r18, Y+5	; 0x05
    1924:	3e 81       	ldd	r19, Y+6	; 0x06
    1926:	4f 81       	ldd	r20, Y+7	; 0x07
    1928:	58 85       	ldd	r21, Y+8	; 0x08
    192a:	69 89       	ldd	r22, Y+17	; 0x11
    192c:	7a 89       	ldd	r23, Y+18	; 0x12
    192e:	8b 89       	ldd	r24, Y+19	; 0x13
    1930:	9c 89       	ldd	r25, Y+20	; 0x14
    1932:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1936:	2b 01       	movw	r4, r22
    1938:	3c 01       	movw	r6, r24
    193a:	a5 01       	movw	r20, r10
    193c:	94 01       	movw	r18, r8
    193e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1940:	7e 85       	ldd	r23, Y+14	; 0x0e
    1942:	8f 85       	ldd	r24, Y+15	; 0x0f
    1944:	98 89       	ldd	r25, Y+16	; 0x10
    1946:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    194a:	9b 01       	movw	r18, r22
    194c:	ac 01       	movw	r20, r24
    194e:	c3 01       	movw	r24, r6
    1950:	b2 01       	movw	r22, r4
    1952:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1956:	4b 01       	movw	r8, r22
    1958:	5c 01       	movw	r10, r24
    195a:	2d 89       	ldd	r18, Y+21	; 0x15
    195c:	3e 89       	ldd	r19, Y+22	; 0x16
    195e:	4f 89       	ldd	r20, Y+23	; 0x17
    1960:	58 8d       	ldd	r21, Y+24	; 0x18
    1962:	69 85       	ldd	r22, Y+9	; 0x09
    1964:	7a 85       	ldd	r23, Y+10	; 0x0a
    1966:	8b 85       	ldd	r24, Y+11	; 0x0b
    1968:	9c 85       	ldd	r25, Y+12	; 0x0c
    196a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    196e:	9b 01       	movw	r18, r22
    1970:	ac 01       	movw	r20, r24
    1972:	c5 01       	movw	r24, r10
    1974:	b4 01       	movw	r22, r8
    1976:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    197a:	a7 01       	movw	r20, r14
    197c:	96 01       	movw	r18, r12
    197e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1982:	60 93 5f 21 	sts	0x215F, r22	; 0x80215f <q3>
    1986:	70 93 60 21 	sts	0x2160, r23	; 0x802160 <q3+0x1>
    198a:	80 93 61 21 	sts	0x2161, r24	; 0x802161 <q3+0x2>
    198e:	90 93 62 21 	sts	0x2162, r25	; 0x802162 <q3+0x3>
	
	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    1992:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
    1996:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
    199a:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
    199e:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
    19a2:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <q0>
    19a6:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <q0+0x1>
    19aa:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <q0+0x2>
    19ae:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <q0+0x3>
    19b2:	80 90 67 21 	lds	r8, 0x2167	; 0x802167 <q1>
    19b6:	90 90 68 21 	lds	r9, 0x2168	; 0x802168 <q1+0x1>
    19ba:	a0 90 69 21 	lds	r10, 0x2169	; 0x802169 <q1+0x2>
    19be:	b0 90 6a 21 	lds	r11, 0x216A	; 0x80216a <q1+0x3>
    19c2:	40 90 67 21 	lds	r4, 0x2167	; 0x802167 <q1>
    19c6:	50 90 68 21 	lds	r5, 0x2168	; 0x802168 <q1+0x1>
    19ca:	60 90 69 21 	lds	r6, 0x2169	; 0x802169 <q1+0x2>
    19ce:	70 90 6a 21 	lds	r7, 0x216A	; 0x80216a <q1+0x3>
    19d2:	e0 90 63 21 	lds	r14, 0x2163	; 0x802163 <q2>
    19d6:	f0 90 64 21 	lds	r15, 0x2164	; 0x802164 <q2+0x1>
    19da:	00 91 65 21 	lds	r16, 0x2165	; 0x802165 <q2+0x2>
    19de:	10 91 66 21 	lds	r17, 0x2166	; 0x802166 <q2+0x3>
    19e2:	e9 86       	std	Y+9, r14	; 0x09
    19e4:	fa 86       	std	Y+10, r15	; 0x0a
    19e6:	0b 87       	std	Y+11, r16	; 0x0b
    19e8:	1c 87       	std	Y+12, r17	; 0x0c
    19ea:	e0 90 63 21 	lds	r14, 0x2163	; 0x802163 <q2>
    19ee:	f0 90 64 21 	lds	r15, 0x2164	; 0x802164 <q2+0x1>
    19f2:	00 91 65 21 	lds	r16, 0x2165	; 0x802165 <q2+0x2>
    19f6:	10 91 66 21 	lds	r17, 0x2166	; 0x802166 <q2+0x3>
    19fa:	ed 86       	std	Y+13, r14	; 0x0d
    19fc:	fe 86       	std	Y+14, r15	; 0x0e
    19fe:	0f 87       	std	Y+15, r16	; 0x0f
    1a00:	18 8b       	std	Y+16, r17	; 0x10
    1a02:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q3>
    1a06:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q3+0x1>
    1a0a:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q3+0x2>
    1a0e:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q3+0x3>
    1a12:	e9 82       	std	Y+1, r14	; 0x01
    1a14:	fa 82       	std	Y+2, r15	; 0x02
    1a16:	0b 83       	std	Y+3, r16	; 0x03
    1a18:	1c 83       	std	Y+4, r17	; 0x04
    1a1a:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q3>
    1a1e:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q3+0x1>
    1a22:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q3+0x2>
    1a26:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q3+0x3>
    1a2a:	e9 8a       	std	Y+17, r14	; 0x11
    1a2c:	fa 8a       	std	Y+18, r15	; 0x12
    1a2e:	0b 8b       	std	Y+19, r16	; 0x13
    1a30:	1c 8b       	std	Y+20, r17	; 0x14
    1a32:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1a36:	6b 01       	movw	r12, r22
    1a38:	7c 01       	movw	r14, r24
    1a3a:	a3 01       	movw	r20, r6
    1a3c:	92 01       	movw	r18, r4
    1a3e:	c5 01       	movw	r24, r10
    1a40:	b4 01       	movw	r22, r8
    1a42:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1a46:	9b 01       	movw	r18, r22
    1a48:	ac 01       	movw	r20, r24
    1a4a:	c7 01       	movw	r24, r14
    1a4c:	b6 01       	movw	r22, r12
    1a4e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1a52:	4b 01       	movw	r8, r22
    1a54:	5c 01       	movw	r10, r24
    1a56:	2d 85       	ldd	r18, Y+13	; 0x0d
    1a58:	3e 85       	ldd	r19, Y+14	; 0x0e
    1a5a:	4f 85       	ldd	r20, Y+15	; 0x0f
    1a5c:	58 89       	ldd	r21, Y+16	; 0x10
    1a5e:	69 85       	ldd	r22, Y+9	; 0x09
    1a60:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a62:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a64:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a66:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1a6a:	9b 01       	movw	r18, r22
    1a6c:	ac 01       	movw	r20, r24
    1a6e:	c5 01       	movw	r24, r10
    1a70:	b4 01       	movw	r22, r8
    1a72:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1a76:	4b 01       	movw	r8, r22
    1a78:	5c 01       	movw	r10, r24
    1a7a:	29 89       	ldd	r18, Y+17	; 0x11
    1a7c:	3a 89       	ldd	r19, Y+18	; 0x12
    1a7e:	4b 89       	ldd	r20, Y+19	; 0x13
    1a80:	5c 89       	ldd	r21, Y+20	; 0x14
    1a82:	69 81       	ldd	r22, Y+1	; 0x01
    1a84:	7a 81       	ldd	r23, Y+2	; 0x02
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1a8e:	9b 01       	movw	r18, r22
    1a90:	ac 01       	movw	r20, r24
    1a92:	c5 01       	movw	r24, r10
    1a94:	b4 01       	movw	r22, r8
    1a96:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1a9a:	28 db       	rcall	.-2480   	; 0x10ec <invSqrt>
    1a9c:	6b 01       	movw	r12, r22
    1a9e:	7c 01       	movw	r14, r24
	q0 *= recipNorm;
    1aa0:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <q0>
    1aa4:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <q0+0x1>
    1aa8:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <q0+0x2>
    1aac:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <q0+0x3>
    1ab0:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1ab4:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <q0>
    1ab8:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <q0+0x1>
    1abc:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <q0+0x2>
    1ac0:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <q0+0x3>
	q1 *= recipNorm;
    1ac4:	20 91 67 21 	lds	r18, 0x2167	; 0x802167 <q1>
    1ac8:	30 91 68 21 	lds	r19, 0x2168	; 0x802168 <q1+0x1>
    1acc:	40 91 69 21 	lds	r20, 0x2169	; 0x802169 <q1+0x2>
    1ad0:	50 91 6a 21 	lds	r21, 0x216A	; 0x80216a <q1+0x3>
    1ad4:	c7 01       	movw	r24, r14
    1ad6:	b6 01       	movw	r22, r12
    1ad8:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1adc:	60 93 67 21 	sts	0x2167, r22	; 0x802167 <q1>
    1ae0:	70 93 68 21 	sts	0x2168, r23	; 0x802168 <q1+0x1>
    1ae4:	80 93 69 21 	sts	0x2169, r24	; 0x802169 <q1+0x2>
    1ae8:	90 93 6a 21 	sts	0x216A, r25	; 0x80216a <q1+0x3>
	q2 *= recipNorm;
    1aec:	20 91 63 21 	lds	r18, 0x2163	; 0x802163 <q2>
    1af0:	30 91 64 21 	lds	r19, 0x2164	; 0x802164 <q2+0x1>
    1af4:	40 91 65 21 	lds	r20, 0x2165	; 0x802165 <q2+0x2>
    1af8:	50 91 66 21 	lds	r21, 0x2166	; 0x802166 <q2+0x3>
    1afc:	c7 01       	movw	r24, r14
    1afe:	b6 01       	movw	r22, r12
    1b00:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1b04:	60 93 63 21 	sts	0x2163, r22	; 0x802163 <q2>
    1b08:	70 93 64 21 	sts	0x2164, r23	; 0x802164 <q2+0x1>
    1b0c:	80 93 65 21 	sts	0x2165, r24	; 0x802165 <q2+0x2>
    1b10:	90 93 66 21 	sts	0x2166, r25	; 0x802166 <q2+0x3>
	q3 *= recipNorm;
    1b14:	20 91 5f 21 	lds	r18, 0x215F	; 0x80215f <q3>
    1b18:	30 91 60 21 	lds	r19, 0x2160	; 0x802160 <q3+0x1>
    1b1c:	40 91 61 21 	lds	r20, 0x2161	; 0x802161 <q3+0x2>
    1b20:	50 91 62 21 	lds	r21, 0x2162	; 0x802162 <q3+0x3>
    1b24:	c7 01       	movw	r24, r14
    1b26:	b6 01       	movw	r22, r12
    1b28:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1b2c:	60 93 5f 21 	sts	0x215F, r22	; 0x80215f <q3>
    1b30:	70 93 60 21 	sts	0x2160, r23	; 0x802160 <q3+0x1>
    1b34:	80 93 61 21 	sts	0x2161, r24	; 0x802161 <q3+0x2>
    1b38:	90 93 62 21 	sts	0x2162, r25	; 0x802162 <q3+0x3>
}
    1b3c:	a4 96       	adiw	r28, 0x24	; 36
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	0f 91       	pop	r16
    1b4a:	ff 90       	pop	r15
    1b4c:	ef 90       	pop	r14
    1b4e:	df 90       	pop	r13
    1b50:	cf 90       	pop	r12
    1b52:	bf 90       	pop	r11
    1b54:	af 90       	pop	r10
    1b56:	9f 90       	pop	r9
    1b58:	8f 90       	pop	r8
    1b5a:	7f 90       	pop	r7
    1b5c:	6f 90       	pop	r6
    1b5e:	5f 90       	pop	r5
    1b60:	4f 90       	pop	r4
    1b62:	08 95       	ret

00001b64 <MahonyAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MahonyAHRSupdate(double gx, double gy, double gz, double ax, double ay, double az, double mx, double my, double mz) {
    1b64:	2f 92       	push	r2
    1b66:	3f 92       	push	r3
    1b68:	4f 92       	push	r4
    1b6a:	5f 92       	push	r5
    1b6c:	6f 92       	push	r6
    1b6e:	7f 92       	push	r7
    1b70:	8f 92       	push	r8
    1b72:	9f 92       	push	r9
    1b74:	af 92       	push	r10
    1b76:	bf 92       	push	r11
    1b78:	cf 92       	push	r12
    1b7a:	df 92       	push	r13
    1b7c:	ef 92       	push	r14
    1b7e:	ff 92       	push	r15
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	c8 55       	subi	r28, 0x58	; 88
    1b8e:	d1 09       	sbc	r29, r1
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	69 8b       	std	Y+17, r22	; 0x11
    1b96:	7a 8b       	std	Y+18, r23	; 0x12
    1b98:	8b 8b       	std	Y+19, r24	; 0x13
    1b9a:	9c 8b       	std	Y+20, r25	; 0x14
    1b9c:	29 8f       	std	Y+25, r18	; 0x19
    1b9e:	3a 8f       	std	Y+26, r19	; 0x1a
    1ba0:	4b 8f       	std	Y+27, r20	; 0x1b
    1ba2:	5c 8f       	std	Y+28, r21	; 0x1c
    1ba4:	e9 82       	std	Y+1, r14	; 0x01
    1ba6:	fa 82       	std	Y+2, r15	; 0x02
    1ba8:	0b 83       	std	Y+3, r16	; 0x03
    1baa:	1c 83       	std	Y+4, r17	; 0x04
    1bac:	af 96       	adiw	r28, 0x2f	; 47
    1bae:	ff ac       	ldd	r15, Y+63	; 0x3f
    1bb0:	af 97       	sbiw	r28, 0x2f	; 47
    1bb2:	e0 96       	adiw	r28, 0x30	; 48
    1bb4:	ef ac       	ldd	r14, Y+63	; 0x3f
    1bb6:	e0 97       	sbiw	r28, 0x30	; 48
    1bb8:	e1 96       	adiw	r28, 0x31	; 49
    1bba:	9f ac       	ldd	r9, Y+63	; 0x3f
    1bbc:	e1 97       	sbiw	r28, 0x31	; 49
    1bbe:	e2 96       	adiw	r28, 0x32	; 50
    1bc0:	8f ac       	ldd	r8, Y+63	; 0x3f
    1bc2:	e2 97       	sbiw	r28, 0x32	; 50
    1bc4:	e3 96       	adiw	r28, 0x33	; 51
    1bc6:	1f ad       	ldd	r17, Y+63	; 0x3f
    1bc8:	e3 97       	sbiw	r28, 0x33	; 51
    1bca:	e4 96       	adiw	r28, 0x34	; 52
    1bcc:	0f ad       	ldd	r16, Y+63	; 0x3f
    1bce:	e4 97       	sbiw	r28, 0x34	; 52
    1bd0:	e5 96       	adiw	r28, 0x35	; 53
    1bd2:	3f ac       	ldd	r3, Y+63	; 0x3f
    1bd4:	e5 97       	sbiw	r28, 0x35	; 53
    1bd6:	e6 96       	adiw	r28, 0x36	; 54
    1bd8:	2f ac       	ldd	r2, Y+63	; 0x3f
    1bda:	e6 97       	sbiw	r28, 0x36	; 54
	double halfvx, halfvy, halfvz, halfwx, halfwy, halfwz;
	double halfex, halfey, halfez;
	double qa, qb, qc;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0) && (my == 0.0) && (mz == 0.0)) {
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	a9 01       	movw	r20, r18
    1be2:	ea 96       	adiw	r28, 0x3a	; 58
    1be4:	6c ad       	ldd	r22, Y+60	; 0x3c
    1be6:	7d ad       	ldd	r23, Y+61	; 0x3d
    1be8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1bea:	9f ad       	ldd	r25, Y+63	; 0x3f
    1bec:	ea 97       	sbiw	r28, 0x3a	; 58
    1bee:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <__cmpsf2>
    1bf2:	81 11       	cpse	r24, r1
    1bf4:	34 c0       	rjmp	.+104    	; 0x1c5e <MahonyAHRSupdate+0xfa>
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	a9 01       	movw	r20, r18
    1bfc:	ee 96       	adiw	r28, 0x3e	; 62
    1bfe:	6c ad       	ldd	r22, Y+60	; 0x3c
    1c00:	7d ad       	ldd	r23, Y+61	; 0x3d
    1c02:	8e ad       	ldd	r24, Y+62	; 0x3e
    1c04:	9f ad       	ldd	r25, Y+63	; 0x3f
    1c06:	ee 97       	sbiw	r28, 0x3e	; 62
    1c08:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <__cmpsf2>
    1c0c:	81 11       	cpse	r24, r1
    1c0e:	27 c0       	rjmp	.+78     	; 0x1c5e <MahonyAHRSupdate+0xfa>
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	a9 01       	movw	r20, r18
    1c16:	c2 58       	subi	r28, 0x82	; 130
    1c18:	df 4f       	sbci	r29, 0xFF	; 255
    1c1a:	68 81       	ld	r22, Y
    1c1c:	79 81       	ldd	r23, Y+1	; 0x01
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	9b 81       	ldd	r25, Y+3	; 0x03
    1c22:	ce 57       	subi	r28, 0x7E	; 126
    1c24:	d0 40       	sbci	r29, 0x00	; 0
    1c26:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <__cmpsf2>
    1c2a:	81 11       	cpse	r24, r1
    1c2c:	18 c0       	rjmp	.+48     	; 0x1c5e <MahonyAHRSupdate+0xfa>
		MahonyAHRSupdateIMU(gx, gy, gz, ax, ay, az);
    1c2e:	2f 92       	push	r2
    1c30:	3f 92       	push	r3
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	8f 92       	push	r8
    1c38:	9f 92       	push	r9
    1c3a:	ef 92       	push	r14
    1c3c:	ff 92       	push	r15
    1c3e:	e9 80       	ldd	r14, Y+1	; 0x01
    1c40:	fa 80       	ldd	r15, Y+2	; 0x02
    1c42:	0b 81       	ldd	r16, Y+3	; 0x03
    1c44:	1c 81       	ldd	r17, Y+4	; 0x04
    1c46:	29 8d       	ldd	r18, Y+25	; 0x19
    1c48:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1c4a:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1c4c:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1c4e:	69 89       	ldd	r22, Y+17	; 0x11
    1c50:	7a 89       	ldd	r23, Y+18	; 0x12
    1c52:	8b 89       	ldd	r24, Y+19	; 0x13
    1c54:	9c 89       	ldd	r25, Y+20	; 0x14
    1c56:	85 da       	rcall	.-2806   	; 0x1162 <MahonyAHRSupdateIMU>
		return;
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	a4 c7       	rjmp	.+3912   	; 0x2ba6 <MahonyAHRSupdate+0x1042>
	}

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0) && (ay == 0.0) && (az == 0.0))) {
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	a9 01       	movw	r20, r18
    1c64:	c6 01       	movw	r24, r12
    1c66:	b5 01       	movw	r22, r10
    1c68:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <__cmpsf2>
    1c6c:	81 11       	cpse	r24, r1
    1c6e:	17 c0       	rjmp	.+46     	; 0x1c9e <MahonyAHRSupdate+0x13a>
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	a9 01       	movw	r20, r18
    1c76:	6f 2d       	mov	r22, r15
    1c78:	7e 2d       	mov	r23, r14
    1c7a:	89 2d       	mov	r24, r9
    1c7c:	98 2d       	mov	r25, r8
    1c7e:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <__cmpsf2>
    1c82:	81 11       	cpse	r24, r1
    1c84:	0c c0       	rjmp	.+24     	; 0x1c9e <MahonyAHRSupdate+0x13a>
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	a9 01       	movw	r20, r18
    1c8c:	61 2f       	mov	r22, r17
    1c8e:	70 2f       	mov	r23, r16
    1c90:	83 2d       	mov	r24, r3
    1c92:	92 2d       	mov	r25, r2
    1c94:	0e 94 8e 2d 	call	0x5b1c	; 0x5b1c <__cmpsf2>
    1c98:	88 23       	and	r24, r24
    1c9a:	09 f4       	brne	.+2      	; 0x1c9e <MahonyAHRSupdate+0x13a>
    1c9c:	37 c5       	rjmp	.+2670   	; 0x270c <MahonyAHRSupdate+0xba8>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
    1c9e:	a6 01       	movw	r20, r12
    1ca0:	95 01       	movw	r18, r10
    1ca2:	c6 01       	movw	r24, r12
    1ca4:	b5 01       	movw	r22, r10
    1ca6:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1caa:	2b 01       	movw	r4, r22
    1cac:	3c 01       	movw	r6, r24
    1cae:	2f 2d       	mov	r18, r15
    1cb0:	3e 2d       	mov	r19, r14
    1cb2:	49 2d       	mov	r20, r9
    1cb4:	58 2d       	mov	r21, r8
    1cb6:	6f 2d       	mov	r22, r15
    1cb8:	7e 2d       	mov	r23, r14
    1cba:	89 2d       	mov	r24, r9
    1cbc:	98 2d       	mov	r25, r8
    1cbe:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1cc2:	9b 01       	movw	r18, r22
    1cc4:	ac 01       	movw	r20, r24
    1cc6:	c3 01       	movw	r24, r6
    1cc8:	b2 01       	movw	r22, r4
    1cca:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1cce:	2b 01       	movw	r4, r22
    1cd0:	3c 01       	movw	r6, r24
    1cd2:	21 2f       	mov	r18, r17
    1cd4:	30 2f       	mov	r19, r16
    1cd6:	43 2d       	mov	r20, r3
    1cd8:	52 2d       	mov	r21, r2
    1cda:	61 2f       	mov	r22, r17
    1cdc:	70 2f       	mov	r23, r16
    1cde:	83 2d       	mov	r24, r3
    1ce0:	92 2d       	mov	r25, r2
    1ce2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1ce6:	9b 01       	movw	r18, r22
    1ce8:	ac 01       	movw	r20, r24
    1cea:	c3 01       	movw	r24, r6
    1cec:	b2 01       	movw	r22, r4
    1cee:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1cf2:	fc d9       	rcall	.-3080   	; 0x10ec <invSqrt>
    1cf4:	2b 01       	movw	r4, r22
    1cf6:	3c 01       	movw	r6, r24
		ax *= recipNorm;
    1cf8:	9b 01       	movw	r18, r22
    1cfa:	ac 01       	movw	r20, r24
    1cfc:	c6 01       	movw	r24, r12
    1cfe:	b5 01       	movw	r22, r10
    1d00:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1d04:	6d ab       	std	Y+53, r22	; 0x35
    1d06:	7e ab       	std	Y+54, r23	; 0x36
    1d08:	8f ab       	std	Y+55, r24	; 0x37
    1d0a:	98 af       	std	Y+56, r25	; 0x38
		ay *= recipNorm;
    1d0c:	a3 01       	movw	r20, r6
    1d0e:	92 01       	movw	r18, r4
    1d10:	6f 2d       	mov	r22, r15
    1d12:	7e 2d       	mov	r23, r14
    1d14:	89 2d       	mov	r24, r9
    1d16:	98 2d       	mov	r25, r8
    1d18:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1d1c:	69 af       	std	Y+57, r22	; 0x39
    1d1e:	7a af       	std	Y+58, r23	; 0x3a
    1d20:	8b af       	std	Y+59, r24	; 0x3b
    1d22:	9c af       	std	Y+60, r25	; 0x3c
		az *= recipNorm;     
    1d24:	a3 01       	movw	r20, r6
    1d26:	92 01       	movw	r18, r4
    1d28:	61 2f       	mov	r22, r17
    1d2a:	70 2f       	mov	r23, r16
    1d2c:	83 2d       	mov	r24, r3
    1d2e:	92 2d       	mov	r25, r2
    1d30:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1d34:	21 96       	adiw	r28, 0x01	; 1
    1d36:	6c af       	std	Y+60, r22	; 0x3c
    1d38:	7d af       	std	Y+61, r23	; 0x3d
    1d3a:	8e af       	std	Y+62, r24	; 0x3e
    1d3c:	9f af       	std	Y+63, r25	; 0x3f
    1d3e:	21 97       	sbiw	r28, 0x01	; 1

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
    1d40:	ea 96       	adiw	r28, 0x3a	; 58
    1d42:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d44:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d46:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d48:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d4a:	ea 97       	sbiw	r28, 0x3a	; 58
    1d4c:	ca 01       	movw	r24, r20
    1d4e:	b9 01       	movw	r22, r18
    1d50:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1d54:	6b 01       	movw	r12, r22
    1d56:	7c 01       	movw	r14, r24
    1d58:	ee 96       	adiw	r28, 0x3e	; 62
    1d5a:	2c ad       	ldd	r18, Y+60	; 0x3c
    1d5c:	3d ad       	ldd	r19, Y+61	; 0x3d
    1d5e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1d60:	5f ad       	ldd	r21, Y+63	; 0x3f
    1d62:	ee 97       	sbiw	r28, 0x3e	; 62
    1d64:	ca 01       	movw	r24, r20
    1d66:	b9 01       	movw	r22, r18
    1d68:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1d6c:	9b 01       	movw	r18, r22
    1d6e:	ac 01       	movw	r20, r24
    1d70:	c7 01       	movw	r24, r14
    1d72:	b6 01       	movw	r22, r12
    1d74:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1d78:	6b 01       	movw	r12, r22
    1d7a:	7c 01       	movw	r14, r24
    1d7c:	c2 58       	subi	r28, 0x82	; 130
    1d7e:	df 4f       	sbci	r29, 0xFF	; 255
    1d80:	28 81       	ld	r18, Y
    1d82:	39 81       	ldd	r19, Y+1	; 0x01
    1d84:	4a 81       	ldd	r20, Y+2	; 0x02
    1d86:	5b 81       	ldd	r21, Y+3	; 0x03
    1d88:	ce 57       	subi	r28, 0x7E	; 126
    1d8a:	d0 40       	sbci	r29, 0x00	; 0
    1d8c:	ca 01       	movw	r24, r20
    1d8e:	b9 01       	movw	r22, r18
    1d90:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1d94:	9b 01       	movw	r18, r22
    1d96:	ac 01       	movw	r20, r24
    1d98:	c7 01       	movw	r24, r14
    1d9a:	b6 01       	movw	r22, r12
    1d9c:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    1da0:	a5 d9       	rcall	.-3254   	; 0x10ec <invSqrt>
    1da2:	6b 01       	movw	r12, r22
    1da4:	7c 01       	movw	r14, r24
		mx *= recipNorm;
    1da6:	9b 01       	movw	r18, r22
    1da8:	ac 01       	movw	r20, r24
    1daa:	ea 96       	adiw	r28, 0x3a	; 58
    1dac:	6c ad       	ldd	r22, Y+60	; 0x3c
    1dae:	7d ad       	ldd	r23, Y+61	; 0x3d
    1db0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1db2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1db4:	ea 97       	sbiw	r28, 0x3a	; 58
    1db6:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1dba:	6d 83       	std	Y+5, r22	; 0x05
    1dbc:	7e 83       	std	Y+6, r23	; 0x06
    1dbe:	8f 83       	std	Y+7, r24	; 0x07
    1dc0:	98 87       	std	Y+8, r25	; 0x08
		my *= recipNorm;
    1dc2:	a7 01       	movw	r20, r14
    1dc4:	96 01       	movw	r18, r12
    1dc6:	ee 96       	adiw	r28, 0x3e	; 62
    1dc8:	6c ad       	ldd	r22, Y+60	; 0x3c
    1dca:	7d ad       	ldd	r23, Y+61	; 0x3d
    1dcc:	8e ad       	ldd	r24, Y+62	; 0x3e
    1dce:	9f ad       	ldd	r25, Y+63	; 0x3f
    1dd0:	ee 97       	sbiw	r28, 0x3e	; 62
    1dd2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1dd6:	69 87       	std	Y+9, r22	; 0x09
    1dd8:	7a 87       	std	Y+10, r23	; 0x0a
    1dda:	8b 87       	std	Y+11, r24	; 0x0b
    1ddc:	9c 87       	std	Y+12, r25	; 0x0c
		mz *= recipNorm;   
    1dde:	a7 01       	movw	r20, r14
    1de0:	96 01       	movw	r18, r12
    1de2:	c2 58       	subi	r28, 0x82	; 130
    1de4:	df 4f       	sbci	r29, 0xFF	; 255
    1de6:	68 81       	ld	r22, Y
    1de8:	79 81       	ldd	r23, Y+1	; 0x01
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	9b 81       	ldd	r25, Y+3	; 0x03
    1dee:	ce 57       	subi	r28, 0x7E	; 126
    1df0:	d0 40       	sbci	r29, 0x00	; 0
    1df2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1df6:	6d 87       	std	Y+13, r22	; 0x0d
    1df8:	7e 87       	std	Y+14, r23	; 0x0e
    1dfa:	8f 87       	std	Y+15, r24	; 0x0f
    1dfc:	98 8b       	std	Y+16, r25	; 0x10

        // Auxiliary variables to avoid repeated arithmetic
        q0q0 = q0 * q0;
    1dfe:	40 90 18 20 	lds	r4, 0x2018	; 0x802018 <q0>
    1e02:	50 90 19 20 	lds	r5, 0x2019	; 0x802019 <q0+0x1>
    1e06:	60 90 1a 20 	lds	r6, 0x201A	; 0x80201a <q0+0x2>
    1e0a:	70 90 1b 20 	lds	r7, 0x201B	; 0x80201b <q0+0x3>
    1e0e:	e0 90 18 20 	lds	r14, 0x2018	; 0x802018 <q0>
    1e12:	f0 90 19 20 	lds	r15, 0x2019	; 0x802019 <q0+0x1>
    1e16:	00 91 1a 20 	lds	r16, 0x201A	; 0x80201a <q0+0x2>
    1e1a:	10 91 1b 20 	lds	r17, 0x201B	; 0x80201b <q0+0x3>
    1e1e:	69 96       	adiw	r28, 0x19	; 25
    1e20:	ec ae       	std	Y+60, r14	; 0x3c
    1e22:	fd ae       	std	Y+61, r15	; 0x3d
    1e24:	0e af       	std	Y+62, r16	; 0x3e
    1e26:	1f af       	std	Y+63, r17	; 0x3f
    1e28:	69 97       	sbiw	r28, 0x19	; 25
        q0q1 = q0 * q1;
    1e2a:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
    1e2e:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
    1e32:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
    1e36:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
    1e3a:	20 91 67 21 	lds	r18, 0x2167	; 0x802167 <q1>
    1e3e:	30 91 68 21 	lds	r19, 0x2168	; 0x802168 <q1+0x1>
    1e42:	40 91 69 21 	lds	r20, 0x2169	; 0x802169 <q1+0x2>
    1e46:	50 91 6a 21 	lds	r21, 0x216A	; 0x80216a <q1+0x3>
    1e4a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1e4e:	69 a3       	std	Y+33, r22	; 0x21
    1e50:	7a a3       	std	Y+34, r23	; 0x22
    1e52:	8b a3       	std	Y+35, r24	; 0x23
    1e54:	9c a3       	std	Y+36, r25	; 0x24
        q0q2 = q0 * q2;
    1e56:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
    1e5a:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
    1e5e:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
    1e62:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
    1e66:	20 91 63 21 	lds	r18, 0x2163	; 0x802163 <q2>
    1e6a:	30 91 64 21 	lds	r19, 0x2164	; 0x802164 <q2+0x1>
    1e6e:	40 91 65 21 	lds	r20, 0x2165	; 0x802165 <q2+0x2>
    1e72:	50 91 66 21 	lds	r21, 0x2166	; 0x802166 <q2+0x3>
    1e76:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1e7a:	6d 8f       	std	Y+29, r22	; 0x1d
    1e7c:	7e 8f       	std	Y+30, r23	; 0x1e
    1e7e:	8f 8f       	std	Y+31, r24	; 0x1f
    1e80:	98 a3       	std	Y+32, r25	; 0x20
        q0q3 = q0 * q3;
    1e82:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
    1e86:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
    1e8a:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
    1e8e:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
    1e92:	20 91 5f 21 	lds	r18, 0x215F	; 0x80215f <q3>
    1e96:	30 91 60 21 	lds	r19, 0x2160	; 0x802160 <q3+0x1>
    1e9a:	40 91 61 21 	lds	r20, 0x2161	; 0x802161 <q3+0x2>
    1e9e:	50 91 62 21 	lds	r21, 0x2162	; 0x802162 <q3+0x3>
    1ea2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1ea6:	6d 8b       	std	Y+21, r22	; 0x15
    1ea8:	7e 8b       	std	Y+22, r23	; 0x16
    1eaa:	8f 8b       	std	Y+23, r24	; 0x17
    1eac:	98 8f       	std	Y+24, r25	; 0x18
        q1q1 = q1 * q1;
    1eae:	c0 90 67 21 	lds	r12, 0x2167	; 0x802167 <q1>
    1eb2:	d0 90 68 21 	lds	r13, 0x2168	; 0x802168 <q1+0x1>
    1eb6:	e0 90 69 21 	lds	r14, 0x2169	; 0x802169 <q1+0x2>
    1eba:	f0 90 6a 21 	lds	r15, 0x216A	; 0x80216a <q1+0x3>
    1ebe:	80 91 67 21 	lds	r24, 0x2167	; 0x802167 <q1>
    1ec2:	90 91 68 21 	lds	r25, 0x2168	; 0x802168 <q1+0x1>
    1ec6:	a0 91 69 21 	lds	r26, 0x2169	; 0x802169 <q1+0x2>
    1eca:	b0 91 6a 21 	lds	r27, 0x216A	; 0x80216a <q1+0x3>
    1ece:	89 ab       	std	Y+49, r24	; 0x31
    1ed0:	9a ab       	std	Y+50, r25	; 0x32
    1ed2:	ab ab       	std	Y+51, r26	; 0x33
    1ed4:	bc ab       	std	Y+52, r27	; 0x34
        q1q2 = q1 * q2;
    1ed6:	60 91 67 21 	lds	r22, 0x2167	; 0x802167 <q1>
    1eda:	70 91 68 21 	lds	r23, 0x2168	; 0x802168 <q1+0x1>
    1ede:	80 91 69 21 	lds	r24, 0x2169	; 0x802169 <q1+0x2>
    1ee2:	90 91 6a 21 	lds	r25, 0x216A	; 0x80216a <q1+0x3>
    1ee6:	20 91 63 21 	lds	r18, 0x2163	; 0x802163 <q2>
    1eea:	30 91 64 21 	lds	r19, 0x2164	; 0x802164 <q2+0x1>
    1eee:	40 91 65 21 	lds	r20, 0x2165	; 0x802165 <q2+0x2>
    1ef2:	50 91 66 21 	lds	r21, 0x2166	; 0x802166 <q2+0x3>
    1ef6:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1efa:	69 a7       	std	Y+41, r22	; 0x29
    1efc:	7a a7       	std	Y+42, r23	; 0x2a
    1efe:	8b a7       	std	Y+43, r24	; 0x2b
    1f00:	9c a7       	std	Y+44, r25	; 0x2c
        q1q3 = q1 * q3;
    1f02:	60 91 67 21 	lds	r22, 0x2167	; 0x802167 <q1>
    1f06:	70 91 68 21 	lds	r23, 0x2168	; 0x802168 <q1+0x1>
    1f0a:	80 91 69 21 	lds	r24, 0x2169	; 0x802169 <q1+0x2>
    1f0e:	90 91 6a 21 	lds	r25, 0x216A	; 0x80216a <q1+0x3>
    1f12:	20 91 5f 21 	lds	r18, 0x215F	; 0x80215f <q3>
    1f16:	30 91 60 21 	lds	r19, 0x2160	; 0x802160 <q3+0x1>
    1f1a:	40 91 61 21 	lds	r20, 0x2161	; 0x802161 <q3+0x2>
    1f1e:	50 91 62 21 	lds	r21, 0x2162	; 0x802162 <q3+0x3>
    1f22:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1f26:	6d a7       	std	Y+45, r22	; 0x2d
    1f28:	7e a7       	std	Y+46, r23	; 0x2e
    1f2a:	8f a7       	std	Y+47, r24	; 0x2f
    1f2c:	98 ab       	std	Y+48, r25	; 0x30
        q2q2 = q2 * q2;
    1f2e:	60 91 63 21 	lds	r22, 0x2163	; 0x802163 <q2>
    1f32:	70 91 64 21 	lds	r23, 0x2164	; 0x802164 <q2+0x1>
    1f36:	80 91 65 21 	lds	r24, 0x2165	; 0x802165 <q2+0x2>
    1f3a:	90 91 66 21 	lds	r25, 0x2166	; 0x802166 <q2+0x3>
    1f3e:	20 91 63 21 	lds	r18, 0x2163	; 0x802163 <q2>
    1f42:	30 91 64 21 	lds	r19, 0x2164	; 0x802164 <q2+0x1>
    1f46:	40 91 65 21 	lds	r20, 0x2165	; 0x802165 <q2+0x2>
    1f4a:	50 91 66 21 	lds	r21, 0x2166	; 0x802166 <q2+0x3>
    1f4e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1f52:	25 96       	adiw	r28, 0x05	; 5
    1f54:	6c af       	std	Y+60, r22	; 0x3c
    1f56:	7d af       	std	Y+61, r23	; 0x3d
    1f58:	8e af       	std	Y+62, r24	; 0x3e
    1f5a:	9f af       	std	Y+63, r25	; 0x3f
    1f5c:	25 97       	sbiw	r28, 0x05	; 5
        q2q3 = q2 * q3;
    1f5e:	60 91 63 21 	lds	r22, 0x2163	; 0x802163 <q2>
    1f62:	70 91 64 21 	lds	r23, 0x2164	; 0x802164 <q2+0x1>
    1f66:	80 91 65 21 	lds	r24, 0x2165	; 0x802165 <q2+0x2>
    1f6a:	90 91 66 21 	lds	r25, 0x2166	; 0x802166 <q2+0x3>
    1f6e:	20 91 5f 21 	lds	r18, 0x215F	; 0x80215f <q3>
    1f72:	30 91 60 21 	lds	r19, 0x2160	; 0x802160 <q3+0x1>
    1f76:	40 91 61 21 	lds	r20, 0x2161	; 0x802161 <q3+0x2>
    1f7a:	50 91 62 21 	lds	r21, 0x2162	; 0x802162 <q3+0x3>
    1f7e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1f82:	29 96       	adiw	r28, 0x09	; 9
    1f84:	6c af       	std	Y+60, r22	; 0x3c
    1f86:	7d af       	std	Y+61, r23	; 0x3d
    1f88:	8e af       	std	Y+62, r24	; 0x3e
    1f8a:	9f af       	std	Y+63, r25	; 0x3f
    1f8c:	29 97       	sbiw	r28, 0x09	; 9
        q3q3 = q3 * q3;   
    1f8e:	60 91 5f 21 	lds	r22, 0x215F	; 0x80215f <q3>
    1f92:	70 91 60 21 	lds	r23, 0x2160	; 0x802160 <q3+0x1>
    1f96:	80 91 61 21 	lds	r24, 0x2161	; 0x802161 <q3+0x2>
    1f9a:	90 91 62 21 	lds	r25, 0x2162	; 0x802162 <q3+0x3>
    1f9e:	20 91 5f 21 	lds	r18, 0x215F	; 0x80215f <q3>
    1fa2:	30 91 60 21 	lds	r19, 0x2160	; 0x802160 <q3+0x1>
    1fa6:	40 91 61 21 	lds	r20, 0x2161	; 0x802161 <q3+0x2>
    1faa:	50 91 62 21 	lds	r21, 0x2162	; 0x802162 <q3+0x3>
    1fae:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    1fb2:	6d a3       	std	Y+37, r22	; 0x25
    1fb4:	7e a3       	std	Y+38, r23	; 0x26
    1fb6:	8f a3       	std	Y+39, r24	; 0x27
    1fb8:	98 a7       	std	Y+40, r25	; 0x28

        // Reference direction of Earth's magnetic field
        hx = 2.0 * (mx * (0.5 - q2q2 - q3q3) + my * (q1q2 - q0q3) + mz * (q1q3 + q0q2));
    1fba:	25 96       	adiw	r28, 0x05	; 5
    1fbc:	2c ad       	ldd	r18, Y+60	; 0x3c
    1fbe:	3d ad       	ldd	r19, Y+61	; 0x3d
    1fc0:	4e ad       	ldd	r20, Y+62	; 0x3e
    1fc2:	5f ad       	ldd	r21, Y+63	; 0x3f
    1fc4:	25 97       	sbiw	r28, 0x05	; 5
    1fc6:	60 e0       	ldi	r22, 0x00	; 0
    1fc8:	70 e0       	ldi	r23, 0x00	; 0
    1fca:	80 e0       	ldi	r24, 0x00	; 0
    1fcc:	9f e3       	ldi	r25, 0x3F	; 63
    1fce:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    1fd2:	2d a1       	ldd	r18, Y+37	; 0x25
    1fd4:	3e a1       	ldd	r19, Y+38	; 0x26
    1fd6:	4f a1       	ldd	r20, Y+39	; 0x27
    1fd8:	58 a5       	ldd	r21, Y+40	; 0x28
    1fda:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    1fde:	2d 96       	adiw	r28, 0x0d	; 13
    1fe0:	6c af       	std	Y+60, r22	; 0x3c
    1fe2:	7d af       	std	Y+61, r23	; 0x3d
    1fe4:	8e af       	std	Y+62, r24	; 0x3e
    1fe6:	9f af       	std	Y+63, r25	; 0x3f
    1fe8:	2d 97       	sbiw	r28, 0x0d	; 13
    1fea:	2d 89       	ldd	r18, Y+21	; 0x15
    1fec:	3e 89       	ldd	r19, Y+22	; 0x16
    1fee:	4f 89       	ldd	r20, Y+23	; 0x17
    1ff0:	58 8d       	ldd	r21, Y+24	; 0x18
    1ff2:	69 a5       	ldd	r22, Y+41	; 0x29
    1ff4:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ff6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ff8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ffa:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    1ffe:	61 96       	adiw	r28, 0x11	; 17
    2000:	6c af       	std	Y+60, r22	; 0x3c
    2002:	7d af       	std	Y+61, r23	; 0x3d
    2004:	8e af       	std	Y+62, r24	; 0x3e
    2006:	9f af       	std	Y+63, r25	; 0x3f
    2008:	61 97       	sbiw	r28, 0x11	; 17
    200a:	2d a5       	ldd	r18, Y+45	; 0x2d
    200c:	3e a5       	ldd	r19, Y+46	; 0x2e
    200e:	4f a5       	ldd	r20, Y+47	; 0x2f
    2010:	58 a9       	ldd	r21, Y+48	; 0x30
    2012:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2014:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2016:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2018:	98 a1       	ldd	r25, Y+32	; 0x20
    201a:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    201e:	65 96       	adiw	r28, 0x15	; 21
    2020:	6c af       	std	Y+60, r22	; 0x3c
    2022:	7d af       	std	Y+61, r23	; 0x3d
    2024:	8e af       	std	Y+62, r24	; 0x3e
    2026:	9f af       	std	Y+63, r25	; 0x3f
    2028:	65 97       	sbiw	r28, 0x15	; 21
    202a:	2d 96       	adiw	r28, 0x0d	; 13
    202c:	2c ad       	ldd	r18, Y+60	; 0x3c
    202e:	3d ad       	ldd	r19, Y+61	; 0x3d
    2030:	4e ad       	ldd	r20, Y+62	; 0x3e
    2032:	5f ad       	ldd	r21, Y+63	; 0x3f
    2034:	2d 97       	sbiw	r28, 0x0d	; 13
    2036:	6d 81       	ldd	r22, Y+5	; 0x05
    2038:	7e 81       	ldd	r23, Y+6	; 0x06
    203a:	8f 81       	ldd	r24, Y+7	; 0x07
    203c:	98 85       	ldd	r25, Y+8	; 0x08
    203e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2042:	4b 01       	movw	r8, r22
    2044:	5c 01       	movw	r10, r24
    2046:	61 96       	adiw	r28, 0x11	; 17
    2048:	2c ad       	ldd	r18, Y+60	; 0x3c
    204a:	3d ad       	ldd	r19, Y+61	; 0x3d
    204c:	4e ad       	ldd	r20, Y+62	; 0x3e
    204e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2050:	61 97       	sbiw	r28, 0x11	; 17
    2052:	69 85       	ldd	r22, Y+9	; 0x09
    2054:	7a 85       	ldd	r23, Y+10	; 0x0a
    2056:	8b 85       	ldd	r24, Y+11	; 0x0b
    2058:	9c 85       	ldd	r25, Y+12	; 0x0c
    205a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    205e:	9b 01       	movw	r18, r22
    2060:	ac 01       	movw	r20, r24
    2062:	c5 01       	movw	r24, r10
    2064:	b4 01       	movw	r22, r8
    2066:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    206a:	4b 01       	movw	r8, r22
    206c:	5c 01       	movw	r10, r24
    206e:	65 96       	adiw	r28, 0x15	; 21
    2070:	2c ad       	ldd	r18, Y+60	; 0x3c
    2072:	3d ad       	ldd	r19, Y+61	; 0x3d
    2074:	4e ad       	ldd	r20, Y+62	; 0x3e
    2076:	5f ad       	ldd	r21, Y+63	; 0x3f
    2078:	65 97       	sbiw	r28, 0x15	; 21
    207a:	6d 85       	ldd	r22, Y+13	; 0x0d
    207c:	7e 85       	ldd	r23, Y+14	; 0x0e
    207e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2080:	98 89       	ldd	r25, Y+16	; 0x10
    2082:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2086:	9b 01       	movw	r18, r22
    2088:	ac 01       	movw	r20, r24
    208a:	c5 01       	movw	r24, r10
    208c:	b4 01       	movw	r22, r8
    208e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    2092:	9b 01       	movw	r18, r22
    2094:	ac 01       	movw	r20, r24
    2096:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    209a:	4b 01       	movw	r8, r22
    209c:	5c 01       	movw	r10, r24
        hy = 2.0 * (mx * (q1q2 + q0q3) + my * (0.5 - q1q1 - q3q3) + mz * (q2q3 - q0q1));
    209e:	29 a9       	ldd	r18, Y+49	; 0x31
    20a0:	3a a9       	ldd	r19, Y+50	; 0x32
    20a2:	4b a9       	ldd	r20, Y+51	; 0x33
    20a4:	5c a9       	ldd	r21, Y+52	; 0x34
    20a6:	c7 01       	movw	r24, r14
    20a8:	b6 01       	movw	r22, r12
    20aa:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    20ae:	9b 01       	movw	r18, r22
    20b0:	ac 01       	movw	r20, r24
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	70 e0       	ldi	r23, 0x00	; 0
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	9f e3       	ldi	r25, 0x3F	; 63
    20ba:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    20be:	69 ab       	std	Y+49, r22	; 0x31
    20c0:	7a ab       	std	Y+50, r23	; 0x32
    20c2:	8b ab       	std	Y+51, r24	; 0x33
    20c4:	9c ab       	std	Y+52, r25	; 0x34
    20c6:	29 a5       	ldd	r18, Y+41	; 0x29
    20c8:	3a a5       	ldd	r19, Y+42	; 0x2a
    20ca:	4b a5       	ldd	r20, Y+43	; 0x2b
    20cc:	5c a5       	ldd	r21, Y+44	; 0x2c
    20ce:	6d 89       	ldd	r22, Y+21	; 0x15
    20d0:	7e 89       	ldd	r23, Y+22	; 0x16
    20d2:	8f 89       	ldd	r24, Y+23	; 0x17
    20d4:	98 8d       	ldd	r25, Y+24	; 0x18
    20d6:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    20da:	2d 81       	ldd	r18, Y+5	; 0x05
    20dc:	3e 81       	ldd	r19, Y+6	; 0x06
    20de:	4f 81       	ldd	r20, Y+7	; 0x07
    20e0:	58 85       	ldd	r21, Y+8	; 0x08
    20e2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    20e6:	6b 01       	movw	r12, r22
    20e8:	7c 01       	movw	r14, r24
    20ea:	2d a1       	ldd	r18, Y+37	; 0x25
    20ec:	3e a1       	ldd	r19, Y+38	; 0x26
    20ee:	4f a1       	ldd	r20, Y+39	; 0x27
    20f0:	58 a5       	ldd	r21, Y+40	; 0x28
    20f2:	69 a9       	ldd	r22, Y+49	; 0x31
    20f4:	7a a9       	ldd	r23, Y+50	; 0x32
    20f6:	8b a9       	ldd	r24, Y+51	; 0x33
    20f8:	9c a9       	ldd	r25, Y+52	; 0x34
    20fa:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    20fe:	29 85       	ldd	r18, Y+9	; 0x09
    2100:	3a 85       	ldd	r19, Y+10	; 0x0a
    2102:	4b 85       	ldd	r20, Y+11	; 0x0b
    2104:	5c 85       	ldd	r21, Y+12	; 0x0c
    2106:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    210a:	9b 01       	movw	r18, r22
    210c:	ac 01       	movw	r20, r24
    210e:	c7 01       	movw	r24, r14
    2110:	b6 01       	movw	r22, r12
    2112:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    2116:	6b 01       	movw	r12, r22
    2118:	7c 01       	movw	r14, r24
    211a:	29 a1       	ldd	r18, Y+33	; 0x21
    211c:	3a a1       	ldd	r19, Y+34	; 0x22
    211e:	4b a1       	ldd	r20, Y+35	; 0x23
    2120:	5c a1       	ldd	r21, Y+36	; 0x24
    2122:	29 96       	adiw	r28, 0x09	; 9
    2124:	6c ad       	ldd	r22, Y+60	; 0x3c
    2126:	7d ad       	ldd	r23, Y+61	; 0x3d
    2128:	8e ad       	ldd	r24, Y+62	; 0x3e
    212a:	9f ad       	ldd	r25, Y+63	; 0x3f
    212c:	29 97       	sbiw	r28, 0x09	; 9
    212e:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    2132:	2d 85       	ldd	r18, Y+13	; 0x0d
    2134:	3e 85       	ldd	r19, Y+14	; 0x0e
    2136:	4f 85       	ldd	r20, Y+15	; 0x0f
    2138:	58 89       	ldd	r21, Y+16	; 0x10
    213a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    213e:	9b 01       	movw	r18, r22
    2140:	ac 01       	movw	r20, r24
    2142:	c7 01       	movw	r24, r14
    2144:	b6 01       	movw	r22, r12
    2146:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    214a:	9b 01       	movw	r18, r22
    214c:	ac 01       	movw	r20, r24
    214e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    2152:	6b 01       	movw	r12, r22
    2154:	7c 01       	movw	r14, r24
        bx = sqrt(hx * hx + hy * hy);
    2156:	a5 01       	movw	r20, r10
    2158:	94 01       	movw	r18, r8
    215a:	c5 01       	movw	r24, r10
    215c:	b4 01       	movw	r22, r8
    215e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2162:	6d 8b       	std	Y+21, r22	; 0x15
    2164:	7e 8b       	std	Y+22, r23	; 0x16
    2166:	8f 8b       	std	Y+23, r24	; 0x17
    2168:	98 8f       	std	Y+24, r25	; 0x18
    216a:	a5 01       	movw	r20, r10
    216c:	94 01       	movw	r18, r8
    216e:	c5 01       	movw	r24, r10
    2170:	b4 01       	movw	r22, r8
    2172:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2176:	4b 01       	movw	r8, r22
    2178:	5c 01       	movw	r10, r24
    217a:	a7 01       	movw	r20, r14
    217c:	96 01       	movw	r18, r12
    217e:	c7 01       	movw	r24, r14
    2180:	b6 01       	movw	r22, r12
    2182:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2186:	9b 01       	movw	r18, r22
    2188:	ac 01       	movw	r20, r24
    218a:	c5 01       	movw	r24, r10
    218c:	b4 01       	movw	r22, r8
    218e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    2192:	0e 94 74 2f 	call	0x5ee8	; 0x5ee8 <sqrt>
    2196:	4b 01       	movw	r8, r22
    2198:	5c 01       	movw	r10, r24
        bz = 2.0 * (mx * (q1q3 - q0q2) + my * (q2q3 + q0q1) + mz * (0.5 - q1q1 - q2q2));
    219a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    219c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    219e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    21a0:	58 a1       	ldd	r21, Y+32	; 0x20
    21a2:	6d a5       	ldd	r22, Y+45	; 0x2d
    21a4:	7e a5       	ldd	r23, Y+46	; 0x2e
    21a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21a8:	98 a9       	ldd	r25, Y+48	; 0x30
    21aa:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    21ae:	6d 8f       	std	Y+29, r22	; 0x1d
    21b0:	7e 8f       	std	Y+30, r23	; 0x1e
    21b2:	8f 8f       	std	Y+31, r24	; 0x1f
    21b4:	98 a3       	std	Y+32, r25	; 0x20
    21b6:	29 96       	adiw	r28, 0x09	; 9
    21b8:	2c ad       	ldd	r18, Y+60	; 0x3c
    21ba:	3d ad       	ldd	r19, Y+61	; 0x3d
    21bc:	4e ad       	ldd	r20, Y+62	; 0x3e
    21be:	5f ad       	ldd	r21, Y+63	; 0x3f
    21c0:	29 97       	sbiw	r28, 0x09	; 9
    21c2:	69 a1       	ldd	r22, Y+33	; 0x21
    21c4:	7a a1       	ldd	r23, Y+34	; 0x22
    21c6:	8b a1       	ldd	r24, Y+35	; 0x23
    21c8:	9c a1       	ldd	r25, Y+36	; 0x24
    21ca:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    21ce:	69 a3       	std	Y+33, r22	; 0x21
    21d0:	7a a3       	std	Y+34, r23	; 0x22
    21d2:	8b a3       	std	Y+35, r24	; 0x23
    21d4:	9c a3       	std	Y+36, r25	; 0x24
    21d6:	25 96       	adiw	r28, 0x05	; 5
    21d8:	2c ad       	ldd	r18, Y+60	; 0x3c
    21da:	3d ad       	ldd	r19, Y+61	; 0x3d
    21dc:	4e ad       	ldd	r20, Y+62	; 0x3e
    21de:	5f ad       	ldd	r21, Y+63	; 0x3f
    21e0:	25 97       	sbiw	r28, 0x05	; 5
    21e2:	69 a9       	ldd	r22, Y+49	; 0x31
    21e4:	7a a9       	ldd	r23, Y+50	; 0x32
    21e6:	8b a9       	ldd	r24, Y+51	; 0x33
    21e8:	9c a9       	ldd	r25, Y+52	; 0x34
    21ea:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    21ee:	6d 8b       	std	Y+21, r22	; 0x15
    21f0:	7e 8b       	std	Y+22, r23	; 0x16
    21f2:	8f 8b       	std	Y+23, r24	; 0x17
    21f4:	98 8f       	std	Y+24, r25	; 0x18
    21f6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    21f8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    21fa:	4f 8d       	ldd	r20, Y+31	; 0x1f
    21fc:	58 a1       	ldd	r21, Y+32	; 0x20
    21fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2200:	7e 81       	ldd	r23, Y+6	; 0x06
    2202:	8f 81       	ldd	r24, Y+7	; 0x07
    2204:	98 85       	ldd	r25, Y+8	; 0x08
    2206:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    220a:	6b 01       	movw	r12, r22
    220c:	7c 01       	movw	r14, r24
    220e:	29 a1       	ldd	r18, Y+33	; 0x21
    2210:	3a a1       	ldd	r19, Y+34	; 0x22
    2212:	4b a1       	ldd	r20, Y+35	; 0x23
    2214:	5c a1       	ldd	r21, Y+36	; 0x24
    2216:	69 85       	ldd	r22, Y+9	; 0x09
    2218:	7a 85       	ldd	r23, Y+10	; 0x0a
    221a:	8b 85       	ldd	r24, Y+11	; 0x0b
    221c:	9c 85       	ldd	r25, Y+12	; 0x0c
    221e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2222:	9b 01       	movw	r18, r22
    2224:	ac 01       	movw	r20, r24
    2226:	c7 01       	movw	r24, r14
    2228:	b6 01       	movw	r22, r12
    222a:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    222e:	6b 01       	movw	r12, r22
    2230:	7c 01       	movw	r14, r24
    2232:	2d 89       	ldd	r18, Y+21	; 0x15
    2234:	3e 89       	ldd	r19, Y+22	; 0x16
    2236:	4f 89       	ldd	r20, Y+23	; 0x17
    2238:	58 8d       	ldd	r21, Y+24	; 0x18
    223a:	6d 85       	ldd	r22, Y+13	; 0x0d
    223c:	7e 85       	ldd	r23, Y+14	; 0x0e
    223e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2240:	98 89       	ldd	r25, Y+16	; 0x10
    2242:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2246:	9b 01       	movw	r18, r22
    2248:	ac 01       	movw	r20, r24
    224a:	c7 01       	movw	r24, r14
    224c:	b6 01       	movw	r22, r12
    224e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    2252:	9b 01       	movw	r18, r22
    2254:	ac 01       	movw	r20, r24
    2256:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    225a:	6b 01       	movw	r12, r22
    225c:	7c 01       	movw	r14, r24

		// Estimated direction of gravity and magnetic field
		halfvx = q1q3 - q0q2;
		halfvy = q0q1 + q2q3;
		halfvz = q0q0 - 0.5 + q3q3;
    225e:	69 96       	adiw	r28, 0x19	; 25
    2260:	2c ad       	ldd	r18, Y+60	; 0x3c
    2262:	3d ad       	ldd	r19, Y+61	; 0x3d
    2264:	4e ad       	ldd	r20, Y+62	; 0x3e
    2266:	5f ad       	ldd	r21, Y+63	; 0x3f
    2268:	69 97       	sbiw	r28, 0x19	; 25
    226a:	c3 01       	movw	r24, r6
    226c:	b2 01       	movw	r22, r4
    226e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	5f e3       	ldi	r21, 0x3F	; 63
    227a:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    227e:	2d a1       	ldd	r18, Y+37	; 0x25
    2280:	3e a1       	ldd	r19, Y+38	; 0x26
    2282:	4f a1       	ldd	r20, Y+39	; 0x27
    2284:	58 a5       	ldd	r21, Y+40	; 0x28
    2286:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    228a:	6d a3       	std	Y+37, r22	; 0x25
    228c:	7e a3       	std	Y+38, r23	; 0x26
    228e:	8f a3       	std	Y+39, r24	; 0x27
    2290:	98 a7       	std	Y+40, r25	; 0x28
        halfwx = bx * (0.5 - q2q2 - q3q3) + bz * (q1q3 - q0q2);
    2292:	a5 01       	movw	r20, r10
    2294:	94 01       	movw	r18, r8
    2296:	2d 96       	adiw	r28, 0x0d	; 13
    2298:	6c ad       	ldd	r22, Y+60	; 0x3c
    229a:	7d ad       	ldd	r23, Y+61	; 0x3d
    229c:	8e ad       	ldd	r24, Y+62	; 0x3e
    229e:	9f ad       	ldd	r25, Y+63	; 0x3f
    22a0:	2d 97       	sbiw	r28, 0x0d	; 13
    22a2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    22a6:	2b 01       	movw	r4, r22
    22a8:	3c 01       	movw	r6, r24
    22aa:	a7 01       	movw	r20, r14
    22ac:	96 01       	movw	r18, r12
    22ae:	6d 8d       	ldd	r22, Y+29	; 0x1d
    22b0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    22b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22b4:	98 a1       	ldd	r25, Y+32	; 0x20
    22b6:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    22ba:	9b 01       	movw	r18, r22
    22bc:	ac 01       	movw	r20, r24
    22be:	c3 01       	movw	r24, r6
    22c0:	b2 01       	movw	r22, r4
    22c2:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    22c6:	69 a7       	std	Y+41, r22	; 0x29
    22c8:	7a a7       	std	Y+42, r23	; 0x2a
    22ca:	8b a7       	std	Y+43, r24	; 0x2b
    22cc:	9c a7       	std	Y+44, r25	; 0x2c
        halfwy = bx * (q1q2 - q0q3) + bz * (q0q1 + q2q3);
    22ce:	a5 01       	movw	r20, r10
    22d0:	94 01       	movw	r18, r8
    22d2:	61 96       	adiw	r28, 0x11	; 17
    22d4:	6c ad       	ldd	r22, Y+60	; 0x3c
    22d6:	7d ad       	ldd	r23, Y+61	; 0x3d
    22d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    22da:	9f ad       	ldd	r25, Y+63	; 0x3f
    22dc:	61 97       	sbiw	r28, 0x11	; 17
    22de:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    22e2:	2b 01       	movw	r4, r22
    22e4:	3c 01       	movw	r6, r24
    22e6:	a7 01       	movw	r20, r14
    22e8:	96 01       	movw	r18, r12
    22ea:	69 a1       	ldd	r22, Y+33	; 0x21
    22ec:	7a a1       	ldd	r23, Y+34	; 0x22
    22ee:	8b a1       	ldd	r24, Y+35	; 0x23
    22f0:	9c a1       	ldd	r25, Y+36	; 0x24
    22f2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    22f6:	9b 01       	movw	r18, r22
    22f8:	ac 01       	movw	r20, r24
    22fa:	c3 01       	movw	r24, r6
    22fc:	b2 01       	movw	r22, r4
    22fe:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    2302:	6d a7       	std	Y+45, r22	; 0x2d
    2304:	7e a7       	std	Y+46, r23	; 0x2e
    2306:	8f a7       	std	Y+47, r24	; 0x2f
    2308:	98 ab       	std	Y+48, r25	; 0x30
        halfwz = bx * (q0q2 + q1q3) + bz * (0.5 - q1q1 - q2q2);  
    230a:	a5 01       	movw	r20, r10
    230c:	94 01       	movw	r18, r8
    230e:	65 96       	adiw	r28, 0x15	; 21
    2310:	6c ad       	ldd	r22, Y+60	; 0x3c
    2312:	7d ad       	ldd	r23, Y+61	; 0x3d
    2314:	8e ad       	ldd	r24, Y+62	; 0x3e
    2316:	9f ad       	ldd	r25, Y+63	; 0x3f
    2318:	65 97       	sbiw	r28, 0x15	; 21
    231a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    231e:	2b 01       	movw	r4, r22
    2320:	3c 01       	movw	r6, r24
    2322:	a7 01       	movw	r20, r14
    2324:	96 01       	movw	r18, r12
    2326:	6d 89       	ldd	r22, Y+21	; 0x15
    2328:	7e 89       	ldd	r23, Y+22	; 0x16
    232a:	8f 89       	ldd	r24, Y+23	; 0x17
    232c:	98 8d       	ldd	r25, Y+24	; 0x18
    232e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2332:	9b 01       	movw	r18, r22
    2334:	ac 01       	movw	r20, r24
    2336:	c3 01       	movw	r24, r6
    2338:	b2 01       	movw	r22, r4
    233a:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    233e:	6b 01       	movw	r12, r22
    2340:	7c 01       	movw	r14, r24
	
		// Error is sum of cross product between estimated direction and measured direction of field vectors
		halfex = (ay * halfvz - az * halfvy) + (my * halfwz - mz * halfwy);
    2342:	2d a1       	ldd	r18, Y+37	; 0x25
    2344:	3e a1       	ldd	r19, Y+38	; 0x26
    2346:	4f a1       	ldd	r20, Y+39	; 0x27
    2348:	58 a5       	ldd	r21, Y+40	; 0x28
    234a:	69 ad       	ldd	r22, Y+57	; 0x39
    234c:	7a ad       	ldd	r23, Y+58	; 0x3a
    234e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2350:	9c ad       	ldd	r25, Y+60	; 0x3c
    2352:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2356:	4b 01       	movw	r8, r22
    2358:	5c 01       	movw	r10, r24
    235a:	29 a1       	ldd	r18, Y+33	; 0x21
    235c:	3a a1       	ldd	r19, Y+34	; 0x22
    235e:	4b a1       	ldd	r20, Y+35	; 0x23
    2360:	5c a1       	ldd	r21, Y+36	; 0x24
    2362:	21 96       	adiw	r28, 0x01	; 1
    2364:	6c ad       	ldd	r22, Y+60	; 0x3c
    2366:	7d ad       	ldd	r23, Y+61	; 0x3d
    2368:	8e ad       	ldd	r24, Y+62	; 0x3e
    236a:	9f ad       	ldd	r25, Y+63	; 0x3f
    236c:	21 97       	sbiw	r28, 0x01	; 1
    236e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2372:	9b 01       	movw	r18, r22
    2374:	ac 01       	movw	r20, r24
    2376:	c5 01       	movw	r24, r10
    2378:	b4 01       	movw	r22, r8
    237a:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    237e:	4b 01       	movw	r8, r22
    2380:	5c 01       	movw	r10, r24
    2382:	a7 01       	movw	r20, r14
    2384:	96 01       	movw	r18, r12
    2386:	69 85       	ldd	r22, Y+9	; 0x09
    2388:	7a 85       	ldd	r23, Y+10	; 0x0a
    238a:	8b 85       	ldd	r24, Y+11	; 0x0b
    238c:	9c 85       	ldd	r25, Y+12	; 0x0c
    238e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2392:	2b 01       	movw	r4, r22
    2394:	3c 01       	movw	r6, r24
    2396:	2d a5       	ldd	r18, Y+45	; 0x2d
    2398:	3e a5       	ldd	r19, Y+46	; 0x2e
    239a:	4f a5       	ldd	r20, Y+47	; 0x2f
    239c:	58 a9       	ldd	r21, Y+48	; 0x30
    239e:	6d 85       	ldd	r22, Y+13	; 0x0d
    23a0:	7e 85       	ldd	r23, Y+14	; 0x0e
    23a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23a4:	98 89       	ldd	r25, Y+16	; 0x10
    23a6:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    23aa:	9b 01       	movw	r18, r22
    23ac:	ac 01       	movw	r20, r24
    23ae:	c3 01       	movw	r24, r6
    23b0:	b2 01       	movw	r22, r4
    23b2:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    23b6:	9b 01       	movw	r18, r22
    23b8:	ac 01       	movw	r20, r24
    23ba:	c5 01       	movw	r24, r10
    23bc:	b4 01       	movw	r22, r8
    23be:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    23c2:	6d 8b       	std	Y+21, r22	; 0x15
    23c4:	7e 8b       	std	Y+22, r23	; 0x16
    23c6:	8f 8b       	std	Y+23, r24	; 0x17
    23c8:	98 8f       	std	Y+24, r25	; 0x18
		halfey = (az * halfvx - ax * halfvz) + (mz * halfwx - mx * halfwz);
    23ca:	2d 8d       	ldd	r18, Y+29	; 0x1d
    23cc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    23ce:	4f 8d       	ldd	r20, Y+31	; 0x1f
    23d0:	58 a1       	ldd	r21, Y+32	; 0x20
    23d2:	21 96       	adiw	r28, 0x01	; 1
    23d4:	6c ad       	ldd	r22, Y+60	; 0x3c
    23d6:	7d ad       	ldd	r23, Y+61	; 0x3d
    23d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    23da:	9f ad       	ldd	r25, Y+63	; 0x3f
    23dc:	21 97       	sbiw	r28, 0x01	; 1
    23de:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    23e2:	4b 01       	movw	r8, r22
    23e4:	5c 01       	movw	r10, r24
    23e6:	2d a1       	ldd	r18, Y+37	; 0x25
    23e8:	3e a1       	ldd	r19, Y+38	; 0x26
    23ea:	4f a1       	ldd	r20, Y+39	; 0x27
    23ec:	58 a5       	ldd	r21, Y+40	; 0x28
    23ee:	6d a9       	ldd	r22, Y+53	; 0x35
    23f0:	7e a9       	ldd	r23, Y+54	; 0x36
    23f2:	8f a9       	ldd	r24, Y+55	; 0x37
    23f4:	98 ad       	ldd	r25, Y+56	; 0x38
    23f6:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    23fa:	9b 01       	movw	r18, r22
    23fc:	ac 01       	movw	r20, r24
    23fe:	c5 01       	movw	r24, r10
    2400:	b4 01       	movw	r22, r8
    2402:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    2406:	4b 01       	movw	r8, r22
    2408:	5c 01       	movw	r10, r24
    240a:	29 a5       	ldd	r18, Y+41	; 0x29
    240c:	3a a5       	ldd	r19, Y+42	; 0x2a
    240e:	4b a5       	ldd	r20, Y+43	; 0x2b
    2410:	5c a5       	ldd	r21, Y+44	; 0x2c
    2412:	6d 85       	ldd	r22, Y+13	; 0x0d
    2414:	7e 85       	ldd	r23, Y+14	; 0x0e
    2416:	8f 85       	ldd	r24, Y+15	; 0x0f
    2418:	98 89       	ldd	r25, Y+16	; 0x10
    241a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    241e:	2b 01       	movw	r4, r22
    2420:	3c 01       	movw	r6, r24
    2422:	a7 01       	movw	r20, r14
    2424:	96 01       	movw	r18, r12
    2426:	6d 81       	ldd	r22, Y+5	; 0x05
    2428:	7e 81       	ldd	r23, Y+6	; 0x06
    242a:	8f 81       	ldd	r24, Y+7	; 0x07
    242c:	98 85       	ldd	r25, Y+8	; 0x08
    242e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2432:	9b 01       	movw	r18, r22
    2434:	ac 01       	movw	r20, r24
    2436:	c3 01       	movw	r24, r6
    2438:	b2 01       	movw	r22, r4
    243a:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    243e:	9b 01       	movw	r18, r22
    2440:	ac 01       	movw	r20, r24
    2442:	c5 01       	movw	r24, r10
    2444:	b4 01       	movw	r22, r8
    2446:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    244a:	4b 01       	movw	r8, r22
    244c:	5c 01       	movw	r10, r24
		halfez = (ax * halfvy - ay * halfvx) + (mx * halfwy - my * halfwx);
    244e:	29 a1       	ldd	r18, Y+33	; 0x21
    2450:	3a a1       	ldd	r19, Y+34	; 0x22
    2452:	4b a1       	ldd	r20, Y+35	; 0x23
    2454:	5c a1       	ldd	r21, Y+36	; 0x24
    2456:	6d a9       	ldd	r22, Y+53	; 0x35
    2458:	7e a9       	ldd	r23, Y+54	; 0x36
    245a:	8f a9       	ldd	r24, Y+55	; 0x37
    245c:	98 ad       	ldd	r25, Y+56	; 0x38
    245e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2462:	6b 01       	movw	r12, r22
    2464:	7c 01       	movw	r14, r24
    2466:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2468:	3e 8d       	ldd	r19, Y+30	; 0x1e
    246a:	4f 8d       	ldd	r20, Y+31	; 0x1f
    246c:	58 a1       	ldd	r21, Y+32	; 0x20
    246e:	69 ad       	ldd	r22, Y+57	; 0x39
    2470:	7a ad       	ldd	r23, Y+58	; 0x3a
    2472:	8b ad       	ldd	r24, Y+59	; 0x3b
    2474:	9c ad       	ldd	r25, Y+60	; 0x3c
    2476:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    247a:	9b 01       	movw	r18, r22
    247c:	ac 01       	movw	r20, r24
    247e:	c7 01       	movw	r24, r14
    2480:	b6 01       	movw	r22, r12
    2482:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    2486:	6b 01       	movw	r12, r22
    2488:	7c 01       	movw	r14, r24
    248a:	2d a5       	ldd	r18, Y+45	; 0x2d
    248c:	3e a5       	ldd	r19, Y+46	; 0x2e
    248e:	4f a5       	ldd	r20, Y+47	; 0x2f
    2490:	58 a9       	ldd	r21, Y+48	; 0x30
    2492:	6d 81       	ldd	r22, Y+5	; 0x05
    2494:	7e 81       	ldd	r23, Y+6	; 0x06
    2496:	8f 81       	ldd	r24, Y+7	; 0x07
    2498:	98 85       	ldd	r25, Y+8	; 0x08
    249a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    249e:	2b 01       	movw	r4, r22
    24a0:	3c 01       	movw	r6, r24
    24a2:	29 a5       	ldd	r18, Y+41	; 0x29
    24a4:	3a a5       	ldd	r19, Y+42	; 0x2a
    24a6:	4b a5       	ldd	r20, Y+43	; 0x2b
    24a8:	5c a5       	ldd	r21, Y+44	; 0x2c
    24aa:	69 85       	ldd	r22, Y+9	; 0x09
    24ac:	7a 85       	ldd	r23, Y+10	; 0x0a
    24ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    24b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    24b2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    24b6:	9b 01       	movw	r18, r22
    24b8:	ac 01       	movw	r20, r24
    24ba:	c3 01       	movw	r24, r6
    24bc:	b2 01       	movw	r22, r4
    24be:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    24c2:	9b 01       	movw	r18, r22
    24c4:	ac 01       	movw	r20, r24
    24c6:	c7 01       	movw	r24, r14
    24c8:	b6 01       	movw	r22, r12
    24ca:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    24ce:	6b 01       	movw	r12, r22
    24d0:	7c 01       	movw	r14, r24

		// Compute and apply integral feedback if enabled
		if(twoKi > 0.0) {
    24d2:	60 91 6b 21 	lds	r22, 0x216B	; 0x80216b <twoKi>
    24d6:	70 91 6c 21 	lds	r23, 0x216C	; 0x80216c <twoKi+0x1>
    24da:	80 91 6d 21 	lds	r24, 0x216D	; 0x80216d <twoKi+0x2>
    24de:	90 91 6e 21 	lds	r25, 0x216E	; 0x80216e <twoKi+0x3>
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	a9 01       	movw	r20, r18
    24e8:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <__gesf2>
    24ec:	18 16       	cp	r1, r24
    24ee:	0c f0       	brlt	.+2      	; 0x24f2 <MahonyAHRSupdate+0x98e>
    24f0:	ab c0       	rjmp	.+342    	; 0x2648 <MahonyAHRSupdate+0xae4>
			integralFBx += twoKi * halfex * (1.0 / sampleFreq);	// integral error scaled by Ki
    24f2:	20 91 6b 21 	lds	r18, 0x216B	; 0x80216b <twoKi>
    24f6:	30 91 6c 21 	lds	r19, 0x216C	; 0x80216c <twoKi+0x1>
    24fa:	40 91 6d 21 	lds	r20, 0x216D	; 0x80216d <twoKi+0x2>
    24fe:	50 91 6e 21 	lds	r21, 0x216E	; 0x80216e <twoKi+0x3>
    2502:	40 90 5b 21 	lds	r4, 0x215B	; 0x80215b <integralFBx>
    2506:	50 90 5c 21 	lds	r5, 0x215C	; 0x80215c <integralFBx+0x1>
    250a:	60 90 5d 21 	lds	r6, 0x215D	; 0x80215d <integralFBx+0x2>
    250e:	70 90 5e 21 	lds	r7, 0x215E	; 0x80215e <integralFBx+0x3>
    2512:	6d 89       	ldd	r22, Y+21	; 0x15
    2514:	7e 89       	ldd	r23, Y+22	; 0x16
    2516:	8f 89       	ldd	r24, Y+23	; 0x17
    2518:	98 8d       	ldd	r25, Y+24	; 0x18
    251a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    251e:	2a ef       	ldi	r18, 0xFA	; 250
    2520:	39 ec       	ldi	r19, 0xC9	; 201
    2522:	44 e3       	ldi	r20, 0x34	; 52
    2524:	59 e3       	ldi	r21, 0x39	; 57
    2526:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    252a:	a3 01       	movw	r20, r6
    252c:	92 01       	movw	r18, r4
    252e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    2532:	60 93 5b 21 	sts	0x215B, r22	; 0x80215b <integralFBx>
    2536:	70 93 5c 21 	sts	0x215C, r23	; 0x80215c <integralFBx+0x1>
    253a:	80 93 5d 21 	sts	0x215D, r24	; 0x80215d <integralFBx+0x2>
    253e:	90 93 5e 21 	sts	0x215E, r25	; 0x80215e <integralFBx+0x3>
			integralFBy += twoKi * halfey * (1.0 / sampleFreq);
    2542:	20 91 6b 21 	lds	r18, 0x216B	; 0x80216b <twoKi>
    2546:	30 91 6c 21 	lds	r19, 0x216C	; 0x80216c <twoKi+0x1>
    254a:	40 91 6d 21 	lds	r20, 0x216D	; 0x80216d <twoKi+0x2>
    254e:	50 91 6e 21 	lds	r21, 0x216E	; 0x80216e <twoKi+0x3>
    2552:	40 90 57 21 	lds	r4, 0x2157	; 0x802157 <integralFBy>
    2556:	50 90 58 21 	lds	r5, 0x2158	; 0x802158 <integralFBy+0x1>
    255a:	60 90 59 21 	lds	r6, 0x2159	; 0x802159 <integralFBy+0x2>
    255e:	70 90 5a 21 	lds	r7, 0x215A	; 0x80215a <integralFBy+0x3>
    2562:	c5 01       	movw	r24, r10
    2564:	b4 01       	movw	r22, r8
    2566:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    256a:	2a ef       	ldi	r18, 0xFA	; 250
    256c:	39 ec       	ldi	r19, 0xC9	; 201
    256e:	44 e3       	ldi	r20, 0x34	; 52
    2570:	59 e3       	ldi	r21, 0x39	; 57
    2572:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2576:	a3 01       	movw	r20, r6
    2578:	92 01       	movw	r18, r4
    257a:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    257e:	60 93 57 21 	sts	0x2157, r22	; 0x802157 <integralFBy>
    2582:	70 93 58 21 	sts	0x2158, r23	; 0x802158 <integralFBy+0x1>
    2586:	80 93 59 21 	sts	0x2159, r24	; 0x802159 <integralFBy+0x2>
    258a:	90 93 5a 21 	sts	0x215A, r25	; 0x80215a <integralFBy+0x3>
			integralFBz += twoKi * halfez * (1.0 / sampleFreq);
    258e:	20 91 6b 21 	lds	r18, 0x216B	; 0x80216b <twoKi>
    2592:	30 91 6c 21 	lds	r19, 0x216C	; 0x80216c <twoKi+0x1>
    2596:	40 91 6d 21 	lds	r20, 0x216D	; 0x80216d <twoKi+0x2>
    259a:	50 91 6e 21 	lds	r21, 0x216E	; 0x80216e <twoKi+0x3>
    259e:	40 90 53 21 	lds	r4, 0x2153	; 0x802153 <integralFBz>
    25a2:	50 90 54 21 	lds	r5, 0x2154	; 0x802154 <integralFBz+0x1>
    25a6:	60 90 55 21 	lds	r6, 0x2155	; 0x802155 <integralFBz+0x2>
    25aa:	70 90 56 21 	lds	r7, 0x2156	; 0x802156 <integralFBz+0x3>
    25ae:	c7 01       	movw	r24, r14
    25b0:	b6 01       	movw	r22, r12
    25b2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    25b6:	2a ef       	ldi	r18, 0xFA	; 250
    25b8:	39 ec       	ldi	r19, 0xC9	; 201
    25ba:	44 e3       	ldi	r20, 0x34	; 52
    25bc:	59 e3       	ldi	r21, 0x39	; 57
    25be:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    25c2:	a3 01       	movw	r20, r6
    25c4:	92 01       	movw	r18, r4
    25c6:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    25ca:	60 93 53 21 	sts	0x2153, r22	; 0x802153 <integralFBz>
    25ce:	70 93 54 21 	sts	0x2154, r23	; 0x802154 <integralFBz+0x1>
    25d2:	80 93 55 21 	sts	0x2155, r24	; 0x802155 <integralFBz+0x2>
    25d6:	90 93 56 21 	sts	0x2156, r25	; 0x802156 <integralFBz+0x3>
			gx += integralFBx;	// apply integral feedback
    25da:	20 91 5b 21 	lds	r18, 0x215B	; 0x80215b <integralFBx>
    25de:	30 91 5c 21 	lds	r19, 0x215C	; 0x80215c <integralFBx+0x1>
    25e2:	40 91 5d 21 	lds	r20, 0x215D	; 0x80215d <integralFBx+0x2>
    25e6:	50 91 5e 21 	lds	r21, 0x215E	; 0x80215e <integralFBx+0x3>
    25ea:	69 89       	ldd	r22, Y+17	; 0x11
    25ec:	7a 89       	ldd	r23, Y+18	; 0x12
    25ee:	8b 89       	ldd	r24, Y+19	; 0x13
    25f0:	9c 89       	ldd	r25, Y+20	; 0x14
    25f2:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    25f6:	69 8b       	std	Y+17, r22	; 0x11
    25f8:	7a 8b       	std	Y+18, r23	; 0x12
    25fa:	8b 8b       	std	Y+19, r24	; 0x13
    25fc:	9c 8b       	std	Y+20, r25	; 0x14
			gy += integralFBy;
    25fe:	20 91 57 21 	lds	r18, 0x2157	; 0x802157 <integralFBy>
    2602:	30 91 58 21 	lds	r19, 0x2158	; 0x802158 <integralFBy+0x1>
    2606:	40 91 59 21 	lds	r20, 0x2159	; 0x802159 <integralFBy+0x2>
    260a:	50 91 5a 21 	lds	r21, 0x215A	; 0x80215a <integralFBy+0x3>
    260e:	69 8d       	ldd	r22, Y+25	; 0x19
    2610:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2612:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2614:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2616:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    261a:	69 8f       	std	Y+25, r22	; 0x19
    261c:	7a 8f       	std	Y+26, r23	; 0x1a
    261e:	8b 8f       	std	Y+27, r24	; 0x1b
    2620:	9c 8f       	std	Y+28, r25	; 0x1c
			gz += integralFBz;
    2622:	20 91 53 21 	lds	r18, 0x2153	; 0x802153 <integralFBz>
    2626:	30 91 54 21 	lds	r19, 0x2154	; 0x802154 <integralFBz+0x1>
    262a:	40 91 55 21 	lds	r20, 0x2155	; 0x802155 <integralFBz+0x2>
    262e:	50 91 56 21 	lds	r21, 0x2156	; 0x802156 <integralFBz+0x3>
    2632:	69 81       	ldd	r22, Y+1	; 0x01
    2634:	7a 81       	ldd	r23, Y+2	; 0x02
    2636:	8b 81       	ldd	r24, Y+3	; 0x03
    2638:	9c 81       	ldd	r25, Y+4	; 0x04
    263a:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    263e:	69 83       	std	Y+1, r22	; 0x01
    2640:	7a 83       	std	Y+2, r23	; 0x02
    2642:	8b 83       	std	Y+3, r24	; 0x03
    2644:	9c 83       	std	Y+4, r25	; 0x04
    2646:	18 c0       	rjmp	.+48     	; 0x2678 <MahonyAHRSupdate+0xb14>
		}
		else {
			integralFBx = 0.0;	// prevent integral windup
    2648:	10 92 5b 21 	sts	0x215B, r1	; 0x80215b <integralFBx>
    264c:	10 92 5c 21 	sts	0x215C, r1	; 0x80215c <integralFBx+0x1>
    2650:	10 92 5d 21 	sts	0x215D, r1	; 0x80215d <integralFBx+0x2>
    2654:	10 92 5e 21 	sts	0x215E, r1	; 0x80215e <integralFBx+0x3>
			integralFBy = 0.0;
    2658:	10 92 57 21 	sts	0x2157, r1	; 0x802157 <integralFBy>
    265c:	10 92 58 21 	sts	0x2158, r1	; 0x802158 <integralFBy+0x1>
    2660:	10 92 59 21 	sts	0x2159, r1	; 0x802159 <integralFBy+0x2>
    2664:	10 92 5a 21 	sts	0x215A, r1	; 0x80215a <integralFBy+0x3>
			integralFBz = 0.0;
    2668:	10 92 53 21 	sts	0x2153, r1	; 0x802153 <integralFBz>
    266c:	10 92 54 21 	sts	0x2154, r1	; 0x802154 <integralFBz+0x1>
    2670:	10 92 55 21 	sts	0x2155, r1	; 0x802155 <integralFBz+0x2>
    2674:	10 92 56 21 	sts	0x2156, r1	; 0x802156 <integralFBz+0x3>
		}

		// Apply proportional feedback
		gx += twoKp * halfex;
    2678:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <twoKp>
    267c:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <twoKp+0x1>
    2680:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <twoKp+0x2>
    2684:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <twoKp+0x3>
    2688:	6d 89       	ldd	r22, Y+21	; 0x15
    268a:	7e 89       	ldd	r23, Y+22	; 0x16
    268c:	8f 89       	ldd	r24, Y+23	; 0x17
    268e:	98 8d       	ldd	r25, Y+24	; 0x18
    2690:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2694:	9b 01       	movw	r18, r22
    2696:	ac 01       	movw	r20, r24
    2698:	69 89       	ldd	r22, Y+17	; 0x11
    269a:	7a 89       	ldd	r23, Y+18	; 0x12
    269c:	8b 89       	ldd	r24, Y+19	; 0x13
    269e:	9c 89       	ldd	r25, Y+20	; 0x14
    26a0:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    26a4:	69 8b       	std	Y+17, r22	; 0x11
    26a6:	7a 8b       	std	Y+18, r23	; 0x12
    26a8:	8b 8b       	std	Y+19, r24	; 0x13
    26aa:	9c 8b       	std	Y+20, r25	; 0x14
		gy += twoKp * halfey;
    26ac:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <twoKp>
    26b0:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <twoKp+0x1>
    26b4:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <twoKp+0x2>
    26b8:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <twoKp+0x3>
    26bc:	c5 01       	movw	r24, r10
    26be:	b4 01       	movw	r22, r8
    26c0:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    26c4:	9b 01       	movw	r18, r22
    26c6:	ac 01       	movw	r20, r24
    26c8:	69 8d       	ldd	r22, Y+25	; 0x19
    26ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26d0:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    26d4:	69 8f       	std	Y+25, r22	; 0x19
    26d6:	7a 8f       	std	Y+26, r23	; 0x1a
    26d8:	8b 8f       	std	Y+27, r24	; 0x1b
    26da:	9c 8f       	std	Y+28, r25	; 0x1c
		gz += twoKp * halfez;
    26dc:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <twoKp>
    26e0:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <twoKp+0x1>
    26e4:	40 91 1e 20 	lds	r20, 0x201E	; 0x80201e <twoKp+0x2>
    26e8:	50 91 1f 20 	lds	r21, 0x201F	; 0x80201f <twoKp+0x3>
    26ec:	c7 01       	movw	r24, r14
    26ee:	b6 01       	movw	r22, r12
    26f0:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    26f4:	9b 01       	movw	r18, r22
    26f6:	ac 01       	movw	r20, r24
    26f8:	69 81       	ldd	r22, Y+1	; 0x01
    26fa:	7a 81       	ldd	r23, Y+2	; 0x02
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2700:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    2704:	69 83       	std	Y+1, r22	; 0x01
    2706:	7a 83       	std	Y+2, r23	; 0x02
    2708:	8b 83       	std	Y+3, r24	; 0x03
    270a:	9c 83       	std	Y+4, r25	; 0x04
	}
	
	// Integrate rate of change of quaternion
	gx *= (0.5 * (1.0 / sampleFreq));		// pre-multiply common factors
    270c:	2a ef       	ldi	r18, 0xFA	; 250
    270e:	39 ec       	ldi	r19, 0xC9	; 201
    2710:	44 eb       	ldi	r20, 0xB4	; 180
    2712:	58 e3       	ldi	r21, 0x38	; 56
    2714:	69 89       	ldd	r22, Y+17	; 0x11
    2716:	7a 89       	ldd	r23, Y+18	; 0x12
    2718:	8b 89       	ldd	r24, Y+19	; 0x13
    271a:	9c 89       	ldd	r25, Y+20	; 0x14
    271c:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2720:	6d 83       	std	Y+5, r22	; 0x05
    2722:	7e 83       	std	Y+6, r23	; 0x06
    2724:	8f 83       	std	Y+7, r24	; 0x07
    2726:	98 87       	std	Y+8, r25	; 0x08
	gy *= (0.5 * (1.0 / sampleFreq));
    2728:	2a ef       	ldi	r18, 0xFA	; 250
    272a:	39 ec       	ldi	r19, 0xC9	; 201
    272c:	44 eb       	ldi	r20, 0xB4	; 180
    272e:	58 e3       	ldi	r21, 0x38	; 56
    2730:	69 8d       	ldd	r22, Y+25	; 0x19
    2732:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2734:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2736:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2738:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    273c:	69 87       	std	Y+9, r22	; 0x09
    273e:	7a 87       	std	Y+10, r23	; 0x0a
    2740:	8b 87       	std	Y+11, r24	; 0x0b
    2742:	9c 87       	std	Y+12, r25	; 0x0c
	gz *= (0.5 * (1.0 / sampleFreq));
    2744:	2a ef       	ldi	r18, 0xFA	; 250
    2746:	39 ec       	ldi	r19, 0xC9	; 201
    2748:	44 eb       	ldi	r20, 0xB4	; 180
    274a:	58 e3       	ldi	r21, 0x38	; 56
    274c:	69 81       	ldd	r22, Y+1	; 0x01
    274e:	7a 81       	ldd	r23, Y+2	; 0x02
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	9c 81       	ldd	r25, Y+4	; 0x04
    2754:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2758:	6d 87       	std	Y+13, r22	; 0x0d
    275a:	7e 87       	std	Y+14, r23	; 0x0e
    275c:	8f 87       	std	Y+15, r24	; 0x0f
    275e:	98 8b       	std	Y+16, r25	; 0x10
	qa = q0;
    2760:	e0 90 18 20 	lds	r14, 0x2018	; 0x802018 <q0>
    2764:	f0 90 19 20 	lds	r15, 0x2019	; 0x802019 <q0+0x1>
    2768:	00 91 1a 20 	lds	r16, 0x201A	; 0x80201a <q0+0x2>
    276c:	10 91 1b 20 	lds	r17, 0x201B	; 0x80201b <q0+0x3>
    2770:	e9 8a       	std	Y+17, r14	; 0x11
    2772:	fa 8a       	std	Y+18, r15	; 0x12
    2774:	0b 8b       	std	Y+19, r16	; 0x13
    2776:	1c 8b       	std	Y+20, r17	; 0x14
	qb = q1;
    2778:	80 90 67 21 	lds	r8, 0x2167	; 0x802167 <q1>
    277c:	90 90 68 21 	lds	r9, 0x2168	; 0x802168 <q1+0x1>
    2780:	a0 90 69 21 	lds	r10, 0x2169	; 0x802169 <q1+0x2>
    2784:	b0 90 6a 21 	lds	r11, 0x216A	; 0x80216a <q1+0x3>
	qc = q2;
    2788:	e0 90 63 21 	lds	r14, 0x2163	; 0x802163 <q2>
    278c:	f0 90 64 21 	lds	r15, 0x2164	; 0x802164 <q2+0x1>
    2790:	00 91 65 21 	lds	r16, 0x2165	; 0x802165 <q2+0x2>
    2794:	10 91 66 21 	lds	r17, 0x2166	; 0x802166 <q2+0x3>
    2798:	e9 8e       	std	Y+25, r14	; 0x19
    279a:	fa 8e       	std	Y+26, r15	; 0x1a
    279c:	0b 8f       	std	Y+27, r16	; 0x1b
    279e:	1c 8f       	std	Y+28, r17	; 0x1c
	q0 += (-qb * gx - qc * gy - q3 * gz);
    27a0:	40 90 5f 21 	lds	r4, 0x215F	; 0x80215f <q3>
    27a4:	50 90 60 21 	lds	r5, 0x2160	; 0x802160 <q3+0x1>
    27a8:	60 90 61 21 	lds	r6, 0x2161	; 0x802161 <q3+0x2>
    27ac:	70 90 62 21 	lds	r7, 0x2162	; 0x802162 <q3+0x3>
    27b0:	c0 90 18 20 	lds	r12, 0x2018	; 0x802018 <q0>
    27b4:	d0 90 19 20 	lds	r13, 0x2019	; 0x802019 <q0+0x1>
    27b8:	e0 90 1a 20 	lds	r14, 0x201A	; 0x80201a <q0+0x2>
    27bc:	f0 90 1b 20 	lds	r15, 0x201B	; 0x80201b <q0+0x3>
    27c0:	c5 01       	movw	r24, r10
    27c2:	b4 01       	movw	r22, r8
    27c4:	90 58       	subi	r25, 0x80	; 128
    27c6:	2d 81       	ldd	r18, Y+5	; 0x05
    27c8:	3e 81       	ldd	r19, Y+6	; 0x06
    27ca:	4f 81       	ldd	r20, Y+7	; 0x07
    27cc:	58 85       	ldd	r21, Y+8	; 0x08
    27ce:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    27d2:	69 83       	std	Y+1, r22	; 0x01
    27d4:	7a 83       	std	Y+2, r23	; 0x02
    27d6:	8b 83       	std	Y+3, r24	; 0x03
    27d8:	9c 83       	std	Y+4, r25	; 0x04
    27da:	29 8d       	ldd	r18, Y+25	; 0x19
    27dc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    27de:	4b 8d       	ldd	r20, Y+27	; 0x1b
    27e0:	5c 8d       	ldd	r21, Y+28	; 0x1c
    27e2:	69 85       	ldd	r22, Y+9	; 0x09
    27e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    27e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    27e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    27ea:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    27ee:	9b 01       	movw	r18, r22
    27f0:	ac 01       	movw	r20, r24
    27f2:	69 81       	ldd	r22, Y+1	; 0x01
    27f4:	7a 81       	ldd	r23, Y+2	; 0x02
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	9c 81       	ldd	r25, Y+4	; 0x04
    27fa:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    27fe:	69 83       	std	Y+1, r22	; 0x01
    2800:	7a 83       	std	Y+2, r23	; 0x02
    2802:	8b 83       	std	Y+3, r24	; 0x03
    2804:	9c 83       	std	Y+4, r25	; 0x04
    2806:	a3 01       	movw	r20, r6
    2808:	92 01       	movw	r18, r4
    280a:	6d 85       	ldd	r22, Y+13	; 0x0d
    280c:	7e 85       	ldd	r23, Y+14	; 0x0e
    280e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2810:	98 89       	ldd	r25, Y+16	; 0x10
    2812:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2816:	9b 01       	movw	r18, r22
    2818:	ac 01       	movw	r20, r24
    281a:	69 81       	ldd	r22, Y+1	; 0x01
    281c:	7a 81       	ldd	r23, Y+2	; 0x02
    281e:	8b 81       	ldd	r24, Y+3	; 0x03
    2820:	9c 81       	ldd	r25, Y+4	; 0x04
    2822:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    2826:	a7 01       	movw	r20, r14
    2828:	96 01       	movw	r18, r12
    282a:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    282e:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <q0>
    2832:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <q0+0x1>
    2836:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <q0+0x2>
    283a:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <q0+0x3>
	q1 += (qa * gx + qc * gz - q3 * gy);
    283e:	40 90 5f 21 	lds	r4, 0x215F	; 0x80215f <q3>
    2842:	50 90 60 21 	lds	r5, 0x2160	; 0x802160 <q3+0x1>
    2846:	60 90 61 21 	lds	r6, 0x2161	; 0x802161 <q3+0x2>
    284a:	70 90 62 21 	lds	r7, 0x2162	; 0x802162 <q3+0x3>
    284e:	c0 90 67 21 	lds	r12, 0x2167	; 0x802167 <q1>
    2852:	d0 90 68 21 	lds	r13, 0x2168	; 0x802168 <q1+0x1>
    2856:	e0 90 69 21 	lds	r14, 0x2169	; 0x802169 <q1+0x2>
    285a:	f0 90 6a 21 	lds	r15, 0x216A	; 0x80216a <q1+0x3>
    285e:	29 89       	ldd	r18, Y+17	; 0x11
    2860:	3a 89       	ldd	r19, Y+18	; 0x12
    2862:	4b 89       	ldd	r20, Y+19	; 0x13
    2864:	5c 89       	ldd	r21, Y+20	; 0x14
    2866:	6d 81       	ldd	r22, Y+5	; 0x05
    2868:	7e 81       	ldd	r23, Y+6	; 0x06
    286a:	8f 81       	ldd	r24, Y+7	; 0x07
    286c:	98 85       	ldd	r25, Y+8	; 0x08
    286e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2872:	69 83       	std	Y+1, r22	; 0x01
    2874:	7a 83       	std	Y+2, r23	; 0x02
    2876:	8b 83       	std	Y+3, r24	; 0x03
    2878:	9c 83       	std	Y+4, r25	; 0x04
    287a:	29 8d       	ldd	r18, Y+25	; 0x19
    287c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    287e:	4b 8d       	ldd	r20, Y+27	; 0x1b
    2880:	5c 8d       	ldd	r21, Y+28	; 0x1c
    2882:	6d 85       	ldd	r22, Y+13	; 0x0d
    2884:	7e 85       	ldd	r23, Y+14	; 0x0e
    2886:	8f 85       	ldd	r24, Y+15	; 0x0f
    2888:	98 89       	ldd	r25, Y+16	; 0x10
    288a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    288e:	9b 01       	movw	r18, r22
    2890:	ac 01       	movw	r20, r24
    2892:	69 81       	ldd	r22, Y+1	; 0x01
    2894:	7a 81       	ldd	r23, Y+2	; 0x02
    2896:	8b 81       	ldd	r24, Y+3	; 0x03
    2898:	9c 81       	ldd	r25, Y+4	; 0x04
    289a:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    289e:	69 83       	std	Y+1, r22	; 0x01
    28a0:	7a 83       	std	Y+2, r23	; 0x02
    28a2:	8b 83       	std	Y+3, r24	; 0x03
    28a4:	9c 83       	std	Y+4, r25	; 0x04
    28a6:	a3 01       	movw	r20, r6
    28a8:	92 01       	movw	r18, r4
    28aa:	69 85       	ldd	r22, Y+9	; 0x09
    28ac:	7a 85       	ldd	r23, Y+10	; 0x0a
    28ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    28b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    28b2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    28b6:	9b 01       	movw	r18, r22
    28b8:	ac 01       	movw	r20, r24
    28ba:	69 81       	ldd	r22, Y+1	; 0x01
    28bc:	7a 81       	ldd	r23, Y+2	; 0x02
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    28c6:	a7 01       	movw	r20, r14
    28c8:	96 01       	movw	r18, r12
    28ca:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    28ce:	60 93 67 21 	sts	0x2167, r22	; 0x802167 <q1>
    28d2:	70 93 68 21 	sts	0x2168, r23	; 0x802168 <q1+0x1>
    28d6:	80 93 69 21 	sts	0x2169, r24	; 0x802169 <q1+0x2>
    28da:	90 93 6a 21 	sts	0x216A, r25	; 0x80216a <q1+0x3>
	q2 += (qa * gy - qb * gz + q3 * gx);
    28de:	40 90 5f 21 	lds	r4, 0x215F	; 0x80215f <q3>
    28e2:	50 90 60 21 	lds	r5, 0x2160	; 0x802160 <q3+0x1>
    28e6:	60 90 61 21 	lds	r6, 0x2161	; 0x802161 <q3+0x2>
    28ea:	70 90 62 21 	lds	r7, 0x2162	; 0x802162 <q3+0x3>
    28ee:	c0 90 63 21 	lds	r12, 0x2163	; 0x802163 <q2>
    28f2:	d0 90 64 21 	lds	r13, 0x2164	; 0x802164 <q2+0x1>
    28f6:	e0 90 65 21 	lds	r14, 0x2165	; 0x802165 <q2+0x2>
    28fa:	f0 90 66 21 	lds	r15, 0x2166	; 0x802166 <q2+0x3>
    28fe:	29 89       	ldd	r18, Y+17	; 0x11
    2900:	3a 89       	ldd	r19, Y+18	; 0x12
    2902:	4b 89       	ldd	r20, Y+19	; 0x13
    2904:	5c 89       	ldd	r21, Y+20	; 0x14
    2906:	69 85       	ldd	r22, Y+9	; 0x09
    2908:	7a 85       	ldd	r23, Y+10	; 0x0a
    290a:	8b 85       	ldd	r24, Y+11	; 0x0b
    290c:	9c 85       	ldd	r25, Y+12	; 0x0c
    290e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2912:	69 83       	std	Y+1, r22	; 0x01
    2914:	7a 83       	std	Y+2, r23	; 0x02
    2916:	8b 83       	std	Y+3, r24	; 0x03
    2918:	9c 83       	std	Y+4, r25	; 0x04
    291a:	a5 01       	movw	r20, r10
    291c:	94 01       	movw	r18, r8
    291e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2920:	7e 85       	ldd	r23, Y+14	; 0x0e
    2922:	8f 85       	ldd	r24, Y+15	; 0x0f
    2924:	98 89       	ldd	r25, Y+16	; 0x10
    2926:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    292a:	9b 01       	movw	r18, r22
    292c:	ac 01       	movw	r20, r24
    292e:	69 81       	ldd	r22, Y+1	; 0x01
    2930:	7a 81       	ldd	r23, Y+2	; 0x02
    2932:	8b 81       	ldd	r24, Y+3	; 0x03
    2934:	9c 81       	ldd	r25, Y+4	; 0x04
    2936:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    293a:	69 83       	std	Y+1, r22	; 0x01
    293c:	7a 83       	std	Y+2, r23	; 0x02
    293e:	8b 83       	std	Y+3, r24	; 0x03
    2940:	9c 83       	std	Y+4, r25	; 0x04
    2942:	a3 01       	movw	r20, r6
    2944:	92 01       	movw	r18, r4
    2946:	6d 81       	ldd	r22, Y+5	; 0x05
    2948:	7e 81       	ldd	r23, Y+6	; 0x06
    294a:	8f 81       	ldd	r24, Y+7	; 0x07
    294c:	98 85       	ldd	r25, Y+8	; 0x08
    294e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2952:	9b 01       	movw	r18, r22
    2954:	ac 01       	movw	r20, r24
    2956:	69 81       	ldd	r22, Y+1	; 0x01
    2958:	7a 81       	ldd	r23, Y+2	; 0x02
    295a:	8b 81       	ldd	r24, Y+3	; 0x03
    295c:	9c 81       	ldd	r25, Y+4	; 0x04
    295e:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    2962:	a7 01       	movw	r20, r14
    2964:	96 01       	movw	r18, r12
    2966:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    296a:	60 93 63 21 	sts	0x2163, r22	; 0x802163 <q2>
    296e:	70 93 64 21 	sts	0x2164, r23	; 0x802164 <q2+0x1>
    2972:	80 93 65 21 	sts	0x2165, r24	; 0x802165 <q2+0x2>
    2976:	90 93 66 21 	sts	0x2166, r25	; 0x802166 <q2+0x3>
	q3 += (qa * gz + qb * gy - qc * gx); 
    297a:	c0 90 5f 21 	lds	r12, 0x215F	; 0x80215f <q3>
    297e:	d0 90 60 21 	lds	r13, 0x2160	; 0x802160 <q3+0x1>
    2982:	e0 90 61 21 	lds	r14, 0x2161	; 0x802161 <q3+0x2>
    2986:	f0 90 62 21 	lds	r15, 0x2162	; 0x802162 <q3+0x3>
    298a:	29 89       	ldd	r18, Y+17	; 0x11
    298c:	3a 89       	ldd	r19, Y+18	; 0x12
    298e:	4b 89       	ldd	r20, Y+19	; 0x13
    2990:	5c 89       	ldd	r21, Y+20	; 0x14
    2992:	6d 85       	ldd	r22, Y+13	; 0x0d
    2994:	7e 85       	ldd	r23, Y+14	; 0x0e
    2996:	8f 85       	ldd	r24, Y+15	; 0x0f
    2998:	98 89       	ldd	r25, Y+16	; 0x10
    299a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    299e:	2b 01       	movw	r4, r22
    29a0:	3c 01       	movw	r6, r24
    29a2:	a5 01       	movw	r20, r10
    29a4:	94 01       	movw	r18, r8
    29a6:	69 85       	ldd	r22, Y+9	; 0x09
    29a8:	7a 85       	ldd	r23, Y+10	; 0x0a
    29aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    29ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    29ae:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    29b2:	9b 01       	movw	r18, r22
    29b4:	ac 01       	movw	r20, r24
    29b6:	c3 01       	movw	r24, r6
    29b8:	b2 01       	movw	r22, r4
    29ba:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    29be:	4b 01       	movw	r8, r22
    29c0:	5c 01       	movw	r10, r24
    29c2:	29 8d       	ldd	r18, Y+25	; 0x19
    29c4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    29c6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    29c8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    29ca:	6d 81       	ldd	r22, Y+5	; 0x05
    29cc:	7e 81       	ldd	r23, Y+6	; 0x06
    29ce:	8f 81       	ldd	r24, Y+7	; 0x07
    29d0:	98 85       	ldd	r25, Y+8	; 0x08
    29d2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    29d6:	9b 01       	movw	r18, r22
    29d8:	ac 01       	movw	r20, r24
    29da:	c5 01       	movw	r24, r10
    29dc:	b4 01       	movw	r22, r8
    29de:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    29e2:	a7 01       	movw	r20, r14
    29e4:	96 01       	movw	r18, r12
    29e6:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    29ea:	60 93 5f 21 	sts	0x215F, r22	; 0x80215f <q3>
    29ee:	70 93 60 21 	sts	0x2160, r23	; 0x802160 <q3+0x1>
    29f2:	80 93 61 21 	sts	0x2161, r24	; 0x802161 <q3+0x2>
    29f6:	90 93 62 21 	sts	0x2162, r25	; 0x802162 <q3+0x3>
	
	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
    29fa:	60 91 18 20 	lds	r22, 0x2018	; 0x802018 <q0>
    29fe:	70 91 19 20 	lds	r23, 0x2019	; 0x802019 <q0+0x1>
    2a02:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <q0+0x2>
    2a06:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <q0+0x3>
    2a0a:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <q0>
    2a0e:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <q0+0x1>
    2a12:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <q0+0x2>
    2a16:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <q0+0x3>
    2a1a:	80 90 67 21 	lds	r8, 0x2167	; 0x802167 <q1>
    2a1e:	90 90 68 21 	lds	r9, 0x2168	; 0x802168 <q1+0x1>
    2a22:	a0 90 69 21 	lds	r10, 0x2169	; 0x802169 <q1+0x2>
    2a26:	b0 90 6a 21 	lds	r11, 0x216A	; 0x80216a <q1+0x3>
    2a2a:	40 90 67 21 	lds	r4, 0x2167	; 0x802167 <q1>
    2a2e:	50 90 68 21 	lds	r5, 0x2168	; 0x802168 <q1+0x1>
    2a32:	60 90 69 21 	lds	r6, 0x2169	; 0x802169 <q1+0x2>
    2a36:	70 90 6a 21 	lds	r7, 0x216A	; 0x80216a <q1+0x3>
    2a3a:	e0 90 63 21 	lds	r14, 0x2163	; 0x802163 <q2>
    2a3e:	f0 90 64 21 	lds	r15, 0x2164	; 0x802164 <q2+0x1>
    2a42:	00 91 65 21 	lds	r16, 0x2165	; 0x802165 <q2+0x2>
    2a46:	10 91 66 21 	lds	r17, 0x2166	; 0x802166 <q2+0x3>
    2a4a:	ed 82       	std	Y+5, r14	; 0x05
    2a4c:	fe 82       	std	Y+6, r15	; 0x06
    2a4e:	0f 83       	std	Y+7, r16	; 0x07
    2a50:	18 87       	std	Y+8, r17	; 0x08
    2a52:	e0 90 63 21 	lds	r14, 0x2163	; 0x802163 <q2>
    2a56:	f0 90 64 21 	lds	r15, 0x2164	; 0x802164 <q2+0x1>
    2a5a:	00 91 65 21 	lds	r16, 0x2165	; 0x802165 <q2+0x2>
    2a5e:	10 91 66 21 	lds	r17, 0x2166	; 0x802166 <q2+0x3>
    2a62:	e9 86       	std	Y+9, r14	; 0x09
    2a64:	fa 86       	std	Y+10, r15	; 0x0a
    2a66:	0b 87       	std	Y+11, r16	; 0x0b
    2a68:	1c 87       	std	Y+12, r17	; 0x0c
    2a6a:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q3>
    2a6e:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q3+0x1>
    2a72:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q3+0x2>
    2a76:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q3+0x3>
    2a7a:	e9 82       	std	Y+1, r14	; 0x01
    2a7c:	fa 82       	std	Y+2, r15	; 0x02
    2a7e:	0b 83       	std	Y+3, r16	; 0x03
    2a80:	1c 83       	std	Y+4, r17	; 0x04
    2a82:	e0 90 5f 21 	lds	r14, 0x215F	; 0x80215f <q3>
    2a86:	f0 90 60 21 	lds	r15, 0x2160	; 0x802160 <q3+0x1>
    2a8a:	00 91 61 21 	lds	r16, 0x2161	; 0x802161 <q3+0x2>
    2a8e:	10 91 62 21 	lds	r17, 0x2162	; 0x802162 <q3+0x3>
    2a92:	ed 86       	std	Y+13, r14	; 0x0d
    2a94:	fe 86       	std	Y+14, r15	; 0x0e
    2a96:	0f 87       	std	Y+15, r16	; 0x0f
    2a98:	18 8b       	std	Y+16, r17	; 0x10
    2a9a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2a9e:	6b 01       	movw	r12, r22
    2aa0:	7c 01       	movw	r14, r24
    2aa2:	a3 01       	movw	r20, r6
    2aa4:	92 01       	movw	r18, r4
    2aa6:	c5 01       	movw	r24, r10
    2aa8:	b4 01       	movw	r22, r8
    2aaa:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2aae:	9b 01       	movw	r18, r22
    2ab0:	ac 01       	movw	r20, r24
    2ab2:	c7 01       	movw	r24, r14
    2ab4:	b6 01       	movw	r22, r12
    2ab6:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    2aba:	4b 01       	movw	r8, r22
    2abc:	5c 01       	movw	r10, r24
    2abe:	29 85       	ldd	r18, Y+9	; 0x09
    2ac0:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ac2:	4b 85       	ldd	r20, Y+11	; 0x0b
    2ac4:	5c 85       	ldd	r21, Y+12	; 0x0c
    2ac6:	6d 81       	ldd	r22, Y+5	; 0x05
    2ac8:	7e 81       	ldd	r23, Y+6	; 0x06
    2aca:	8f 81       	ldd	r24, Y+7	; 0x07
    2acc:	98 85       	ldd	r25, Y+8	; 0x08
    2ace:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2ad2:	9b 01       	movw	r18, r22
    2ad4:	ac 01       	movw	r20, r24
    2ad6:	c5 01       	movw	r24, r10
    2ad8:	b4 01       	movw	r22, r8
    2ada:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    2ade:	4b 01       	movw	r8, r22
    2ae0:	5c 01       	movw	r10, r24
    2ae2:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ae4:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ae6:	4f 85       	ldd	r20, Y+15	; 0x0f
    2ae8:	58 89       	ldd	r21, Y+16	; 0x10
    2aea:	69 81       	ldd	r22, Y+1	; 0x01
    2aec:	7a 81       	ldd	r23, Y+2	; 0x02
    2aee:	8b 81       	ldd	r24, Y+3	; 0x03
    2af0:	9c 81       	ldd	r25, Y+4	; 0x04
    2af2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2af6:	9b 01       	movw	r18, r22
    2af8:	ac 01       	movw	r20, r24
    2afa:	c5 01       	movw	r24, r10
    2afc:	b4 01       	movw	r22, r8
    2afe:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    2b02:	0e 94 76 08 	call	0x10ec	; 0x10ec <invSqrt>
    2b06:	6b 01       	movw	r12, r22
    2b08:	7c 01       	movw	r14, r24
	q0 *= recipNorm;
    2b0a:	20 91 18 20 	lds	r18, 0x2018	; 0x802018 <q0>
    2b0e:	30 91 19 20 	lds	r19, 0x2019	; 0x802019 <q0+0x1>
    2b12:	40 91 1a 20 	lds	r20, 0x201A	; 0x80201a <q0+0x2>
    2b16:	50 91 1b 20 	lds	r21, 0x201B	; 0x80201b <q0+0x3>
    2b1a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2b1e:	60 93 18 20 	sts	0x2018, r22	; 0x802018 <q0>
    2b22:	70 93 19 20 	sts	0x2019, r23	; 0x802019 <q0+0x1>
    2b26:	80 93 1a 20 	sts	0x201A, r24	; 0x80201a <q0+0x2>
    2b2a:	90 93 1b 20 	sts	0x201B, r25	; 0x80201b <q0+0x3>
	q1 *= recipNorm;
    2b2e:	20 91 67 21 	lds	r18, 0x2167	; 0x802167 <q1>
    2b32:	30 91 68 21 	lds	r19, 0x2168	; 0x802168 <q1+0x1>
    2b36:	40 91 69 21 	lds	r20, 0x2169	; 0x802169 <q1+0x2>
    2b3a:	50 91 6a 21 	lds	r21, 0x216A	; 0x80216a <q1+0x3>
    2b3e:	c7 01       	movw	r24, r14
    2b40:	b6 01       	movw	r22, r12
    2b42:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2b46:	60 93 67 21 	sts	0x2167, r22	; 0x802167 <q1>
    2b4a:	70 93 68 21 	sts	0x2168, r23	; 0x802168 <q1+0x1>
    2b4e:	80 93 69 21 	sts	0x2169, r24	; 0x802169 <q1+0x2>
    2b52:	90 93 6a 21 	sts	0x216A, r25	; 0x80216a <q1+0x3>
	q2 *= recipNorm;
    2b56:	20 91 63 21 	lds	r18, 0x2163	; 0x802163 <q2>
    2b5a:	30 91 64 21 	lds	r19, 0x2164	; 0x802164 <q2+0x1>
    2b5e:	40 91 65 21 	lds	r20, 0x2165	; 0x802165 <q2+0x2>
    2b62:	50 91 66 21 	lds	r21, 0x2166	; 0x802166 <q2+0x3>
    2b66:	c7 01       	movw	r24, r14
    2b68:	b6 01       	movw	r22, r12
    2b6a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2b6e:	60 93 63 21 	sts	0x2163, r22	; 0x802163 <q2>
    2b72:	70 93 64 21 	sts	0x2164, r23	; 0x802164 <q2+0x1>
    2b76:	80 93 65 21 	sts	0x2165, r24	; 0x802165 <q2+0x2>
    2b7a:	90 93 66 21 	sts	0x2166, r25	; 0x802166 <q2+0x3>
	q3 *= recipNorm;
    2b7e:	20 91 5f 21 	lds	r18, 0x215F	; 0x80215f <q3>
    2b82:	30 91 60 21 	lds	r19, 0x2160	; 0x802160 <q3+0x1>
    2b86:	40 91 61 21 	lds	r20, 0x2161	; 0x802161 <q3+0x2>
    2b8a:	50 91 62 21 	lds	r21, 0x2162	; 0x802162 <q3+0x3>
    2b8e:	c7 01       	movw	r24, r14
    2b90:	b6 01       	movw	r22, r12
    2b92:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    2b96:	60 93 5f 21 	sts	0x215F, r22	; 0x80215f <q3>
    2b9a:	70 93 60 21 	sts	0x2160, r23	; 0x802160 <q3+0x1>
    2b9e:	80 93 61 21 	sts	0x2161, r24	; 0x802161 <q3+0x2>
    2ba2:	90 93 62 21 	sts	0x2162, r25	; 0x802162 <q3+0x3>
}
    2ba6:	c8 5a       	subi	r28, 0xA8	; 168
    2ba8:	df 4f       	sbci	r29, 0xFF	; 255
    2baa:	cd bf       	out	0x3d, r28	; 61
    2bac:	de bf       	out	0x3e, r29	; 62
    2bae:	df 91       	pop	r29
    2bb0:	cf 91       	pop	r28
    2bb2:	1f 91       	pop	r17
    2bb4:	0f 91       	pop	r16
    2bb6:	ff 90       	pop	r15
    2bb8:	ef 90       	pop	r14
    2bba:	df 90       	pop	r13
    2bbc:	cf 90       	pop	r12
    2bbe:	bf 90       	pop	r11
    2bc0:	af 90       	pop	r10
    2bc2:	9f 90       	pop	r9
    2bc4:	8f 90       	pop	r8
    2bc6:	7f 90       	pop	r7
    2bc8:	6f 90       	pop	r6
    2bca:	5f 90       	pop	r5
    2bcc:	4f 90       	pop	r4
    2bce:	3f 90       	pop	r3
    2bd0:	2f 90       	pop	r2
    2bd2:	08 95       	ret

00002bd4 <rbu8_init>:
void rbu8_init(RingBufferu8_t* buffer, uint8_t* backing_array, uint16_t backing_array_length)
/*	Call to reset the head and tail variables of a RingBuffer. 
	backing_array is the array that the ring buffer actually stores its data in
	backing_array_length is kind of exactly what it says it is
*/
{
    2bd4:	fc 01       	movw	r30, r24
	buffer->head = 0; //Beginning of array
    2bd6:	12 82       	std	Z+2, r1	; 0x02
    2bd8:	13 82       	std	Z+3, r1	; 0x03
	buffer->tail = 0; //End of array
    2bda:	14 82       	std	Z+4, r1	; 0x04
    2bdc:	15 82       	std	Z+5, r1	; 0x05
	buffer->buffer = backing_array;
    2bde:	66 83       	std	Z+6, r22	; 0x06
    2be0:	77 83       	std	Z+7, r23	; 0x07
	buffer->array_length = backing_array_length;
    2be2:	40 83       	st	Z, r20
    2be4:	51 83       	std	Z+1, r21	; 0x01
    2be6:	08 95       	ret

00002be8 <rbu8_length>:
uint16_t rbu8_length(RingBufferu8_t* buffer)
/*	Returns the number of bytes of data currently stored in the RingBuffer pointed to by its argument
	The return value will always be greater than or equal to 0
	And less than or equal to buffer->array_length
*/
{
    2be8:	fc 01       	movw	r30, r24
	if (buffer->head >= buffer->tail)
    2bea:	82 81       	ldd	r24, Z+2	; 0x02
    2bec:	93 81       	ldd	r25, Z+3	; 0x03
    2bee:	44 81       	ldd	r20, Z+4	; 0x04
    2bf0:	55 81       	ldd	r21, Z+5	; 0x05
    2bf2:	84 17       	cp	r24, r20
    2bf4:	95 07       	cpc	r25, r21
    2bf6:	18 f0       	brcs	.+6      	; 0x2bfe <rbu8_length+0x16>
	//We are not currently wrapped around the end of the buffer, so we are using the space between the head and tail
	{
		return buffer->head - buffer->tail;
    2bf8:	84 1b       	sub	r24, r20
    2bfa:	95 0b       	sbc	r25, r21
    2bfc:	08 95       	ret
	}
	else
	//We have wrapped around the end of the buffer, so subtract the unused space between the head and tail
	{
		return buffer->array_length - (buffer->tail - buffer->head);
    2bfe:	20 81       	ld	r18, Z
    2c00:	31 81       	ldd	r19, Z+1	; 0x01
    2c02:	82 0f       	add	r24, r18
    2c04:	93 1f       	adc	r25, r19
    2c06:	84 1b       	sub	r24, r20
    2c08:	95 0b       	sbc	r25, r21
	}
}
    2c0a:	08 95       	ret

00002c0c <rbu8_read>:
	length - number of bytes to be read
	Return values
	* 0 - success
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
    2c0c:	8f 92       	push	r8
    2c0e:	9f 92       	push	r9
    2c10:	af 92       	push	r10
    2c12:	bf 92       	push	r11
    2c14:	cf 92       	push	r12
    2c16:	df 92       	push	r13
    2c18:	ef 92       	push	r14
    2c1a:	ff 92       	push	r15
    2c1c:	0f 93       	push	r16
    2c1e:	1f 93       	push	r17
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	8c 01       	movw	r16, r24
    2c26:	6a 01       	movw	r12, r20
	uint16_t index = buffer->tail;
    2c28:	dc 01       	movw	r26, r24
    2c2a:	14 96       	adiw	r26, 0x04	; 4
    2c2c:	cd 91       	ld	r28, X+
    2c2e:	dc 91       	ld	r29, X
    2c30:	15 97       	sbiw	r26, 0x05	; 5
    2c32:	e6 2e       	mov	r14, r22
    2c34:	f7 2e       	mov	r15, r23
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
    2c36:	a1 2c       	mov	r10, r1
    2c38:	b1 2c       	mov	r11, r1
    2c3a:	84 2e       	mov	r8, r20
    2c3c:	9d 2c       	mov	r9, r13
    2c3e:	18 c0       	rjmp	.+48     	; 0x2c70 <rbu8_read+0x64>
	{

		dest[i] = buffer->buffer[index];
    2c40:	d8 01       	movw	r26, r16
    2c42:	16 96       	adiw	r26, 0x06	; 6
    2c44:	ed 91       	ld	r30, X+
    2c46:	fc 91       	ld	r31, X
    2c48:	17 97       	sbiw	r26, 0x07	; 7
    2c4a:	ec 0f       	add	r30, r28
    2c4c:	fd 1f       	adc	r31, r29
    2c4e:	80 81       	ld	r24, Z
    2c50:	f7 01       	movw	r30, r14
    2c52:	81 93       	st	Z+, r24
    2c54:	7f 01       	movw	r14, r30
		if (index == buffer->array_length - 1) //Reset if we've hit the end
    2c56:	8d 91       	ld	r24, X+
    2c58:	9c 91       	ld	r25, X
    2c5a:	01 97       	sbiw	r24, 0x01	; 1
    2c5c:	c8 17       	cp	r28, r24
    2c5e:	d9 07       	cpc	r29, r25
    2c60:	11 f0       	breq	.+4      	; 0x2c66 <rbu8_read+0x5a>
		{
			index = 0;
		}
		else
		{
			index++;
    2c62:	21 96       	adiw	r28, 0x01	; 1
    2c64:	02 c0       	rjmp	.+4      	; 0x2c6a <rbu8_read+0x5e>
	{

		dest[i] = buffer->buffer[index];
		if (index == buffer->array_length - 1) //Reset if we've hit the end
		{
			index = 0;
    2c66:	c0 e0       	ldi	r28, 0x00	; 0
    2c68:	d0 e0       	ldi	r29, 0x00	; 0
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
	uint16_t index = buffer->tail;
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
    2c6a:	ff ef       	ldi	r31, 0xFF	; 255
    2c6c:	af 1a       	sub	r10, r31
    2c6e:	bf 0a       	sbc	r11, r31
    2c70:	c8 01       	movw	r24, r16
    2c72:	ba df       	rcall	.-140    	; 0x2be8 <rbu8_length>
    2c74:	9c 01       	movw	r18, r24
    2c76:	c8 16       	cp	r12, r24
    2c78:	d9 06       	cpc	r13, r25
    2c7a:	10 f4       	brcc	.+4      	; 0x2c80 <rbu8_read+0x74>
    2c7c:	28 2d       	mov	r18, r8
    2c7e:	39 2d       	mov	r19, r9
    2c80:	a2 16       	cp	r10, r18
    2c82:	b3 06       	cpc	r11, r19
    2c84:	e8 f2       	brcs	.-70     	; 0x2c40 <rbu8_read+0x34>
    2c86:	21 e0       	ldi	r18, 0x01	; 1
    2c88:	8c 15       	cp	r24, r12
    2c8a:	9d 05       	cpc	r25, r13
    2c8c:	08 f0       	brcs	.+2      	; 0x2c90 <rbu8_read+0x84>
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
	}
	if (length > rbu8_length(buffer))
		return 1;
	else
		return 0;
}
    2c90:	82 2f       	mov	r24, r18
    2c92:	df 91       	pop	r29
    2c94:	cf 91       	pop	r28
    2c96:	1f 91       	pop	r17
    2c98:	0f 91       	pop	r16
    2c9a:	ff 90       	pop	r15
    2c9c:	ef 90       	pop	r14
    2c9e:	df 90       	pop	r13
    2ca0:	cf 90       	pop	r12
    2ca2:	bf 90       	pop	r11
    2ca4:	af 90       	pop	r10
    2ca6:	9f 90       	pop	r9
    2ca8:	8f 90       	pop	r8
    2caa:	08 95       	ret

00002cac <rbu8_delete_oldest>:

void rbu8_delete_oldest(RingBufferu8_t* buffer, uint16_t length)
/*	Deletes data from the ring buffer
	All it really has to do is move buffer->tail up length bytes or until one byte below buffer->head, whichever is lower
*/
{
    2cac:	0f 93       	push	r16
    2cae:	1f 93       	push	r17
    2cb0:	cf 93       	push	r28
    2cb2:	df 93       	push	r29
    2cb4:	ec 01       	movw	r28, r24
	uint16_t move_distance = min(length, rbu8_length(buffer));
    2cb6:	8b 01       	movw	r16, r22
    2cb8:	97 df       	rcall	.-210    	; 0x2be8 <rbu8_length>
    2cba:	9c 01       	movw	r18, r24
    2cbc:	08 17       	cp	r16, r24
    2cbe:	19 07       	cpc	r17, r25
    2cc0:	08 f4       	brcc	.+2      	; 0x2cc4 <rbu8_delete_oldest+0x18>
	if (move_distance >= rbu8_length(buffer))
    2cc2:	98 01       	movw	r18, r16
    2cc4:	28 17       	cp	r18, r24
    2cc6:	39 07       	cpc	r19, r25
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
    2cc8:	68 f0       	brcs	.+26     	; 0x2ce4 <rbu8_delete_oldest+0x38>
    2cca:	8c 81       	ldd	r24, Y+4	; 0x04
    2ccc:	9d 81       	ldd	r25, Y+5	; 0x05
    2cce:	82 0f       	add	r24, r18
    2cd0:	93 1f       	adc	r25, r19
    2cd2:	68 81       	ld	r22, Y
    2cd4:	79 81       	ldd	r23, Y+1	; 0x01
    2cd6:	0e 94 4d 33 	call	0x669a	; 0x669a <__udivmodhi4>
    2cda:	8c 83       	std	Y+4, r24	; 0x04
		buffer->head = buffer->tail;
    2cdc:	9d 83       	std	Y+5, r25	; 0x05
    2cde:	8a 83       	std	Y+2, r24	; 0x02
    2ce0:	9b 83       	std	Y+3, r25	; 0x03
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
    2ce2:	0a c0       	rjmp	.+20     	; 0x2cf8 <rbu8_delete_oldest+0x4c>
    2ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce8:	82 0f       	add	r24, r18
    2cea:	93 1f       	adc	r25, r19
    2cec:	68 81       	ld	r22, Y
    2cee:	79 81       	ldd	r23, Y+1	; 0x01
    2cf0:	0e 94 4d 33 	call	0x669a	; 0x669a <__udivmodhi4>
    2cf4:	8c 83       	std	Y+4, r24	; 0x04
	}
}
    2cf6:	9d 83       	std	Y+5, r25	; 0x05
    2cf8:	df 91       	pop	r29
    2cfa:	cf 91       	pop	r28
    2cfc:	1f 91       	pop	r17
    2cfe:	0f 91       	pop	r16
    2d00:	08 95       	ret

00002d02 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
    2d02:	cf 93       	push	r28
    2d04:	df 93       	push	r29
    2d06:	1f 92       	push	r1
    2d08:	1f 92       	push	r1
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
    2d0e:	8f ef       	ldi	r24, 0xFF	; 255
    2d10:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
    2d14:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
    2d18:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
    2d1c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
    2d20:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
    2d24:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
    2d28:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2d2c:	8f b7       	in	r24, 0x3f	; 63
    2d2e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
    2d30:	f8 94       	cli
	return flags;
    2d32:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
    2d34:	e0 e5       	ldi	r30, 0x50	; 80
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	80 81       	ld	r24, Z
    2d3a:	82 60       	ori	r24, 0x02	; 2
    2d3c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d3e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
    2d40:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
    2d42:	81 ff       	sbrs	r24, 1
    2d44:	fd cf       	rjmp	.-6      	; 0x2d40 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
    2d46:	61 e0       	ldi	r22, 0x01	; 1
    2d48:	80 e4       	ldi	r24, 0x40	; 64
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	38 d2       	rcall	.+1136   	; 0x31be <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2d4e:	8f b7       	in	r24, 0x3f	; 63
    2d50:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    2d52:	f8 94       	cli
	return flags;
    2d54:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
    2d56:	e0 e5       	ldi	r30, 0x50	; 80
    2d58:	f0 e0       	ldi	r31, 0x00	; 0
    2d5a:	80 81       	ld	r24, Z
    2d5c:	8e 7f       	andi	r24, 0xFE	; 254
    2d5e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d60:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	df 91       	pop	r29
    2d68:	cf 91       	pop	r28
    2d6a:	08 95       	ret

00002d6c <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	1f 92       	push	r1
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    2d76:	9f b7       	in	r25, 0x3f	; 63
    2d78:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    2d7a:	f8 94       	cli
	return flags;
    2d7c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    2d7e:	e8 2f       	mov	r30, r24
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	e0 59       	subi	r30, 0x90	; 144
    2d84:	ff 4f       	sbci	r31, 0xFF	; 255
    2d86:	60 95       	com	r22
    2d88:	80 81       	ld	r24, Z
    2d8a:	68 23       	and	r22, r24
    2d8c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    2d8e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    2d90:	0f 90       	pop	r0
    2d92:	df 91       	pop	r29
    2d94:	cf 91       	pop	r28
    2d96:	08 95       	ret

00002d98 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
    2d98:	cf 93       	push	r28
    2d9a:	df 93       	push	r29
    2d9c:	1f 92       	push	r1
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
    2da2:	80 91 4d 25 	lds	r24, 0x254D	; 0x80254d <stdio_base>
    2da6:	90 91 4e 25 	lds	r25, 0x254E	; 0x80254e <stdio_base+0x1>
    2daa:	e0 91 49 25 	lds	r30, 0x2549	; 0x802549 <ptr_get>
    2dae:	f0 91 4a 25 	lds	r31, 0x254A	; 0x80254a <ptr_get+0x1>
    2db2:	be 01       	movw	r22, r28
    2db4:	6f 5f       	subi	r22, 0xFF	; 255
    2db6:	7f 4f       	sbci	r23, 0xFF	; 255
    2db8:	19 95       	eicall
	return c;
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dbc:	08 2e       	mov	r0, r24
    2dbe:	00 0c       	add	r0, r0
    2dc0:	99 0b       	sbc	r25, r25
    2dc2:	0f 90       	pop	r0
    2dc4:	df 91       	pop	r29
    2dc6:	cf 91       	pop	r28
    2dc8:	08 95       	ret

00002dca <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
    2dca:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
    2dcc:	80 91 4d 25 	lds	r24, 0x254D	; 0x80254d <stdio_base>
    2dd0:	90 91 4e 25 	lds	r25, 0x254E	; 0x80254e <stdio_base+0x1>
    2dd4:	e0 91 4b 25 	lds	r30, 0x254B	; 0x80254b <ptr_put>
    2dd8:	f0 91 4c 25 	lds	r31, 0x254C	; 0x80254c <ptr_put+0x1>
    2ddc:	19 95       	eicall
    2dde:	99 23       	and	r25, r25
    2de0:	1c f0       	brlt	.+6      	; 0x2de8 <_write+0x1e>
		return -1;
	}
	return 1;
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
    2de8:	8f ef       	ldi	r24, 0xFF	; 255
    2dea:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
    2dec:	08 95       	ret

00002dee <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
    2dee:	1f 92       	push	r1
    2df0:	0f 92       	push	r0
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	0f 92       	push	r0
    2df6:	11 24       	eor	r1, r1
    2df8:	08 b6       	in	r0, 0x38	; 56
    2dfa:	0f 92       	push	r0
    2dfc:	18 be       	out	0x38, r1	; 56
    2dfe:	09 b6       	in	r0, 0x39	; 57
    2e00:	0f 92       	push	r0
    2e02:	19 be       	out	0x39, r1	; 57
    2e04:	0b b6       	in	r0, 0x3b	; 59
    2e06:	0f 92       	push	r0
    2e08:	1b be       	out	0x3b, r1	; 59
    2e0a:	2f 93       	push	r18
    2e0c:	3f 93       	push	r19
    2e0e:	4f 93       	push	r20
    2e10:	5f 93       	push	r21
    2e12:	6f 93       	push	r22
    2e14:	7f 93       	push	r23
    2e16:	8f 93       	push	r24
    2e18:	9f 93       	push	r25
    2e1a:	af 93       	push	r26
    2e1c:	bf 93       	push	r27
    2e1e:	ef 93       	push	r30
    2e20:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
    2e22:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    2e26:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
    2e2a:	e0 91 51 25 	lds	r30, 0x2551	; 0x802551 <adca_callback>
    2e2e:	f0 91 52 25 	lds	r31, 0x2552	; 0x802552 <adca_callback+0x1>
    2e32:	61 e0       	ldi	r22, 0x01	; 1
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	92 e0       	ldi	r25, 0x02	; 2
    2e38:	19 95       	eicall
}
    2e3a:	ff 91       	pop	r31
    2e3c:	ef 91       	pop	r30
    2e3e:	bf 91       	pop	r27
    2e40:	af 91       	pop	r26
    2e42:	9f 91       	pop	r25
    2e44:	8f 91       	pop	r24
    2e46:	7f 91       	pop	r23
    2e48:	6f 91       	pop	r22
    2e4a:	5f 91       	pop	r21
    2e4c:	4f 91       	pop	r20
    2e4e:	3f 91       	pop	r19
    2e50:	2f 91       	pop	r18
    2e52:	0f 90       	pop	r0
    2e54:	0b be       	out	0x3b, r0	; 59
    2e56:	0f 90       	pop	r0
    2e58:	09 be       	out	0x39, r0	; 57
    2e5a:	0f 90       	pop	r0
    2e5c:	08 be       	out	0x38, r0	; 56
    2e5e:	0f 90       	pop	r0
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	0f 90       	pop	r0
    2e64:	1f 90       	pop	r1
    2e66:	18 95       	reti

00002e68 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
    2e68:	1f 92       	push	r1
    2e6a:	0f 92       	push	r0
    2e6c:	0f b6       	in	r0, 0x3f	; 63
    2e6e:	0f 92       	push	r0
    2e70:	11 24       	eor	r1, r1
    2e72:	08 b6       	in	r0, 0x38	; 56
    2e74:	0f 92       	push	r0
    2e76:	18 be       	out	0x38, r1	; 56
    2e78:	09 b6       	in	r0, 0x39	; 57
    2e7a:	0f 92       	push	r0
    2e7c:	19 be       	out	0x39, r1	; 57
    2e7e:	0b b6       	in	r0, 0x3b	; 59
    2e80:	0f 92       	push	r0
    2e82:	1b be       	out	0x3b, r1	; 59
    2e84:	2f 93       	push	r18
    2e86:	3f 93       	push	r19
    2e88:	4f 93       	push	r20
    2e8a:	5f 93       	push	r21
    2e8c:	6f 93       	push	r22
    2e8e:	7f 93       	push	r23
    2e90:	8f 93       	push	r24
    2e92:	9f 93       	push	r25
    2e94:	af 93       	push	r26
    2e96:	bf 93       	push	r27
    2e98:	ef 93       	push	r30
    2e9a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
    2e9c:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
    2ea0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
    2ea4:	e0 91 51 25 	lds	r30, 0x2551	; 0x802551 <adca_callback>
    2ea8:	f0 91 52 25 	lds	r31, 0x2552	; 0x802552 <adca_callback+0x1>
    2eac:	62 e0       	ldi	r22, 0x02	; 2
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	92 e0       	ldi	r25, 0x02	; 2
    2eb2:	19 95       	eicall
}
    2eb4:	ff 91       	pop	r31
    2eb6:	ef 91       	pop	r30
    2eb8:	bf 91       	pop	r27
    2eba:	af 91       	pop	r26
    2ebc:	9f 91       	pop	r25
    2ebe:	8f 91       	pop	r24
    2ec0:	7f 91       	pop	r23
    2ec2:	6f 91       	pop	r22
    2ec4:	5f 91       	pop	r21
    2ec6:	4f 91       	pop	r20
    2ec8:	3f 91       	pop	r19
    2eca:	2f 91       	pop	r18
    2ecc:	0f 90       	pop	r0
    2ece:	0b be       	out	0x3b, r0	; 59
    2ed0:	0f 90       	pop	r0
    2ed2:	09 be       	out	0x39, r0	; 57
    2ed4:	0f 90       	pop	r0
    2ed6:	08 be       	out	0x38, r0	; 56
    2ed8:	0f 90       	pop	r0
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	0f 90       	pop	r0
    2ede:	1f 90       	pop	r1
    2ee0:	18 95       	reti

00002ee2 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
    2ee2:	1f 92       	push	r1
    2ee4:	0f 92       	push	r0
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	0f 92       	push	r0
    2eea:	11 24       	eor	r1, r1
    2eec:	08 b6       	in	r0, 0x38	; 56
    2eee:	0f 92       	push	r0
    2ef0:	18 be       	out	0x38, r1	; 56
    2ef2:	09 b6       	in	r0, 0x39	; 57
    2ef4:	0f 92       	push	r0
    2ef6:	19 be       	out	0x39, r1	; 57
    2ef8:	0b b6       	in	r0, 0x3b	; 59
    2efa:	0f 92       	push	r0
    2efc:	1b be       	out	0x3b, r1	; 59
    2efe:	2f 93       	push	r18
    2f00:	3f 93       	push	r19
    2f02:	4f 93       	push	r20
    2f04:	5f 93       	push	r21
    2f06:	6f 93       	push	r22
    2f08:	7f 93       	push	r23
    2f0a:	8f 93       	push	r24
    2f0c:	9f 93       	push	r25
    2f0e:	af 93       	push	r26
    2f10:	bf 93       	push	r27
    2f12:	ef 93       	push	r30
    2f14:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
    2f16:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
    2f1a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
    2f1e:	e0 91 51 25 	lds	r30, 0x2551	; 0x802551 <adca_callback>
    2f22:	f0 91 52 25 	lds	r31, 0x2552	; 0x802552 <adca_callback+0x1>
    2f26:	64 e0       	ldi	r22, 0x04	; 4
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	92 e0       	ldi	r25, 0x02	; 2
    2f2c:	19 95       	eicall
}
    2f2e:	ff 91       	pop	r31
    2f30:	ef 91       	pop	r30
    2f32:	bf 91       	pop	r27
    2f34:	af 91       	pop	r26
    2f36:	9f 91       	pop	r25
    2f38:	8f 91       	pop	r24
    2f3a:	7f 91       	pop	r23
    2f3c:	6f 91       	pop	r22
    2f3e:	5f 91       	pop	r21
    2f40:	4f 91       	pop	r20
    2f42:	3f 91       	pop	r19
    2f44:	2f 91       	pop	r18
    2f46:	0f 90       	pop	r0
    2f48:	0b be       	out	0x3b, r0	; 59
    2f4a:	0f 90       	pop	r0
    2f4c:	09 be       	out	0x39, r0	; 57
    2f4e:	0f 90       	pop	r0
    2f50:	08 be       	out	0x38, r0	; 56
    2f52:	0f 90       	pop	r0
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	0f 90       	pop	r0
    2f58:	1f 90       	pop	r1
    2f5a:	18 95       	reti

00002f5c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
    2f5c:	1f 92       	push	r1
    2f5e:	0f 92       	push	r0
    2f60:	0f b6       	in	r0, 0x3f	; 63
    2f62:	0f 92       	push	r0
    2f64:	11 24       	eor	r1, r1
    2f66:	08 b6       	in	r0, 0x38	; 56
    2f68:	0f 92       	push	r0
    2f6a:	18 be       	out	0x38, r1	; 56
    2f6c:	09 b6       	in	r0, 0x39	; 57
    2f6e:	0f 92       	push	r0
    2f70:	19 be       	out	0x39, r1	; 57
    2f72:	0b b6       	in	r0, 0x3b	; 59
    2f74:	0f 92       	push	r0
    2f76:	1b be       	out	0x3b, r1	; 59
    2f78:	2f 93       	push	r18
    2f7a:	3f 93       	push	r19
    2f7c:	4f 93       	push	r20
    2f7e:	5f 93       	push	r21
    2f80:	6f 93       	push	r22
    2f82:	7f 93       	push	r23
    2f84:	8f 93       	push	r24
    2f86:	9f 93       	push	r25
    2f88:	af 93       	push	r26
    2f8a:	bf 93       	push	r27
    2f8c:	ef 93       	push	r30
    2f8e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
    2f90:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
    2f94:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
    2f98:	e0 91 51 25 	lds	r30, 0x2551	; 0x802551 <adca_callback>
    2f9c:	f0 91 52 25 	lds	r31, 0x2552	; 0x802552 <adca_callback+0x1>
    2fa0:	68 e0       	ldi	r22, 0x08	; 8
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	92 e0       	ldi	r25, 0x02	; 2
    2fa6:	19 95       	eicall
}
    2fa8:	ff 91       	pop	r31
    2faa:	ef 91       	pop	r30
    2fac:	bf 91       	pop	r27
    2fae:	af 91       	pop	r26
    2fb0:	9f 91       	pop	r25
    2fb2:	8f 91       	pop	r24
    2fb4:	7f 91       	pop	r23
    2fb6:	6f 91       	pop	r22
    2fb8:	5f 91       	pop	r21
    2fba:	4f 91       	pop	r20
    2fbc:	3f 91       	pop	r19
    2fbe:	2f 91       	pop	r18
    2fc0:	0f 90       	pop	r0
    2fc2:	0b be       	out	0x3b, r0	; 59
    2fc4:	0f 90       	pop	r0
    2fc6:	09 be       	out	0x39, r0	; 57
    2fc8:	0f 90       	pop	r0
    2fca:	08 be       	out	0x38, r0	; 56
    2fcc:	0f 90       	pop	r0
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	0f 90       	pop	r0
    2fd2:	1f 90       	pop	r1
    2fd4:	18 95       	reti

00002fd6 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
    2fd6:	1f 92       	push	r1
    2fd8:	0f 92       	push	r0
    2fda:	0f b6       	in	r0, 0x3f	; 63
    2fdc:	0f 92       	push	r0
    2fde:	11 24       	eor	r1, r1
    2fe0:	08 b6       	in	r0, 0x38	; 56
    2fe2:	0f 92       	push	r0
    2fe4:	18 be       	out	0x38, r1	; 56
    2fe6:	09 b6       	in	r0, 0x39	; 57
    2fe8:	0f 92       	push	r0
    2fea:	19 be       	out	0x39, r1	; 57
    2fec:	0b b6       	in	r0, 0x3b	; 59
    2fee:	0f 92       	push	r0
    2ff0:	1b be       	out	0x3b, r1	; 59
    2ff2:	2f 93       	push	r18
    2ff4:	3f 93       	push	r19
    2ff6:	4f 93       	push	r20
    2ff8:	5f 93       	push	r21
    2ffa:	6f 93       	push	r22
    2ffc:	7f 93       	push	r23
    2ffe:	8f 93       	push	r24
    3000:	9f 93       	push	r25
    3002:	af 93       	push	r26
    3004:	bf 93       	push	r27
    3006:	ef 93       	push	r30
    3008:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
    300a:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
    300e:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
    3012:	e0 91 4f 25 	lds	r30, 0x254F	; 0x80254f <adcb_callback>
    3016:	f0 91 50 25 	lds	r31, 0x2550	; 0x802550 <adcb_callback+0x1>
    301a:	61 e0       	ldi	r22, 0x01	; 1
    301c:	80 e4       	ldi	r24, 0x40	; 64
    301e:	92 e0       	ldi	r25, 0x02	; 2
    3020:	19 95       	eicall
}
    3022:	ff 91       	pop	r31
    3024:	ef 91       	pop	r30
    3026:	bf 91       	pop	r27
    3028:	af 91       	pop	r26
    302a:	9f 91       	pop	r25
    302c:	8f 91       	pop	r24
    302e:	7f 91       	pop	r23
    3030:	6f 91       	pop	r22
    3032:	5f 91       	pop	r21
    3034:	4f 91       	pop	r20
    3036:	3f 91       	pop	r19
    3038:	2f 91       	pop	r18
    303a:	0f 90       	pop	r0
    303c:	0b be       	out	0x3b, r0	; 59
    303e:	0f 90       	pop	r0
    3040:	09 be       	out	0x39, r0	; 57
    3042:	0f 90       	pop	r0
    3044:	08 be       	out	0x38, r0	; 56
    3046:	0f 90       	pop	r0
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	0f 90       	pop	r0
    304c:	1f 90       	pop	r1
    304e:	18 95       	reti

00003050 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
    3050:	1f 92       	push	r1
    3052:	0f 92       	push	r0
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	0f 92       	push	r0
    3058:	11 24       	eor	r1, r1
    305a:	08 b6       	in	r0, 0x38	; 56
    305c:	0f 92       	push	r0
    305e:	18 be       	out	0x38, r1	; 56
    3060:	09 b6       	in	r0, 0x39	; 57
    3062:	0f 92       	push	r0
    3064:	19 be       	out	0x39, r1	; 57
    3066:	0b b6       	in	r0, 0x3b	; 59
    3068:	0f 92       	push	r0
    306a:	1b be       	out	0x3b, r1	; 59
    306c:	2f 93       	push	r18
    306e:	3f 93       	push	r19
    3070:	4f 93       	push	r20
    3072:	5f 93       	push	r21
    3074:	6f 93       	push	r22
    3076:	7f 93       	push	r23
    3078:	8f 93       	push	r24
    307a:	9f 93       	push	r25
    307c:	af 93       	push	r26
    307e:	bf 93       	push	r27
    3080:	ef 93       	push	r30
    3082:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
    3084:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
    3088:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
    308c:	e0 91 4f 25 	lds	r30, 0x254F	; 0x80254f <adcb_callback>
    3090:	f0 91 50 25 	lds	r31, 0x2550	; 0x802550 <adcb_callback+0x1>
    3094:	62 e0       	ldi	r22, 0x02	; 2
    3096:	80 e4       	ldi	r24, 0x40	; 64
    3098:	92 e0       	ldi	r25, 0x02	; 2
    309a:	19 95       	eicall
}
    309c:	ff 91       	pop	r31
    309e:	ef 91       	pop	r30
    30a0:	bf 91       	pop	r27
    30a2:	af 91       	pop	r26
    30a4:	9f 91       	pop	r25
    30a6:	8f 91       	pop	r24
    30a8:	7f 91       	pop	r23
    30aa:	6f 91       	pop	r22
    30ac:	5f 91       	pop	r21
    30ae:	4f 91       	pop	r20
    30b0:	3f 91       	pop	r19
    30b2:	2f 91       	pop	r18
    30b4:	0f 90       	pop	r0
    30b6:	0b be       	out	0x3b, r0	; 59
    30b8:	0f 90       	pop	r0
    30ba:	09 be       	out	0x39, r0	; 57
    30bc:	0f 90       	pop	r0
    30be:	08 be       	out	0x38, r0	; 56
    30c0:	0f 90       	pop	r0
    30c2:	0f be       	out	0x3f, r0	; 63
    30c4:	0f 90       	pop	r0
    30c6:	1f 90       	pop	r1
    30c8:	18 95       	reti

000030ca <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
    30ca:	1f 92       	push	r1
    30cc:	0f 92       	push	r0
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	0f 92       	push	r0
    30d2:	11 24       	eor	r1, r1
    30d4:	08 b6       	in	r0, 0x38	; 56
    30d6:	0f 92       	push	r0
    30d8:	18 be       	out	0x38, r1	; 56
    30da:	09 b6       	in	r0, 0x39	; 57
    30dc:	0f 92       	push	r0
    30de:	19 be       	out	0x39, r1	; 57
    30e0:	0b b6       	in	r0, 0x3b	; 59
    30e2:	0f 92       	push	r0
    30e4:	1b be       	out	0x3b, r1	; 59
    30e6:	2f 93       	push	r18
    30e8:	3f 93       	push	r19
    30ea:	4f 93       	push	r20
    30ec:	5f 93       	push	r21
    30ee:	6f 93       	push	r22
    30f0:	7f 93       	push	r23
    30f2:	8f 93       	push	r24
    30f4:	9f 93       	push	r25
    30f6:	af 93       	push	r26
    30f8:	bf 93       	push	r27
    30fa:	ef 93       	push	r30
    30fc:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
    30fe:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
    3102:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
    3106:	e0 91 4f 25 	lds	r30, 0x254F	; 0x80254f <adcb_callback>
    310a:	f0 91 50 25 	lds	r31, 0x2550	; 0x802550 <adcb_callback+0x1>
    310e:	64 e0       	ldi	r22, 0x04	; 4
    3110:	80 e4       	ldi	r24, 0x40	; 64
    3112:	92 e0       	ldi	r25, 0x02	; 2
    3114:	19 95       	eicall
}
    3116:	ff 91       	pop	r31
    3118:	ef 91       	pop	r30
    311a:	bf 91       	pop	r27
    311c:	af 91       	pop	r26
    311e:	9f 91       	pop	r25
    3120:	8f 91       	pop	r24
    3122:	7f 91       	pop	r23
    3124:	6f 91       	pop	r22
    3126:	5f 91       	pop	r21
    3128:	4f 91       	pop	r20
    312a:	3f 91       	pop	r19
    312c:	2f 91       	pop	r18
    312e:	0f 90       	pop	r0
    3130:	0b be       	out	0x3b, r0	; 59
    3132:	0f 90       	pop	r0
    3134:	09 be       	out	0x39, r0	; 57
    3136:	0f 90       	pop	r0
    3138:	08 be       	out	0x38, r0	; 56
    313a:	0f 90       	pop	r0
    313c:	0f be       	out	0x3f, r0	; 63
    313e:	0f 90       	pop	r0
    3140:	1f 90       	pop	r1
    3142:	18 95       	reti

00003144 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
    3144:	1f 92       	push	r1
    3146:	0f 92       	push	r0
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	0f 92       	push	r0
    314c:	11 24       	eor	r1, r1
    314e:	08 b6       	in	r0, 0x38	; 56
    3150:	0f 92       	push	r0
    3152:	18 be       	out	0x38, r1	; 56
    3154:	09 b6       	in	r0, 0x39	; 57
    3156:	0f 92       	push	r0
    3158:	19 be       	out	0x39, r1	; 57
    315a:	0b b6       	in	r0, 0x3b	; 59
    315c:	0f 92       	push	r0
    315e:	1b be       	out	0x3b, r1	; 59
    3160:	2f 93       	push	r18
    3162:	3f 93       	push	r19
    3164:	4f 93       	push	r20
    3166:	5f 93       	push	r21
    3168:	6f 93       	push	r22
    316a:	7f 93       	push	r23
    316c:	8f 93       	push	r24
    316e:	9f 93       	push	r25
    3170:	af 93       	push	r26
    3172:	bf 93       	push	r27
    3174:	ef 93       	push	r30
    3176:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
    3178:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
    317c:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
    3180:	e0 91 4f 25 	lds	r30, 0x254F	; 0x80254f <adcb_callback>
    3184:	f0 91 50 25 	lds	r31, 0x2550	; 0x802550 <adcb_callback+0x1>
    3188:	68 e0       	ldi	r22, 0x08	; 8
    318a:	80 e4       	ldi	r24, 0x40	; 64
    318c:	92 e0       	ldi	r25, 0x02	; 2
    318e:	19 95       	eicall
}
    3190:	ff 91       	pop	r31
    3192:	ef 91       	pop	r30
    3194:	bf 91       	pop	r27
    3196:	af 91       	pop	r26
    3198:	9f 91       	pop	r25
    319a:	8f 91       	pop	r24
    319c:	7f 91       	pop	r23
    319e:	6f 91       	pop	r22
    31a0:	5f 91       	pop	r21
    31a2:	4f 91       	pop	r20
    31a4:	3f 91       	pop	r19
    31a6:	2f 91       	pop	r18
    31a8:	0f 90       	pop	r0
    31aa:	0b be       	out	0x3b, r0	; 59
    31ac:	0f 90       	pop	r0
    31ae:	09 be       	out	0x39, r0	; 57
    31b0:	0f 90       	pop	r0
    31b2:	08 be       	out	0x38, r0	; 56
    31b4:	0f 90       	pop	r0
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	0f 90       	pop	r0
    31ba:	1f 90       	pop	r1
    31bc:	18 95       	reti

000031be <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    31be:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    31c0:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    31c2:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    31c4:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    31c6:	60 83       	st	Z, r22
	ret                             // Return to caller
    31c8:	08 95       	ret

000031ca <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
    31ca:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
    31ce:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
    31d0:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
    31d2:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
    31d6:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
    31d8:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
    31dc:	08 95       	ret

000031de <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    31de:	fc 01       	movw	r30, r24
    31e0:	91 81       	ldd	r25, Z+1	; 0x01
    31e2:	95 ff       	sbrs	r25, 5
    31e4:	fd cf       	rjmp	.-6      	; 0x31e0 <usart_putchar+0x2>
    31e6:	60 83       	st	Z, r22
    31e8:	80 e0       	ldi	r24, 0x00	; 0
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	08 95       	ret

000031ee <usart_getchar>:
    31ee:	fc 01       	movw	r30, r24
    31f0:	91 81       	ldd	r25, Z+1	; 0x01
    31f2:	99 23       	and	r25, r25
    31f4:	ec f7       	brge	.-6      	; 0x31f0 <usart_getchar+0x2>
    31f6:	80 81       	ld	r24, Z
    31f8:	08 95       	ret

000031fa <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    31fa:	4f 92       	push	r4
    31fc:	5f 92       	push	r5
    31fe:	6f 92       	push	r6
    3200:	7f 92       	push	r7
    3202:	8f 92       	push	r8
    3204:	9f 92       	push	r9
    3206:	af 92       	push	r10
    3208:	bf 92       	push	r11
    320a:	ef 92       	push	r14
    320c:	ff 92       	push	r15
    320e:	0f 93       	push	r16
    3210:	1f 93       	push	r17
    3212:	cf 93       	push	r28
    3214:	7c 01       	movw	r14, r24
    3216:	4a 01       	movw	r8, r20
    3218:	5b 01       	movw	r10, r22
    321a:	28 01       	movw	r4, r16
    321c:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    321e:	fc 01       	movw	r30, r24
    3220:	84 81       	ldd	r24, Z+4	; 0x04
    3222:	82 ff       	sbrs	r24, 2
    3224:	16 c0       	rjmp	.+44     	; 0x3252 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    3226:	d9 01       	movw	r26, r18
    3228:	c8 01       	movw	r24, r16
    322a:	68 94       	set
    322c:	12 f8       	bld	r1, 2
    322e:	b6 95       	lsr	r27
    3230:	a7 95       	ror	r26
    3232:	97 95       	ror	r25
    3234:	87 95       	ror	r24
    3236:	16 94       	lsr	r1
    3238:	d1 f7       	brne	.-12     	; 0x322e <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    323a:	b9 01       	movw	r22, r18
    323c:	a8 01       	movw	r20, r16
    323e:	03 2e       	mov	r0, r19
    3240:	36 e1       	ldi	r19, 0x16	; 22
    3242:	76 95       	lsr	r23
    3244:	67 95       	ror	r22
    3246:	57 95       	ror	r21
    3248:	47 95       	ror	r20
    324a:	3a 95       	dec	r19
    324c:	d1 f7       	brne	.-12     	; 0x3242 <usart_set_baudrate+0x48>
    324e:	30 2d       	mov	r19, r0
    3250:	15 c0       	rjmp	.+42     	; 0x327c <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    3252:	d9 01       	movw	r26, r18
    3254:	c8 01       	movw	r24, r16
    3256:	68 94       	set
    3258:	13 f8       	bld	r1, 3
    325a:	b6 95       	lsr	r27
    325c:	a7 95       	ror	r26
    325e:	97 95       	ror	r25
    3260:	87 95       	ror	r24
    3262:	16 94       	lsr	r1
    3264:	d1 f7       	brne	.-12     	; 0x325a <usart_set_baudrate+0x60>
		min_rate /= 2;
    3266:	b9 01       	movw	r22, r18
    3268:	a8 01       	movw	r20, r16
    326a:	03 2e       	mov	r0, r19
    326c:	37 e1       	ldi	r19, 0x17	; 23
    326e:	76 95       	lsr	r23
    3270:	67 95       	ror	r22
    3272:	57 95       	ror	r21
    3274:	47 95       	ror	r20
    3276:	3a 95       	dec	r19
    3278:	d1 f7       	brne	.-12     	; 0x326e <usart_set_baudrate+0x74>
    327a:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    327c:	88 15       	cp	r24, r8
    327e:	99 05       	cpc	r25, r9
    3280:	aa 05       	cpc	r26, r10
    3282:	bb 05       	cpc	r27, r11
    3284:	08 f4       	brcc	.+2      	; 0x3288 <usart_set_baudrate+0x8e>
    3286:	a6 c0       	rjmp	.+332    	; 0x33d4 <usart_set_baudrate+0x1da>
    3288:	84 16       	cp	r8, r20
    328a:	95 06       	cpc	r9, r21
    328c:	a6 06       	cpc	r10, r22
    328e:	b7 06       	cpc	r11, r23
    3290:	08 f4       	brcc	.+2      	; 0x3294 <usart_set_baudrate+0x9a>
    3292:	a2 c0       	rjmp	.+324    	; 0x33d8 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    3294:	f7 01       	movw	r30, r14
    3296:	84 81       	ldd	r24, Z+4	; 0x04
    3298:	82 fd       	sbrc	r24, 2
    329a:	04 c0       	rjmp	.+8      	; 0x32a4 <usart_set_baudrate+0xaa>
		baud *= 2;
    329c:	88 0c       	add	r8, r8
    329e:	99 1c       	adc	r9, r9
    32a0:	aa 1c       	adc	r10, r10
    32a2:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    32a4:	c3 01       	movw	r24, r6
    32a6:	b2 01       	movw	r22, r4
    32a8:	a5 01       	movw	r20, r10
    32aa:	94 01       	movw	r18, r8
    32ac:	0e 94 61 33 	call	0x66c2	; 0x66c2 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    32b0:	2f 3f       	cpi	r18, 0xFF	; 255
    32b2:	31 05       	cpc	r19, r1
    32b4:	41 05       	cpc	r20, r1
    32b6:	51 05       	cpc	r21, r1
    32b8:	08 f4       	brcc	.+2      	; 0x32bc <usart_set_baudrate+0xc2>
    32ba:	90 c0       	rjmp	.+288    	; 0x33dc <usart_set_baudrate+0x1e2>
    32bc:	8f ef       	ldi	r24, 0xFF	; 255
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	a0 e0       	ldi	r26, 0x00	; 0
    32c2:	b0 e0       	ldi	r27, 0x00	; 0
    32c4:	c9 ef       	ldi	r28, 0xF9	; 249
    32c6:	05 c0       	rjmp	.+10     	; 0x32d2 <usart_set_baudrate+0xd8>
    32c8:	28 17       	cp	r18, r24
    32ca:	39 07       	cpc	r19, r25
    32cc:	4a 07       	cpc	r20, r26
    32ce:	5b 07       	cpc	r21, r27
    32d0:	58 f0       	brcs	.+22     	; 0x32e8 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    32d2:	88 0f       	add	r24, r24
    32d4:	99 1f       	adc	r25, r25
    32d6:	aa 1f       	adc	r26, r26
    32d8:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    32da:	cd 3f       	cpi	r28, 0xFD	; 253
    32dc:	0c f4       	brge	.+2      	; 0x32e0 <usart_set_baudrate+0xe6>
			limit |= 1;
    32de:	81 60       	ori	r24, 0x01	; 1
    32e0:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    32e2:	c7 30       	cpi	r28, 0x07	; 7
    32e4:	89 f7       	brne	.-30     	; 0x32c8 <usart_set_baudrate+0xce>
    32e6:	4f c0       	rjmp	.+158    	; 0x3386 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    32e8:	cc 23       	and	r28, r28
    32ea:	0c f0       	brlt	.+2      	; 0x32ee <usart_set_baudrate+0xf4>
    32ec:	4c c0       	rjmp	.+152    	; 0x3386 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    32ee:	d5 01       	movw	r26, r10
    32f0:	c4 01       	movw	r24, r8
    32f2:	88 0f       	add	r24, r24
    32f4:	99 1f       	adc	r25, r25
    32f6:	aa 1f       	adc	r26, r26
    32f8:	bb 1f       	adc	r27, r27
    32fa:	88 0f       	add	r24, r24
    32fc:	99 1f       	adc	r25, r25
    32fe:	aa 1f       	adc	r26, r26
    3300:	bb 1f       	adc	r27, r27
    3302:	88 0f       	add	r24, r24
    3304:	99 1f       	adc	r25, r25
    3306:	aa 1f       	adc	r26, r26
    3308:	bb 1f       	adc	r27, r27
    330a:	48 1a       	sub	r4, r24
    330c:	59 0a       	sbc	r5, r25
    330e:	6a 0a       	sbc	r6, r26
    3310:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    3312:	ce 3f       	cpi	r28, 0xFE	; 254
    3314:	f4 f4       	brge	.+60     	; 0x3352 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    3316:	8d ef       	ldi	r24, 0xFD	; 253
    3318:	9f ef       	ldi	r25, 0xFF	; 255
    331a:	8c 1b       	sub	r24, r28
    331c:	91 09       	sbc	r25, r1
    331e:	c7 fd       	sbrc	r28, 7
    3320:	93 95       	inc	r25
    3322:	04 c0       	rjmp	.+8      	; 0x332c <usart_set_baudrate+0x132>
    3324:	44 0c       	add	r4, r4
    3326:	55 1c       	adc	r5, r5
    3328:	66 1c       	adc	r6, r6
    332a:	77 1c       	adc	r7, r7
    332c:	8a 95       	dec	r24
    332e:	d2 f7       	brpl	.-12     	; 0x3324 <usart_set_baudrate+0x12a>
    3330:	d5 01       	movw	r26, r10
    3332:	c4 01       	movw	r24, r8
    3334:	b6 95       	lsr	r27
    3336:	a7 95       	ror	r26
    3338:	97 95       	ror	r25
    333a:	87 95       	ror	r24
    333c:	bc 01       	movw	r22, r24
    333e:	cd 01       	movw	r24, r26
    3340:	64 0d       	add	r22, r4
    3342:	75 1d       	adc	r23, r5
    3344:	86 1d       	adc	r24, r6
    3346:	97 1d       	adc	r25, r7
    3348:	a5 01       	movw	r20, r10
    334a:	94 01       	movw	r18, r8
    334c:	0e 94 61 33 	call	0x66c2	; 0x66c2 <__udivmodsi4>
    3350:	37 c0       	rjmp	.+110    	; 0x33c0 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    3352:	83 e0       	ldi	r24, 0x03	; 3
    3354:	8c 0f       	add	r24, r28
    3356:	a5 01       	movw	r20, r10
    3358:	94 01       	movw	r18, r8
    335a:	04 c0       	rjmp	.+8      	; 0x3364 <usart_set_baudrate+0x16a>
    335c:	22 0f       	add	r18, r18
    335e:	33 1f       	adc	r19, r19
    3360:	44 1f       	adc	r20, r20
    3362:	55 1f       	adc	r21, r21
    3364:	8a 95       	dec	r24
    3366:	d2 f7       	brpl	.-12     	; 0x335c <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    3368:	da 01       	movw	r26, r20
    336a:	c9 01       	movw	r24, r18
    336c:	b6 95       	lsr	r27
    336e:	a7 95       	ror	r26
    3370:	97 95       	ror	r25
    3372:	87 95       	ror	r24
    3374:	bc 01       	movw	r22, r24
    3376:	cd 01       	movw	r24, r26
    3378:	64 0d       	add	r22, r4
    337a:	75 1d       	adc	r23, r5
    337c:	86 1d       	adc	r24, r6
    337e:	97 1d       	adc	r25, r7
    3380:	0e 94 61 33 	call	0x66c2	; 0x66c2 <__udivmodsi4>
    3384:	1d c0       	rjmp	.+58     	; 0x33c0 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    3386:	83 e0       	ldi	r24, 0x03	; 3
    3388:	8c 0f       	add	r24, r28
    338a:	a5 01       	movw	r20, r10
    338c:	94 01       	movw	r18, r8
    338e:	04 c0       	rjmp	.+8      	; 0x3398 <usart_set_baudrate+0x19e>
    3390:	22 0f       	add	r18, r18
    3392:	33 1f       	adc	r19, r19
    3394:	44 1f       	adc	r20, r20
    3396:	55 1f       	adc	r21, r21
    3398:	8a 95       	dec	r24
    339a:	d2 f7       	brpl	.-12     	; 0x3390 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    339c:	da 01       	movw	r26, r20
    339e:	c9 01       	movw	r24, r18
    33a0:	b6 95       	lsr	r27
    33a2:	a7 95       	ror	r26
    33a4:	97 95       	ror	r25
    33a6:	87 95       	ror	r24
    33a8:	bc 01       	movw	r22, r24
    33aa:	cd 01       	movw	r24, r26
    33ac:	64 0d       	add	r22, r4
    33ae:	75 1d       	adc	r23, r5
    33b0:	86 1d       	adc	r24, r6
    33b2:	97 1d       	adc	r25, r7
    33b4:	0e 94 61 33 	call	0x66c2	; 0x66c2 <__udivmodsi4>
    33b8:	21 50       	subi	r18, 0x01	; 1
    33ba:	31 09       	sbc	r19, r1
    33bc:	41 09       	sbc	r20, r1
    33be:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    33c0:	83 2f       	mov	r24, r19
    33c2:	8f 70       	andi	r24, 0x0F	; 15
    33c4:	c2 95       	swap	r28
    33c6:	c0 7f       	andi	r28, 0xF0	; 240
    33c8:	c8 2b       	or	r28, r24
    33ca:	f7 01       	movw	r30, r14
    33cc:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    33ce:	26 83       	std	Z+6, r18	; 0x06

	return true;
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	18 c0       	rjmp	.+48     	; 0x3404 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	16 c0       	rjmp	.+44     	; 0x3404 <usart_set_baudrate+0x20a>
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	14 c0       	rjmp	.+40     	; 0x3404 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    33dc:	d5 01       	movw	r26, r10
    33de:	c4 01       	movw	r24, r8
    33e0:	88 0f       	add	r24, r24
    33e2:	99 1f       	adc	r25, r25
    33e4:	aa 1f       	adc	r26, r26
    33e6:	bb 1f       	adc	r27, r27
    33e8:	88 0f       	add	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	aa 1f       	adc	r26, r26
    33ee:	bb 1f       	adc	r27, r27
    33f0:	88 0f       	add	r24, r24
    33f2:	99 1f       	adc	r25, r25
    33f4:	aa 1f       	adc	r26, r26
    33f6:	bb 1f       	adc	r27, r27
    33f8:	48 1a       	sub	r4, r24
    33fa:	59 0a       	sbc	r5, r25
    33fc:	6a 0a       	sbc	r6, r26
    33fe:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    3400:	c9 ef       	ldi	r28, 0xF9	; 249
    3402:	89 cf       	rjmp	.-238    	; 0x3316 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    3404:	cf 91       	pop	r28
    3406:	1f 91       	pop	r17
    3408:	0f 91       	pop	r16
    340a:	ff 90       	pop	r15
    340c:	ef 90       	pop	r14
    340e:	bf 90       	pop	r11
    3410:	af 90       	pop	r10
    3412:	9f 90       	pop	r9
    3414:	8f 90       	pop	r8
    3416:	7f 90       	pop	r7
    3418:	6f 90       	pop	r6
    341a:	5f 90       	pop	r5
    341c:	4f 90       	pop	r4
    341e:	08 95       	ret

00003420 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    3420:	0f 93       	push	r16
    3422:	1f 93       	push	r17
    3424:	cf 93       	push	r28
    3426:	df 93       	push	r29
    3428:	ec 01       	movw	r28, r24
    342a:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    342c:	00 97       	sbiw	r24, 0x00	; 0
    342e:	09 f4       	brne	.+2      	; 0x3432 <usart_init_rs232+0x12>
    3430:	36 c1       	rjmp	.+620    	; 0x369e <usart_init_rs232+0x27e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    3432:	80 3c       	cpi	r24, 0xC0	; 192
    3434:	91 05       	cpc	r25, r1
    3436:	21 f4       	brne	.+8      	; 0x3440 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    3438:	60 e1       	ldi	r22, 0x10	; 16
    343a:	80 e0       	ldi	r24, 0x00	; 0
    343c:	97 dc       	rcall	.-1746   	; 0x2d6c <sysclk_enable_module>
    343e:	2f c1       	rjmp	.+606    	; 0x369e <usart_init_rs232+0x27e>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    3440:	c0 34       	cpi	r28, 0x40	; 64
    3442:	84 e0       	ldi	r24, 0x04	; 4
    3444:	d8 07       	cpc	r29, r24
    3446:	21 f4       	brne	.+8      	; 0x3450 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    3448:	68 e0       	ldi	r22, 0x08	; 8
    344a:	80 e0       	ldi	r24, 0x00	; 0
    344c:	8f dc       	rcall	.-1762   	; 0x2d6c <sysclk_enable_module>
    344e:	27 c1       	rjmp	.+590    	; 0x369e <usart_init_rs232+0x27e>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    3450:	c1 15       	cp	r28, r1
    3452:	e4 e0       	ldi	r30, 0x04	; 4
    3454:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    3456:	21 f4       	brne	.+8      	; 0x3460 <usart_init_rs232+0x40>
    3458:	64 e0       	ldi	r22, 0x04	; 4
    345a:	80 e0       	ldi	r24, 0x00	; 0
    345c:	87 dc       	rcall	.-1778   	; 0x2d6c <sysclk_enable_module>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    345e:	1f c1       	rjmp	.+574    	; 0x369e <usart_init_rs232+0x27e>
    3460:	c0 38       	cpi	r28, 0x80	; 128
    3462:	f1 e0       	ldi	r31, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    3464:	df 07       	cpc	r29, r31
    3466:	21 f4       	brne	.+8      	; 0x3470 <usart_init_rs232+0x50>
    3468:	62 e0       	ldi	r22, 0x02	; 2
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	7f dc       	rcall	.-1794   	; 0x2d6c <sysclk_enable_module>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    346e:	17 c1       	rjmp	.+558    	; 0x369e <usart_init_rs232+0x27e>
    3470:	c1 15       	cp	r28, r1
    3472:	81 e0       	ldi	r24, 0x01	; 1
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    3474:	d8 07       	cpc	r29, r24
    3476:	21 f4       	brne	.+8      	; 0x3480 <usart_init_rs232+0x60>
    3478:	61 e0       	ldi	r22, 0x01	; 1
    347a:	80 e0       	ldi	r24, 0x00	; 0
    347c:	77 dc       	rcall	.-1810   	; 0x2d6c <sysclk_enable_module>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    347e:	0f c1       	rjmp	.+542    	; 0x369e <usart_init_rs232+0x27e>
    3480:	c0 38       	cpi	r28, 0x80	; 128
    3482:	e3 e0       	ldi	r30, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    3484:	de 07       	cpc	r29, r30
    3486:	21 f4       	brne	.+8      	; 0x3490 <usart_init_rs232+0x70>
    3488:	61 e0       	ldi	r22, 0x01	; 1
    348a:	81 e0       	ldi	r24, 0x01	; 1
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    348c:	6f dc       	rcall	.-1826   	; 0x2d6c <sysclk_enable_module>
    348e:	07 c1       	rjmp	.+526    	; 0x369e <usart_init_rs232+0x27e>
    3490:	c0 39       	cpi	r28, 0x90	; 144
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    3492:	f3 e0       	ldi	r31, 0x03	; 3
    3494:	df 07       	cpc	r29, r31
    3496:	21 f4       	brne	.+8      	; 0x34a0 <usart_init_rs232+0x80>
    3498:	61 e0       	ldi	r22, 0x01	; 1
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    349a:	82 e0       	ldi	r24, 0x02	; 2
    349c:	67 dc       	rcall	.-1842   	; 0x2d6c <sysclk_enable_module>
    349e:	ff c0       	rjmp	.+510    	; 0x369e <usart_init_rs232+0x27e>
    34a0:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    34a2:	82 e0       	ldi	r24, 0x02	; 2
    34a4:	d8 07       	cpc	r29, r24
    34a6:	21 f4       	brne	.+8      	; 0x34b0 <usart_init_rs232+0x90>
    34a8:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	5f dc       	rcall	.-1858   	; 0x2d6c <sysclk_enable_module>
    34ae:	f7 c0       	rjmp	.+494    	; 0x369e <usart_init_rs232+0x27e>
    34b0:	c0 34       	cpi	r28, 0x40	; 64
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    34b2:	e2 e0       	ldi	r30, 0x02	; 2
    34b4:	de 07       	cpc	r29, r30
    34b6:	21 f4       	brne	.+8      	; 0x34c0 <usart_init_rs232+0xa0>
    34b8:	62 e0       	ldi	r22, 0x02	; 2
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    34ba:	82 e0       	ldi	r24, 0x02	; 2
    34bc:	57 dc       	rcall	.-1874   	; 0x2d6c <sysclk_enable_module>
    34be:	ef c0       	rjmp	.+478    	; 0x369e <usart_init_rs232+0x27e>
    34c0:	c1 15       	cp	r28, r1
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    34c2:	f3 e0       	ldi	r31, 0x03	; 3
    34c4:	df 07       	cpc	r29, r31
    34c6:	21 f4       	brne	.+8      	; 0x34d0 <usart_init_rs232+0xb0>
    34c8:	64 e0       	ldi	r22, 0x04	; 4
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	4f dc       	rcall	.-1890   	; 0x2d6c <sysclk_enable_module>
    34ce:	e7 c0       	rjmp	.+462    	; 0x369e <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    34d0:	c0 32       	cpi	r28, 0x20	; 32
    34d2:	83 e0       	ldi	r24, 0x03	; 3
    34d4:	d8 07       	cpc	r29, r24
    34d6:	21 f4       	brne	.+8      	; 0x34e0 <usart_init_rs232+0xc0>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    34d8:	64 e0       	ldi	r22, 0x04	; 4
    34da:	82 e0       	ldi	r24, 0x02	; 2
    34dc:	47 dc       	rcall	.-1906   	; 0x2d6c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    34de:	df c0       	rjmp	.+446    	; 0x369e <usart_init_rs232+0x27e>
    34e0:	c1 15       	cp	r28, r1
    34e2:	e8 e0       	ldi	r30, 0x08	; 8
    34e4:	de 07       	cpc	r29, r30
    34e6:	21 f4       	brne	.+8      	; 0x34f0 <usart_init_rs232+0xd0>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    34e8:	61 e0       	ldi	r22, 0x01	; 1
    34ea:	83 e0       	ldi	r24, 0x03	; 3
    34ec:	3f dc       	rcall	.-1922   	; 0x2d6c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    34ee:	d7 c0       	rjmp	.+430    	; 0x369e <usart_init_rs232+0x27e>
    34f0:	c1 15       	cp	r28, r1
    34f2:	f9 e0       	ldi	r31, 0x09	; 9
    34f4:	df 07       	cpc	r29, r31
    34f6:	21 f4       	brne	.+8      	; 0x3500 <usart_init_rs232+0xe0>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    34f8:	61 e0       	ldi	r22, 0x01	; 1
    34fa:	84 e0       	ldi	r24, 0x04	; 4
    34fc:	37 dc       	rcall	.-1938   	; 0x2d6c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    34fe:	cf c0       	rjmp	.+414    	; 0x369e <usart_init_rs232+0x27e>
    3500:	c1 15       	cp	r28, r1
    3502:	8a e0       	ldi	r24, 0x0A	; 10
    3504:	d8 07       	cpc	r29, r24
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    3506:	21 f4       	brne	.+8      	; 0x3510 <usart_init_rs232+0xf0>
    3508:	61 e0       	ldi	r22, 0x01	; 1
    350a:	85 e0       	ldi	r24, 0x05	; 5
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    350c:	2f dc       	rcall	.-1954   	; 0x2d6c <sysclk_enable_module>
    350e:	c7 c0       	rjmp	.+398    	; 0x369e <usart_init_rs232+0x27e>
    3510:	c1 15       	cp	r28, r1
    3512:	eb e0       	ldi	r30, 0x0B	; 11
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    3514:	de 07       	cpc	r29, r30
    3516:	21 f4       	brne	.+8      	; 0x3520 <usart_init_rs232+0x100>
    3518:	61 e0       	ldi	r22, 0x01	; 1
    351a:	86 e0       	ldi	r24, 0x06	; 6
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    351c:	27 dc       	rcall	.-1970   	; 0x2d6c <sysclk_enable_module>
    351e:	bf c0       	rjmp	.+382    	; 0x369e <usart_init_rs232+0x27e>
    3520:	c0 34       	cpi	r28, 0x40	; 64
    3522:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    3524:	df 07       	cpc	r29, r31
    3526:	21 f4       	brne	.+8      	; 0x3530 <usart_init_rs232+0x110>
    3528:	62 e0       	ldi	r22, 0x02	; 2
    352a:	83 e0       	ldi	r24, 0x03	; 3
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    352c:	1f dc       	rcall	.-1986   	; 0x2d6c <sysclk_enable_module>
    352e:	b7 c0       	rjmp	.+366    	; 0x369e <usart_init_rs232+0x27e>
    3530:	c0 34       	cpi	r28, 0x40	; 64
    3532:	89 e0       	ldi	r24, 0x09	; 9
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    3534:	d8 07       	cpc	r29, r24
    3536:	21 f4       	brne	.+8      	; 0x3540 <usart_init_rs232+0x120>
    3538:	62 e0       	ldi	r22, 0x02	; 2
    353a:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    353c:	17 dc       	rcall	.-2002   	; 0x2d6c <sysclk_enable_module>
    353e:	af c0       	rjmp	.+350    	; 0x369e <usart_init_rs232+0x27e>
    3540:	c0 34       	cpi	r28, 0x40	; 64
    3542:	ea e0       	ldi	r30, 0x0A	; 10
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    3544:	de 07       	cpc	r29, r30
    3546:	21 f4       	brne	.+8      	; 0x3550 <usart_init_rs232+0x130>
    3548:	62 e0       	ldi	r22, 0x02	; 2
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    354a:	85 e0       	ldi	r24, 0x05	; 5
    354c:	0f dc       	rcall	.-2018   	; 0x2d6c <sysclk_enable_module>
    354e:	a7 c0       	rjmp	.+334    	; 0x369e <usart_init_rs232+0x27e>
    3550:	c0 34       	cpi	r28, 0x40	; 64
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    3552:	fb e0       	ldi	r31, 0x0B	; 11
    3554:	df 07       	cpc	r29, r31
    3556:	21 f4       	brne	.+8      	; 0x3560 <usart_init_rs232+0x140>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3558:	62 e0       	ldi	r22, 0x02	; 2
    355a:	86 e0       	ldi	r24, 0x06	; 6
    355c:	07 dc       	rcall	.-2034   	; 0x2d6c <sysclk_enable_module>
    355e:	9f c0       	rjmp	.+318    	; 0x369e <usart_init_rs232+0x27e>
    3560:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    3562:	88 e0       	ldi	r24, 0x08	; 8
    3564:	d8 07       	cpc	r29, r24
    3566:	21 f4       	brne	.+8      	; 0x3570 <usart_init_rs232+0x150>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    3568:	64 e0       	ldi	r22, 0x04	; 4
    356a:	83 e0       	ldi	r24, 0x03	; 3
    356c:	ff db       	rcall	.-2050   	; 0x2d6c <sysclk_enable_module>
    356e:	97 c0       	rjmp	.+302    	; 0x369e <usart_init_rs232+0x27e>
    3570:	c0 39       	cpi	r28, 0x90	; 144
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    3572:	e9 e0       	ldi	r30, 0x09	; 9
    3574:	de 07       	cpc	r29, r30
    3576:	21 f4       	brne	.+8      	; 0x3580 <usart_init_rs232+0x160>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    3578:	64 e0       	ldi	r22, 0x04	; 4
    357a:	84 e0       	ldi	r24, 0x04	; 4
    357c:	f7 db       	rcall	.-2066   	; 0x2d6c <sysclk_enable_module>
    357e:	8f c0       	rjmp	.+286    	; 0x369e <usart_init_rs232+0x27e>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    3580:	c0 39       	cpi	r28, 0x90	; 144
    3582:	fa e0       	ldi	r31, 0x0A	; 10
    3584:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    3586:	21 f4       	brne	.+8      	; 0x3590 <usart_init_rs232+0x170>
    3588:	64 e0       	ldi	r22, 0x04	; 4
    358a:	85 e0       	ldi	r24, 0x05	; 5
    358c:	ef db       	rcall	.-2082   	; 0x2d6c <sysclk_enable_module>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    358e:	87 c0       	rjmp	.+270    	; 0x369e <usart_init_rs232+0x27e>
    3590:	c0 39       	cpi	r28, 0x90	; 144
    3592:	8b e0       	ldi	r24, 0x0B	; 11
    3594:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    3596:	21 f4       	brne	.+8      	; 0x35a0 <usart_init_rs232+0x180>
    3598:	64 e0       	ldi	r22, 0x04	; 4
    359a:	86 e0       	ldi	r24, 0x06	; 6
    359c:	e7 db       	rcall	.-2098   	; 0x2d6c <sysclk_enable_module>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    359e:	7f c0       	rjmp	.+254    	; 0x369e <usart_init_rs232+0x27e>
    35a0:	c0 3c       	cpi	r28, 0xC0	; 192
    35a2:	e8 e0       	ldi	r30, 0x08	; 8
    35a4:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    35a6:	21 f4       	brne	.+8      	; 0x35b0 <usart_init_rs232+0x190>
    35a8:	68 e0       	ldi	r22, 0x08	; 8
    35aa:	83 e0       	ldi	r24, 0x03	; 3
    35ac:	df db       	rcall	.-2114   	; 0x2d6c <sysclk_enable_module>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    35ae:	77 c0       	rjmp	.+238    	; 0x369e <usart_init_rs232+0x27e>
    35b0:	c0 3c       	cpi	r28, 0xC0	; 192
    35b2:	f9 e0       	ldi	r31, 0x09	; 9
    35b4:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    35b6:	21 f4       	brne	.+8      	; 0x35c0 <usart_init_rs232+0x1a0>
    35b8:	68 e0       	ldi	r22, 0x08	; 8
    35ba:	84 e0       	ldi	r24, 0x04	; 4
    35bc:	d7 db       	rcall	.-2130   	; 0x2d6c <sysclk_enable_module>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    35be:	6f c0       	rjmp	.+222    	; 0x369e <usart_init_rs232+0x27e>
    35c0:	c0 3c       	cpi	r28, 0xC0	; 192
    35c2:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    35c4:	d8 07       	cpc	r29, r24
    35c6:	21 f4       	brne	.+8      	; 0x35d0 <usart_init_rs232+0x1b0>
    35c8:	68 e0       	ldi	r22, 0x08	; 8
    35ca:	85 e0       	ldi	r24, 0x05	; 5
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    35cc:	cf db       	rcall	.-2146   	; 0x2d6c <sysclk_enable_module>
    35ce:	67 c0       	rjmp	.+206    	; 0x369e <usart_init_rs232+0x27e>
    35d0:	c0 3c       	cpi	r28, 0xC0	; 192
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    35d2:	eb e0       	ldi	r30, 0x0B	; 11
    35d4:	de 07       	cpc	r29, r30
    35d6:	21 f4       	brne	.+8      	; 0x35e0 <usart_init_rs232+0x1c0>
    35d8:	68 e0       	ldi	r22, 0x08	; 8
    35da:	86 e0       	ldi	r24, 0x06	; 6
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    35dc:	c7 db       	rcall	.-2162   	; 0x2d6c <sysclk_enable_module>
    35de:	5f c0       	rjmp	.+190    	; 0x369e <usart_init_rs232+0x27e>
    35e0:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    35e2:	f8 e0       	ldi	r31, 0x08	; 8
    35e4:	df 07       	cpc	r29, r31
    35e6:	21 f4       	brne	.+8      	; 0x35f0 <usart_init_rs232+0x1d0>
    35e8:	60 e1       	ldi	r22, 0x10	; 16
    35ea:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    35ec:	bf db       	rcall	.-2178   	; 0x2d6c <sysclk_enable_module>
    35ee:	57 c0       	rjmp	.+174    	; 0x369e <usart_init_rs232+0x27e>
    35f0:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    35f2:	89 e0       	ldi	r24, 0x09	; 9
    35f4:	d8 07       	cpc	r29, r24
    35f6:	21 f4       	brne	.+8      	; 0x3600 <usart_init_rs232+0x1e0>
    35f8:	60 e1       	ldi	r22, 0x10	; 16
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    35fa:	84 e0       	ldi	r24, 0x04	; 4
    35fc:	b7 db       	rcall	.-2194   	; 0x2d6c <sysclk_enable_module>
    35fe:	4f c0       	rjmp	.+158    	; 0x369e <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    3600:	c0 3a       	cpi	r28, 0xA0	; 160
    3602:	ea e0       	ldi	r30, 0x0A	; 10
    3604:	de 07       	cpc	r29, r30
    3606:	21 f4       	brne	.+8      	; 0x3610 <usart_init_rs232+0x1f0>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    3608:	60 e1       	ldi	r22, 0x10	; 16
    360a:	85 e0       	ldi	r24, 0x05	; 5
    360c:	af db       	rcall	.-2210   	; 0x2d6c <sysclk_enable_module>
    360e:	47 c0       	rjmp	.+142    	; 0x369e <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    3610:	c0 3a       	cpi	r28, 0xA0	; 160
    3612:	fb e0       	ldi	r31, 0x0B	; 11
    3614:	df 07       	cpc	r29, r31
    3616:	21 f4       	brne	.+8      	; 0x3620 <usart_init_rs232+0x200>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    3618:	60 e1       	ldi	r22, 0x10	; 16
    361a:	86 e0       	ldi	r24, 0x06	; 6
    361c:	a7 db       	rcall	.-2226   	; 0x2d6c <sysclk_enable_module>
    361e:	3f c0       	rjmp	.+126    	; 0x369e <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    3620:	c0 3b       	cpi	r28, 0xB0	; 176
    3622:	88 e0       	ldi	r24, 0x08	; 8
    3624:	d8 07       	cpc	r29, r24
    3626:	21 f4       	brne	.+8      	; 0x3630 <usart_init_rs232+0x210>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    3628:	60 e2       	ldi	r22, 0x20	; 32
    362a:	83 e0       	ldi	r24, 0x03	; 3
    362c:	9f db       	rcall	.-2242   	; 0x2d6c <sysclk_enable_module>
    362e:	37 c0       	rjmp	.+110    	; 0x369e <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    3630:	c0 3b       	cpi	r28, 0xB0	; 176
    3632:	e9 e0       	ldi	r30, 0x09	; 9
    3634:	de 07       	cpc	r29, r30
    3636:	21 f4       	brne	.+8      	; 0x3640 <usart_init_rs232+0x220>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    3638:	60 e2       	ldi	r22, 0x20	; 32
    363a:	84 e0       	ldi	r24, 0x04	; 4
    363c:	97 db       	rcall	.-2258   	; 0x2d6c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    363e:	2f c0       	rjmp	.+94     	; 0x369e <usart_init_rs232+0x27e>
    3640:	c0 3b       	cpi	r28, 0xB0	; 176
    3642:	fa e0       	ldi	r31, 0x0A	; 10
    3644:	df 07       	cpc	r29, r31
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    3646:	21 f4       	brne	.+8      	; 0x3650 <usart_init_rs232+0x230>
    3648:	60 e2       	ldi	r22, 0x20	; 32
    364a:	85 e0       	ldi	r24, 0x05	; 5
    364c:	8f db       	rcall	.-2274   	; 0x2d6c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    364e:	27 c0       	rjmp	.+78     	; 0x369e <usart_init_rs232+0x27e>
    3650:	c0 3b       	cpi	r28, 0xB0	; 176
    3652:	8b e0       	ldi	r24, 0x0B	; 11
    3654:	d8 07       	cpc	r29, r24
    3656:	21 f4       	brne	.+8      	; 0x3660 <usart_init_rs232+0x240>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    3658:	60 e2       	ldi	r22, 0x20	; 32
    365a:	86 e0       	ldi	r24, 0x06	; 6
    365c:	87 db       	rcall	.-2290   	; 0x2d6c <sysclk_enable_module>
    365e:	1f c0       	rjmp	.+62     	; 0x369e <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    3660:	c0 38       	cpi	r28, 0x80	; 128
    3662:	e4 e0       	ldi	r30, 0x04	; 4
    3664:	de 07       	cpc	r29, r30
    3666:	21 f4       	brne	.+8      	; 0x3670 <usart_init_rs232+0x250>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    3668:	60 e4       	ldi	r22, 0x40	; 64
    366a:	83 e0       	ldi	r24, 0x03	; 3
    366c:	7f db       	rcall	.-2306   	; 0x2d6c <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    366e:	17 c0       	rjmp	.+46     	; 0x369e <usart_init_rs232+0x27e>
    3670:	c0 39       	cpi	r28, 0x90	; 144
    3672:	f4 e0       	ldi	r31, 0x04	; 4
    3674:	df 07       	cpc	r29, r31
    3676:	21 f4       	brne	.+8      	; 0x3680 <usart_init_rs232+0x260>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    3678:	60 e4       	ldi	r22, 0x40	; 64
    367a:	84 e0       	ldi	r24, 0x04	; 4
    367c:	77 db       	rcall	.-2322   	; 0x2d6c <sysclk_enable_module>
    367e:	0f c0       	rjmp	.+30     	; 0x369e <usart_init_rs232+0x27e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    3680:	c0 3a       	cpi	r28, 0xA0	; 160
    3682:	84 e0       	ldi	r24, 0x04	; 4
    3684:	d8 07       	cpc	r29, r24
    3686:	21 f4       	brne	.+8      	; 0x3690 <usart_init_rs232+0x270>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    3688:	60 e4       	ldi	r22, 0x40	; 64
    368a:	85 e0       	ldi	r24, 0x05	; 5
    368c:	6f db       	rcall	.-2338   	; 0x2d6c <sysclk_enable_module>
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    368e:	07 c0       	rjmp	.+14     	; 0x369e <usart_init_rs232+0x27e>
    3690:	c0 3b       	cpi	r28, 0xB0	; 176
    3692:	e4 e0       	ldi	r30, 0x04	; 4
    3694:	de 07       	cpc	r29, r30
    3696:	19 f4       	brne	.+6      	; 0x369e <usart_init_rs232+0x27e>
    3698:	60 e4       	ldi	r22, 0x40	; 64
    369a:	86 e0       	ldi	r24, 0x06	; 6
    369c:	67 db       	rcall	.-2354   	; 0x2d6c <sysclk_enable_module>
    369e:	8d 81       	ldd	r24, Y+5	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    36a0:	8f 73       	andi	r24, 0x3F	; 63
    36a2:	8d 83       	std	Y+5, r24	; 0x05
    36a4:	f8 01       	movw	r30, r16
    36a6:	95 81       	ldd	r25, Z+5	; 0x05
    36a8:	84 81       	ldd	r24, Z+4	; 0x04
    36aa:	89 2b       	or	r24, r25
    36ac:	96 81       	ldd	r25, Z+6	; 0x06
    36ae:	91 11       	cpse	r25, r1
    36b0:	98 e0       	ldi	r25, 0x08	; 8
    36b2:	89 2b       	or	r24, r25
    36b4:	8d 83       	std	Y+5, r24	; 0x05
    36b6:	f8 01       	movw	r30, r16
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    36b8:	40 81       	ld	r20, Z
    36ba:	51 81       	ldd	r21, Z+1	; 0x01
    36bc:	62 81       	ldd	r22, Z+2	; 0x02
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    36be:	73 81       	ldd	r23, Z+3	; 0x03
    36c0:	00 e0       	ldi	r16, 0x00	; 0
    36c2:	18 e4       	ldi	r17, 0x48	; 72
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    36c4:	28 ee       	ldi	r18, 0xE8	; 232
    36c6:	31 e0       	ldi	r19, 0x01	; 1
    36c8:	ce 01       	movw	r24, r28
    36ca:	97 dd       	rcall	.-1234   	; 0x31fa <usart_set_baudrate>
    36cc:	9c 81       	ldd	r25, Y+4	; 0x04
    36ce:	98 60       	ori	r25, 0x08	; 8
    36d0:	9c 83       	std	Y+4, r25	; 0x04
    36d2:	9c 81       	ldd	r25, Y+4	; 0x04
    36d4:	90 61       	ori	r25, 0x10	; 16
    36d6:	9c 83       	std	Y+4, r25	; 0x04
    36d8:	df 91       	pop	r29
    36da:	cf 91       	pop	r28
    36dc:	1f 91       	pop	r17
    36de:	0f 91       	pop	r16
    36e0:	08 95       	ret

000036e2 <Get_altitude>:
	//printf("altitude = %f \n", (float)altitude);
	return altitude;
}*/

//Old, working function. Uses TEMP from pressure sensor calculations. May as well use
float Get_altitude(uint32_t initial, uint32_t pressure){
    36e2:	8f 92       	push	r8
    36e4:	9f 92       	push	r9
    36e6:	af 92       	push	r10
    36e8:	bf 92       	push	r11
    36ea:	cf 92       	push	r12
    36ec:	df 92       	push	r13
    36ee:	ef 92       	push	r14
    36f0:	ff 92       	push	r15
    36f2:	49 01       	movw	r8, r18
    36f4:	5a 01       	movw	r10, r20
	//printf("temperature = %li \n", TEMP/100);
	//float altitude = (((287.058 * (((float)(TEMP)/100)+273.15)/9.8))*log((float)initial/get_pressure())*3.28);	Not this one, this one's bad
	//float altitude = (pow(((initial/100)/(pressure/100)),(1/5.257))-1)*((TEMP/100)+273.15)/.0065; //This is now right, just gotta use the thermistor
	float altitude = ( (float)initial-(float)pressure) / (1.225f * 9.81f);
	//printf("altitude = %f \n", (float)altitude);
	return altitude;
    36f6:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__floatunsisf>
    36fa:	6b 01       	movw	r12, r22
    36fc:	7c 01       	movw	r14, r24
    36fe:	c5 01       	movw	r24, r10
    3700:	b4 01       	movw	r22, r8
    3702:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__floatunsisf>
    3706:	9b 01       	movw	r18, r22
    3708:	ac 01       	movw	r20, r24
    370a:	c7 01       	movw	r24, r14
    370c:	b6 01       	movw	r22, r12
    370e:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    3712:	29 ea       	ldi	r18, 0xA9	; 169
    3714:	36 e4       	ldi	r19, 0x46	; 70
    3716:	40 e4       	ldi	r20, 0x40	; 64
    3718:	51 e4       	ldi	r21, 0x41	; 65
    371a:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
}
    371e:	ff 90       	pop	r15
    3720:	ef 90       	pop	r14
    3722:	df 90       	pop	r13
    3724:	cf 90       	pop	r12
    3726:	bf 90       	pop	r11
    3728:	af 90       	pop	r10
    372a:	9f 90       	pop	r9
    372c:	8f 90       	pop	r8
    372e:	08 95       	ret

00003730 <init_GPS_pins_and_usart>:
		{
			return i;
		}
	}
	return i+1;
}
    3730:	cf 93       	push	r28
    3732:	df 93       	push	r29
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
    3738:	27 97       	sbiw	r28, 0x07	; 7
    373a:	cd bf       	out	0x3d, r28	; 61
    373c:	de bf       	out	0x3e, r29	; 62
    373e:	e0 e6       	ldi	r30, 0x60	; 96
    3740:	f6 e0       	ldi	r31, 0x06	; 6
    3742:	80 81       	ld	r24, Z
    3744:	80 68       	ori	r24, 0x80	; 128
    3746:	80 83       	st	Z, r24
    3748:	80 81       	ld	r24, Z
    374a:	8f 7b       	andi	r24, 0xBF	; 191
    374c:	80 83       	st	Z, r24
    374e:	80 e8       	ldi	r24, 0x80	; 128
    3750:	85 83       	std	Z+5, r24	; 0x05
    3752:	60 e2       	ldi	r22, 0x20	; 32
    3754:	84 e0       	ldi	r24, 0x04	; 4
    3756:	0a db       	rcall	.-2540   	; 0x2d6c <sysclk_enable_module>
    3758:	e0 e2       	ldi	r30, 0x20	; 32
    375a:	f0 e2       	ldi	r31, 0x20	; 32
    375c:	84 81       	ldd	r24, Z+4	; 0x04
    375e:	8d 83       	std	Y+5, r24	; 0x05
    3760:	85 81       	ldd	r24, Z+5	; 0x05
    3762:	8e 83       	std	Y+6, r24	; 0x06
    3764:	86 81       	ldd	r24, Z+6	; 0x06
    3766:	8f 83       	std	Y+7, r24	; 0x07
    3768:	80 81       	ld	r24, Z
    376a:	91 81       	ldd	r25, Z+1	; 0x01
    376c:	a2 81       	ldd	r26, Z+2	; 0x02
    376e:	b3 81       	ldd	r27, Z+3	; 0x03
    3770:	89 83       	std	Y+1, r24	; 0x01
    3772:	9a 83       	std	Y+2, r25	; 0x02
    3774:	ab 83       	std	Y+3, r26	; 0x03
    3776:	bc 83       	std	Y+4, r27	; 0x04
    3778:	60 e2       	ldi	r22, 0x20	; 32
    377a:	84 e0       	ldi	r24, 0x04	; 4
    377c:	f7 da       	rcall	.-2578   	; 0x2d6c <sysclk_enable_module>
    377e:	be 01       	movw	r22, r28
    3780:	6f 5f       	subi	r22, 0xFF	; 255
    3782:	7f 4f       	sbci	r23, 0xFF	; 255
    3784:	80 eb       	ldi	r24, 0xB0	; 176
    3786:	99 e0       	ldi	r25, 0x09	; 9
    3788:	4b de       	rcall	.-874    	; 0x3420 <usart_init_rs232>
    378a:	27 96       	adiw	r28, 0x07	; 7
    378c:	cd bf       	out	0x3d, r28	; 61
    378e:	de bf       	out	0x3e, r29	; 62
    3790:	df 91       	pop	r29
    3792:	cf 91       	pop	r28
    3794:	08 95       	ret

00003796 <startswith>:
    3796:	dc 01       	movw	r26, r24
    3798:	fb 01       	movw	r30, r22
    379a:	80 81       	ld	r24, Z
    379c:	88 23       	and	r24, r24
    379e:	01 f1       	breq	.+64     	; 0x37e0 <startswith+0x4a>
    37a0:	08 2e       	mov	r0, r24
    37a2:	00 0c       	add	r0, r0
    37a4:	99 0b       	sbc	r25, r25
    37a6:	2c 91       	ld	r18, X
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	82 17       	cp	r24, r18
    37ac:	93 07       	cpc	r25, r19
    37ae:	d1 f4       	brne	.+52     	; 0x37e4 <startswith+0x4e>
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	0b c0       	rjmp	.+22     	; 0x37ca <startswith+0x34>
    37b4:	02 2e       	mov	r0, r18
    37b6:	00 0c       	add	r0, r0
    37b8:	33 0b       	sbc	r19, r19
    37ba:	fd 01       	movw	r30, r26
    37bc:	e4 0f       	add	r30, r20
    37be:	f5 1f       	adc	r31, r21
    37c0:	40 81       	ld	r20, Z
    37c2:	50 e0       	ldi	r21, 0x00	; 0
    37c4:	24 17       	cp	r18, r20
    37c6:	35 07       	cpc	r19, r21
    37c8:	79 f4       	brne	.+30     	; 0x37e8 <startswith+0x52>
    37ca:	9f 5f       	subi	r25, 0xFF	; 255
    37cc:	49 2f       	mov	r20, r25
    37ce:	50 e0       	ldi	r21, 0x00	; 0
    37d0:	fb 01       	movw	r30, r22
    37d2:	e4 0f       	add	r30, r20
    37d4:	f5 1f       	adc	r31, r21
    37d6:	20 81       	ld	r18, Z
    37d8:	21 11       	cpse	r18, r1
    37da:	ec cf       	rjmp	.-40     	; 0x37b4 <startswith+0x1e>
    37dc:	81 e0       	ldi	r24, 0x01	; 1
    37de:	08 95       	ret
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	08 95       	ret
    37e4:	80 e0       	ldi	r24, 0x00	; 0
    37e6:	08 95       	ret
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	08 95       	ret

000037ec <getGPSDatafromNMEA>:

GPS_data_t getGPSDatafromNMEA(uint8_t* NMEA_sentence, uint8_t sentencelength)
{
    37ec:	2f 92       	push	r2
    37ee:	3f 92       	push	r3
    37f0:	4f 92       	push	r4
    37f2:	5f 92       	push	r5
    37f4:	6f 92       	push	r6
    37f6:	7f 92       	push	r7
    37f8:	8f 92       	push	r8
    37fa:	9f 92       	push	r9
    37fc:	af 92       	push	r10
    37fe:	bf 92       	push	r11
    3800:	cf 92       	push	r12
    3802:	df 92       	push	r13
    3804:	ef 92       	push	r14
    3806:	ff 92       	push	r15
    3808:	0f 93       	push	r16
    380a:	1f 93       	push	r17
    380c:	cf 93       	push	r28
    380e:	df 93       	push	r29
    3810:	cd b7       	in	r28, 0x3d	; 61
    3812:	de b7       	in	r29, 0x3e	; 62
    3814:	a2 97       	sbiw	r28, 0x22	; 34
    3816:	cd bf       	out	0x3d, r28	; 61
    3818:	de bf       	out	0x3e, r29	; 62
    381a:	4c 01       	movw	r8, r24
    381c:	69 83       	std	Y+1, r22	; 0x01
    381e:	7a 83       	std	Y+2, r23	; 0x02
    3820:	24 2e       	mov	r2, r20
	uint8_t speedwritten=0;
	uint8_t heightwritten=0;
	uint8_t no_of_sateliiteswritten=0;
	uint8_t comma_position=0;
	int a=0;
	if (startswith(NMEA_sentence, "$GPGGA"))
    3822:	67 ef       	ldi	r22, 0xF7	; 247
    3824:	70 e2       	ldi	r23, 0x20	; 32
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	9a 81       	ldd	r25, Y+2	; 0x02
    382a:	b5 df       	rcall	.-150    	; 0x3796 <startswith>
    382c:	88 23       	and	r24, r24
    382e:	09 f4       	brne	.+2      	; 0x3832 <getGPSDatafromNMEA+0x46>
    3830:	49 c2       	rjmp	.+1170   	; 0x3cc4 <getGPSDatafromNMEA+0x4d8>
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    3832:	31 2c       	mov	r3, r1
    3834:	12 14       	cp	r1, r2
    3836:	13 04       	cpc	r1, r3
    3838:	0c f0       	brlt	.+2      	; 0x383c <getGPSDatafromNMEA+0x50>
    383a:	44 c2       	rjmp	.+1160   	; 0x3cc4 <getGPSDatafromNMEA+0x4d8>
    383c:	49 80       	ldd	r4, Y+1	; 0x01
    383e:	5a 80       	ldd	r5, Y+2	; 0x02
    3840:	00 e0       	ldi	r16, 0x00	; 0
    3842:	10 e0       	ldi	r17, 0x00	; 0
    3844:	f1 2c       	mov	r15, r1
										 + 1000l*(NMEA_sentence[a+7] - '0')
										  + 100l*(NMEA_sentence[a+8] - '0')
										   + 10l*(NMEA_sentence[a+9] - '0')
										       + (NMEA_sentence[a+10] - '0');
					//printf("%lu\n",GPSData.lonminutes);
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
    3846:	df 2c       	mov	r13, r15
    3848:	48 a2       	std	Y+32, r4	; 0x20
    384a:	59 a2       	std	Y+33, r5	; 0x21
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
		{
			//printf("hate6");
			if (NMEA_sentence[a]==',')
    384c:	a8 a1       	ldd	r26, Y+32	; 0x20
    384e:	b9 a1       	ldd	r27, Y+33	; 0x21
    3850:	8d 91       	ld	r24, X+
    3852:	a8 a3       	std	Y+32, r26	; 0x20
    3854:	b9 a3       	std	Y+33, r27	; 0x21
    3856:	8c 32       	cpi	r24, 0x2C	; 44
    3858:	09 f0       	breq	.+2      	; 0x385c <getGPSDatafromNMEA+0x70>
    385a:	2e c2       	rjmp	.+1116   	; 0x3cb8 <getGPSDatafromNMEA+0x4cc>
			{
				//printf("gfhghhf");
				countcommas++;
    385c:	d3 94       	inc	r13
				if (countcommas == 1)
    385e:	b1 e0       	ldi	r27, 0x01	; 1
    3860:	db 12       	cpse	r13, r27
    3862:	23 c0       	rjmp	.+70     	; 0x38aa <getGPSDatafromNMEA+0xbe>
				{
					//printf("Begin %u, end %u\n", NMEA_sentence[a + 1] - '0', NMEA_sentence[a + 2] - '0');
					GPSData.hour = 10 * (NMEA_sentence[a + 1] - (uint8_t)'0') + (NMEA_sentence[a + 2] - (uint8_t)'0');
    3864:	e8 a1       	ldd	r30, Y+32	; 0x20
    3866:	f9 a1       	ldd	r31, Y+33	; 0x21
    3868:	80 81       	ld	r24, Z
    386a:	88 0f       	add	r24, r24
    386c:	80 56       	subi	r24, 0x60	; 96
    386e:	98 2f       	mov	r25, r24
    3870:	99 0f       	add	r25, r25
    3872:	99 0f       	add	r25, r25
    3874:	89 0f       	add	r24, r25
    3876:	91 81       	ldd	r25, Z+1	; 0x01
    3878:	90 53       	subi	r25, 0x30	; 48
    387a:	89 0f       	add	r24, r25
    387c:	8d 87       	std	Y+13, r24	; 0x0d
					GPSData.minutes = 10 * (NMEA_sentence[a + 3] - '0') + NMEA_sentence[a + 4] - '0';
    387e:	82 81       	ldd	r24, Z+2	; 0x02
    3880:	88 0f       	add	r24, r24
    3882:	80 56       	subi	r24, 0x60	; 96
    3884:	98 2f       	mov	r25, r24
    3886:	99 0f       	add	r25, r25
    3888:	99 0f       	add	r25, r25
    388a:	89 0f       	add	r24, r25
    388c:	93 81       	ldd	r25, Z+3	; 0x03
    388e:	90 53       	subi	r25, 0x30	; 48
    3890:	89 0f       	add	r24, r25
    3892:	8e 87       	std	Y+14, r24	; 0x0e
					GPSData.seconds = 10 * (NMEA_sentence[a + 5] - '0') + NMEA_sentence[a + 6] - '0';
    3894:	84 81       	ldd	r24, Z+4	; 0x04
    3896:	88 0f       	add	r24, r24
    3898:	80 56       	subi	r24, 0x60	; 96
    389a:	a8 2e       	mov	r10, r24
    389c:	aa 0c       	add	r10, r10
    389e:	aa 0c       	add	r10, r10
    38a0:	a8 0e       	add	r10, r24
    38a2:	95 81       	ldd	r25, Z+5	; 0x05
    38a4:	90 53       	subi	r25, 0x30	; 48
    38a6:	a9 0e       	add	r10, r25
    38a8:	07 c2       	rjmp	.+1038   	; 0x3cb8 <getGPSDatafromNMEA+0x4cc>
				}
				else if (countcommas == 2 && NMEA_sentence[a+1] != ',')
    38aa:	f2 e0       	ldi	r31, 0x02	; 2
    38ac:	df 12       	cpse	r13, r31
    38ae:	bb c0       	rjmp	.+374    	; 0x3a26 <getGPSDatafromNMEA+0x23a>
    38b0:	a8 a1       	ldd	r26, Y+32	; 0x20
    38b2:	b9 a1       	ldd	r27, Y+33	; 0x21
    38b4:	8c 91       	ld	r24, X
    38b6:	8c 32       	cpi	r24, 0x2C	; 44
    38b8:	09 f4       	brne	.+2      	; 0x38bc <getGPSDatafromNMEA+0xd0>
    38ba:	f0 c1       	rjmp	.+992    	; 0x3c9c <getGPSDatafromNMEA+0x4b0>
				{
					GPSData.latdegrees = 10*(NMEA_sentence[a+1] - '0') + (NMEA_sentence[a+2] - '0');
    38bc:	90 e0       	ldi	r25, 0x00	; 0
    38be:	c0 97       	sbiw	r24, 0x30	; 48
    38c0:	9c 01       	movw	r18, r24
    38c2:	22 0f       	add	r18, r18
    38c4:	33 1f       	adc	r19, r19
    38c6:	88 0f       	add	r24, r24
    38c8:	99 1f       	adc	r25, r25
    38ca:	88 0f       	add	r24, r24
    38cc:	99 1f       	adc	r25, r25
    38ce:	88 0f       	add	r24, r24
    38d0:	99 1f       	adc	r25, r25
    38d2:	82 0f       	add	r24, r18
    38d4:	93 1f       	adc	r25, r19
    38d6:	11 96       	adiw	r26, 0x01	; 1
    38d8:	2c 91       	ld	r18, X
    38da:	11 97       	sbiw	r26, 0x01	; 1
    38dc:	30 e0       	ldi	r19, 0x00	; 0
    38de:	20 53       	subi	r18, 0x30	; 48
    38e0:	31 09       	sbc	r19, r1
    38e2:	2c 01       	movw	r4, r24
    38e4:	42 0e       	add	r4, r18
    38e6:	53 1e       	adc	r5, r19
    38e8:	4b 86       	std	Y+11, r4	; 0x0b
    38ea:	5c 86       	std	Y+12, r5	; 0x0c
					//printf("%u\n",GPSData.latdegrees);
					GPSData.latminutes = 100000l*(NMEA_sentence[a+3] - '0') + 10000l*(NMEA_sentence[a+4] - '0') + 1000l*(NMEA_sentence[a+6] - '0') + 100l*(NMEA_sentence[a+7] - '0') + 10l*(NMEA_sentence[a+8] - '0') + (NMEA_sentence[a+9] - '0');
    38ec:	12 96       	adiw	r26, 0x02	; 2
    38ee:	ac 91       	ld	r26, X
    38f0:	b0 e0       	ldi	r27, 0x00	; 0
    38f2:	d0 97       	sbiw	r26, 0x30	; 48
    38f4:	20 ea       	ldi	r18, 0xA0	; 160
    38f6:	36 e8       	ldi	r19, 0x86	; 134
    38f8:	41 e0       	ldi	r20, 0x01	; 1
    38fa:	50 e0       	ldi	r21, 0x00	; 0
    38fc:	0e 94 bd 33 	call	0x677a	; 0x677a <__mulshisi3>
    3900:	2b 01       	movw	r4, r22
    3902:	3c 01       	movw	r6, r24
    3904:	e8 a1       	ldd	r30, Y+32	; 0x20
    3906:	f9 a1       	ldd	r31, Y+33	; 0x21
    3908:	a3 81       	ldd	r26, Z+3	; 0x03
    390a:	b0 e0       	ldi	r27, 0x00	; 0
    390c:	d0 97       	sbiw	r26, 0x30	; 48
    390e:	20 e1       	ldi	r18, 0x10	; 16
    3910:	37 e2       	ldi	r19, 0x27	; 39
    3912:	0e 94 b7 33 	call	0x676e	; 0x676e <__usmulhisi3>
    3916:	46 0e       	add	r4, r22
    3918:	57 1e       	adc	r5, r23
    391a:	68 1e       	adc	r6, r24
    391c:	79 1e       	adc	r7, r25
    391e:	a5 81       	ldd	r26, Z+5	; 0x05
    3920:	b0 e0       	ldi	r27, 0x00	; 0
    3922:	d0 97       	sbiw	r26, 0x30	; 48
    3924:	28 ee       	ldi	r18, 0xE8	; 232
    3926:	33 e0       	ldi	r19, 0x03	; 3
    3928:	0e 94 b7 33 	call	0x676e	; 0x676e <__usmulhisi3>
    392c:	46 0e       	add	r4, r22
    392e:	57 1e       	adc	r5, r23
    3930:	68 1e       	adc	r6, r24
    3932:	79 1e       	adc	r7, r25
    3934:	a6 81       	ldd	r26, Z+6	; 0x06
    3936:	b0 e0       	ldi	r27, 0x00	; 0
    3938:	d0 97       	sbiw	r26, 0x30	; 48
    393a:	24 e6       	ldi	r18, 0x64	; 100
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	0e 94 b7 33 	call	0x676e	; 0x676e <__usmulhisi3>
    3942:	ab 01       	movw	r20, r22
    3944:	bc 01       	movw	r22, r24
    3946:	44 0d       	add	r20, r4
    3948:	55 1d       	adc	r21, r5
    394a:	66 1d       	adc	r22, r6
    394c:	77 1d       	adc	r23, r7
    394e:	97 81       	ldd	r25, Z+7	; 0x07
    3950:	89 2f       	mov	r24, r25
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	c0 97       	sbiw	r24, 0x30	; 48
    3956:	09 2e       	mov	r0, r25
    3958:	00 0c       	add	r0, r0
    395a:	aa 0b       	sbc	r26, r26
    395c:	bb 0b       	sbc	r27, r27
    395e:	88 0f       	add	r24, r24
    3960:	99 1f       	adc	r25, r25
    3962:	aa 1f       	adc	r26, r26
    3964:	bb 1f       	adc	r27, r27
    3966:	2c 01       	movw	r4, r24
    3968:	3d 01       	movw	r6, r26
    396a:	44 0c       	add	r4, r4
    396c:	55 1c       	adc	r5, r5
    396e:	66 1c       	adc	r6, r6
    3970:	77 1c       	adc	r7, r7
    3972:	44 0c       	add	r4, r4
    3974:	55 1c       	adc	r5, r5
    3976:	66 1c       	adc	r6, r6
    3978:	77 1c       	adc	r7, r7
    397a:	84 0d       	add	r24, r4
    397c:	95 1d       	adc	r25, r5
    397e:	a6 1d       	adc	r26, r6
    3980:	b7 1d       	adc	r27, r7
    3982:	84 0f       	add	r24, r20
    3984:	95 1f       	adc	r25, r21
    3986:	a6 1f       	adc	r26, r22
    3988:	b7 1f       	adc	r27, r23
    398a:	40 85       	ldd	r20, Z+8	; 0x08
    398c:	50 e0       	ldi	r21, 0x00	; 0
    398e:	40 53       	subi	r20, 0x30	; 48
    3990:	51 09       	sbc	r21, r1
    3992:	05 2e       	mov	r0, r21
    3994:	00 0c       	add	r0, r0
    3996:	66 0b       	sbc	r22, r22
    3998:	77 0b       	sbc	r23, r23
    399a:	2c 01       	movw	r4, r24
    399c:	3d 01       	movw	r6, r26
    399e:	44 0e       	add	r4, r20
    39a0:	55 1e       	adc	r5, r21
    39a2:	66 1e       	adc	r6, r22
    39a4:	77 1e       	adc	r7, r23
    39a6:	4f 82       	std	Y+7, r4	; 0x07
    39a8:	58 86       	std	Y+8, r5	; 0x08
    39aa:	69 86       	std	Y+9, r6	; 0x09
    39ac:	7a 86       	std	Y+10, r7	; 0x0a
					//printf("%lu\n",GPSData.latminutes);

					GPSData.latdecimal = (NMEA_sentence[a+11] == 'N' ? 1.0 : -1.0) * ((double)GPSData.latdegrees + ((double)GPSData.latminutes/(60.0*10000.0)));
    39ae:	82 85       	ldd	r24, Z+10	; 0x0a
    39b0:	8e 34       	cpi	r24, 0x4E	; 78
    39b2:	51 f0       	breq	.+20     	; 0x39c8 <getGPSDatafromNMEA+0x1dc>
    39b4:	b1 2c       	mov	r11, r1
    39b6:	c1 2c       	mov	r12, r1
    39b8:	68 94       	set
    39ba:	ee 24       	eor	r14, r14
    39bc:	e7 f8       	bld	r14, 7
    39be:	0f 2e       	mov	r0, r31
    39c0:	ff eb       	ldi	r31, 0xBF	; 191
    39c2:	ff 2e       	mov	r15, r31
    39c4:	f0 2d       	mov	r31, r0
    39c6:	09 c0       	rjmp	.+18     	; 0x39da <getGPSDatafromNMEA+0x1ee>
    39c8:	b1 2c       	mov	r11, r1
    39ca:	c1 2c       	mov	r12, r1
    39cc:	68 94       	set
    39ce:	ee 24       	eor	r14, r14
    39d0:	e7 f8       	bld	r14, 7
    39d2:	0f 2e       	mov	r0, r31
    39d4:	ff e3       	ldi	r31, 0x3F	; 63
    39d6:	ff 2e       	mov	r15, r31
    39d8:	f0 2d       	mov	r31, r0
    39da:	6f 81       	ldd	r22, Y+7	; 0x07
    39dc:	78 85       	ldd	r23, Y+8	; 0x08
    39de:	89 85       	ldd	r24, Y+9	; 0x09
    39e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e2:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__floatunsisf>
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	3c e7       	ldi	r19, 0x7C	; 124
    39ea:	42 e1       	ldi	r20, 0x12	; 18
    39ec:	59 e4       	ldi	r21, 0x49	; 73
    39ee:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
    39f2:	2b 01       	movw	r4, r22
    39f4:	3c 01       	movw	r6, r24
    39f6:	2b 85       	ldd	r18, Y+11	; 0x0b
    39f8:	3c 85       	ldd	r19, Y+12	; 0x0c
    39fa:	b9 01       	movw	r22, r18
    39fc:	80 e0       	ldi	r24, 0x00	; 0
    39fe:	90 e0       	ldi	r25, 0x00	; 0
    3a00:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__floatunsisf>
    3a04:	9b 01       	movw	r18, r22
    3a06:	ac 01       	movw	r20, r24
    3a08:	c3 01       	movw	r24, r6
    3a0a:	b2 01       	movw	r22, r4
    3a0c:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    3a10:	2b 2d       	mov	r18, r11
    3a12:	3c 2d       	mov	r19, r12
    3a14:	4e 2d       	mov	r20, r14
    3a16:	5f 2d       	mov	r21, r15
    3a18:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    3a1c:	6f 87       	std	Y+15, r22	; 0x0f
    3a1e:	78 8b       	std	Y+16, r23	; 0x10
    3a20:	89 8b       	std	Y+17, r24	; 0x11
    3a22:	9a 8b       	std	Y+18, r25	; 0x12
    3a24:	49 c1       	rjmp	.+658    	; 0x3cb8 <getGPSDatafromNMEA+0x4cc>
				}
				else if (countcommas == 2)
				{
					GPSData.latdecimal = 0.0;
				}
				else if (countcommas == 4 && NMEA_sentence[a+1] != ',')
    3a26:	34 e0       	ldi	r19, 0x04	; 4
    3a28:	d3 12       	cpse	r13, r19
    3a2a:	c5 c0       	rjmp	.+394    	; 0x3bb6 <getGPSDatafromNMEA+0x3ca>
    3a2c:	a8 a1       	ldd	r26, Y+32	; 0x20
    3a2e:	b9 a1       	ldd	r27, Y+33	; 0x21
    3a30:	2c 91       	ld	r18, X
    3a32:	2c 32       	cpi	r18, 0x2C	; 44
    3a34:	09 f4       	brne	.+2      	; 0x3a38 <getGPSDatafromNMEA+0x24c>
    3a36:	37 c1       	rjmp	.+622    	; 0x3ca6 <getGPSDatafromNMEA+0x4ba>
				{
					GPSData.londegrees = 100*(NMEA_sentence[a+1] - '0') +10*(NMEA_sentence[a+2] - '0') + (NMEA_sentence[a+3] - '0');
    3a38:	11 96       	adiw	r26, 0x01	; 1
    3a3a:	8c 91       	ld	r24, X
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	c0 97       	sbiw	r24, 0x30	; 48
    3a40:	ac 01       	movw	r20, r24
    3a42:	44 0f       	add	r20, r20
    3a44:	55 1f       	adc	r21, r21
    3a46:	88 0f       	add	r24, r24
    3a48:	99 1f       	adc	r25, r25
    3a4a:	88 0f       	add	r24, r24
    3a4c:	99 1f       	adc	r25, r25
    3a4e:	88 0f       	add	r24, r24
    3a50:	99 1f       	adc	r25, r25
    3a52:	84 0f       	add	r24, r20
    3a54:	95 1f       	adc	r25, r21
    3a56:	30 e0       	ldi	r19, 0x00	; 0
    3a58:	20 53       	subi	r18, 0x30	; 48
    3a5a:	31 09       	sbc	r19, r1
    3a5c:	b4 e6       	ldi	r27, 0x64	; 100
    3a5e:	b2 9f       	mul	r27, r18
    3a60:	a0 01       	movw	r20, r0
    3a62:	b3 9f       	mul	r27, r19
    3a64:	50 0d       	add	r21, r0
    3a66:	11 24       	eor	r1, r1
    3a68:	84 0f       	add	r24, r20
    3a6a:	95 1f       	adc	r25, r21
    3a6c:	e8 a1       	ldd	r30, Y+32	; 0x20
    3a6e:	f9 a1       	ldd	r31, Y+33	; 0x21
    3a70:	22 81       	ldd	r18, Z+2	; 0x02
    3a72:	30 e0       	ldi	r19, 0x00	; 0
    3a74:	20 53       	subi	r18, 0x30	; 48
    3a76:	31 09       	sbc	r19, r1
    3a78:	2c 01       	movw	r4, r24
    3a7a:	42 0e       	add	r4, r18
    3a7c:	53 1e       	adc	r5, r19
    3a7e:	4f 8a       	std	Y+23, r4	; 0x17
    3a80:	58 8e       	std	Y+24, r5	; 0x18
					//printf("%u\n",GPSData.londegrees);
					GPSData.lonminutes = 100000l*(NMEA_sentence[a+4] - '0')
    3a82:	a3 81       	ldd	r26, Z+3	; 0x03
    3a84:	b0 e0       	ldi	r27, 0x00	; 0
    3a86:	d0 97       	sbiw	r26, 0x30	; 48
    3a88:	20 ea       	ldi	r18, 0xA0	; 160
    3a8a:	36 e8       	ldi	r19, 0x86	; 134
    3a8c:	41 e0       	ldi	r20, 0x01	; 1
    3a8e:	50 e0       	ldi	r21, 0x00	; 0
    3a90:	0e 94 bd 33 	call	0x677a	; 0x677a <__mulshisi3>
    3a94:	2b 01       	movw	r4, r22
    3a96:	3c 01       	movw	r6, r24
    3a98:	a4 81       	ldd	r26, Z+4	; 0x04
    3a9a:	b0 e0       	ldi	r27, 0x00	; 0
    3a9c:	d0 97       	sbiw	r26, 0x30	; 48
    3a9e:	20 e1       	ldi	r18, 0x10	; 16
    3aa0:	37 e2       	ldi	r19, 0x27	; 39
    3aa2:	0e 94 b7 33 	call	0x676e	; 0x676e <__usmulhisi3>
    3aa6:	46 0e       	add	r4, r22
    3aa8:	57 1e       	adc	r5, r23
    3aaa:	68 1e       	adc	r6, r24
    3aac:	79 1e       	adc	r7, r25
    3aae:	a6 81       	ldd	r26, Z+6	; 0x06
    3ab0:	b0 e0       	ldi	r27, 0x00	; 0
    3ab2:	d0 97       	sbiw	r26, 0x30	; 48
    3ab4:	28 ee       	ldi	r18, 0xE8	; 232
    3ab6:	33 e0       	ldi	r19, 0x03	; 3
    3ab8:	0e 94 b7 33 	call	0x676e	; 0x676e <__usmulhisi3>
    3abc:	46 0e       	add	r4, r22
    3abe:	57 1e       	adc	r5, r23
    3ac0:	68 1e       	adc	r6, r24
    3ac2:	79 1e       	adc	r7, r25
    3ac4:	a7 81       	ldd	r26, Z+7	; 0x07
    3ac6:	b0 e0       	ldi	r27, 0x00	; 0
    3ac8:	d0 97       	sbiw	r26, 0x30	; 48
    3aca:	24 e6       	ldi	r18, 0x64	; 100
    3acc:	30 e0       	ldi	r19, 0x00	; 0
    3ace:	0e 94 b7 33 	call	0x676e	; 0x676e <__usmulhisi3>
    3ad2:	ab 01       	movw	r20, r22
    3ad4:	bc 01       	movw	r22, r24
    3ad6:	44 0d       	add	r20, r4
    3ad8:	55 1d       	adc	r21, r5
    3ada:	66 1d       	adc	r22, r6
    3adc:	77 1d       	adc	r23, r7
    3ade:	90 85       	ldd	r25, Z+8	; 0x08
    3ae0:	89 2f       	mov	r24, r25
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	c0 97       	sbiw	r24, 0x30	; 48
    3ae6:	09 2e       	mov	r0, r25
    3ae8:	00 0c       	add	r0, r0
    3aea:	aa 0b       	sbc	r26, r26
    3aec:	bb 0b       	sbc	r27, r27
    3aee:	88 0f       	add	r24, r24
    3af0:	99 1f       	adc	r25, r25
    3af2:	aa 1f       	adc	r26, r26
    3af4:	bb 1f       	adc	r27, r27
    3af6:	2c 01       	movw	r4, r24
    3af8:	3d 01       	movw	r6, r26
    3afa:	44 0c       	add	r4, r4
    3afc:	55 1c       	adc	r5, r5
    3afe:	66 1c       	adc	r6, r6
    3b00:	77 1c       	adc	r7, r7
    3b02:	44 0c       	add	r4, r4
    3b04:	55 1c       	adc	r5, r5
    3b06:	66 1c       	adc	r6, r6
    3b08:	77 1c       	adc	r7, r7
    3b0a:	84 0d       	add	r24, r4
    3b0c:	95 1d       	adc	r25, r5
    3b0e:	a6 1d       	adc	r26, r6
    3b10:	b7 1d       	adc	r27, r7
    3b12:	84 0f       	add	r24, r20
    3b14:	95 1f       	adc	r25, r21
    3b16:	a6 1f       	adc	r26, r22
    3b18:	b7 1f       	adc	r27, r23
    3b1a:	41 85       	ldd	r20, Z+9	; 0x09
    3b1c:	50 e0       	ldi	r21, 0x00	; 0
    3b1e:	40 53       	subi	r20, 0x30	; 48
    3b20:	51 09       	sbc	r21, r1
    3b22:	05 2e       	mov	r0, r21
    3b24:	00 0c       	add	r0, r0
    3b26:	66 0b       	sbc	r22, r22
    3b28:	77 0b       	sbc	r23, r23
    3b2a:	2c 01       	movw	r4, r24
    3b2c:	3d 01       	movw	r6, r26
    3b2e:	44 0e       	add	r4, r20
    3b30:	55 1e       	adc	r5, r21
    3b32:	66 1e       	adc	r6, r22
    3b34:	77 1e       	adc	r7, r23
    3b36:	4b 8a       	std	Y+19, r4	; 0x13
    3b38:	5c 8a       	std	Y+20, r5	; 0x14
    3b3a:	6d 8a       	std	Y+21, r6	; 0x15
    3b3c:	7e 8a       	std	Y+22, r7	; 0x16
										 + 1000l*(NMEA_sentence[a+7] - '0')
										  + 100l*(NMEA_sentence[a+8] - '0')
										   + 10l*(NMEA_sentence[a+9] - '0')
										       + (NMEA_sentence[a+10] - '0');
					//printf("%lu\n",GPSData.lonminutes);
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
    3b3e:	83 85       	ldd	r24, Z+11	; 0x0b
    3b40:	85 34       	cpi	r24, 0x45	; 69
    3b42:	51 f0       	breq	.+20     	; 0x3b58 <getGPSDatafromNMEA+0x36c>
    3b44:	b1 2c       	mov	r11, r1
    3b46:	c1 2c       	mov	r12, r1
    3b48:	68 94       	set
    3b4a:	ee 24       	eor	r14, r14
    3b4c:	e7 f8       	bld	r14, 7
    3b4e:	0f 2e       	mov	r0, r31
    3b50:	ff eb       	ldi	r31, 0xBF	; 191
    3b52:	ff 2e       	mov	r15, r31
    3b54:	f0 2d       	mov	r31, r0
    3b56:	09 c0       	rjmp	.+18     	; 0x3b6a <getGPSDatafromNMEA+0x37e>
    3b58:	b1 2c       	mov	r11, r1
    3b5a:	c1 2c       	mov	r12, r1
    3b5c:	68 94       	set
    3b5e:	ee 24       	eor	r14, r14
    3b60:	e7 f8       	bld	r14, 7
    3b62:	0f 2e       	mov	r0, r31
    3b64:	ff e3       	ldi	r31, 0x3F	; 63
    3b66:	ff 2e       	mov	r15, r31
    3b68:	f0 2d       	mov	r31, r0
    3b6a:	6b 89       	ldd	r22, Y+19	; 0x13
    3b6c:	7c 89       	ldd	r23, Y+20	; 0x14
    3b6e:	8d 89       	ldd	r24, Y+21	; 0x15
    3b70:	9e 89       	ldd	r25, Y+22	; 0x16
    3b72:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__floatunsisf>
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	3c e7       	ldi	r19, 0x7C	; 124
    3b7a:	42 e1       	ldi	r20, 0x12	; 18
    3b7c:	59 e4       	ldi	r21, 0x49	; 73
    3b7e:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
    3b82:	2b 01       	movw	r4, r22
    3b84:	3c 01       	movw	r6, r24
    3b86:	2f 89       	ldd	r18, Y+23	; 0x17
    3b88:	38 8d       	ldd	r19, Y+24	; 0x18
    3b8a:	b9 01       	movw	r22, r18
    3b8c:	80 e0       	ldi	r24, 0x00	; 0
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__floatunsisf>
    3b94:	9b 01       	movw	r18, r22
    3b96:	ac 01       	movw	r20, r24
    3b98:	c3 01       	movw	r24, r6
    3b9a:	b2 01       	movw	r22, r4
    3b9c:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    3ba0:	2b 2d       	mov	r18, r11
    3ba2:	3c 2d       	mov	r19, r12
    3ba4:	4e 2d       	mov	r20, r14
    3ba6:	5f 2d       	mov	r21, r15
    3ba8:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    3bac:	69 8f       	std	Y+25, r22	; 0x19
    3bae:	7a 8f       	std	Y+26, r23	; 0x1a
    3bb0:	8b 8f       	std	Y+27, r24	; 0x1b
    3bb2:	9c 8f       	std	Y+28, r25	; 0x1c
    3bb4:	81 c0       	rjmp	.+258    	; 0x3cb8 <getGPSDatafromNMEA+0x4cc>
				}
				else if(countcommas == 4)
				{
					GPSData.londecimal = 0.0;
				}
				else if (countcommas == 6)
    3bb6:	36 e0       	ldi	r19, 0x06	; 6
    3bb8:	d3 12       	cpse	r13, r19
    3bba:	06 c0       	rjmp	.+12     	; 0x3bc8 <getGPSDatafromNMEA+0x3dc>
				{
					GPSData.fix_status = NMEA_sentence[a + 1] - '0';
    3bbc:	a8 a1       	ldd	r26, Y+32	; 0x20
    3bbe:	b9 a1       	ldd	r27, Y+33	; 0x21
    3bc0:	8c 91       	ld	r24, X
    3bc2:	80 53       	subi	r24, 0x30	; 48
    3bc4:	8d 8f       	std	Y+29, r24	; 0x1d
    3bc6:	78 c0       	rjmp	.+240    	; 0x3cb8 <getGPSDatafromNMEA+0x4cc>
				}
				else if (countcommas == 9)
    3bc8:	b9 e0       	ldi	r27, 0x09	; 9
    3bca:	db 12       	cpse	r13, r27
    3bcc:	75 c0       	rjmp	.+234    	; 0x3cb8 <getGPSDatafromNMEA+0x4cc>
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    3bce:	e8 a1       	ldd	r30, Y+32	; 0x20
    3bd0:	f9 a1       	ldd	r31, Y+33	; 0x21
    3bd2:	c0 80       	ld	r12, Z
    3bd4:	fc e2       	ldi	r31, 0x2C	; 44
    3bd6:	cf 16       	cp	r12, r31
    3bd8:	09 f4       	brne	.+2      	; 0x3bdc <getGPSDatafromNMEA+0x3f0>
    3bda:	6a c0       	rjmp	.+212    	; 0x3cb0 <getGPSDatafromNMEA+0x4c4>
    3bdc:	b1 2c       	mov	r11, r1
    3bde:	1b 82       	std	Y+3, r1	; 0x03
    3be0:	1c 82       	std	Y+4, r1	; 0x04
    3be2:	1d 82       	std	Y+5, r1	; 0x05
    3be4:	1e 82       	std	Y+6, r1	; 0x06
    3be6:	71 2c       	mov	r7, r1
    3be8:	e9 80       	ldd	r14, Y+1	; 0x01
    3bea:	fa 80       	ldd	r15, Y+2	; 0x02
    3bec:	e0 0e       	add	r14, r16
    3bee:	f1 1e       	adc	r15, r17
    3bf0:	0e 8f       	std	Y+30, r16	; 0x1e
    3bf2:	1f 8f       	std	Y+31, r17	; 0x1f
    3bf4:	1c 2d       	mov	r17, r12
    3bf6:	7a a2       	std	Y+34, r7	; 0x22
					{
						if (NMEA_sentence[a + inc + 1] == '.')
    3bf8:	1e 32       	cpi	r17, 0x2E	; 46
    3bfa:	09 f4       	brne	.+2      	; 0x3bfe <getGPSDatafromNMEA+0x412>
    3bfc:	42 c0       	rjmp	.+132    	; 0x3c82 <getGPSDatafromNMEA+0x496>
						{
							period_reached = 1;
							period_counter = 1;
						}
						else if (!period_reached)
    3bfe:	5a a0       	ldd	r5, Y+34	; 0x22
    3c00:	51 10       	cpse	r5, r1
    3c02:	1f c0       	rjmp	.+62     	; 0x3c42 <getGPSDatafromNMEA+0x456>
						{
							altitude *= 10;
    3c04:	20 e0       	ldi	r18, 0x00	; 0
    3c06:	30 e0       	ldi	r19, 0x00	; 0
    3c08:	40 e2       	ldi	r20, 0x20	; 32
    3c0a:	51 e4       	ldi	r21, 0x41	; 65
    3c0c:	6b 81       	ldd	r22, Y+3	; 0x03
    3c0e:	7c 81       	ldd	r23, Y+4	; 0x04
    3c10:	8d 81       	ldd	r24, Y+5	; 0x05
    3c12:	9e 81       	ldd	r25, Y+6	; 0x06
    3c14:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    3c18:	2b 01       	movw	r4, r22
    3c1a:	3c 01       	movw	r6, r24
							altitude += (float)(NMEA_sentence[a + inc + 1] - '0');
    3c1c:	61 2f       	mov	r22, r17
    3c1e:	70 e0       	ldi	r23, 0x00	; 0
    3c20:	60 53       	subi	r22, 0x30	; 48
    3c22:	71 09       	sbc	r23, r1
    3c24:	07 2e       	mov	r0, r23
    3c26:	00 0c       	add	r0, r0
    3c28:	88 0b       	sbc	r24, r24
    3c2a:	99 0b       	sbc	r25, r25
    3c2c:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
    3c30:	a3 01       	movw	r20, r6
    3c32:	92 01       	movw	r18, r4
    3c34:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    3c38:	6b 83       	std	Y+3, r22	; 0x03
    3c3a:	7c 83       	std	Y+4, r23	; 0x04
    3c3c:	8d 83       	std	Y+5, r24	; 0x05
    3c3e:	9e 83       	std	Y+6, r25	; 0x06
    3c40:	22 c0       	rjmp	.+68     	; 0x3c86 <getGPSDatafromNMEA+0x49a>
    3c42:	c1 2e       	mov	r12, r17
    3c44:	0e 8d       	ldd	r16, Y+30	; 0x1e
    3c46:	1f 8d       	ldd	r17, Y+31	; 0x1f
						}
						else if (period_reached && period_counter == 1)
						{
							altitude += ((float)(NMEA_sentence[a + inc + 1] - '0')) / 10.0;
    3c48:	6c 2d       	mov	r22, r12
    3c4a:	70 e0       	ldi	r23, 0x00	; 0
    3c4c:	60 53       	subi	r22, 0x30	; 48
    3c4e:	71 09       	sbc	r23, r1
    3c50:	07 2e       	mov	r0, r23
    3c52:	00 0c       	add	r0, r0
    3c54:	88 0b       	sbc	r24, r24
    3c56:	99 0b       	sbc	r25, r25
    3c58:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
    3c5c:	20 e0       	ldi	r18, 0x00	; 0
    3c5e:	30 e0       	ldi	r19, 0x00	; 0
    3c60:	40 e2       	ldi	r20, 0x20	; 32
    3c62:	51 e4       	ldi	r21, 0x41	; 65
    3c64:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
    3c68:	9b 01       	movw	r18, r22
    3c6a:	ac 01       	movw	r20, r24
    3c6c:	6b 81       	ldd	r22, Y+3	; 0x03
    3c6e:	7c 81       	ldd	r23, Y+4	; 0x04
    3c70:	8d 81       	ldd	r24, Y+5	; 0x05
    3c72:	9e 81       	ldd	r25, Y+6	; 0x06
    3c74:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    3c78:	6b 83       	std	Y+3, r22	; 0x03
    3c7a:	7c 83       	std	Y+4, r23	; 0x04
    3c7c:	8d 83       	std	Y+5, r24	; 0x05
    3c7e:	9e 83       	std	Y+6, r25	; 0x06
							break;
    3c80:	1b c0       	rjmp	.+54     	; 0x3cb8 <getGPSDatafromNMEA+0x4cc>
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
					{
						if (NMEA_sentence[a + inc + 1] == '.')
						{
							period_reached = 1;
    3c82:	21 e0       	ldi	r18, 0x01	; 1
    3c84:	2a a3       	std	Y+34, r18	; 0x22
						{
							altitude += ((float)(NMEA_sentence[a + inc + 1] - '0')) / 10.0;
							break;
						}
						
						inc++;
    3c86:	b3 94       	inc	r11
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    3c88:	f7 01       	movw	r30, r14
    3c8a:	eb 0d       	add	r30, r11
    3c8c:	f1 1d       	adc	r31, r1
    3c8e:	11 81       	ldd	r17, Z+1	; 0x01
    3c90:	1c 32       	cpi	r17, 0x2C	; 44
    3c92:	09 f0       	breq	.+2      	; 0x3c96 <getGPSDatafromNMEA+0x4aa>
    3c94:	b1 cf       	rjmp	.-158    	; 0x3bf8 <getGPSDatafromNMEA+0x40c>
    3c96:	0e 8d       	ldd	r16, Y+30	; 0x1e
    3c98:	1f 8d       	ldd	r17, Y+31	; 0x1f
    3c9a:	0e c0       	rjmp	.+28     	; 0x3cb8 <getGPSDatafromNMEA+0x4cc>

					//printf("%f\n",GPSData.latdecimal);
				}
				else if (countcommas == 2)
				{
					GPSData.latdecimal = 0.0;
    3c9c:	1f 86       	std	Y+15, r1	; 0x0f
    3c9e:	18 8a       	std	Y+16, r1	; 0x10
    3ca0:	19 8a       	std	Y+17, r1	; 0x11
    3ca2:	1a 8a       	std	Y+18, r1	; 0x12
    3ca4:	09 c0       	rjmp	.+18     	; 0x3cb8 <getGPSDatafromNMEA+0x4cc>
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
					//printf("%f\n",GPSData.londecimal);
				}
				else if(countcommas == 4)
				{
					GPSData.londecimal = 0.0;
    3ca6:	19 8e       	std	Y+25, r1	; 0x19
    3ca8:	1a 8e       	std	Y+26, r1	; 0x1a
    3caa:	1b 8e       	std	Y+27, r1	; 0x1b
    3cac:	1c 8e       	std	Y+28, r1	; 0x1c
    3cae:	04 c0       	rjmp	.+8      	; 0x3cb8 <getGPSDatafromNMEA+0x4cc>
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    3cb0:	1b 82       	std	Y+3, r1	; 0x03
    3cb2:	1c 82       	std	Y+4, r1	; 0x04
    3cb4:	1d 82       	std	Y+5, r1	; 0x05
    3cb6:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t comma_position=0;
	int a=0;
	if (startswith(NMEA_sentence, "$GPGGA"))
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    3cb8:	0f 5f       	subi	r16, 0xFF	; 255
    3cba:	1f 4f       	sbci	r17, 0xFF	; 255
    3cbc:	02 15       	cp	r16, r2
    3cbe:	13 05       	cpc	r17, r3
    3cc0:	09 f0       	breq	.+2      	; 0x3cc4 <getGPSDatafromNMEA+0x4d8>
    3cc2:	c4 cd       	rjmp	.-1144   	; 0x384c <getGPSDatafromNMEA+0x60>
	
	
	
//printf("GPSDATA altitude test %s \n ", GPSData.altitude);
//printf("GPS no of satellites test= %s \n", GPSData.noofsatellites);
return GPSData;
    3cc4:	4b 84       	ldd	r4, Y+11	; 0x0b
    3cc6:	5c 84       	ldd	r5, Y+12	; 0x0c
    3cc8:	d4 01       	movw	r26, r8
    3cca:	4d 92       	st	X+, r4
    3ccc:	5c 92       	st	X, r5
    3cce:	11 97       	sbiw	r26, 0x01	; 1
    3cd0:	4f 80       	ldd	r4, Y+7	; 0x07
    3cd2:	58 84       	ldd	r5, Y+8	; 0x08
    3cd4:	69 84       	ldd	r6, Y+9	; 0x09
    3cd6:	7a 84       	ldd	r7, Y+10	; 0x0a
    3cd8:	12 96       	adiw	r26, 0x02	; 2
    3cda:	4d 92       	st	X+, r4
    3cdc:	5d 92       	st	X+, r5
    3cde:	6d 92       	st	X+, r6
    3ce0:	7c 92       	st	X, r7
    3ce2:	15 97       	sbiw	r26, 0x05	; 5
    3ce4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ce6:	98 89       	ldd	r25, Y+16	; 0x10
    3ce8:	a9 89       	ldd	r26, Y+17	; 0x11
    3cea:	ba 89       	ldd	r27, Y+18	; 0x12
    3cec:	f4 01       	movw	r30, r8
    3cee:	87 83       	std	Z+7, r24	; 0x07
    3cf0:	90 87       	std	Z+8, r25	; 0x08
    3cf2:	a1 87       	std	Z+9, r26	; 0x09
    3cf4:	b2 87       	std	Z+10, r27	; 0x0a
    3cf6:	4f 88       	ldd	r4, Y+23	; 0x17
    3cf8:	58 8c       	ldd	r5, Y+24	; 0x18
    3cfa:	43 86       	std	Z+11, r4	; 0x0b
    3cfc:	54 86       	std	Z+12, r5	; 0x0c
    3cfe:	4b 88       	ldd	r4, Y+19	; 0x13
    3d00:	5c 88       	ldd	r5, Y+20	; 0x14
    3d02:	6d 88       	ldd	r6, Y+21	; 0x15
    3d04:	7e 88       	ldd	r7, Y+22	; 0x16
    3d06:	45 86       	std	Z+13, r4	; 0x0d
    3d08:	56 86       	std	Z+14, r5	; 0x0e
    3d0a:	67 86       	std	Z+15, r6	; 0x0f
    3d0c:	70 8a       	std	Z+16, r7	; 0x10
    3d0e:	89 8d       	ldd	r24, Y+25	; 0x19
    3d10:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d12:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3d14:	bc 8d       	ldd	r27, Y+28	; 0x1c
    3d16:	82 8b       	std	Z+18, r24	; 0x12
    3d18:	93 8b       	std	Z+19, r25	; 0x13
    3d1a:	a4 8b       	std	Z+20, r26	; 0x14
    3d1c:	b5 8b       	std	Z+21, r27	; 0x15
    3d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d20:	9c 81       	ldd	r25, Y+4	; 0x04
    3d22:	ad 81       	ldd	r26, Y+5	; 0x05
    3d24:	be 81       	ldd	r27, Y+6	; 0x06
    3d26:	86 8b       	std	Z+22, r24	; 0x16
    3d28:	97 8b       	std	Z+23, r25	; 0x17
    3d2a:	a0 8f       	std	Z+24, r26	; 0x18
    3d2c:	b1 8f       	std	Z+25, r27	; 0x19
    3d2e:	4d 84       	ldd	r4, Y+13	; 0x0d
    3d30:	42 8e       	std	Z+26, r4	; 0x1a
    3d32:	5e 84       	ldd	r5, Y+14	; 0x0e
    3d34:	53 8e       	std	Z+27, r5	; 0x1b
    3d36:	a4 8e       	std	Z+28, r10	; 0x1c
    3d38:	6d 8c       	ldd	r6, Y+29	; 0x1d
    3d3a:	65 8e       	std	Z+29, r6	; 0x1d


}
    3d3c:	c4 01       	movw	r24, r8
    3d3e:	a2 96       	adiw	r28, 0x22	; 34
    3d40:	cd bf       	out	0x3d, r28	; 61
    3d42:	de bf       	out	0x3e, r29	; 62
    3d44:	df 91       	pop	r29
    3d46:	cf 91       	pop	r28
    3d48:	1f 91       	pop	r17
    3d4a:	0f 91       	pop	r16
    3d4c:	ff 90       	pop	r15
    3d4e:	ef 90       	pop	r14
    3d50:	df 90       	pop	r13
    3d52:	cf 90       	pop	r12
    3d54:	bf 90       	pop	r11
    3d56:	af 90       	pop	r10
    3d58:	9f 90       	pop	r9
    3d5a:	8f 90       	pop	r8
    3d5c:	7f 90       	pop	r7
    3d5e:	6f 90       	pop	r6
    3d60:	5f 90       	pop	r5
    3d62:	4f 90       	pop	r4
    3d64:	3f 90       	pop	r3
    3d66:	2f 90       	pop	r2
    3d68:	08 95       	ret

00003d6a <__portable_avr_delay_cycles>:
}//not this lol
 //tbh I'm not sure if we're using anything in here...

void heatshield_solenoid(PORT_t* port){
	(*port).DIRSET = 0b10000000;
	(*port).OUTSET = 0b10000000;
    3d6a:	04 c0       	rjmp	.+8      	; 0x3d74 <__portable_avr_delay_cycles+0xa>
    3d6c:	61 50       	subi	r22, 0x01	; 1
    3d6e:	71 09       	sbc	r23, r1
    3d70:	81 09       	sbc	r24, r1
    3d72:	91 09       	sbc	r25, r1
    3d74:	61 15       	cp	r22, r1
    3d76:	71 05       	cpc	r23, r1
    3d78:	81 05       	cpc	r24, r1
    3d7a:	91 05       	cpc	r25, r1
    3d7c:	b9 f7       	brne	.-18     	; 0x3d6c <__portable_avr_delay_cycles+0x2>
    3d7e:	08 95       	ret

00003d80 <heatshield_hotwire>:
}

void heatshield_hotwire (void){
    3d80:	cf 93       	push	r28
    3d82:	df 93       	push	r29
	PORTD.DIR |= 0b00000010;
    3d84:	c0 e6       	ldi	r28, 0x60	; 96
    3d86:	d6 e0       	ldi	r29, 0x06	; 6
    3d88:	88 81       	ld	r24, Y
    3d8a:	82 60       	ori	r24, 0x02	; 2
    3d8c:	88 83       	st	Y, r24
	PORTD.OUT |= 0b00000010; //TO DO: fix these port addresses
    3d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    3d90:	82 60       	ori	r24, 0x02	; 2
    3d92:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(4000);
    3d94:	66 e5       	ldi	r22, 0x56	; 86
    3d96:	75 e8       	ldi	r23, 0x85	; 133
    3d98:	85 e4       	ldi	r24, 0x45	; 69
    3d9a:	91 e0       	ldi	r25, 0x01	; 1
    3d9c:	e6 df       	rcall	.-52     	; 0x3d6a <__portable_avr_delay_cycles>
	PORTD.OUT &= 0b11111101;
    3d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    3da0:	8d 7f       	andi	r24, 0xFD	; 253
    3da2:	8c 83       	std	Y+4, r24	; 0x04
}
    3da4:	df 91       	pop	r29
    3da6:	cf 91       	pop	r28
    3da8:	08 95       	ret

00003daa <parachute_hotwire>:

void parachute_hotwire (void) {
    3daa:	cf 93       	push	r28
    3dac:	df 93       	push	r29
	PORTD.DIR |= 0b00000010;
    3dae:	c0 e6       	ldi	r28, 0x60	; 96
    3db0:	d6 e0       	ldi	r29, 0x06	; 6
    3db2:	88 81       	ld	r24, Y
    3db4:	82 60       	ori	r24, 0x02	; 2
    3db6:	88 83       	st	Y, r24
	PORTD.OUT |= 0b00000010; //TO DO: fix these port addresses
    3db8:	8c 81       	ldd	r24, Y+4	; 0x04
    3dba:	82 60       	ori	r24, 0x02	; 2
    3dbc:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(4000);
    3dbe:	66 e5       	ldi	r22, 0x56	; 86
    3dc0:	75 e8       	ldi	r23, 0x85	; 133
    3dc2:	85 e4       	ldi	r24, 0x45	; 69
    3dc4:	91 e0       	ldi	r25, 0x01	; 1
    3dc6:	d1 df       	rcall	.-94     	; 0x3d6a <__portable_avr_delay_cycles>
	PORTD.OUT &= 0b11111101;
    3dc8:	8c 81       	ldd	r24, Y+4	; 0x04
    3dca:	8d 7f       	andi	r24, 0xFD	; 253
    3dcc:	8c 83       	std	Y+4, r24	; 0x04
}
    3dce:	df 91       	pop	r29
    3dd0:	cf 91       	pop	r28
    3dd2:	08 95       	ret

00003dd4 <heatshield_detatch_hotwire>:

void heatshield_detatch_hotwire(void){
    3dd4:	cf 93       	push	r28
    3dd6:	df 93       	push	r29
	PORTD.DIR |= 0b00000010;
    3dd8:	c0 e6       	ldi	r28, 0x60	; 96
    3dda:	d6 e0       	ldi	r29, 0x06	; 6
    3ddc:	88 81       	ld	r24, Y
    3dde:	82 60       	ori	r24, 0x02	; 2
    3de0:	88 83       	st	Y, r24
	PORTD.OUT |= 0b00000010; //TO DO: fix these port addresses
    3de2:	8c 81       	ldd	r24, Y+4	; 0x04
    3de4:	82 60       	ori	r24, 0x02	; 2
    3de6:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(4000);
    3de8:	66 e5       	ldi	r22, 0x56	; 86
    3dea:	75 e8       	ldi	r23, 0x85	; 133
    3dec:	85 e4       	ldi	r24, 0x45	; 69
    3dee:	91 e0       	ldi	r25, 0x01	; 1
    3df0:	bc df       	rcall	.-136    	; 0x3d6a <__portable_avr_delay_cycles>
	PORTD.OUT &= 0b11111101;	
    3df2:	8c 81       	ldd	r24, Y+4	; 0x04
    3df4:	8d 7f       	andi	r24, 0xFD	; 253
    3df6:	8c 83       	std	Y+4, r24	; 0x04
}
    3df8:	df 91       	pop	r29
    3dfa:	cf 91       	pop	r28
    3dfc:	08 95       	ret

00003dfe <buzzer_on>:

void buzzer_on(void){
	PORTB.DIR |= 0b00000001; 
    3dfe:	e0 e2       	ldi	r30, 0x20	; 32
    3e00:	f6 e0       	ldi	r31, 0x06	; 6
    3e02:	80 81       	ld	r24, Z
    3e04:	81 60       	ori	r24, 0x01	; 1
    3e06:	80 83       	st	Z, r24
	PORTB.OUT |= 0b00000001;
    3e08:	84 81       	ldd	r24, Z+4	; 0x04
    3e0a:	81 60       	ori	r24, 0x01	; 1
    3e0c:	84 83       	std	Z+4, r24	; 0x04
    3e0e:	08 95       	ret

00003e10 <buzzer_off>:
	
}
void buzzer_off(void){
	PORTB.DIR |= 0b00000001;  
    3e10:	e0 e2       	ldi	r30, 0x20	; 32
    3e12:	f6 e0       	ldi	r31, 0x06	; 6
    3e14:	80 81       	ld	r24, Z
    3e16:	81 60       	ori	r24, 0x01	; 1
    3e18:	80 83       	st	Z, r24
	PORTB.OUT &= 0b11111110;
    3e1a:	84 81       	ldd	r24, Z+4	; 0x04
    3e1c:	8e 7f       	andi	r24, 0xFE	; 254
    3e1e:	84 83       	std	Z+4, r24	; 0x04
    3e20:	08 95       	ret

00003e22 <camera_on>:
	
}
void camera_on(void){
	PORTE.DIR |= 0b01000000;
    3e22:	e0 e8       	ldi	r30, 0x80	; 128
    3e24:	f6 e0       	ldi	r31, 0x06	; 6
    3e26:	80 81       	ld	r24, Z
    3e28:	80 64       	ori	r24, 0x40	; 64
    3e2a:	80 83       	st	Z, r24
	PORTE.OUT |= 0b01000000;
    3e2c:	84 81       	ldd	r24, Z+4	; 0x04
    3e2e:	80 64       	ori	r24, 0x40	; 64
    3e30:	84 83       	std	Z+4, r24	; 0x04
    3e32:	08 95       	ret

00003e34 <__portable_avr_delay_cycles>:
	}
	else
	{
		return 0;
	}
}
    3e34:	04 c0       	rjmp	.+8      	; 0x3e3e <__portable_avr_delay_cycles+0xa>
    3e36:	61 50       	subi	r22, 0x01	; 1
    3e38:	71 09       	sbc	r23, r1
    3e3a:	81 09       	sbc	r24, r1
    3e3c:	91 09       	sbc	r25, r1
    3e3e:	61 15       	cp	r22, r1
    3e40:	71 05       	cpc	r23, r1
    3e42:	81 05       	cpc	r24, r1
    3e44:	91 05       	cpc	r25, r1
    3e46:	b9 f7       	brne	.-18     	; 0x3e36 <__portable_avr_delay_cycles+0x2>
    3e48:	08 95       	ret

00003e4a <mpu9250_twi_write_reg>:
    3e4a:	dc 01       	movw	r26, r24
    3e4c:	cb 01       	movw	r24, r22
    3e4e:	e7 e2       	ldi	r30, 0x27	; 39
    3e50:	f0 e2       	ldi	r31, 0x20	; 32
    3e52:	38 e6       	ldi	r19, 0x68	; 104
    3e54:	30 83       	st	Z, r19
    3e56:	41 83       	std	Z+1, r20	; 0x01
    3e58:	41 e0       	ldi	r20, 0x01	; 1
    3e5a:	50 e0       	ldi	r21, 0x00	; 0
    3e5c:	40 87       	std	Z+8, r20	; 0x08
    3e5e:	51 87       	std	Z+9, r21	; 0x09
    3e60:	20 93 89 21 	sts	0x2189, r18	; 0x802189 <mpu9250_twi_data>
    3e64:	40 e0       	ldi	r20, 0x00	; 0
    3e66:	bf 01       	movw	r22, r30
    3e68:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <twi_master_transfer>
    3e6c:	08 95       	ret

00003e6e <mpu9250_twi_read_multi>:
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	e7 e2       	ldi	r30, 0x27	; 39
    3e74:	f0 e2       	ldi	r31, 0x20	; 32
    3e76:	38 e6       	ldi	r19, 0x68	; 104
    3e78:	30 83       	st	Z, r19
    3e7a:	41 83       	std	Z+1, r20	; 0x01
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	20 87       	std	Z+8, r18	; 0x08
    3e80:	31 87       	std	Z+9, r19	; 0x09
    3e82:	41 e0       	ldi	r20, 0x01	; 1
    3e84:	bf 01       	movw	r22, r30
    3e86:	0c 94 70 03 	jmp	0x6e0	; 0x6e0 <twi_master_transfer>
    3e8a:	08 95       	ret

00003e8c <mpu9250_ODR_init>:
    3e8c:	cf 92       	push	r12
    3e8e:	df 92       	push	r13
    3e90:	ef 92       	push	r14
    3e92:	ff 92       	push	r15
    3e94:	6b 01       	movw	r12, r22
    3e96:	7c 01       	movw	r14, r24
    3e98:	64 2f       	mov	r22, r20
    3e9a:	70 e0       	ldi	r23, 0x00	; 0
    3e9c:	88 ee       	ldi	r24, 0xE8	; 232
    3e9e:	93 e0       	ldi	r25, 0x03	; 3
    3ea0:	0e 94 4d 33 	call	0x669a	; 0x669a <__udivmodhi4>
    3ea4:	2f ef       	ldi	r18, 0xFF	; 255
    3ea6:	26 0f       	add	r18, r22
    3ea8:	49 e1       	ldi	r20, 0x19	; 25
    3eaa:	c7 01       	movw	r24, r14
    3eac:	b6 01       	movw	r22, r12
    3eae:	cd df       	rcall	.-102    	; 0x3e4a <mpu9250_twi_write_reg>
    3eb0:	ff 90       	pop	r15
    3eb2:	ef 90       	pop	r14
    3eb4:	df 90       	pop	r13
    3eb6:	cf 90       	pop	r12
    3eb8:	08 95       	ret

00003eba <mpu9250_gyro_init>:
    3eba:	cf 92       	push	r12
    3ebc:	df 92       	push	r13
    3ebe:	ef 92       	push	r14
    3ec0:	ff 92       	push	r15
    3ec2:	6b 01       	movw	r12, r22
    3ec4:	7c 01       	movw	r14, r24
    3ec6:	22 e0       	ldi	r18, 0x02	; 2
    3ec8:	4a e1       	ldi	r20, 0x1A	; 26
    3eca:	bf df       	rcall	.-130    	; 0x3e4a <mpu9250_twi_write_reg>
    3ecc:	28 e1       	ldi	r18, 0x18	; 24
    3ece:	4b e1       	ldi	r20, 0x1B	; 27
    3ed0:	c7 01       	movw	r24, r14
    3ed2:	b6 01       	movw	r22, r12
    3ed4:	ba df       	rcall	.-140    	; 0x3e4a <mpu9250_twi_write_reg>
    3ed6:	85 e8       	ldi	r24, 0x85	; 133
    3ed8:	9b ee       	ldi	r25, 0xEB	; 235
    3eda:	a1 ed       	ldi	r26, 0xD1	; 209
    3edc:	bf e3       	ldi	r27, 0x3F	; 63
    3ede:	80 93 73 21 	sts	0x2173, r24	; 0x802173 <GYRO_SENSITIVITY>
    3ee2:	90 93 74 21 	sts	0x2174, r25	; 0x802174 <GYRO_SENSITIVITY+0x1>
    3ee6:	a0 93 75 21 	sts	0x2175, r26	; 0x802175 <GYRO_SENSITIVITY+0x2>
    3eea:	b0 93 76 21 	sts	0x2176, r27	; 0x802176 <GYRO_SENSITIVITY+0x3>
    3eee:	ff 90       	pop	r15
    3ef0:	ef 90       	pop	r14
    3ef2:	df 90       	pop	r13
    3ef4:	cf 90       	pop	r12
    3ef6:	08 95       	ret

00003ef8 <mpu9250_acc_init>:
    3ef8:	cf 92       	push	r12
    3efa:	df 92       	push	r13
    3efc:	ef 92       	push	r14
    3efe:	ff 92       	push	r15
    3f00:	6b 01       	movw	r12, r22
    3f02:	7c 01       	movw	r14, r24
    3f04:	28 e1       	ldi	r18, 0x18	; 24
    3f06:	4c e1       	ldi	r20, 0x1C	; 28
    3f08:	a0 df       	rcall	.-192    	; 0x3e4a <mpu9250_twi_write_reg>
    3f0a:	22 e0       	ldi	r18, 0x02	; 2
    3f0c:	4d e1       	ldi	r20, 0x1D	; 29
    3f0e:	c7 01       	movw	r24, r14
    3f10:	b6 01       	movw	r22, r12
    3f12:	9b df       	rcall	.-202    	; 0x3e4a <mpu9250_twi_write_reg>
    3f14:	80 e0       	ldi	r24, 0x00	; 0
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	a0 e0       	ldi	r26, 0x00	; 0
    3f1a:	b0 e4       	ldi	r27, 0x40	; 64
    3f1c:	80 93 6f 21 	sts	0x216F, r24	; 0x80216f <ACC_SENSITIVITY>
    3f20:	90 93 70 21 	sts	0x2170, r25	; 0x802170 <ACC_SENSITIVITY+0x1>
    3f24:	a0 93 71 21 	sts	0x2171, r26	; 0x802171 <ACC_SENSITIVITY+0x2>
    3f28:	b0 93 72 21 	sts	0x2172, r27	; 0x802172 <ACC_SENSITIVITY+0x3>
    3f2c:	ff 90       	pop	r15
    3f2e:	ef 90       	pop	r14
    3f30:	df 90       	pop	r13
    3f32:	cf 90       	pop	r12
    3f34:	08 95       	ret

00003f36 <mpu9250_mag_cal>:
    3f36:	cf 92       	push	r12
    3f38:	df 92       	push	r13
    3f3a:	ef 92       	push	r14
    3f3c:	ff 92       	push	r15
    3f3e:	cf 93       	push	r28
    3f40:	df 93       	push	r29
    3f42:	6b 01       	movw	r12, r22
    3f44:	7c 01       	movw	r14, r24
    3f46:	2c e0       	ldi	r18, 0x0C	; 12
    3f48:	45 e2       	ldi	r20, 0x25	; 37
    3f4a:	7f df       	rcall	.-258    	; 0x3e4a <mpu9250_twi_write_reg>
    3f4c:	2a e0       	ldi	r18, 0x0A	; 10
    3f4e:	46 e2       	ldi	r20, 0x26	; 38
    3f50:	c7 01       	movw	r24, r14
    3f52:	b6 01       	movw	r22, r12
    3f54:	7a df       	rcall	.-268    	; 0x3e4a <mpu9250_twi_write_reg>
    3f56:	2f e1       	ldi	r18, 0x1F	; 31
    3f58:	43 e6       	ldi	r20, 0x63	; 99
    3f5a:	c7 01       	movw	r24, r14
    3f5c:	b6 01       	movw	r22, r12
    3f5e:	75 df       	rcall	.-278    	; 0x3e4a <mpu9250_twi_write_reg>
    3f60:	21 e8       	ldi	r18, 0x81	; 129
    3f62:	47 e2       	ldi	r20, 0x27	; 39
    3f64:	c7 01       	movw	r24, r14
    3f66:	b6 01       	movw	r22, r12
    3f68:	70 df       	rcall	.-288    	; 0x3e4a <mpu9250_twi_write_reg>
    3f6a:	6b ea       	ldi	r22, 0xAB	; 171
    3f6c:	70 ea       	ldi	r23, 0xA0	; 160
    3f6e:	81 e0       	ldi	r24, 0x01	; 1
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	60 df       	rcall	.-320    	; 0x3e34 <__portable_avr_delay_cycles>
    3f74:	2c e8       	ldi	r18, 0x8C	; 140
    3f76:	45 e2       	ldi	r20, 0x25	; 37
    3f78:	c7 01       	movw	r24, r14
    3f7a:	b6 01       	movw	r22, r12
    3f7c:	66 df       	rcall	.-308    	; 0x3e4a <mpu9250_twi_write_reg>
    3f7e:	20 e1       	ldi	r18, 0x10	; 16
    3f80:	46 e2       	ldi	r20, 0x26	; 38
    3f82:	c7 01       	movw	r24, r14
    3f84:	b6 01       	movw	r22, r12
    3f86:	61 df       	rcall	.-318    	; 0x3e4a <mpu9250_twi_write_reg>
    3f88:	23 e8       	ldi	r18, 0x83	; 131
    3f8a:	47 e2       	ldi	r20, 0x27	; 39
    3f8c:	c7 01       	movw	r24, r14
    3f8e:	b6 01       	movw	r22, r12
    3f90:	5c df       	rcall	.-328    	; 0x3e4a <mpu9250_twi_write_reg>
    3f92:	6b ea       	ldi	r22, 0xAB	; 171
    3f94:	70 ea       	ldi	r23, 0xA0	; 160
    3f96:	81 e0       	ldi	r24, 0x01	; 1
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	4c df       	rcall	.-360    	; 0x3e34 <__portable_avr_delay_cycles>
    3f9c:	24 e0       	ldi	r18, 0x04	; 4
    3f9e:	49 e4       	ldi	r20, 0x49	; 73
    3fa0:	c7 01       	movw	r24, r14
    3fa2:	b6 01       	movw	r22, r12
    3fa4:	64 df       	rcall	.-312    	; 0x3e6e <mpu9250_twi_read_multi>
    3fa6:	c9 e8       	ldi	r28, 0x89	; 137
    3fa8:	d1 e2       	ldi	r29, 0x21	; 33
    3faa:	68 81       	ld	r22, Y
    3fac:	70 e0       	ldi	r23, 0x00	; 0
    3fae:	80 e0       	ldi	r24, 0x00	; 0
    3fb0:	90 e0       	ldi	r25, 0x00	; 0
    3fb2:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__floatunsisf>
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	30 e0       	ldi	r19, 0x00	; 0
    3fba:	40 e0       	ldi	r20, 0x00	; 0
    3fbc:	53 e4       	ldi	r21, 0x43	; 67
    3fbe:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	40 e8       	ldi	r20, 0x80	; 128
    3fc8:	5b e3       	ldi	r21, 0x3B	; 59
    3fca:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	40 e8       	ldi	r20, 0x80	; 128
    3fd4:	5f e3       	ldi	r21, 0x3F	; 63
    3fd6:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    3fda:	60 93 7f 21 	sts	0x217F, r22	; 0x80217f <ASAX>
    3fde:	70 93 80 21 	sts	0x2180, r23	; 0x802180 <ASAX+0x1>
    3fe2:	80 93 81 21 	sts	0x2181, r24	; 0x802181 <ASAX+0x2>
    3fe6:	90 93 82 21 	sts	0x2182, r25	; 0x802182 <ASAX+0x3>
    3fea:	69 81       	ldd	r22, Y+1	; 0x01
    3fec:	70 e0       	ldi	r23, 0x00	; 0
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__floatunsisf>
    3ff6:	20 e0       	ldi	r18, 0x00	; 0
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	40 e0       	ldi	r20, 0x00	; 0
    3ffc:	53 e4       	ldi	r21, 0x43	; 67
    3ffe:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    4002:	20 e0       	ldi	r18, 0x00	; 0
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	40 e8       	ldi	r20, 0x80	; 128
    4008:	5b e3       	ldi	r21, 0x3B	; 59
    400a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    400e:	20 e0       	ldi	r18, 0x00	; 0
    4010:	30 e0       	ldi	r19, 0x00	; 0
    4012:	40 e8       	ldi	r20, 0x80	; 128
    4014:	5f e3       	ldi	r21, 0x3F	; 63
    4016:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    401a:	60 93 7b 21 	sts	0x217B, r22	; 0x80217b <ASAY>
    401e:	70 93 7c 21 	sts	0x217C, r23	; 0x80217c <ASAY+0x1>
    4022:	80 93 7d 21 	sts	0x217D, r24	; 0x80217d <ASAY+0x2>
    4026:	90 93 7e 21 	sts	0x217E, r25	; 0x80217e <ASAY+0x3>
    402a:	6a 81       	ldd	r22, Y+2	; 0x02
    402c:	70 e0       	ldi	r23, 0x00	; 0
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__floatunsisf>
    4036:	20 e0       	ldi	r18, 0x00	; 0
    4038:	30 e0       	ldi	r19, 0x00	; 0
    403a:	40 e0       	ldi	r20, 0x00	; 0
    403c:	53 e4       	ldi	r21, 0x43	; 67
    403e:	0e 94 c7 2c 	call	0x598e	; 0x598e <__subsf3>
    4042:	20 e0       	ldi	r18, 0x00	; 0
    4044:	30 e0       	ldi	r19, 0x00	; 0
    4046:	40 e8       	ldi	r20, 0x80	; 128
    4048:	5b e3       	ldi	r21, 0x3B	; 59
    404a:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	40 e8       	ldi	r20, 0x80	; 128
    4054:	5f e3       	ldi	r21, 0x3F	; 63
    4056:	0e 94 c8 2c 	call	0x5990	; 0x5990 <__addsf3>
    405a:	60 93 77 21 	sts	0x2177, r22	; 0x802177 <ASAZ>
    405e:	70 93 78 21 	sts	0x2178, r23	; 0x802178 <ASAZ+0x1>
    4062:	80 93 79 21 	sts	0x2179, r24	; 0x802179 <ASAZ+0x2>
    4066:	90 93 7a 21 	sts	0x217A, r25	; 0x80217a <ASAZ+0x3>
    406a:	2c e0       	ldi	r18, 0x0C	; 12
    406c:	45 e2       	ldi	r20, 0x25	; 37
    406e:	c7 01       	movw	r24, r14
    4070:	b6 01       	movw	r22, r12
    4072:	eb de       	rcall	.-554    	; 0x3e4a <mpu9250_twi_write_reg>
    4074:	2a e0       	ldi	r18, 0x0A	; 10
    4076:	46 e2       	ldi	r20, 0x26	; 38
    4078:	c7 01       	movw	r24, r14
    407a:	b6 01       	movw	r22, r12
    407c:	e6 de       	rcall	.-564    	; 0x3e4a <mpu9250_twi_write_reg>
    407e:	20 e1       	ldi	r18, 0x10	; 16
    4080:	43 e6       	ldi	r20, 0x63	; 99
    4082:	c7 01       	movw	r24, r14
    4084:	b6 01       	movw	r22, r12
    4086:	e1 de       	rcall	.-574    	; 0x3e4a <mpu9250_twi_write_reg>
    4088:	21 e8       	ldi	r18, 0x81	; 129
    408a:	47 e2       	ldi	r20, 0x27	; 39
    408c:	c7 01       	movw	r24, r14
    408e:	b6 01       	movw	r22, r12
    4090:	dc de       	rcall	.-584    	; 0x3e4a <mpu9250_twi_write_reg>
    4092:	6b ea       	ldi	r22, 0xAB	; 171
    4094:	70 ea       	ldi	r23, 0xA0	; 160
    4096:	81 e0       	ldi	r24, 0x01	; 1
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	cc de       	rcall	.-616    	; 0x3e34 <__portable_avr_delay_cycles>
    409c:	df 91       	pop	r29
    409e:	cf 91       	pop	r28
    40a0:	ff 90       	pop	r15
    40a2:	ef 90       	pop	r14
    40a4:	df 90       	pop	r13
    40a6:	cf 90       	pop	r12
    40a8:	08 95       	ret

000040aa <mpu9250_mag_init>:
    40aa:	cf 92       	push	r12
    40ac:	df 92       	push	r13
    40ae:	ef 92       	push	r14
    40b0:	ff 92       	push	r15
    40b2:	6b 01       	movw	r12, r22
    40b4:	7c 01       	movw	r14, r24
    40b6:	2d ec       	ldi	r18, 0xCD	; 205
    40b8:	44 e2       	ldi	r20, 0x24	; 36
    40ba:	c7 de       	rcall	.-626    	; 0x3e4a <mpu9250_twi_write_reg>
    40bc:	21 e8       	ldi	r18, 0x81	; 129
    40be:	47 e6       	ldi	r20, 0x67	; 103
    40c0:	c7 01       	movw	r24, r14
    40c2:	b6 01       	movw	r22, r12
    40c4:	c2 de       	rcall	.-636    	; 0x3e4a <mpu9250_twi_write_reg>
    40c6:	20 e2       	ldi	r18, 0x20	; 32
    40c8:	4a e6       	ldi	r20, 0x6A	; 106
    40ca:	c7 01       	movw	r24, r14
    40cc:	b6 01       	movw	r22, r12
    40ce:	bd de       	rcall	.-646    	; 0x3e4a <mpu9250_twi_write_reg>
    40d0:	2c e0       	ldi	r18, 0x0C	; 12
    40d2:	45 e2       	ldi	r20, 0x25	; 37
    40d4:	c7 01       	movw	r24, r14
    40d6:	b6 01       	movw	r22, r12
    40d8:	b8 de       	rcall	.-656    	; 0x3e4a <mpu9250_twi_write_reg>
    40da:	2b e0       	ldi	r18, 0x0B	; 11
    40dc:	46 e2       	ldi	r20, 0x26	; 38
    40de:	c7 01       	movw	r24, r14
    40e0:	b6 01       	movw	r22, r12
    40e2:	b3 de       	rcall	.-666    	; 0x3e4a <mpu9250_twi_write_reg>
    40e4:	21 e0       	ldi	r18, 0x01	; 1
    40e6:	43 e6       	ldi	r20, 0x63	; 99
    40e8:	c7 01       	movw	r24, r14
    40ea:	b6 01       	movw	r22, r12
    40ec:	ae de       	rcall	.-676    	; 0x3e4a <mpu9250_twi_write_reg>
    40ee:	21 e8       	ldi	r18, 0x81	; 129
    40f0:	47 e2       	ldi	r20, 0x27	; 39
    40f2:	c7 01       	movw	r24, r14
    40f4:	b6 01       	movw	r22, r12
    40f6:	a9 de       	rcall	.-686    	; 0x3e4a <mpu9250_twi_write_reg>
    40f8:	66 e5       	ldi	r22, 0x56	; 86
    40fa:	70 ed       	ldi	r23, 0xD0	; 208
    40fc:	80 e0       	ldi	r24, 0x00	; 0
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	99 de       	rcall	.-718    	; 0x3e34 <__portable_avr_delay_cycles>
    4102:	c7 01       	movw	r24, r14
    4104:	b6 01       	movw	r22, r12
    4106:	17 df       	rcall	.-466    	; 0x3f36 <mpu9250_mag_cal>
    4108:	2a e0       	ldi	r18, 0x0A	; 10
    410a:	46 e2       	ldi	r20, 0x26	; 38
    410c:	c7 01       	movw	r24, r14
    410e:	b6 01       	movw	r22, r12
    4110:	9c de       	rcall	.-712    	; 0x3e4a <mpu9250_twi_write_reg>
    4112:	26 e1       	ldi	r18, 0x16	; 22
    4114:	43 e6       	ldi	r20, 0x63	; 99
    4116:	c7 01       	movw	r24, r14
    4118:	b6 01       	movw	r22, r12
    411a:	97 de       	rcall	.-722    	; 0x3e4a <mpu9250_twi_write_reg>
    411c:	21 e8       	ldi	r18, 0x81	; 129
    411e:	47 e2       	ldi	r20, 0x27	; 39
    4120:	c7 01       	movw	r24, r14
    4122:	b6 01       	movw	r22, r12
    4124:	92 de       	rcall	.-732    	; 0x3e4a <mpu9250_twi_write_reg>
    4126:	66 e5       	ldi	r22, 0x56	; 86
    4128:	70 ed       	ldi	r23, 0xD0	; 208
    412a:	80 e0       	ldi	r24, 0x00	; 0
    412c:	90 e0       	ldi	r25, 0x00	; 0
    412e:	82 de       	rcall	.-764    	; 0x3e34 <__portable_avr_delay_cycles>
    4130:	2c e8       	ldi	r18, 0x8C	; 140
    4132:	45 e2       	ldi	r20, 0x25	; 37
    4134:	c7 01       	movw	r24, r14
    4136:	b6 01       	movw	r22, r12
    4138:	88 de       	rcall	.-752    	; 0x3e4a <mpu9250_twi_write_reg>
    413a:	23 e0       	ldi	r18, 0x03	; 3
    413c:	46 e2       	ldi	r20, 0x26	; 38
    413e:	c7 01       	movw	r24, r14
    4140:	b6 01       	movw	r22, r12
    4142:	83 de       	rcall	.-762    	; 0x3e4a <mpu9250_twi_write_reg>
    4144:	27 e8       	ldi	r18, 0x87	; 135
    4146:	47 e2       	ldi	r20, 0x27	; 39
    4148:	c7 01       	movw	r24, r14
    414a:	b6 01       	movw	r22, r12
    414c:	7e de       	rcall	.-772    	; 0x3e4a <mpu9250_twi_write_reg>
    414e:	ff 90       	pop	r15
    4150:	ef 90       	pop	r14
    4152:	df 90       	pop	r13
    4154:	cf 90       	pop	r12
    4156:	08 95       	ret

00004158 <mpu9250_int_init>:
    4158:	cf 92       	push	r12
    415a:	df 92       	push	r13
    415c:	ef 92       	push	r14
    415e:	ff 92       	push	r15
    4160:	6b 01       	movw	r12, r22
    4162:	7c 01       	movw	r14, r24
    4164:	20 e1       	ldi	r18, 0x10	; 16
    4166:	47 e3       	ldi	r20, 0x37	; 55
    4168:	70 de       	rcall	.-800    	; 0x3e4a <mpu9250_twi_write_reg>
    416a:	21 e0       	ldi	r18, 0x01	; 1
    416c:	48 e3       	ldi	r20, 0x38	; 56
    416e:	c7 01       	movw	r24, r14
    4170:	b6 01       	movw	r22, r12
    4172:	6b de       	rcall	.-810    	; 0x3e4a <mpu9250_twi_write_reg>
    4174:	e0 e4       	ldi	r30, 0x40	; 64
    4176:	f6 e0       	ldi	r31, 0x06	; 6
    4178:	84 e0       	ldi	r24, 0x04	; 4
    417a:	82 87       	std	Z+10, r24	; 0x0a
    417c:	83 e0       	ldi	r24, 0x03	; 3
    417e:	81 87       	std	Z+9, r24	; 0x09
    4180:	ff 90       	pop	r15
    4182:	ef 90       	pop	r14
    4184:	df 90       	pop	r13
    4186:	cf 90       	pop	r12
    4188:	08 95       	ret

0000418a <init_mpu9250>:
    418a:	cf 92       	push	r12
    418c:	df 92       	push	r13
    418e:	ef 92       	push	r14
    4190:	ff 92       	push	r15
    4192:	cf 93       	push	r28
    4194:	6b 01       	movw	r12, r22
    4196:	7c 01       	movw	r14, r24
    4198:	c4 2f       	mov	r28, r20
    419a:	20 e8       	ldi	r18, 0x80	; 128
    419c:	4b e6       	ldi	r20, 0x6B	; 107
    419e:	55 de       	rcall	.-854    	; 0x3e4a <mpu9250_twi_write_reg>
    41a0:	66 e5       	ldi	r22, 0x56	; 86
    41a2:	73 e2       	ldi	r23, 0x23	; 35
    41a4:	88 e0       	ldi	r24, 0x08	; 8
    41a6:	90 e0       	ldi	r25, 0x00	; 0
    41a8:	45 de       	rcall	.-886    	; 0x3e34 <__portable_avr_delay_cycles>
    41aa:	21 e0       	ldi	r18, 0x01	; 1
    41ac:	4b e6       	ldi	r20, 0x6B	; 107
    41ae:	c7 01       	movw	r24, r14
    41b0:	b6 01       	movw	r22, r12
    41b2:	4b de       	rcall	.-874    	; 0x3e4a <mpu9250_twi_write_reg>
    41b4:	20 e0       	ldi	r18, 0x00	; 0
    41b6:	4c e6       	ldi	r20, 0x6C	; 108
    41b8:	c7 01       	movw	r24, r14
    41ba:	b6 01       	movw	r22, r12
    41bc:	46 de       	rcall	.-884    	; 0x3e4a <mpu9250_twi_write_reg>
    41be:	c7 01       	movw	r24, r14
    41c0:	b6 01       	movw	r22, r12
    41c2:	7b de       	rcall	.-778    	; 0x3eba <mpu9250_gyro_init>
    41c4:	c7 01       	movw	r24, r14
    41c6:	b6 01       	movw	r22, r12
    41c8:	97 de       	rcall	.-722    	; 0x3ef8 <mpu9250_acc_init>
    41ca:	4c 2f       	mov	r20, r28
    41cc:	c7 01       	movw	r24, r14
    41ce:	b6 01       	movw	r22, r12
    41d0:	5d de       	rcall	.-838    	; 0x3e8c <mpu9250_ODR_init>
    41d2:	c7 01       	movw	r24, r14
    41d4:	b6 01       	movw	r22, r12
    41d6:	c0 df       	rcall	.-128    	; 0x4158 <mpu9250_int_init>
    41d8:	c7 01       	movw	r24, r14
    41da:	b6 01       	movw	r22, r12
    41dc:	66 df       	rcall	.-308    	; 0x40aa <mpu9250_mag_init>
    41de:	e0 e4       	ldi	r30, 0x40	; 64
    41e0:	f6 e0       	ldi	r31, 0x06	; 6
    41e2:	81 e1       	ldi	r24, 0x11	; 17
    41e4:	82 8b       	std	Z+18, r24	; 0x12
    41e6:	84 e0       	ldi	r24, 0x04	; 4
    41e8:	82 87       	std	Z+10, r24	; 0x0a
    41ea:	83 e0       	ldi	r24, 0x03	; 3
    41ec:	81 87       	std	Z+9, r24	; 0x09
    41ee:	cf 91       	pop	r28
    41f0:	ff 90       	pop	r15
    41f2:	ef 90       	pop	r14
    41f4:	df 90       	pop	r13
    41f6:	cf 90       	pop	r12
    41f8:	08 95       	ret

000041fa <read_mpu9250>:
    41fa:	4f 92       	push	r4
    41fc:	5f 92       	push	r5
    41fe:	6f 92       	push	r6
    4200:	7f 92       	push	r7
    4202:	8f 92       	push	r8
    4204:	9f 92       	push	r9
    4206:	af 92       	push	r10
    4208:	bf 92       	push	r11
    420a:	cf 92       	push	r12
    420c:	df 92       	push	r13
    420e:	ef 92       	push	r14
    4210:	ff 92       	push	r15
    4212:	0f 93       	push	r16
    4214:	1f 93       	push	r17
    4216:	cf 93       	push	r28
    4218:	df 93       	push	r29
    421a:	cd b7       	in	r28, 0x3d	; 61
    421c:	de b7       	in	r29, 0x3e	; 62
    421e:	68 97       	sbiw	r28, 0x18	; 24
    4220:	cd bf       	out	0x3d, r28	; 61
    4222:	de bf       	out	0x3e, r29	; 62
    4224:	8c 01       	movw	r16, r24
    4226:	e4 2e       	mov	r14, r20
    4228:	f5 2e       	mov	r15, r21
    422a:	69 83       	std	Y+1, r22	; 0x01
    422c:	7d 83       	std	Y+5, r23	; 0x05
    422e:	22 e0       	ldi	r18, 0x02	; 2
    4230:	4a e3       	ldi	r20, 0x3A	; 58
    4232:	6e 2d       	mov	r22, r14
    4234:	75 2f       	mov	r23, r21
    4236:	89 81       	ldd	r24, Y+1	; 0x01
    4238:	9d 81       	ldd	r25, Y+5	; 0x05
    423a:	19 de       	rcall	.-974    	; 0x3e6e <mpu9250_twi_read_multi>
    423c:	e9 81       	ldd	r30, Y+1	; 0x01
    423e:	e6 95       	lsr	r30
    4240:	e6 95       	lsr	r30
    4242:	e6 95       	lsr	r30
    4244:	80 e2       	ldi	r24, 0x20	; 32
    4246:	e8 9f       	mul	r30, r24
    4248:	f0 01       	movw	r30, r0
    424a:	11 24       	eor	r1, r1
    424c:	fa 5f       	subi	r31, 0xFA	; 250
    424e:	89 81       	ldd	r24, Y+1	; 0x01
    4250:	87 70       	andi	r24, 0x07	; 7
    4252:	91 e0       	ldi	r25, 0x01	; 1
    4254:	01 c0       	rjmp	.+2      	; 0x4258 <read_mpu9250+0x5e>
    4256:	99 0f       	add	r25, r25
    4258:	8a 95       	dec	r24
    425a:	ea f7       	brpl	.-6      	; 0x4256 <read_mpu9250+0x5c>
    425c:	80 85       	ldd	r24, Z+8	; 0x08
    425e:	89 23       	and	r24, r25
    4260:	e9 f3       	breq	.-6      	; 0x425c <read_mpu9250+0x62>
    4262:	99 81       	ldd	r25, Y+1	; 0x01
    4264:	ed 81       	ldd	r30, Y+5	; 0x05
    4266:	26 e1       	ldi	r18, 0x16	; 22
    4268:	4a e3       	ldi	r20, 0x3A	; 58
    426a:	6e 2d       	mov	r22, r14
    426c:	7f 2d       	mov	r23, r15
    426e:	89 2f       	mov	r24, r25
    4270:	9e 2f       	mov	r25, r30
    4272:	fd dd       	rcall	.-1030   	; 0x3e6e <mpu9250_twi_read_multi>
    4274:	c0 90 6f 21 	lds	r12, 0x216F	; 0x80216f <ACC_SENSITIVITY>
    4278:	d0 90 70 21 	lds	r13, 0x2170	; 0x802170 <ACC_SENSITIVITY+0x1>
    427c:	e0 90 71 21 	lds	r14, 0x2171	; 0x802171 <ACC_SENSITIVITY+0x2>
    4280:	f0 90 72 21 	lds	r15, 0x2172	; 0x802172 <ACC_SENSITIVITY+0x3>
    4284:	60 91 8a 21 	lds	r22, 0x218A	; 0x80218a <mpu9250_twi_data+0x1>
    4288:	70 e0       	ldi	r23, 0x00	; 0
    428a:	76 2f       	mov	r23, r22
    428c:	66 27       	eor	r22, r22
    428e:	80 91 8b 21 	lds	r24, 0x218B	; 0x80218b <mpu9250_twi_data+0x2>
    4292:	68 0f       	add	r22, r24
    4294:	71 1d       	adc	r23, r1
    4296:	07 2e       	mov	r0, r23
    4298:	00 0c       	add	r0, r0
    429a:	88 0b       	sbc	r24, r24
    429c:	99 0b       	sbc	r25, r25
    429e:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
    42a2:	a7 01       	movw	r20, r14
    42a4:	96 01       	movw	r18, r12
    42a6:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
    42aa:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <__fixsfsi>
    42ae:	69 83       	std	Y+1, r22	; 0x01
    42b0:	7a 83       	std	Y+2, r23	; 0x02
    42b2:	8b 83       	std	Y+3, r24	; 0x03
    42b4:	9c 83       	std	Y+4, r25	; 0x04
    42b6:	c0 90 6f 21 	lds	r12, 0x216F	; 0x80216f <ACC_SENSITIVITY>
    42ba:	d0 90 70 21 	lds	r13, 0x2170	; 0x802170 <ACC_SENSITIVITY+0x1>
    42be:	e0 90 71 21 	lds	r14, 0x2171	; 0x802171 <ACC_SENSITIVITY+0x2>
    42c2:	f0 90 72 21 	lds	r15, 0x2172	; 0x802172 <ACC_SENSITIVITY+0x3>
    42c6:	60 91 8c 21 	lds	r22, 0x218C	; 0x80218c <mpu9250_twi_data+0x3>
    42ca:	70 e0       	ldi	r23, 0x00	; 0
    42cc:	76 2f       	mov	r23, r22
    42ce:	66 27       	eor	r22, r22
    42d0:	80 91 8d 21 	lds	r24, 0x218D	; 0x80218d <mpu9250_twi_data+0x4>
    42d4:	68 0f       	add	r22, r24
    42d6:	71 1d       	adc	r23, r1
    42d8:	07 2e       	mov	r0, r23
    42da:	00 0c       	add	r0, r0
    42dc:	88 0b       	sbc	r24, r24
    42de:	99 0b       	sbc	r25, r25
    42e0:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
    42e4:	a7 01       	movw	r20, r14
    42e6:	96 01       	movw	r18, r12
    42e8:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
    42ec:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <__fixsfsi>
    42f0:	6d 83       	std	Y+5, r22	; 0x05
    42f2:	7e 83       	std	Y+6, r23	; 0x06
    42f4:	8f 83       	std	Y+7, r24	; 0x07
    42f6:	98 87       	std	Y+8, r25	; 0x08
    42f8:	c0 90 6f 21 	lds	r12, 0x216F	; 0x80216f <ACC_SENSITIVITY>
    42fc:	d0 90 70 21 	lds	r13, 0x2170	; 0x802170 <ACC_SENSITIVITY+0x1>
    4300:	e0 90 71 21 	lds	r14, 0x2171	; 0x802171 <ACC_SENSITIVITY+0x2>
    4304:	f0 90 72 21 	lds	r15, 0x2172	; 0x802172 <ACC_SENSITIVITY+0x3>
    4308:	60 91 8e 21 	lds	r22, 0x218E	; 0x80218e <mpu9250_twi_data+0x5>
    430c:	70 e0       	ldi	r23, 0x00	; 0
    430e:	76 2f       	mov	r23, r22
    4310:	66 27       	eor	r22, r22
    4312:	80 91 8f 21 	lds	r24, 0x218F	; 0x80218f <mpu9250_twi_data+0x6>
    4316:	68 0f       	add	r22, r24
    4318:	71 1d       	adc	r23, r1
    431a:	07 2e       	mov	r0, r23
    431c:	00 0c       	add	r0, r0
    431e:	88 0b       	sbc	r24, r24
    4320:	99 0b       	sbc	r25, r25
    4322:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
    4326:	a7 01       	movw	r20, r14
    4328:	96 01       	movw	r18, r12
    432a:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
    432e:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <__fixsfsi>
    4332:	69 87       	std	Y+9, r22	; 0x09
    4334:	7a 87       	std	Y+10, r23	; 0x0a
    4336:	8b 87       	std	Y+11, r24	; 0x0b
    4338:	9c 87       	std	Y+12, r25	; 0x0c
    433a:	c0 90 73 21 	lds	r12, 0x2173	; 0x802173 <GYRO_SENSITIVITY>
    433e:	d0 90 74 21 	lds	r13, 0x2174	; 0x802174 <GYRO_SENSITIVITY+0x1>
    4342:	e0 90 75 21 	lds	r14, 0x2175	; 0x802175 <GYRO_SENSITIVITY+0x2>
    4346:	f0 90 76 21 	lds	r15, 0x2176	; 0x802176 <GYRO_SENSITIVITY+0x3>
    434a:	60 91 92 21 	lds	r22, 0x2192	; 0x802192 <mpu9250_twi_data+0x9>
    434e:	70 e0       	ldi	r23, 0x00	; 0
    4350:	76 2f       	mov	r23, r22
    4352:	66 27       	eor	r22, r22
    4354:	80 91 93 21 	lds	r24, 0x2193	; 0x802193 <mpu9250_twi_data+0xa>
    4358:	68 0f       	add	r22, r24
    435a:	71 1d       	adc	r23, r1
    435c:	07 2e       	mov	r0, r23
    435e:	00 0c       	add	r0, r0
    4360:	88 0b       	sbc	r24, r24
    4362:	99 0b       	sbc	r25, r25
    4364:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
    4368:	a7 01       	movw	r20, r14
    436a:	96 01       	movw	r18, r12
    436c:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
    4370:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <__fixsfsi>
    4374:	6d 87       	std	Y+13, r22	; 0x0d
    4376:	7e 87       	std	Y+14, r23	; 0x0e
    4378:	8f 87       	std	Y+15, r24	; 0x0f
    437a:	98 8b       	std	Y+16, r25	; 0x10
    437c:	c0 90 73 21 	lds	r12, 0x2173	; 0x802173 <GYRO_SENSITIVITY>
    4380:	d0 90 74 21 	lds	r13, 0x2174	; 0x802174 <GYRO_SENSITIVITY+0x1>
    4384:	e0 90 75 21 	lds	r14, 0x2175	; 0x802175 <GYRO_SENSITIVITY+0x2>
    4388:	f0 90 76 21 	lds	r15, 0x2176	; 0x802176 <GYRO_SENSITIVITY+0x3>
    438c:	60 91 94 21 	lds	r22, 0x2194	; 0x802194 <mpu9250_twi_data+0xb>
    4390:	70 e0       	ldi	r23, 0x00	; 0
    4392:	76 2f       	mov	r23, r22
    4394:	66 27       	eor	r22, r22
    4396:	80 91 95 21 	lds	r24, 0x2195	; 0x802195 <mpu9250_twi_data+0xc>
    439a:	68 0f       	add	r22, r24
    439c:	71 1d       	adc	r23, r1
    439e:	07 2e       	mov	r0, r23
    43a0:	00 0c       	add	r0, r0
    43a2:	88 0b       	sbc	r24, r24
    43a4:	99 0b       	sbc	r25, r25
    43a6:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
    43aa:	a7 01       	movw	r20, r14
    43ac:	96 01       	movw	r18, r12
    43ae:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
    43b2:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <__fixsfsi>
    43b6:	69 8b       	std	Y+17, r22	; 0x11
    43b8:	7a 8b       	std	Y+18, r23	; 0x12
    43ba:	8b 8b       	std	Y+19, r24	; 0x13
    43bc:	9c 8b       	std	Y+20, r25	; 0x14
    43be:	c0 90 73 21 	lds	r12, 0x2173	; 0x802173 <GYRO_SENSITIVITY>
    43c2:	d0 90 74 21 	lds	r13, 0x2174	; 0x802174 <GYRO_SENSITIVITY+0x1>
    43c6:	e0 90 75 21 	lds	r14, 0x2175	; 0x802175 <GYRO_SENSITIVITY+0x2>
    43ca:	f0 90 76 21 	lds	r15, 0x2176	; 0x802176 <GYRO_SENSITIVITY+0x3>
    43ce:	60 91 96 21 	lds	r22, 0x2196	; 0x802196 <mpu9250_twi_data+0xd>
    43d2:	70 e0       	ldi	r23, 0x00	; 0
    43d4:	76 2f       	mov	r23, r22
    43d6:	66 27       	eor	r22, r22
    43d8:	80 91 97 21 	lds	r24, 0x2197	; 0x802197 <mpu9250_twi_data+0xe>
    43dc:	68 0f       	add	r22, r24
    43de:	71 1d       	adc	r23, r1
    43e0:	07 2e       	mov	r0, r23
    43e2:	00 0c       	add	r0, r0
    43e4:	88 0b       	sbc	r24, r24
    43e6:	99 0b       	sbc	r25, r25
    43e8:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
    43ec:	a7 01       	movw	r20, r14
    43ee:	96 01       	movw	r18, r12
    43f0:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
    43f4:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <__fixsfsi>
    43f8:	6d 8b       	std	Y+21, r22	; 0x15
    43fa:	7e 8b       	std	Y+22, r23	; 0x16
    43fc:	8f 8b       	std	Y+23, r24	; 0x17
    43fe:	98 8f       	std	Y+24, r25	; 0x18
    4400:	c0 90 7f 21 	lds	r12, 0x217F	; 0x80217f <ASAX>
    4404:	d0 90 80 21 	lds	r13, 0x2180	; 0x802180 <ASAX+0x1>
    4408:	e0 90 81 21 	lds	r14, 0x2181	; 0x802181 <ASAX+0x2>
    440c:	f0 90 82 21 	lds	r15, 0x2182	; 0x802182 <ASAX+0x3>
    4410:	60 91 99 21 	lds	r22, 0x2199	; 0x802199 <mpu9250_twi_data+0x10>
    4414:	70 e0       	ldi	r23, 0x00	; 0
    4416:	76 2f       	mov	r23, r22
    4418:	66 27       	eor	r22, r22
    441a:	80 91 98 21 	lds	r24, 0x2198	; 0x802198 <mpu9250_twi_data+0xf>
    441e:	68 0f       	add	r22, r24
    4420:	71 1d       	adc	r23, r1
    4422:	07 2e       	mov	r0, r23
    4424:	00 0c       	add	r0, r0
    4426:	88 0b       	sbc	r24, r24
    4428:	99 0b       	sbc	r25, r25
    442a:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
    442e:	a7 01       	movw	r20, r14
    4430:	96 01       	movw	r18, r12
    4432:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    4436:	20 e0       	ldi	r18, 0x00	; 0
    4438:	30 e0       	ldi	r19, 0x00	; 0
    443a:	40 ec       	ldi	r20, 0xC0	; 192
    443c:	50 e4       	ldi	r21, 0x40	; 64
    443e:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    4442:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <__fixsfsi>
    4446:	2b 01       	movw	r4, r22
    4448:	3c 01       	movw	r6, r24
    444a:	c0 90 7b 21 	lds	r12, 0x217B	; 0x80217b <ASAY>
    444e:	d0 90 7c 21 	lds	r13, 0x217C	; 0x80217c <ASAY+0x1>
    4452:	e0 90 7d 21 	lds	r14, 0x217D	; 0x80217d <ASAY+0x2>
    4456:	f0 90 7e 21 	lds	r15, 0x217E	; 0x80217e <ASAY+0x3>
    445a:	60 91 9b 21 	lds	r22, 0x219B	; 0x80219b <mpu9250_twi_data+0x12>
    445e:	70 e0       	ldi	r23, 0x00	; 0
    4460:	76 2f       	mov	r23, r22
    4462:	66 27       	eor	r22, r22
    4464:	80 91 9a 21 	lds	r24, 0x219A	; 0x80219a <mpu9250_twi_data+0x11>
    4468:	68 0f       	add	r22, r24
    446a:	71 1d       	adc	r23, r1
    446c:	07 2e       	mov	r0, r23
    446e:	00 0c       	add	r0, r0
    4470:	88 0b       	sbc	r24, r24
    4472:	99 0b       	sbc	r25, r25
    4474:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
    4478:	a7 01       	movw	r20, r14
    447a:	96 01       	movw	r18, r12
    447c:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    4480:	20 e0       	ldi	r18, 0x00	; 0
    4482:	30 e0       	ldi	r19, 0x00	; 0
    4484:	40 ec       	ldi	r20, 0xC0	; 192
    4486:	50 e4       	ldi	r21, 0x40	; 64
    4488:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    448c:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <__fixsfsi>
    4490:	4b 01       	movw	r8, r22
    4492:	5c 01       	movw	r10, r24
    4494:	c0 90 77 21 	lds	r12, 0x2177	; 0x802177 <ASAZ>
    4498:	d0 90 78 21 	lds	r13, 0x2178	; 0x802178 <ASAZ+0x1>
    449c:	e0 90 79 21 	lds	r14, 0x2179	; 0x802179 <ASAZ+0x2>
    44a0:	f0 90 7a 21 	lds	r15, 0x217A	; 0x80217a <ASAZ+0x3>
    44a4:	60 91 9d 21 	lds	r22, 0x219D	; 0x80219d <mpu9250_twi_data+0x14>
    44a8:	70 e0       	ldi	r23, 0x00	; 0
    44aa:	76 2f       	mov	r23, r22
    44ac:	66 27       	eor	r22, r22
    44ae:	80 91 9c 21 	lds	r24, 0x219C	; 0x80219c <mpu9250_twi_data+0x13>
    44b2:	68 0f       	add	r22, r24
    44b4:	71 1d       	adc	r23, r1
    44b6:	07 2e       	mov	r0, r23
    44b8:	00 0c       	add	r0, r0
    44ba:	88 0b       	sbc	r24, r24
    44bc:	99 0b       	sbc	r25, r25
    44be:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
    44c2:	a7 01       	movw	r20, r14
    44c4:	96 01       	movw	r18, r12
    44c6:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    44ca:	20 e0       	ldi	r18, 0x00	; 0
    44cc:	30 e0       	ldi	r19, 0x00	; 0
    44ce:	40 ec       	ldi	r20, 0xC0	; 192
    44d0:	50 e4       	ldi	r21, 0x40	; 64
    44d2:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    44d6:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <__fixsfsi>
    44da:	6b 01       	movw	r12, r22
    44dc:	7c 01       	movw	r14, r24
    44de:	60 91 90 21 	lds	r22, 0x2190	; 0x802190 <mpu9250_twi_data+0x7>
    44e2:	70 e0       	ldi	r23, 0x00	; 0
    44e4:	76 2f       	mov	r23, r22
    44e6:	66 27       	eor	r22, r22
    44e8:	80 91 91 21 	lds	r24, 0x2191	; 0x802191 <mpu9250_twi_data+0x8>
    44ec:	68 0f       	add	r22, r24
    44ee:	71 1d       	adc	r23, r1
    44f0:	07 2e       	mov	r0, r23
    44f2:	00 0c       	add	r0, r0
    44f4:	88 0b       	sbc	r24, r24
    44f6:	99 0b       	sbc	r25, r25
    44f8:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <__floatsisf>
    44fc:	23 e4       	ldi	r18, 0x43	; 67
    44fe:	3d ea       	ldi	r19, 0xAD	; 173
    4500:	45 e5       	ldi	r20, 0x55	; 85
    4502:	50 e4       	ldi	r21, 0x40	; 64
    4504:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <__divsf3>
    4508:	0e 94 fa 2d 	call	0x5bf4	; 0x5bf4 <__fixsfsi>
    450c:	6c 5c       	subi	r22, 0xCC	; 204
    450e:	77 4f       	sbci	r23, 0xF7	; 247
    4510:	e9 e8       	ldi	r30, 0x89	; 137
    4512:	f1 e2       	ldi	r31, 0x21	; 33
    4514:	80 81       	ld	r24, Z
    4516:	f8 01       	movw	r30, r16
    4518:	80 83       	st	Z, r24
    451a:	89 81       	ldd	r24, Y+1	; 0x01
    451c:	9a 81       	ldd	r25, Y+2	; 0x02
    451e:	81 83       	std	Z+1, r24	; 0x01
    4520:	92 83       	std	Z+2, r25	; 0x02
    4522:	8d 81       	ldd	r24, Y+5	; 0x05
    4524:	9e 81       	ldd	r25, Y+6	; 0x06
    4526:	83 83       	std	Z+3, r24	; 0x03
    4528:	94 83       	std	Z+4, r25	; 0x04
    452a:	89 85       	ldd	r24, Y+9	; 0x09
    452c:	9a 85       	ldd	r25, Y+10	; 0x0a
    452e:	85 83       	std	Z+5, r24	; 0x05
    4530:	96 83       	std	Z+6, r25	; 0x06
    4532:	67 83       	std	Z+7, r22	; 0x07
    4534:	70 87       	std	Z+8, r23	; 0x08
    4536:	8d 85       	ldd	r24, Y+13	; 0x0d
    4538:	9e 85       	ldd	r25, Y+14	; 0x0e
    453a:	81 87       	std	Z+9, r24	; 0x09
    453c:	92 87       	std	Z+10, r25	; 0x0a
    453e:	89 89       	ldd	r24, Y+17	; 0x11
    4540:	9a 89       	ldd	r25, Y+18	; 0x12
    4542:	83 87       	std	Z+11, r24	; 0x0b
    4544:	94 87       	std	Z+12, r25	; 0x0c
    4546:	8d 89       	ldd	r24, Y+21	; 0x15
    4548:	9e 89       	ldd	r25, Y+22	; 0x16
    454a:	85 87       	std	Z+13, r24	; 0x0d
    454c:	96 87       	std	Z+14, r25	; 0x0e
    454e:	47 86       	std	Z+15, r4	; 0x0f
    4550:	50 8a       	std	Z+16, r5	; 0x10
    4552:	81 8a       	std	Z+17, r8	; 0x11
    4554:	92 8a       	std	Z+18, r9	; 0x12
    4556:	c3 8a       	std	Z+19, r12	; 0x13
    4558:	d4 8a       	std	Z+20, r13	; 0x14
    455a:	c8 01       	movw	r24, r16
    455c:	68 96       	adiw	r28, 0x18	; 24
    455e:	cd bf       	out	0x3d, r28	; 61
    4560:	de bf       	out	0x3e, r29	; 62
    4562:	df 91       	pop	r29
    4564:	cf 91       	pop	r28
    4566:	1f 91       	pop	r17
    4568:	0f 91       	pop	r16
    456a:	ff 90       	pop	r15
    456c:	ef 90       	pop	r14
    456e:	df 90       	pop	r13
    4570:	cf 90       	pop	r12
    4572:	bf 90       	pop	r11
    4574:	af 90       	pop	r10
    4576:	9f 90       	pop	r9
    4578:	8f 90       	pop	r8
    457a:	7f 90       	pop	r7
    457c:	6f 90       	pop	r6
    457e:	5f 90       	pop	r5
    4580:	4f 90       	pop	r4
    4582:	08 95       	ret

00004584 <__vector_2>:

ISR(MPU9250_INT_vect)
{
    4584:	1f 92       	push	r1
    4586:	0f 92       	push	r0
    4588:	0f b6       	in	r0, 0x3f	; 63
    458a:	0f 92       	push	r0
    458c:	11 24       	eor	r1, r1
    458e:	08 b6       	in	r0, 0x38	; 56
    4590:	0f 92       	push	r0
    4592:	18 be       	out	0x38, r1	; 56
    4594:	09 b6       	in	r0, 0x39	; 57
    4596:	0f 92       	push	r0
    4598:	19 be       	out	0x39, r1	; 57
    459a:	8f 93       	push	r24
    459c:	9f 93       	push	r25
    459e:	af 93       	push	r26
    45a0:	bf 93       	push	r27
	data_rdy_flag = 1;
    45a2:	81 e0       	ldi	r24, 0x01	; 1
    45a4:	80 93 88 21 	sts	0x2188, r24	; 0x802188 <data_rdy_flag>
	timerflag = 1;
    45a8:	80 93 87 21 	sts	0x2187, r24	; 0x802187 <timerflag>
	time++;
    45ac:	80 91 83 21 	lds	r24, 0x2183	; 0x802183 <time>
    45b0:	90 91 84 21 	lds	r25, 0x2184	; 0x802184 <time+0x1>
    45b4:	a0 91 85 21 	lds	r26, 0x2185	; 0x802185 <time+0x2>
    45b8:	b0 91 86 21 	lds	r27, 0x2186	; 0x802186 <time+0x3>
    45bc:	01 96       	adiw	r24, 0x01	; 1
    45be:	a1 1d       	adc	r26, r1
    45c0:	b1 1d       	adc	r27, r1
    45c2:	80 93 83 21 	sts	0x2183, r24	; 0x802183 <time>
    45c6:	90 93 84 21 	sts	0x2184, r25	; 0x802184 <time+0x1>
    45ca:	a0 93 85 21 	sts	0x2185, r26	; 0x802185 <time+0x2>
    45ce:	b0 93 86 21 	sts	0x2186, r27	; 0x802186 <time+0x3>
}
    45d2:	bf 91       	pop	r27
    45d4:	af 91       	pop	r26
    45d6:	9f 91       	pop	r25
    45d8:	8f 91       	pop	r24
    45da:	0f 90       	pop	r0
    45dc:	09 be       	out	0x39, r0	; 57
    45de:	0f 90       	pop	r0
    45e0:	08 be       	out	0x38, r0	; 56
    45e2:	0f 90       	pop	r0
    45e4:	0f be       	out	0x3f, r0	; 63
    45e6:	0f 90       	pop	r0
    45e8:	1f 90       	pop	r1
    45ea:	18 95       	reti

000045ec <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    45ec:	04 c0       	rjmp	.+8      	; 0x45f6 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    45ee:	61 50       	subi	r22, 0x01	; 1
    45f0:	71 09       	sbc	r23, r1
    45f2:	81 09       	sbc	r24, r1
    45f4:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    45f6:	61 15       	cp	r22, r1
    45f8:	71 05       	cpc	r23, r1
    45fa:	81 05       	cpc	r24, r1
    45fc:	91 05       	cpc	r25, r1
    45fe:	b9 f7       	brne	.-18     	; 0x45ee <__portable_avr_delay_cycles+0x2>
    4600:	08 95       	ret

00004602 <spi_init>:
uint16_t C4; // Temperature coefficient of pressure offset; TCO
uint16_t C5; // Reference temperature; Tref
uint16_t C6; // Temperature coefficient of the pressure; TEMPSENS

void spi_init(void){
	PORTC.DIRSET = 0b10110000; //Open the output pins for the SPI
    4602:	e0 e4       	ldi	r30, 0x40	; 64
    4604:	f6 e0       	ldi	r31, 0x06	; 6
    4606:	80 eb       	ldi	r24, 0xB0	; 176
    4608:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = 0b01000000; //Open the input pins for the SPI
    460a:	90 e4       	ldi	r25, 0x40	; 64
    460c:	92 83       	std	Z+2, r25	; 0x02
	PORTC.OUT = 0b10110000;
    460e:	84 83       	std	Z+4, r24	; 0x04
	SPIC.CTRL = 0b01010011;
    4610:	83 e5       	ldi	r24, 0x53	; 83
    4612:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
	PORTD.DIRSET = 0b00000010;
    4616:	82 e0       	ldi	r24, 0x02	; 2
    4618:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
    461c:	08 95       	ret

0000461e <spi_write>:
}

void spi_write(uint8_t command){
	SPIC.DATA = command;
    461e:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); //waits until the status register changes
    4622:	e0 ec       	ldi	r30, 0xC0	; 192
    4624:	f8 e0       	ldi	r31, 0x08	; 8
    4626:	82 81       	ldd	r24, Z+2	; 0x02
    4628:	88 23       	and	r24, r24
    462a:	ec f7       	brge	.-6      	; 0x4626 <spi_write+0x8>
}
    462c:	08 95       	ret

0000462e <spi_read>:

uint8_t spi_read(void){
	spi_write(0xFF); //writes a max byte 
    462e:	8f ef       	ldi	r24, 0xFF	; 255
    4630:	f6 df       	rcall	.-20     	; 0x461e <spi_write>
	return SPIC.DATA; //gets the data and returns value
    4632:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    4636:	08 95       	ret

00004638 <prom_read>:
	C6 = prom_read(0xAC);
}



uint16_t prom_read(uint8_t command){ // reads the specified data value stored in the sensor.
    4638:	1f 93       	push	r17
    463a:	cf 93       	push	r28
    463c:	df 93       	push	r29
	pd.P = P;
	return pd;
}

void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
    463e:	12 e0       	ldi	r17, 0x02	; 2
    4640:	10 93 66 06 	sts	0x0666, r17	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>

uint16_t prom_read(uint8_t command){ // reads the specified data value stored in the sensor.
	uint16_t data;
	pres_select();
	spi_write(command);
	data = ((uint16_t)spi_read())<<8;
    4644:	ec df       	rcall	.-40     	; 0x461e <spi_write>
    4646:	f3 df       	rcall	.-26     	; 0x462e <spi_read>
    4648:	c8 2f       	mov	r28, r24
    464a:	d0 e0       	ldi	r29, 0x00	; 0
	data += spi_read();
    464c:	dc 2f       	mov	r29, r28
    464e:	cc 27       	eor	r28, r28
    4650:	ee df       	rcall	.-36     	; 0x462e <spi_read>
    4652:	c8 0f       	add	r28, r24
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    4654:	d1 1d       	adc	r29, r1
    4656:	10 93 65 06 	sts	0x0665, r17	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	pres_select();
	spi_write(command);
	data = ((uint16_t)spi_read())<<8;
	data += spi_read();
	pres_deselect();
	delay_ms(1);
    465a:	66 ed       	ldi	r22, 0xD6	; 214
    465c:	74 e1       	ldi	r23, 0x14	; 20
    465e:	80 e0       	ldi	r24, 0x00	; 0
    4660:	90 e0       	ldi	r25, 0x00	; 0
	return data;
}
    4662:	c4 df       	rcall	.-120    	; 0x45ec <__portable_avr_delay_cycles>
    4664:	ce 01       	movw	r24, r28
    4666:	df 91       	pop	r29
    4668:	cf 91       	pop	r28
    466a:	1f 91       	pop	r17
    466c:	08 95       	ret

0000466e <ms5607init>:
uint8_t spi_read(void){
	spi_write(0xFF); //writes a max byte 
	return SPIC.DATA; //gets the data and returns value
}

void ms5607init(void){
    466e:	cf 93       	push	r28
	pd.P = P;
	return pd;
}

void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
    4670:	c2 e0       	ldi	r28, 0x02	; 2
    4672:	c0 93 66 06 	sts	0x0666, r28	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	return SPIC.DATA; //gets the data and returns value
}

void ms5607init(void){
	pres_select(); // Turn on output pin for port 4. 
	spi_write(0x1E);
    4676:	8e e1       	ldi	r24, 0x1E	; 30
    4678:	d2 df       	rcall	.-92     	; 0x461e <spi_write>
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    467a:	c0 93 65 06 	sts	0x0665, r28	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>

void ms5607init(void){
	pres_select(); // Turn on output pin for port 4. 
	spi_write(0x1E);
	pres_deselect(); //reset command for the sensor; refer to datasheet for more.
	delay_ms(10);
    467e:	66 e5       	ldi	r22, 0x56	; 86
    4680:	70 ed       	ldi	r23, 0xD0	; 208
    4682:	80 e0       	ldi	r24, 0x00	; 0
    4684:	90 e0       	ldi	r25, 0x00	; 0
	
	
	
	//Get the programmatical settings from the sensor for future calculations.
	C1 = prom_read(0xA2);
    4686:	b2 df       	rcall	.-156    	; 0x45ec <__portable_avr_delay_cycles>
    4688:	82 ea       	ldi	r24, 0xA2	; 162
    468a:	d6 df       	rcall	.-84     	; 0x4638 <prom_read>
    468c:	80 93 57 25 	sts	0x2557, r24	; 0x802557 <C1>
    4690:	90 93 58 25 	sts	0x2558, r25	; 0x802558 <C1+0x1>
	C2 = prom_read(0xA4);
    4694:	84 ea       	ldi	r24, 0xA4	; 164
    4696:	d0 df       	rcall	.-96     	; 0x4638 <prom_read>
    4698:	80 93 5b 25 	sts	0x255B, r24	; 0x80255b <C2>
    469c:	90 93 5c 25 	sts	0x255C, r25	; 0x80255c <C2+0x1>
	C3 = prom_read(0xA6);
    46a0:	86 ea       	ldi	r24, 0xA6	; 166
    46a2:	ca df       	rcall	.-108    	; 0x4638 <prom_read>
    46a4:	80 93 59 25 	sts	0x2559, r24	; 0x802559 <C3>
    46a8:	90 93 5a 25 	sts	0x255A, r25	; 0x80255a <C3+0x1>
	C4 = prom_read(0xA8);
    46ac:	88 ea       	ldi	r24, 0xA8	; 168
    46ae:	c4 df       	rcall	.-120    	; 0x4638 <prom_read>
    46b0:	80 93 61 25 	sts	0x2561, r24	; 0x802561 <C4>
    46b4:	90 93 62 25 	sts	0x2562, r25	; 0x802562 <C4+0x1>
	C5 = prom_read(0xAA);
    46b8:	8a ea       	ldi	r24, 0xAA	; 170
    46ba:	be df       	rcall	.-132    	; 0x4638 <prom_read>
    46bc:	80 93 5f 25 	sts	0x255F, r24	; 0x80255f <C5>
    46c0:	90 93 60 25 	sts	0x2560, r25	; 0x802560 <C5+0x1>
	C6 = prom_read(0xAC);
    46c4:	8c ea       	ldi	r24, 0xAC	; 172
    46c6:	b8 df       	rcall	.-144    	; 0x4638 <prom_read>
    46c8:	80 93 5d 25 	sts	0x255D, r24	; 0x80255d <C6>
    46cc:	90 93 5e 25 	sts	0x255E, r25	; 0x80255e <C6+0x1>
}
    46d0:	cf 91       	pop	r28
    46d2:	08 95       	ret

000046d4 <data_read>:
	pres_deselect();
	delay_ms(1);
	return data;
}

uint32_t data_read(uint8_t command){
    46d4:	8f 92       	push	r8
    46d6:	9f 92       	push	r9
    46d8:	af 92       	push	r10
    46da:	bf 92       	push	r11
    46dc:	cf 92       	push	r12
    46de:	df 92       	push	r13
    46e0:	ef 92       	push	r14
    46e2:	ff 92       	push	r15
    46e4:	1f 93       	push	r17
    46e6:	cf 93       	push	r28
    46e8:	df 93       	push	r29
	pd.P = P;
	return pd;
}

void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
    46ea:	0f 2e       	mov	r0, r31
    46ec:	f6 e6       	ldi	r31, 0x66	; 102
    46ee:	ef 2e       	mov	r14, r31
    46f0:	f6 e0       	ldi	r31, 0x06	; 6
    46f2:	ff 2e       	mov	r15, r31
    46f4:	f0 2d       	mov	r31, r0
    46f6:	12 e0       	ldi	r17, 0x02	; 2
    46f8:	f7 01       	movw	r30, r14
}

uint32_t data_read(uint8_t command){
	uint32_t data;
	pres_select();
	spi_write(command);
    46fa:	10 83       	st	Z, r17
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    46fc:	90 df       	rcall	.-224    	; 0x461e <spi_write>
    46fe:	c5 e6       	ldi	r28, 0x65	; 101
    4700:	d6 e0       	ldi	r29, 0x06	; 6
uint32_t data_read(uint8_t command){
	uint32_t data;
	pres_select();
	spi_write(command);
	pres_deselect();
	delay_ms(10); //delay to wait for the data output
    4702:	18 83       	st	Y, r17
    4704:	66 e5       	ldi	r22, 0x56	; 86
    4706:	70 ed       	ldi	r23, 0xD0	; 208
    4708:	80 e0       	ldi	r24, 0x00	; 0
    470a:	90 e0       	ldi	r25, 0x00	; 0
	pres_select();
	spi_write(0x00);
    470c:	6f df       	rcall	.-290    	; 0x45ec <__portable_avr_delay_cycles>
    470e:	f7 01       	movw	r30, r14
	data = ((uint32_t)spi_read())<<16; //gets the first 16 bits of the sensor reading, shunts it to the front of the integer.
    4710:	10 83       	st	Z, r17
    4712:	80 e0       	ldi	r24, 0x00	; 0
    4714:	84 df       	rcall	.-248    	; 0x461e <spi_write>
    4716:	8b df       	rcall	.-234    	; 0x462e <spi_read>
    4718:	c8 2e       	mov	r12, r24
    471a:	d1 2c       	mov	r13, r1
    471c:	e1 2c       	mov	r14, r1
    471e:	f1 2c       	mov	r15, r1
	data += ((uint32_t)spi_read())<<8; // gets another 8 bits of the reading, shunts it in as well.
    4720:	56 01       	movw	r10, r12
    4722:	99 24       	eor	r9, r9
    4724:	88 24       	eor	r8, r8
    4726:	83 df       	rcall	.-250    	; 0x462e <spi_read>
    4728:	c8 2e       	mov	r12, r24
    472a:	d1 2c       	mov	r13, r1
    472c:	e1 2c       	mov	r14, r1
    472e:	f1 2c       	mov	r15, r1
    4730:	fe 2c       	mov	r15, r14
    4732:	ed 2c       	mov	r14, r13
    4734:	dc 2c       	mov	r13, r12
    4736:	cc 24       	eor	r12, r12
    4738:	c8 0c       	add	r12, r8
	data += (uint32_t)spi_read(); // gets the final 8 bits from the sensor.
    473a:	d9 1c       	adc	r13, r9
    473c:	ea 1c       	adc	r14, r10
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    473e:	fb 1c       	adc	r15, r11
	data = ((uint32_t)spi_read())<<16; //gets the first 16 bits of the sensor reading, shunts it to the front of the integer.
	data += ((uint32_t)spi_read())<<8; // gets another 8 bits of the reading, shunts it in as well.
	data += (uint32_t)spi_read(); // gets the final 8 bits from the sensor.
	pres_deselect();
	//delay_ms(10);
	return data;
    4740:	76 df       	rcall	.-276    	; 0x462e <spi_read>
    4742:	18 83       	st	Y, r17
    4744:	a7 01       	movw	r20, r14
    4746:	96 01       	movw	r18, r12
    4748:	28 0f       	add	r18, r24
    474a:	31 1d       	adc	r19, r1
    474c:	41 1d       	adc	r20, r1
    474e:	51 1d       	adc	r21, r1
}
    4750:	ca 01       	movw	r24, r20
    4752:	b9 01       	movw	r22, r18
    4754:	df 91       	pop	r29
    4756:	cf 91       	pop	r28
    4758:	1f 91       	pop	r17
    475a:	ff 90       	pop	r15
    475c:	ef 90       	pop	r14
    475e:	df 90       	pop	r13
    4760:	cf 90       	pop	r12
    4762:	bf 90       	pop	r11
    4764:	af 90       	pop	r10
    4766:	9f 90       	pop	r9
    4768:	8f 90       	pop	r8
    476a:	08 95       	ret

0000476c <get_pressure>:

PressData get_pressure(void){ //refer to the datasheet for these calculations.
    476c:	2f 92       	push	r2
    476e:	3f 92       	push	r3
    4770:	4f 92       	push	r4
    4772:	5f 92       	push	r5
    4774:	6f 92       	push	r6
    4776:	7f 92       	push	r7
    4778:	8f 92       	push	r8
    477a:	9f 92       	push	r9
    477c:	af 92       	push	r10
    477e:	bf 92       	push	r11
    4780:	cf 92       	push	r12
    4782:	df 92       	push	r13
    4784:	ef 92       	push	r14
    4786:	ff 92       	push	r15
    4788:	0f 93       	push	r16
    478a:	1f 93       	push	r17
    478c:	cf 93       	push	r28
    478e:	df 93       	push	r29
    4790:	cd b7       	in	r28, 0x3d	; 61
    4792:	de b7       	in	r29, 0x3e	; 62
    4794:	69 97       	sbiw	r28, 0x19	; 25
    4796:	cd bf       	out	0x3d, r28	; 61
    4798:	de bf       	out	0x3e, r29	; 62
	
	uint32_t D1 = data_read(0x48); // Gets digital pressure value
    479a:	88 e4       	ldi	r24, 0x48	; 72
    479c:	9b df       	rcall	.-202    	; 0x46d4 <data_read>
    479e:	1b 01       	movw	r2, r22
	uint32_t D2 = data_read(0x58); // Gets temperature value
    47a0:	2c 01       	movw	r4, r24
    47a2:	88 e5       	ldi	r24, 0x58	; 88
	
	
	("D1: %lu, D2: %lu", D1, D2);
	
	int32_t dT = (int64_t)D2 - (int64_t)C5 * 256; // Runs calculations to get dT
	int32_t TEMP = 2000 + (int64_t)dT * (int64_t)C6 / 8388608; // Finds actual temp
    47a4:	97 df       	rcall	.-210    	; 0x46d4 <data_read>
    47a6:	20 91 5f 25 	lds	r18, 0x255F	; 0x80255f <C5>
    47aa:	30 91 60 25 	lds	r19, 0x2560	; 0x802560 <C5+0x1>
    47ae:	89 01       	movw	r16, r18
    47b0:	20 e0       	ldi	r18, 0x00	; 0
    47b2:	30 e0       	ldi	r19, 0x00	; 0
    47b4:	32 2f       	mov	r19, r18
    47b6:	21 2f       	mov	r18, r17
    47b8:	10 2f       	mov	r17, r16
    47ba:	00 27       	eor	r16, r16
    47bc:	6b 01       	movw	r12, r22
    47be:	7c 01       	movw	r14, r24
    47c0:	c0 1a       	sub	r12, r16
    47c2:	d1 0a       	sbc	r13, r17
    47c4:	e2 0a       	sbc	r14, r18
    47c6:	f3 0a       	sbc	r15, r19
    47c8:	c9 86       	std	Y+9, r12	; 0x09
    47ca:	da 86       	std	Y+10, r13	; 0x0a
    47cc:	eb 86       	std	Y+11, r14	; 0x0b
    47ce:	fc 86       	std	Y+12, r15	; 0x0c
    47d0:	ff 0c       	add	r15, r15
    47d2:	cc 08       	sbc	r12, r12
    47d4:	dc 2c       	mov	r13, r12
    47d6:	76 01       	movw	r14, r12
    47d8:	cd 86       	std	Y+13, r12	; 0x0d
    47da:	de 86       	std	Y+14, r13	; 0x0e
    47dc:	ef 86       	std	Y+15, r14	; 0x0f
    47de:	f8 8a       	std	Y+16, r15	; 0x10
    47e0:	40 91 5d 25 	lds	r20, 0x255D	; 0x80255d <C6>
    47e4:	50 91 5e 25 	lds	r21, 0x255E	; 0x80255e <C6+0x1>
    47e8:	a9 84       	ldd	r10, Y+9	; 0x09
    47ea:	ba 84       	ldd	r11, Y+10	; 0x0a
    47ec:	cb 84       	ldd	r12, Y+11	; 0x0b
    47ee:	dc 84       	ldd	r13, Y+12	; 0x0c
    47f0:	ed 84       	ldd	r14, Y+13	; 0x0d
    47f2:	fe 2c       	mov	r15, r14
    47f4:	0e 2d       	mov	r16, r14
    47f6:	1e 2d       	mov	r17, r14
    47f8:	24 2f       	mov	r18, r20
    47fa:	35 2f       	mov	r19, r21
    47fc:	40 e0       	ldi	r20, 0x00	; 0
    47fe:	50 e0       	ldi	r21, 0x00	; 0
    4800:	60 e0       	ldi	r22, 0x00	; 0
    4802:	70 e0       	ldi	r23, 0x00	; 0
    4804:	80 e0       	ldi	r24, 0x00	; 0
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	0e 94 c3 33 	call	0x6786	; 0x6786 <__muldi3>
    480c:	f2 2e       	mov	r15, r18
    480e:	03 2f       	mov	r16, r19
    4810:	14 2f       	mov	r17, r20
    4812:	b5 2f       	mov	r27, r21
    4814:	f6 2f       	mov	r31, r22
    4816:	e7 2f       	mov	r30, r23
    4818:	89 8b       	std	Y+17, r24	; 0x11
    481a:	69 2e       	mov	r6, r25
    481c:	a0 e0       	ldi	r26, 0x00	; 0
    481e:	0e 94 69 34 	call	0x68d2	; 0x68d2 <__cmpdi2_s8>
    4822:	84 f4       	brge	.+32     	; 0x4844 <get_pressure+0xd8>
    4824:	21 50       	subi	r18, 0x01	; 1
    4826:	31 09       	sbc	r19, r1
    4828:	40 48       	sbci	r20, 0x80	; 128
    482a:	5f 4f       	sbci	r21, 0xFF	; 255
    482c:	6f 4f       	sbci	r22, 0xFF	; 255
    482e:	7f 4f       	sbci	r23, 0xFF	; 255
    4830:	8f 4f       	sbci	r24, 0xFF	; 255
    4832:	9f 4f       	sbci	r25, 0xFF	; 255
    4834:	f2 2e       	mov	r15, r18
    4836:	03 2f       	mov	r16, r19
    4838:	14 2f       	mov	r17, r20
    483a:	b5 2f       	mov	r27, r21
    483c:	f6 2f       	mov	r31, r22
    483e:	e7 2f       	mov	r30, r23
    4840:	89 8b       	std	Y+17, r24	; 0x11
    4842:	69 2e       	mov	r6, r25
    4844:	2f 2d       	mov	r18, r15
    4846:	30 2f       	mov	r19, r16
    4848:	41 2f       	mov	r20, r17
    484a:	5b 2f       	mov	r21, r27
    484c:	6f 2f       	mov	r22, r31
    484e:	7e 2f       	mov	r23, r30
    4850:	89 89       	ldd	r24, Y+17	; 0x11
    4852:	96 2d       	mov	r25, r6
    4854:	07 e1       	ldi	r16, 0x17	; 23
    4856:	0e 94 2d 34 	call	0x685a	; 0x685a <__ashrdi3>
    485a:	82 2e       	mov	r8, r18
    485c:	93 2e       	mov	r9, r19
    485e:	a4 2e       	mov	r10, r20
    4860:	b5 2e       	mov	r11, r21
    4862:	a5 01       	movw	r20, r10
    4864:	94 01       	movw	r18, r8
    4866:	20 53       	subi	r18, 0x30	; 48
    4868:	38 4f       	sbci	r19, 0xF8	; 248
    486a:	4f 4f       	sbci	r20, 0xFF	; 255
    486c:	5f 4f       	sbci	r21, 0xFF	; 255
    486e:	29 8b       	std	Y+17, r18	; 0x11
    4870:	3a 8b       	std	Y+18, r19	; 0x12
    4872:	4b 8b       	std	Y+19, r20	; 0x13
	printf("TEMP: %li", TEMP);
    4874:	5c 8b       	std	Y+20, r21	; 0x14
    4876:	5f 93       	push	r21
    4878:	4f 93       	push	r20
    487a:	3f 93       	push	r19
    487c:	2f 93       	push	r18
    487e:	8e ef       	ldi	r24, 0xFE	; 254
    4880:	90 e2       	ldi	r25, 0x20	; 32
    4882:	9f 93       	push	r25
    4884:	8f 93       	push	r24
    4886:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <printf>
	
	int64_t OFF =	(int64_t)C2 * 131072 + ((int64_t)C4 * (int64_t)dT) / 64;
	int64_t SENS = (int64_t)C1 * 65536 + ((int64_t)C3 * (int64_t)dT) / 128; 
	int32_t P = ((int64_t)D1 * (int64_t)SENS / 2097152 - (int64_t)OFF) / 32768; // Gets the actual temperature and type casts it.
    488a:	40 91 59 25 	lds	r20, 0x2559	; 0x802559 <C3>
    488e:	50 91 5a 25 	lds	r21, 0x255A	; 0x80255a <C3+0x1>
    4892:	a9 84       	ldd	r10, Y+9	; 0x09
    4894:	ba 84       	ldd	r11, Y+10	; 0x0a
    4896:	cb 84       	ldd	r12, Y+11	; 0x0b
    4898:	dc 84       	ldd	r13, Y+12	; 0x0c
    489a:	ed 84       	ldd	r14, Y+13	; 0x0d
    489c:	fe 2c       	mov	r15, r14
    489e:	0e 2d       	mov	r16, r14
    48a0:	1e 2d       	mov	r17, r14
    48a2:	24 2f       	mov	r18, r20
    48a4:	35 2f       	mov	r19, r21
    48a6:	40 e0       	ldi	r20, 0x00	; 0
    48a8:	50 e0       	ldi	r21, 0x00	; 0
    48aa:	60 e0       	ldi	r22, 0x00	; 0
    48ac:	70 e0       	ldi	r23, 0x00	; 0
    48ae:	80 e0       	ldi	r24, 0x00	; 0
    48b0:	90 e0       	ldi	r25, 0x00	; 0
    48b2:	0e 94 c3 33 	call	0x6786	; 0x6786 <__muldi3>
    48b6:	f2 2e       	mov	r15, r18
    48b8:	03 2f       	mov	r16, r19
    48ba:	14 2f       	mov	r17, r20
    48bc:	b5 2f       	mov	r27, r21
    48be:	f6 2f       	mov	r31, r22
    48c0:	e7 2f       	mov	r30, r23
    48c2:	8d 8b       	std	Y+21, r24	; 0x15
    48c4:	69 2e       	mov	r6, r25
    48c6:	0f 90       	pop	r0
    48c8:	0f 90       	pop	r0
    48ca:	0f 90       	pop	r0
    48cc:	0f 90       	pop	r0
    48ce:	0f 90       	pop	r0
    48d0:	0f 90       	pop	r0
    48d2:	a0 e0       	ldi	r26, 0x00	; 0
    48d4:	0e 94 69 34 	call	0x68d2	; 0x68d2 <__cmpdi2_s8>
    48d8:	5c f4       	brge	.+22     	; 0x48f0 <get_pressure+0x184>
    48da:	af e7       	ldi	r26, 0x7F	; 127
    48dc:	0e 94 54 34 	call	0x68a8	; 0x68a8 <__adddi3_s8>
    48e0:	f2 2e       	mov	r15, r18
    48e2:	03 2f       	mov	r16, r19
    48e4:	14 2f       	mov	r17, r20
    48e6:	b5 2f       	mov	r27, r21
    48e8:	f6 2f       	mov	r31, r22
    48ea:	e7 2f       	mov	r30, r23
    48ec:	8d 8b       	std	Y+21, r24	; 0x15
    48ee:	69 2e       	mov	r6, r25
    48f0:	2f 2d       	mov	r18, r15
    48f2:	30 2f       	mov	r19, r16
    48f4:	41 2f       	mov	r20, r17
    48f6:	5b 2f       	mov	r21, r27
    48f8:	6f 2f       	mov	r22, r31
    48fa:	7e 2f       	mov	r23, r30
    48fc:	8d 89       	ldd	r24, Y+21	; 0x15
    48fe:	96 2d       	mov	r25, r6
    4900:	07 e0       	ldi	r16, 0x07	; 7
    4902:	0e 94 2d 34 	call	0x685a	; 0x685a <__ashrdi3>
    4906:	62 2e       	mov	r6, r18
    4908:	73 2e       	mov	r7, r19
    490a:	84 2e       	mov	r8, r20
    490c:	95 2e       	mov	r9, r21
    490e:	b6 2f       	mov	r27, r22
    4910:	a7 2f       	mov	r26, r23
    4912:	f8 2f       	mov	r31, r24
    4914:	e9 2f       	mov	r30, r25
    4916:	a0 90 57 25 	lds	r10, 0x2557	; 0x802557 <C1>
    491a:	b0 90 58 25 	lds	r11, 0x2558	; 0x802558 <C1+0x1>
    491e:	2a 2d       	mov	r18, r10
    4920:	3b 2d       	mov	r19, r11
    4922:	40 e0       	ldi	r20, 0x00	; 0
    4924:	50 e0       	ldi	r21, 0x00	; 0
    4926:	60 e0       	ldi	r22, 0x00	; 0
    4928:	70 e0       	ldi	r23, 0x00	; 0
    492a:	80 e0       	ldi	r24, 0x00	; 0
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	00 e1       	ldi	r16, 0x10	; 16
    4930:	0e 94 14 34 	call	0x6828	; 0x6828 <__ashldi3>
    4934:	a2 2e       	mov	r10, r18
    4936:	b3 2e       	mov	r11, r19
    4938:	c4 2e       	mov	r12, r20
    493a:	d5 2e       	mov	r13, r21
    493c:	e6 2e       	mov	r14, r22
    493e:	f7 2e       	mov	r15, r23
    4940:	08 2f       	mov	r16, r24
    4942:	19 2f       	mov	r17, r25
    4944:	26 2d       	mov	r18, r6
    4946:	37 2d       	mov	r19, r7
    4948:	48 2d       	mov	r20, r8
    494a:	59 2d       	mov	r21, r9
    494c:	6b 2f       	mov	r22, r27
    494e:	7a 2f       	mov	r23, r26
    4950:	8f 2f       	mov	r24, r31
    4952:	9e 2f       	mov	r25, r30
    4954:	0e 94 4b 34 	call	0x6896	; 0x6896 <__adddi3>
    4958:	a2 2c       	mov	r10, r2
    495a:	b3 2c       	mov	r11, r3
    495c:	c4 2c       	mov	r12, r4
    495e:	d5 2c       	mov	r13, r5
    4960:	e1 2c       	mov	r14, r1
    4962:	f1 2c       	mov	r15, r1
    4964:	00 e0       	ldi	r16, 0x00	; 0
    4966:	10 e0       	ldi	r17, 0x00	; 0
    4968:	0e 94 c3 33 	call	0x6786	; 0x6786 <__muldi3>
    496c:	f2 2e       	mov	r15, r18
    496e:	03 2f       	mov	r16, r19
    4970:	14 2f       	mov	r17, r20
    4972:	b5 2f       	mov	r27, r21
    4974:	f6 2f       	mov	r31, r22
    4976:	e7 2f       	mov	r30, r23
    4978:	58 2e       	mov	r5, r24
    497a:	69 2e       	mov	r6, r25
    497c:	a0 e0       	ldi	r26, 0x00	; 0
    497e:	0e 94 69 34 	call	0x68d2	; 0x68d2 <__cmpdi2_s8>
    4982:	84 f4       	brge	.+32     	; 0x49a4 <get_pressure+0x238>
    4984:	21 50       	subi	r18, 0x01	; 1
    4986:	31 09       	sbc	r19, r1
    4988:	40 4e       	sbci	r20, 0xE0	; 224
    498a:	5f 4f       	sbci	r21, 0xFF	; 255
    498c:	6f 4f       	sbci	r22, 0xFF	; 255
    498e:	7f 4f       	sbci	r23, 0xFF	; 255
    4990:	8f 4f       	sbci	r24, 0xFF	; 255
    4992:	9f 4f       	sbci	r25, 0xFF	; 255
    4994:	f2 2e       	mov	r15, r18
    4996:	03 2f       	mov	r16, r19
    4998:	14 2f       	mov	r17, r20
    499a:	b5 2f       	mov	r27, r21
    499c:	f6 2f       	mov	r31, r22
    499e:	e7 2f       	mov	r30, r23
    49a0:	58 2e       	mov	r5, r24
    49a2:	69 2e       	mov	r6, r25
    49a4:	2f 2d       	mov	r18, r15
    49a6:	30 2f       	mov	r19, r16
    49a8:	41 2f       	mov	r20, r17
    49aa:	5b 2f       	mov	r21, r27
    49ac:	6f 2f       	mov	r22, r31
    49ae:	7e 2f       	mov	r23, r30
    49b0:	85 2d       	mov	r24, r5
    49b2:	96 2d       	mov	r25, r6
    49b4:	05 e1       	ldi	r16, 0x15	; 21
    49b6:	0e 94 2d 34 	call	0x685a	; 0x685a <__ashrdi3>
    49ba:	62 2e       	mov	r6, r18
    49bc:	73 2e       	mov	r7, r19
    49be:	84 2e       	mov	r8, r20
    49c0:	5d 8b       	std	Y+21, r21	; 0x15
    49c2:	6e 8b       	std	Y+22, r22	; 0x16
    49c4:	7f 8b       	std	Y+23, r23	; 0x17
    49c6:	88 8f       	std	Y+24, r24	; 0x18
    49c8:	99 8f       	std	Y+25, r25	; 0x19
    49ca:	40 91 61 25 	lds	r20, 0x2561	; 0x802561 <C4>
    49ce:	50 91 62 25 	lds	r21, 0x2562	; 0x802562 <C4+0x1>
    49d2:	a9 84       	ldd	r10, Y+9	; 0x09
    49d4:	ba 84       	ldd	r11, Y+10	; 0x0a
    49d6:	cb 84       	ldd	r12, Y+11	; 0x0b
    49d8:	dc 84       	ldd	r13, Y+12	; 0x0c
    49da:	ed 84       	ldd	r14, Y+13	; 0x0d
    49dc:	fe 2c       	mov	r15, r14
    49de:	0e 2d       	mov	r16, r14
    49e0:	1e 2d       	mov	r17, r14
    49e2:	24 2f       	mov	r18, r20
    49e4:	35 2f       	mov	r19, r21
    49e6:	40 e0       	ldi	r20, 0x00	; 0
    49e8:	50 e0       	ldi	r21, 0x00	; 0
    49ea:	60 e0       	ldi	r22, 0x00	; 0
    49ec:	70 e0       	ldi	r23, 0x00	; 0
    49ee:	80 e0       	ldi	r24, 0x00	; 0
    49f0:	90 e0       	ldi	r25, 0x00	; 0
    49f2:	0e 94 c3 33 	call	0x6786	; 0x6786 <__muldi3>
    49f6:	e2 2f       	mov	r30, r18
    49f8:	53 2e       	mov	r5, r19
    49fa:	44 2e       	mov	r4, r20
    49fc:	35 2e       	mov	r3, r21
    49fe:	26 2e       	mov	r2, r22
    4a00:	97 2e       	mov	r9, r23
    4a02:	a8 2e       	mov	r10, r24
    4a04:	b9 2e       	mov	r11, r25
    4a06:	a0 e0       	ldi	r26, 0x00	; 0
    4a08:	0e 94 69 34 	call	0x68d2	; 0x68d2 <__cmpdi2_s8>
    4a0c:	5c f4       	brge	.+22     	; 0x4a24 <get_pressure+0x2b8>
    4a0e:	af e3       	ldi	r26, 0x3F	; 63
    4a10:	0e 94 54 34 	call	0x68a8	; 0x68a8 <__adddi3_s8>
    4a14:	e2 2f       	mov	r30, r18
    4a16:	53 2e       	mov	r5, r19
    4a18:	44 2e       	mov	r4, r20
    4a1a:	35 2e       	mov	r3, r21
    4a1c:	26 2e       	mov	r2, r22
    4a1e:	97 2e       	mov	r9, r23
    4a20:	a8 2e       	mov	r10, r24
    4a22:	b9 2e       	mov	r11, r25
    4a24:	2e 2f       	mov	r18, r30
    4a26:	35 2d       	mov	r19, r5
    4a28:	44 2d       	mov	r20, r4
    4a2a:	53 2d       	mov	r21, r3
    4a2c:	62 2d       	mov	r22, r2
    4a2e:	79 2d       	mov	r23, r9
    4a30:	8a 2d       	mov	r24, r10
    4a32:	9b 2d       	mov	r25, r11
    4a34:	06 e0       	ldi	r16, 0x06	; 6
    4a36:	0e 94 2d 34 	call	0x685a	; 0x685a <__ashrdi3>
    4a3a:	22 2e       	mov	r2, r18
    4a3c:	33 2e       	mov	r3, r19
    4a3e:	44 2e       	mov	r4, r20
    4a40:	55 2e       	mov	r5, r21
    4a42:	b6 2f       	mov	r27, r22
    4a44:	a7 2f       	mov	r26, r23
    4a46:	f8 2f       	mov	r31, r24
    4a48:	e9 2f       	mov	r30, r25
    4a4a:	a0 90 5b 25 	lds	r10, 0x255B	; 0x80255b <C2>
    4a4e:	b0 90 5c 25 	lds	r11, 0x255C	; 0x80255c <C2+0x1>
    4a52:	2a 2d       	mov	r18, r10
    4a54:	3b 2d       	mov	r19, r11
    4a56:	40 e0       	ldi	r20, 0x00	; 0
    4a58:	50 e0       	ldi	r21, 0x00	; 0
    4a5a:	60 e0       	ldi	r22, 0x00	; 0
    4a5c:	70 e0       	ldi	r23, 0x00	; 0
    4a5e:	80 e0       	ldi	r24, 0x00	; 0
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	01 e1       	ldi	r16, 0x11	; 17
    4a64:	0e 94 14 34 	call	0x6828	; 0x6828 <__ashldi3>
    4a68:	a2 2e       	mov	r10, r18
    4a6a:	b3 2e       	mov	r11, r19
    4a6c:	c4 2e       	mov	r12, r20
    4a6e:	d5 2e       	mov	r13, r21
    4a70:	e6 2e       	mov	r14, r22
    4a72:	f7 2e       	mov	r15, r23
    4a74:	08 2f       	mov	r16, r24
    4a76:	19 2f       	mov	r17, r25
    4a78:	22 2d       	mov	r18, r2
    4a7a:	33 2d       	mov	r19, r3
    4a7c:	44 2d       	mov	r20, r4
    4a7e:	55 2d       	mov	r21, r5
    4a80:	6b 2f       	mov	r22, r27
    4a82:	7a 2f       	mov	r23, r26
    4a84:	8f 2f       	mov	r24, r31
    4a86:	9e 2f       	mov	r25, r30
    4a88:	0e 94 4b 34 	call	0x6896	; 0x6896 <__adddi3>
    4a8c:	a2 2e       	mov	r10, r18
    4a8e:	b3 2e       	mov	r11, r19
    4a90:	c4 2e       	mov	r12, r20
    4a92:	d5 2e       	mov	r13, r21
    4a94:	e6 2e       	mov	r14, r22
    4a96:	f7 2e       	mov	r15, r23
    4a98:	08 2f       	mov	r16, r24
    4a9a:	19 2f       	mov	r17, r25
    4a9c:	26 2d       	mov	r18, r6
    4a9e:	37 2d       	mov	r19, r7
    4aa0:	48 2d       	mov	r20, r8
    4aa2:	5d 89       	ldd	r21, Y+21	; 0x15
    4aa4:	6e 89       	ldd	r22, Y+22	; 0x16
    4aa6:	7f 89       	ldd	r23, Y+23	; 0x17
    4aa8:	88 8d       	ldd	r24, Y+24	; 0x18
    4aaa:	99 8d       	ldd	r25, Y+25	; 0x19
    4aac:	0e 94 60 34 	call	0x68c0	; 0x68c0 <__subdi3>
    4ab0:	f2 2e       	mov	r15, r18
    4ab2:	03 2f       	mov	r16, r19
    4ab4:	14 2f       	mov	r17, r20
    4ab6:	b5 2f       	mov	r27, r21
    4ab8:	f6 2f       	mov	r31, r22
    4aba:	e7 2f       	mov	r30, r23
    4abc:	58 2e       	mov	r5, r24
    4abe:	69 2e       	mov	r6, r25
    4ac0:	a0 e0       	ldi	r26, 0x00	; 0
    4ac2:	0e 94 69 34 	call	0x68d2	; 0x68d2 <__cmpdi2_s8>
    4ac6:	84 f4       	brge	.+32     	; 0x4ae8 <get_pressure+0x37c>
    4ac8:	21 50       	subi	r18, 0x01	; 1
    4aca:	30 48       	sbci	r19, 0x80	; 128
    4acc:	4f 4f       	sbci	r20, 0xFF	; 255
    4ace:	5f 4f       	sbci	r21, 0xFF	; 255
    4ad0:	6f 4f       	sbci	r22, 0xFF	; 255
    4ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ad4:	8f 4f       	sbci	r24, 0xFF	; 255
    4ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ad8:	f2 2e       	mov	r15, r18
    4ada:	03 2f       	mov	r16, r19
    4adc:	14 2f       	mov	r17, r20
    4ade:	b5 2f       	mov	r27, r21
    4ae0:	f6 2f       	mov	r31, r22
    4ae2:	e7 2f       	mov	r30, r23
    4ae4:	58 2e       	mov	r5, r24
    4ae6:	69 2e       	mov	r6, r25
    4ae8:	2f 2d       	mov	r18, r15
    4aea:	30 2f       	mov	r19, r16
    4aec:	41 2f       	mov	r20, r17
    4aee:	5b 2f       	mov	r21, r27
    4af0:	6f 2f       	mov	r22, r31
    4af2:	7e 2f       	mov	r23, r30
    4af4:	85 2d       	mov	r24, r5
    4af6:	96 2d       	mov	r25, r6
    4af8:	0f e0       	ldi	r16, 0x0F	; 15
    4afa:	0e 94 2d 34 	call	0x685a	; 0x685a <__ashrdi3>
    4afe:	62 2f       	mov	r22, r18
    4b00:	73 2f       	mov	r23, r19
	//printf("Test: %lld\n", test);
	//int32_t P = 0;
	PressData pd;
	pd.TEMP = TEMP;
	pd.P = P;
	return pd;
    4b02:	94 2f       	mov	r25, r20
    4b04:	c9 88       	ldd	r12, Y+17	; 0x11
    4b06:	da 88       	ldd	r13, Y+18	; 0x12
    4b08:	eb 88       	ldd	r14, Y+19	; 0x13
    4b0a:	fc 88       	ldd	r15, Y+20	; 0x14
    4b0c:	c9 82       	std	Y+1, r12	; 0x01
    4b0e:	da 82       	std	Y+2, r13	; 0x02
    4b10:	eb 82       	std	Y+3, r14	; 0x03
    4b12:	fc 82       	std	Y+4, r15	; 0x04
    4b14:	2d 83       	std	Y+5, r18	; 0x05
    4b16:	3e 83       	std	Y+6, r19	; 0x06
    4b18:	4f 83       	std	Y+7, r20	; 0x07
    4b1a:	58 87       	std	Y+8, r21	; 0x08
    4b1c:	29 89       	ldd	r18, Y+17	; 0x11
    4b1e:	3a 81       	ldd	r19, Y+2	; 0x02
    4b20:	4b 81       	ldd	r20, Y+3	; 0x03
}
    4b22:	5c 81       	ldd	r21, Y+4	; 0x04
    4b24:	89 2f       	mov	r24, r25
    4b26:	98 85       	ldd	r25, Y+8	; 0x08
    4b28:	69 96       	adiw	r28, 0x19	; 25
    4b2a:	cd bf       	out	0x3d, r28	; 61
    4b2c:	de bf       	out	0x3e, r29	; 62
    4b2e:	df 91       	pop	r29
    4b30:	cf 91       	pop	r28
    4b32:	1f 91       	pop	r17
    4b34:	0f 91       	pop	r16
    4b36:	ff 90       	pop	r15
    4b38:	ef 90       	pop	r14
    4b3a:	df 90       	pop	r13
    4b3c:	cf 90       	pop	r12
    4b3e:	bf 90       	pop	r11
    4b40:	af 90       	pop	r10
    4b42:	9f 90       	pop	r9
    4b44:	8f 90       	pop	r8
    4b46:	7f 90       	pop	r7
    4b48:	6f 90       	pop	r6
    4b4a:	5f 90       	pop	r5
    4b4c:	4f 90       	pop	r4
    4b4e:	3f 90       	pop	r3
    4b50:	2f 90       	pop	r2
    4b52:	08 95       	ret

00004b54 <adc_init>:
#include <asf.h>
#include <math.h>
#include "thermistor.h"


void adc_init(void){	//This is for PA6... mostly
    4b54:	ff 92       	push	r15
    4b56:	0f 93       	push	r16
    4b58:	1f 93       	push	r17
    4b5a:	cf 93       	push	r28
    4b5c:	df 93       	push	r29
	PORTA.DIRCLR = 0b01000000;
    4b5e:	e0 e0       	ldi	r30, 0x00	; 0
    4b60:	f6 e0       	ldi	r31, 0x06	; 6
    4b62:	80 e4       	ldi	r24, 0x40	; 64
    4b64:	82 83       	std	Z+2, r24	; 0x02
	PORTA.DIR = 0b10111111;
    4b66:	8f eb       	ldi	r24, 0xBF	; 191
    4b68:	80 83       	st	Z, r24
	ADCA.CTRLA = 0b00000001;
    4b6a:	c0 e0       	ldi	r28, 0x00	; 0
    4b6c:	d2 e0       	ldi	r29, 0x02	; 2
    4b6e:	ff 24       	eor	r15, r15
    4b70:	f3 94       	inc	r15
    4b72:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000;
    4b74:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000;
    4b76:	80 e1       	ldi	r24, 0x10	; 16
    4b78:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101;
    4b7a:	85 e0       	ldi	r24, 0x05	; 5
    4b7c:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    4b7e:	61 e2       	ldi	r22, 0x21	; 33
    4b80:	70 e0       	ldi	r23, 0x00	; 0
    4b82:	82 e0       	ldi	r24, 0x02	; 2
    4b84:	0e 94 e5 18 	call	0x31ca	; 0x31ca <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    4b88:	08 2f       	mov	r16, r24
    4b8a:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    4b8c:	10 2f       	mov	r17, r16
    4b8e:	00 27       	eor	r16, r16
    4b90:	60 e2       	ldi	r22, 0x20	; 32
    4b92:	70 e0       	ldi	r23, 0x00	; 0
    4b94:	82 e0       	ldi	r24, 0x02	; 2
    4b96:	0e 94 e5 18 	call	0x31ca	; 0x31ca <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    4b9a:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    4b9c:	0c 87       	std	Y+12, r16	; 0x0c
    4b9e:	1d 87       	std	Y+13, r17	; 0x0d
	
	ADCA.CH0.CTRL = 0b00000001;
    4ba0:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000110;
    4ba2:	86 e0       	ldi	r24, 0x06	; 6
    4ba4:	89 a3       	std	Y+33, r24	; 0x21
}
    4ba6:	df 91       	pop	r29
    4ba8:	cf 91       	pop	r28
    4baa:	1f 91       	pop	r17
    4bac:	0f 91       	pop	r16
    4bae:	ff 90       	pop	r15
    4bb0:	08 95       	ret

00004bb2 <buzzer_counter_init>:
	   //TCA0.CCC = TCA0.PER-(TCA0.PER/10);
	   //TCD0.CCA = TCD0.PER*((float)duty_cycle/100);
   }
   
void buzzer_counter_init(uint16_t period, uint16_t duty_cycle){
	  TCC0.CTRLA = 0b00000101; //div/64
    4bb2:	e0 e0       	ldi	r30, 0x00	; 0
    4bb4:	f8 e0       	ldi	r31, 0x08	; 8
    4bb6:	25 e0       	ldi	r18, 0x05	; 5
    4bb8:	20 83       	st	Z, r18
	  TCC0.CTRLB = 0b00000011;
    4bba:	23 e0       	ldi	r18, 0x03	; 3
    4bbc:	21 83       	std	Z+1, r18	; 0x01
	  TCC0.PER = (uint16_t)(period);
    4bbe:	86 a3       	std	Z+38, r24	; 0x26
    4bc0:	97 a3       	std	Z+39, r25	; 0x27
    4bc2:	08 95       	ret

00004bc4 <servo_counter>:

  }
  
void servo_counter(float duty_cycle){
    4bc4:	8f 92       	push	r8
    4bc6:	9f 92       	push	r9
    4bc8:	af 92       	push	r10
    4bca:	bf 92       	push	r11
    4bcc:	cf 92       	push	r12
    4bce:	df 92       	push	r13
    4bd0:	ef 92       	push	r14
    4bd2:	ff 92       	push	r15
    4bd4:	cf 93       	push	r28
    4bd6:	df 93       	push	r29
    4bd8:	6b 01       	movw	r12, r22
    4bda:	7c 01       	movw	r14, r24
	float hertz = 50; // Arbitrary hertz value, since we're using PWM, should be a 1ms period.
	uint16_t blink_period = (uint16_t)(32000000 / (1024 * hertz) - 1);
	TCE0.CTRLA = 0b00000101;
    4bdc:	c0 e0       	ldi	r28, 0x00	; 0
    4bde:	da e0       	ldi	r29, 0x0A	; 10
    4be0:	85 e0       	ldi	r24, 0x05	; 5
    4be2:	88 83       	st	Y, r24
	TCE0.CTRLB = 0b00000011;
    4be4:	83 e0       	ldi	r24, 0x03	; 3
    4be6:	89 83       	std	Y+1, r24	; 0x01
	TCE0.PER = (uint16_t)(blink_period);
    4be8:	80 e7       	ldi	r24, 0x70	; 112
    4bea:	92 e0       	ldi	r25, 0x02	; 2
    4bec:	8e a3       	std	Y+38, r24	; 0x26
    4bee:	9f a3       	std	Y+39, r25	; 0x27
	TCE0.CCA = TCE0.PER * (1-duty_cycle);
    4bf0:	6e a1       	ldd	r22, Y+38	; 0x26
    4bf2:	7f a1       	ldd	r23, Y+39	; 0x27
    4bf4:	80 e0       	ldi	r24, 0x00	; 0
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	0e 94 2b 2e 	call	0x5c56	; 0x5c56 <__floatunsisf>
    4bfc:	4b 01       	movw	r8, r22
    4bfe:	5c 01       	movw	r10, r24
    4c00:	a7 01       	movw	r20, r14
    4c02:	96 01       	movw	r18, r12
    4c04:	60 e0       	ldi	r22, 0x00	; 0
    4c06:	70 e0       	ldi	r23, 0x00	; 0
    4c08:	80 e8       	ldi	r24, 0x80	; 128
    4c0a:	9f e3       	ldi	r25, 0x3F	; 63
    4c0c:	c0 d6       	rcall	.+3456   	; 0x598e <__subsf3>
    4c0e:	9b 01       	movw	r18, r22
    4c10:	ac 01       	movw	r20, r24
    4c12:	c5 01       	movw	r24, r10
    4c14:	b4 01       	movw	r22, r8
    4c16:	0e 94 0d 2f 	call	0x5e1a	; 0x5e1a <__mulsf3>
    4c1a:	f1 d7       	rcall	.+4066   	; 0x5bfe <__fixunssfsi>
    4c1c:	68 a7       	std	Y+40, r22	; 0x28
    4c1e:	79 a7       	std	Y+41, r23	; 0x29
  }
    4c20:	df 91       	pop	r29
    4c22:	cf 91       	pop	r28
    4c24:	ff 90       	pop	r15
    4c26:	ef 90       	pop	r14
    4c28:	df 90       	pop	r13
    4c2a:	cf 90       	pop	r12
    4c2c:	bf 90       	pop	r11
    4c2e:	af 90       	pop	r10
    4c30:	9f 90       	pop	r9
    4c32:	8f 90       	pop	r8
    4c34:	08 95       	ret

00004c36 <__vector_14>:
	tc_write_period(&TCE0, period);
	tc_write_cc(&TCE0, TC_CCA, on);
	tc_write_cc(&TCE0, TC_CCB, off);
}*/

ISR(TCC0_OVF_vect){
    4c36:	1f 92       	push	r1
    4c38:	0f 92       	push	r0
    4c3a:	0f b6       	in	r0, 0x3f	; 63
    4c3c:	0f 92       	push	r0
    4c3e:	11 24       	eor	r1, r1
    4c40:	08 b6       	in	r0, 0x38	; 56
    4c42:	0f 92       	push	r0
    4c44:	18 be       	out	0x38, r1	; 56
    4c46:	8f 93       	push	r24
	PORTB.OUTTGL = 0b00000001;
    4c48:	81 e0       	ldi	r24, 0x01	; 1
    4c4a:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <__TEXT_REGION_LENGTH__+0x700627>
//	printf("buzz");
//	PORTA.OUTTGL = 0b00000111;
}
    4c4e:	8f 91       	pop	r24
    4c50:	0f 90       	pop	r0
    4c52:	08 be       	out	0x38, r0	; 56
    4c54:	0f 90       	pop	r0
    4c56:	0f be       	out	0x3f, r0	; 63
    4c58:	0f 90       	pop	r0
    4c5a:	1f 90       	pop	r1
    4c5c:	18 95       	reti

00004c5e <__vector_77>:


ISR(TCD0_OVF_vect){
    4c5e:	1f 92       	push	r1
    4c60:	0f 92       	push	r0
    4c62:	0f b6       	in	r0, 0x3f	; 63
    4c64:	0f 92       	push	r0
    4c66:	11 24       	eor	r1, r1
    4c68:	08 b6       	in	r0, 0x38	; 56
    4c6a:	0f 92       	push	r0
    4c6c:	18 be       	out	0x38, r1	; 56
    4c6e:	8f 93       	push	r24
 	PORTA.OUTTGL = 0b00011110;
    4c70:	8e e1       	ldi	r24, 0x1E	; 30
    4c72:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <__TEXT_REGION_LENGTH__+0x700607>
    4c76:	8f 91       	pop	r24
    4c78:	0f 90       	pop	r0
    4c7a:	08 be       	out	0x38, r0	; 56
    4c7c:	0f 90       	pop	r0
    4c7e:	0f be       	out	0x3f, r0	; 63
    4c80:	0f 90       	pop	r0
    4c82:	1f 90       	pop	r1
    4c84:	18 95       	reti

00004c86 <usart_serial_getchar>:
		read_buffer[loc] = usart_getchar(usart_channel);
		loc++;
		
	}
	return read_buffer;
}
    4c86:	cf 93       	push	r28
    4c88:	df 93       	push	r29
    4c8a:	eb 01       	movw	r28, r22
    4c8c:	0e 94 f7 18 	call	0x31ee	; 0x31ee <usart_getchar>
    4c90:	88 83       	st	Y, r24
    4c92:	df 91       	pop	r29
    4c94:	cf 91       	pop	r28
    4c96:	08 95       	ret

00004c98 <usart_serial_putchar>:
    4c98:	0c 94 ef 18 	jmp	0x31de	; 0x31de <usart_putchar>
    4c9c:	08 95       	ret

00004c9e <usart_init>:
    4c9e:	cf 93       	push	r28
    4ca0:	df 93       	push	r29
    4ca2:	cd b7       	in	r28, 0x3d	; 61
    4ca4:	de b7       	in	r29, 0x3e	; 62
    4ca6:	27 97       	sbiw	r28, 0x07	; 7
    4ca8:	cd bf       	out	0x3d, r28	; 61
    4caa:	de bf       	out	0x3e, r29	; 62
    4cac:	e0 e6       	ldi	r30, 0x60	; 96
    4cae:	f6 e0       	ldi	r31, 0x06	; 6
    4cb0:	88 e0       	ldi	r24, 0x08	; 8
    4cb2:	81 83       	std	Z+1, r24	; 0x01
    4cb4:	85 83       	std	Z+5, r24	; 0x05
    4cb6:	e0 e4       	ldi	r30, 0x40	; 64
    4cb8:	f6 e0       	ldi	r31, 0x06	; 6
    4cba:	81 83       	std	Z+1, r24	; 0x01
    4cbc:	85 83       	std	Z+5, r24	; 0x05
    4cbe:	80 ea       	ldi	r24, 0xA0	; 160
    4cc0:	99 e0       	ldi	r25, 0x09	; 9
    4cc2:	80 93 4d 25 	sts	0x254D, r24	; 0x80254d <stdio_base>
    4cc6:	90 93 4e 25 	sts	0x254E, r25	; 0x80254e <stdio_base+0x1>
    4cca:	8c e4       	ldi	r24, 0x4C	; 76
    4ccc:	96 e2       	ldi	r25, 0x26	; 38
    4cce:	80 93 4b 25 	sts	0x254B, r24	; 0x80254b <ptr_put>
    4cd2:	90 93 4c 25 	sts	0x254C, r25	; 0x80254c <ptr_put+0x1>
    4cd6:	83 e4       	ldi	r24, 0x43	; 67
    4cd8:	96 e2       	ldi	r25, 0x26	; 38
    4cda:	80 93 49 25 	sts	0x2549, r24	; 0x802549 <ptr_get>
    4cde:	90 93 4a 25 	sts	0x254A, r25	; 0x80254a <ptr_get+0x1>
    4ce2:	e9 e3       	ldi	r30, 0x39	; 57
    4ce4:	f0 e2       	ldi	r31, 0x20	; 32
    4ce6:	84 81       	ldd	r24, Z+4	; 0x04
    4ce8:	8d 83       	std	Y+5, r24	; 0x05
    4cea:	85 81       	ldd	r24, Z+5	; 0x05
    4cec:	8e 83       	std	Y+6, r24	; 0x06
    4cee:	86 81       	ldd	r24, Z+6	; 0x06
    4cf0:	8f 83       	std	Y+7, r24	; 0x07
    4cf2:	80 81       	ld	r24, Z
    4cf4:	91 81       	ldd	r25, Z+1	; 0x01
    4cf6:	a2 81       	ldd	r26, Z+2	; 0x02
    4cf8:	b3 81       	ldd	r27, Z+3	; 0x03
    4cfa:	89 83       	std	Y+1, r24	; 0x01
    4cfc:	9a 83       	std	Y+2, r25	; 0x02
    4cfe:	ab 83       	std	Y+3, r26	; 0x03
    4d00:	bc 83       	std	Y+4, r27	; 0x04
    4d02:	60 e1       	ldi	r22, 0x10	; 16
    4d04:	84 e0       	ldi	r24, 0x04	; 4
    4d06:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4d0a:	be 01       	movw	r22, r28
    4d0c:	6f 5f       	subi	r22, 0xFF	; 255
    4d0e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d10:	80 ea       	ldi	r24, 0xA0	; 160
    4d12:	99 e0       	ldi	r25, 0x09	; 9
    4d14:	0e 94 10 1a 	call	0x3420	; 0x3420 <usart_init_rs232>
    4d18:	6c ec       	ldi	r22, 0xCC	; 204
    4d1a:	76 e1       	ldi	r23, 0x16	; 22
    4d1c:	85 ee       	ldi	r24, 0xE5	; 229
    4d1e:	96 e1       	ldi	r25, 0x16	; 22
    4d20:	0e 94 6d 35 	call	0x6ada	; 0x6ada <fdevopen>
    4d24:	e2 e3       	ldi	r30, 0x32	; 50
    4d26:	f0 e2       	ldi	r31, 0x20	; 32
    4d28:	84 81       	ldd	r24, Z+4	; 0x04
    4d2a:	8d 83       	std	Y+5, r24	; 0x05
    4d2c:	85 81       	ldd	r24, Z+5	; 0x05
    4d2e:	8e 83       	std	Y+6, r24	; 0x06
    4d30:	86 81       	ldd	r24, Z+6	; 0x06
    4d32:	8f 83       	std	Y+7, r24	; 0x07
    4d34:	80 81       	ld	r24, Z
    4d36:	91 81       	ldd	r25, Z+1	; 0x01
    4d38:	a2 81       	ldd	r26, Z+2	; 0x02
    4d3a:	b3 81       	ldd	r27, Z+3	; 0x03
    4d3c:	89 83       	std	Y+1, r24	; 0x01
    4d3e:	9a 83       	std	Y+2, r25	; 0x02
    4d40:	ab 83       	std	Y+3, r26	; 0x03
    4d42:	bc 83       	std	Y+4, r27	; 0x04
    4d44:	60 e1       	ldi	r22, 0x10	; 16
    4d46:	83 e0       	ldi	r24, 0x03	; 3
    4d48:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4d4c:	be 01       	movw	r22, r28
    4d4e:	6f 5f       	subi	r22, 0xFF	; 255
    4d50:	7f 4f       	sbci	r23, 0xFF	; 255
    4d52:	80 ea       	ldi	r24, 0xA0	; 160
    4d54:	98 e0       	ldi	r25, 0x08	; 8
    4d56:	0e 94 10 1a 	call	0x3420	; 0x3420 <usart_init_rs232>
    4d5a:	27 96       	adiw	r28, 0x07	; 7
    4d5c:	cd bf       	out	0x3d, r28	; 61
    4d5e:	de bf       	out	0x3e, r29	; 62
    4d60:	df 91       	pop	r29
    4d62:	cf 91       	pop	r28
    4d64:	08 95       	ret

00004d66 <__vector_88>:
	
ISR(USARTD0_RXC_vect){
    4d66:	1f 92       	push	r1
    4d68:	0f 92       	push	r0
    4d6a:	0f b6       	in	r0, 0x3f	; 63
    4d6c:	0f 92       	push	r0
    4d6e:	11 24       	eor	r1, r1
    4d70:	08 b6       	in	r0, 0x38	; 56
    4d72:	0f 92       	push	r0
    4d74:	18 be       	out	0x38, r1	; 56
    4d76:	09 b6       	in	r0, 0x39	; 57
    4d78:	0f 92       	push	r0
    4d7a:	19 be       	out	0x39, r1	; 57
    4d7c:	0b b6       	in	r0, 0x3b	; 59
    4d7e:	0f 92       	push	r0
    4d80:	1b be       	out	0x3b, r1	; 59
    4d82:	2f 93       	push	r18
    4d84:	3f 93       	push	r19
    4d86:	4f 93       	push	r20
    4d88:	5f 93       	push	r21
    4d8a:	6f 93       	push	r22
    4d8c:	7f 93       	push	r23
    4d8e:	8f 93       	push	r24
    4d90:	9f 93       	push	r25
    4d92:	af 93       	push	r26
    4d94:	bf 93       	push	r27
    4d96:	ef 93       	push	r30
    4d98:	ff 93       	push	r31
	//If we send reset things to the board
	xbee_rx_temporary = usart_getchar(&USARTD0);
    4d9a:	80 ea       	ldi	r24, 0xA0	; 160
    4d9c:	99 e0       	ldi	r25, 0x09	; 9
    4d9e:	0e 94 f7 18 	call	0x31ee	; 0x31ee <usart_getchar>
    4da2:	80 93 63 25 	sts	0x2563, r24	; 0x802563 <xbee_rx_temporary>
	
	switch(xbee_rx_temporary){
    4da6:	e0 91 63 25 	lds	r30, 0x2563	; 0x802563 <xbee_rx_temporary>
    4daa:	8e 2f       	mov	r24, r30
    4dac:	ee 0f       	add	r30, r30
    4dae:	99 0b       	sbc	r25, r25
    4db0:	aa 0b       	sbc	r26, r26
    4db2:	bb 0b       	sbc	r27, r27
    4db4:	fc 01       	movw	r30, r24
    4db6:	b1 97       	sbiw	r30, 0x21	; 33
    4db8:	ef 33       	cpi	r30, 0x3F	; 63
    4dba:	f1 05       	cpc	r31, r1
    4dbc:	38 f5       	brcc	.+78     	; 0x4e0c <__vector_88+0xa6>
    4dbe:	88 27       	eor	r24, r24
    4dc0:	e2 50       	subi	r30, 0x02	; 2
    4dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    4dc6:	0c 94 9f 33 	jmp	0x673e	; 0x673e <__tablejump2__>
		case '!':						//reset MCU 
			wdt_reset_mcu();
    4dca:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <wdt_reset_mcu>
			break;
    4dce:	1e c0       	rjmp	.+60     	; 0x4e0c <__vector_88+0xa6>
		case '@':						//change to flight state 0
			state = 0;
    4dd0:	10 92 64 25 	sts	0x2564, r1	; 0x802564 <state>
			break;
    4dd4:	1b c0       	rjmp	.+54     	; 0x4e0c <__vector_88+0xa6>
		case '#':						//change to flight state 1
			state = 1;
    4dd6:	81 e0       	ldi	r24, 0x01	; 1
    4dd8:	80 93 64 25 	sts	0x2564, r24	; 0x802564 <state>
			break;
    4ddc:	17 c0       	rjmp	.+46     	; 0x4e0c <__vector_88+0xa6>
		case '$':						//change to flight state 2
			state = 2;
    4dde:	82 e0       	ldi	r24, 0x02	; 2
    4de0:	80 93 64 25 	sts	0x2564, r24	; 0x802564 <state>
			break;
    4de4:	13 c0       	rjmp	.+38     	; 0x4e0c <__vector_88+0xa6>
		case '%':						//change to flight state 3
			state = 3;
    4de6:	83 e0       	ldi	r24, 0x03	; 3
    4de8:	80 93 64 25 	sts	0x2564, r24	; 0x802564 <state>
			break;
    4dec:	0f c0       	rjmp	.+30     	; 0x4e0c <__vector_88+0xa6>
		case '^':						//deploy heatshield
			heatshield_hotwire();
    4dee:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <heatshield_hotwire>
			break;
    4df2:	0c c0       	rjmp	.+24     	; 0x4e0c <__vector_88+0xa6>
		case '&':						//deploy parachute
			parachute_hotwire();
    4df4:	0e 94 d5 1e 	call	0x3daa	; 0x3daa <parachute_hotwire>
			break;
    4df8:	09 c0       	rjmp	.+18     	; 0x4e0c <__vector_88+0xa6>
		case '*':						//detatching heatshield
			heatshield_detatch_hotwire();
    4dfa:	0e 94 ea 1e 	call	0x3dd4	; 0x3dd4 <heatshield_detatch_hotwire>
			break;
    4dfe:	06 c0       	rjmp	.+12     	; 0x4e0c <__vector_88+0xa6>
		case '(':						//buzzer on
			buzzer_on();
    4e00:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <buzzer_on>
			break;
		case ')':						//buzzer off
			buzzer_off();
			break;
		case '_':						//camera on
			camera_on();
    4e04:	03 c0       	rjmp	.+6      	; 0x4e0c <__vector_88+0xa6>
    4e06:	04 d8       	rcall	.-4088   	; 0x3e10 <buzzer_off>
			break;
	}
	
}
    4e08:	01 c0       	rjmp	.+2      	; 0x4e0c <__vector_88+0xa6>
    4e0a:	0b d8       	rcall	.-4074   	; 0x3e22 <camera_on>
    4e0c:	ff 91       	pop	r31
    4e0e:	ef 91       	pop	r30
    4e10:	bf 91       	pop	r27
    4e12:	af 91       	pop	r26
    4e14:	9f 91       	pop	r25
    4e16:	8f 91       	pop	r24
    4e18:	7f 91       	pop	r23
    4e1a:	6f 91       	pop	r22
    4e1c:	5f 91       	pop	r21
    4e1e:	4f 91       	pop	r20
    4e20:	3f 91       	pop	r19
    4e22:	2f 91       	pop	r18
    4e24:	0f 90       	pop	r0
    4e26:	0b be       	out	0x3b, r0	; 59
    4e28:	0f 90       	pop	r0
    4e2a:	09 be       	out	0x39, r0	; 57
    4e2c:	0f 90       	pop	r0
    4e2e:	08 be       	out	0x38, r0	; 56
    4e30:	0f 90       	pop	r0
    4e32:	0f be       	out	0x3f, r0	; 63
    4e34:	0f 90       	pop	r0
    4e36:	1f 90       	pop	r1
    4e38:	18 95       	reti

00004e3a <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    4e3a:	04 c0       	rjmp	.+8      	; 0x4e44 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    4e3c:	61 50       	subi	r22, 0x01	; 1
    4e3e:	71 09       	sbc	r23, r1
    4e40:	81 09       	sbc	r24, r1
    4e42:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    4e44:	61 15       	cp	r22, r1
    4e46:	71 05       	cpc	r23, r1
    4e48:	81 05       	cpc	r24, r1
    4e4a:	91 05       	cpc	r25, r1
    4e4c:	b9 f7       	brne	.-18     	; 0x4e3c <__portable_avr_delay_cycles+0x2>
    4e4e:	08 95       	ret

00004e50 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    4e50:	00 97       	sbiw	r24, 0x00	; 0
    4e52:	09 f4       	brne	.+2      	; 0x4e56 <sysclk_enable_peripheral_clock+0x6>
    4e54:	5c c1       	rjmp	.+696    	; 0x510e <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    4e56:	80 3c       	cpi	r24, 0xC0	; 192
    4e58:	91 05       	cpc	r25, r1
    4e5a:	29 f4       	brne	.+10     	; 0x4e66 <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    4e5c:	60 e1       	ldi	r22, 0x10	; 16
    4e5e:	80 e0       	ldi	r24, 0x00	; 0
    4e60:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4e64:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    4e66:	80 34       	cpi	r24, 0x40	; 64
    4e68:	24 e0       	ldi	r18, 0x04	; 4
    4e6a:	92 07       	cpc	r25, r18
    4e6c:	29 f4       	brne	.+10     	; 0x4e78 <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    4e6e:	68 e0       	ldi	r22, 0x08	; 8
    4e70:	80 e0       	ldi	r24, 0x00	; 0
    4e72:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4e76:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    4e78:	81 15       	cp	r24, r1
    4e7a:	24 e0       	ldi	r18, 0x04	; 4
    4e7c:	92 07       	cpc	r25, r18
    4e7e:	29 f4       	brne	.+10     	; 0x4e8a <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    4e80:	64 e0       	ldi	r22, 0x04	; 4
    4e82:	80 e0       	ldi	r24, 0x00	; 0
    4e84:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4e88:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    4e8a:	80 38       	cpi	r24, 0x80	; 128
    4e8c:	21 e0       	ldi	r18, 0x01	; 1
    4e8e:	92 07       	cpc	r25, r18
    4e90:	29 f4       	brne	.+10     	; 0x4e9c <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    4e92:	62 e0       	ldi	r22, 0x02	; 2
    4e94:	80 e0       	ldi	r24, 0x00	; 0
    4e96:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4e9a:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    4e9c:	81 15       	cp	r24, r1
    4e9e:	21 e0       	ldi	r18, 0x01	; 1
    4ea0:	92 07       	cpc	r25, r18
    4ea2:	29 f4       	brne	.+10     	; 0x4eae <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    4ea4:	61 e0       	ldi	r22, 0x01	; 1
    4ea6:	80 e0       	ldi	r24, 0x00	; 0
    4ea8:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4eac:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    4eae:	80 38       	cpi	r24, 0x80	; 128
    4eb0:	23 e0       	ldi	r18, 0x03	; 3
    4eb2:	92 07       	cpc	r25, r18
    4eb4:	29 f4       	brne	.+10     	; 0x4ec0 <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    4eb6:	61 e0       	ldi	r22, 0x01	; 1
    4eb8:	81 e0       	ldi	r24, 0x01	; 1
    4eba:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4ebe:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    4ec0:	80 39       	cpi	r24, 0x90	; 144
    4ec2:	23 e0       	ldi	r18, 0x03	; 3
    4ec4:	92 07       	cpc	r25, r18
    4ec6:	29 f4       	brne	.+10     	; 0x4ed2 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    4ec8:	61 e0       	ldi	r22, 0x01	; 1
    4eca:	82 e0       	ldi	r24, 0x02	; 2
    4ecc:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4ed0:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    4ed2:	81 15       	cp	r24, r1
    4ed4:	22 e0       	ldi	r18, 0x02	; 2
    4ed6:	92 07       	cpc	r25, r18
    4ed8:	29 f4       	brne	.+10     	; 0x4ee4 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    4eda:	62 e0       	ldi	r22, 0x02	; 2
    4edc:	81 e0       	ldi	r24, 0x01	; 1
    4ede:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4ee2:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    4ee4:	80 34       	cpi	r24, 0x40	; 64
    4ee6:	22 e0       	ldi	r18, 0x02	; 2
    4ee8:	92 07       	cpc	r25, r18
    4eea:	29 f4       	brne	.+10     	; 0x4ef6 <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    4eec:	62 e0       	ldi	r22, 0x02	; 2
    4eee:	82 e0       	ldi	r24, 0x02	; 2
    4ef0:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4ef4:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    4ef6:	81 15       	cp	r24, r1
    4ef8:	23 e0       	ldi	r18, 0x03	; 3
    4efa:	92 07       	cpc	r25, r18
    4efc:	29 f4       	brne	.+10     	; 0x4f08 <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    4efe:	64 e0       	ldi	r22, 0x04	; 4
    4f00:	81 e0       	ldi	r24, 0x01	; 1
    4f02:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4f06:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    4f08:	80 32       	cpi	r24, 0x20	; 32
    4f0a:	23 e0       	ldi	r18, 0x03	; 3
    4f0c:	92 07       	cpc	r25, r18
    4f0e:	29 f4       	brne	.+10     	; 0x4f1a <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    4f10:	64 e0       	ldi	r22, 0x04	; 4
    4f12:	82 e0       	ldi	r24, 0x02	; 2
    4f14:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4f18:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    4f1a:	81 15       	cp	r24, r1
    4f1c:	28 e0       	ldi	r18, 0x08	; 8
    4f1e:	92 07       	cpc	r25, r18
    4f20:	29 f4       	brne	.+10     	; 0x4f2c <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    4f22:	61 e0       	ldi	r22, 0x01	; 1
    4f24:	83 e0       	ldi	r24, 0x03	; 3
    4f26:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4f2a:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    4f2c:	81 15       	cp	r24, r1
    4f2e:	29 e0       	ldi	r18, 0x09	; 9
    4f30:	92 07       	cpc	r25, r18
    4f32:	29 f4       	brne	.+10     	; 0x4f3e <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    4f34:	61 e0       	ldi	r22, 0x01	; 1
    4f36:	84 e0       	ldi	r24, 0x04	; 4
    4f38:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4f3c:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    4f3e:	81 15       	cp	r24, r1
    4f40:	2a e0       	ldi	r18, 0x0A	; 10
    4f42:	92 07       	cpc	r25, r18
    4f44:	29 f4       	brne	.+10     	; 0x4f50 <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    4f46:	61 e0       	ldi	r22, 0x01	; 1
    4f48:	85 e0       	ldi	r24, 0x05	; 5
    4f4a:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4f4e:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    4f50:	81 15       	cp	r24, r1
    4f52:	2b e0       	ldi	r18, 0x0B	; 11
    4f54:	92 07       	cpc	r25, r18
    4f56:	29 f4       	brne	.+10     	; 0x4f62 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    4f58:	61 e0       	ldi	r22, 0x01	; 1
    4f5a:	86 e0       	ldi	r24, 0x06	; 6
    4f5c:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4f60:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    4f62:	80 34       	cpi	r24, 0x40	; 64
    4f64:	28 e0       	ldi	r18, 0x08	; 8
    4f66:	92 07       	cpc	r25, r18
    4f68:	29 f4       	brne	.+10     	; 0x4f74 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    4f6a:	62 e0       	ldi	r22, 0x02	; 2
    4f6c:	83 e0       	ldi	r24, 0x03	; 3
    4f6e:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4f72:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    4f74:	80 34       	cpi	r24, 0x40	; 64
    4f76:	29 e0       	ldi	r18, 0x09	; 9
    4f78:	92 07       	cpc	r25, r18
    4f7a:	29 f4       	brne	.+10     	; 0x4f86 <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    4f7c:	62 e0       	ldi	r22, 0x02	; 2
    4f7e:	84 e0       	ldi	r24, 0x04	; 4
    4f80:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4f84:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    4f86:	80 34       	cpi	r24, 0x40	; 64
    4f88:	2a e0       	ldi	r18, 0x0A	; 10
    4f8a:	92 07       	cpc	r25, r18
    4f8c:	29 f4       	brne	.+10     	; 0x4f98 <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    4f8e:	62 e0       	ldi	r22, 0x02	; 2
    4f90:	85 e0       	ldi	r24, 0x05	; 5
    4f92:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4f96:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    4f98:	80 34       	cpi	r24, 0x40	; 64
    4f9a:	2b e0       	ldi	r18, 0x0B	; 11
    4f9c:	92 07       	cpc	r25, r18
    4f9e:	29 f4       	brne	.+10     	; 0x4faa <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    4fa0:	62 e0       	ldi	r22, 0x02	; 2
    4fa2:	86 e0       	ldi	r24, 0x06	; 6
    4fa4:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4fa8:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    4faa:	80 39       	cpi	r24, 0x90	; 144
    4fac:	28 e0       	ldi	r18, 0x08	; 8
    4fae:	92 07       	cpc	r25, r18
    4fb0:	29 f4       	brne	.+10     	; 0x4fbc <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    4fb2:	64 e0       	ldi	r22, 0x04	; 4
    4fb4:	83 e0       	ldi	r24, 0x03	; 3
    4fb6:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4fba:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    4fbc:	80 39       	cpi	r24, 0x90	; 144
    4fbe:	29 e0       	ldi	r18, 0x09	; 9
    4fc0:	92 07       	cpc	r25, r18
    4fc2:	29 f4       	brne	.+10     	; 0x4fce <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    4fc4:	64 e0       	ldi	r22, 0x04	; 4
    4fc6:	84 e0       	ldi	r24, 0x04	; 4
    4fc8:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4fcc:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    4fce:	80 39       	cpi	r24, 0x90	; 144
    4fd0:	2a e0       	ldi	r18, 0x0A	; 10
    4fd2:	92 07       	cpc	r25, r18
    4fd4:	29 f4       	brne	.+10     	; 0x4fe0 <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    4fd6:	64 e0       	ldi	r22, 0x04	; 4
    4fd8:	85 e0       	ldi	r24, 0x05	; 5
    4fda:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4fde:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    4fe0:	80 39       	cpi	r24, 0x90	; 144
    4fe2:	2b e0       	ldi	r18, 0x0B	; 11
    4fe4:	92 07       	cpc	r25, r18
    4fe6:	29 f4       	brne	.+10     	; 0x4ff2 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    4fe8:	64 e0       	ldi	r22, 0x04	; 4
    4fea:	86 e0       	ldi	r24, 0x06	; 6
    4fec:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    4ff0:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    4ff2:	80 3c       	cpi	r24, 0xC0	; 192
    4ff4:	28 e0       	ldi	r18, 0x08	; 8
    4ff6:	92 07       	cpc	r25, r18
    4ff8:	29 f4       	brne	.+10     	; 0x5004 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    4ffa:	68 e0       	ldi	r22, 0x08	; 8
    4ffc:	83 e0       	ldi	r24, 0x03	; 3
    4ffe:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    5002:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    5004:	80 3c       	cpi	r24, 0xC0	; 192
    5006:	29 e0       	ldi	r18, 0x09	; 9
    5008:	92 07       	cpc	r25, r18
    500a:	29 f4       	brne	.+10     	; 0x5016 <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    500c:	68 e0       	ldi	r22, 0x08	; 8
    500e:	84 e0       	ldi	r24, 0x04	; 4
    5010:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    5014:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    5016:	80 3c       	cpi	r24, 0xC0	; 192
    5018:	2a e0       	ldi	r18, 0x0A	; 10
    501a:	92 07       	cpc	r25, r18
    501c:	29 f4       	brne	.+10     	; 0x5028 <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    501e:	68 e0       	ldi	r22, 0x08	; 8
    5020:	85 e0       	ldi	r24, 0x05	; 5
    5022:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    5026:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    5028:	80 3c       	cpi	r24, 0xC0	; 192
    502a:	2b e0       	ldi	r18, 0x0B	; 11
    502c:	92 07       	cpc	r25, r18
    502e:	29 f4       	brne	.+10     	; 0x503a <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    5030:	68 e0       	ldi	r22, 0x08	; 8
    5032:	86 e0       	ldi	r24, 0x06	; 6
    5034:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    5038:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    503a:	80 3a       	cpi	r24, 0xA0	; 160
    503c:	28 e0       	ldi	r18, 0x08	; 8
    503e:	92 07       	cpc	r25, r18
    5040:	29 f4       	brne	.+10     	; 0x504c <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    5042:	60 e1       	ldi	r22, 0x10	; 16
    5044:	83 e0       	ldi	r24, 0x03	; 3
    5046:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    504a:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    504c:	80 3a       	cpi	r24, 0xA0	; 160
    504e:	29 e0       	ldi	r18, 0x09	; 9
    5050:	92 07       	cpc	r25, r18
    5052:	29 f4       	brne	.+10     	; 0x505e <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    5054:	60 e1       	ldi	r22, 0x10	; 16
    5056:	84 e0       	ldi	r24, 0x04	; 4
    5058:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    505c:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    505e:	80 3a       	cpi	r24, 0xA0	; 160
    5060:	2a e0       	ldi	r18, 0x0A	; 10
    5062:	92 07       	cpc	r25, r18
    5064:	29 f4       	brne	.+10     	; 0x5070 <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    5066:	60 e1       	ldi	r22, 0x10	; 16
    5068:	85 e0       	ldi	r24, 0x05	; 5
    506a:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    506e:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    5070:	80 3a       	cpi	r24, 0xA0	; 160
    5072:	2b e0       	ldi	r18, 0x0B	; 11
    5074:	92 07       	cpc	r25, r18
    5076:	29 f4       	brne	.+10     	; 0x5082 <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    5078:	60 e1       	ldi	r22, 0x10	; 16
    507a:	86 e0       	ldi	r24, 0x06	; 6
    507c:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    5080:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    5082:	80 3b       	cpi	r24, 0xB0	; 176
    5084:	28 e0       	ldi	r18, 0x08	; 8
    5086:	92 07       	cpc	r25, r18
    5088:	29 f4       	brne	.+10     	; 0x5094 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    508a:	60 e2       	ldi	r22, 0x20	; 32
    508c:	83 e0       	ldi	r24, 0x03	; 3
    508e:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    5092:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    5094:	80 3b       	cpi	r24, 0xB0	; 176
    5096:	29 e0       	ldi	r18, 0x09	; 9
    5098:	92 07       	cpc	r25, r18
    509a:	29 f4       	brne	.+10     	; 0x50a6 <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    509c:	60 e2       	ldi	r22, 0x20	; 32
    509e:	84 e0       	ldi	r24, 0x04	; 4
    50a0:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    50a4:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    50a6:	80 3b       	cpi	r24, 0xB0	; 176
    50a8:	2a e0       	ldi	r18, 0x0A	; 10
    50aa:	92 07       	cpc	r25, r18
    50ac:	29 f4       	brne	.+10     	; 0x50b8 <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    50ae:	60 e2       	ldi	r22, 0x20	; 32
    50b0:	85 e0       	ldi	r24, 0x05	; 5
    50b2:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    50b6:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    50b8:	80 3b       	cpi	r24, 0xB0	; 176
    50ba:	2b e0       	ldi	r18, 0x0B	; 11
    50bc:	92 07       	cpc	r25, r18
    50be:	29 f4       	brne	.+10     	; 0x50ca <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    50c0:	60 e2       	ldi	r22, 0x20	; 32
    50c2:	86 e0       	ldi	r24, 0x06	; 6
    50c4:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    50c8:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    50ca:	80 38       	cpi	r24, 0x80	; 128
    50cc:	24 e0       	ldi	r18, 0x04	; 4
    50ce:	92 07       	cpc	r25, r18
    50d0:	29 f4       	brne	.+10     	; 0x50dc <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    50d2:	60 e4       	ldi	r22, 0x40	; 64
    50d4:	83 e0       	ldi	r24, 0x03	; 3
    50d6:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    50da:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    50dc:	80 39       	cpi	r24, 0x90	; 144
    50de:	24 e0       	ldi	r18, 0x04	; 4
    50e0:	92 07       	cpc	r25, r18
    50e2:	29 f4       	brne	.+10     	; 0x50ee <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    50e4:	60 e4       	ldi	r22, 0x40	; 64
    50e6:	84 e0       	ldi	r24, 0x04	; 4
    50e8:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    50ec:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    50ee:	80 3a       	cpi	r24, 0xA0	; 160
    50f0:	24 e0       	ldi	r18, 0x04	; 4
    50f2:	92 07       	cpc	r25, r18
    50f4:	29 f4       	brne	.+10     	; 0x5100 <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    50f6:	60 e4       	ldi	r22, 0x40	; 64
    50f8:	85 e0       	ldi	r24, 0x05	; 5
    50fa:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    50fe:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    5100:	80 3b       	cpi	r24, 0xB0	; 176
    5102:	94 40       	sbci	r25, 0x04	; 4
    5104:	21 f4       	brne	.+8      	; 0x510e <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    5106:	60 e4       	ldi	r22, 0x40	; 64
    5108:	86 e0       	ldi	r24, 0x06	; 6
    510a:	0c 94 b6 16 	jmp	0x2d6c	; 0x2d6c <sysclk_enable_module>
    510e:	08 95       	ret

00005110 <packetlen>:
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
	{
		if (buff[i] == '\n')
    5110:	fc 01       	movw	r30, r24
    5112:	20 81       	ld	r18, Z
    5114:	2a 30       	cpi	r18, 0x0A	; 10
    5116:	79 f0       	breq	.+30     	; 0x5136 <packetlen+0x26>
    5118:	31 96       	adiw	r30, 0x01	; 1
//void blink (int, int);
uint16_t packetlen(const uint8_t* buff);
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
    511a:	21 e0       	ldi	r18, 0x01	; 1
    511c:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (buff[i] == '\n')
    511e:	81 91       	ld	r24, Z+
    5120:	8a 30       	cpi	r24, 0x0A	; 10
    5122:	61 f0       	breq	.+24     	; 0x513c <packetlen+0x2c>
//void blink (int, int);
uint16_t packetlen(const uint8_t* buff);
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
    5124:	2f 5f       	subi	r18, 0xFF	; 255
    5126:	3f 4f       	sbci	r19, 0xFF	; 255
    5128:	21 15       	cp	r18, r1
    512a:	84 e0       	ldi	r24, 0x04	; 4
    512c:	38 07       	cpc	r19, r24
    512e:	b9 f7       	brne	.-18     	; 0x511e <packetlen+0xe>
	{
		if (buff[i] == '\n')
		return i;
	}
	return 1024;
    5130:	80 e0       	ldi	r24, 0x00	; 0
    5132:	94 e0       	ldi	r25, 0x04	; 4
    5134:	08 95       	ret
//void blink (int, int);
uint16_t packetlen(const uint8_t* buff);
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
    5136:	80 e0       	ldi	r24, 0x00	; 0
    5138:	90 e0       	ldi	r25, 0x00	; 0
    513a:	08 95       	ret
    513c:	82 2f       	mov	r24, r18
    513e:	93 2f       	mov	r25, r19
	{
		if (buff[i] == '\n')
		return i;
	}
	return 1024;
}
    5140:	08 95       	ret

00005142 <main>:

int main (void)
{
    5142:	cf 93       	push	r28
    5144:	df 93       	push	r29
    5146:	cd b7       	in	r28, 0x3d	; 61
    5148:	de b7       	in	r29, 0x3e	; 62
    514a:	c0 5c       	subi	r28, 0xC0	; 192
    514c:	d1 09       	sbc	r29, r1
    514e:	cd bf       	out	0x3d, r28	; 61
    5150:	de bf       	out	0x3e, r29	; 62
	
	sysclk_init();
    5152:	0e 94 81 16 	call	0x2d02	; 0x2d02 <sysclk_init>
	//sysclk_enable_peripheral_clock(&TCF0);
	sysclk_enable_peripheral_clock(&TCD0);
    5156:	80 e0       	ldi	r24, 0x00	; 0
    5158:	99 e0       	ldi	r25, 0x09	; 9
    515a:	7a de       	rcall	.-780    	; 0x4e50 <sysclk_enable_peripheral_clock>


	sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
    515c:	68 e0       	ldi	r22, 0x08	; 8
    515e:	83 e0       	ldi	r24, 0x03	; 3
    5160:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C,SYSCLK_HIRES);
    5164:	64 e0       	ldi	r22, 0x04	; 4
    5166:	83 e0       	ldi	r24, 0x03	; 3
    5168:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    516c:	64 e0       	ldi	r22, 0x04	; 4
    516e:	84 e0       	ldi	r24, 0x04	; 4
    5170:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_E,SYSCLK_HIRES);	
    5174:	64 e0       	ldi	r22, 0x04	; 4
    5176:	85 e0       	ldi	r24, 0x05	; 5
    5178:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    517c:	64 e0       	ldi	r22, 0x04	; 4
    517e:	86 e0       	ldi	r24, 0x06	; 6
    5180:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <sysclk_enable_module>
// 	PORTD.OUTSET = 0b00001000;
// 	timer_founter_init(3124, 0);
// 	delay_ms(15000);
// 	PORTD.OUTCLR = 0b00001000;
//	timer_founter_init(3124, 10);
	sysclk_enable_peripheral_clock(&TCE0);
    5184:	80 e0       	ldi	r24, 0x00	; 0
    5186:	9a e0       	ldi	r25, 0x0A	; 10
	sysclk_enable_peripheral_clock(&TCC0);
    5188:	63 de       	rcall	.-826    	; 0x4e50 <sysclk_enable_peripheral_clock>
    518a:	80 e0       	ldi	r24, 0x00	; 0
	//timer_counter_init(6249, 10);
	//heatshield_servo();
		
	sysclk_enable_peripheral_clock(&USARTC0);
    518c:	98 e0       	ldi	r25, 0x08	; 8
    518e:	60 de       	rcall	.-832    	; 0x4e50 <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&USARTD1);
    5190:	80 ea       	ldi	r24, 0xA0	; 160
	usart_init();
    5192:	98 e0       	ldi	r25, 0x08	; 8
	
	sysclk_enable_peripheral_clock(&SPIC);
    5194:	5d de       	rcall	.-838    	; 0x4e50 <sysclk_enable_peripheral_clock>
    5196:	80 eb       	ldi	r24, 0xB0	; 176
	spi_init();
    5198:	99 e0       	ldi	r25, 0x09	; 9
    519a:	5a de       	rcall	.-844    	; 0x4e50 <sysclk_enable_peripheral_clock>
	ms5607init();
    519c:	80 dd       	rcall	.-1280   	; 0x4c9e <usart_init>
    519e:	80 ec       	ldi	r24, 0xC0	; 192
	
	sysclk_enable_peripheral_clock(&ADCA);
    51a0:	98 e0       	ldi	r25, 0x08	; 8
    51a2:	56 de       	rcall	.-852    	; 0x4e50 <sysclk_enable_peripheral_clock>
    51a4:	2e da       	rcall	.-2980   	; 0x4602 <spi_init>
    51a6:	63 da       	rcall	.-2874   	; 0x466e <ms5607init>
	adc_init();
    51a8:	80 e0       	ldi	r24, 0x00	; 0
    51aa:	92 e0       	ldi	r25, 0x02	; 2
	
	twi_options_t m_options = {
    51ac:	51 de       	rcall	.-862    	; 0x4e50 <sysclk_enable_peripheral_clock>
    51ae:	d2 dc       	rcall	.-1628   	; 0x4b54 <adc_init>
    51b0:	8e 01       	movw	r16, r28
    51b2:	0f 5f       	subi	r16, 0xFF	; 255
    51b4:	1f 4f       	sbci	r17, 0xFF	; 255
    51b6:	89 e0       	ldi	r24, 0x09	; 9
    51b8:	d8 01       	movw	r26, r16
    51ba:	1d 92       	st	X+, r1
    51bc:	8a 95       	dec	r24
    51be:	e9 f7       	brne	.-6      	; 0x51ba <main+0x78>
    51c0:	80 e8       	ldi	r24, 0x80	; 128
    51c2:	9a e1       	ldi	r25, 0x1A	; 26
    51c4:	a6 e0       	ldi	r26, 0x06	; 6
    51c6:	b0 e0       	ldi	r27, 0x00	; 0
    51c8:	89 83       	std	Y+1, r24	; 0x01
    51ca:	9a 83       	std	Y+2, r25	; 0x02
    51cc:	ab 83       	std	Y+3, r26	; 0x03
    51ce:	bc 83       	std	Y+4, r27	; 0x04
    51d0:	83 e2       	ldi	r24, 0x23	; 35
    51d2:	90 e0       	ldi	r25, 0x00	; 0
    51d4:	a0 e0       	ldi	r26, 0x00	; 0
    51d6:	b0 e0       	ldi	r27, 0x00	; 0
    51d8:	8d 83       	std	Y+5, r24	; 0x05
		.speed = 400000,
		.speed_reg = TWI_BAUD(32000000, 400000),
	};
	
	sysclk_enable_peripheral_clock(&TWIC);
    51da:	9e 83       	std	Y+6, r25	; 0x06
    51dc:	af 83       	std	Y+7, r26	; 0x07
    51de:	b8 87       	std	Y+8, r27	; 0x08
	twi_master_init(&TWIC, &m_options);
    51e0:	80 e8       	ldi	r24, 0x80	; 128
    51e2:	94 e0       	ldi	r25, 0x04	; 4
    51e4:	35 de       	rcall	.-918    	; 0x4e50 <sysclk_enable_peripheral_clock>
    51e6:	b8 01       	movw	r22, r16
 *
 * \param twi       Base address of the TWI instance.
 */
static inline void twi_master_enable(TWI_t *twi)
{
  twi->MASTER.CTRLA |= TWI_MASTER_ENABLE_bm;
    51e8:	80 e8       	ldi	r24, 0x80	; 128
    51ea:	94 e0       	ldi	r25, 0x04	; 4
    51ec:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <twi_master_init>
    51f0:	e0 e8       	ldi	r30, 0x80	; 128
	twi_master_enable(&TWIC);
	init_imu();
    51f2:	f4 e0       	ldi	r31, 0x04	; 4
    51f4:	81 81       	ldd	r24, Z+1	; 0x01
	float tiltZ;	
	
	//printf("Is this thing on?\n");
	
	//printf((const char*)gps_data.latdegrees);
	PressData pdi = get_pressure();
    51f6:	88 60       	ori	r24, 0x08	; 8
    51f8:	81 83       	std	Z+1, r24	; 0x01
    51fa:	0e 94 a5 04 	call	0x94a	; 0x94a <init_imu>
    51fe:	b6 da       	rcall	.-2708   	; 0x476c <get_pressure>
    5200:	a0 96       	adiw	r28, 0x20	; 32
    5202:	2f af       	std	Y+63, r18	; 0x3f
    5204:	a0 97       	sbiw	r28, 0x20	; 32
    5206:	a1 96       	adiw	r28, 0x21	; 33
    5208:	3f af       	std	Y+63, r19	; 0x3f
    520a:	a1 97       	sbiw	r28, 0x21	; 33
    520c:	a2 96       	adiw	r28, 0x22	; 34
    520e:	4f af       	std	Y+63, r20	; 0x3f
    5210:	a2 97       	sbiw	r28, 0x22	; 34
    5212:	a3 96       	adiw	r28, 0x23	; 35
    5214:	5f af       	std	Y+63, r21	; 0x3f
    5216:	a3 97       	sbiw	r28, 0x23	; 35
    5218:	a4 96       	adiw	r28, 0x24	; 36
    521a:	6f af       	std	Y+63, r22	; 0x3f
    521c:	a4 97       	sbiw	r28, 0x24	; 36
    521e:	a5 96       	adiw	r28, 0x25	; 37
    5220:	7f af       	std	Y+63, r23	; 0x3f
    5222:	a5 97       	sbiw	r28, 0x25	; 37
    5224:	a6 96       	adiw	r28, 0x26	; 38
    5226:	8f af       	std	Y+63, r24	; 0x3f
    5228:	a6 97       	sbiw	r28, 0x26	; 38
	int32_t initial = pdi.P;
    522a:	a7 96       	adiw	r28, 0x27	; 39
    522c:	9f af       	std	Y+63, r25	; 0x3f
    522e:	a7 97       	sbiw	r28, 0x27	; 39
    5230:	a7 96       	adiw	r28, 0x27	; 39
    5232:	2c ad       	ldd	r18, Y+60	; 0x3c
    5234:	3d ad       	ldd	r19, Y+61	; 0x3d
    5236:	4e ad       	ldd	r20, Y+62	; 0x3e
    5238:	5f ad       	ldd	r21, Y+63	; 0x3f
    523a:	a7 97       	sbiw	r28, 0x27	; 39
    523c:	c7 54       	subi	r28, 0x47	; 71
    523e:	df 4f       	sbci	r29, 0xFF	; 255
    5240:	28 83       	st	Y, r18
    5242:	39 83       	std	Y+1, r19	; 0x01
    5244:	4a 83       	std	Y+2, r20	; 0x02

	//initial_altitude = Get_altitude(101300, initial);
	//timer_founter_init(62499, 5);

	//timer_dounter_init(12500, 10);
	init_GPS_pins_and_usart();
    5246:	5b 83       	std	Y+3, r21	; 0x03
    5248:	c9 5b       	subi	r28, 0xB9	; 185
	init_gps_interrupts();
    524a:	d0 40       	sbci	r29, 0x00	; 0
    524c:	0e 94 98 1b 	call	0x3730	; 0x3730 <init_GPS_pins_and_usart>
	init_gps_buffers();
    5250:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <init_gps_interrupts>
// 	delay_ms(1);
// 	PORTD_OUTCLR = 0b00100000;
	//delay_ms(5000);
	//printf("Hello World! \n");

	buzzer_on();
    5254:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <init_gps_buffers>
	TCC0.INTCTRLA = 0b00000001;
    5258:	0e 94 ff 1e 	call	0x3dfe	; 0x3dfe <buzzer_on>
 * Enables all interrupt levels, with vectors located in the application section
 * and fixed priority scheduling.
 */
static inline void pmic_init(void)
{
	PMIC.CTRL = PMIC_LVL_LOW | PMIC_LVL_MEDIUM |
    525c:	81 e0       	ldi	r24, 0x01	; 1
    525e:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    5262:	e0 ea       	ldi	r30, 0xA0	; 160
{
	Assert(schedule < PMIC_NR_OF_SCHEDULES);

	switch (schedule) {
	case PMIC_SCH_FIXED_PRIORITY:
		PMIC.CTRL &= ~PMIC_RREN_bm;
    5264:	f0 e0       	ldi	r31, 0x00	; 0
    5266:	87 e0       	ldi	r24, 0x07	; 7
    5268:	82 83       	std	Z+2, r24	; 0x02
		PMIC.INTPRI = 0;
    526a:	82 81       	ldd	r24, Z+2	; 0x02
	
	pmic_init();
	pmic_set_scheduling(PMIC_SCH_FIXED_PRIORITY);
	cpu_irq_enable();
    526c:	8f 77       	andi	r24, 0x7F	; 127
	//uint16_t period;
	//uint16_t duty_cycle;
	double smoothing_factor = 0.50;
	

	uint8_t state = 0;
    526e:	82 83       	std	Z+2, r24	; 0x02
	uint32_t temperature;
	//uint32_t initial_pressure = get_pressure();
	int32_t altitude;
	int32_t initial_altitude = 0;
	int32_t smooth_altitude = 0;
	int32_t max_altitude = 0;
    5270:	11 82       	std	Z+1, r1	; 0x01
    5272:	78 94       	sei
    5274:	10 e0       	ldi	r17, 0x00	; 0
    5276:	c3 54       	subi	r28, 0x43	; 67
    5278:	df 4f       	sbci	r29, 0xFF	; 255
    527a:	18 82       	st	Y, r1
    527c:	19 82       	std	Y+1, r1	; 0x01
    527e:	1a 82       	std	Y+2, r1	; 0x02
	uint32_t pressure;
	uint32_t temperature;
	//uint32_t initial_pressure = get_pressure();
	int32_t altitude;
	int32_t initial_altitude = 0;
	int32_t smooth_altitude = 0;
    5280:	1b 82       	std	Y+3, r1	; 0x03
    5282:	cd 5b       	subi	r28, 0xBD	; 189
    5284:	d0 40       	sbci	r29, 0x00	; 0
    5286:	c3 56       	subi	r28, 0x63	; 99
    5288:	df 4f       	sbci	r29, 0xFF	; 255
    528a:	18 82       	st	Y, r1
    528c:	19 82       	std	Y+1, r1	; 0x01
	uint32_t time_ms;
	uint32_t cycles = 0;
	
	
	uint16_t teamID = 5186;
	uint32_t my_time = 0;
    528e:	1a 82       	std	Y+2, r1	; 0x02
    5290:	1b 82       	std	Y+3, r1	; 0x03
			{
				//printf("GGA!!!\n");
				
				ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
				{
					memcpy(gpstmp, gpgga_buff, 85);
    5292:	cd 59       	subi	r28, 0x9D	; 157
    5294:	d0 40       	sbci	r29, 0x00	; 0
    5296:	c1 2c       	mov	r12, r1
    5298:	d1 2c       	mov	r13, r1
    529a:	76 01       	movw	r14, r12
    529c:	ae 01       	movw	r20, r28
    529e:	46 5f       	subi	r20, 0xF6	; 246
    52a0:	5f 4f       	sbci	r21, 0xFF	; 255
    52a2:	4a 01       	movw	r8, r20
    52a4:	cb 56       	subi	r28, 0x6B	; 107
//  	PORTA_OUT = 0b00011110;
//  	delay_ms(250);
//  	PORTA_OUT = 0b00000000;
//  	delay_ms(250);
		
		PressData pd = get_pressure();
    52a6:	df 4f       	sbci	r29, 0xFF	; 255
    52a8:	c8 82       	st	Y, r12
    52aa:	d9 82       	std	Y+1, r13	; 0x01
    52ac:	c5 59       	subi	r28, 0x95	; 149
    52ae:	d0 40       	sbci	r29, 0x00	; 0
    52b0:	5d da       	rcall	.-2886   	; 0x476c <get_pressure>
    52b2:	06 2f       	mov	r16, r22
    52b4:	b7 2e       	mov	r11, r23
    52b6:	a8 2e       	mov	r10, r24
    52b8:	39 2e       	mov	r3, r25
    52ba:	cb 57       	subi	r28, 0x7B	; 123
    52bc:	df 4f       	sbci	r29, 0xFF	; 255
    52be:	28 83       	st	Y, r18
    52c0:	c5 58       	subi	r28, 0x85	; 133
    52c2:	d0 40       	sbci	r29, 0x00	; 0
    52c4:	ca 57       	subi	r28, 0x7A	; 122
    52c6:	df 4f       	sbci	r29, 0xFF	; 255
    52c8:	38 83       	st	Y, r19
    52ca:	c6 58       	subi	r28, 0x86	; 134
    52cc:	d0 40       	sbci	r29, 0x00	; 0
    52ce:	c9 57       	subi	r28, 0x79	; 121
    52d0:	df 4f       	sbci	r29, 0xFF	; 255
    52d2:	48 83       	st	Y, r20
    52d4:	c7 58       	subi	r28, 0x87	; 135
    52d6:	d0 40       	sbci	r29, 0x00	; 0
    52d8:	c8 57       	subi	r28, 0x78	; 120
    52da:	df 4f       	sbci	r29, 0xFF	; 255
    52dc:	58 83       	st	Y, r21
    52de:	c8 58       	subi	r28, 0x88	; 136
    52e0:	d0 40       	sbci	r29, 0x00	; 0
    52e2:	c7 57       	subi	r28, 0x77	; 119
    52e4:	df 4f       	sbci	r29, 0xFF	; 255
    52e6:	68 83       	st	Y, r22
    52e8:	c9 58       	subi	r28, 0x89	; 137
    52ea:	d0 40       	sbci	r29, 0x00	; 0
    52ec:	c6 57       	subi	r28, 0x76	; 118
    52ee:	df 4f       	sbci	r29, 0xFF	; 255
    52f0:	78 83       	st	Y, r23
    52f2:	ca 58       	subi	r28, 0x8A	; 138
    52f4:	d0 40       	sbci	r29, 0x00	; 0
    52f6:	c5 57       	subi	r28, 0x75	; 117
    52f8:	df 4f       	sbci	r29, 0xFF	; 255
    52fa:	88 83       	st	Y, r24
    52fc:	cb 58       	subi	r28, 0x8B	; 139
    52fe:	d0 40       	sbci	r29, 0x00	; 0
    5300:	c4 57       	subi	r28, 0x74	; 116
		pressure = pd.P;
		TEMP = pd.TEMP;
    5302:	df 4f       	sbci	r29, 0xFF	; 255
    5304:	98 83       	st	Y, r25
    5306:	cc 58       	subi	r28, 0x8C	; 140
    5308:	d0 40       	sbci	r29, 0x00	; 0
    530a:	cb 57       	subi	r28, 0x7B	; 123
    530c:	df 4f       	sbci	r29, 0xFF	; 255
    530e:	88 81       	ld	r24, Y
    5310:	99 81       	ldd	r25, Y+1	; 0x01
    5312:	aa 81       	ldd	r26, Y+2	; 0x02
    5314:	bb 81       	ldd	r27, Y+3	; 0x03
    5316:	c5 58       	subi	r28, 0x85	; 133
    5318:	d0 40       	sbci	r29, 0x00	; 0
    531a:	80 93 53 25 	sts	0x2553, r24	; 0x802553 <TEMP>
    531e:	90 93 54 25 	sts	0x2554, r25	; 0x802554 <TEMP+0x1>
// 		pressure = get_pressure();
// 		temperature = getTemperature();
		//printf("Pressure = %lu\n", pressure);
		//temperature = (temperature/100)+273;
		//printf("initial pressure: %lu \n", initial_pressure);
		altitude = Get_altitude(initial, pressure);
    5322:	a0 93 55 25 	sts	0x2555, r26	; 0x802555 <TEMP+0x2>
    5326:	b0 93 56 25 	sts	0x2556, r27	; 0x802556 <TEMP+0x3>
    532a:	20 2f       	mov	r18, r16
    532c:	3b 2d       	mov	r19, r11
    532e:	4a 2d       	mov	r20, r10
    5330:	53 2d       	mov	r21, r3
    5332:	c7 54       	subi	r28, 0x47	; 71
    5334:	df 4f       	sbci	r29, 0xFF	; 255
    5336:	68 81       	ld	r22, Y
    5338:	79 81       	ldd	r23, Y+1	; 0x01
    533a:	8a 81       	ldd	r24, Y+2	; 0x02
    533c:	9b 81       	ldd	r25, Y+3	; 0x03
    533e:	c9 5b       	subi	r28, 0xB9	; 185
    5340:	d0 40       	sbci	r29, 0x00	; 0
    5342:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <Get_altitude>
    5346:	56 d4       	rcall	.+2220   	; 0x5bf4 <__fixsfsi>
    5348:	c3 57       	subi	r28, 0x73	; 115
		smooth_altitude = (int32_t)(smoothing_factor * altitude + (1-smoothing_factor)*smooth_altitude);
    534a:	df 4f       	sbci	r29, 0xFF	; 255
    534c:	68 83       	st	Y, r22
    534e:	79 83       	std	Y+1, r23	; 0x01
    5350:	8a 83       	std	Y+2, r24	; 0x02
    5352:	9b 83       	std	Y+3, r25	; 0x03
    5354:	cd 58       	subi	r28, 0x8D	; 141
    5356:	d0 40       	sbci	r29, 0x00	; 0
    5358:	80 d4       	rcall	.+2304   	; 0x5c5a <__floatsisf>
    535a:	20 e0       	ldi	r18, 0x00	; 0
    535c:	30 e0       	ldi	r19, 0x00	; 0
    535e:	40 e0       	ldi	r20, 0x00	; 0
    5360:	5f e3       	ldi	r21, 0x3F	; 63
    5362:	5b d5       	rcall	.+2742   	; 0x5e1a <__mulsf3>
    5364:	2b 01       	movw	r4, r22
    5366:	3c 01       	movw	r6, r24
    5368:	c3 56       	subi	r28, 0x63	; 99
    536a:	df 4f       	sbci	r29, 0xFF	; 255
    536c:	68 81       	ld	r22, Y
    536e:	79 81       	ldd	r23, Y+1	; 0x01
    5370:	8a 81       	ldd	r24, Y+2	; 0x02
    5372:	9b 81       	ldd	r25, Y+3	; 0x03
    5374:	cd 59       	subi	r28, 0x9D	; 157
    5376:	d0 40       	sbci	r29, 0x00	; 0
    5378:	70 d4       	rcall	.+2272   	; 0x5c5a <__floatsisf>
    537a:	20 e0       	ldi	r18, 0x00	; 0
    537c:	30 e0       	ldi	r19, 0x00	; 0
    537e:	40 e0       	ldi	r20, 0x00	; 0
    5380:	5f e3       	ldi	r21, 0x3F	; 63
    5382:	4b d5       	rcall	.+2710   	; 0x5e1a <__mulsf3>
    5384:	9b 01       	movw	r18, r22
    5386:	ac 01       	movw	r20, r24
    5388:	c3 01       	movw	r24, r6
    538a:	b2 01       	movw	r22, r4
    538c:	01 d3       	rcall	.+1538   	; 0x5990 <__addsf3>
    538e:	32 d4       	rcall	.+2148   	; 0x5bf4 <__fixsfsi>
    5390:	c3 56       	subi	r28, 0x63	; 99
    5392:	df 4f       	sbci	r29, 0xFF	; 255
    5394:	68 83       	st	Y, r22
		my_time = my_time + 1;
    5396:	79 83       	std	Y+1, r23	; 0x01
    5398:	8a 83       	std	Y+2, r24	; 0x02
    539a:	9b 83       	std	Y+3, r25	; 0x03
    539c:	cd 59       	subi	r28, 0x9D	; 157
	
		if (last_finished != SENTENCE_NONE)
		{
			//printf("Is it you?");
			if (last_finished == SENTENCE_GPGGA)
    539e:	d0 40       	sbci	r29, 0x00	; 0
    53a0:	5f ef       	ldi	r21, 0xFF	; 255
    53a2:	c5 1a       	sub	r12, r21
    53a4:	d5 0a       	sbc	r13, r21
    53a6:	e5 0a       	sbc	r14, r21
			{
				//printf("GGA!!!\n");
				
				ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    53a8:	f5 0a       	sbc	r15, r21
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    53aa:	80 91 3d 23 	lds	r24, 0x233D	; 0x80233d <last_finished>
				{
					memcpy(gpstmp, gpgga_buff, 85);
    53ae:	81 30       	cpi	r24, 0x01	; 1
    53b0:	09 f0       	breq	.+2      	; 0x53b4 <main+0x272>
    53b2:	90 c0       	rjmp	.+288    	; 0x54d4 <main+0x392>
    53b4:	9f b7       	in	r25, 0x3f	; 63
    53b6:	f8 94       	cli
    53b8:	85 e5       	ldi	r24, 0x55	; 85
    53ba:	ed ed       	ldi	r30, 0xDD	; 221
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    53bc:	f4 e2       	ldi	r31, 0x24	; 36
				}
				gpstmp[packetlen(gpstmp)] = '\0';
    53be:	d4 01       	movw	r26, r8
    53c0:	01 90       	ld	r0, Z+
    53c2:	0d 92       	st	X+, r0
    53c4:	8a 95       	dec	r24
    53c6:	e1 f7       	brne	.-8      	; 0x53c0 <main+0x27e>
    53c8:	9f bf       	out	0x3f, r25	; 63
    53ca:	c4 01       	movw	r24, r8
				//printf(gpstmp);
				GPS_data_t gps_data = getGPSDatafromNMEA(gpstmp, strlen(gpstmp));
    53cc:	a1 de       	rcall	.-702    	; 0x5110 <packetlen>
    53ce:	88 0d       	add	r24, r8
    53d0:	99 1d       	adc	r25, r9
    53d2:	dc 01       	movw	r26, r24
    53d4:	1c 92       	st	X, r1
    53d6:	f4 01       	movw	r30, r8
    53d8:	01 90       	ld	r0, Z+
    53da:	00 20       	and	r0, r0
    53dc:	e9 f7       	brne	.-6      	; 0x53d8 <main+0x296>
    53de:	31 97       	sbiw	r30, 0x01	; 1
    53e0:	af 01       	movw	r20, r30
    53e2:	48 19       	sub	r20, r8
    53e4:	59 09       	sbc	r21, r9
    53e6:	b4 01       	movw	r22, r8
				GPSAlt =	gps_data.altitude;
    53e8:	ce 01       	movw	r24, r28
    53ea:	89 59       	subi	r24, 0x99	; 153
    53ec:	9f 4f       	sbci	r25, 0xFF	; 255
    53ee:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <getGPSDatafromNMEA>
    53f2:	c3 58       	subi	r28, 0x83	; 131
    53f4:	df 4f       	sbci	r29, 0xFF	; 255
    53f6:	68 81       	ld	r22, Y
				GPSLat =	gps_data.latdecimal;
    53f8:	79 81       	ldd	r23, Y+1	; 0x01
    53fa:	8a 81       	ldd	r24, Y+2	; 0x02
    53fc:	9b 81       	ldd	r25, Y+3	; 0x03
    53fe:	cd 57       	subi	r28, 0x7D	; 125
    5400:	d0 40       	sbci	r29, 0x00	; 0
    5402:	e2 96       	adiw	r28, 0x32	; 50
    5404:	2c ad       	ldd	r18, Y+60	; 0x3c
    5406:	3d ad       	ldd	r19, Y+61	; 0x3d
    5408:	4e ad       	ldd	r20, Y+62	; 0x3e
    540a:	5f ad       	ldd	r21, Y+63	; 0x3f
    540c:	e2 97       	sbiw	r28, 0x32	; 50
    540e:	cf 56       	subi	r28, 0x6F	; 111
    5410:	df 4f       	sbci	r29, 0xFF	; 255
				GPSLong=	gps_data.londecimal;
    5412:	28 83       	st	Y, r18
    5414:	39 83       	std	Y+1, r19	; 0x01
    5416:	4a 83       	std	Y+2, r20	; 0x02
    5418:	5b 83       	std	Y+3, r21	; 0x03
    541a:	c1 59       	subi	r28, 0x91	; 145
    541c:	d0 40       	sbci	r29, 0x00	; 0
				
				last_finished = SENTENCE_NONE;
    541e:	ed 96       	adiw	r28, 0x3d	; 61
    5420:	4c ac       	ldd	r4, Y+60	; 0x3c
				
				if (gps_data.fix_status)
    5422:	5d ac       	ldd	r5, Y+61	; 0x3d
    5424:	6e ac       	ldd	r6, Y+62	; 0x3e
    5426:	7f ac       	ldd	r7, Y+63	; 0x3f
    5428:	ed 97       	sbiw	r28, 0x3d	; 61
    542a:	10 92 3d 23 	sts	0x233D, r1	; 0x80233d <last_finished>
    542e:	cc 57       	subi	r28, 0x7C	; 124
				{
					uint32_t GPS_secs = 3600 * (uint32_t)gps_data.hour + 60 * (uint32_t)gps_data.minutes + (uint32_t)gps_data.seconds;
					uint32_t safetime;
					ATOMIC_BLOCK (ATOMIC_RESTORESTATE)
    5430:	df 4f       	sbci	r29, 0xFF	; 255
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    5432:	28 81       	ld	r18, Y
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5434:	c4 58       	subi	r28, 0x84	; 132
					memcpy(gpstmp, gpgga_buff, 85);
				}
				gpstmp[packetlen(gpstmp)] = '\0';
				//printf(gpstmp);
				GPS_data_t gps_data = getGPSDatafromNMEA(gpstmp, strlen(gpstmp));
				GPSAlt =	gps_data.altitude;
    5436:	d0 40       	sbci	r29, 0x00	; 0
    5438:	22 23       	and	r18, r18
    543a:	19 f0       	breq	.+6      	; 0x5442 <main+0x300>
    543c:	2f b7       	in	r18, 0x3f	; 63
    543e:	f8 94       	cli
    5440:	2f bf       	out	0x3f, r18	; 63
    5442:	dd d3       	rcall	.+1978   	; 0x5bfe <__fixunssfsi>
    5444:	cb 54       	subi	r28, 0x4B	; 75
    5446:	df 4f       	sbci	r29, 0xFF	; 255
    5448:	68 83       	st	Y, r22
    544a:	c5 5b       	subi	r28, 0xB5	; 181
    544c:	d0 40       	sbci	r29, 0x00	; 0
    544e:	ca 54       	subi	r28, 0x4A	; 74
    5450:	df 4f       	sbci	r29, 0xFF	; 255
    5452:	78 83       	st	Y, r23
    5454:	c6 5b       	subi	r28, 0xB6	; 182
    5456:	d0 40       	sbci	r29, 0x00	; 0
    5458:	c9 54       	subi	r28, 0x49	; 73
    545a:	df 4f       	sbci	r29, 0xFF	; 255
    545c:	88 83       	st	Y, r24
    545e:	c7 5b       	subi	r28, 0xB7	; 183
				GPSLat =	gps_data.latdecimal;
    5460:	d0 40       	sbci	r29, 0x00	; 0
    5462:	c8 54       	subi	r28, 0x48	; 72
    5464:	df 4f       	sbci	r29, 0xFF	; 255
    5466:	98 83       	st	Y, r25
    5468:	c8 5b       	subi	r28, 0xB8	; 184
    546a:	d0 40       	sbci	r29, 0x00	; 0
    546c:	cf 56       	subi	r28, 0x6F	; 111
    546e:	df 4f       	sbci	r29, 0xFF	; 255
    5470:	68 81       	ld	r22, Y
    5472:	79 81       	ldd	r23, Y+1	; 0x01
    5474:	8a 81       	ldd	r24, Y+2	; 0x02
    5476:	9b 81       	ldd	r25, Y+3	; 0x03
    5478:	c1 59       	subi	r28, 0x91	; 145
    547a:	d0 40       	sbci	r29, 0x00	; 0
    547c:	c0 d3       	rcall	.+1920   	; 0x5bfe <__fixunssfsi>
    547e:	c3 55       	subi	r28, 0x53	; 83
    5480:	df 4f       	sbci	r29, 0xFF	; 255
    5482:	68 83       	st	Y, r22
    5484:	cd 5a       	subi	r28, 0xAD	; 173
    5486:	d0 40       	sbci	r29, 0x00	; 0
    5488:	c2 55       	subi	r28, 0x52	; 82
    548a:	df 4f       	sbci	r29, 0xFF	; 255
    548c:	78 83       	st	Y, r23
    548e:	ce 5a       	subi	r28, 0xAE	; 174
    5490:	d0 40       	sbci	r29, 0x00	; 0
    5492:	c1 55       	subi	r28, 0x51	; 81
    5494:	df 4f       	sbci	r29, 0xFF	; 255
    5496:	88 83       	st	Y, r24
    5498:	cf 5a       	subi	r28, 0xAF	; 175
				GPSLong=	gps_data.londecimal;
    549a:	d0 40       	sbci	r29, 0x00	; 0
    549c:	c0 55       	subi	r28, 0x50	; 80
    549e:	df 4f       	sbci	r29, 0xFF	; 255
    54a0:	98 83       	st	Y, r25
    54a2:	c0 5b       	subi	r28, 0xB0	; 176
    54a4:	d0 40       	sbci	r29, 0x00	; 0
    54a6:	c3 01       	movw	r24, r6
    54a8:	b2 01       	movw	r22, r4
    54aa:	a9 d3       	rcall	.+1874   	; 0x5bfe <__fixunssfsi>
    54ac:	cf 54       	subi	r28, 0x4F	; 79
    54ae:	df 4f       	sbci	r29, 0xFF	; 255
    54b0:	68 83       	st	Y, r22
    54b2:	c1 5b       	subi	r28, 0xB1	; 177
    54b4:	d0 40       	sbci	r29, 0x00	; 0
    54b6:	ce 54       	subi	r28, 0x4E	; 78
    54b8:	df 4f       	sbci	r29, 0xFF	; 255
    54ba:	78 83       	st	Y, r23
    54bc:	c2 5b       	subi	r28, 0xB2	; 178
    54be:	d0 40       	sbci	r29, 0x00	; 0
    54c0:	cd 54       	subi	r28, 0x4D	; 77
    54c2:	df 4f       	sbci	r29, 0xFF	; 255
    54c4:	88 83       	st	Y, r24
    54c6:	c3 5b       	subi	r28, 0xB3	; 179
    54c8:	d0 40       	sbci	r29, 0x00	; 0
		//timer_founter_init(6249, 10);
		//printf("Temperature = %u \n", temperature);
		//printf("Pressure = %lu ~\n", pressure);
		//printf("Altitude = %li \n", (int32_t)altitude);
		
		imu_data_t imudata = imu_update(cycles);
    54ca:	cc 54       	subi	r28, 0x4C	; 76
    54cc:	df 4f       	sbci	r29, 0xFF	; 255
    54ce:	98 83       	st	Y, r25
    54d0:	c4 5b       	subi	r28, 0xB4	; 180
    54d2:	d0 40       	sbci	r29, 0x00	; 0
    54d4:	60 e0       	ldi	r22, 0x00	; 0
    54d6:	70 e0       	ldi	r23, 0x00	; 0
		tiltX = imudata.pitch;
		tiltY = imudata.roll;
		tiltZ = imudata.yaw;
		
		smooth_x = (smoothing_factor * tiltX + (1.0-smoothing_factor)*smooth_x);
    54d8:	ce 01       	movw	r24, r28
    54da:	89 59       	subi	r24, 0x99	; 153
    54dc:	9f 4f       	sbci	r25, 0xFF	; 255
    54de:	0e 94 b1 04 	call	0x962	; 0x962 <imu_update>
    54e2:	20 e0       	ldi	r18, 0x00	; 0
    54e4:	30 e0       	ldi	r19, 0x00	; 0
    54e6:	40 e0       	ldi	r20, 0x00	; 0
    54e8:	5f e3       	ldi	r21, 0x3F	; 63
    54ea:	cf 55       	subi	r28, 0x5F	; 95
    54ec:	df 4f       	sbci	r29, 0xFF	; 255
    54ee:	b8 81       	ld	r27, Y
    54f0:	c1 5a       	subi	r28, 0xA1	; 161
    54f2:	d0 40       	sbci	r29, 0x00	; 0
    54f4:	ce 55       	subi	r28, 0x5E	; 94
    54f6:	df 4f       	sbci	r29, 0xFF	; 255
    54f8:	a8 81       	ld	r26, Y
    54fa:	c2 5a       	subi	r28, 0xA2	; 162
    54fc:	d0 40       	sbci	r29, 0x00	; 0
    54fe:	cd 55       	subi	r28, 0x5D	; 93
    5500:	df 4f       	sbci	r29, 0xFF	; 255
    5502:	f8 81       	ld	r31, Y
    5504:	c3 5a       	subi	r28, 0xA3	; 163
    5506:	d0 40       	sbci	r29, 0x00	; 0
    5508:	cc 55       	subi	r28, 0x5C	; 92
    550a:	df 4f       	sbci	r29, 0xFF	; 255
    550c:	e8 81       	ld	r30, Y
    550e:	c4 5a       	subi	r28, 0xA4	; 164
    5510:	d0 40       	sbci	r29, 0x00	; 0
    5512:	6b 2f       	mov	r22, r27
    5514:	7a 2f       	mov	r23, r26
    5516:	8f 2f       	mov	r24, r31
    5518:	9e 2f       	mov	r25, r30
    551a:	7f d4       	rcall	.+2302   	; 0x5e1a <__mulsf3>
    551c:	2b 01       	movw	r4, r22
    551e:	3c 01       	movw	r6, r24
    5520:	20 e0       	ldi	r18, 0x00	; 0
    5522:	30 e0       	ldi	r19, 0x00	; 0
    5524:	40 e0       	ldi	r20, 0x00	; 0
    5526:	5f e3       	ldi	r21, 0x3F	; 63
    5528:	ab 96       	adiw	r28, 0x2b	; 43
    552a:	6c ad       	ldd	r22, Y+60	; 0x3c
    552c:	7d ad       	ldd	r23, Y+61	; 0x3d
    552e:	8e ad       	ldd	r24, Y+62	; 0x3e
    5530:	9f ad       	ldd	r25, Y+63	; 0x3f
    5532:	ab 97       	sbiw	r28, 0x2b	; 43
    5534:	72 d4       	rcall	.+2276   	; 0x5e1a <__mulsf3>
    5536:	a3 01       	movw	r20, r6
    5538:	92 01       	movw	r18, r4
    553a:	2a d2       	rcall	.+1108   	; 0x5990 <__addsf3>
    553c:	cf 56       	subi	r28, 0x6F	; 111
    553e:	df 4f       	sbci	r29, 0xFF	; 255
    5540:	68 83       	st	Y, r22
    5542:	c1 59       	subi	r28, 0x91	; 145
    5544:	d0 40       	sbci	r29, 0x00	; 0
    5546:	c9 56       	subi	r28, 0x69	; 105
    5548:	df 4f       	sbci	r29, 0xFF	; 255
    554a:	78 83       	st	Y, r23
    554c:	c7 59       	subi	r28, 0x97	; 151
    554e:	d0 40       	sbci	r29, 0x00	; 0
    5550:	28 2e       	mov	r2, r24
    5552:	c8 56       	subi	r28, 0x68	; 104
    5554:	df 4f       	sbci	r29, 0xFF	; 255
    5556:	98 83       	st	Y, r25
    5558:	c8 59       	subi	r28, 0x98	; 152
    555a:	d0 40       	sbci	r29, 0x00	; 0
    555c:	cf 55       	subi	r28, 0x5F	; 95
    555e:	df 4f       	sbci	r29, 0xFF	; 255
    5560:	68 83       	st	Y, r22
    5562:	c1 5a       	subi	r28, 0xA1	; 161
    5564:	d0 40       	sbci	r29, 0x00	; 0
    5566:	ce 55       	subi	r28, 0x5E	; 94
    5568:	df 4f       	sbci	r29, 0xFF	; 255
    556a:	78 83       	st	Y, r23
    556c:	c2 5a       	subi	r28, 0xA2	; 162
    556e:	d0 40       	sbci	r29, 0x00	; 0
    5570:	cd 55       	subi	r28, 0x5D	; 93
    5572:	df 4f       	sbci	r29, 0xFF	; 255
    5574:	88 83       	st	Y, r24
    5576:	c3 5a       	subi	r28, 0xA3	; 163
		smooth_y = (smoothing_factor * tiltY + (1.0-smoothing_factor)*smooth_y);
    5578:	d0 40       	sbci	r29, 0x00	; 0
    557a:	cc 55       	subi	r28, 0x5C	; 92
    557c:	df 4f       	sbci	r29, 0xFF	; 255
    557e:	98 83       	st	Y, r25
    5580:	c4 5a       	subi	r28, 0xA4	; 164
    5582:	d0 40       	sbci	r29, 0x00	; 0
    5584:	20 e0       	ldi	r18, 0x00	; 0
    5586:	30 e0       	ldi	r19, 0x00	; 0
    5588:	40 e0       	ldi	r20, 0x00	; 0
    558a:	5f e3       	ldi	r21, 0x3F	; 63
    558c:	cb 55       	subi	r28, 0x5B	; 91
    558e:	df 4f       	sbci	r29, 0xFF	; 255
    5590:	b8 81       	ld	r27, Y
    5592:	c5 5a       	subi	r28, 0xA5	; 165
    5594:	d0 40       	sbci	r29, 0x00	; 0
    5596:	ca 55       	subi	r28, 0x5A	; 90
    5598:	df 4f       	sbci	r29, 0xFF	; 255
    559a:	a8 81       	ld	r26, Y
    559c:	c6 5a       	subi	r28, 0xA6	; 166
    559e:	d0 40       	sbci	r29, 0x00	; 0
    55a0:	c9 55       	subi	r28, 0x59	; 89
    55a2:	df 4f       	sbci	r29, 0xFF	; 255
    55a4:	f8 81       	ld	r31, Y
    55a6:	c7 5a       	subi	r28, 0xA7	; 167
    55a8:	d0 40       	sbci	r29, 0x00	; 0
    55aa:	c8 55       	subi	r28, 0x58	; 88
    55ac:	df 4f       	sbci	r29, 0xFF	; 255
    55ae:	e8 81       	ld	r30, Y
    55b0:	c8 5a       	subi	r28, 0xA8	; 168
    55b2:	d0 40       	sbci	r29, 0x00	; 0
    55b4:	6b 2f       	mov	r22, r27
    55b6:	7a 2f       	mov	r23, r26
    55b8:	8f 2f       	mov	r24, r31
    55ba:	9e 2f       	mov	r25, r30
    55bc:	2e d4       	rcall	.+2140   	; 0x5e1a <__mulsf3>
    55be:	2b 01       	movw	r4, r22
    55c0:	3c 01       	movw	r6, r24
    55c2:	20 e0       	ldi	r18, 0x00	; 0
    55c4:	30 e0       	ldi	r19, 0x00	; 0
    55c6:	40 e0       	ldi	r20, 0x00	; 0
    55c8:	5f e3       	ldi	r21, 0x3F	; 63
    55ca:	af 96       	adiw	r28, 0x2f	; 47
    55cc:	6c ad       	ldd	r22, Y+60	; 0x3c
    55ce:	7d ad       	ldd	r23, Y+61	; 0x3d
    55d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    55d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    55d4:	af 97       	sbiw	r28, 0x2f	; 47
    55d6:	21 d4       	rcall	.+2114   	; 0x5e1a <__mulsf3>
    55d8:	a3 01       	movw	r20, r6
    55da:	92 01       	movw	r18, r4
    55dc:	d9 d1       	rcall	.+946    	; 0x5990 <__addsf3>
    55de:	c7 56       	subi	r28, 0x67	; 103
    55e0:	df 4f       	sbci	r29, 0xFF	; 255
    55e2:	68 83       	st	Y, r22
    55e4:	c9 59       	subi	r28, 0x99	; 153
    55e6:	d0 40       	sbci	r29, 0x00	; 0
    55e8:	c6 56       	subi	r28, 0x66	; 102
    55ea:	df 4f       	sbci	r29, 0xFF	; 255
    55ec:	78 83       	st	Y, r23
    55ee:	ca 59       	subi	r28, 0x9A	; 154
    55f0:	d0 40       	sbci	r29, 0x00	; 0
    55f2:	c5 56       	subi	r28, 0x65	; 101
    55f4:	df 4f       	sbci	r29, 0xFF	; 255
    55f6:	88 83       	st	Y, r24
    55f8:	cb 59       	subi	r28, 0x9B	; 155
    55fa:	d0 40       	sbci	r29, 0x00	; 0
    55fc:	c4 56       	subi	r28, 0x64	; 100
    55fe:	df 4f       	sbci	r29, 0xFF	; 255
    5600:	98 83       	st	Y, r25
    5602:	cc 59       	subi	r28, 0x9C	; 156
    5604:	d0 40       	sbci	r29, 0x00	; 0
    5606:	cb 55       	subi	r28, 0x5B	; 91
    5608:	df 4f       	sbci	r29, 0xFF	; 255
    560a:	68 83       	st	Y, r22
    560c:	c5 5a       	subi	r28, 0xA5	; 165
    560e:	d0 40       	sbci	r29, 0x00	; 0
    5610:	ca 55       	subi	r28, 0x5A	; 90
    5612:	df 4f       	sbci	r29, 0xFF	; 255
    5614:	78 83       	st	Y, r23
    5616:	c6 5a       	subi	r28, 0xA6	; 166
    5618:	d0 40       	sbci	r29, 0x00	; 0
    561a:	c9 55       	subi	r28, 0x59	; 89
    561c:	df 4f       	sbci	r29, 0xFF	; 255
    561e:	88 83       	st	Y, r24
		smooth_z = (smoothing_factor * tiltZ + (1.0-smoothing_factor)*smooth_z);
    5620:	c7 5a       	subi	r28, 0xA7	; 167
    5622:	d0 40       	sbci	r29, 0x00	; 0
    5624:	c8 55       	subi	r28, 0x58	; 88
    5626:	df 4f       	sbci	r29, 0xFF	; 255
    5628:	98 83       	st	Y, r25
    562a:	c8 5a       	subi	r28, 0xA8	; 168
    562c:	d0 40       	sbci	r29, 0x00	; 0
    562e:	20 e0       	ldi	r18, 0x00	; 0
    5630:	30 e0       	ldi	r19, 0x00	; 0
    5632:	40 e0       	ldi	r20, 0x00	; 0
    5634:	5f e3       	ldi	r21, 0x3F	; 63
    5636:	c7 55       	subi	r28, 0x57	; 87
    5638:	df 4f       	sbci	r29, 0xFF	; 255
    563a:	b8 81       	ld	r27, Y
    563c:	c9 5a       	subi	r28, 0xA9	; 169
    563e:	d0 40       	sbci	r29, 0x00	; 0
    5640:	c6 55       	subi	r28, 0x56	; 86
    5642:	df 4f       	sbci	r29, 0xFF	; 255
    5644:	a8 81       	ld	r26, Y
    5646:	ca 5a       	subi	r28, 0xAA	; 170
    5648:	d0 40       	sbci	r29, 0x00	; 0
    564a:	c5 55       	subi	r28, 0x55	; 85
    564c:	df 4f       	sbci	r29, 0xFF	; 255
    564e:	f8 81       	ld	r31, Y
    5650:	cb 5a       	subi	r28, 0xAB	; 171
    5652:	d0 40       	sbci	r29, 0x00	; 0
    5654:	c4 55       	subi	r28, 0x54	; 84
    5656:	df 4f       	sbci	r29, 0xFF	; 255
    5658:	e8 81       	ld	r30, Y
    565a:	cc 5a       	subi	r28, 0xAC	; 172
    565c:	d0 40       	sbci	r29, 0x00	; 0
    565e:	6b 2f       	mov	r22, r27
    5660:	7a 2f       	mov	r23, r26
    5662:	8f 2f       	mov	r24, r31
    5664:	9e 2f       	mov	r25, r30
    5666:	d9 d3       	rcall	.+1970   	; 0x5e1a <__mulsf3>
    5668:	2b 01       	movw	r4, r22
    566a:	3c 01       	movw	r6, r24
    566c:	20 e0       	ldi	r18, 0x00	; 0
    566e:	30 e0       	ldi	r19, 0x00	; 0
    5670:	40 e0       	ldi	r20, 0x00	; 0
    5672:	5f e3       	ldi	r21, 0x3F	; 63
    5674:	e3 96       	adiw	r28, 0x33	; 51
    5676:	6c ad       	ldd	r22, Y+60	; 0x3c
    5678:	7d ad       	ldd	r23, Y+61	; 0x3d
    567a:	8e ad       	ldd	r24, Y+62	; 0x3e
    567c:	9f ad       	ldd	r25, Y+63	; 0x3f
    567e:	e3 97       	sbiw	r28, 0x33	; 51
    5680:	cc d3       	rcall	.+1944   	; 0x5e1a <__mulsf3>
    5682:	a3 01       	movw	r20, r6
    5684:	92 01       	movw	r18, r4
    5686:	84 d1       	rcall	.+776    	; 0x5990 <__addsf3>
    5688:	76 2e       	mov	r7, r22
    568a:	67 2e       	mov	r6, r23
    568c:	58 2e       	mov	r5, r24
    568e:	49 2e       	mov	r4, r25
    5690:	c7 55       	subi	r28, 0x57	; 87
    5692:	df 4f       	sbci	r29, 0xFF	; 255
    5694:	68 83       	st	Y, r22
    5696:	c9 5a       	subi	r28, 0xA9	; 169
    5698:	d0 40       	sbci	r29, 0x00	; 0
    569a:	c6 55       	subi	r28, 0x56	; 86
    569c:	df 4f       	sbci	r29, 0xFF	; 255
    569e:	78 83       	st	Y, r23
    56a0:	ca 5a       	subi	r28, 0xAA	; 170
    56a2:	d0 40       	sbci	r29, 0x00	; 0
    56a4:	c5 55       	subi	r28, 0x55	; 85
    56a6:	df 4f       	sbci	r29, 0xFF	; 255
		//X -21 Y 4.4    Z -11.5
		//delay_ms(500);
		
		PORTA_DIR = 0b00011110;
    56a8:	88 83       	st	Y, r24
    56aa:	cb 5a       	subi	r28, 0xAB	; 171
    56ac:	d0 40       	sbci	r29, 0x00	; 0
    56ae:	c4 55       	subi	r28, 0x54	; 84
		PORTA_OUT = 0b00011110;
    56b0:	df 4f       	sbci	r29, 0xFF	; 255
    56b2:	98 83       	st	Y, r25
    56b4:	cc 5a       	subi	r28, 0xAC	; 172
		delay_ms(250);
    56b6:	d0 40       	sbci	r29, 0x00	; 0
    56b8:	ee e1       	ldi	r30, 0x1E	; 30
    56ba:	a0 e0       	ldi	r26, 0x00	; 0
    56bc:	b6 e0       	ldi	r27, 0x06	; 6
    56be:	ec 93       	st	X, r30
    56c0:	a4 e0       	ldi	r26, 0x04	; 4
		PORTA_OUT = 0b00000000;
    56c2:	b6 e0       	ldi	r27, 0x06	; 6
    56c4:	ec 93       	st	X, r30
    56c6:	66 e5       	ldi	r22, 0x56	; 86
		delay_ms(250);
    56c8:	78 e5       	ldi	r23, 0x58	; 88
    56ca:	84 e1       	ldi	r24, 0x14	; 20
    56cc:	90 e0       	ldi	r25, 0x00	; 0
    56ce:	b5 db       	rcall	.-2198   	; 0x4e3a <__portable_avr_delay_cycles>
    56d0:	a4 e0       	ldi	r26, 0x04	; 4
    56d2:	b6 e0       	ldi	r27, 0x06	; 6
		
		/*float data[16] = {teamID, my_time, packetCount, altitude, pressure, temperature, voltage, GPSTime, GPSLat, GPSLong, GPSAlt, GPSSats,
			tiltX,tiltY,tiltZ,state};*/
		//temperature = 42;
		//NEED TO MOVE FLIGHT STATE BACK TO THE END OF THIS LINE
		printf("$%u,%"PRIu32",%u,%"PRIi32",%"PRIi32",%"PRIi32",%f,%"PRIi32",%"PRIi32",%"PRIi32",%"PRIi32",%"PRIi32",%f,%f,%f,%u\n",teamID,my_time,packetCount,altitude,pressure,(TEMP + 50) / 100,voltage,GPSTime,GPSLat,GPSLong,GPSAlt,GPSSats,smooth_x,smooth_y,smooth_z,state);
    56d4:	1c 92       	st	X, r1
    56d6:	66 e5       	ldi	r22, 0x56	; 86
    56d8:	78 e5       	ldi	r23, 0x58	; 88
    56da:	84 e1       	ldi	r24, 0x14	; 20
    56dc:	90 e0       	ldi	r25, 0x00	; 0
    56de:	ad db       	rcall	.-2214   	; 0x4e3a <__portable_avr_delay_cycles>
    56e0:	1f 92       	push	r1
    56e2:	1f 93       	push	r17
    56e4:	4f 92       	push	r4
    56e6:	5f 92       	push	r5
    56e8:	6f 92       	push	r6
    56ea:	7f 92       	push	r7
    56ec:	c4 56       	subi	r28, 0x64	; 100
    56ee:	df 4f       	sbci	r29, 0xFF	; 255
    56f0:	b8 81       	ld	r27, Y
    56f2:	cc 59       	subi	r28, 0x9C	; 156
    56f4:	d0 40       	sbci	r29, 0x00	; 0
    56f6:	bf 93       	push	r27
    56f8:	c5 56       	subi	r28, 0x65	; 101
    56fa:	df 4f       	sbci	r29, 0xFF	; 255
    56fc:	e8 81       	ld	r30, Y
    56fe:	cb 59       	subi	r28, 0x9B	; 155
    5700:	d0 40       	sbci	r29, 0x00	; 0
    5702:	ef 93       	push	r30
    5704:	c6 56       	subi	r28, 0x66	; 102
    5706:	df 4f       	sbci	r29, 0xFF	; 255
    5708:	f8 81       	ld	r31, Y
    570a:	ca 59       	subi	r28, 0x9A	; 154
    570c:	d0 40       	sbci	r29, 0x00	; 0
    570e:	ff 93       	push	r31
    5710:	c7 56       	subi	r28, 0x67	; 103
    5712:	df 4f       	sbci	r29, 0xFF	; 255
    5714:	28 81       	ld	r18, Y
    5716:	c9 59       	subi	r28, 0x99	; 153
    5718:	d0 40       	sbci	r29, 0x00	; 0
    571a:	2f 93       	push	r18
    571c:	c8 56       	subi	r28, 0x68	; 104
    571e:	df 4f       	sbci	r29, 0xFF	; 255
    5720:	38 81       	ld	r19, Y
    5722:	c8 59       	subi	r28, 0x98	; 152
    5724:	d0 40       	sbci	r29, 0x00	; 0
    5726:	3f 93       	push	r19
    5728:	2f 92       	push	r2
    572a:	c9 56       	subi	r28, 0x69	; 105
    572c:	df 4f       	sbci	r29, 0xFF	; 255
    572e:	48 81       	ld	r20, Y
    5730:	c7 59       	subi	r28, 0x97	; 151
    5732:	d0 40       	sbci	r29, 0x00	; 0
    5734:	4f 93       	push	r20
    5736:	cf 56       	subi	r28, 0x6F	; 111
    5738:	df 4f       	sbci	r29, 0xFF	; 255
    573a:	58 81       	ld	r21, Y
    573c:	c1 59       	subi	r28, 0x91	; 145
    573e:	d0 40       	sbci	r29, 0x00	; 0
    5740:	5f 93       	push	r21
    5742:	1f 92       	push	r1
    5744:	1f 92       	push	r1
    5746:	1f 92       	push	r1
    5748:	1f 92       	push	r1
    574a:	c8 54       	subi	r28, 0x48	; 72
    574c:	df 4f       	sbci	r29, 0xFF	; 255
    574e:	88 81       	ld	r24, Y
    5750:	c8 5b       	subi	r28, 0xB8	; 184
    5752:	d0 40       	sbci	r29, 0x00	; 0
    5754:	8f 93       	push	r24
    5756:	c9 54       	subi	r28, 0x49	; 73
    5758:	df 4f       	sbci	r29, 0xFF	; 255
    575a:	98 81       	ld	r25, Y
    575c:	c7 5b       	subi	r28, 0xB7	; 183
    575e:	d0 40       	sbci	r29, 0x00	; 0
    5760:	9f 93       	push	r25
    5762:	ca 54       	subi	r28, 0x4A	; 74
    5764:	df 4f       	sbci	r29, 0xFF	; 255
    5766:	a8 81       	ld	r26, Y
    5768:	c6 5b       	subi	r28, 0xB6	; 182
    576a:	d0 40       	sbci	r29, 0x00	; 0
    576c:	af 93       	push	r26
    576e:	cb 54       	subi	r28, 0x4B	; 75
    5770:	df 4f       	sbci	r29, 0xFF	; 255
    5772:	b8 81       	ld	r27, Y
    5774:	c5 5b       	subi	r28, 0xB5	; 181
    5776:	d0 40       	sbci	r29, 0x00	; 0
    5778:	bf 93       	push	r27
    577a:	cc 54       	subi	r28, 0x4C	; 76
    577c:	df 4f       	sbci	r29, 0xFF	; 255
    577e:	e8 81       	ld	r30, Y
    5780:	c4 5b       	subi	r28, 0xB4	; 180
    5782:	d0 40       	sbci	r29, 0x00	; 0
    5784:	ef 93       	push	r30
    5786:	cd 54       	subi	r28, 0x4D	; 77
    5788:	df 4f       	sbci	r29, 0xFF	; 255
    578a:	f8 81       	ld	r31, Y
    578c:	c3 5b       	subi	r28, 0xB3	; 179
    578e:	d0 40       	sbci	r29, 0x00	; 0
    5790:	ff 93       	push	r31
    5792:	ce 54       	subi	r28, 0x4E	; 78
    5794:	df 4f       	sbci	r29, 0xFF	; 255
    5796:	28 81       	ld	r18, Y
    5798:	c2 5b       	subi	r28, 0xB2	; 178
    579a:	d0 40       	sbci	r29, 0x00	; 0
    579c:	2f 93       	push	r18
    579e:	cf 54       	subi	r28, 0x4F	; 79
    57a0:	df 4f       	sbci	r29, 0xFF	; 255
    57a2:	38 81       	ld	r19, Y
    57a4:	c1 5b       	subi	r28, 0xB1	; 177
    57a6:	d0 40       	sbci	r29, 0x00	; 0
    57a8:	3f 93       	push	r19
    57aa:	c0 55       	subi	r28, 0x50	; 80
    57ac:	df 4f       	sbci	r29, 0xFF	; 255
    57ae:	48 81       	ld	r20, Y
    57b0:	c0 5b       	subi	r28, 0xB0	; 176
    57b2:	d0 40       	sbci	r29, 0x00	; 0
    57b4:	4f 93       	push	r20
    57b6:	c1 55       	subi	r28, 0x51	; 81
    57b8:	df 4f       	sbci	r29, 0xFF	; 255
    57ba:	58 81       	ld	r21, Y
    57bc:	cf 5a       	subi	r28, 0xAF	; 175
    57be:	d0 40       	sbci	r29, 0x00	; 0
    57c0:	5f 93       	push	r21
    57c2:	c2 55       	subi	r28, 0x52	; 82
    57c4:	df 4f       	sbci	r29, 0xFF	; 255
    57c6:	88 81       	ld	r24, Y
    57c8:	ce 5a       	subi	r28, 0xAE	; 174
    57ca:	d0 40       	sbci	r29, 0x00	; 0
    57cc:	8f 93       	push	r24
    57ce:	c3 55       	subi	r28, 0x53	; 83
    57d0:	df 4f       	sbci	r29, 0xFF	; 255
    57d2:	98 81       	ld	r25, Y
    57d4:	cd 5a       	subi	r28, 0xAD	; 173
    57d6:	d0 40       	sbci	r29, 0x00	; 0
    57d8:	9f 93       	push	r25
    57da:	1f 92       	push	r1
    57dc:	1f 92       	push	r1
    57de:	1f 92       	push	r1
    57e0:	1f 92       	push	r1
    57e2:	1f 92       	push	r1
    57e4:	1f 92       	push	r1
    57e6:	1f 92       	push	r1
    57e8:	1f 92       	push	r1
    57ea:	80 91 53 25 	lds	r24, 0x2553	; 0x802553 <TEMP>
    57ee:	90 91 54 25 	lds	r25, 0x2554	; 0x802554 <TEMP+0x1>
    57f2:	a0 91 55 25 	lds	r26, 0x2555	; 0x802555 <TEMP+0x2>
    57f6:	b0 91 56 25 	lds	r27, 0x2556	; 0x802556 <TEMP+0x3>
    57fa:	bc 01       	movw	r22, r24
    57fc:	cd 01       	movw	r24, r26
    57fe:	6e 5c       	subi	r22, 0xCE	; 206
    5800:	7f 4f       	sbci	r23, 0xFF	; 255
    5802:	8f 4f       	sbci	r24, 0xFF	; 255
    5804:	9f 4f       	sbci	r25, 0xFF	; 255
    5806:	24 e6       	ldi	r18, 0x64	; 100
    5808:	30 e0       	ldi	r19, 0x00	; 0
    580a:	40 e0       	ldi	r20, 0x00	; 0
    580c:	50 e0       	ldi	r21, 0x00	; 0
    580e:	7b d7       	rcall	.+3830   	; 0x6706 <__divmodsi4>
    5810:	5f 93       	push	r21
    5812:	4f 93       	push	r20
    5814:	3f 93       	push	r19
    5816:	2f 93       	push	r18
    5818:	3f 92       	push	r3
    581a:	af 92       	push	r10
    581c:	bf 92       	push	r11
    581e:	0f 93       	push	r16
    5820:	c0 57       	subi	r28, 0x70	; 112
    5822:	df 4f       	sbci	r29, 0xFF	; 255
    5824:	a8 81       	ld	r26, Y
    5826:	c0 59       	subi	r28, 0x90	; 144
    5828:	d0 40       	sbci	r29, 0x00	; 0
    582a:	af 93       	push	r26
    582c:	c1 57       	subi	r28, 0x71	; 113
    582e:	df 4f       	sbci	r29, 0xFF	; 255
    5830:	b8 81       	ld	r27, Y
    5832:	cf 58       	subi	r28, 0x8F	; 143
    5834:	d0 40       	sbci	r29, 0x00	; 0
    5836:	bf 93       	push	r27
    5838:	c2 57       	subi	r28, 0x72	; 114
    583a:	df 4f       	sbci	r29, 0xFF	; 255
    583c:	e8 81       	ld	r30, Y
    583e:	ce 58       	subi	r28, 0x8E	; 142
    5840:	d0 40       	sbci	r29, 0x00	; 0
    5842:	ef 93       	push	r30
    5844:	c3 57       	subi	r28, 0x73	; 115
    5846:	df 4f       	sbci	r29, 0xFF	; 255
    5848:	f8 81       	ld	r31, Y
    584a:	cd 58       	subi	r28, 0x8D	; 141
    584c:	d0 40       	sbci	r29, 0x00	; 0
    584e:	ff 93       	push	r31
    5850:	ca 56       	subi	r28, 0x6A	; 106
    5852:	df 4f       	sbci	r29, 0xFF	; 255
    5854:	28 81       	ld	r18, Y
    5856:	c6 59       	subi	r28, 0x96	; 150
    5858:	d0 40       	sbci	r29, 0x00	; 0
    585a:	2f 93       	push	r18
    585c:	cb 56       	subi	r28, 0x6B	; 107
    585e:	df 4f       	sbci	r29, 0xFF	; 255
    5860:	38 81       	ld	r19, Y
    5862:	c5 59       	subi	r28, 0x95	; 149
    5864:	d0 40       	sbci	r29, 0x00	; 0
    5866:	3f 93       	push	r19
    5868:	ff 92       	push	r15
    586a:	ef 92       	push	r14
    586c:	df 92       	push	r13
    586e:	cf 92       	push	r12
    5870:	44 e1       	ldi	r20, 0x14	; 20
    5872:	4f 93       	push	r20
    5874:	52 e4       	ldi	r21, 0x42	; 66
	
	
	// Flight States!
	
		//FS0
		if(state==0){
    5876:	5f 93       	push	r21
    5878:	88 e0       	ldi	r24, 0x08	; 8
    587a:	91 e2       	ldi	r25, 0x21	; 33
    587c:	9f 93       	push	r25
			//printf("Flight State 0 \n");
			//PORTE.DIRSET = 0b01010101;
			//PORTE.OUTSET = 0b01010101;
			
			servo_counter(.75);
    587e:	8f 93       	push	r24
    5880:	0e 94 f3 35 	call	0x6be6	; 0x6be6 <printf>
    5884:	cd bf       	out	0x3d, r28	; 61
    5886:	de bf       	out	0x3e, r29	; 62
    5888:	11 11       	cpse	r17, r1
			//PORTA.OUT = 0b00001000; //Hopefully this does the buzzer... buzzer is really quiet rn, gotta fix that. (this is just for testing)
			//printf("max alt: %"PRIi32"\n", max_altitude);
			if ((int32_t)max_altitude - (int32_t)altitude > 50){ //Work on Velocity later, this will work for now
    588a:	40 c0       	rjmp	.+128    	; 0x590c <main+0x7ca>
    588c:	60 e0       	ldi	r22, 0x00	; 0
    588e:	70 e0       	ldi	r23, 0x00	; 0
    5890:	80 e4       	ldi	r24, 0x40	; 64
    5892:	9f e3       	ldi	r25, 0x3F	; 63
    5894:	97 d9       	rcall	.-3282   	; 0x4bc4 <servo_counter>
    5896:	c3 54       	subi	r28, 0x43	; 67
    5898:	df 4f       	sbci	r29, 0xFF	; 255
    589a:	88 81       	ld	r24, Y
    589c:	99 81       	ldd	r25, Y+1	; 0x01
    589e:	aa 81       	ldd	r26, Y+2	; 0x02
    58a0:	bb 81       	ldd	r27, Y+3	; 0x03
    58a2:	cd 5b       	subi	r28, 0xBD	; 189
    58a4:	d0 40       	sbci	r29, 0x00	; 0
    58a6:	c3 57       	subi	r28, 0x73	; 115
    58a8:	df 4f       	sbci	r29, 0xFF	; 255
    58aa:	28 81       	ld	r18, Y
    58ac:	39 81       	ldd	r19, Y+1	; 0x01
    58ae:	4a 81       	ldd	r20, Y+2	; 0x02
    58b0:	5b 81       	ldd	r21, Y+3	; 0x03
    58b2:	cd 58       	subi	r28, 0x8D	; 141
    58b4:	d0 40       	sbci	r29, 0x00	; 0
    58b6:	82 1b       	sub	r24, r18
    58b8:	93 0b       	sbc	r25, r19
				PORTE.DIRSET = 0b00000001;	//Deploy Heat Shield
    58ba:	a4 0b       	sbc	r26, r20
    58bc:	b5 0b       	sbc	r27, r21
    58be:	c3 97       	sbiw	r24, 0x33	; 51
				PORTE.OUTSET = 0b00000001;	//Deploy Heat Shield
    58c0:	a1 05       	cpc	r26, r1
    58c2:	b1 05       	cpc	r27, r1
				state = 1;
    58c4:	34 f0       	brlt	.+12     	; 0x58d2 <main+0x790>
    58c6:	31 e0       	ldi	r19, 0x01	; 1
    58c8:	30 93 81 06 	sts	0x0681, r19	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    58cc:	30 93 85 06 	sts	0x0685, r19	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    58d0:	11 e0       	ldi	r17, 0x01	; 1
    58d2:	c3 54       	subi	r28, 0x43	; 67
    58d4:	df 4f       	sbci	r29, 0xFF	; 255
    58d6:	88 81       	ld	r24, Y
    58d8:	99 81       	ldd	r25, Y+1	; 0x01
    58da:	aa 81       	ldd	r26, Y+2	; 0x02
    58dc:	bb 81       	ldd	r27, Y+3	; 0x03
    58de:	cd 5b       	subi	r28, 0xBD	; 189
    58e0:	d0 40       	sbci	r29, 0x00	; 0
    58e2:	c3 57       	subi	r28, 0x73	; 115
    58e4:	df 4f       	sbci	r29, 0xFF	; 255
    58e6:	28 81       	ld	r18, Y
    58e8:	39 81       	ldd	r19, Y+1	; 0x01
    58ea:	4a 81       	ldd	r20, Y+2	; 0x02
    58ec:	5b 81       	ldd	r21, Y+3	; 0x03
    58ee:	cd 58       	subi	r28, 0x8D	; 141
    58f0:	d0 40       	sbci	r29, 0x00	; 0
    58f2:	82 17       	cp	r24, r18
    58f4:	93 07       	cpc	r25, r19
    58f6:	a4 07       	cpc	r26, r20
    58f8:	b5 07       	cpc	r27, r21
    58fa:	44 f4       	brge	.+16     	; 0x590c <main+0x7ca>
    58fc:	c3 54       	subi	r28, 0x43	; 67
    58fe:	df 4f       	sbci	r29, 0xFF	; 255
				max_altitude = altitude;
			}
		}
		
		//FS1
		if(state==1){
    5900:	28 83       	st	Y, r18
    5902:	39 83       	std	Y+1, r19	; 0x01
			//printf("Flight State 1 \n");
			if(altitude-initial_altitude<300){
    5904:	4a 83       	std	Y+2, r20	; 0x02
    5906:	5b 83       	std	Y+3, r21	; 0x03
    5908:	cd 5b       	subi	r28, 0xBD	; 189
    590a:	d0 40       	sbci	r29, 0x00	; 0
    590c:	11 30       	cpi	r17, 0x01	; 1
    590e:	a1 f4       	brne	.+40     	; 0x5938 <main+0x7f6>
    5910:	c3 57       	subi	r28, 0x73	; 115
    5912:	df 4f       	sbci	r29, 0xFF	; 255
    5914:	88 81       	ld	r24, Y
    5916:	99 81       	ldd	r25, Y+1	; 0x01
    5918:	aa 81       	ldd	r26, Y+2	; 0x02
    591a:	bb 81       	ldd	r27, Y+3	; 0x03
    591c:	cd 58       	subi	r28, 0x8D	; 141
    591e:	d0 40       	sbci	r29, 0x00	; 0
				//PORTE.DIRSET = 0b00000010;	//Activate Camera
				//PORTE.OUTSET = 0b00000010;	//Activate Camera
				PORTA.DIRSET = 0b10000000;	//Detach Heat Shield and deploy parachute
    5920:	8c 32       	cpi	r24, 0x2C	; 44
    5922:	91 40       	sbci	r25, 0x01	; 1
    5924:	a1 05       	cpc	r26, r1
				PORTA.OUTSET = 0b10000000;	//Detach Heat Shield and deploy parachute
    5926:	b1 05       	cpc	r27, r1
    5928:	0c f0       	brlt	.+2      	; 0x592c <main+0x7ea>
				state = 2;
			}
		}
		
		//FS2
		if(state==2){
    592a:	bc cc       	rjmp	.-1672   	; 0x52a4 <main+0x162>
    592c:	f0 e8       	ldi	r31, 0x80	; 128
    592e:	f0 93 01 06 	sts	0x0601, r31	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
			//printf("Flight State 2 \n");
			if(smooth_altitude-altitude<3 && altitude-initial_altitude<50){
    5932:	f0 93 05 06 	sts	0x0605, r31	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    5936:	03 c0       	rjmp	.+6      	; 0x593e <main+0x7fc>
    5938:	12 30       	cpi	r17, 0x02	; 2
    593a:	09 f0       	breq	.+2      	; 0x593e <main+0x7fc>
    593c:	b3 cc       	rjmp	.-1690   	; 0x52a4 <main+0x162>
    593e:	c3 56       	subi	r28, 0x63	; 99
    5940:	df 4f       	sbci	r29, 0xFF	; 255
    5942:	88 81       	ld	r24, Y
    5944:	99 81       	ldd	r25, Y+1	; 0x01
    5946:	aa 81       	ldd	r26, Y+2	; 0x02
    5948:	bb 81       	ldd	r27, Y+3	; 0x03
    594a:	cd 59       	subi	r28, 0x9D	; 157
    594c:	d0 40       	sbci	r29, 0x00	; 0
    594e:	c3 57       	subi	r28, 0x73	; 115
    5950:	df 4f       	sbci	r29, 0xFF	; 255
    5952:	28 81       	ld	r18, Y
    5954:	39 81       	ldd	r19, Y+1	; 0x01
    5956:	4a 81       	ldd	r20, Y+2	; 0x02
    5958:	5b 81       	ldd	r21, Y+3	; 0x03
    595a:	cd 58       	subi	r28, 0x8D	; 141
    595c:	d0 40       	sbci	r29, 0x00	; 0
    595e:	82 1b       	sub	r24, r18
    5960:	93 0b       	sbc	r25, r19
    5962:	a4 0b       	sbc	r26, r20
    5964:	b5 0b       	sbc	r27, r21
    5966:	03 97       	sbiw	r24, 0x03	; 3
    5968:	a1 05       	cpc	r26, r1
				buzzer_counter_init(104, 50);
    596a:	b1 05       	cpc	r27, r1
    596c:	64 f4       	brge	.+24     	; 0x5986 <main+0x844>
    596e:	22 33       	cpi	r18, 0x32	; 50
    5970:	31 05       	cpc	r19, r1
    5972:	41 05       	cpc	r20, r1
    5974:	51 05       	cpc	r21, r1
				state = 3;
    5976:	4c f4       	brge	.+18     	; 0x598a <main+0x848>
    5978:	62 e3       	ldi	r22, 0x32	; 50
    597a:	70 e0       	ldi	r23, 0x00	; 0
    597c:	88 e6       	ldi	r24, 0x68	; 104
    597e:	90 e0       	ldi	r25, 0x00	; 0
		}
	
	
	
	
	}
    5980:	18 d9       	rcall	.-3536   	; 0x4bb2 <buzzer_counter_init>
    5982:	13 e0       	ldi	r17, 0x03	; 3
    5984:	8f cc       	rjmp	.-1762   	; 0x52a4 <main+0x162>
    5986:	12 e0       	ldi	r17, 0x02	; 2
    5988:	8d cc       	rjmp	.-1766   	; 0x52a4 <main+0x162>
    598a:	12 e0       	ldi	r17, 0x02	; 2
    598c:	8b cc       	rjmp	.-1770   	; 0x52a4 <main+0x162>

0000598e <__subsf3>:
    598e:	50 58       	subi	r21, 0x80	; 128

00005990 <__addsf3>:
    5990:	bb 27       	eor	r27, r27
    5992:	aa 27       	eor	r26, r26
    5994:	0e d0       	rcall	.+28     	; 0x59b2 <__addsf3x>
    5996:	fc c1       	rjmp	.+1016   	; 0x5d90 <__fp_round>
    5998:	ed d1       	rcall	.+986    	; 0x5d74 <__fp_pscA>
    599a:	30 f0       	brcs	.+12     	; 0x59a8 <__addsf3+0x18>
    599c:	f2 d1       	rcall	.+996    	; 0x5d82 <__fp_pscB>
    599e:	20 f0       	brcs	.+8      	; 0x59a8 <__addsf3+0x18>
    59a0:	31 f4       	brne	.+12     	; 0x59ae <__addsf3+0x1e>
    59a2:	9f 3f       	cpi	r25, 0xFF	; 255
    59a4:	11 f4       	brne	.+4      	; 0x59aa <__addsf3+0x1a>
    59a6:	1e f4       	brtc	.+6      	; 0x59ae <__addsf3+0x1e>
    59a8:	bd c1       	rjmp	.+890    	; 0x5d24 <__fp_nan>
    59aa:	0e f4       	brtc	.+2      	; 0x59ae <__addsf3+0x1e>
    59ac:	e0 95       	com	r30
    59ae:	e7 fb       	bst	r30, 7
    59b0:	b3 c1       	rjmp	.+870    	; 0x5d18 <__fp_inf>

000059b2 <__addsf3x>:
    59b2:	e9 2f       	mov	r30, r25
    59b4:	fe d1       	rcall	.+1020   	; 0x5db2 <__fp_split3>
    59b6:	80 f3       	brcs	.-32     	; 0x5998 <__addsf3+0x8>
    59b8:	ba 17       	cp	r27, r26
    59ba:	62 07       	cpc	r22, r18
    59bc:	73 07       	cpc	r23, r19
    59be:	84 07       	cpc	r24, r20
    59c0:	95 07       	cpc	r25, r21
    59c2:	18 f0       	brcs	.+6      	; 0x59ca <__addsf3x+0x18>
    59c4:	71 f4       	brne	.+28     	; 0x59e2 <__addsf3x+0x30>
    59c6:	9e f5       	brtc	.+102    	; 0x5a2e <__addsf3x+0x7c>
    59c8:	16 c2       	rjmp	.+1068   	; 0x5df6 <__fp_zero>
    59ca:	0e f4       	brtc	.+2      	; 0x59ce <__addsf3x+0x1c>
    59cc:	e0 95       	com	r30
    59ce:	0b 2e       	mov	r0, r27
    59d0:	ba 2f       	mov	r27, r26
    59d2:	a0 2d       	mov	r26, r0
    59d4:	0b 01       	movw	r0, r22
    59d6:	b9 01       	movw	r22, r18
    59d8:	90 01       	movw	r18, r0
    59da:	0c 01       	movw	r0, r24
    59dc:	ca 01       	movw	r24, r20
    59de:	a0 01       	movw	r20, r0
    59e0:	11 24       	eor	r1, r1
    59e2:	ff 27       	eor	r31, r31
    59e4:	59 1b       	sub	r21, r25
    59e6:	99 f0       	breq	.+38     	; 0x5a0e <__addsf3x+0x5c>
    59e8:	59 3f       	cpi	r21, 0xF9	; 249
    59ea:	50 f4       	brcc	.+20     	; 0x5a00 <__addsf3x+0x4e>
    59ec:	50 3e       	cpi	r21, 0xE0	; 224
    59ee:	68 f1       	brcs	.+90     	; 0x5a4a <__addsf3x+0x98>
    59f0:	1a 16       	cp	r1, r26
    59f2:	f0 40       	sbci	r31, 0x00	; 0
    59f4:	a2 2f       	mov	r26, r18
    59f6:	23 2f       	mov	r18, r19
    59f8:	34 2f       	mov	r19, r20
    59fa:	44 27       	eor	r20, r20
    59fc:	58 5f       	subi	r21, 0xF8	; 248
    59fe:	f3 cf       	rjmp	.-26     	; 0x59e6 <__addsf3x+0x34>
    5a00:	46 95       	lsr	r20
    5a02:	37 95       	ror	r19
    5a04:	27 95       	ror	r18
    5a06:	a7 95       	ror	r26
    5a08:	f0 40       	sbci	r31, 0x00	; 0
    5a0a:	53 95       	inc	r21
    5a0c:	c9 f7       	brne	.-14     	; 0x5a00 <__addsf3x+0x4e>
    5a0e:	7e f4       	brtc	.+30     	; 0x5a2e <__addsf3x+0x7c>
    5a10:	1f 16       	cp	r1, r31
    5a12:	ba 0b       	sbc	r27, r26
    5a14:	62 0b       	sbc	r22, r18
    5a16:	73 0b       	sbc	r23, r19
    5a18:	84 0b       	sbc	r24, r20
    5a1a:	ba f0       	brmi	.+46     	; 0x5a4a <__addsf3x+0x98>
    5a1c:	91 50       	subi	r25, 0x01	; 1
    5a1e:	a1 f0       	breq	.+40     	; 0x5a48 <__addsf3x+0x96>
    5a20:	ff 0f       	add	r31, r31
    5a22:	bb 1f       	adc	r27, r27
    5a24:	66 1f       	adc	r22, r22
    5a26:	77 1f       	adc	r23, r23
    5a28:	88 1f       	adc	r24, r24
    5a2a:	c2 f7       	brpl	.-16     	; 0x5a1c <__addsf3x+0x6a>
    5a2c:	0e c0       	rjmp	.+28     	; 0x5a4a <__addsf3x+0x98>
    5a2e:	ba 0f       	add	r27, r26
    5a30:	62 1f       	adc	r22, r18
    5a32:	73 1f       	adc	r23, r19
    5a34:	84 1f       	adc	r24, r20
    5a36:	48 f4       	brcc	.+18     	; 0x5a4a <__addsf3x+0x98>
    5a38:	87 95       	ror	r24
    5a3a:	77 95       	ror	r23
    5a3c:	67 95       	ror	r22
    5a3e:	b7 95       	ror	r27
    5a40:	f7 95       	ror	r31
    5a42:	9e 3f       	cpi	r25, 0xFE	; 254
    5a44:	08 f0       	brcs	.+2      	; 0x5a48 <__addsf3x+0x96>
    5a46:	b3 cf       	rjmp	.-154    	; 0x59ae <__addsf3+0x1e>
    5a48:	93 95       	inc	r25
    5a4a:	88 0f       	add	r24, r24
    5a4c:	08 f0       	brcs	.+2      	; 0x5a50 <__addsf3x+0x9e>
    5a4e:	99 27       	eor	r25, r25
    5a50:	ee 0f       	add	r30, r30
    5a52:	97 95       	ror	r25
    5a54:	87 95       	ror	r24
    5a56:	08 95       	ret
    5a58:	8d d1       	rcall	.+794    	; 0x5d74 <__fp_pscA>
    5a5a:	58 f0       	brcs	.+22     	; 0x5a72 <__addsf3x+0xc0>
    5a5c:	80 e8       	ldi	r24, 0x80	; 128
    5a5e:	91 e0       	ldi	r25, 0x01	; 1
    5a60:	09 f4       	brne	.+2      	; 0x5a64 <__addsf3x+0xb2>
    5a62:	9e ef       	ldi	r25, 0xFE	; 254
    5a64:	8e d1       	rcall	.+796    	; 0x5d82 <__fp_pscB>
    5a66:	28 f0       	brcs	.+10     	; 0x5a72 <__addsf3x+0xc0>
    5a68:	40 e8       	ldi	r20, 0x80	; 128
    5a6a:	51 e0       	ldi	r21, 0x01	; 1
    5a6c:	59 f4       	brne	.+22     	; 0x5a84 <atan2+0xe>
    5a6e:	5e ef       	ldi	r21, 0xFE	; 254
    5a70:	09 c0       	rjmp	.+18     	; 0x5a84 <atan2+0xe>
    5a72:	58 c1       	rjmp	.+688    	; 0x5d24 <__fp_nan>
    5a74:	c0 c1       	rjmp	.+896    	; 0x5df6 <__fp_zero>

00005a76 <atan2>:
    5a76:	e9 2f       	mov	r30, r25
    5a78:	e0 78       	andi	r30, 0x80	; 128
    5a7a:	9b d1       	rcall	.+822    	; 0x5db2 <__fp_split3>
    5a7c:	68 f3       	brcs	.-38     	; 0x5a58 <__addsf3x+0xa6>
    5a7e:	09 2e       	mov	r0, r25
    5a80:	05 2a       	or	r0, r21
    5a82:	c1 f3       	breq	.-16     	; 0x5a74 <__addsf3x+0xc2>
    5a84:	26 17       	cp	r18, r22
    5a86:	37 07       	cpc	r19, r23
    5a88:	48 07       	cpc	r20, r24
    5a8a:	59 07       	cpc	r21, r25
    5a8c:	38 f0       	brcs	.+14     	; 0x5a9c <atan2+0x26>
    5a8e:	0e 2e       	mov	r0, r30
    5a90:	07 f8       	bld	r0, 7
    5a92:	e0 25       	eor	r30, r0
    5a94:	69 f0       	breq	.+26     	; 0x5ab0 <atan2+0x3a>
    5a96:	e0 25       	eor	r30, r0
    5a98:	e0 64       	ori	r30, 0x40	; 64
    5a9a:	0a c0       	rjmp	.+20     	; 0x5ab0 <atan2+0x3a>
    5a9c:	ef 63       	ori	r30, 0x3F	; 63
    5a9e:	07 f8       	bld	r0, 7
    5aa0:	00 94       	com	r0
    5aa2:	07 fa       	bst	r0, 7
    5aa4:	db 01       	movw	r26, r22
    5aa6:	b9 01       	movw	r22, r18
    5aa8:	9d 01       	movw	r18, r26
    5aaa:	dc 01       	movw	r26, r24
    5aac:	ca 01       	movw	r24, r20
    5aae:	ad 01       	movw	r20, r26
    5ab0:	ef 93       	push	r30
    5ab2:	47 d0       	rcall	.+142    	; 0x5b42 <__divsf3_pse>
    5ab4:	6d d1       	rcall	.+730    	; 0x5d90 <__fp_round>
    5ab6:	0a d0       	rcall	.+20     	; 0x5acc <atan>
    5ab8:	5f 91       	pop	r21
    5aba:	55 23       	and	r21, r21
    5abc:	31 f0       	breq	.+12     	; 0x5aca <atan2+0x54>
    5abe:	2b ed       	ldi	r18, 0xDB	; 219
    5ac0:	3f e0       	ldi	r19, 0x0F	; 15
    5ac2:	49 e4       	ldi	r20, 0x49	; 73
    5ac4:	50 fd       	sbrc	r21, 0
    5ac6:	49 ec       	ldi	r20, 0xC9	; 201
    5ac8:	63 cf       	rjmp	.-314    	; 0x5990 <__addsf3>
    5aca:	08 95       	ret

00005acc <atan>:
    5acc:	df 93       	push	r29
    5ace:	dd 27       	eor	r29, r29
    5ad0:	b9 2f       	mov	r27, r25
    5ad2:	bf 77       	andi	r27, 0x7F	; 127
    5ad4:	40 e8       	ldi	r20, 0x80	; 128
    5ad6:	5f e3       	ldi	r21, 0x3F	; 63
    5ad8:	16 16       	cp	r1, r22
    5ada:	17 06       	cpc	r1, r23
    5adc:	48 07       	cpc	r20, r24
    5ade:	5b 07       	cpc	r21, r27
    5ae0:	10 f4       	brcc	.+4      	; 0x5ae6 <atan+0x1a>
    5ae2:	d9 2f       	mov	r29, r25
    5ae4:	93 d1       	rcall	.+806    	; 0x5e0c <inverse>
    5ae6:	9f 93       	push	r25
    5ae8:	8f 93       	push	r24
    5aea:	7f 93       	push	r23
    5aec:	6f 93       	push	r22
    5aee:	3a d2       	rcall	.+1140   	; 0x5f64 <square>
    5af0:	ea e7       	ldi	r30, 0x7A	; 122
    5af2:	f2 e0       	ldi	r31, 0x02	; 2
    5af4:	1a d1       	rcall	.+564    	; 0x5d2a <__fp_powser>
    5af6:	4c d1       	rcall	.+664    	; 0x5d90 <__fp_round>
    5af8:	2f 91       	pop	r18
    5afa:	3f 91       	pop	r19
    5afc:	4f 91       	pop	r20
    5afe:	5f 91       	pop	r21
    5b00:	98 d1       	rcall	.+816    	; 0x5e32 <__mulsf3x>
    5b02:	dd 23       	and	r29, r29
    5b04:	49 f0       	breq	.+18     	; 0x5b18 <atan+0x4c>
    5b06:	90 58       	subi	r25, 0x80	; 128
    5b08:	a2 ea       	ldi	r26, 0xA2	; 162
    5b0a:	2a ed       	ldi	r18, 0xDA	; 218
    5b0c:	3f e0       	ldi	r19, 0x0F	; 15
    5b0e:	49 ec       	ldi	r20, 0xC9	; 201
    5b10:	5f e3       	ldi	r21, 0x3F	; 63
    5b12:	d0 78       	andi	r29, 0x80	; 128
    5b14:	5d 27       	eor	r21, r29
    5b16:	4d df       	rcall	.-358    	; 0x59b2 <__addsf3x>
    5b18:	df 91       	pop	r29
    5b1a:	3a c1       	rjmp	.+628    	; 0x5d90 <__fp_round>

00005b1c <__cmpsf2>:
    5b1c:	d9 d0       	rcall	.+434    	; 0x5cd0 <__fp_cmp>
    5b1e:	08 f4       	brcc	.+2      	; 0x5b22 <__cmpsf2+0x6>
    5b20:	81 e0       	ldi	r24, 0x01	; 1
    5b22:	08 95       	ret

00005b24 <__divsf3>:
    5b24:	0c d0       	rcall	.+24     	; 0x5b3e <__divsf3x>
    5b26:	34 c1       	rjmp	.+616    	; 0x5d90 <__fp_round>
    5b28:	2c d1       	rcall	.+600    	; 0x5d82 <__fp_pscB>
    5b2a:	40 f0       	brcs	.+16     	; 0x5b3c <__divsf3+0x18>
    5b2c:	23 d1       	rcall	.+582    	; 0x5d74 <__fp_pscA>
    5b2e:	30 f0       	brcs	.+12     	; 0x5b3c <__divsf3+0x18>
    5b30:	21 f4       	brne	.+8      	; 0x5b3a <__divsf3+0x16>
    5b32:	5f 3f       	cpi	r21, 0xFF	; 255
    5b34:	19 f0       	breq	.+6      	; 0x5b3c <__divsf3+0x18>
    5b36:	f0 c0       	rjmp	.+480    	; 0x5d18 <__fp_inf>
    5b38:	51 11       	cpse	r21, r1
    5b3a:	5e c1       	rjmp	.+700    	; 0x5df8 <__fp_szero>
    5b3c:	f3 c0       	rjmp	.+486    	; 0x5d24 <__fp_nan>

00005b3e <__divsf3x>:
    5b3e:	39 d1       	rcall	.+626    	; 0x5db2 <__fp_split3>
    5b40:	98 f3       	brcs	.-26     	; 0x5b28 <__divsf3+0x4>

00005b42 <__divsf3_pse>:
    5b42:	99 23       	and	r25, r25
    5b44:	c9 f3       	breq	.-14     	; 0x5b38 <__divsf3+0x14>
    5b46:	55 23       	and	r21, r21
    5b48:	b1 f3       	breq	.-20     	; 0x5b36 <__divsf3+0x12>
    5b4a:	95 1b       	sub	r25, r21
    5b4c:	55 0b       	sbc	r21, r21
    5b4e:	bb 27       	eor	r27, r27
    5b50:	aa 27       	eor	r26, r26
    5b52:	62 17       	cp	r22, r18
    5b54:	73 07       	cpc	r23, r19
    5b56:	84 07       	cpc	r24, r20
    5b58:	38 f0       	brcs	.+14     	; 0x5b68 <__divsf3_pse+0x26>
    5b5a:	9f 5f       	subi	r25, 0xFF	; 255
    5b5c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b5e:	22 0f       	add	r18, r18
    5b60:	33 1f       	adc	r19, r19
    5b62:	44 1f       	adc	r20, r20
    5b64:	aa 1f       	adc	r26, r26
    5b66:	a9 f3       	breq	.-22     	; 0x5b52 <__divsf3_pse+0x10>
    5b68:	33 d0       	rcall	.+102    	; 0x5bd0 <__divsf3_pse+0x8e>
    5b6a:	0e 2e       	mov	r0, r30
    5b6c:	3a f0       	brmi	.+14     	; 0x5b7c <__divsf3_pse+0x3a>
    5b6e:	e0 e8       	ldi	r30, 0x80	; 128
    5b70:	30 d0       	rcall	.+96     	; 0x5bd2 <__divsf3_pse+0x90>
    5b72:	91 50       	subi	r25, 0x01	; 1
    5b74:	50 40       	sbci	r21, 0x00	; 0
    5b76:	e6 95       	lsr	r30
    5b78:	00 1c       	adc	r0, r0
    5b7a:	ca f7       	brpl	.-14     	; 0x5b6e <__divsf3_pse+0x2c>
    5b7c:	29 d0       	rcall	.+82     	; 0x5bd0 <__divsf3_pse+0x8e>
    5b7e:	fe 2f       	mov	r31, r30
    5b80:	27 d0       	rcall	.+78     	; 0x5bd0 <__divsf3_pse+0x8e>
    5b82:	66 0f       	add	r22, r22
    5b84:	77 1f       	adc	r23, r23
    5b86:	88 1f       	adc	r24, r24
    5b88:	bb 1f       	adc	r27, r27
    5b8a:	26 17       	cp	r18, r22
    5b8c:	37 07       	cpc	r19, r23
    5b8e:	48 07       	cpc	r20, r24
    5b90:	ab 07       	cpc	r26, r27
    5b92:	b0 e8       	ldi	r27, 0x80	; 128
    5b94:	09 f0       	breq	.+2      	; 0x5b98 <__divsf3_pse+0x56>
    5b96:	bb 0b       	sbc	r27, r27
    5b98:	80 2d       	mov	r24, r0
    5b9a:	bf 01       	movw	r22, r30
    5b9c:	ff 27       	eor	r31, r31
    5b9e:	93 58       	subi	r25, 0x83	; 131
    5ba0:	5f 4f       	sbci	r21, 0xFF	; 255
    5ba2:	2a f0       	brmi	.+10     	; 0x5bae <__divsf3_pse+0x6c>
    5ba4:	9e 3f       	cpi	r25, 0xFE	; 254
    5ba6:	51 05       	cpc	r21, r1
    5ba8:	68 f0       	brcs	.+26     	; 0x5bc4 <__divsf3_pse+0x82>
    5baa:	b6 c0       	rjmp	.+364    	; 0x5d18 <__fp_inf>
    5bac:	25 c1       	rjmp	.+586    	; 0x5df8 <__fp_szero>
    5bae:	5f 3f       	cpi	r21, 0xFF	; 255
    5bb0:	ec f3       	brlt	.-6      	; 0x5bac <__divsf3_pse+0x6a>
    5bb2:	98 3e       	cpi	r25, 0xE8	; 232
    5bb4:	dc f3       	brlt	.-10     	; 0x5bac <__divsf3_pse+0x6a>
    5bb6:	86 95       	lsr	r24
    5bb8:	77 95       	ror	r23
    5bba:	67 95       	ror	r22
    5bbc:	b7 95       	ror	r27
    5bbe:	f7 95       	ror	r31
    5bc0:	9f 5f       	subi	r25, 0xFF	; 255
    5bc2:	c9 f7       	brne	.-14     	; 0x5bb6 <__divsf3_pse+0x74>
    5bc4:	88 0f       	add	r24, r24
    5bc6:	91 1d       	adc	r25, r1
    5bc8:	96 95       	lsr	r25
    5bca:	87 95       	ror	r24
    5bcc:	97 f9       	bld	r25, 7
    5bce:	08 95       	ret
    5bd0:	e1 e0       	ldi	r30, 0x01	; 1
    5bd2:	66 0f       	add	r22, r22
    5bd4:	77 1f       	adc	r23, r23
    5bd6:	88 1f       	adc	r24, r24
    5bd8:	bb 1f       	adc	r27, r27
    5bda:	62 17       	cp	r22, r18
    5bdc:	73 07       	cpc	r23, r19
    5bde:	84 07       	cpc	r24, r20
    5be0:	ba 07       	cpc	r27, r26
    5be2:	20 f0       	brcs	.+8      	; 0x5bec <__divsf3_pse+0xaa>
    5be4:	62 1b       	sub	r22, r18
    5be6:	73 0b       	sbc	r23, r19
    5be8:	84 0b       	sbc	r24, r20
    5bea:	ba 0b       	sbc	r27, r26
    5bec:	ee 1f       	adc	r30, r30
    5bee:	88 f7       	brcc	.-30     	; 0x5bd2 <__divsf3_pse+0x90>
    5bf0:	e0 95       	com	r30
    5bf2:	08 95       	ret

00005bf4 <__fixsfsi>:
    5bf4:	04 d0       	rcall	.+8      	; 0x5bfe <__fixunssfsi>
    5bf6:	68 94       	set
    5bf8:	b1 11       	cpse	r27, r1
    5bfa:	fe c0       	rjmp	.+508    	; 0x5df8 <__fp_szero>
    5bfc:	08 95       	ret

00005bfe <__fixunssfsi>:
    5bfe:	e1 d0       	rcall	.+450    	; 0x5dc2 <__fp_splitA>
    5c00:	88 f0       	brcs	.+34     	; 0x5c24 <__fixunssfsi+0x26>
    5c02:	9f 57       	subi	r25, 0x7F	; 127
    5c04:	90 f0       	brcs	.+36     	; 0x5c2a <__fixunssfsi+0x2c>
    5c06:	b9 2f       	mov	r27, r25
    5c08:	99 27       	eor	r25, r25
    5c0a:	b7 51       	subi	r27, 0x17	; 23
    5c0c:	a0 f0       	brcs	.+40     	; 0x5c36 <__fixunssfsi+0x38>
    5c0e:	d1 f0       	breq	.+52     	; 0x5c44 <__fixunssfsi+0x46>
    5c10:	66 0f       	add	r22, r22
    5c12:	77 1f       	adc	r23, r23
    5c14:	88 1f       	adc	r24, r24
    5c16:	99 1f       	adc	r25, r25
    5c18:	1a f0       	brmi	.+6      	; 0x5c20 <__fixunssfsi+0x22>
    5c1a:	ba 95       	dec	r27
    5c1c:	c9 f7       	brne	.-14     	; 0x5c10 <__fixunssfsi+0x12>
    5c1e:	12 c0       	rjmp	.+36     	; 0x5c44 <__fixunssfsi+0x46>
    5c20:	b1 30       	cpi	r27, 0x01	; 1
    5c22:	81 f0       	breq	.+32     	; 0x5c44 <__fixunssfsi+0x46>
    5c24:	e8 d0       	rcall	.+464    	; 0x5df6 <__fp_zero>
    5c26:	b1 e0       	ldi	r27, 0x01	; 1
    5c28:	08 95       	ret
    5c2a:	e5 c0       	rjmp	.+458    	; 0x5df6 <__fp_zero>
    5c2c:	67 2f       	mov	r22, r23
    5c2e:	78 2f       	mov	r23, r24
    5c30:	88 27       	eor	r24, r24
    5c32:	b8 5f       	subi	r27, 0xF8	; 248
    5c34:	39 f0       	breq	.+14     	; 0x5c44 <__fixunssfsi+0x46>
    5c36:	b9 3f       	cpi	r27, 0xF9	; 249
    5c38:	cc f3       	brlt	.-14     	; 0x5c2c <__fixunssfsi+0x2e>
    5c3a:	86 95       	lsr	r24
    5c3c:	77 95       	ror	r23
    5c3e:	67 95       	ror	r22
    5c40:	b3 95       	inc	r27
    5c42:	d9 f7       	brne	.-10     	; 0x5c3a <__fixunssfsi+0x3c>
    5c44:	3e f4       	brtc	.+14     	; 0x5c54 <__fixunssfsi+0x56>
    5c46:	90 95       	com	r25
    5c48:	80 95       	com	r24
    5c4a:	70 95       	com	r23
    5c4c:	61 95       	neg	r22
    5c4e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c50:	8f 4f       	sbci	r24, 0xFF	; 255
    5c52:	9f 4f       	sbci	r25, 0xFF	; 255
    5c54:	08 95       	ret

00005c56 <__floatunsisf>:
    5c56:	e8 94       	clt
    5c58:	09 c0       	rjmp	.+18     	; 0x5c6c <__floatsisf+0x12>

00005c5a <__floatsisf>:
    5c5a:	97 fb       	bst	r25, 7
    5c5c:	3e f4       	brtc	.+14     	; 0x5c6c <__floatsisf+0x12>
    5c5e:	90 95       	com	r25
    5c60:	80 95       	com	r24
    5c62:	70 95       	com	r23
    5c64:	61 95       	neg	r22
    5c66:	7f 4f       	sbci	r23, 0xFF	; 255
    5c68:	8f 4f       	sbci	r24, 0xFF	; 255
    5c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c6c:	99 23       	and	r25, r25
    5c6e:	a9 f0       	breq	.+42     	; 0x5c9a <__floatsisf+0x40>
    5c70:	f9 2f       	mov	r31, r25
    5c72:	96 e9       	ldi	r25, 0x96	; 150
    5c74:	bb 27       	eor	r27, r27
    5c76:	93 95       	inc	r25
    5c78:	f6 95       	lsr	r31
    5c7a:	87 95       	ror	r24
    5c7c:	77 95       	ror	r23
    5c7e:	67 95       	ror	r22
    5c80:	b7 95       	ror	r27
    5c82:	f1 11       	cpse	r31, r1
    5c84:	f8 cf       	rjmp	.-16     	; 0x5c76 <__floatsisf+0x1c>
    5c86:	fa f4       	brpl	.+62     	; 0x5cc6 <__floatsisf+0x6c>
    5c88:	bb 0f       	add	r27, r27
    5c8a:	11 f4       	brne	.+4      	; 0x5c90 <__floatsisf+0x36>
    5c8c:	60 ff       	sbrs	r22, 0
    5c8e:	1b c0       	rjmp	.+54     	; 0x5cc6 <__floatsisf+0x6c>
    5c90:	6f 5f       	subi	r22, 0xFF	; 255
    5c92:	7f 4f       	sbci	r23, 0xFF	; 255
    5c94:	8f 4f       	sbci	r24, 0xFF	; 255
    5c96:	9f 4f       	sbci	r25, 0xFF	; 255
    5c98:	16 c0       	rjmp	.+44     	; 0x5cc6 <__floatsisf+0x6c>
    5c9a:	88 23       	and	r24, r24
    5c9c:	11 f0       	breq	.+4      	; 0x5ca2 <__floatsisf+0x48>
    5c9e:	96 e9       	ldi	r25, 0x96	; 150
    5ca0:	11 c0       	rjmp	.+34     	; 0x5cc4 <__floatsisf+0x6a>
    5ca2:	77 23       	and	r23, r23
    5ca4:	21 f0       	breq	.+8      	; 0x5cae <__floatsisf+0x54>
    5ca6:	9e e8       	ldi	r25, 0x8E	; 142
    5ca8:	87 2f       	mov	r24, r23
    5caa:	76 2f       	mov	r23, r22
    5cac:	05 c0       	rjmp	.+10     	; 0x5cb8 <__floatsisf+0x5e>
    5cae:	66 23       	and	r22, r22
    5cb0:	71 f0       	breq	.+28     	; 0x5cce <__floatsisf+0x74>
    5cb2:	96 e8       	ldi	r25, 0x86	; 134
    5cb4:	86 2f       	mov	r24, r22
    5cb6:	70 e0       	ldi	r23, 0x00	; 0
    5cb8:	60 e0       	ldi	r22, 0x00	; 0
    5cba:	2a f0       	brmi	.+10     	; 0x5cc6 <__floatsisf+0x6c>
    5cbc:	9a 95       	dec	r25
    5cbe:	66 0f       	add	r22, r22
    5cc0:	77 1f       	adc	r23, r23
    5cc2:	88 1f       	adc	r24, r24
    5cc4:	da f7       	brpl	.-10     	; 0x5cbc <__floatsisf+0x62>
    5cc6:	88 0f       	add	r24, r24
    5cc8:	96 95       	lsr	r25
    5cca:	87 95       	ror	r24
    5ccc:	97 f9       	bld	r25, 7
    5cce:	08 95       	ret

00005cd0 <__fp_cmp>:
    5cd0:	99 0f       	add	r25, r25
    5cd2:	00 08       	sbc	r0, r0
    5cd4:	55 0f       	add	r21, r21
    5cd6:	aa 0b       	sbc	r26, r26
    5cd8:	e0 e8       	ldi	r30, 0x80	; 128
    5cda:	fe ef       	ldi	r31, 0xFE	; 254
    5cdc:	16 16       	cp	r1, r22
    5cde:	17 06       	cpc	r1, r23
    5ce0:	e8 07       	cpc	r30, r24
    5ce2:	f9 07       	cpc	r31, r25
    5ce4:	c0 f0       	brcs	.+48     	; 0x5d16 <__fp_cmp+0x46>
    5ce6:	12 16       	cp	r1, r18
    5ce8:	13 06       	cpc	r1, r19
    5cea:	e4 07       	cpc	r30, r20
    5cec:	f5 07       	cpc	r31, r21
    5cee:	98 f0       	brcs	.+38     	; 0x5d16 <__fp_cmp+0x46>
    5cf0:	62 1b       	sub	r22, r18
    5cf2:	73 0b       	sbc	r23, r19
    5cf4:	84 0b       	sbc	r24, r20
    5cf6:	95 0b       	sbc	r25, r21
    5cf8:	39 f4       	brne	.+14     	; 0x5d08 <__fp_cmp+0x38>
    5cfa:	0a 26       	eor	r0, r26
    5cfc:	61 f0       	breq	.+24     	; 0x5d16 <__fp_cmp+0x46>
    5cfe:	23 2b       	or	r18, r19
    5d00:	24 2b       	or	r18, r20
    5d02:	25 2b       	or	r18, r21
    5d04:	21 f4       	brne	.+8      	; 0x5d0e <__fp_cmp+0x3e>
    5d06:	08 95       	ret
    5d08:	0a 26       	eor	r0, r26
    5d0a:	09 f4       	brne	.+2      	; 0x5d0e <__fp_cmp+0x3e>
    5d0c:	a1 40       	sbci	r26, 0x01	; 1
    5d0e:	a6 95       	lsr	r26
    5d10:	8f ef       	ldi	r24, 0xFF	; 255
    5d12:	81 1d       	adc	r24, r1
    5d14:	81 1d       	adc	r24, r1
    5d16:	08 95       	ret

00005d18 <__fp_inf>:
    5d18:	97 f9       	bld	r25, 7
    5d1a:	9f 67       	ori	r25, 0x7F	; 127
    5d1c:	80 e8       	ldi	r24, 0x80	; 128
    5d1e:	70 e0       	ldi	r23, 0x00	; 0
    5d20:	60 e0       	ldi	r22, 0x00	; 0
    5d22:	08 95       	ret

00005d24 <__fp_nan>:
    5d24:	9f ef       	ldi	r25, 0xFF	; 255
    5d26:	80 ec       	ldi	r24, 0xC0	; 192
    5d28:	08 95       	ret

00005d2a <__fp_powser>:
    5d2a:	df 93       	push	r29
    5d2c:	cf 93       	push	r28
    5d2e:	1f 93       	push	r17
    5d30:	0f 93       	push	r16
    5d32:	ff 92       	push	r15
    5d34:	ef 92       	push	r14
    5d36:	df 92       	push	r13
    5d38:	7b 01       	movw	r14, r22
    5d3a:	8c 01       	movw	r16, r24
    5d3c:	68 94       	set
    5d3e:	05 c0       	rjmp	.+10     	; 0x5d4a <__fp_powser+0x20>
    5d40:	da 2e       	mov	r13, r26
    5d42:	ef 01       	movw	r28, r30
    5d44:	76 d0       	rcall	.+236    	; 0x5e32 <__mulsf3x>
    5d46:	fe 01       	movw	r30, r28
    5d48:	e8 94       	clt
    5d4a:	a5 91       	lpm	r26, Z+
    5d4c:	25 91       	lpm	r18, Z+
    5d4e:	35 91       	lpm	r19, Z+
    5d50:	45 91       	lpm	r20, Z+
    5d52:	55 91       	lpm	r21, Z+
    5d54:	ae f3       	brts	.-22     	; 0x5d40 <__fp_powser+0x16>
    5d56:	ef 01       	movw	r28, r30
    5d58:	2c de       	rcall	.-936    	; 0x59b2 <__addsf3x>
    5d5a:	fe 01       	movw	r30, r28
    5d5c:	97 01       	movw	r18, r14
    5d5e:	a8 01       	movw	r20, r16
    5d60:	da 94       	dec	r13
    5d62:	79 f7       	brne	.-34     	; 0x5d42 <__fp_powser+0x18>
    5d64:	df 90       	pop	r13
    5d66:	ef 90       	pop	r14
    5d68:	ff 90       	pop	r15
    5d6a:	0f 91       	pop	r16
    5d6c:	1f 91       	pop	r17
    5d6e:	cf 91       	pop	r28
    5d70:	df 91       	pop	r29
    5d72:	08 95       	ret

00005d74 <__fp_pscA>:
    5d74:	00 24       	eor	r0, r0
    5d76:	0a 94       	dec	r0
    5d78:	16 16       	cp	r1, r22
    5d7a:	17 06       	cpc	r1, r23
    5d7c:	18 06       	cpc	r1, r24
    5d7e:	09 06       	cpc	r0, r25
    5d80:	08 95       	ret

00005d82 <__fp_pscB>:
    5d82:	00 24       	eor	r0, r0
    5d84:	0a 94       	dec	r0
    5d86:	12 16       	cp	r1, r18
    5d88:	13 06       	cpc	r1, r19
    5d8a:	14 06       	cpc	r1, r20
    5d8c:	05 06       	cpc	r0, r21
    5d8e:	08 95       	ret

00005d90 <__fp_round>:
    5d90:	09 2e       	mov	r0, r25
    5d92:	03 94       	inc	r0
    5d94:	00 0c       	add	r0, r0
    5d96:	11 f4       	brne	.+4      	; 0x5d9c <__fp_round+0xc>
    5d98:	88 23       	and	r24, r24
    5d9a:	52 f0       	brmi	.+20     	; 0x5db0 <__fp_round+0x20>
    5d9c:	bb 0f       	add	r27, r27
    5d9e:	40 f4       	brcc	.+16     	; 0x5db0 <__fp_round+0x20>
    5da0:	bf 2b       	or	r27, r31
    5da2:	11 f4       	brne	.+4      	; 0x5da8 <__fp_round+0x18>
    5da4:	60 ff       	sbrs	r22, 0
    5da6:	04 c0       	rjmp	.+8      	; 0x5db0 <__fp_round+0x20>
    5da8:	6f 5f       	subi	r22, 0xFF	; 255
    5daa:	7f 4f       	sbci	r23, 0xFF	; 255
    5dac:	8f 4f       	sbci	r24, 0xFF	; 255
    5dae:	9f 4f       	sbci	r25, 0xFF	; 255
    5db0:	08 95       	ret

00005db2 <__fp_split3>:
    5db2:	57 fd       	sbrc	r21, 7
    5db4:	90 58       	subi	r25, 0x80	; 128
    5db6:	44 0f       	add	r20, r20
    5db8:	55 1f       	adc	r21, r21
    5dba:	59 f0       	breq	.+22     	; 0x5dd2 <__fp_splitA+0x10>
    5dbc:	5f 3f       	cpi	r21, 0xFF	; 255
    5dbe:	71 f0       	breq	.+28     	; 0x5ddc <__fp_splitA+0x1a>
    5dc0:	47 95       	ror	r20

00005dc2 <__fp_splitA>:
    5dc2:	88 0f       	add	r24, r24
    5dc4:	97 fb       	bst	r25, 7
    5dc6:	99 1f       	adc	r25, r25
    5dc8:	61 f0       	breq	.+24     	; 0x5de2 <__fp_splitA+0x20>
    5dca:	9f 3f       	cpi	r25, 0xFF	; 255
    5dcc:	79 f0       	breq	.+30     	; 0x5dec <__fp_splitA+0x2a>
    5dce:	87 95       	ror	r24
    5dd0:	08 95       	ret
    5dd2:	12 16       	cp	r1, r18
    5dd4:	13 06       	cpc	r1, r19
    5dd6:	14 06       	cpc	r1, r20
    5dd8:	55 1f       	adc	r21, r21
    5dda:	f2 cf       	rjmp	.-28     	; 0x5dc0 <__fp_split3+0xe>
    5ddc:	46 95       	lsr	r20
    5dde:	f1 df       	rcall	.-30     	; 0x5dc2 <__fp_splitA>
    5de0:	08 c0       	rjmp	.+16     	; 0x5df2 <__fp_splitA+0x30>
    5de2:	16 16       	cp	r1, r22
    5de4:	17 06       	cpc	r1, r23
    5de6:	18 06       	cpc	r1, r24
    5de8:	99 1f       	adc	r25, r25
    5dea:	f1 cf       	rjmp	.-30     	; 0x5dce <__fp_splitA+0xc>
    5dec:	86 95       	lsr	r24
    5dee:	71 05       	cpc	r23, r1
    5df0:	61 05       	cpc	r22, r1
    5df2:	08 94       	sec
    5df4:	08 95       	ret

00005df6 <__fp_zero>:
    5df6:	e8 94       	clt

00005df8 <__fp_szero>:
    5df8:	bb 27       	eor	r27, r27
    5dfa:	66 27       	eor	r22, r22
    5dfc:	77 27       	eor	r23, r23
    5dfe:	cb 01       	movw	r24, r22
    5e00:	97 f9       	bld	r25, 7
    5e02:	08 95       	ret

00005e04 <__gesf2>:
    5e04:	65 df       	rcall	.-310    	; 0x5cd0 <__fp_cmp>
    5e06:	08 f4       	brcc	.+2      	; 0x5e0a <__gesf2+0x6>
    5e08:	8f ef       	ldi	r24, 0xFF	; 255
    5e0a:	08 95       	ret

00005e0c <inverse>:
    5e0c:	9b 01       	movw	r18, r22
    5e0e:	ac 01       	movw	r20, r24
    5e10:	60 e0       	ldi	r22, 0x00	; 0
    5e12:	70 e0       	ldi	r23, 0x00	; 0
    5e14:	80 e8       	ldi	r24, 0x80	; 128
    5e16:	9f e3       	ldi	r25, 0x3F	; 63
    5e18:	85 ce       	rjmp	.-758    	; 0x5b24 <__divsf3>

00005e1a <__mulsf3>:
    5e1a:	0b d0       	rcall	.+22     	; 0x5e32 <__mulsf3x>
    5e1c:	b9 cf       	rjmp	.-142    	; 0x5d90 <__fp_round>
    5e1e:	aa df       	rcall	.-172    	; 0x5d74 <__fp_pscA>
    5e20:	28 f0       	brcs	.+10     	; 0x5e2c <__mulsf3+0x12>
    5e22:	af df       	rcall	.-162    	; 0x5d82 <__fp_pscB>
    5e24:	18 f0       	brcs	.+6      	; 0x5e2c <__mulsf3+0x12>
    5e26:	95 23       	and	r25, r21
    5e28:	09 f0       	breq	.+2      	; 0x5e2c <__mulsf3+0x12>
    5e2a:	76 cf       	rjmp	.-276    	; 0x5d18 <__fp_inf>
    5e2c:	7b cf       	rjmp	.-266    	; 0x5d24 <__fp_nan>
    5e2e:	11 24       	eor	r1, r1
    5e30:	e3 cf       	rjmp	.-58     	; 0x5df8 <__fp_szero>

00005e32 <__mulsf3x>:
    5e32:	bf df       	rcall	.-130    	; 0x5db2 <__fp_split3>
    5e34:	a0 f3       	brcs	.-24     	; 0x5e1e <__mulsf3+0x4>

00005e36 <__mulsf3_pse>:
    5e36:	95 9f       	mul	r25, r21
    5e38:	d1 f3       	breq	.-12     	; 0x5e2e <__mulsf3+0x14>
    5e3a:	95 0f       	add	r25, r21
    5e3c:	50 e0       	ldi	r21, 0x00	; 0
    5e3e:	55 1f       	adc	r21, r21
    5e40:	62 9f       	mul	r22, r18
    5e42:	f0 01       	movw	r30, r0
    5e44:	72 9f       	mul	r23, r18
    5e46:	bb 27       	eor	r27, r27
    5e48:	f0 0d       	add	r31, r0
    5e4a:	b1 1d       	adc	r27, r1
    5e4c:	63 9f       	mul	r22, r19
    5e4e:	aa 27       	eor	r26, r26
    5e50:	f0 0d       	add	r31, r0
    5e52:	b1 1d       	adc	r27, r1
    5e54:	aa 1f       	adc	r26, r26
    5e56:	64 9f       	mul	r22, r20
    5e58:	66 27       	eor	r22, r22
    5e5a:	b0 0d       	add	r27, r0
    5e5c:	a1 1d       	adc	r26, r1
    5e5e:	66 1f       	adc	r22, r22
    5e60:	82 9f       	mul	r24, r18
    5e62:	22 27       	eor	r18, r18
    5e64:	b0 0d       	add	r27, r0
    5e66:	a1 1d       	adc	r26, r1
    5e68:	62 1f       	adc	r22, r18
    5e6a:	73 9f       	mul	r23, r19
    5e6c:	b0 0d       	add	r27, r0
    5e6e:	a1 1d       	adc	r26, r1
    5e70:	62 1f       	adc	r22, r18
    5e72:	83 9f       	mul	r24, r19
    5e74:	a0 0d       	add	r26, r0
    5e76:	61 1d       	adc	r22, r1
    5e78:	22 1f       	adc	r18, r18
    5e7a:	74 9f       	mul	r23, r20
    5e7c:	33 27       	eor	r19, r19
    5e7e:	a0 0d       	add	r26, r0
    5e80:	61 1d       	adc	r22, r1
    5e82:	23 1f       	adc	r18, r19
    5e84:	84 9f       	mul	r24, r20
    5e86:	60 0d       	add	r22, r0
    5e88:	21 1d       	adc	r18, r1
    5e8a:	82 2f       	mov	r24, r18
    5e8c:	76 2f       	mov	r23, r22
    5e8e:	6a 2f       	mov	r22, r26
    5e90:	11 24       	eor	r1, r1
    5e92:	9f 57       	subi	r25, 0x7F	; 127
    5e94:	50 40       	sbci	r21, 0x00	; 0
    5e96:	8a f0       	brmi	.+34     	; 0x5eba <__mulsf3_pse+0x84>
    5e98:	e1 f0       	breq	.+56     	; 0x5ed2 <__mulsf3_pse+0x9c>
    5e9a:	88 23       	and	r24, r24
    5e9c:	4a f0       	brmi	.+18     	; 0x5eb0 <__mulsf3_pse+0x7a>
    5e9e:	ee 0f       	add	r30, r30
    5ea0:	ff 1f       	adc	r31, r31
    5ea2:	bb 1f       	adc	r27, r27
    5ea4:	66 1f       	adc	r22, r22
    5ea6:	77 1f       	adc	r23, r23
    5ea8:	88 1f       	adc	r24, r24
    5eaa:	91 50       	subi	r25, 0x01	; 1
    5eac:	50 40       	sbci	r21, 0x00	; 0
    5eae:	a9 f7       	brne	.-22     	; 0x5e9a <__mulsf3_pse+0x64>
    5eb0:	9e 3f       	cpi	r25, 0xFE	; 254
    5eb2:	51 05       	cpc	r21, r1
    5eb4:	70 f0       	brcs	.+28     	; 0x5ed2 <__mulsf3_pse+0x9c>
    5eb6:	30 cf       	rjmp	.-416    	; 0x5d18 <__fp_inf>
    5eb8:	9f cf       	rjmp	.-194    	; 0x5df8 <__fp_szero>
    5eba:	5f 3f       	cpi	r21, 0xFF	; 255
    5ebc:	ec f3       	brlt	.-6      	; 0x5eb8 <__mulsf3_pse+0x82>
    5ebe:	98 3e       	cpi	r25, 0xE8	; 232
    5ec0:	dc f3       	brlt	.-10     	; 0x5eb8 <__mulsf3_pse+0x82>
    5ec2:	86 95       	lsr	r24
    5ec4:	77 95       	ror	r23
    5ec6:	67 95       	ror	r22
    5ec8:	b7 95       	ror	r27
    5eca:	f7 95       	ror	r31
    5ecc:	e7 95       	ror	r30
    5ece:	9f 5f       	subi	r25, 0xFF	; 255
    5ed0:	c1 f7       	brne	.-16     	; 0x5ec2 <__mulsf3_pse+0x8c>
    5ed2:	fe 2b       	or	r31, r30
    5ed4:	88 0f       	add	r24, r24
    5ed6:	91 1d       	adc	r25, r1
    5ed8:	96 95       	lsr	r25
    5eda:	87 95       	ror	r24
    5edc:	97 f9       	bld	r25, 7
    5ede:	08 95       	ret
    5ee0:	11 f4       	brne	.+4      	; 0x5ee6 <__mulsf3_pse+0xb0>
    5ee2:	0e f4       	brtc	.+2      	; 0x5ee6 <__mulsf3_pse+0xb0>
    5ee4:	1f cf       	rjmp	.-450    	; 0x5d24 <__fp_nan>
    5ee6:	41 c0       	rjmp	.+130    	; 0x5f6a <__fp_mpack>

00005ee8 <sqrt>:
    5ee8:	6c df       	rcall	.-296    	; 0x5dc2 <__fp_splitA>
    5eea:	d0 f3       	brcs	.-12     	; 0x5ee0 <__mulsf3_pse+0xaa>
    5eec:	99 23       	and	r25, r25
    5eee:	d9 f3       	breq	.-10     	; 0x5ee6 <__mulsf3_pse+0xb0>
    5ef0:	ce f3       	brts	.-14     	; 0x5ee4 <__mulsf3_pse+0xae>
    5ef2:	9f 57       	subi	r25, 0x7F	; 127
    5ef4:	55 0b       	sbc	r21, r21
    5ef6:	87 ff       	sbrs	r24, 7
    5ef8:	46 d0       	rcall	.+140    	; 0x5f86 <__fp_norm2>
    5efa:	00 24       	eor	r0, r0
    5efc:	a0 e6       	ldi	r26, 0x60	; 96
    5efe:	40 ea       	ldi	r20, 0xA0	; 160
    5f00:	90 01       	movw	r18, r0
    5f02:	80 58       	subi	r24, 0x80	; 128
    5f04:	56 95       	lsr	r21
    5f06:	97 95       	ror	r25
    5f08:	28 f4       	brcc	.+10     	; 0x5f14 <sqrt+0x2c>
    5f0a:	80 5c       	subi	r24, 0xC0	; 192
    5f0c:	66 0f       	add	r22, r22
    5f0e:	77 1f       	adc	r23, r23
    5f10:	88 1f       	adc	r24, r24
    5f12:	20 f0       	brcs	.+8      	; 0x5f1c <sqrt+0x34>
    5f14:	26 17       	cp	r18, r22
    5f16:	37 07       	cpc	r19, r23
    5f18:	48 07       	cpc	r20, r24
    5f1a:	30 f4       	brcc	.+12     	; 0x5f28 <sqrt+0x40>
    5f1c:	62 1b       	sub	r22, r18
    5f1e:	73 0b       	sbc	r23, r19
    5f20:	84 0b       	sbc	r24, r20
    5f22:	20 29       	or	r18, r0
    5f24:	31 29       	or	r19, r1
    5f26:	4a 2b       	or	r20, r26
    5f28:	a6 95       	lsr	r26
    5f2a:	17 94       	ror	r1
    5f2c:	07 94       	ror	r0
    5f2e:	20 25       	eor	r18, r0
    5f30:	31 25       	eor	r19, r1
    5f32:	4a 27       	eor	r20, r26
    5f34:	58 f7       	brcc	.-42     	; 0x5f0c <sqrt+0x24>
    5f36:	66 0f       	add	r22, r22
    5f38:	77 1f       	adc	r23, r23
    5f3a:	88 1f       	adc	r24, r24
    5f3c:	20 f0       	brcs	.+8      	; 0x5f46 <sqrt+0x5e>
    5f3e:	26 17       	cp	r18, r22
    5f40:	37 07       	cpc	r19, r23
    5f42:	48 07       	cpc	r20, r24
    5f44:	30 f4       	brcc	.+12     	; 0x5f52 <sqrt+0x6a>
    5f46:	62 0b       	sbc	r22, r18
    5f48:	73 0b       	sbc	r23, r19
    5f4a:	84 0b       	sbc	r24, r20
    5f4c:	20 0d       	add	r18, r0
    5f4e:	31 1d       	adc	r19, r1
    5f50:	41 1d       	adc	r20, r1
    5f52:	a0 95       	com	r26
    5f54:	81 f7       	brne	.-32     	; 0x5f36 <sqrt+0x4e>
    5f56:	b9 01       	movw	r22, r18
    5f58:	84 2f       	mov	r24, r20
    5f5a:	91 58       	subi	r25, 0x81	; 129
    5f5c:	88 0f       	add	r24, r24
    5f5e:	96 95       	lsr	r25
    5f60:	87 95       	ror	r24
    5f62:	08 95       	ret

00005f64 <square>:
    5f64:	9b 01       	movw	r18, r22
    5f66:	ac 01       	movw	r20, r24
    5f68:	58 cf       	rjmp	.-336    	; 0x5e1a <__mulsf3>

00005f6a <__fp_mpack>:
    5f6a:	9f 3f       	cpi	r25, 0xFF	; 255
    5f6c:	31 f0       	breq	.+12     	; 0x5f7a <__fp_mpack_finite+0xc>

00005f6e <__fp_mpack_finite>:
    5f6e:	91 50       	subi	r25, 0x01	; 1
    5f70:	20 f4       	brcc	.+8      	; 0x5f7a <__fp_mpack_finite+0xc>
    5f72:	87 95       	ror	r24
    5f74:	77 95       	ror	r23
    5f76:	67 95       	ror	r22
    5f78:	b7 95       	ror	r27
    5f7a:	88 0f       	add	r24, r24
    5f7c:	91 1d       	adc	r25, r1
    5f7e:	96 95       	lsr	r25
    5f80:	87 95       	ror	r24
    5f82:	97 f9       	bld	r25, 7
    5f84:	08 95       	ret

00005f86 <__fp_norm2>:
    5f86:	91 50       	subi	r25, 0x01	; 1
    5f88:	50 40       	sbci	r21, 0x00	; 0
    5f8a:	66 0f       	add	r22, r22
    5f8c:	77 1f       	adc	r23, r23
    5f8e:	88 1f       	adc	r24, r24
    5f90:	d2 f7       	brpl	.-12     	; 0x5f86 <__fp_norm2>
    5f92:	08 95       	ret

00005f94 <vfprintf>:
    5f94:	2f 92       	push	r2
    5f96:	3f 92       	push	r3
    5f98:	4f 92       	push	r4
    5f9a:	5f 92       	push	r5
    5f9c:	6f 92       	push	r6
    5f9e:	7f 92       	push	r7
    5fa0:	8f 92       	push	r8
    5fa2:	9f 92       	push	r9
    5fa4:	af 92       	push	r10
    5fa6:	bf 92       	push	r11
    5fa8:	cf 92       	push	r12
    5faa:	df 92       	push	r13
    5fac:	ef 92       	push	r14
    5fae:	ff 92       	push	r15
    5fb0:	0f 93       	push	r16
    5fb2:	1f 93       	push	r17
    5fb4:	cf 93       	push	r28
    5fb6:	df 93       	push	r29
    5fb8:	cd b7       	in	r28, 0x3d	; 61
    5fba:	de b7       	in	r29, 0x3e	; 62
    5fbc:	60 97       	sbiw	r28, 0x10	; 16
    5fbe:	cd bf       	out	0x3d, r28	; 61
    5fc0:	de bf       	out	0x3e, r29	; 62
    5fc2:	7c 01       	movw	r14, r24
    5fc4:	1b 01       	movw	r2, r22
    5fc6:	6a 01       	movw	r12, r20
    5fc8:	fc 01       	movw	r30, r24
    5fca:	16 82       	std	Z+6, r1	; 0x06
    5fcc:	17 82       	std	Z+7, r1	; 0x07
    5fce:	83 81       	ldd	r24, Z+3	; 0x03
    5fd0:	81 ff       	sbrs	r24, 1
    5fd2:	2a c3       	rjmp	.+1620   	; 0x6628 <vfprintf+0x694>
    5fd4:	9e 01       	movw	r18, r28
    5fd6:	2f 5f       	subi	r18, 0xFF	; 255
    5fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    5fda:	39 01       	movw	r6, r18
    5fdc:	f7 01       	movw	r30, r14
    5fde:	93 81       	ldd	r25, Z+3	; 0x03
    5fe0:	f1 01       	movw	r30, r2
    5fe2:	93 fd       	sbrc	r25, 3
    5fe4:	85 91       	lpm	r24, Z+
    5fe6:	93 ff       	sbrs	r25, 3
    5fe8:	81 91       	ld	r24, Z+
    5fea:	1f 01       	movw	r2, r30
    5fec:	88 23       	and	r24, r24
    5fee:	09 f4       	brne	.+2      	; 0x5ff2 <vfprintf+0x5e>
    5ff0:	17 c3       	rjmp	.+1582   	; 0x6620 <vfprintf+0x68c>
    5ff2:	85 32       	cpi	r24, 0x25	; 37
    5ff4:	39 f4       	brne	.+14     	; 0x6004 <vfprintf+0x70>
    5ff6:	93 fd       	sbrc	r25, 3
    5ff8:	85 91       	lpm	r24, Z+
    5ffa:	93 ff       	sbrs	r25, 3
    5ffc:	81 91       	ld	r24, Z+
    5ffe:	1f 01       	movw	r2, r30
    6000:	85 32       	cpi	r24, 0x25	; 37
    6002:	31 f4       	brne	.+12     	; 0x6010 <vfprintf+0x7c>
    6004:	b7 01       	movw	r22, r14
    6006:	90 e0       	ldi	r25, 0x00	; 0
    6008:	b2 d5       	rcall	.+2916   	; 0x6b6e <fputc>
    600a:	56 01       	movw	r10, r12
    600c:	65 01       	movw	r12, r10
    600e:	e6 cf       	rjmp	.-52     	; 0x5fdc <vfprintf+0x48>
    6010:	10 e0       	ldi	r17, 0x00	; 0
    6012:	51 2c       	mov	r5, r1
    6014:	91 2c       	mov	r9, r1
    6016:	ff e1       	ldi	r31, 0x1F	; 31
    6018:	f9 15       	cp	r31, r9
    601a:	d8 f0       	brcs	.+54     	; 0x6052 <vfprintf+0xbe>
    601c:	8b 32       	cpi	r24, 0x2B	; 43
    601e:	79 f0       	breq	.+30     	; 0x603e <vfprintf+0xaa>
    6020:	38 f4       	brcc	.+14     	; 0x6030 <vfprintf+0x9c>
    6022:	80 32       	cpi	r24, 0x20	; 32
    6024:	79 f0       	breq	.+30     	; 0x6044 <vfprintf+0xb0>
    6026:	83 32       	cpi	r24, 0x23	; 35
    6028:	a1 f4       	brne	.+40     	; 0x6052 <vfprintf+0xbe>
    602a:	f9 2d       	mov	r31, r9
    602c:	f0 61       	ori	r31, 0x10	; 16
    602e:	2e c0       	rjmp	.+92     	; 0x608c <vfprintf+0xf8>
    6030:	8d 32       	cpi	r24, 0x2D	; 45
    6032:	61 f0       	breq	.+24     	; 0x604c <vfprintf+0xb8>
    6034:	80 33       	cpi	r24, 0x30	; 48
    6036:	69 f4       	brne	.+26     	; 0x6052 <vfprintf+0xbe>
    6038:	29 2d       	mov	r18, r9
    603a:	21 60       	ori	r18, 0x01	; 1
    603c:	2d c0       	rjmp	.+90     	; 0x6098 <vfprintf+0x104>
    603e:	39 2d       	mov	r19, r9
    6040:	32 60       	ori	r19, 0x02	; 2
    6042:	93 2e       	mov	r9, r19
    6044:	89 2d       	mov	r24, r9
    6046:	84 60       	ori	r24, 0x04	; 4
    6048:	98 2e       	mov	r9, r24
    604a:	2a c0       	rjmp	.+84     	; 0x60a0 <vfprintf+0x10c>
    604c:	e9 2d       	mov	r30, r9
    604e:	e8 60       	ori	r30, 0x08	; 8
    6050:	15 c0       	rjmp	.+42     	; 0x607c <vfprintf+0xe8>
    6052:	97 fc       	sbrc	r9, 7
    6054:	2d c0       	rjmp	.+90     	; 0x60b0 <vfprintf+0x11c>
    6056:	20 ed       	ldi	r18, 0xD0	; 208
    6058:	28 0f       	add	r18, r24
    605a:	2a 30       	cpi	r18, 0x0A	; 10
    605c:	88 f4       	brcc	.+34     	; 0x6080 <vfprintf+0xec>
    605e:	96 fe       	sbrs	r9, 6
    6060:	06 c0       	rjmp	.+12     	; 0x606e <vfprintf+0xda>
    6062:	3a e0       	ldi	r19, 0x0A	; 10
    6064:	13 9f       	mul	r17, r19
    6066:	20 0d       	add	r18, r0
    6068:	11 24       	eor	r1, r1
    606a:	12 2f       	mov	r17, r18
    606c:	19 c0       	rjmp	.+50     	; 0x60a0 <vfprintf+0x10c>
    606e:	8a e0       	ldi	r24, 0x0A	; 10
    6070:	58 9e       	mul	r5, r24
    6072:	20 0d       	add	r18, r0
    6074:	11 24       	eor	r1, r1
    6076:	52 2e       	mov	r5, r18
    6078:	e9 2d       	mov	r30, r9
    607a:	e0 62       	ori	r30, 0x20	; 32
    607c:	9e 2e       	mov	r9, r30
    607e:	10 c0       	rjmp	.+32     	; 0x60a0 <vfprintf+0x10c>
    6080:	8e 32       	cpi	r24, 0x2E	; 46
    6082:	31 f4       	brne	.+12     	; 0x6090 <vfprintf+0xfc>
    6084:	96 fc       	sbrc	r9, 6
    6086:	cc c2       	rjmp	.+1432   	; 0x6620 <vfprintf+0x68c>
    6088:	f9 2d       	mov	r31, r9
    608a:	f0 64       	ori	r31, 0x40	; 64
    608c:	9f 2e       	mov	r9, r31
    608e:	08 c0       	rjmp	.+16     	; 0x60a0 <vfprintf+0x10c>
    6090:	8c 36       	cpi	r24, 0x6C	; 108
    6092:	21 f4       	brne	.+8      	; 0x609c <vfprintf+0x108>
    6094:	29 2d       	mov	r18, r9
    6096:	20 68       	ori	r18, 0x80	; 128
    6098:	92 2e       	mov	r9, r18
    609a:	02 c0       	rjmp	.+4      	; 0x60a0 <vfprintf+0x10c>
    609c:	88 36       	cpi	r24, 0x68	; 104
    609e:	41 f4       	brne	.+16     	; 0x60b0 <vfprintf+0x11c>
    60a0:	f1 01       	movw	r30, r2
    60a2:	93 fd       	sbrc	r25, 3
    60a4:	85 91       	lpm	r24, Z+
    60a6:	93 ff       	sbrs	r25, 3
    60a8:	81 91       	ld	r24, Z+
    60aa:	1f 01       	movw	r2, r30
    60ac:	81 11       	cpse	r24, r1
    60ae:	b3 cf       	rjmp	.-154    	; 0x6016 <vfprintf+0x82>
    60b0:	9b eb       	ldi	r25, 0xBB	; 187
    60b2:	98 0f       	add	r25, r24
    60b4:	93 30       	cpi	r25, 0x03	; 3
    60b6:	20 f4       	brcc	.+8      	; 0x60c0 <vfprintf+0x12c>
    60b8:	99 2d       	mov	r25, r9
    60ba:	90 61       	ori	r25, 0x10	; 16
    60bc:	80 5e       	subi	r24, 0xE0	; 224
    60be:	07 c0       	rjmp	.+14     	; 0x60ce <vfprintf+0x13a>
    60c0:	9b e9       	ldi	r25, 0x9B	; 155
    60c2:	98 0f       	add	r25, r24
    60c4:	93 30       	cpi	r25, 0x03	; 3
    60c6:	08 f0       	brcs	.+2      	; 0x60ca <vfprintf+0x136>
    60c8:	59 c1       	rjmp	.+690    	; 0x637c <vfprintf+0x3e8>
    60ca:	99 2d       	mov	r25, r9
    60cc:	9f 7e       	andi	r25, 0xEF	; 239
    60ce:	96 ff       	sbrs	r25, 6
    60d0:	16 e0       	ldi	r17, 0x06	; 6
    60d2:	9f 73       	andi	r25, 0x3F	; 63
    60d4:	99 2e       	mov	r9, r25
    60d6:	85 36       	cpi	r24, 0x65	; 101
    60d8:	19 f4       	brne	.+6      	; 0x60e0 <vfprintf+0x14c>
    60da:	90 64       	ori	r25, 0x40	; 64
    60dc:	99 2e       	mov	r9, r25
    60de:	08 c0       	rjmp	.+16     	; 0x60f0 <vfprintf+0x15c>
    60e0:	86 36       	cpi	r24, 0x66	; 102
    60e2:	21 f4       	brne	.+8      	; 0x60ec <vfprintf+0x158>
    60e4:	39 2f       	mov	r19, r25
    60e6:	30 68       	ori	r19, 0x80	; 128
    60e8:	93 2e       	mov	r9, r19
    60ea:	02 c0       	rjmp	.+4      	; 0x60f0 <vfprintf+0x15c>
    60ec:	11 11       	cpse	r17, r1
    60ee:	11 50       	subi	r17, 0x01	; 1
    60f0:	97 fe       	sbrs	r9, 7
    60f2:	07 c0       	rjmp	.+14     	; 0x6102 <vfprintf+0x16e>
    60f4:	1c 33       	cpi	r17, 0x3C	; 60
    60f6:	50 f4       	brcc	.+20     	; 0x610c <vfprintf+0x178>
    60f8:	44 24       	eor	r4, r4
    60fa:	43 94       	inc	r4
    60fc:	41 0e       	add	r4, r17
    60fe:	27 e0       	ldi	r18, 0x07	; 7
    6100:	0b c0       	rjmp	.+22     	; 0x6118 <vfprintf+0x184>
    6102:	18 30       	cpi	r17, 0x08	; 8
    6104:	38 f0       	brcs	.+14     	; 0x6114 <vfprintf+0x180>
    6106:	27 e0       	ldi	r18, 0x07	; 7
    6108:	17 e0       	ldi	r17, 0x07	; 7
    610a:	05 c0       	rjmp	.+10     	; 0x6116 <vfprintf+0x182>
    610c:	27 e0       	ldi	r18, 0x07	; 7
    610e:	9c e3       	ldi	r25, 0x3C	; 60
    6110:	49 2e       	mov	r4, r25
    6112:	02 c0       	rjmp	.+4      	; 0x6118 <vfprintf+0x184>
    6114:	21 2f       	mov	r18, r17
    6116:	41 2c       	mov	r4, r1
    6118:	56 01       	movw	r10, r12
    611a:	84 e0       	ldi	r24, 0x04	; 4
    611c:	a8 0e       	add	r10, r24
    611e:	b1 1c       	adc	r11, r1
    6120:	f6 01       	movw	r30, r12
    6122:	60 81       	ld	r22, Z
    6124:	71 81       	ldd	r23, Z+1	; 0x01
    6126:	82 81       	ldd	r24, Z+2	; 0x02
    6128:	93 81       	ldd	r25, Z+3	; 0x03
    612a:	04 2d       	mov	r16, r4
    612c:	a3 01       	movw	r20, r6
    612e:	e7 d3       	rcall	.+1998   	; 0x68fe <__ftoa_engine>
    6130:	6c 01       	movw	r12, r24
    6132:	f9 81       	ldd	r31, Y+1	; 0x01
    6134:	fc 87       	std	Y+12, r31	; 0x0c
    6136:	f0 ff       	sbrs	r31, 0
    6138:	02 c0       	rjmp	.+4      	; 0x613e <vfprintf+0x1aa>
    613a:	f3 ff       	sbrs	r31, 3
    613c:	06 c0       	rjmp	.+12     	; 0x614a <vfprintf+0x1b6>
    613e:	91 fc       	sbrc	r9, 1
    6140:	06 c0       	rjmp	.+12     	; 0x614e <vfprintf+0x1ba>
    6142:	92 fe       	sbrs	r9, 2
    6144:	06 c0       	rjmp	.+12     	; 0x6152 <vfprintf+0x1be>
    6146:	00 e2       	ldi	r16, 0x20	; 32
    6148:	05 c0       	rjmp	.+10     	; 0x6154 <vfprintf+0x1c0>
    614a:	0d e2       	ldi	r16, 0x2D	; 45
    614c:	03 c0       	rjmp	.+6      	; 0x6154 <vfprintf+0x1c0>
    614e:	0b e2       	ldi	r16, 0x2B	; 43
    6150:	01 c0       	rjmp	.+2      	; 0x6154 <vfprintf+0x1c0>
    6152:	00 e0       	ldi	r16, 0x00	; 0
    6154:	8c 85       	ldd	r24, Y+12	; 0x0c
    6156:	8c 70       	andi	r24, 0x0C	; 12
    6158:	19 f0       	breq	.+6      	; 0x6160 <vfprintf+0x1cc>
    615a:	01 11       	cpse	r16, r1
    615c:	43 c2       	rjmp	.+1158   	; 0x65e4 <vfprintf+0x650>
    615e:	80 c2       	rjmp	.+1280   	; 0x6660 <vfprintf+0x6cc>
    6160:	97 fe       	sbrs	r9, 7
    6162:	10 c0       	rjmp	.+32     	; 0x6184 <vfprintf+0x1f0>
    6164:	4c 0c       	add	r4, r12
    6166:	fc 85       	ldd	r31, Y+12	; 0x0c
    6168:	f4 ff       	sbrs	r31, 4
    616a:	04 c0       	rjmp	.+8      	; 0x6174 <vfprintf+0x1e0>
    616c:	8a 81       	ldd	r24, Y+2	; 0x02
    616e:	81 33       	cpi	r24, 0x31	; 49
    6170:	09 f4       	brne	.+2      	; 0x6174 <vfprintf+0x1e0>
    6172:	4a 94       	dec	r4
    6174:	14 14       	cp	r1, r4
    6176:	74 f5       	brge	.+92     	; 0x61d4 <vfprintf+0x240>
    6178:	28 e0       	ldi	r18, 0x08	; 8
    617a:	24 15       	cp	r18, r4
    617c:	78 f5       	brcc	.+94     	; 0x61dc <vfprintf+0x248>
    617e:	88 e0       	ldi	r24, 0x08	; 8
    6180:	48 2e       	mov	r4, r24
    6182:	2c c0       	rjmp	.+88     	; 0x61dc <vfprintf+0x248>
    6184:	96 fc       	sbrc	r9, 6
    6186:	2a c0       	rjmp	.+84     	; 0x61dc <vfprintf+0x248>
    6188:	81 2f       	mov	r24, r17
    618a:	90 e0       	ldi	r25, 0x00	; 0
    618c:	8c 15       	cp	r24, r12
    618e:	9d 05       	cpc	r25, r13
    6190:	9c f0       	brlt	.+38     	; 0x61b8 <vfprintf+0x224>
    6192:	3c ef       	ldi	r19, 0xFC	; 252
    6194:	c3 16       	cp	r12, r19
    6196:	3f ef       	ldi	r19, 0xFF	; 255
    6198:	d3 06       	cpc	r13, r19
    619a:	74 f0       	brlt	.+28     	; 0x61b8 <vfprintf+0x224>
    619c:	89 2d       	mov	r24, r9
    619e:	80 68       	ori	r24, 0x80	; 128
    61a0:	98 2e       	mov	r9, r24
    61a2:	0a c0       	rjmp	.+20     	; 0x61b8 <vfprintf+0x224>
    61a4:	e2 e0       	ldi	r30, 0x02	; 2
    61a6:	f0 e0       	ldi	r31, 0x00	; 0
    61a8:	ec 0f       	add	r30, r28
    61aa:	fd 1f       	adc	r31, r29
    61ac:	e1 0f       	add	r30, r17
    61ae:	f1 1d       	adc	r31, r1
    61b0:	80 81       	ld	r24, Z
    61b2:	80 33       	cpi	r24, 0x30	; 48
    61b4:	19 f4       	brne	.+6      	; 0x61bc <vfprintf+0x228>
    61b6:	11 50       	subi	r17, 0x01	; 1
    61b8:	11 11       	cpse	r17, r1
    61ba:	f4 cf       	rjmp	.-24     	; 0x61a4 <vfprintf+0x210>
    61bc:	97 fe       	sbrs	r9, 7
    61be:	0e c0       	rjmp	.+28     	; 0x61dc <vfprintf+0x248>
    61c0:	44 24       	eor	r4, r4
    61c2:	43 94       	inc	r4
    61c4:	41 0e       	add	r4, r17
    61c6:	81 2f       	mov	r24, r17
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	c8 16       	cp	r12, r24
    61cc:	d9 06       	cpc	r13, r25
    61ce:	2c f4       	brge	.+10     	; 0x61da <vfprintf+0x246>
    61d0:	1c 19       	sub	r17, r12
    61d2:	04 c0       	rjmp	.+8      	; 0x61dc <vfprintf+0x248>
    61d4:	44 24       	eor	r4, r4
    61d6:	43 94       	inc	r4
    61d8:	01 c0       	rjmp	.+2      	; 0x61dc <vfprintf+0x248>
    61da:	10 e0       	ldi	r17, 0x00	; 0
    61dc:	97 fe       	sbrs	r9, 7
    61de:	06 c0       	rjmp	.+12     	; 0x61ec <vfprintf+0x258>
    61e0:	1c 14       	cp	r1, r12
    61e2:	1d 04       	cpc	r1, r13
    61e4:	34 f4       	brge	.+12     	; 0x61f2 <vfprintf+0x25e>
    61e6:	c6 01       	movw	r24, r12
    61e8:	01 96       	adiw	r24, 0x01	; 1
    61ea:	05 c0       	rjmp	.+10     	; 0x61f6 <vfprintf+0x262>
    61ec:	85 e0       	ldi	r24, 0x05	; 5
    61ee:	90 e0       	ldi	r25, 0x00	; 0
    61f0:	02 c0       	rjmp	.+4      	; 0x61f6 <vfprintf+0x262>
    61f2:	81 e0       	ldi	r24, 0x01	; 1
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	01 11       	cpse	r16, r1
    61f8:	01 96       	adiw	r24, 0x01	; 1
    61fa:	11 23       	and	r17, r17
    61fc:	31 f0       	breq	.+12     	; 0x620a <vfprintf+0x276>
    61fe:	21 2f       	mov	r18, r17
    6200:	30 e0       	ldi	r19, 0x00	; 0
    6202:	2f 5f       	subi	r18, 0xFF	; 255
    6204:	3f 4f       	sbci	r19, 0xFF	; 255
    6206:	82 0f       	add	r24, r18
    6208:	93 1f       	adc	r25, r19
    620a:	25 2d       	mov	r18, r5
    620c:	30 e0       	ldi	r19, 0x00	; 0
    620e:	82 17       	cp	r24, r18
    6210:	93 07       	cpc	r25, r19
    6212:	14 f4       	brge	.+4      	; 0x6218 <vfprintf+0x284>
    6214:	58 1a       	sub	r5, r24
    6216:	01 c0       	rjmp	.+2      	; 0x621a <vfprintf+0x286>
    6218:	51 2c       	mov	r5, r1
    621a:	89 2d       	mov	r24, r9
    621c:	89 70       	andi	r24, 0x09	; 9
    621e:	41 f4       	brne	.+16     	; 0x6230 <vfprintf+0x29c>
    6220:	55 20       	and	r5, r5
    6222:	31 f0       	breq	.+12     	; 0x6230 <vfprintf+0x29c>
    6224:	b7 01       	movw	r22, r14
    6226:	80 e2       	ldi	r24, 0x20	; 32
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	a1 d4       	rcall	.+2370   	; 0x6b6e <fputc>
    622c:	5a 94       	dec	r5
    622e:	f8 cf       	rjmp	.-16     	; 0x6220 <vfprintf+0x28c>
    6230:	00 23       	and	r16, r16
    6232:	21 f0       	breq	.+8      	; 0x623c <vfprintf+0x2a8>
    6234:	b7 01       	movw	r22, r14
    6236:	80 2f       	mov	r24, r16
    6238:	90 e0       	ldi	r25, 0x00	; 0
    623a:	99 d4       	rcall	.+2354   	; 0x6b6e <fputc>
    623c:	93 fc       	sbrc	r9, 3
    623e:	08 c0       	rjmp	.+16     	; 0x6250 <vfprintf+0x2bc>
    6240:	55 20       	and	r5, r5
    6242:	31 f0       	breq	.+12     	; 0x6250 <vfprintf+0x2bc>
    6244:	b7 01       	movw	r22, r14
    6246:	80 e3       	ldi	r24, 0x30	; 48
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	91 d4       	rcall	.+2338   	; 0x6b6e <fputc>
    624c:	5a 94       	dec	r5
    624e:	f8 cf       	rjmp	.-16     	; 0x6240 <vfprintf+0x2ac>
    6250:	97 fe       	sbrs	r9, 7
    6252:	4a c0       	rjmp	.+148    	; 0x62e8 <vfprintf+0x354>
    6254:	46 01       	movw	r8, r12
    6256:	d7 fe       	sbrs	r13, 7
    6258:	02 c0       	rjmp	.+4      	; 0x625e <vfprintf+0x2ca>
    625a:	81 2c       	mov	r8, r1
    625c:	91 2c       	mov	r9, r1
    625e:	c6 01       	movw	r24, r12
    6260:	88 19       	sub	r24, r8
    6262:	99 09       	sbc	r25, r9
    6264:	f3 01       	movw	r30, r6
    6266:	e8 0f       	add	r30, r24
    6268:	f9 1f       	adc	r31, r25
    626a:	ed 87       	std	Y+13, r30	; 0x0d
    626c:	fe 87       	std	Y+14, r31	; 0x0e
    626e:	96 01       	movw	r18, r12
    6270:	24 19       	sub	r18, r4
    6272:	31 09       	sbc	r19, r1
    6274:	2f 87       	std	Y+15, r18	; 0x0f
    6276:	38 8b       	std	Y+16, r19	; 0x10
    6278:	01 2f       	mov	r16, r17
    627a:	10 e0       	ldi	r17, 0x00	; 0
    627c:	11 95       	neg	r17
    627e:	01 95       	neg	r16
    6280:	11 09       	sbc	r17, r1
    6282:	3f ef       	ldi	r19, 0xFF	; 255
    6284:	83 16       	cp	r8, r19
    6286:	93 06       	cpc	r9, r19
    6288:	21 f4       	brne	.+8      	; 0x6292 <vfprintf+0x2fe>
    628a:	b7 01       	movw	r22, r14
    628c:	8e e2       	ldi	r24, 0x2E	; 46
    628e:	90 e0       	ldi	r25, 0x00	; 0
    6290:	6e d4       	rcall	.+2268   	; 0x6b6e <fputc>
    6292:	c8 14       	cp	r12, r8
    6294:	d9 04       	cpc	r13, r9
    6296:	4c f0       	brlt	.+18     	; 0x62aa <vfprintf+0x316>
    6298:	8f 85       	ldd	r24, Y+15	; 0x0f
    629a:	98 89       	ldd	r25, Y+16	; 0x10
    629c:	88 15       	cp	r24, r8
    629e:	99 05       	cpc	r25, r9
    62a0:	24 f4       	brge	.+8      	; 0x62aa <vfprintf+0x316>
    62a2:	ed 85       	ldd	r30, Y+13	; 0x0d
    62a4:	fe 85       	ldd	r31, Y+14	; 0x0e
    62a6:	81 81       	ldd	r24, Z+1	; 0x01
    62a8:	01 c0       	rjmp	.+2      	; 0x62ac <vfprintf+0x318>
    62aa:	80 e3       	ldi	r24, 0x30	; 48
    62ac:	f1 e0       	ldi	r31, 0x01	; 1
    62ae:	8f 1a       	sub	r8, r31
    62b0:	91 08       	sbc	r9, r1
    62b2:	2d 85       	ldd	r18, Y+13	; 0x0d
    62b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    62b6:	2f 5f       	subi	r18, 0xFF	; 255
    62b8:	3f 4f       	sbci	r19, 0xFF	; 255
    62ba:	2d 87       	std	Y+13, r18	; 0x0d
    62bc:	3e 87       	std	Y+14, r19	; 0x0e
    62be:	80 16       	cp	r8, r16
    62c0:	91 06       	cpc	r9, r17
    62c2:	24 f0       	brlt	.+8      	; 0x62cc <vfprintf+0x338>
    62c4:	b7 01       	movw	r22, r14
    62c6:	90 e0       	ldi	r25, 0x00	; 0
    62c8:	52 d4       	rcall	.+2212   	; 0x6b6e <fputc>
    62ca:	db cf       	rjmp	.-74     	; 0x6282 <vfprintf+0x2ee>
    62cc:	c8 14       	cp	r12, r8
    62ce:	d9 04       	cpc	r13, r9
    62d0:	41 f4       	brne	.+16     	; 0x62e2 <vfprintf+0x34e>
    62d2:	9a 81       	ldd	r25, Y+2	; 0x02
    62d4:	96 33       	cpi	r25, 0x36	; 54
    62d6:	20 f4       	brcc	.+8      	; 0x62e0 <vfprintf+0x34c>
    62d8:	95 33       	cpi	r25, 0x35	; 53
    62da:	19 f4       	brne	.+6      	; 0x62e2 <vfprintf+0x34e>
    62dc:	3c 85       	ldd	r19, Y+12	; 0x0c
    62de:	34 ff       	sbrs	r19, 4
    62e0:	81 e3       	ldi	r24, 0x31	; 49
    62e2:	b7 01       	movw	r22, r14
    62e4:	90 e0       	ldi	r25, 0x00	; 0
    62e6:	48 c0       	rjmp	.+144    	; 0x6378 <vfprintf+0x3e4>
    62e8:	8a 81       	ldd	r24, Y+2	; 0x02
    62ea:	81 33       	cpi	r24, 0x31	; 49
    62ec:	19 f0       	breq	.+6      	; 0x62f4 <vfprintf+0x360>
    62ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    62f0:	9f 7e       	andi	r25, 0xEF	; 239
    62f2:	9c 87       	std	Y+12, r25	; 0x0c
    62f4:	b7 01       	movw	r22, r14
    62f6:	90 e0       	ldi	r25, 0x00	; 0
    62f8:	3a d4       	rcall	.+2164   	; 0x6b6e <fputc>
    62fa:	11 11       	cpse	r17, r1
    62fc:	05 c0       	rjmp	.+10     	; 0x6308 <vfprintf+0x374>
    62fe:	94 fc       	sbrc	r9, 4
    6300:	16 c0       	rjmp	.+44     	; 0x632e <vfprintf+0x39a>
    6302:	85 e6       	ldi	r24, 0x65	; 101
    6304:	90 e0       	ldi	r25, 0x00	; 0
    6306:	15 c0       	rjmp	.+42     	; 0x6332 <vfprintf+0x39e>
    6308:	b7 01       	movw	r22, r14
    630a:	8e e2       	ldi	r24, 0x2E	; 46
    630c:	90 e0       	ldi	r25, 0x00	; 0
    630e:	2f d4       	rcall	.+2142   	; 0x6b6e <fputc>
    6310:	1e 5f       	subi	r17, 0xFE	; 254
    6312:	82 e0       	ldi	r24, 0x02	; 2
    6314:	01 e0       	ldi	r16, 0x01	; 1
    6316:	08 0f       	add	r16, r24
    6318:	f3 01       	movw	r30, r6
    631a:	e8 0f       	add	r30, r24
    631c:	f1 1d       	adc	r31, r1
    631e:	80 81       	ld	r24, Z
    6320:	b7 01       	movw	r22, r14
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	24 d4       	rcall	.+2120   	; 0x6b6e <fputc>
    6326:	80 2f       	mov	r24, r16
    6328:	01 13       	cpse	r16, r17
    632a:	f4 cf       	rjmp	.-24     	; 0x6314 <vfprintf+0x380>
    632c:	e8 cf       	rjmp	.-48     	; 0x62fe <vfprintf+0x36a>
    632e:	85 e4       	ldi	r24, 0x45	; 69
    6330:	90 e0       	ldi	r25, 0x00	; 0
    6332:	b7 01       	movw	r22, r14
    6334:	1c d4       	rcall	.+2104   	; 0x6b6e <fputc>
    6336:	d7 fc       	sbrc	r13, 7
    6338:	06 c0       	rjmp	.+12     	; 0x6346 <vfprintf+0x3b2>
    633a:	c1 14       	cp	r12, r1
    633c:	d1 04       	cpc	r13, r1
    633e:	41 f4       	brne	.+16     	; 0x6350 <vfprintf+0x3bc>
    6340:	ec 85       	ldd	r30, Y+12	; 0x0c
    6342:	e4 ff       	sbrs	r30, 4
    6344:	05 c0       	rjmp	.+10     	; 0x6350 <vfprintf+0x3bc>
    6346:	d1 94       	neg	r13
    6348:	c1 94       	neg	r12
    634a:	d1 08       	sbc	r13, r1
    634c:	8d e2       	ldi	r24, 0x2D	; 45
    634e:	01 c0       	rjmp	.+2      	; 0x6352 <vfprintf+0x3be>
    6350:	8b e2       	ldi	r24, 0x2B	; 43
    6352:	b7 01       	movw	r22, r14
    6354:	90 e0       	ldi	r25, 0x00	; 0
    6356:	0b d4       	rcall	.+2070   	; 0x6b6e <fputc>
    6358:	80 e3       	ldi	r24, 0x30	; 48
    635a:	2a e0       	ldi	r18, 0x0A	; 10
    635c:	c2 16       	cp	r12, r18
    635e:	d1 04       	cpc	r13, r1
    6360:	2c f0       	brlt	.+10     	; 0x636c <vfprintf+0x3d8>
    6362:	8f 5f       	subi	r24, 0xFF	; 255
    6364:	fa e0       	ldi	r31, 0x0A	; 10
    6366:	cf 1a       	sub	r12, r31
    6368:	d1 08       	sbc	r13, r1
    636a:	f7 cf       	rjmp	.-18     	; 0x635a <vfprintf+0x3c6>
    636c:	b7 01       	movw	r22, r14
    636e:	90 e0       	ldi	r25, 0x00	; 0
    6370:	fe d3       	rcall	.+2044   	; 0x6b6e <fputc>
    6372:	b7 01       	movw	r22, r14
    6374:	c6 01       	movw	r24, r12
    6376:	c0 96       	adiw	r24, 0x30	; 48
    6378:	fa d3       	rcall	.+2036   	; 0x6b6e <fputc>
    637a:	49 c1       	rjmp	.+658    	; 0x660e <vfprintf+0x67a>
    637c:	83 36       	cpi	r24, 0x63	; 99
    637e:	31 f0       	breq	.+12     	; 0x638c <vfprintf+0x3f8>
    6380:	83 37       	cpi	r24, 0x73	; 115
    6382:	79 f0       	breq	.+30     	; 0x63a2 <vfprintf+0x40e>
    6384:	83 35       	cpi	r24, 0x53	; 83
    6386:	09 f0       	breq	.+2      	; 0x638a <vfprintf+0x3f6>
    6388:	52 c0       	rjmp	.+164    	; 0x642e <vfprintf+0x49a>
    638a:	1f c0       	rjmp	.+62     	; 0x63ca <vfprintf+0x436>
    638c:	56 01       	movw	r10, r12
    638e:	32 e0       	ldi	r19, 0x02	; 2
    6390:	a3 0e       	add	r10, r19
    6392:	b1 1c       	adc	r11, r1
    6394:	f6 01       	movw	r30, r12
    6396:	80 81       	ld	r24, Z
    6398:	89 83       	std	Y+1, r24	; 0x01
    639a:	01 e0       	ldi	r16, 0x01	; 1
    639c:	10 e0       	ldi	r17, 0x00	; 0
    639e:	63 01       	movw	r12, r6
    63a0:	11 c0       	rjmp	.+34     	; 0x63c4 <vfprintf+0x430>
    63a2:	56 01       	movw	r10, r12
    63a4:	f2 e0       	ldi	r31, 0x02	; 2
    63a6:	af 0e       	add	r10, r31
    63a8:	b1 1c       	adc	r11, r1
    63aa:	f6 01       	movw	r30, r12
    63ac:	c0 80       	ld	r12, Z
    63ae:	d1 80       	ldd	r13, Z+1	; 0x01
    63b0:	96 fe       	sbrs	r9, 6
    63b2:	03 c0       	rjmp	.+6      	; 0x63ba <vfprintf+0x426>
    63b4:	61 2f       	mov	r22, r17
    63b6:	70 e0       	ldi	r23, 0x00	; 0
    63b8:	02 c0       	rjmp	.+4      	; 0x63be <vfprintf+0x42a>
    63ba:	6f ef       	ldi	r22, 0xFF	; 255
    63bc:	7f ef       	ldi	r23, 0xFF	; 255
    63be:	c6 01       	movw	r24, r12
    63c0:	81 d3       	rcall	.+1794   	; 0x6ac4 <strnlen>
    63c2:	8c 01       	movw	r16, r24
    63c4:	f9 2d       	mov	r31, r9
    63c6:	ff 77       	andi	r31, 0x7F	; 127
    63c8:	13 c0       	rjmp	.+38     	; 0x63f0 <vfprintf+0x45c>
    63ca:	56 01       	movw	r10, r12
    63cc:	22 e0       	ldi	r18, 0x02	; 2
    63ce:	a2 0e       	add	r10, r18
    63d0:	b1 1c       	adc	r11, r1
    63d2:	f6 01       	movw	r30, r12
    63d4:	c0 80       	ld	r12, Z
    63d6:	d1 80       	ldd	r13, Z+1	; 0x01
    63d8:	96 fe       	sbrs	r9, 6
    63da:	03 c0       	rjmp	.+6      	; 0x63e2 <vfprintf+0x44e>
    63dc:	61 2f       	mov	r22, r17
    63de:	70 e0       	ldi	r23, 0x00	; 0
    63e0:	02 c0       	rjmp	.+4      	; 0x63e6 <vfprintf+0x452>
    63e2:	6f ef       	ldi	r22, 0xFF	; 255
    63e4:	7f ef       	ldi	r23, 0xFF	; 255
    63e6:	c6 01       	movw	r24, r12
    63e8:	62 d3       	rcall	.+1732   	; 0x6aae <strnlen_P>
    63ea:	8c 01       	movw	r16, r24
    63ec:	f9 2d       	mov	r31, r9
    63ee:	f0 68       	ori	r31, 0x80	; 128
    63f0:	9f 2e       	mov	r9, r31
    63f2:	f3 fd       	sbrc	r31, 3
    63f4:	18 c0       	rjmp	.+48     	; 0x6426 <vfprintf+0x492>
    63f6:	85 2d       	mov	r24, r5
    63f8:	90 e0       	ldi	r25, 0x00	; 0
    63fa:	08 17       	cp	r16, r24
    63fc:	19 07       	cpc	r17, r25
    63fe:	98 f4       	brcc	.+38     	; 0x6426 <vfprintf+0x492>
    6400:	b7 01       	movw	r22, r14
    6402:	80 e2       	ldi	r24, 0x20	; 32
    6404:	90 e0       	ldi	r25, 0x00	; 0
    6406:	b3 d3       	rcall	.+1894   	; 0x6b6e <fputc>
    6408:	5a 94       	dec	r5
    640a:	f5 cf       	rjmp	.-22     	; 0x63f6 <vfprintf+0x462>
    640c:	f6 01       	movw	r30, r12
    640e:	97 fc       	sbrc	r9, 7
    6410:	85 91       	lpm	r24, Z+
    6412:	97 fe       	sbrs	r9, 7
    6414:	81 91       	ld	r24, Z+
    6416:	6f 01       	movw	r12, r30
    6418:	b7 01       	movw	r22, r14
    641a:	90 e0       	ldi	r25, 0x00	; 0
    641c:	a8 d3       	rcall	.+1872   	; 0x6b6e <fputc>
    641e:	51 10       	cpse	r5, r1
    6420:	5a 94       	dec	r5
    6422:	01 50       	subi	r16, 0x01	; 1
    6424:	11 09       	sbc	r17, r1
    6426:	01 15       	cp	r16, r1
    6428:	11 05       	cpc	r17, r1
    642a:	81 f7       	brne	.-32     	; 0x640c <vfprintf+0x478>
    642c:	f0 c0       	rjmp	.+480    	; 0x660e <vfprintf+0x67a>
    642e:	84 36       	cpi	r24, 0x64	; 100
    6430:	11 f0       	breq	.+4      	; 0x6436 <vfprintf+0x4a2>
    6432:	89 36       	cpi	r24, 0x69	; 105
    6434:	59 f5       	brne	.+86     	; 0x648c <vfprintf+0x4f8>
    6436:	56 01       	movw	r10, r12
    6438:	97 fe       	sbrs	r9, 7
    643a:	09 c0       	rjmp	.+18     	; 0x644e <vfprintf+0x4ba>
    643c:	24 e0       	ldi	r18, 0x04	; 4
    643e:	a2 0e       	add	r10, r18
    6440:	b1 1c       	adc	r11, r1
    6442:	f6 01       	movw	r30, r12
    6444:	60 81       	ld	r22, Z
    6446:	71 81       	ldd	r23, Z+1	; 0x01
    6448:	82 81       	ldd	r24, Z+2	; 0x02
    644a:	93 81       	ldd	r25, Z+3	; 0x03
    644c:	0a c0       	rjmp	.+20     	; 0x6462 <vfprintf+0x4ce>
    644e:	f2 e0       	ldi	r31, 0x02	; 2
    6450:	af 0e       	add	r10, r31
    6452:	b1 1c       	adc	r11, r1
    6454:	f6 01       	movw	r30, r12
    6456:	60 81       	ld	r22, Z
    6458:	71 81       	ldd	r23, Z+1	; 0x01
    645a:	07 2e       	mov	r0, r23
    645c:	00 0c       	add	r0, r0
    645e:	88 0b       	sbc	r24, r24
    6460:	99 0b       	sbc	r25, r25
    6462:	f9 2d       	mov	r31, r9
    6464:	ff 76       	andi	r31, 0x6F	; 111
    6466:	9f 2e       	mov	r9, r31
    6468:	97 ff       	sbrs	r25, 7
    646a:	09 c0       	rjmp	.+18     	; 0x647e <vfprintf+0x4ea>
    646c:	90 95       	com	r25
    646e:	80 95       	com	r24
    6470:	70 95       	com	r23
    6472:	61 95       	neg	r22
    6474:	7f 4f       	sbci	r23, 0xFF	; 255
    6476:	8f 4f       	sbci	r24, 0xFF	; 255
    6478:	9f 4f       	sbci	r25, 0xFF	; 255
    647a:	f0 68       	ori	r31, 0x80	; 128
    647c:	9f 2e       	mov	r9, r31
    647e:	2a e0       	ldi	r18, 0x0A	; 10
    6480:	30 e0       	ldi	r19, 0x00	; 0
    6482:	a3 01       	movw	r20, r6
    6484:	c3 d3       	rcall	.+1926   	; 0x6c0c <__ultoa_invert>
    6486:	c8 2e       	mov	r12, r24
    6488:	c6 18       	sub	r12, r6
    648a:	3e c0       	rjmp	.+124    	; 0x6508 <vfprintf+0x574>
    648c:	09 2d       	mov	r16, r9
    648e:	85 37       	cpi	r24, 0x75	; 117
    6490:	21 f4       	brne	.+8      	; 0x649a <vfprintf+0x506>
    6492:	0f 7e       	andi	r16, 0xEF	; 239
    6494:	2a e0       	ldi	r18, 0x0A	; 10
    6496:	30 e0       	ldi	r19, 0x00	; 0
    6498:	1d c0       	rjmp	.+58     	; 0x64d4 <vfprintf+0x540>
    649a:	09 7f       	andi	r16, 0xF9	; 249
    649c:	8f 36       	cpi	r24, 0x6F	; 111
    649e:	91 f0       	breq	.+36     	; 0x64c4 <vfprintf+0x530>
    64a0:	18 f4       	brcc	.+6      	; 0x64a8 <vfprintf+0x514>
    64a2:	88 35       	cpi	r24, 0x58	; 88
    64a4:	59 f0       	breq	.+22     	; 0x64bc <vfprintf+0x528>
    64a6:	bc c0       	rjmp	.+376    	; 0x6620 <vfprintf+0x68c>
    64a8:	80 37       	cpi	r24, 0x70	; 112
    64aa:	19 f0       	breq	.+6      	; 0x64b2 <vfprintf+0x51e>
    64ac:	88 37       	cpi	r24, 0x78	; 120
    64ae:	11 f0       	breq	.+4      	; 0x64b4 <vfprintf+0x520>
    64b0:	b7 c0       	rjmp	.+366    	; 0x6620 <vfprintf+0x68c>
    64b2:	00 61       	ori	r16, 0x10	; 16
    64b4:	04 ff       	sbrs	r16, 4
    64b6:	09 c0       	rjmp	.+18     	; 0x64ca <vfprintf+0x536>
    64b8:	04 60       	ori	r16, 0x04	; 4
    64ba:	07 c0       	rjmp	.+14     	; 0x64ca <vfprintf+0x536>
    64bc:	94 fe       	sbrs	r9, 4
    64be:	08 c0       	rjmp	.+16     	; 0x64d0 <vfprintf+0x53c>
    64c0:	06 60       	ori	r16, 0x06	; 6
    64c2:	06 c0       	rjmp	.+12     	; 0x64d0 <vfprintf+0x53c>
    64c4:	28 e0       	ldi	r18, 0x08	; 8
    64c6:	30 e0       	ldi	r19, 0x00	; 0
    64c8:	05 c0       	rjmp	.+10     	; 0x64d4 <vfprintf+0x540>
    64ca:	20 e1       	ldi	r18, 0x10	; 16
    64cc:	30 e0       	ldi	r19, 0x00	; 0
    64ce:	02 c0       	rjmp	.+4      	; 0x64d4 <vfprintf+0x540>
    64d0:	20 e1       	ldi	r18, 0x10	; 16
    64d2:	32 e0       	ldi	r19, 0x02	; 2
    64d4:	56 01       	movw	r10, r12
    64d6:	07 ff       	sbrs	r16, 7
    64d8:	09 c0       	rjmp	.+18     	; 0x64ec <vfprintf+0x558>
    64da:	84 e0       	ldi	r24, 0x04	; 4
    64dc:	a8 0e       	add	r10, r24
    64de:	b1 1c       	adc	r11, r1
    64e0:	f6 01       	movw	r30, r12
    64e2:	60 81       	ld	r22, Z
    64e4:	71 81       	ldd	r23, Z+1	; 0x01
    64e6:	82 81       	ldd	r24, Z+2	; 0x02
    64e8:	93 81       	ldd	r25, Z+3	; 0x03
    64ea:	08 c0       	rjmp	.+16     	; 0x64fc <vfprintf+0x568>
    64ec:	f2 e0       	ldi	r31, 0x02	; 2
    64ee:	af 0e       	add	r10, r31
    64f0:	b1 1c       	adc	r11, r1
    64f2:	f6 01       	movw	r30, r12
    64f4:	60 81       	ld	r22, Z
    64f6:	71 81       	ldd	r23, Z+1	; 0x01
    64f8:	80 e0       	ldi	r24, 0x00	; 0
    64fa:	90 e0       	ldi	r25, 0x00	; 0
    64fc:	a3 01       	movw	r20, r6
    64fe:	86 d3       	rcall	.+1804   	; 0x6c0c <__ultoa_invert>
    6500:	c8 2e       	mov	r12, r24
    6502:	c6 18       	sub	r12, r6
    6504:	0f 77       	andi	r16, 0x7F	; 127
    6506:	90 2e       	mov	r9, r16
    6508:	96 fe       	sbrs	r9, 6
    650a:	0b c0       	rjmp	.+22     	; 0x6522 <vfprintf+0x58e>
    650c:	09 2d       	mov	r16, r9
    650e:	0e 7f       	andi	r16, 0xFE	; 254
    6510:	c1 16       	cp	r12, r17
    6512:	50 f4       	brcc	.+20     	; 0x6528 <vfprintf+0x594>
    6514:	94 fe       	sbrs	r9, 4
    6516:	0a c0       	rjmp	.+20     	; 0x652c <vfprintf+0x598>
    6518:	92 fc       	sbrc	r9, 2
    651a:	08 c0       	rjmp	.+16     	; 0x652c <vfprintf+0x598>
    651c:	09 2d       	mov	r16, r9
    651e:	0e 7e       	andi	r16, 0xEE	; 238
    6520:	05 c0       	rjmp	.+10     	; 0x652c <vfprintf+0x598>
    6522:	dc 2c       	mov	r13, r12
    6524:	09 2d       	mov	r16, r9
    6526:	03 c0       	rjmp	.+6      	; 0x652e <vfprintf+0x59a>
    6528:	dc 2c       	mov	r13, r12
    652a:	01 c0       	rjmp	.+2      	; 0x652e <vfprintf+0x59a>
    652c:	d1 2e       	mov	r13, r17
    652e:	04 ff       	sbrs	r16, 4
    6530:	0d c0       	rjmp	.+26     	; 0x654c <vfprintf+0x5b8>
    6532:	fe 01       	movw	r30, r28
    6534:	ec 0d       	add	r30, r12
    6536:	f1 1d       	adc	r31, r1
    6538:	80 81       	ld	r24, Z
    653a:	80 33       	cpi	r24, 0x30	; 48
    653c:	11 f4       	brne	.+4      	; 0x6542 <vfprintf+0x5ae>
    653e:	09 7e       	andi	r16, 0xE9	; 233
    6540:	09 c0       	rjmp	.+18     	; 0x6554 <vfprintf+0x5c0>
    6542:	02 ff       	sbrs	r16, 2
    6544:	06 c0       	rjmp	.+12     	; 0x6552 <vfprintf+0x5be>
    6546:	d3 94       	inc	r13
    6548:	d3 94       	inc	r13
    654a:	04 c0       	rjmp	.+8      	; 0x6554 <vfprintf+0x5c0>
    654c:	80 2f       	mov	r24, r16
    654e:	86 78       	andi	r24, 0x86	; 134
    6550:	09 f0       	breq	.+2      	; 0x6554 <vfprintf+0x5c0>
    6552:	d3 94       	inc	r13
    6554:	03 fd       	sbrc	r16, 3
    6556:	10 c0       	rjmp	.+32     	; 0x6578 <vfprintf+0x5e4>
    6558:	00 ff       	sbrs	r16, 0
    655a:	06 c0       	rjmp	.+12     	; 0x6568 <vfprintf+0x5d4>
    655c:	1c 2d       	mov	r17, r12
    655e:	d5 14       	cp	r13, r5
    6560:	78 f4       	brcc	.+30     	; 0x6580 <vfprintf+0x5ec>
    6562:	15 0d       	add	r17, r5
    6564:	1d 19       	sub	r17, r13
    6566:	0c c0       	rjmp	.+24     	; 0x6580 <vfprintf+0x5ec>
    6568:	d5 14       	cp	r13, r5
    656a:	50 f4       	brcc	.+20     	; 0x6580 <vfprintf+0x5ec>
    656c:	b7 01       	movw	r22, r14
    656e:	80 e2       	ldi	r24, 0x20	; 32
    6570:	90 e0       	ldi	r25, 0x00	; 0
    6572:	fd d2       	rcall	.+1530   	; 0x6b6e <fputc>
    6574:	d3 94       	inc	r13
    6576:	f8 cf       	rjmp	.-16     	; 0x6568 <vfprintf+0x5d4>
    6578:	d5 14       	cp	r13, r5
    657a:	10 f4       	brcc	.+4      	; 0x6580 <vfprintf+0x5ec>
    657c:	5d 18       	sub	r5, r13
    657e:	01 c0       	rjmp	.+2      	; 0x6582 <vfprintf+0x5ee>
    6580:	51 2c       	mov	r5, r1
    6582:	04 ff       	sbrs	r16, 4
    6584:	0f c0       	rjmp	.+30     	; 0x65a4 <vfprintf+0x610>
    6586:	b7 01       	movw	r22, r14
    6588:	80 e3       	ldi	r24, 0x30	; 48
    658a:	90 e0       	ldi	r25, 0x00	; 0
    658c:	f0 d2       	rcall	.+1504   	; 0x6b6e <fputc>
    658e:	02 ff       	sbrs	r16, 2
    6590:	16 c0       	rjmp	.+44     	; 0x65be <vfprintf+0x62a>
    6592:	01 fd       	sbrc	r16, 1
    6594:	03 c0       	rjmp	.+6      	; 0x659c <vfprintf+0x608>
    6596:	88 e7       	ldi	r24, 0x78	; 120
    6598:	90 e0       	ldi	r25, 0x00	; 0
    659a:	02 c0       	rjmp	.+4      	; 0x65a0 <vfprintf+0x60c>
    659c:	88 e5       	ldi	r24, 0x58	; 88
    659e:	90 e0       	ldi	r25, 0x00	; 0
    65a0:	b7 01       	movw	r22, r14
    65a2:	0c c0       	rjmp	.+24     	; 0x65bc <vfprintf+0x628>
    65a4:	80 2f       	mov	r24, r16
    65a6:	86 78       	andi	r24, 0x86	; 134
    65a8:	51 f0       	breq	.+20     	; 0x65be <vfprintf+0x62a>
    65aa:	01 ff       	sbrs	r16, 1
    65ac:	02 c0       	rjmp	.+4      	; 0x65b2 <vfprintf+0x61e>
    65ae:	8b e2       	ldi	r24, 0x2B	; 43
    65b0:	01 c0       	rjmp	.+2      	; 0x65b4 <vfprintf+0x620>
    65b2:	80 e2       	ldi	r24, 0x20	; 32
    65b4:	07 fd       	sbrc	r16, 7
    65b6:	8d e2       	ldi	r24, 0x2D	; 45
    65b8:	b7 01       	movw	r22, r14
    65ba:	90 e0       	ldi	r25, 0x00	; 0
    65bc:	d8 d2       	rcall	.+1456   	; 0x6b6e <fputc>
    65be:	c1 16       	cp	r12, r17
    65c0:	30 f4       	brcc	.+12     	; 0x65ce <vfprintf+0x63a>
    65c2:	b7 01       	movw	r22, r14
    65c4:	80 e3       	ldi	r24, 0x30	; 48
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	d2 d2       	rcall	.+1444   	; 0x6b6e <fputc>
    65ca:	11 50       	subi	r17, 0x01	; 1
    65cc:	f8 cf       	rjmp	.-16     	; 0x65be <vfprintf+0x62a>
    65ce:	ca 94       	dec	r12
    65d0:	f3 01       	movw	r30, r6
    65d2:	ec 0d       	add	r30, r12
    65d4:	f1 1d       	adc	r31, r1
    65d6:	80 81       	ld	r24, Z
    65d8:	b7 01       	movw	r22, r14
    65da:	90 e0       	ldi	r25, 0x00	; 0
    65dc:	c8 d2       	rcall	.+1424   	; 0x6b6e <fputc>
    65de:	c1 10       	cpse	r12, r1
    65e0:	f6 cf       	rjmp	.-20     	; 0x65ce <vfprintf+0x63a>
    65e2:	15 c0       	rjmp	.+42     	; 0x660e <vfprintf+0x67a>
    65e4:	f4 e0       	ldi	r31, 0x04	; 4
    65e6:	f5 15       	cp	r31, r5
    65e8:	50 f5       	brcc	.+84     	; 0x663e <vfprintf+0x6aa>
    65ea:	84 e0       	ldi	r24, 0x04	; 4
    65ec:	58 1a       	sub	r5, r24
    65ee:	93 fe       	sbrs	r9, 3
    65f0:	1e c0       	rjmp	.+60     	; 0x662e <vfprintf+0x69a>
    65f2:	01 11       	cpse	r16, r1
    65f4:	25 c0       	rjmp	.+74     	; 0x6640 <vfprintf+0x6ac>
    65f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    65f8:	23 ff       	sbrs	r18, 3
    65fa:	27 c0       	rjmp	.+78     	; 0x664a <vfprintf+0x6b6>
    65fc:	08 ea       	ldi	r16, 0xA8	; 168
    65fe:	12 e0       	ldi	r17, 0x02	; 2
    6600:	39 2d       	mov	r19, r9
    6602:	30 71       	andi	r19, 0x10	; 16
    6604:	93 2e       	mov	r9, r19
    6606:	f8 01       	movw	r30, r16
    6608:	84 91       	lpm	r24, Z
    660a:	81 11       	cpse	r24, r1
    660c:	21 c0       	rjmp	.+66     	; 0x6650 <vfprintf+0x6bc>
    660e:	55 20       	and	r5, r5
    6610:	09 f4       	brne	.+2      	; 0x6614 <vfprintf+0x680>
    6612:	fc cc       	rjmp	.-1544   	; 0x600c <vfprintf+0x78>
    6614:	b7 01       	movw	r22, r14
    6616:	80 e2       	ldi	r24, 0x20	; 32
    6618:	90 e0       	ldi	r25, 0x00	; 0
    661a:	a9 d2       	rcall	.+1362   	; 0x6b6e <fputc>
    661c:	5a 94       	dec	r5
    661e:	f7 cf       	rjmp	.-18     	; 0x660e <vfprintf+0x67a>
    6620:	f7 01       	movw	r30, r14
    6622:	86 81       	ldd	r24, Z+6	; 0x06
    6624:	97 81       	ldd	r25, Z+7	; 0x07
    6626:	23 c0       	rjmp	.+70     	; 0x666e <vfprintf+0x6da>
    6628:	8f ef       	ldi	r24, 0xFF	; 255
    662a:	9f ef       	ldi	r25, 0xFF	; 255
    662c:	20 c0       	rjmp	.+64     	; 0x666e <vfprintf+0x6da>
    662e:	b7 01       	movw	r22, r14
    6630:	80 e2       	ldi	r24, 0x20	; 32
    6632:	90 e0       	ldi	r25, 0x00	; 0
    6634:	9c d2       	rcall	.+1336   	; 0x6b6e <fputc>
    6636:	5a 94       	dec	r5
    6638:	51 10       	cpse	r5, r1
    663a:	f9 cf       	rjmp	.-14     	; 0x662e <vfprintf+0x69a>
    663c:	da cf       	rjmp	.-76     	; 0x65f2 <vfprintf+0x65e>
    663e:	51 2c       	mov	r5, r1
    6640:	b7 01       	movw	r22, r14
    6642:	80 2f       	mov	r24, r16
    6644:	90 e0       	ldi	r25, 0x00	; 0
    6646:	93 d2       	rcall	.+1318   	; 0x6b6e <fputc>
    6648:	d6 cf       	rjmp	.-84     	; 0x65f6 <vfprintf+0x662>
    664a:	0c ea       	ldi	r16, 0xAC	; 172
    664c:	12 e0       	ldi	r17, 0x02	; 2
    664e:	d8 cf       	rjmp	.-80     	; 0x6600 <vfprintf+0x66c>
    6650:	91 10       	cpse	r9, r1
    6652:	80 52       	subi	r24, 0x20	; 32
    6654:	b7 01       	movw	r22, r14
    6656:	90 e0       	ldi	r25, 0x00	; 0
    6658:	8a d2       	rcall	.+1300   	; 0x6b6e <fputc>
    665a:	0f 5f       	subi	r16, 0xFF	; 255
    665c:	1f 4f       	sbci	r17, 0xFF	; 255
    665e:	d3 cf       	rjmp	.-90     	; 0x6606 <vfprintf+0x672>
    6660:	23 e0       	ldi	r18, 0x03	; 3
    6662:	25 15       	cp	r18, r5
    6664:	10 f4       	brcc	.+4      	; 0x666a <vfprintf+0x6d6>
    6666:	83 e0       	ldi	r24, 0x03	; 3
    6668:	c1 cf       	rjmp	.-126    	; 0x65ec <vfprintf+0x658>
    666a:	51 2c       	mov	r5, r1
    666c:	c4 cf       	rjmp	.-120    	; 0x65f6 <vfprintf+0x662>
    666e:	60 96       	adiw	r28, 0x10	; 16
    6670:	cd bf       	out	0x3d, r28	; 61
    6672:	de bf       	out	0x3e, r29	; 62
    6674:	df 91       	pop	r29
    6676:	cf 91       	pop	r28
    6678:	1f 91       	pop	r17
    667a:	0f 91       	pop	r16
    667c:	ff 90       	pop	r15
    667e:	ef 90       	pop	r14
    6680:	df 90       	pop	r13
    6682:	cf 90       	pop	r12
    6684:	bf 90       	pop	r11
    6686:	af 90       	pop	r10
    6688:	9f 90       	pop	r9
    668a:	8f 90       	pop	r8
    668c:	7f 90       	pop	r7
    668e:	6f 90       	pop	r6
    6690:	5f 90       	pop	r5
    6692:	4f 90       	pop	r4
    6694:	3f 90       	pop	r3
    6696:	2f 90       	pop	r2
    6698:	08 95       	ret

0000669a <__udivmodhi4>:
    669a:	aa 1b       	sub	r26, r26
    669c:	bb 1b       	sub	r27, r27
    669e:	51 e1       	ldi	r21, 0x11	; 17
    66a0:	07 c0       	rjmp	.+14     	; 0x66b0 <__udivmodhi4_ep>

000066a2 <__udivmodhi4_loop>:
    66a2:	aa 1f       	adc	r26, r26
    66a4:	bb 1f       	adc	r27, r27
    66a6:	a6 17       	cp	r26, r22
    66a8:	b7 07       	cpc	r27, r23
    66aa:	10 f0       	brcs	.+4      	; 0x66b0 <__udivmodhi4_ep>
    66ac:	a6 1b       	sub	r26, r22
    66ae:	b7 0b       	sbc	r27, r23

000066b0 <__udivmodhi4_ep>:
    66b0:	88 1f       	adc	r24, r24
    66b2:	99 1f       	adc	r25, r25
    66b4:	5a 95       	dec	r21
    66b6:	a9 f7       	brne	.-22     	; 0x66a2 <__udivmodhi4_loop>
    66b8:	80 95       	com	r24
    66ba:	90 95       	com	r25
    66bc:	bc 01       	movw	r22, r24
    66be:	cd 01       	movw	r24, r26
    66c0:	08 95       	ret

000066c2 <__udivmodsi4>:
    66c2:	a1 e2       	ldi	r26, 0x21	; 33
    66c4:	1a 2e       	mov	r1, r26
    66c6:	aa 1b       	sub	r26, r26
    66c8:	bb 1b       	sub	r27, r27
    66ca:	fd 01       	movw	r30, r26
    66cc:	0d c0       	rjmp	.+26     	; 0x66e8 <__udivmodsi4_ep>

000066ce <__udivmodsi4_loop>:
    66ce:	aa 1f       	adc	r26, r26
    66d0:	bb 1f       	adc	r27, r27
    66d2:	ee 1f       	adc	r30, r30
    66d4:	ff 1f       	adc	r31, r31
    66d6:	a2 17       	cp	r26, r18
    66d8:	b3 07       	cpc	r27, r19
    66da:	e4 07       	cpc	r30, r20
    66dc:	f5 07       	cpc	r31, r21
    66de:	20 f0       	brcs	.+8      	; 0x66e8 <__udivmodsi4_ep>
    66e0:	a2 1b       	sub	r26, r18
    66e2:	b3 0b       	sbc	r27, r19
    66e4:	e4 0b       	sbc	r30, r20
    66e6:	f5 0b       	sbc	r31, r21

000066e8 <__udivmodsi4_ep>:
    66e8:	66 1f       	adc	r22, r22
    66ea:	77 1f       	adc	r23, r23
    66ec:	88 1f       	adc	r24, r24
    66ee:	99 1f       	adc	r25, r25
    66f0:	1a 94       	dec	r1
    66f2:	69 f7       	brne	.-38     	; 0x66ce <__udivmodsi4_loop>
    66f4:	60 95       	com	r22
    66f6:	70 95       	com	r23
    66f8:	80 95       	com	r24
    66fa:	90 95       	com	r25
    66fc:	9b 01       	movw	r18, r22
    66fe:	ac 01       	movw	r20, r24
    6700:	bd 01       	movw	r22, r26
    6702:	cf 01       	movw	r24, r30
    6704:	08 95       	ret

00006706 <__divmodsi4>:
    6706:	05 2e       	mov	r0, r21
    6708:	97 fb       	bst	r25, 7
    670a:	16 f4       	brtc	.+4      	; 0x6710 <__divmodsi4+0xa>
    670c:	00 94       	com	r0
    670e:	0f d0       	rcall	.+30     	; 0x672e <__negsi2>
    6710:	57 fd       	sbrc	r21, 7
    6712:	05 d0       	rcall	.+10     	; 0x671e <__divmodsi4_neg2>
    6714:	d6 df       	rcall	.-84     	; 0x66c2 <__udivmodsi4>
    6716:	07 fc       	sbrc	r0, 7
    6718:	02 d0       	rcall	.+4      	; 0x671e <__divmodsi4_neg2>
    671a:	46 f4       	brtc	.+16     	; 0x672c <__divmodsi4_exit>
    671c:	08 c0       	rjmp	.+16     	; 0x672e <__negsi2>

0000671e <__divmodsi4_neg2>:
    671e:	50 95       	com	r21
    6720:	40 95       	com	r20
    6722:	30 95       	com	r19
    6724:	21 95       	neg	r18
    6726:	3f 4f       	sbci	r19, 0xFF	; 255
    6728:	4f 4f       	sbci	r20, 0xFF	; 255
    672a:	5f 4f       	sbci	r21, 0xFF	; 255

0000672c <__divmodsi4_exit>:
    672c:	08 95       	ret

0000672e <__negsi2>:
    672e:	90 95       	com	r25
    6730:	80 95       	com	r24
    6732:	70 95       	com	r23
    6734:	61 95       	neg	r22
    6736:	7f 4f       	sbci	r23, 0xFF	; 255
    6738:	8f 4f       	sbci	r24, 0xFF	; 255
    673a:	9f 4f       	sbci	r25, 0xFF	; 255
    673c:	08 95       	ret

0000673e <__tablejump2__>:
    673e:	ee 0f       	add	r30, r30
    6740:	ff 1f       	adc	r31, r31
    6742:	88 1f       	adc	r24, r24
    6744:	8b bf       	out	0x3b, r24	; 59
    6746:	07 90       	elpm	r0, Z+
    6748:	f6 91       	elpm	r31, Z
    674a:	e0 2d       	mov	r30, r0
    674c:	1b be       	out	0x3b, r1	; 59
    674e:	19 94       	eijmp

00006750 <__umulhisi3>:
    6750:	a2 9f       	mul	r26, r18
    6752:	b0 01       	movw	r22, r0
    6754:	b3 9f       	mul	r27, r19
    6756:	c0 01       	movw	r24, r0
    6758:	a3 9f       	mul	r26, r19
    675a:	70 0d       	add	r23, r0
    675c:	81 1d       	adc	r24, r1
    675e:	11 24       	eor	r1, r1
    6760:	91 1d       	adc	r25, r1
    6762:	b2 9f       	mul	r27, r18
    6764:	70 0d       	add	r23, r0
    6766:	81 1d       	adc	r24, r1
    6768:	11 24       	eor	r1, r1
    676a:	91 1d       	adc	r25, r1
    676c:	08 95       	ret

0000676e <__usmulhisi3>:
    676e:	f0 df       	rcall	.-32     	; 0x6750 <__umulhisi3>

00006770 <__usmulhisi3_tail>:
    6770:	b7 ff       	sbrs	r27, 7
    6772:	08 95       	ret
    6774:	82 1b       	sub	r24, r18
    6776:	93 0b       	sbc	r25, r19
    6778:	08 95       	ret

0000677a <__mulshisi3>:
    677a:	b7 ff       	sbrs	r27, 7
    677c:	b6 c0       	rjmp	.+364    	; 0x68ea <__muluhisi3>

0000677e <__mulohisi3>:
    677e:	b5 d0       	rcall	.+362    	; 0x68ea <__muluhisi3>
    6780:	82 1b       	sub	r24, r18
    6782:	93 0b       	sbc	r25, r19
    6784:	08 95       	ret

00006786 <__muldi3>:
    6786:	df 93       	push	r29
    6788:	cf 93       	push	r28
    678a:	1f 93       	push	r17
    678c:	0f 93       	push	r16
    678e:	9a 9d       	mul	r25, r10
    6790:	f0 2d       	mov	r31, r0
    6792:	21 9f       	mul	r18, r17
    6794:	f0 0d       	add	r31, r0
    6796:	8b 9d       	mul	r24, r11
    6798:	f0 0d       	add	r31, r0
    679a:	8a 9d       	mul	r24, r10
    679c:	e0 2d       	mov	r30, r0
    679e:	f1 0d       	add	r31, r1
    67a0:	03 9f       	mul	r16, r19
    67a2:	f0 0d       	add	r31, r0
    67a4:	02 9f       	mul	r16, r18
    67a6:	e0 0d       	add	r30, r0
    67a8:	f1 1d       	adc	r31, r1
    67aa:	4e 9d       	mul	r20, r14
    67ac:	e0 0d       	add	r30, r0
    67ae:	f1 1d       	adc	r31, r1
    67b0:	5e 9d       	mul	r21, r14
    67b2:	f0 0d       	add	r31, r0
    67b4:	4f 9d       	mul	r20, r15
    67b6:	f0 0d       	add	r31, r0
    67b8:	7f 93       	push	r23
    67ba:	6f 93       	push	r22
    67bc:	bf 92       	push	r11
    67be:	af 92       	push	r10
    67c0:	5f 93       	push	r21
    67c2:	4f 93       	push	r20
    67c4:	d5 01       	movw	r26, r10
    67c6:	c4 df       	rcall	.-120    	; 0x6750 <__umulhisi3>
    67c8:	8b 01       	movw	r16, r22
    67ca:	ac 01       	movw	r20, r24
    67cc:	d7 01       	movw	r26, r14
    67ce:	c0 df       	rcall	.-128    	; 0x6750 <__umulhisi3>
    67d0:	eb 01       	movw	r28, r22
    67d2:	e8 0f       	add	r30, r24
    67d4:	f9 1f       	adc	r31, r25
    67d6:	d6 01       	movw	r26, r12
    67d8:	1f d0       	rcall	.+62     	; 0x6818 <__muldi3_6>
    67da:	2f 91       	pop	r18
    67dc:	3f 91       	pop	r19
    67de:	d6 01       	movw	r26, r12
    67e0:	b7 df       	rcall	.-146    	; 0x6750 <__umulhisi3>
    67e2:	c6 0f       	add	r28, r22
    67e4:	d7 1f       	adc	r29, r23
    67e6:	e8 1f       	adc	r30, r24
    67e8:	f9 1f       	adc	r31, r25
    67ea:	af 91       	pop	r26
    67ec:	bf 91       	pop	r27
    67ee:	14 d0       	rcall	.+40     	; 0x6818 <__muldi3_6>
    67f0:	2f 91       	pop	r18
    67f2:	3f 91       	pop	r19
    67f4:	ad df       	rcall	.-166    	; 0x6750 <__umulhisi3>
    67f6:	c6 0f       	add	r28, r22
    67f8:	d7 1f       	adc	r29, r23
    67fa:	e8 1f       	adc	r30, r24
    67fc:	f9 1f       	adc	r31, r25
    67fe:	d6 01       	movw	r26, r12
    6800:	a7 df       	rcall	.-178    	; 0x6750 <__umulhisi3>
    6802:	e6 0f       	add	r30, r22
    6804:	f7 1f       	adc	r31, r23
    6806:	98 01       	movw	r18, r16
    6808:	be 01       	movw	r22, r28
    680a:	cf 01       	movw	r24, r30
    680c:	11 24       	eor	r1, r1
    680e:	0f 91       	pop	r16
    6810:	1f 91       	pop	r17
    6812:	cf 91       	pop	r28
    6814:	df 91       	pop	r29
    6816:	08 95       	ret

00006818 <__muldi3_6>:
    6818:	9b df       	rcall	.-202    	; 0x6750 <__umulhisi3>
    681a:	46 0f       	add	r20, r22
    681c:	57 1f       	adc	r21, r23
    681e:	c8 1f       	adc	r28, r24
    6820:	d9 1f       	adc	r29, r25
    6822:	08 f4       	brcc	.+2      	; 0x6826 <__muldi3_6+0xe>
    6824:	31 96       	adiw	r30, 0x01	; 1
    6826:	08 95       	ret

00006828 <__ashldi3>:
    6828:	0f 93       	push	r16
    682a:	08 30       	cpi	r16, 0x08	; 8
    682c:	90 f0       	brcs	.+36     	; 0x6852 <__ashldi3+0x2a>
    682e:	98 2f       	mov	r25, r24
    6830:	87 2f       	mov	r24, r23
    6832:	76 2f       	mov	r23, r22
    6834:	65 2f       	mov	r22, r21
    6836:	54 2f       	mov	r21, r20
    6838:	43 2f       	mov	r20, r19
    683a:	32 2f       	mov	r19, r18
    683c:	22 27       	eor	r18, r18
    683e:	08 50       	subi	r16, 0x08	; 8
    6840:	f4 cf       	rjmp	.-24     	; 0x682a <__ashldi3+0x2>
    6842:	22 0f       	add	r18, r18
    6844:	33 1f       	adc	r19, r19
    6846:	44 1f       	adc	r20, r20
    6848:	55 1f       	adc	r21, r21
    684a:	66 1f       	adc	r22, r22
    684c:	77 1f       	adc	r23, r23
    684e:	88 1f       	adc	r24, r24
    6850:	99 1f       	adc	r25, r25
    6852:	0a 95       	dec	r16
    6854:	b2 f7       	brpl	.-20     	; 0x6842 <__ashldi3+0x1a>
    6856:	0f 91       	pop	r16
    6858:	08 95       	ret

0000685a <__ashrdi3>:
    685a:	97 fb       	bst	r25, 7
    685c:	10 f8       	bld	r1, 0

0000685e <__lshrdi3>:
    685e:	16 94       	lsr	r1
    6860:	00 08       	sbc	r0, r0
    6862:	0f 93       	push	r16
    6864:	08 30       	cpi	r16, 0x08	; 8
    6866:	98 f0       	brcs	.+38     	; 0x688e <__lshrdi3+0x30>
    6868:	08 50       	subi	r16, 0x08	; 8
    686a:	23 2f       	mov	r18, r19
    686c:	34 2f       	mov	r19, r20
    686e:	45 2f       	mov	r20, r21
    6870:	56 2f       	mov	r21, r22
    6872:	67 2f       	mov	r22, r23
    6874:	78 2f       	mov	r23, r24
    6876:	89 2f       	mov	r24, r25
    6878:	90 2d       	mov	r25, r0
    687a:	f4 cf       	rjmp	.-24     	; 0x6864 <__lshrdi3+0x6>
    687c:	05 94       	asr	r0
    687e:	97 95       	ror	r25
    6880:	87 95       	ror	r24
    6882:	77 95       	ror	r23
    6884:	67 95       	ror	r22
    6886:	57 95       	ror	r21
    6888:	47 95       	ror	r20
    688a:	37 95       	ror	r19
    688c:	27 95       	ror	r18
    688e:	0a 95       	dec	r16
    6890:	aa f7       	brpl	.-22     	; 0x687c <__lshrdi3+0x1e>
    6892:	0f 91       	pop	r16
    6894:	08 95       	ret

00006896 <__adddi3>:
    6896:	2a 0d       	add	r18, r10
    6898:	3b 1d       	adc	r19, r11
    689a:	4c 1d       	adc	r20, r12
    689c:	5d 1d       	adc	r21, r13
    689e:	6e 1d       	adc	r22, r14
    68a0:	7f 1d       	adc	r23, r15
    68a2:	80 1f       	adc	r24, r16
    68a4:	91 1f       	adc	r25, r17
    68a6:	08 95       	ret

000068a8 <__adddi3_s8>:
    68a8:	00 24       	eor	r0, r0
    68aa:	a7 fd       	sbrc	r26, 7
    68ac:	00 94       	com	r0
    68ae:	2a 0f       	add	r18, r26
    68b0:	30 1d       	adc	r19, r0
    68b2:	40 1d       	adc	r20, r0
    68b4:	50 1d       	adc	r21, r0
    68b6:	60 1d       	adc	r22, r0
    68b8:	70 1d       	adc	r23, r0
    68ba:	80 1d       	adc	r24, r0
    68bc:	90 1d       	adc	r25, r0
    68be:	08 95       	ret

000068c0 <__subdi3>:
    68c0:	2a 19       	sub	r18, r10
    68c2:	3b 09       	sbc	r19, r11
    68c4:	4c 09       	sbc	r20, r12
    68c6:	5d 09       	sbc	r21, r13
    68c8:	6e 09       	sbc	r22, r14
    68ca:	7f 09       	sbc	r23, r15
    68cc:	80 0b       	sbc	r24, r16
    68ce:	91 0b       	sbc	r25, r17
    68d0:	08 95       	ret

000068d2 <__cmpdi2_s8>:
    68d2:	00 24       	eor	r0, r0
    68d4:	a7 fd       	sbrc	r26, 7
    68d6:	00 94       	com	r0
    68d8:	2a 17       	cp	r18, r26
    68da:	30 05       	cpc	r19, r0
    68dc:	40 05       	cpc	r20, r0
    68de:	50 05       	cpc	r21, r0
    68e0:	60 05       	cpc	r22, r0
    68e2:	70 05       	cpc	r23, r0
    68e4:	80 05       	cpc	r24, r0
    68e6:	90 05       	cpc	r25, r0
    68e8:	08 95       	ret

000068ea <__muluhisi3>:
    68ea:	32 df       	rcall	.-412    	; 0x6750 <__umulhisi3>
    68ec:	a5 9f       	mul	r26, r21
    68ee:	90 0d       	add	r25, r0
    68f0:	b4 9f       	mul	r27, r20
    68f2:	90 0d       	add	r25, r0
    68f4:	a4 9f       	mul	r26, r20
    68f6:	80 0d       	add	r24, r0
    68f8:	91 1d       	adc	r25, r1
    68fa:	11 24       	eor	r1, r1
    68fc:	08 95       	ret

000068fe <__ftoa_engine>:
    68fe:	28 30       	cpi	r18, 0x08	; 8
    6900:	08 f0       	brcs	.+2      	; 0x6904 <__ftoa_engine+0x6>
    6902:	27 e0       	ldi	r18, 0x07	; 7
    6904:	33 27       	eor	r19, r19
    6906:	da 01       	movw	r26, r20
    6908:	99 0f       	add	r25, r25
    690a:	31 1d       	adc	r19, r1
    690c:	87 fd       	sbrc	r24, 7
    690e:	91 60       	ori	r25, 0x01	; 1
    6910:	00 96       	adiw	r24, 0x00	; 0
    6912:	61 05       	cpc	r22, r1
    6914:	71 05       	cpc	r23, r1
    6916:	39 f4       	brne	.+14     	; 0x6926 <__ftoa_engine+0x28>
    6918:	32 60       	ori	r19, 0x02	; 2
    691a:	2e 5f       	subi	r18, 0xFE	; 254
    691c:	3d 93       	st	X+, r19
    691e:	30 e3       	ldi	r19, 0x30	; 48
    6920:	2a 95       	dec	r18
    6922:	e1 f7       	brne	.-8      	; 0x691c <__ftoa_engine+0x1e>
    6924:	08 95       	ret
    6926:	9f 3f       	cpi	r25, 0xFF	; 255
    6928:	30 f0       	brcs	.+12     	; 0x6936 <__ftoa_engine+0x38>
    692a:	80 38       	cpi	r24, 0x80	; 128
    692c:	71 05       	cpc	r23, r1
    692e:	61 05       	cpc	r22, r1
    6930:	09 f0       	breq	.+2      	; 0x6934 <__ftoa_engine+0x36>
    6932:	3c 5f       	subi	r19, 0xFC	; 252
    6934:	3c 5f       	subi	r19, 0xFC	; 252
    6936:	3d 93       	st	X+, r19
    6938:	91 30       	cpi	r25, 0x01	; 1
    693a:	08 f0       	brcs	.+2      	; 0x693e <__ftoa_engine+0x40>
    693c:	80 68       	ori	r24, 0x80	; 128
    693e:	91 1d       	adc	r25, r1
    6940:	df 93       	push	r29
    6942:	cf 93       	push	r28
    6944:	1f 93       	push	r17
    6946:	0f 93       	push	r16
    6948:	ff 92       	push	r15
    694a:	ef 92       	push	r14
    694c:	19 2f       	mov	r17, r25
    694e:	98 7f       	andi	r25, 0xF8	; 248
    6950:	96 95       	lsr	r25
    6952:	e9 2f       	mov	r30, r25
    6954:	96 95       	lsr	r25
    6956:	96 95       	lsr	r25
    6958:	e9 0f       	add	r30, r25
    695a:	ff 27       	eor	r31, r31
    695c:	e6 5f       	subi	r30, 0xF6	; 246
    695e:	fc 4f       	sbci	r31, 0xFC	; 252
    6960:	99 27       	eor	r25, r25
    6962:	33 27       	eor	r19, r19
    6964:	ee 24       	eor	r14, r14
    6966:	ff 24       	eor	r15, r15
    6968:	a7 01       	movw	r20, r14
    696a:	e7 01       	movw	r28, r14
    696c:	05 90       	lpm	r0, Z+
    696e:	08 94       	sec
    6970:	07 94       	ror	r0
    6972:	28 f4       	brcc	.+10     	; 0x697e <__ftoa_engine+0x80>
    6974:	36 0f       	add	r19, r22
    6976:	e7 1e       	adc	r14, r23
    6978:	f8 1e       	adc	r15, r24
    697a:	49 1f       	adc	r20, r25
    697c:	51 1d       	adc	r21, r1
    697e:	66 0f       	add	r22, r22
    6980:	77 1f       	adc	r23, r23
    6982:	88 1f       	adc	r24, r24
    6984:	99 1f       	adc	r25, r25
    6986:	06 94       	lsr	r0
    6988:	a1 f7       	brne	.-24     	; 0x6972 <__ftoa_engine+0x74>
    698a:	05 90       	lpm	r0, Z+
    698c:	07 94       	ror	r0
    698e:	28 f4       	brcc	.+10     	; 0x699a <__ftoa_engine+0x9c>
    6990:	e7 0e       	add	r14, r23
    6992:	f8 1e       	adc	r15, r24
    6994:	49 1f       	adc	r20, r25
    6996:	56 1f       	adc	r21, r22
    6998:	c1 1d       	adc	r28, r1
    699a:	77 0f       	add	r23, r23
    699c:	88 1f       	adc	r24, r24
    699e:	99 1f       	adc	r25, r25
    69a0:	66 1f       	adc	r22, r22
    69a2:	06 94       	lsr	r0
    69a4:	a1 f7       	brne	.-24     	; 0x698e <__ftoa_engine+0x90>
    69a6:	05 90       	lpm	r0, Z+
    69a8:	07 94       	ror	r0
    69aa:	28 f4       	brcc	.+10     	; 0x69b6 <__ftoa_engine+0xb8>
    69ac:	f8 0e       	add	r15, r24
    69ae:	49 1f       	adc	r20, r25
    69b0:	56 1f       	adc	r21, r22
    69b2:	c7 1f       	adc	r28, r23
    69b4:	d1 1d       	adc	r29, r1
    69b6:	88 0f       	add	r24, r24
    69b8:	99 1f       	adc	r25, r25
    69ba:	66 1f       	adc	r22, r22
    69bc:	77 1f       	adc	r23, r23
    69be:	06 94       	lsr	r0
    69c0:	a1 f7       	brne	.-24     	; 0x69aa <__ftoa_engine+0xac>
    69c2:	05 90       	lpm	r0, Z+
    69c4:	07 94       	ror	r0
    69c6:	20 f4       	brcc	.+8      	; 0x69d0 <__ftoa_engine+0xd2>
    69c8:	49 0f       	add	r20, r25
    69ca:	56 1f       	adc	r21, r22
    69cc:	c7 1f       	adc	r28, r23
    69ce:	d8 1f       	adc	r29, r24
    69d0:	99 0f       	add	r25, r25
    69d2:	66 1f       	adc	r22, r22
    69d4:	77 1f       	adc	r23, r23
    69d6:	88 1f       	adc	r24, r24
    69d8:	06 94       	lsr	r0
    69da:	a9 f7       	brne	.-22     	; 0x69c6 <__ftoa_engine+0xc8>
    69dc:	84 91       	lpm	r24, Z
    69de:	10 95       	com	r17
    69e0:	17 70       	andi	r17, 0x07	; 7
    69e2:	41 f0       	breq	.+16     	; 0x69f4 <__ftoa_engine+0xf6>
    69e4:	d6 95       	lsr	r29
    69e6:	c7 95       	ror	r28
    69e8:	57 95       	ror	r21
    69ea:	47 95       	ror	r20
    69ec:	f7 94       	ror	r15
    69ee:	e7 94       	ror	r14
    69f0:	1a 95       	dec	r17
    69f2:	c1 f7       	brne	.-16     	; 0x69e4 <__ftoa_engine+0xe6>
    69f4:	e0 eb       	ldi	r30, 0xB0	; 176
    69f6:	f2 e0       	ldi	r31, 0x02	; 2
    69f8:	68 94       	set
    69fa:	15 90       	lpm	r1, Z+
    69fc:	15 91       	lpm	r17, Z+
    69fe:	35 91       	lpm	r19, Z+
    6a00:	65 91       	lpm	r22, Z+
    6a02:	95 91       	lpm	r25, Z+
    6a04:	05 90       	lpm	r0, Z+
    6a06:	7f e2       	ldi	r23, 0x2F	; 47
    6a08:	73 95       	inc	r23
    6a0a:	e1 18       	sub	r14, r1
    6a0c:	f1 0a       	sbc	r15, r17
    6a0e:	43 0b       	sbc	r20, r19
    6a10:	56 0b       	sbc	r21, r22
    6a12:	c9 0b       	sbc	r28, r25
    6a14:	d0 09       	sbc	r29, r0
    6a16:	c0 f7       	brcc	.-16     	; 0x6a08 <__ftoa_engine+0x10a>
    6a18:	e1 0c       	add	r14, r1
    6a1a:	f1 1e       	adc	r15, r17
    6a1c:	43 1f       	adc	r20, r19
    6a1e:	56 1f       	adc	r21, r22
    6a20:	c9 1f       	adc	r28, r25
    6a22:	d0 1d       	adc	r29, r0
    6a24:	7e f4       	brtc	.+30     	; 0x6a44 <__ftoa_engine+0x146>
    6a26:	70 33       	cpi	r23, 0x30	; 48
    6a28:	11 f4       	brne	.+4      	; 0x6a2e <__ftoa_engine+0x130>
    6a2a:	8a 95       	dec	r24
    6a2c:	e6 cf       	rjmp	.-52     	; 0x69fa <__ftoa_engine+0xfc>
    6a2e:	e8 94       	clt
    6a30:	01 50       	subi	r16, 0x01	; 1
    6a32:	30 f0       	brcs	.+12     	; 0x6a40 <__ftoa_engine+0x142>
    6a34:	08 0f       	add	r16, r24
    6a36:	0a f4       	brpl	.+2      	; 0x6a3a <__ftoa_engine+0x13c>
    6a38:	00 27       	eor	r16, r16
    6a3a:	02 17       	cp	r16, r18
    6a3c:	08 f4       	brcc	.+2      	; 0x6a40 <__ftoa_engine+0x142>
    6a3e:	20 2f       	mov	r18, r16
    6a40:	23 95       	inc	r18
    6a42:	02 2f       	mov	r16, r18
    6a44:	7a 33       	cpi	r23, 0x3A	; 58
    6a46:	28 f0       	brcs	.+10     	; 0x6a52 <__ftoa_engine+0x154>
    6a48:	79 e3       	ldi	r23, 0x39	; 57
    6a4a:	7d 93       	st	X+, r23
    6a4c:	2a 95       	dec	r18
    6a4e:	e9 f7       	brne	.-6      	; 0x6a4a <__ftoa_engine+0x14c>
    6a50:	10 c0       	rjmp	.+32     	; 0x6a72 <__ftoa_engine+0x174>
    6a52:	7d 93       	st	X+, r23
    6a54:	2a 95       	dec	r18
    6a56:	89 f6       	brne	.-94     	; 0x69fa <__ftoa_engine+0xfc>
    6a58:	06 94       	lsr	r0
    6a5a:	97 95       	ror	r25
    6a5c:	67 95       	ror	r22
    6a5e:	37 95       	ror	r19
    6a60:	17 95       	ror	r17
    6a62:	17 94       	ror	r1
    6a64:	e1 18       	sub	r14, r1
    6a66:	f1 0a       	sbc	r15, r17
    6a68:	43 0b       	sbc	r20, r19
    6a6a:	56 0b       	sbc	r21, r22
    6a6c:	c9 0b       	sbc	r28, r25
    6a6e:	d0 09       	sbc	r29, r0
    6a70:	98 f0       	brcs	.+38     	; 0x6a98 <__ftoa_engine+0x19a>
    6a72:	23 95       	inc	r18
    6a74:	7e 91       	ld	r23, -X
    6a76:	73 95       	inc	r23
    6a78:	7a 33       	cpi	r23, 0x3A	; 58
    6a7a:	08 f0       	brcs	.+2      	; 0x6a7e <__ftoa_engine+0x180>
    6a7c:	70 e3       	ldi	r23, 0x30	; 48
    6a7e:	7c 93       	st	X, r23
    6a80:	20 13       	cpse	r18, r16
    6a82:	b8 f7       	brcc	.-18     	; 0x6a72 <__ftoa_engine+0x174>
    6a84:	7e 91       	ld	r23, -X
    6a86:	70 61       	ori	r23, 0x10	; 16
    6a88:	7d 93       	st	X+, r23
    6a8a:	30 f0       	brcs	.+12     	; 0x6a98 <__ftoa_engine+0x19a>
    6a8c:	83 95       	inc	r24
    6a8e:	71 e3       	ldi	r23, 0x31	; 49
    6a90:	7d 93       	st	X+, r23
    6a92:	70 e3       	ldi	r23, 0x30	; 48
    6a94:	2a 95       	dec	r18
    6a96:	e1 f7       	brne	.-8      	; 0x6a90 <__ftoa_engine+0x192>
    6a98:	11 24       	eor	r1, r1
    6a9a:	ef 90       	pop	r14
    6a9c:	ff 90       	pop	r15
    6a9e:	0f 91       	pop	r16
    6aa0:	1f 91       	pop	r17
    6aa2:	cf 91       	pop	r28
    6aa4:	df 91       	pop	r29
    6aa6:	99 27       	eor	r25, r25
    6aa8:	87 fd       	sbrc	r24, 7
    6aaa:	90 95       	com	r25
    6aac:	08 95       	ret

00006aae <strnlen_P>:
    6aae:	fc 01       	movw	r30, r24
    6ab0:	05 90       	lpm	r0, Z+
    6ab2:	61 50       	subi	r22, 0x01	; 1
    6ab4:	70 40       	sbci	r23, 0x00	; 0
    6ab6:	01 10       	cpse	r0, r1
    6ab8:	d8 f7       	brcc	.-10     	; 0x6ab0 <strnlen_P+0x2>
    6aba:	80 95       	com	r24
    6abc:	90 95       	com	r25
    6abe:	8e 0f       	add	r24, r30
    6ac0:	9f 1f       	adc	r25, r31
    6ac2:	08 95       	ret

00006ac4 <strnlen>:
    6ac4:	fc 01       	movw	r30, r24
    6ac6:	61 50       	subi	r22, 0x01	; 1
    6ac8:	70 40       	sbci	r23, 0x00	; 0
    6aca:	01 90       	ld	r0, Z+
    6acc:	01 10       	cpse	r0, r1
    6ace:	d8 f7       	brcc	.-10     	; 0x6ac6 <strnlen+0x2>
    6ad0:	80 95       	com	r24
    6ad2:	90 95       	com	r25
    6ad4:	8e 0f       	add	r24, r30
    6ad6:	9f 1f       	adc	r25, r31
    6ad8:	08 95       	ret

00006ada <fdevopen>:
    6ada:	0f 93       	push	r16
    6adc:	1f 93       	push	r17
    6ade:	cf 93       	push	r28
    6ae0:	df 93       	push	r29
    6ae2:	00 97       	sbiw	r24, 0x00	; 0
    6ae4:	31 f4       	brne	.+12     	; 0x6af2 <fdevopen+0x18>
    6ae6:	61 15       	cp	r22, r1
    6ae8:	71 05       	cpc	r23, r1
    6aea:	19 f4       	brne	.+6      	; 0x6af2 <fdevopen+0x18>
    6aec:	80 e0       	ldi	r24, 0x00	; 0
    6aee:	90 e0       	ldi	r25, 0x00	; 0
    6af0:	39 c0       	rjmp	.+114    	; 0x6b64 <fdevopen+0x8a>
    6af2:	8b 01       	movw	r16, r22
    6af4:	ec 01       	movw	r28, r24
    6af6:	6e e0       	ldi	r22, 0x0E	; 14
    6af8:	70 e0       	ldi	r23, 0x00	; 0
    6afa:	81 e0       	ldi	r24, 0x01	; 1
    6afc:	90 e0       	ldi	r25, 0x00	; 0
    6afe:	e4 d0       	rcall	.+456    	; 0x6cc8 <calloc>
    6b00:	fc 01       	movw	r30, r24
    6b02:	89 2b       	or	r24, r25
    6b04:	99 f3       	breq	.-26     	; 0x6aec <fdevopen+0x12>
    6b06:	80 e8       	ldi	r24, 0x80	; 128
    6b08:	83 83       	std	Z+3, r24	; 0x03
    6b0a:	01 15       	cp	r16, r1
    6b0c:	11 05       	cpc	r17, r1
    6b0e:	71 f0       	breq	.+28     	; 0x6b2c <fdevopen+0x52>
    6b10:	02 87       	std	Z+10, r16	; 0x0a
    6b12:	13 87       	std	Z+11, r17	; 0x0b
    6b14:	81 e8       	ldi	r24, 0x81	; 129
    6b16:	83 83       	std	Z+3, r24	; 0x03
    6b18:	80 91 65 25 	lds	r24, 0x2565	; 0x802565 <__iob>
    6b1c:	90 91 66 25 	lds	r25, 0x2566	; 0x802566 <__iob+0x1>
    6b20:	89 2b       	or	r24, r25
    6b22:	21 f4       	brne	.+8      	; 0x6b2c <fdevopen+0x52>
    6b24:	e0 93 65 25 	sts	0x2565, r30	; 0x802565 <__iob>
    6b28:	f0 93 66 25 	sts	0x2566, r31	; 0x802566 <__iob+0x1>
    6b2c:	20 97       	sbiw	r28, 0x00	; 0
    6b2e:	c9 f0       	breq	.+50     	; 0x6b62 <fdevopen+0x88>
    6b30:	c0 87       	std	Z+8, r28	; 0x08
    6b32:	d1 87       	std	Z+9, r29	; 0x09
    6b34:	83 81       	ldd	r24, Z+3	; 0x03
    6b36:	82 60       	ori	r24, 0x02	; 2
    6b38:	83 83       	std	Z+3, r24	; 0x03
    6b3a:	80 91 67 25 	lds	r24, 0x2567	; 0x802567 <__iob+0x2>
    6b3e:	90 91 68 25 	lds	r25, 0x2568	; 0x802568 <__iob+0x3>
    6b42:	89 2b       	or	r24, r25
    6b44:	71 f4       	brne	.+28     	; 0x6b62 <fdevopen+0x88>
    6b46:	e0 93 67 25 	sts	0x2567, r30	; 0x802567 <__iob+0x2>
    6b4a:	f0 93 68 25 	sts	0x2568, r31	; 0x802568 <__iob+0x3>
    6b4e:	80 91 69 25 	lds	r24, 0x2569	; 0x802569 <__iob+0x4>
    6b52:	90 91 6a 25 	lds	r25, 0x256A	; 0x80256a <__iob+0x5>
    6b56:	89 2b       	or	r24, r25
    6b58:	21 f4       	brne	.+8      	; 0x6b62 <fdevopen+0x88>
    6b5a:	e0 93 69 25 	sts	0x2569, r30	; 0x802569 <__iob+0x4>
    6b5e:	f0 93 6a 25 	sts	0x256A, r31	; 0x80256a <__iob+0x5>
    6b62:	cf 01       	movw	r24, r30
    6b64:	df 91       	pop	r29
    6b66:	cf 91       	pop	r28
    6b68:	1f 91       	pop	r17
    6b6a:	0f 91       	pop	r16
    6b6c:	08 95       	ret

00006b6e <fputc>:
    6b6e:	0f 93       	push	r16
    6b70:	1f 93       	push	r17
    6b72:	cf 93       	push	r28
    6b74:	df 93       	push	r29
    6b76:	fb 01       	movw	r30, r22
    6b78:	23 81       	ldd	r18, Z+3	; 0x03
    6b7a:	21 fd       	sbrc	r18, 1
    6b7c:	03 c0       	rjmp	.+6      	; 0x6b84 <fputc+0x16>
    6b7e:	8f ef       	ldi	r24, 0xFF	; 255
    6b80:	9f ef       	ldi	r25, 0xFF	; 255
    6b82:	2c c0       	rjmp	.+88     	; 0x6bdc <fputc+0x6e>
    6b84:	22 ff       	sbrs	r18, 2
    6b86:	16 c0       	rjmp	.+44     	; 0x6bb4 <fputc+0x46>
    6b88:	46 81       	ldd	r20, Z+6	; 0x06
    6b8a:	57 81       	ldd	r21, Z+7	; 0x07
    6b8c:	24 81       	ldd	r18, Z+4	; 0x04
    6b8e:	35 81       	ldd	r19, Z+5	; 0x05
    6b90:	42 17       	cp	r20, r18
    6b92:	53 07       	cpc	r21, r19
    6b94:	44 f4       	brge	.+16     	; 0x6ba6 <fputc+0x38>
    6b96:	a0 81       	ld	r26, Z
    6b98:	b1 81       	ldd	r27, Z+1	; 0x01
    6b9a:	9d 01       	movw	r18, r26
    6b9c:	2f 5f       	subi	r18, 0xFF	; 255
    6b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    6ba0:	20 83       	st	Z, r18
    6ba2:	31 83       	std	Z+1, r19	; 0x01
    6ba4:	8c 93       	st	X, r24
    6ba6:	26 81       	ldd	r18, Z+6	; 0x06
    6ba8:	37 81       	ldd	r19, Z+7	; 0x07
    6baa:	2f 5f       	subi	r18, 0xFF	; 255
    6bac:	3f 4f       	sbci	r19, 0xFF	; 255
    6bae:	26 83       	std	Z+6, r18	; 0x06
    6bb0:	37 83       	std	Z+7, r19	; 0x07
    6bb2:	14 c0       	rjmp	.+40     	; 0x6bdc <fputc+0x6e>
    6bb4:	8b 01       	movw	r16, r22
    6bb6:	ec 01       	movw	r28, r24
    6bb8:	fb 01       	movw	r30, r22
    6bba:	00 84       	ldd	r0, Z+8	; 0x08
    6bbc:	f1 85       	ldd	r31, Z+9	; 0x09
    6bbe:	e0 2d       	mov	r30, r0
    6bc0:	19 95       	eicall
    6bc2:	89 2b       	or	r24, r25
    6bc4:	e1 f6       	brne	.-72     	; 0x6b7e <fputc+0x10>
    6bc6:	d8 01       	movw	r26, r16
    6bc8:	16 96       	adiw	r26, 0x06	; 6
    6bca:	8d 91       	ld	r24, X+
    6bcc:	9c 91       	ld	r25, X
    6bce:	17 97       	sbiw	r26, 0x07	; 7
    6bd0:	01 96       	adiw	r24, 0x01	; 1
    6bd2:	16 96       	adiw	r26, 0x06	; 6
    6bd4:	8d 93       	st	X+, r24
    6bd6:	9c 93       	st	X, r25
    6bd8:	17 97       	sbiw	r26, 0x07	; 7
    6bda:	ce 01       	movw	r24, r28
    6bdc:	df 91       	pop	r29
    6bde:	cf 91       	pop	r28
    6be0:	1f 91       	pop	r17
    6be2:	0f 91       	pop	r16
    6be4:	08 95       	ret

00006be6 <printf>:
    6be6:	cf 93       	push	r28
    6be8:	df 93       	push	r29
    6bea:	cd b7       	in	r28, 0x3d	; 61
    6bec:	de b7       	in	r29, 0x3e	; 62
    6bee:	ae 01       	movw	r20, r28
    6bf0:	4a 5f       	subi	r20, 0xFA	; 250
    6bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    6bf4:	fa 01       	movw	r30, r20
    6bf6:	61 91       	ld	r22, Z+
    6bf8:	71 91       	ld	r23, Z+
    6bfa:	af 01       	movw	r20, r30
    6bfc:	80 91 67 25 	lds	r24, 0x2567	; 0x802567 <__iob+0x2>
    6c00:	90 91 68 25 	lds	r25, 0x2568	; 0x802568 <__iob+0x3>
    6c04:	c7 d9       	rcall	.-3186   	; 0x5f94 <vfprintf>
    6c06:	df 91       	pop	r29
    6c08:	cf 91       	pop	r28
    6c0a:	08 95       	ret

00006c0c <__ultoa_invert>:
    6c0c:	fa 01       	movw	r30, r20
    6c0e:	aa 27       	eor	r26, r26
    6c10:	28 30       	cpi	r18, 0x08	; 8
    6c12:	51 f1       	breq	.+84     	; 0x6c68 <__ultoa_invert+0x5c>
    6c14:	20 31       	cpi	r18, 0x10	; 16
    6c16:	81 f1       	breq	.+96     	; 0x6c78 <__ultoa_invert+0x6c>
    6c18:	e8 94       	clt
    6c1a:	6f 93       	push	r22
    6c1c:	6e 7f       	andi	r22, 0xFE	; 254
    6c1e:	6e 5f       	subi	r22, 0xFE	; 254
    6c20:	7f 4f       	sbci	r23, 0xFF	; 255
    6c22:	8f 4f       	sbci	r24, 0xFF	; 255
    6c24:	9f 4f       	sbci	r25, 0xFF	; 255
    6c26:	af 4f       	sbci	r26, 0xFF	; 255
    6c28:	b1 e0       	ldi	r27, 0x01	; 1
    6c2a:	3e d0       	rcall	.+124    	; 0x6ca8 <__ultoa_invert+0x9c>
    6c2c:	b4 e0       	ldi	r27, 0x04	; 4
    6c2e:	3c d0       	rcall	.+120    	; 0x6ca8 <__ultoa_invert+0x9c>
    6c30:	67 0f       	add	r22, r23
    6c32:	78 1f       	adc	r23, r24
    6c34:	89 1f       	adc	r24, r25
    6c36:	9a 1f       	adc	r25, r26
    6c38:	a1 1d       	adc	r26, r1
    6c3a:	68 0f       	add	r22, r24
    6c3c:	79 1f       	adc	r23, r25
    6c3e:	8a 1f       	adc	r24, r26
    6c40:	91 1d       	adc	r25, r1
    6c42:	a1 1d       	adc	r26, r1
    6c44:	6a 0f       	add	r22, r26
    6c46:	71 1d       	adc	r23, r1
    6c48:	81 1d       	adc	r24, r1
    6c4a:	91 1d       	adc	r25, r1
    6c4c:	a1 1d       	adc	r26, r1
    6c4e:	20 d0       	rcall	.+64     	; 0x6c90 <__ultoa_invert+0x84>
    6c50:	09 f4       	brne	.+2      	; 0x6c54 <__ultoa_invert+0x48>
    6c52:	68 94       	set
    6c54:	3f 91       	pop	r19
    6c56:	2a e0       	ldi	r18, 0x0A	; 10
    6c58:	26 9f       	mul	r18, r22
    6c5a:	11 24       	eor	r1, r1
    6c5c:	30 19       	sub	r19, r0
    6c5e:	30 5d       	subi	r19, 0xD0	; 208
    6c60:	31 93       	st	Z+, r19
    6c62:	de f6       	brtc	.-74     	; 0x6c1a <__ultoa_invert+0xe>
    6c64:	cf 01       	movw	r24, r30
    6c66:	08 95       	ret
    6c68:	46 2f       	mov	r20, r22
    6c6a:	47 70       	andi	r20, 0x07	; 7
    6c6c:	40 5d       	subi	r20, 0xD0	; 208
    6c6e:	41 93       	st	Z+, r20
    6c70:	b3 e0       	ldi	r27, 0x03	; 3
    6c72:	0f d0       	rcall	.+30     	; 0x6c92 <__ultoa_invert+0x86>
    6c74:	c9 f7       	brne	.-14     	; 0x6c68 <__ultoa_invert+0x5c>
    6c76:	f6 cf       	rjmp	.-20     	; 0x6c64 <__ultoa_invert+0x58>
    6c78:	46 2f       	mov	r20, r22
    6c7a:	4f 70       	andi	r20, 0x0F	; 15
    6c7c:	40 5d       	subi	r20, 0xD0	; 208
    6c7e:	4a 33       	cpi	r20, 0x3A	; 58
    6c80:	18 f0       	brcs	.+6      	; 0x6c88 <__ultoa_invert+0x7c>
    6c82:	49 5d       	subi	r20, 0xD9	; 217
    6c84:	31 fd       	sbrc	r19, 1
    6c86:	40 52       	subi	r20, 0x20	; 32
    6c88:	41 93       	st	Z+, r20
    6c8a:	02 d0       	rcall	.+4      	; 0x6c90 <__ultoa_invert+0x84>
    6c8c:	a9 f7       	brne	.-22     	; 0x6c78 <__ultoa_invert+0x6c>
    6c8e:	ea cf       	rjmp	.-44     	; 0x6c64 <__ultoa_invert+0x58>
    6c90:	b4 e0       	ldi	r27, 0x04	; 4
    6c92:	a6 95       	lsr	r26
    6c94:	97 95       	ror	r25
    6c96:	87 95       	ror	r24
    6c98:	77 95       	ror	r23
    6c9a:	67 95       	ror	r22
    6c9c:	ba 95       	dec	r27
    6c9e:	c9 f7       	brne	.-14     	; 0x6c92 <__ultoa_invert+0x86>
    6ca0:	00 97       	sbiw	r24, 0x00	; 0
    6ca2:	61 05       	cpc	r22, r1
    6ca4:	71 05       	cpc	r23, r1
    6ca6:	08 95       	ret
    6ca8:	9b 01       	movw	r18, r22
    6caa:	ac 01       	movw	r20, r24
    6cac:	0a 2e       	mov	r0, r26
    6cae:	06 94       	lsr	r0
    6cb0:	57 95       	ror	r21
    6cb2:	47 95       	ror	r20
    6cb4:	37 95       	ror	r19
    6cb6:	27 95       	ror	r18
    6cb8:	ba 95       	dec	r27
    6cba:	c9 f7       	brne	.-14     	; 0x6cae <__ultoa_invert+0xa2>
    6cbc:	62 0f       	add	r22, r18
    6cbe:	73 1f       	adc	r23, r19
    6cc0:	84 1f       	adc	r24, r20
    6cc2:	95 1f       	adc	r25, r21
    6cc4:	a0 1d       	adc	r26, r0
    6cc6:	08 95       	ret

00006cc8 <calloc>:
    6cc8:	0f 93       	push	r16
    6cca:	1f 93       	push	r17
    6ccc:	cf 93       	push	r28
    6cce:	df 93       	push	r29
    6cd0:	86 9f       	mul	r24, r22
    6cd2:	80 01       	movw	r16, r0
    6cd4:	87 9f       	mul	r24, r23
    6cd6:	10 0d       	add	r17, r0
    6cd8:	96 9f       	mul	r25, r22
    6cda:	10 0d       	add	r17, r0
    6cdc:	11 24       	eor	r1, r1
    6cde:	c8 01       	movw	r24, r16
    6ce0:	0d d0       	rcall	.+26     	; 0x6cfc <malloc>
    6ce2:	ec 01       	movw	r28, r24
    6ce4:	00 97       	sbiw	r24, 0x00	; 0
    6ce6:	21 f0       	breq	.+8      	; 0x6cf0 <calloc+0x28>
    6ce8:	a8 01       	movw	r20, r16
    6cea:	60 e0       	ldi	r22, 0x00	; 0
    6cec:	70 e0       	ldi	r23, 0x00	; 0
    6cee:	27 d1       	rcall	.+590    	; 0x6f3e <memset>
    6cf0:	ce 01       	movw	r24, r28
    6cf2:	df 91       	pop	r29
    6cf4:	cf 91       	pop	r28
    6cf6:	1f 91       	pop	r17
    6cf8:	0f 91       	pop	r16
    6cfa:	08 95       	ret

00006cfc <malloc>:
    6cfc:	0f 93       	push	r16
    6cfe:	1f 93       	push	r17
    6d00:	cf 93       	push	r28
    6d02:	df 93       	push	r29
    6d04:	82 30       	cpi	r24, 0x02	; 2
    6d06:	91 05       	cpc	r25, r1
    6d08:	10 f4       	brcc	.+4      	; 0x6d0e <malloc+0x12>
    6d0a:	82 e0       	ldi	r24, 0x02	; 2
    6d0c:	90 e0       	ldi	r25, 0x00	; 0
    6d0e:	e0 91 6d 25 	lds	r30, 0x256D	; 0x80256d <__flp>
    6d12:	f0 91 6e 25 	lds	r31, 0x256E	; 0x80256e <__flp+0x1>
    6d16:	20 e0       	ldi	r18, 0x00	; 0
    6d18:	30 e0       	ldi	r19, 0x00	; 0
    6d1a:	a0 e0       	ldi	r26, 0x00	; 0
    6d1c:	b0 e0       	ldi	r27, 0x00	; 0
    6d1e:	30 97       	sbiw	r30, 0x00	; 0
    6d20:	19 f1       	breq	.+70     	; 0x6d68 <malloc+0x6c>
    6d22:	40 81       	ld	r20, Z
    6d24:	51 81       	ldd	r21, Z+1	; 0x01
    6d26:	02 81       	ldd	r16, Z+2	; 0x02
    6d28:	13 81       	ldd	r17, Z+3	; 0x03
    6d2a:	48 17       	cp	r20, r24
    6d2c:	59 07       	cpc	r21, r25
    6d2e:	c8 f0       	brcs	.+50     	; 0x6d62 <malloc+0x66>
    6d30:	84 17       	cp	r24, r20
    6d32:	95 07       	cpc	r25, r21
    6d34:	69 f4       	brne	.+26     	; 0x6d50 <malloc+0x54>
    6d36:	10 97       	sbiw	r26, 0x00	; 0
    6d38:	31 f0       	breq	.+12     	; 0x6d46 <malloc+0x4a>
    6d3a:	12 96       	adiw	r26, 0x02	; 2
    6d3c:	0c 93       	st	X, r16
    6d3e:	12 97       	sbiw	r26, 0x02	; 2
    6d40:	13 96       	adiw	r26, 0x03	; 3
    6d42:	1c 93       	st	X, r17
    6d44:	27 c0       	rjmp	.+78     	; 0x6d94 <malloc+0x98>
    6d46:	00 93 6d 25 	sts	0x256D, r16	; 0x80256d <__flp>
    6d4a:	10 93 6e 25 	sts	0x256E, r17	; 0x80256e <__flp+0x1>
    6d4e:	22 c0       	rjmp	.+68     	; 0x6d94 <malloc+0x98>
    6d50:	21 15       	cp	r18, r1
    6d52:	31 05       	cpc	r19, r1
    6d54:	19 f0       	breq	.+6      	; 0x6d5c <malloc+0x60>
    6d56:	42 17       	cp	r20, r18
    6d58:	53 07       	cpc	r21, r19
    6d5a:	18 f4       	brcc	.+6      	; 0x6d62 <malloc+0x66>
    6d5c:	9a 01       	movw	r18, r20
    6d5e:	bd 01       	movw	r22, r26
    6d60:	ef 01       	movw	r28, r30
    6d62:	df 01       	movw	r26, r30
    6d64:	f8 01       	movw	r30, r16
    6d66:	db cf       	rjmp	.-74     	; 0x6d1e <malloc+0x22>
    6d68:	21 15       	cp	r18, r1
    6d6a:	31 05       	cpc	r19, r1
    6d6c:	f9 f0       	breq	.+62     	; 0x6dac <malloc+0xb0>
    6d6e:	28 1b       	sub	r18, r24
    6d70:	39 0b       	sbc	r19, r25
    6d72:	24 30       	cpi	r18, 0x04	; 4
    6d74:	31 05       	cpc	r19, r1
    6d76:	80 f4       	brcc	.+32     	; 0x6d98 <malloc+0x9c>
    6d78:	8a 81       	ldd	r24, Y+2	; 0x02
    6d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    6d7c:	61 15       	cp	r22, r1
    6d7e:	71 05       	cpc	r23, r1
    6d80:	21 f0       	breq	.+8      	; 0x6d8a <malloc+0x8e>
    6d82:	fb 01       	movw	r30, r22
    6d84:	82 83       	std	Z+2, r24	; 0x02
    6d86:	93 83       	std	Z+3, r25	; 0x03
    6d88:	04 c0       	rjmp	.+8      	; 0x6d92 <malloc+0x96>
    6d8a:	80 93 6d 25 	sts	0x256D, r24	; 0x80256d <__flp>
    6d8e:	90 93 6e 25 	sts	0x256E, r25	; 0x80256e <__flp+0x1>
    6d92:	fe 01       	movw	r30, r28
    6d94:	32 96       	adiw	r30, 0x02	; 2
    6d96:	44 c0       	rjmp	.+136    	; 0x6e20 <malloc+0x124>
    6d98:	fe 01       	movw	r30, r28
    6d9a:	e2 0f       	add	r30, r18
    6d9c:	f3 1f       	adc	r31, r19
    6d9e:	81 93       	st	Z+, r24
    6da0:	91 93       	st	Z+, r25
    6da2:	22 50       	subi	r18, 0x02	; 2
    6da4:	31 09       	sbc	r19, r1
    6da6:	28 83       	st	Y, r18
    6da8:	39 83       	std	Y+1, r19	; 0x01
    6daa:	3a c0       	rjmp	.+116    	; 0x6e20 <malloc+0x124>
    6dac:	20 91 6b 25 	lds	r18, 0x256B	; 0x80256b <__brkval>
    6db0:	30 91 6c 25 	lds	r19, 0x256C	; 0x80256c <__brkval+0x1>
    6db4:	23 2b       	or	r18, r19
    6db6:	41 f4       	brne	.+16     	; 0x6dc8 <malloc+0xcc>
    6db8:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    6dbc:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    6dc0:	20 93 6b 25 	sts	0x256B, r18	; 0x80256b <__brkval>
    6dc4:	30 93 6c 25 	sts	0x256C, r19	; 0x80256c <__brkval+0x1>
    6dc8:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    6dcc:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    6dd0:	21 15       	cp	r18, r1
    6dd2:	31 05       	cpc	r19, r1
    6dd4:	41 f4       	brne	.+16     	; 0x6de6 <malloc+0xea>
    6dd6:	2d b7       	in	r18, 0x3d	; 61
    6dd8:	3e b7       	in	r19, 0x3e	; 62
    6dda:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    6dde:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    6de2:	24 1b       	sub	r18, r20
    6de4:	35 0b       	sbc	r19, r21
    6de6:	e0 91 6b 25 	lds	r30, 0x256B	; 0x80256b <__brkval>
    6dea:	f0 91 6c 25 	lds	r31, 0x256C	; 0x80256c <__brkval+0x1>
    6dee:	e2 17       	cp	r30, r18
    6df0:	f3 07       	cpc	r31, r19
    6df2:	a0 f4       	brcc	.+40     	; 0x6e1c <malloc+0x120>
    6df4:	2e 1b       	sub	r18, r30
    6df6:	3f 0b       	sbc	r19, r31
    6df8:	28 17       	cp	r18, r24
    6dfa:	39 07       	cpc	r19, r25
    6dfc:	78 f0       	brcs	.+30     	; 0x6e1c <malloc+0x120>
    6dfe:	ac 01       	movw	r20, r24
    6e00:	4e 5f       	subi	r20, 0xFE	; 254
    6e02:	5f 4f       	sbci	r21, 0xFF	; 255
    6e04:	24 17       	cp	r18, r20
    6e06:	35 07       	cpc	r19, r21
    6e08:	48 f0       	brcs	.+18     	; 0x6e1c <malloc+0x120>
    6e0a:	4e 0f       	add	r20, r30
    6e0c:	5f 1f       	adc	r21, r31
    6e0e:	40 93 6b 25 	sts	0x256B, r20	; 0x80256b <__brkval>
    6e12:	50 93 6c 25 	sts	0x256C, r21	; 0x80256c <__brkval+0x1>
    6e16:	81 93       	st	Z+, r24
    6e18:	91 93       	st	Z+, r25
    6e1a:	02 c0       	rjmp	.+4      	; 0x6e20 <malloc+0x124>
    6e1c:	e0 e0       	ldi	r30, 0x00	; 0
    6e1e:	f0 e0       	ldi	r31, 0x00	; 0
    6e20:	cf 01       	movw	r24, r30
    6e22:	df 91       	pop	r29
    6e24:	cf 91       	pop	r28
    6e26:	1f 91       	pop	r17
    6e28:	0f 91       	pop	r16
    6e2a:	08 95       	ret

00006e2c <free>:
    6e2c:	cf 93       	push	r28
    6e2e:	df 93       	push	r29
    6e30:	00 97       	sbiw	r24, 0x00	; 0
    6e32:	09 f4       	brne	.+2      	; 0x6e36 <free+0xa>
    6e34:	81 c0       	rjmp	.+258    	; 0x6f38 <free+0x10c>
    6e36:	fc 01       	movw	r30, r24
    6e38:	32 97       	sbiw	r30, 0x02	; 2
    6e3a:	12 82       	std	Z+2, r1	; 0x02
    6e3c:	13 82       	std	Z+3, r1	; 0x03
    6e3e:	a0 91 6d 25 	lds	r26, 0x256D	; 0x80256d <__flp>
    6e42:	b0 91 6e 25 	lds	r27, 0x256E	; 0x80256e <__flp+0x1>
    6e46:	10 97       	sbiw	r26, 0x00	; 0
    6e48:	81 f4       	brne	.+32     	; 0x6e6a <free+0x3e>
    6e4a:	20 81       	ld	r18, Z
    6e4c:	31 81       	ldd	r19, Z+1	; 0x01
    6e4e:	82 0f       	add	r24, r18
    6e50:	93 1f       	adc	r25, r19
    6e52:	20 91 6b 25 	lds	r18, 0x256B	; 0x80256b <__brkval>
    6e56:	30 91 6c 25 	lds	r19, 0x256C	; 0x80256c <__brkval+0x1>
    6e5a:	28 17       	cp	r18, r24
    6e5c:	39 07       	cpc	r19, r25
    6e5e:	51 f5       	brne	.+84     	; 0x6eb4 <free+0x88>
    6e60:	e0 93 6b 25 	sts	0x256B, r30	; 0x80256b <__brkval>
    6e64:	f0 93 6c 25 	sts	0x256C, r31	; 0x80256c <__brkval+0x1>
    6e68:	67 c0       	rjmp	.+206    	; 0x6f38 <free+0x10c>
    6e6a:	ed 01       	movw	r28, r26
    6e6c:	20 e0       	ldi	r18, 0x00	; 0
    6e6e:	30 e0       	ldi	r19, 0x00	; 0
    6e70:	ce 17       	cp	r28, r30
    6e72:	df 07       	cpc	r29, r31
    6e74:	40 f4       	brcc	.+16     	; 0x6e86 <free+0x5a>
    6e76:	4a 81       	ldd	r20, Y+2	; 0x02
    6e78:	5b 81       	ldd	r21, Y+3	; 0x03
    6e7a:	9e 01       	movw	r18, r28
    6e7c:	41 15       	cp	r20, r1
    6e7e:	51 05       	cpc	r21, r1
    6e80:	f1 f0       	breq	.+60     	; 0x6ebe <free+0x92>
    6e82:	ea 01       	movw	r28, r20
    6e84:	f5 cf       	rjmp	.-22     	; 0x6e70 <free+0x44>
    6e86:	c2 83       	std	Z+2, r28	; 0x02
    6e88:	d3 83       	std	Z+3, r29	; 0x03
    6e8a:	40 81       	ld	r20, Z
    6e8c:	51 81       	ldd	r21, Z+1	; 0x01
    6e8e:	84 0f       	add	r24, r20
    6e90:	95 1f       	adc	r25, r21
    6e92:	c8 17       	cp	r28, r24
    6e94:	d9 07       	cpc	r29, r25
    6e96:	59 f4       	brne	.+22     	; 0x6eae <free+0x82>
    6e98:	88 81       	ld	r24, Y
    6e9a:	99 81       	ldd	r25, Y+1	; 0x01
    6e9c:	84 0f       	add	r24, r20
    6e9e:	95 1f       	adc	r25, r21
    6ea0:	02 96       	adiw	r24, 0x02	; 2
    6ea2:	80 83       	st	Z, r24
    6ea4:	91 83       	std	Z+1, r25	; 0x01
    6ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    6ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    6eaa:	82 83       	std	Z+2, r24	; 0x02
    6eac:	93 83       	std	Z+3, r25	; 0x03
    6eae:	21 15       	cp	r18, r1
    6eb0:	31 05       	cpc	r19, r1
    6eb2:	29 f4       	brne	.+10     	; 0x6ebe <free+0x92>
    6eb4:	e0 93 6d 25 	sts	0x256D, r30	; 0x80256d <__flp>
    6eb8:	f0 93 6e 25 	sts	0x256E, r31	; 0x80256e <__flp+0x1>
    6ebc:	3d c0       	rjmp	.+122    	; 0x6f38 <free+0x10c>
    6ebe:	e9 01       	movw	r28, r18
    6ec0:	ea 83       	std	Y+2, r30	; 0x02
    6ec2:	fb 83       	std	Y+3, r31	; 0x03
    6ec4:	49 91       	ld	r20, Y+
    6ec6:	59 91       	ld	r21, Y+
    6ec8:	c4 0f       	add	r28, r20
    6eca:	d5 1f       	adc	r29, r21
    6ecc:	ec 17       	cp	r30, r28
    6ece:	fd 07       	cpc	r31, r29
    6ed0:	61 f4       	brne	.+24     	; 0x6eea <free+0xbe>
    6ed2:	80 81       	ld	r24, Z
    6ed4:	91 81       	ldd	r25, Z+1	; 0x01
    6ed6:	84 0f       	add	r24, r20
    6ed8:	95 1f       	adc	r25, r21
    6eda:	02 96       	adiw	r24, 0x02	; 2
    6edc:	e9 01       	movw	r28, r18
    6ede:	88 83       	st	Y, r24
    6ee0:	99 83       	std	Y+1, r25	; 0x01
    6ee2:	82 81       	ldd	r24, Z+2	; 0x02
    6ee4:	93 81       	ldd	r25, Z+3	; 0x03
    6ee6:	8a 83       	std	Y+2, r24	; 0x02
    6ee8:	9b 83       	std	Y+3, r25	; 0x03
    6eea:	e0 e0       	ldi	r30, 0x00	; 0
    6eec:	f0 e0       	ldi	r31, 0x00	; 0
    6eee:	12 96       	adiw	r26, 0x02	; 2
    6ef0:	8d 91       	ld	r24, X+
    6ef2:	9c 91       	ld	r25, X
    6ef4:	13 97       	sbiw	r26, 0x03	; 3
    6ef6:	00 97       	sbiw	r24, 0x00	; 0
    6ef8:	19 f0       	breq	.+6      	; 0x6f00 <free+0xd4>
    6efa:	fd 01       	movw	r30, r26
    6efc:	dc 01       	movw	r26, r24
    6efe:	f7 cf       	rjmp	.-18     	; 0x6eee <free+0xc2>
    6f00:	8d 91       	ld	r24, X+
    6f02:	9c 91       	ld	r25, X
    6f04:	11 97       	sbiw	r26, 0x01	; 1
    6f06:	9d 01       	movw	r18, r26
    6f08:	2e 5f       	subi	r18, 0xFE	; 254
    6f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    6f0c:	82 0f       	add	r24, r18
    6f0e:	93 1f       	adc	r25, r19
    6f10:	20 91 6b 25 	lds	r18, 0x256B	; 0x80256b <__brkval>
    6f14:	30 91 6c 25 	lds	r19, 0x256C	; 0x80256c <__brkval+0x1>
    6f18:	28 17       	cp	r18, r24
    6f1a:	39 07       	cpc	r19, r25
    6f1c:	69 f4       	brne	.+26     	; 0x6f38 <free+0x10c>
    6f1e:	30 97       	sbiw	r30, 0x00	; 0
    6f20:	29 f4       	brne	.+10     	; 0x6f2c <free+0x100>
    6f22:	10 92 6d 25 	sts	0x256D, r1	; 0x80256d <__flp>
    6f26:	10 92 6e 25 	sts	0x256E, r1	; 0x80256e <__flp+0x1>
    6f2a:	02 c0       	rjmp	.+4      	; 0x6f30 <free+0x104>
    6f2c:	12 82       	std	Z+2, r1	; 0x02
    6f2e:	13 82       	std	Z+3, r1	; 0x03
    6f30:	a0 93 6b 25 	sts	0x256B, r26	; 0x80256b <__brkval>
    6f34:	b0 93 6c 25 	sts	0x256C, r27	; 0x80256c <__brkval+0x1>
    6f38:	df 91       	pop	r29
    6f3a:	cf 91       	pop	r28
    6f3c:	08 95       	ret

00006f3e <memset>:
    6f3e:	dc 01       	movw	r26, r24
    6f40:	01 c0       	rjmp	.+2      	; 0x6f44 <memset+0x6>
    6f42:	6d 93       	st	X+, r22
    6f44:	41 50       	subi	r20, 0x01	; 1
    6f46:	50 40       	sbci	r21, 0x00	; 0
    6f48:	e0 f7       	brcc	.-8      	; 0x6f42 <memset+0x4>
    6f4a:	08 95       	ret

00006f4c <_exit>:
    6f4c:	f8 94       	cli

00006f4e <__stop_program>:
    6f4e:	ff cf       	rjmp	.-2      	; 0x6f4e <__stop_program>
