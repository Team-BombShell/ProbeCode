
CanSat Probe Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00802000  000050da  0000516e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000331  00802072  00802072  000051e0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000051e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000523c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007a0  00000000  00000000  00005280  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001622e  00000000  00000000  00005a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006b0a  00000000  00000000  0001bc4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ca0d  00000000  00000000  00022758  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002354  00000000  00000000  0002f168  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00035ce4  00000000  00000000  000314bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008690  00000000  00000000  000671a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000710  00000000  00000000  0006f830  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000e4d0  00000000  00000000  0006ff40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fe c1       	rjmp	.+1020   	; 0x3fe <__ctors_end>
       2:	00 00       	nop
       4:	22 c2       	rjmp	.+1092   	; 0x44a <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__vector_2>
       c:	1e c2       	rjmp	.+1084   	; 0x44a <__bad_interrupt>
       e:	00 00       	nop
      10:	1c c2       	rjmp	.+1080   	; 0x44a <__bad_interrupt>
      12:	00 00       	nop
      14:	1a c2       	rjmp	.+1076   	; 0x44a <__bad_interrupt>
      16:	00 00       	nop
      18:	18 c2       	rjmp	.+1072   	; 0x44a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	16 c2       	rjmp	.+1068   	; 0x44a <__bad_interrupt>
      1e:	00 00       	nop
      20:	14 c2       	rjmp	.+1064   	; 0x44a <__bad_interrupt>
      22:	00 00       	nop
      24:	12 c2       	rjmp	.+1060   	; 0x44a <__bad_interrupt>
      26:	00 00       	nop
      28:	10 c2       	rjmp	.+1056   	; 0x44a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0e c2       	rjmp	.+1052   	; 0x44a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c c2       	rjmp	.+1048   	; 0x44a <__bad_interrupt>
      32:	00 00       	nop
      34:	a2 c2       	rjmp	.+1348   	; 0x57a <__vector_13>
      36:	00 00       	nop
      38:	27 c7       	rjmp	.+3662   	; 0xe88 <__vector_14>
      3a:	00 00       	nop
      3c:	5d c7       	rjmp	.+3770   	; 0xef8 <__vector_15>
      3e:	00 00       	nop
      40:	93 c7       	rjmp	.+3878   	; 0xf68 <__vector_16>
      42:	00 00       	nop
      44:	c9 c7       	rjmp	.+3986   	; 0xfd8 <__vector_17>
      46:	00 00       	nop
      48:	0c 94 24 08 	jmp	0x1048	; 0x1048 <__vector_18>
      4c:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__vector_19>
      50:	0c 94 94 08 	jmp	0x1128	; 0x1128 <__vector_20>
      54:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__vector_21>
      58:	0c 94 04 09 	jmp	0x1208	; 0x1208 <__vector_22>
      5c:	0c 94 3c 09 	jmp	0x1278	; 0x1278 <__vector_23>
      60:	f4 c1       	rjmp	.+1000   	; 0x44a <__bad_interrupt>
      62:	00 00       	nop
      64:	f2 c1       	rjmp	.+996    	; 0x44a <__bad_interrupt>
      66:	00 00       	nop
      68:	f0 c1       	rjmp	.+992    	; 0x44a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ee c1       	rjmp	.+988    	; 0x44a <__bad_interrupt>
      6e:	00 00       	nop
      70:	ec c1       	rjmp	.+984    	; 0x44a <__bad_interrupt>
      72:	00 00       	nop
      74:	ea c1       	rjmp	.+980    	; 0x44a <__bad_interrupt>
      76:	00 00       	nop
      78:	e8 c1       	rjmp	.+976    	; 0x44a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e6 c1       	rjmp	.+972    	; 0x44a <__bad_interrupt>
      7e:	00 00       	nop
      80:	e4 c1       	rjmp	.+968    	; 0x44a <__bad_interrupt>
      82:	00 00       	nop
      84:	e2 c1       	rjmp	.+964    	; 0x44a <__bad_interrupt>
      86:	00 00       	nop
      88:	e0 c1       	rjmp	.+960    	; 0x44a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	de c1       	rjmp	.+956    	; 0x44a <__bad_interrupt>
      8e:	00 00       	nop
      90:	dc c1       	rjmp	.+952    	; 0x44a <__bad_interrupt>
      92:	00 00       	nop
      94:	da c1       	rjmp	.+948    	; 0x44a <__bad_interrupt>
      96:	00 00       	nop
      98:	d8 c1       	rjmp	.+944    	; 0x44a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f1 c5       	rjmp	.+3042   	; 0xc80 <__vector_39>
      9e:	00 00       	nop
      a0:	2c c6       	rjmp	.+3160   	; 0xcfa <__vector_40>
      a2:	00 00       	nop
      a4:	67 c6       	rjmp	.+3278   	; 0xd74 <__vector_41>
      a6:	00 00       	nop
      a8:	a2 c6       	rjmp	.+3396   	; 0xdee <__vector_42>
      aa:	00 00       	nop
      ac:	ce c1       	rjmp	.+924    	; 0x44a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cc c1       	rjmp	.+920    	; 0x44a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ca c1       	rjmp	.+916    	; 0x44a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c4 c2       	rjmp	.+1416   	; 0x642 <__vector_46>
      ba:	00 00       	nop
      bc:	0c 94 a4 0b 	jmp	0x1748	; 0x1748 <__vector_47>
      c0:	0c 94 dc 0b 	jmp	0x17b8	; 0x17b8 <__vector_48>
      c4:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <__vector_49>
      c8:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <__vector_50>
      cc:	0c 94 84 0c 	jmp	0x1908	; 0x1908 <__vector_51>
      d0:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_52>
      d4:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__vector_53>
      d8:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__vector_54>
      dc:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <__vector_55>
      e0:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__vector_56>
      e4:	b2 c1       	rjmp	.+868    	; 0x44a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b0 c1       	rjmp	.+864    	; 0x44a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ae c1       	rjmp	.+860    	; 0x44a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ac c1       	rjmp	.+856    	; 0x44a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	aa c1       	rjmp	.+852    	; 0x44a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a8 c1       	rjmp	.+848    	; 0x44a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a6 c1       	rjmp	.+844    	; 0x44a <__bad_interrupt>
      fe:	00 00       	nop
     100:	a4 c1       	rjmp	.+840    	; 0x44a <__bad_interrupt>
     102:	00 00       	nop
     104:	a2 c1       	rjmp	.+836    	; 0x44a <__bad_interrupt>
     106:	00 00       	nop
     108:	a0 c1       	rjmp	.+832    	; 0x44a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9e c1       	rjmp	.+828    	; 0x44a <__bad_interrupt>
     10e:	00 00       	nop
     110:	9c c1       	rjmp	.+824    	; 0x44a <__bad_interrupt>
     112:	00 00       	nop
     114:	9a c1       	rjmp	.+820    	; 0x44a <__bad_interrupt>
     116:	00 00       	nop
     118:	98 c1       	rjmp	.+816    	; 0x44a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	bd c4       	rjmp	.+2426   	; 0xa98 <__vector_71>
     11e:	00 00       	nop
     120:	f8 c4       	rjmp	.+2544   	; 0xb12 <__vector_72>
     122:	00 00       	nop
     124:	33 c5       	rjmp	.+2662   	; 0xb8c <__vector_73>
     126:	00 00       	nop
     128:	6e c5       	rjmp	.+2780   	; 0xc06 <__vector_74>
     12a:	00 00       	nop
     12c:	8e c1       	rjmp	.+796    	; 0x44a <__bad_interrupt>
     12e:	00 00       	nop
     130:	56 c2       	rjmp	.+1196   	; 0x5de <__vector_76>
     132:	00 00       	nop
     134:	0c 94 74 09 	jmp	0x12e8	; 0x12e8 <__vector_77>
     138:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__vector_78>
     13c:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__vector_79>
     140:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__vector_80>
     144:	0c 94 54 0a 	jmp	0x14a8	; 0x14a8 <__vector_81>
     148:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__vector_82>
     14c:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__vector_83>
     150:	0c 94 fc 0a 	jmp	0x15f8	; 0x15f8 <__vector_84>
     154:	0c 94 34 0b 	jmp	0x1668	; 0x1668 <__vector_85>
     158:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__vector_86>
     15c:	76 c1       	rjmp	.+748    	; 0x44a <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 fd 19 	jmp	0x33fa	; 0x33fa <__vector_88>
     164:	72 c1       	rjmp	.+740    	; 0x44a <__bad_interrupt>
     166:	00 00       	nop
     168:	70 c1       	rjmp	.+736    	; 0x44a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	e2 c2       	rjmp	.+1476   	; 0x732 <__vector_91>
     16e:	00 00       	nop
     170:	6c c1       	rjmp	.+728    	; 0x44a <__bad_interrupt>
     172:	00 00       	nop
     174:	51 c3       	rjmp	.+1698   	; 0x818 <__vector_93>
     176:	00 00       	nop
     178:	68 c1       	rjmp	.+720    	; 0x44a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	66 c1       	rjmp	.+716    	; 0x44a <__bad_interrupt>
     17e:	00 00       	nop
     180:	64 c1       	rjmp	.+712    	; 0x44a <__bad_interrupt>
     182:	00 00       	nop
     184:	62 c1       	rjmp	.+708    	; 0x44a <__bad_interrupt>
     186:	00 00       	nop
     188:	60 c1       	rjmp	.+704    	; 0x44a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5e c1       	rjmp	.+700    	; 0x44a <__bad_interrupt>
     18e:	00 00       	nop
     190:	5c c1       	rjmp	.+696    	; 0x44a <__bad_interrupt>
     192:	00 00       	nop
     194:	5a c1       	rjmp	.+692    	; 0x44a <__bad_interrupt>
     196:	00 00       	nop
     198:	58 c1       	rjmp	.+688    	; 0x44a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	56 c1       	rjmp	.+684    	; 0x44a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	54 c1       	rjmp	.+680    	; 0x44a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	52 c1       	rjmp	.+676    	; 0x44a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	50 c1       	rjmp	.+672    	; 0x44a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	7c c2       	rjmp	.+1272   	; 0x6a6 <__vector_107>
     1ae:	00 00       	nop
     1b0:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__vector_108>
     1b4:	0c 94 0c 0e 	jmp	0x1c18	; 0x1c18 <__vector_109>
     1b8:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__vector_110>
     1bc:	0c 94 7c 0e 	jmp	0x1cf8	; 0x1cf8 <__vector_111>
     1c0:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__vector_112>
     1c4:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <__vector_113>
     1c8:	0c 94 24 0f 	jmp	0x1e48	; 0x1e48 <__vector_114>
     1cc:	0c 94 5c 0f 	jmp	0x1eb8	; 0x1eb8 <__vector_115>
     1d0:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__vector_116>
     1d4:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__vector_117>
     1d8:	38 c1       	rjmp	.+624    	; 0x44a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	36 c1       	rjmp	.+620    	; 0x44a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	34 c1       	rjmp	.+616    	; 0x44a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	32 c1       	rjmp	.+612    	; 0x44a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	30 c1       	rjmp	.+608    	; 0x44a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2e c1       	rjmp	.+604    	; 0x44a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2c c1       	rjmp	.+600    	; 0x44a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	2a c1       	rjmp	.+596    	; 0x44a <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	28 c1       	rjmp	.+592    	; 0x44a <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	2f 1a       	sub	r2, r31
     1fe:	3d 1a       	sub	r3, r29
     200:	3d 1a       	sub	r3, r29
     202:	3d 1a       	sub	r3, r29
     204:	3d 1a       	sub	r3, r29
     206:	34 1a       	sub	r3, r20
     208:	3d 1a       	sub	r3, r29
     20a:	38 1a       	sub	r3, r24
     20c:	3a 1a       	sub	r3, r26
     20e:	36 1a       	sub	r3, r22
     210:	3d 1a       	sub	r3, r29
     212:	3d 1a       	sub	r3, r29
     214:	3d 1a       	sub	r3, r29
     216:	3d 1a       	sub	r3, r29
     218:	3d 1a       	sub	r3, r29
     21a:	3d 1a       	sub	r3, r29
     21c:	3d 1a       	sub	r3, r29
     21e:	3d 1a       	sub	r3, r29
     220:	3d 1a       	sub	r3, r29
     222:	3d 1a       	sub	r3, r29
     224:	3d 1a       	sub	r3, r29
     226:	3d 1a       	sub	r3, r29
     228:	3d 1a       	sub	r3, r29
     22a:	3d 1a       	sub	r3, r29
     22c:	3d 1a       	sub	r3, r29
     22e:	3d 1a       	sub	r3, r29
     230:	3d 1a       	sub	r3, r29
     232:	3d 1a       	sub	r3, r29
     234:	3d 1a       	sub	r3, r29
     236:	3d 1a       	sub	r3, r29
     238:	3d 1a       	sub	r3, r29
     23a:	3d 1a       	sub	r3, r29
     23c:	3d 1a       	sub	r3, r29
     23e:	3d 1a       	sub	r3, r29
     240:	3d 1a       	sub	r3, r29
     242:	3d 1a       	sub	r3, r29
     244:	3d 1a       	sub	r3, r29
     246:	3d 1a       	sub	r3, r29
     248:	3d 1a       	sub	r3, r29
     24a:	3d 1a       	sub	r3, r29
     24c:	3d 1a       	sub	r3, r29
     24e:	3d 1a       	sub	r3, r29
     250:	3d 1a       	sub	r3, r29
     252:	3d 1a       	sub	r3, r29
     254:	3d 1a       	sub	r3, r29
     256:	3d 1a       	sub	r3, r29
     258:	3d 1a       	sub	r3, r29
     25a:	3d 1a       	sub	r3, r29
     25c:	3d 1a       	sub	r3, r29
     25e:	3d 1a       	sub	r3, r29
     260:	3d 1a       	sub	r3, r29
     262:	3d 1a       	sub	r3, r29
     264:	3d 1a       	sub	r3, r29
     266:	3d 1a       	sub	r3, r29
     268:	3d 1a       	sub	r3, r29
     26a:	3d 1a       	sub	r3, r29
     26c:	3d 1a       	sub	r3, r29
     26e:	3d 1a       	sub	r3, r29
     270:	3d 1a       	sub	r3, r29
     272:	3d 1a       	sub	r3, r29
     274:	3d 1a       	sub	r3, r29
     276:	32 1a       	sub	r3, r18
     278:	3c 1a       	sub	r3, r28
     27a:	08 00       	.word	0x0008	; ????
     27c:	00 00       	nop
     27e:	be 92       	st	-X, r11
     280:	24 49       	sbci	r18, 0x94	; 148
     282:	12 3e       	cpi	r17, 0xE2	; 226
     284:	ab aa       	std	Y+51, r10	; 0x33
     286:	aa 2a       	or	r10, r26
     288:	be cd       	rjmp	.-1156   	; 0xfffffe06 <__eeprom_end+0xff7efe06>
     28a:	cc cc       	rjmp	.-1640   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28c:	4c 3e       	cpi	r20, 0xEC	; 236
     28e:	00 00       	nop
     290:	00 80       	ld	r0, Z
     292:	be ab       	std	Y+54, r27	; 0x36
     294:	aa aa       	std	Y+50, r10	; 0x32
     296:	aa 3e       	cpi	r26, 0xEA	; 234
     298:	00 00       	nop
     29a:	00 00       	nop
     29c:	bf 00       	.word	0x00bf	; ????
     29e:	00 00       	nop
     2a0:	80 3f       	cpi	r24, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	00 08       	sbc	r0, r0
     2a8:	41 78       	andi	r20, 0x81	; 129
     2aa:	d3 bb       	out	0x13, r29	; 19
     2ac:	43 87       	std	Z+11, r20	; 0x0b
     2ae:	d1 13       	cpse	r29, r17
     2b0:	3d 19       	sub	r19, r13
     2b2:	0e 3c       	cpi	r16, 0xCE	; 206
     2b4:	c3 bd       	out	0x23, r28	; 35
     2b6:	42 82       	std	Z+2, r4	; 0x02
     2b8:	ad 2b       	or	r26, r29
     2ba:	3e 68       	ori	r19, 0x8E	; 142
     2bc:	ec 82       	std	Y+4, r14	; 0x04
     2be:	76 be       	out	0x36, r7	; 54
     2c0:	d9 8f       	std	Y+25, r29	; 0x19
     2c2:	e1 a9       	ldd	r30, Z+49	; 0x31
     2c4:	3e 4c       	sbci	r19, 0xCE	; 206
     2c6:	80 ef       	ldi	r24, 0xF0	; 240
     2c8:	ff be       	out	0x3f, r15	; 63
     2ca:	01 c4       	rjmp	.+2050   	; 0xace <__vector_71+0x36>
     2cc:	ff 7f       	andi	r31, 0xFF	; 255
     2ce:	3f 00       	.word	0x003f	; ????
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	07 63       	ori	r16, 0x37	; 55
     2d6:	42 36       	cpi	r20, 0x62	; 98
     2d8:	b7 9b       	sbis	0x16, 7	; 22
     2da:	d8 a7       	std	Y+40, r29	; 0x28
     2dc:	1a 39       	cpi	r17, 0x9A	; 154
     2de:	68 56       	subi	r22, 0x68	; 104
     2e0:	18 ae       	std	Y+56, r1	; 0x38
     2e2:	ba ab       	std	Y+50, r27	; 0x32
     2e4:	55 8c       	ldd	r5, Z+29	; 0x1d
     2e6:	1d 3c       	cpi	r17, 0xCD	; 205
     2e8:	b7 cc       	rjmp	.-1682   	; 0xfffffc58 <__eeprom_end+0xff7efc58>
     2ea:	57 63       	ori	r21, 0x37	; 55
     2ec:	bd 6d       	ori	r27, 0xDD	; 221
     2ee:	ed fd       	.word	0xfded	; ????
     2f0:	75 3e       	cpi	r23, 0xE5	; 229
     2f2:	f6 17       	cp	r31, r22
     2f4:	72 31       	cpi	r23, 0x12	; 18
     2f6:	bf 00       	.word	0x00bf	; ????
     2f8:	00 00       	nop
     2fa:	80 3f       	cpi	r24, 0xF0	; 240

000002fc <__trampolines_end>:
     2fc:	6e 61       	ori	r22, 0x1E	; 30
     2fe:	6e 00       	.word	0x006e	; ????

00000300 <__c.2332>:
     300:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     310:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     320:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     330:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     340:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     350:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     360:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     370:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     380:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     390:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     3a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     3b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     3c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003fe <__ctors_end>:
     3fe:	11 24       	eor	r1, r1
     400:	1f be       	out	0x3f, r1	; 63
     402:	cf ef       	ldi	r28, 0xFF	; 255
     404:	cd bf       	out	0x3d, r28	; 61
     406:	df e3       	ldi	r29, 0x3F	; 63
     408:	de bf       	out	0x3e, r29	; 62
     40a:	00 e0       	ldi	r16, 0x00	; 0
     40c:	0c bf       	out	0x3c, r16	; 60
     40e:	18 be       	out	0x38, r1	; 56
     410:	19 be       	out	0x39, r1	; 57
     412:	1a be       	out	0x3a, r1	; 58
     414:	1b be       	out	0x3b, r1	; 59

00000416 <__do_copy_data>:
     416:	10 e2       	ldi	r17, 0x20	; 32
     418:	a0 e0       	ldi	r26, 0x00	; 0
     41a:	b0 e2       	ldi	r27, 0x20	; 32
     41c:	ea ed       	ldi	r30, 0xDA	; 218
     41e:	f0 e5       	ldi	r31, 0x50	; 80
     420:	00 e0       	ldi	r16, 0x00	; 0
     422:	0b bf       	out	0x3b, r16	; 59
     424:	02 c0       	rjmp	.+4      	; 0x42a <__do_copy_data+0x14>
     426:	07 90       	elpm	r0, Z+
     428:	0d 92       	st	X+, r0
     42a:	a2 37       	cpi	r26, 0x72	; 114
     42c:	b1 07       	cpc	r27, r17
     42e:	d9 f7       	brne	.-10     	; 0x426 <__do_copy_data+0x10>
     430:	1b be       	out	0x3b, r1	; 59

00000432 <__do_clear_bss>:
     432:	23 e2       	ldi	r18, 0x23	; 35
     434:	a2 e7       	ldi	r26, 0x72	; 114
     436:	b0 e2       	ldi	r27, 0x20	; 32
     438:	01 c0       	rjmp	.+2      	; 0x43c <.do_clear_bss_start>

0000043a <.do_clear_bss_loop>:
     43a:	1d 92       	st	X+, r1

0000043c <.do_clear_bss_start>:
     43c:	a3 3a       	cpi	r26, 0xA3	; 163
     43e:	b2 07       	cpc	r27, r18
     440:	e1 f7       	brne	.-8      	; 0x43a <.do_clear_bss_loop>
     442:	0e 94 bf 1b 	call	0x377e	; 0x377e <main>
     446:	0c 94 6b 28 	jmp	0x50d6	; 0x50d6 <_exit>

0000044a <__bad_interrupt>:
     44a:	da cd       	rjmp	.-1100   	; 0x0 <__vectors>

0000044c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     450:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <__data_end>
     454:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <__data_end+0x1>
     458:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     45a:	83 ff       	sbrs	r24, 3
     45c:	08 c0       	rjmp	.+16     	; 0x46e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     45e:	88 60       	ori	r24, 0x08	; 8
     460:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     462:	83 e0       	ldi	r24, 0x03	; 3
     464:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     466:	86 ef       	ldi	r24, 0xF6	; 246
     468:	80 93 7c 20 	sts	0x207C, r24	; 0x80207c <__data_end+0xa>
     46c:	83 c0       	rjmp	.+262    	; 0x574 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     46e:	98 2f       	mov	r25, r24
     470:	94 71       	andi	r25, 0x14	; 20
     472:	31 f0       	breq	.+12     	; 0x480 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	80 93 7c 20 	sts	0x207C, r24	; 0x80207c <__data_end+0xa>
     47e:	7a c0       	rjmp	.+244    	; 0x574 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     480:	86 ff       	sbrs	r24, 6
     482:	43 c0       	rjmp	.+134    	; 0x50a <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     484:	c2 e7       	ldi	r28, 0x72	; 114
     486:	d0 e2       	ldi	r29, 0x20	; 32
     488:	aa 81       	ldd	r26, Y+2	; 0x02
     48a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     48c:	8c 81       	ldd	r24, Y+4	; 0x04
     48e:	9d 81       	ldd	r25, Y+5	; 0x05
     490:	14 96       	adiw	r26, 0x04	; 4
     492:	2d 91       	ld	r18, X+
     494:	3c 91       	ld	r19, X
     496:	15 97       	sbiw	r26, 0x05	; 5
     498:	82 17       	cp	r24, r18
     49a:	93 07       	cpc	r25, r19
     49c:	6c f4       	brge	.+26     	; 0x4b8 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     49e:	9c 01       	movw	r18, r24
     4a0:	2f 5f       	subi	r18, 0xFF	; 255
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	20 93 76 20 	sts	0x2076, r18	; 0x802076 <__data_end+0x4>
     4a8:	30 93 77 20 	sts	0x2077, r19	; 0x802077 <__data_end+0x5>
     4ac:	a8 0f       	add	r26, r24
     4ae:	b9 1f       	adc	r27, r25
     4b0:	11 96       	adiw	r26, 0x01	; 1
     4b2:	8c 91       	ld	r24, X
     4b4:	87 83       	std	Z+7, r24	; 0x07
     4b6:	5e c0       	rjmp	.+188    	; 0x574 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     4b8:	80 91 78 20 	lds	r24, 0x2078	; 0x802078 <__data_end+0x6>
     4bc:	90 91 79 20 	lds	r25, 0x2079	; 0x802079 <__data_end+0x7>
     4c0:	18 96       	adiw	r26, 0x08	; 8
     4c2:	2d 91       	ld	r18, X+
     4c4:	3c 91       	ld	r19, X
     4c6:	19 97       	sbiw	r26, 0x09	; 9
     4c8:	82 17       	cp	r24, r18
     4ca:	93 07       	cpc	r25, r19
     4cc:	c8 f4       	brcc	.+50     	; 0x500 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     4ce:	20 91 7a 20 	lds	r18, 0x207A	; 0x80207a <__data_end+0x8>
     4d2:	22 23       	and	r18, r18
     4d4:	21 f0       	breq	.+8      	; 0x4de <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     4d6:	86 81       	ldd	r24, Z+6	; 0x06
     4d8:	81 60       	ori	r24, 0x01	; 1
     4da:	86 83       	std	Z+6, r24	; 0x06
     4dc:	4b c0       	rjmp	.+150    	; 0x574 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     4de:	16 96       	adiw	r26, 0x06	; 6
     4e0:	2d 91       	ld	r18, X+
     4e2:	3c 91       	ld	r19, X
     4e4:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     4e6:	ac 01       	movw	r20, r24
     4e8:	4f 5f       	subi	r20, 0xFF	; 255
     4ea:	5f 4f       	sbci	r21, 0xFF	; 255
     4ec:	40 93 78 20 	sts	0x2078, r20	; 0x802078 <__data_end+0x6>
     4f0:	50 93 79 20 	sts	0x2079, r21	; 0x802079 <__data_end+0x7>
     4f4:	d9 01       	movw	r26, r18
     4f6:	a8 0f       	add	r26, r24
     4f8:	b9 1f       	adc	r27, r25
     4fa:	8c 91       	ld	r24, X
     4fc:	87 83       	std	Z+7, r24	; 0x07
     4fe:	3a c0       	rjmp	.+116    	; 0x574 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     500:	83 e0       	ldi	r24, 0x03	; 3
     502:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     504:	10 92 7c 20 	sts	0x207C, r1	; 0x80207c <__data_end+0xa>
     508:	35 c0       	rjmp	.+106    	; 0x574 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     50a:	88 23       	and	r24, r24
     50c:	84 f5       	brge	.+96     	; 0x56e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     50e:	a2 e7       	ldi	r26, 0x72	; 114
     510:	b0 e2       	ldi	r27, 0x20	; 32
     512:	12 96       	adiw	r26, 0x02	; 2
     514:	cd 91       	ld	r28, X+
     516:	dc 91       	ld	r29, X
     518:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     51a:	16 96       	adiw	r26, 0x06	; 6
     51c:	8d 91       	ld	r24, X+
     51e:	9c 91       	ld	r25, X
     520:	17 97       	sbiw	r26, 0x07	; 7
     522:	28 85       	ldd	r18, Y+8	; 0x08
     524:	39 85       	ldd	r19, Y+9	; 0x09
     526:	82 17       	cp	r24, r18
     528:	93 07       	cpc	r25, r19
     52a:	d8 f4       	brcc	.+54     	; 0x562 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     52c:	6e 81       	ldd	r22, Y+6	; 0x06
     52e:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     530:	9c 01       	movw	r18, r24
     532:	2f 5f       	subi	r18, 0xFF	; 255
     534:	3f 4f       	sbci	r19, 0xFF	; 255
     536:	20 93 78 20 	sts	0x2078, r18	; 0x802078 <__data_end+0x6>
     53a:	30 93 79 20 	sts	0x2079, r19	; 0x802079 <__data_end+0x7>
     53e:	47 81       	ldd	r20, Z+7	; 0x07
     540:	db 01       	movw	r26, r22
     542:	a8 0f       	add	r26, r24
     544:	b9 1f       	adc	r27, r25
     546:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     548:	88 85       	ldd	r24, Y+8	; 0x08
     54a:	99 85       	ldd	r25, Y+9	; 0x09
     54c:	28 17       	cp	r18, r24
     54e:	39 07       	cpc	r19, r25
     550:	18 f4       	brcc	.+6      	; 0x558 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	83 83       	std	Z+3, r24	; 0x03
     556:	0e c0       	rjmp	.+28     	; 0x574 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     558:	87 e0       	ldi	r24, 0x07	; 7
     55a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     55c:	10 92 7c 20 	sts	0x207C, r1	; 0x80207c <__data_end+0xa>
     560:	09 c0       	rjmp	.+18     	; 0x574 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     566:	89 ef       	ldi	r24, 0xF9	; 249
     568:	80 93 7c 20 	sts	0x207C, r24	; 0x80207c <__data_end+0xa>
     56c:	03 c0       	rjmp	.+6      	; 0x574 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     56e:	8b ef       	ldi	r24, 0xFB	; 251
     570:	80 93 7c 20 	sts	0x207C, r24	; 0x80207c <__data_end+0xa>
	}
}
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     57a:	1f 92       	push	r1
     57c:	0f 92       	push	r0
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	0f 92       	push	r0
     582:	11 24       	eor	r1, r1
     584:	08 b6       	in	r0, 0x38	; 56
     586:	0f 92       	push	r0
     588:	18 be       	out	0x38, r1	; 56
     58a:	09 b6       	in	r0, 0x39	; 57
     58c:	0f 92       	push	r0
     58e:	19 be       	out	0x39, r1	; 57
     590:	0b b6       	in	r0, 0x3b	; 59
     592:	0f 92       	push	r0
     594:	1b be       	out	0x3b, r1	; 59
     596:	2f 93       	push	r18
     598:	3f 93       	push	r19
     59a:	4f 93       	push	r20
     59c:	5f 93       	push	r21
     59e:	6f 93       	push	r22
     5a0:	7f 93       	push	r23
     5a2:	8f 93       	push	r24
     5a4:	9f 93       	push	r25
     5a6:	af 93       	push	r26
     5a8:	bf 93       	push	r27
     5aa:	ef 93       	push	r30
     5ac:	ff 93       	push	r31
     5ae:	4e df       	rcall	.-356    	; 0x44c <twim_interrupt_handler>
     5b0:	ff 91       	pop	r31
     5b2:	ef 91       	pop	r30
     5b4:	bf 91       	pop	r27
     5b6:	af 91       	pop	r26
     5b8:	9f 91       	pop	r25
     5ba:	8f 91       	pop	r24
     5bc:	7f 91       	pop	r23
     5be:	6f 91       	pop	r22
     5c0:	5f 91       	pop	r21
     5c2:	4f 91       	pop	r20
     5c4:	3f 91       	pop	r19
     5c6:	2f 91       	pop	r18
     5c8:	0f 90       	pop	r0
     5ca:	0b be       	out	0x3b, r0	; 59
     5cc:	0f 90       	pop	r0
     5ce:	09 be       	out	0x39, r0	; 57
     5d0:	0f 90       	pop	r0
     5d2:	08 be       	out	0x38, r0	; 56
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	0f 90       	pop	r0
     5da:	1f 90       	pop	r1
     5dc:	18 95       	reti

000005de <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     5de:	1f 92       	push	r1
     5e0:	0f 92       	push	r0
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	08 b6       	in	r0, 0x38	; 56
     5ea:	0f 92       	push	r0
     5ec:	18 be       	out	0x38, r1	; 56
     5ee:	09 b6       	in	r0, 0x39	; 57
     5f0:	0f 92       	push	r0
     5f2:	19 be       	out	0x39, r1	; 57
     5f4:	0b b6       	in	r0, 0x3b	; 59
     5f6:	0f 92       	push	r0
     5f8:	1b be       	out	0x3b, r1	; 59
     5fa:	2f 93       	push	r18
     5fc:	3f 93       	push	r19
     5fe:	4f 93       	push	r20
     600:	5f 93       	push	r21
     602:	6f 93       	push	r22
     604:	7f 93       	push	r23
     606:	8f 93       	push	r24
     608:	9f 93       	push	r25
     60a:	af 93       	push	r26
     60c:	bf 93       	push	r27
     60e:	ef 93       	push	r30
     610:	ff 93       	push	r31
     612:	1c df       	rcall	.-456    	; 0x44c <twim_interrupt_handler>
     614:	ff 91       	pop	r31
     616:	ef 91       	pop	r30
     618:	bf 91       	pop	r27
     61a:	af 91       	pop	r26
     61c:	9f 91       	pop	r25
     61e:	8f 91       	pop	r24
     620:	7f 91       	pop	r23
     622:	6f 91       	pop	r22
     624:	5f 91       	pop	r21
     626:	4f 91       	pop	r20
     628:	3f 91       	pop	r19
     62a:	2f 91       	pop	r18
     62c:	0f 90       	pop	r0
     62e:	0b be       	out	0x3b, r0	; 59
     630:	0f 90       	pop	r0
     632:	09 be       	out	0x39, r0	; 57
     634:	0f 90       	pop	r0
     636:	08 be       	out	0x38, r0	; 56
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     642:	1f 92       	push	r1
     644:	0f 92       	push	r0
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	0f 92       	push	r0
     64a:	11 24       	eor	r1, r1
     64c:	08 b6       	in	r0, 0x38	; 56
     64e:	0f 92       	push	r0
     650:	18 be       	out	0x38, r1	; 56
     652:	09 b6       	in	r0, 0x39	; 57
     654:	0f 92       	push	r0
     656:	19 be       	out	0x39, r1	; 57
     658:	0b b6       	in	r0, 0x3b	; 59
     65a:	0f 92       	push	r0
     65c:	1b be       	out	0x3b, r1	; 59
     65e:	2f 93       	push	r18
     660:	3f 93       	push	r19
     662:	4f 93       	push	r20
     664:	5f 93       	push	r21
     666:	6f 93       	push	r22
     668:	7f 93       	push	r23
     66a:	8f 93       	push	r24
     66c:	9f 93       	push	r25
     66e:	af 93       	push	r26
     670:	bf 93       	push	r27
     672:	ef 93       	push	r30
     674:	ff 93       	push	r31
     676:	ea de       	rcall	.-556    	; 0x44c <twim_interrupt_handler>
     678:	ff 91       	pop	r31
     67a:	ef 91       	pop	r30
     67c:	bf 91       	pop	r27
     67e:	af 91       	pop	r26
     680:	9f 91       	pop	r25
     682:	8f 91       	pop	r24
     684:	7f 91       	pop	r23
     686:	6f 91       	pop	r22
     688:	5f 91       	pop	r21
     68a:	4f 91       	pop	r20
     68c:	3f 91       	pop	r19
     68e:	2f 91       	pop	r18
     690:	0f 90       	pop	r0
     692:	0b be       	out	0x3b, r0	; 59
     694:	0f 90       	pop	r0
     696:	09 be       	out	0x39, r0	; 57
     698:	0f 90       	pop	r0
     69a:	08 be       	out	0x38, r0	; 56
     69c:	0f 90       	pop	r0
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	0f 90       	pop	r0
     6a2:	1f 90       	pop	r1
     6a4:	18 95       	reti

000006a6 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     6a6:	1f 92       	push	r1
     6a8:	0f 92       	push	r0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
     6b0:	08 b6       	in	r0, 0x38	; 56
     6b2:	0f 92       	push	r0
     6b4:	18 be       	out	0x38, r1	; 56
     6b6:	09 b6       	in	r0, 0x39	; 57
     6b8:	0f 92       	push	r0
     6ba:	19 be       	out	0x39, r1	; 57
     6bc:	0b b6       	in	r0, 0x3b	; 59
     6be:	0f 92       	push	r0
     6c0:	1b be       	out	0x3b, r1	; 59
     6c2:	2f 93       	push	r18
     6c4:	3f 93       	push	r19
     6c6:	4f 93       	push	r20
     6c8:	5f 93       	push	r21
     6ca:	6f 93       	push	r22
     6cc:	7f 93       	push	r23
     6ce:	8f 93       	push	r24
     6d0:	9f 93       	push	r25
     6d2:	af 93       	push	r26
     6d4:	bf 93       	push	r27
     6d6:	ef 93       	push	r30
     6d8:	ff 93       	push	r31
     6da:	b8 de       	rcall	.-656    	; 0x44c <twim_interrupt_handler>
     6dc:	ff 91       	pop	r31
     6de:	ef 91       	pop	r30
     6e0:	bf 91       	pop	r27
     6e2:	af 91       	pop	r26
     6e4:	9f 91       	pop	r25
     6e6:	8f 91       	pop	r24
     6e8:	7f 91       	pop	r23
     6ea:	6f 91       	pop	r22
     6ec:	5f 91       	pop	r21
     6ee:	4f 91       	pop	r20
     6f0:	3f 91       	pop	r19
     6f2:	2f 91       	pop	r18
     6f4:	0f 90       	pop	r0
     6f6:	0b be       	out	0x3b, r0	; 59
     6f8:	0f 90       	pop	r0
     6fa:	09 be       	out	0x39, r0	; 57
     6fc:	0f 90       	pop	r0
     6fe:	08 be       	out	0x38, r0	; 56
     700:	0f 90       	pop	r0
     702:	0f be       	out	0x3f, r0	; 63
     704:	0f 90       	pop	r0
     706:	1f 90       	pop	r1
     708:	18 95       	reti

0000070a <wdt_reset_mcu>:
uint8_t temp;
	/*
	 * WDT enabled (minimum timeout period for max. security)
	 */
	temp = WDT_PER_8CLK_gc | (1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     70a:	63 e0       	ldi	r22, 0x03	; 3
     70c:	80 e8       	ldi	r24, 0x80	; 128
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	ab d3       	rcall	.+1878   	; 0xe68 <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
     712:	e0 e8       	ldi	r30, 0x80	; 128
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	82 81       	ldd	r24, Z+2	; 0x02
     718:	80 fd       	sbrc	r24, 0
     71a:	fd cf       	rjmp	.-6      	; 0x716 <wdt_reset_mcu+0xc>
	wdt_wait_while_busy();
	/*
	 * WDT enabled (maximum window period for max. security)
	 */
	temp = WDT_WPER_8KCLK_gc | (1 << WDT_WEN_bp) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
     71c:	6b e2       	ldi	r22, 0x2B	; 43
     71e:	81 e8       	ldi	r24, 0x81	; 129
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	a2 d3       	rcall	.+1860   	; 0xe68 <ccp_write_io>
     724:	e0 e8       	ldi	r30, 0x80	; 128
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	82 81       	ldd	r24, Z+2	; 0x02
     72a:	80 fd       	sbrc	r24, 0
     72c:	fd cf       	rjmp	.-6      	; 0x728 <wdt_reset_mcu+0x1e>
	wdt_wait_while_busy();
	/*
	 * WDT Reset during window => WDT generates an Hard Reset.
	 */
	wdt_reset();
     72e:	a8 95       	wdr
     730:	ff cf       	rjmp	.-2      	; 0x730 <wdt_reset_mcu+0x26>

00000732 <__vector_91>:
	rbu8_init(&gps_receive_buffer, RAW_gps_receive_buffer, GPS_RECEIVE_BUFFER_SIZE);
	rbu8_init(&gps_send_buffer, RAW_gps_send_buffer, GPS_TRANSMIT_BUFFER_SIZE);
}

ISR (GPS_RECEIVE_INTERRUPT_VECTOR)
{
     732:	1f 92       	push	r1
     734:	0f 92       	push	r0
     736:	0f b6       	in	r0, 0x3f	; 63
     738:	0f 92       	push	r0
     73a:	11 24       	eor	r1, r1
     73c:	08 b6       	in	r0, 0x38	; 56
     73e:	0f 92       	push	r0
     740:	18 be       	out	0x38, r1	; 56
     742:	09 b6       	in	r0, 0x39	; 57
     744:	0f 92       	push	r0
     746:	19 be       	out	0x39, r1	; 57
     748:	0b b6       	in	r0, 0x3b	; 59
     74a:	0f 92       	push	r0
     74c:	1b be       	out	0x3b, r1	; 59
     74e:	2f 93       	push	r18
     750:	3f 93       	push	r19
     752:	4f 93       	push	r20
     754:	5f 93       	push	r21
     756:	6f 93       	push	r22
     758:	7f 93       	push	r23
     75a:	8f 93       	push	r24
     75c:	9f 93       	push	r25
     75e:	af 93       	push	r26
     760:	bf 93       	push	r27
     762:	cf 93       	push	r28
     764:	ef 93       	push	r30
     766:	ff 93       	push	r31
		It should not have any code that waits for anything. Examples include
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	uint8_t c = GPS_USART.DATA;
     768:	c0 91 b0 09 	lds	r28, 0x09B0	; 0x8009b0 <__TEXT_REGION_LENGTH__+0x7009b0>
	printf("%c", c);
     76c:	8c 2f       	mov	r24, r28
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <putchar>
	//putchar(c);
	//putchar(c);
	if (current_sentence == SENTENCE_GPGGA)
     774:	80 91 de 21 	lds	r24, 0x21DE	; 0x8021de <current_sentence>
     778:	81 30       	cpi	r24, 0x01	; 1
     77a:	51 f4       	brne	.+20     	; 0x790 <__vector_91+0x5e>
	{
		gpgga_buff[gpgga_index] = c;
     77c:	90 91 7c 23 	lds	r25, 0x237C	; 0x80237c <gpgga_index>
     780:	e9 2f       	mov	r30, r25
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	e9 5d       	subi	r30, 0xD9	; 217
     786:	fc 4d       	sbci	r31, 0xDC	; 220
     788:	c0 83       	st	Z, r28
		gpgga_index++;
     78a:	9f 5f       	subi	r25, 0xFF	; 255
     78c:	90 93 7c 23 	sts	0x237C, r25	; 0x80237c <gpgga_index>
		//printf("GPGGA %i = %i", gpgga_index, gpgga_buff[gpgga_index]);
	}	
	
	if (c == '\n')
     790:	ca 30       	cpi	r28, 0x0A	; 10
     792:	39 f4       	brne	.+14     	; 0x7a2 <__vector_91+0x70>
	{
		last_finished = current_sentence;
     794:	80 93 87 21 	sts	0x2187, r24	; 0x802187 <last_finished>
		current_sentence = SENTENCE_NONE;
     798:	10 92 de 21 	sts	0x21DE, r1	; 0x8021de <current_sentence>
		dollar_counter = 0;
     79c:	10 92 7e 21 	sts	0x217E, r1	; 0x80217e <dollar_counter>
     7a0:	23 c0       	rjmp	.+70     	; 0x7e8 <__vector_91+0xb6>
	}
	else if (c == '$' && current_sentence == SENTENCE_NONE)
     7a2:	c4 32       	cpi	r28, 0x24	; 36
     7a4:	11 f4       	brne	.+4      	; 0x7aa <__vector_91+0x78>
     7a6:	88 23       	and	r24, r24
     7a8:	d9 f0       	breq	.+54     	; 0x7e0 <__vector_91+0xae>
	{
		dollar_counter = 1;
	}
	
	if (dollar_counter > 0)
     7aa:	80 91 7e 21 	lds	r24, 0x217E	; 0x80217e <dollar_counter>
     7ae:	88 23       	and	r24, r24
     7b0:	d9 f0       	breq	.+54     	; 0x7e8 <__vector_91+0xb6>
	{
		if (dollar_counter == 5 && c == 'G' )
     7b2:	85 30       	cpi	r24, 0x05	; 5
     7b4:	b1 f4       	brne	.+44     	; 0x7e2 <__vector_91+0xb0>
     7b6:	c7 34       	cpi	r28, 0x47	; 71
     7b8:	a1 f4       	brne	.+40     	; 0x7e2 <__vector_91+0xb0>
		{
			current_sentence= SENTENCE_GPGGA;
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	80 93 de 21 	sts	0x21DE, r24	; 0x8021de <current_sentence>
			memcpy(gpgga_buff, "$GPGG", 5);
     7c0:	85 e0       	ldi	r24, 0x05	; 5
     7c2:	e0 e2       	ldi	r30, 0x20	; 32
     7c4:	f0 e2       	ldi	r31, 0x20	; 32
     7c6:	a7 e2       	ldi	r26, 0x27	; 39
     7c8:	b3 e2       	ldi	r27, 0x23	; 35
     7ca:	01 90       	ld	r0, Z+
     7cc:	0d 92       	st	X+, r0
     7ce:	8a 95       	dec	r24
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <__vector_91+0x98>
			gpgga_index = 5;
     7d2:	85 e0       	ldi	r24, 0x05	; 5
     7d4:	80 93 7c 23 	sts	0x237C, r24	; 0x80237c <gpgga_index>
			dollar_counter++;
     7d8:	86 e0       	ldi	r24, 0x06	; 6
     7da:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <dollar_counter>
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__vector_91+0xb6>
	else if (c == '$' && current_sentence == SENTENCE_NONE)
	{
		dollar_counter = 1;
	}
	
	if (dollar_counter > 0)
     7e0:	81 e0       	ldi	r24, 0x01	; 1
			gpgga_index = 5;
			dollar_counter++;
		}
		else
		{
			dollar_counter++;
     7e2:	8f 5f       	subi	r24, 0xFF	; 255
     7e4:	80 93 7e 21 	sts	0x217E, r24	; 0x80217e <dollar_counter>
		}
	}
	//rbu8_write(&gps_receive_buffer, &(GPS_USART.DATA), 1);
}
     7e8:	ff 91       	pop	r31
     7ea:	ef 91       	pop	r30
     7ec:	cf 91       	pop	r28
     7ee:	bf 91       	pop	r27
     7f0:	af 91       	pop	r26
     7f2:	9f 91       	pop	r25
     7f4:	8f 91       	pop	r24
     7f6:	7f 91       	pop	r23
     7f8:	6f 91       	pop	r22
     7fa:	5f 91       	pop	r21
     7fc:	4f 91       	pop	r20
     7fe:	3f 91       	pop	r19
     800:	2f 91       	pop	r18
     802:	0f 90       	pop	r0
     804:	0b be       	out	0x3b, r0	; 59
     806:	0f 90       	pop	r0
     808:	09 be       	out	0x39, r0	; 57
     80a:	0f 90       	pop	r0
     80c:	08 be       	out	0x38, r0	; 56
     80e:	0f 90       	pop	r0
     810:	0f be       	out	0x3f, r0	; 63
     812:	0f 90       	pop	r0
     814:	1f 90       	pop	r1
     816:	18 95       	reti

00000818 <__vector_93>:

ISR (GPS_SEND_INTERRUPT_VECTOR)
{
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	08 b6       	in	r0, 0x38	; 56
     824:	0f 92       	push	r0
     826:	18 be       	out	0x38, r1	; 56
     828:	09 b6       	in	r0, 0x39	; 57
     82a:	0f 92       	push	r0
     82c:	19 be       	out	0x39, r1	; 57
     82e:	0b b6       	in	r0, 0x3b	; 59
     830:	0f 92       	push	r0
     832:	1b be       	out	0x3b, r1	; 59
     834:	2f 93       	push	r18
     836:	3f 93       	push	r19
     838:	4f 93       	push	r20
     83a:	5f 93       	push	r21
     83c:	6f 93       	push	r22
     83e:	7f 93       	push	r23
     840:	8f 93       	push	r24
     842:	9f 93       	push	r25
     844:	af 93       	push	r26
     846:	bf 93       	push	r27
     848:	ef 93       	push	r30
     84a:	ff 93       	push	r31
			* printf
			* while (!(SPIC.STATUS >> 7));
		Essentially, it needs to run fast. This can be called as many as 25,000 times per second, and the cansat has other stuff to do
	*/
	
  rbu8_read(&gps_send_buffer, &(GPS_USART.DATA), 1);
     84c:	41 e0       	ldi	r20, 0x01	; 1
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	60 eb       	ldi	r22, 0xB0	; 176
     852:	79 e0       	ldi	r23, 0x09	; 9
     854:	8f e1       	ldi	r24, 0x1F	; 31
     856:	93 e2       	ldi	r25, 0x23	; 35
     858:	2e d0       	rcall	.+92     	; 0x8b6 <rbu8_read>
  rbu8_delete_oldest(&gps_send_buffer, 1);
     85a:	61 e0       	ldi	r22, 0x01	; 1
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	8f e1       	ldi	r24, 0x1F	; 31
     860:	93 e2       	ldi	r25, 0x23	; 35
     862:	79 d0       	rcall	.+242    	; 0x956 <rbu8_delete_oldest>
     864:	ff 91       	pop	r31
     866:	ef 91       	pop	r30
     868:	bf 91       	pop	r27
     86a:	af 91       	pop	r26
     86c:	9f 91       	pop	r25
     86e:	8f 91       	pop	r24
     870:	7f 91       	pop	r23
     872:	6f 91       	pop	r22
     874:	5f 91       	pop	r21
     876:	4f 91       	pop	r20
     878:	3f 91       	pop	r19
     87a:	2f 91       	pop	r18
     87c:	0f 90       	pop	r0
     87e:	0b be       	out	0x3b, r0	; 59
     880:	0f 90       	pop	r0
     882:	09 be       	out	0x39, r0	; 57
     884:	0f 90       	pop	r0
     886:	08 be       	out	0x38, r0	; 56
     888:	0f 90       	pop	r0
     88a:	0f be       	out	0x3f, r0	; 63
     88c:	0f 90       	pop	r0
     88e:	1f 90       	pop	r1
     890:	18 95       	reti

00000892 <rbu8_length>:
uint16_t rbu8_length(RingBufferu8_t* buffer)
/*	Returns the number of bytes of data currently stored in the RingBuffer pointed to by its argument
	The return value will always be greater than or equal to 0
	And less than or equal to buffer->array_length
*/
{
     892:	fc 01       	movw	r30, r24
	if (buffer->head >= buffer->tail)
     894:	82 81       	ldd	r24, Z+2	; 0x02
     896:	93 81       	ldd	r25, Z+3	; 0x03
     898:	44 81       	ldd	r20, Z+4	; 0x04
     89a:	55 81       	ldd	r21, Z+5	; 0x05
     89c:	84 17       	cp	r24, r20
     89e:	95 07       	cpc	r25, r21
     8a0:	18 f0       	brcs	.+6      	; 0x8a8 <rbu8_length+0x16>
	//We are not currently wrapped around the end of the buffer, so we are using the space between the head and tail
	{
		return buffer->head - buffer->tail;
     8a2:	84 1b       	sub	r24, r20
     8a4:	95 0b       	sbc	r25, r21
     8a6:	08 95       	ret
	}
	else
	//We have wrapped around the end of the buffer, so subtract the unused space between the head and tail
	{
		return buffer->array_length - (buffer->tail - buffer->head);
     8a8:	20 81       	ld	r18, Z
     8aa:	31 81       	ldd	r19, Z+1	; 0x01
     8ac:	82 0f       	add	r24, r18
     8ae:	93 1f       	adc	r25, r19
     8b0:	84 1b       	sub	r24, r20
     8b2:	95 0b       	sbc	r25, r21
	}
}
     8b4:	08 95       	ret

000008b6 <rbu8_read>:
	length - number of bytes to be read
	Return values
	* 0 - success
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
     8b6:	8f 92       	push	r8
     8b8:	9f 92       	push	r9
     8ba:	af 92       	push	r10
     8bc:	bf 92       	push	r11
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	8c 01       	movw	r16, r24
     8d0:	6a 01       	movw	r12, r20
	uint16_t index = buffer->tail;
     8d2:	dc 01       	movw	r26, r24
     8d4:	14 96       	adiw	r26, 0x04	; 4
     8d6:	cd 91       	ld	r28, X+
     8d8:	dc 91       	ld	r29, X
     8da:	15 97       	sbiw	r26, 0x05	; 5
     8dc:	e6 2e       	mov	r14, r22
     8de:	f7 2e       	mov	r15, r23
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
     8e0:	a1 2c       	mov	r10, r1
     8e2:	b1 2c       	mov	r11, r1
     8e4:	84 2e       	mov	r8, r20
     8e6:	9d 2c       	mov	r9, r13
     8e8:	18 c0       	rjmp	.+48     	; 0x91a <rbu8_read+0x64>
	{

		dest[i] = buffer->buffer[index];
     8ea:	d8 01       	movw	r26, r16
     8ec:	16 96       	adiw	r26, 0x06	; 6
     8ee:	ed 91       	ld	r30, X+
     8f0:	fc 91       	ld	r31, X
     8f2:	17 97       	sbiw	r26, 0x07	; 7
     8f4:	ec 0f       	add	r30, r28
     8f6:	fd 1f       	adc	r31, r29
     8f8:	80 81       	ld	r24, Z
     8fa:	f7 01       	movw	r30, r14
     8fc:	81 93       	st	Z+, r24
     8fe:	7f 01       	movw	r14, r30
		if (index == buffer->array_length - 1) //Reset if we've hit the end
     900:	8d 91       	ld	r24, X+
     902:	9c 91       	ld	r25, X
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	c8 17       	cp	r28, r24
     908:	d9 07       	cpc	r29, r25
     90a:	11 f0       	breq	.+4      	; 0x910 <rbu8_read+0x5a>
		{
			index = 0;
		}
		else
		{
			index++;
     90c:	21 96       	adiw	r28, 0x01	; 1
     90e:	02 c0       	rjmp	.+4      	; 0x914 <rbu8_read+0x5e>
	{

		dest[i] = buffer->buffer[index];
		if (index == buffer->array_length - 1) //Reset if we've hit the end
		{
			index = 0;
     910:	c0 e0       	ldi	r28, 0x00	; 0
     912:	d0 e0       	ldi	r29, 0x00	; 0
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
	uint16_t index = buffer->tail;
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
     914:	ff ef       	ldi	r31, 0xFF	; 255
     916:	af 1a       	sub	r10, r31
     918:	bf 0a       	sbc	r11, r31
     91a:	c8 01       	movw	r24, r16
     91c:	ba df       	rcall	.-140    	; 0x892 <rbu8_length>
     91e:	9c 01       	movw	r18, r24
     920:	c8 16       	cp	r12, r24
     922:	d9 06       	cpc	r13, r25
     924:	10 f4       	brcc	.+4      	; 0x92a <rbu8_read+0x74>
     926:	28 2d       	mov	r18, r8
     928:	39 2d       	mov	r19, r9
     92a:	a2 16       	cp	r10, r18
     92c:	b3 06       	cpc	r11, r19
     92e:	e8 f2       	brcs	.-70     	; 0x8ea <rbu8_read+0x34>
     930:	21 e0       	ldi	r18, 0x01	; 1
     932:	8c 15       	cp	r24, r12
     934:	9d 05       	cpc	r25, r13
     936:	08 f0       	brcs	.+2      	; 0x93a <rbu8_read+0x84>
     938:	20 e0       	ldi	r18, 0x00	; 0
	}
	if (length > rbu8_length(buffer))
		return 1;
	else
		return 0;
}
     93a:	82 2f       	mov	r24, r18
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	1f 91       	pop	r17
     942:	0f 91       	pop	r16
     944:	ff 90       	pop	r15
     946:	ef 90       	pop	r14
     948:	df 90       	pop	r13
     94a:	cf 90       	pop	r12
     94c:	bf 90       	pop	r11
     94e:	af 90       	pop	r10
     950:	9f 90       	pop	r9
     952:	8f 90       	pop	r8
     954:	08 95       	ret

00000956 <rbu8_delete_oldest>:

void rbu8_delete_oldest(RingBufferu8_t* buffer, uint16_t length)
/*	Deletes data from the ring buffer
	All it really has to do is move buffer->tail up length bytes or until one byte below buffer->head, whichever is lower
*/
{
     956:	0f 93       	push	r16
     958:	1f 93       	push	r17
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	ec 01       	movw	r28, r24
	uint16_t move_distance = min(length, rbu8_length(buffer));
     960:	8b 01       	movw	r16, r22
     962:	97 df       	rcall	.-210    	; 0x892 <rbu8_length>
     964:	9c 01       	movw	r18, r24
     966:	08 17       	cp	r16, r24
     968:	19 07       	cpc	r17, r25
     96a:	08 f4       	brcc	.+2      	; 0x96e <rbu8_delete_oldest+0x18>
	if (move_distance >= rbu8_length(buffer))
     96c:	98 01       	movw	r18, r16
     96e:	28 17       	cp	r18, r24
     970:	39 07       	cpc	r19, r25
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
     972:	68 f0       	brcs	.+26     	; 0x98e <rbu8_delete_oldest+0x38>
     974:	8c 81       	ldd	r24, Y+4	; 0x04
     976:	9d 81       	ldd	r25, Y+5	; 0x05
     978:	82 0f       	add	r24, r18
     97a:	93 1f       	adc	r25, r19
     97c:	68 81       	ld	r22, Y
     97e:	79 81       	ldd	r23, Y+1	; 0x01
     980:	0e 94 dd 23 	call	0x47ba	; 0x47ba <__udivmodhi4>
     984:	8c 83       	std	Y+4, r24	; 0x04
		buffer->head = buffer->tail;
     986:	9d 83       	std	Y+5, r25	; 0x05
     988:	8a 83       	std	Y+2, r24	; 0x02
     98a:	9b 83       	std	Y+3, r25	; 0x03
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
     98c:	0a c0       	rjmp	.+20     	; 0x9a2 <rbu8_delete_oldest+0x4c>
     98e:	8c 81       	ldd	r24, Y+4	; 0x04
     990:	9d 81       	ldd	r25, Y+5	; 0x05
     992:	82 0f       	add	r24, r18
     994:	93 1f       	adc	r25, r19
     996:	68 81       	ld	r22, Y
     998:	79 81       	ldd	r23, Y+1	; 0x01
     99a:	0e 94 dd 23 	call	0x47ba	; 0x47ba <__udivmodhi4>
     99e:	8c 83       	std	Y+4, r24	; 0x04
	}
}
     9a0:	9d 83       	std	Y+5, r25	; 0x05
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	08 95       	ret

000009ac <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	1f 92       	push	r1
     9b2:	1f 92       	push	r1
     9b4:	cd b7       	in	r28, 0x3d	; 61
     9b6:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     9b8:	8f ef       	ldi	r24, 0xFF	; 255
     9ba:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     9be:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     9c2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     9c6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     9ca:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     9ce:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     9d2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     9d6:	8f b7       	in	r24, 0x3f	; 63
     9d8:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     9da:	f8 94       	cli
	return flags;
     9dc:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     9de:	e0 e5       	ldi	r30, 0x50	; 80
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	82 60       	ori	r24, 0x02	; 2
     9e6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     9e8:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     9ea:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     9ec:	81 ff       	sbrs	r24, 1
     9ee:	fd cf       	rjmp	.-6      	; 0x9ea <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     9f0:	61 e0       	ldi	r22, 0x01	; 1
     9f2:	80 e4       	ldi	r24, 0x40	; 64
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	38 d2       	rcall	.+1136   	; 0xe68 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     9f8:	8f b7       	in	r24, 0x3f	; 63
     9fa:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     9fc:	f8 94       	cli
	return flags;
     9fe:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     a00:	e0 e5       	ldi	r30, 0x50	; 80
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	8e 7f       	andi	r24, 0xFE	; 254
     a08:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a0a:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	df 91       	pop	r29
     a12:	cf 91       	pop	r28
     a14:	08 95       	ret

00000a16 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     a16:	cf 93       	push	r28
     a18:	df 93       	push	r29
     a1a:	1f 92       	push	r1
     a1c:	cd b7       	in	r28, 0x3d	; 61
     a1e:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     a20:	9f b7       	in	r25, 0x3f	; 63
     a22:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     a24:	f8 94       	cli
	return flags;
     a26:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     a28:	e8 2f       	mov	r30, r24
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	e0 59       	subi	r30, 0x90	; 144
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	60 95       	com	r22
     a32:	80 81       	ld	r24, Z
     a34:	68 23       	and	r22, r24
     a36:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     a38:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     a3a:	0f 90       	pop	r0
     a3c:	df 91       	pop	r29
     a3e:	cf 91       	pop	r28
     a40:	08 95       	ret

00000a42 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	1f 92       	push	r1
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     a4c:	80 91 82 23 	lds	r24, 0x2382	; 0x802382 <stdio_base>
     a50:	90 91 83 23 	lds	r25, 0x2383	; 0x802383 <stdio_base+0x1>
     a54:	e0 91 7e 23 	lds	r30, 0x237E	; 0x80237e <ptr_get>
     a58:	f0 91 7f 23 	lds	r31, 0x237F	; 0x80237f <ptr_get+0x1>
     a5c:	be 01       	movw	r22, r28
     a5e:	6f 5f       	subi	r22, 0xFF	; 255
     a60:	7f 4f       	sbci	r23, 0xFF	; 255
     a62:	19 95       	eicall
	return c;
     a64:	89 81       	ldd	r24, Y+1	; 0x01
}
     a66:	08 2e       	mov	r0, r24
     a68:	00 0c       	add	r0, r0
     a6a:	99 0b       	sbc	r25, r25
     a6c:	0f 90       	pop	r0
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     a74:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     a76:	80 91 82 23 	lds	r24, 0x2382	; 0x802382 <stdio_base>
     a7a:	90 91 83 23 	lds	r25, 0x2383	; 0x802383 <stdio_base+0x1>
     a7e:	e0 91 80 23 	lds	r30, 0x2380	; 0x802380 <ptr_put>
     a82:	f0 91 81 23 	lds	r31, 0x2381	; 0x802381 <ptr_put+0x1>
     a86:	19 95       	eicall
     a88:	99 23       	and	r25, r25
     a8a:	1c f0       	brlt	.+6      	; 0xa92 <_write+0x1e>
		return -1;
	}
	return 1;
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     a92:	8f ef       	ldi	r24, 0xFF	; 255
     a94:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     a96:	08 95       	ret

00000a98 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     a98:	1f 92       	push	r1
     a9a:	0f 92       	push	r0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	0f 92       	push	r0
     aa0:	11 24       	eor	r1, r1
     aa2:	08 b6       	in	r0, 0x38	; 56
     aa4:	0f 92       	push	r0
     aa6:	18 be       	out	0x38, r1	; 56
     aa8:	09 b6       	in	r0, 0x39	; 57
     aaa:	0f 92       	push	r0
     aac:	19 be       	out	0x39, r1	; 57
     aae:	0b b6       	in	r0, 0x3b	; 59
     ab0:	0f 92       	push	r0
     ab2:	1b be       	out	0x3b, r1	; 59
     ab4:	2f 93       	push	r18
     ab6:	3f 93       	push	r19
     ab8:	4f 93       	push	r20
     aba:	5f 93       	push	r21
     abc:	6f 93       	push	r22
     abe:	7f 93       	push	r23
     ac0:	8f 93       	push	r24
     ac2:	9f 93       	push	r25
     ac4:	af 93       	push	r26
     ac6:	bf 93       	push	r27
     ac8:	ef 93       	push	r30
     aca:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     acc:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     ad0:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     ad4:	e0 91 86 23 	lds	r30, 0x2386	; 0x802386 <adca_callback>
     ad8:	f0 91 87 23 	lds	r31, 0x2387	; 0x802387 <adca_callback+0x1>
     adc:	61 e0       	ldi	r22, 0x01	; 1
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	19 95       	eicall
}
     ae4:	ff 91       	pop	r31
     ae6:	ef 91       	pop	r30
     ae8:	bf 91       	pop	r27
     aea:	af 91       	pop	r26
     aec:	9f 91       	pop	r25
     aee:	8f 91       	pop	r24
     af0:	7f 91       	pop	r23
     af2:	6f 91       	pop	r22
     af4:	5f 91       	pop	r21
     af6:	4f 91       	pop	r20
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0b be       	out	0x3b, r0	; 59
     b00:	0f 90       	pop	r0
     b02:	09 be       	out	0x39, r0	; 57
     b04:	0f 90       	pop	r0
     b06:	08 be       	out	0x38, r0	; 56
     b08:	0f 90       	pop	r0
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	0f 90       	pop	r0
     b0e:	1f 90       	pop	r1
     b10:	18 95       	reti

00000b12 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     b12:	1f 92       	push	r1
     b14:	0f 92       	push	r0
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	08 b6       	in	r0, 0x38	; 56
     b1e:	0f 92       	push	r0
     b20:	18 be       	out	0x38, r1	; 56
     b22:	09 b6       	in	r0, 0x39	; 57
     b24:	0f 92       	push	r0
     b26:	19 be       	out	0x39, r1	; 57
     b28:	0b b6       	in	r0, 0x3b	; 59
     b2a:	0f 92       	push	r0
     b2c:	1b be       	out	0x3b, r1	; 59
     b2e:	2f 93       	push	r18
     b30:	3f 93       	push	r19
     b32:	4f 93       	push	r20
     b34:	5f 93       	push	r21
     b36:	6f 93       	push	r22
     b38:	7f 93       	push	r23
     b3a:	8f 93       	push	r24
     b3c:	9f 93       	push	r25
     b3e:	af 93       	push	r26
     b40:	bf 93       	push	r27
     b42:	ef 93       	push	r30
     b44:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     b46:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     b4a:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     b4e:	e0 91 86 23 	lds	r30, 0x2386	; 0x802386 <adca_callback>
     b52:	f0 91 87 23 	lds	r31, 0x2387	; 0x802387 <adca_callback+0x1>
     b56:	62 e0       	ldi	r22, 0x02	; 2
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	19 95       	eicall
}
     b5e:	ff 91       	pop	r31
     b60:	ef 91       	pop	r30
     b62:	bf 91       	pop	r27
     b64:	af 91       	pop	r26
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	7f 91       	pop	r23
     b6c:	6f 91       	pop	r22
     b6e:	5f 91       	pop	r21
     b70:	4f 91       	pop	r20
     b72:	3f 91       	pop	r19
     b74:	2f 91       	pop	r18
     b76:	0f 90       	pop	r0
     b78:	0b be       	out	0x3b, r0	; 59
     b7a:	0f 90       	pop	r0
     b7c:	09 be       	out	0x39, r0	; 57
     b7e:	0f 90       	pop	r0
     b80:	08 be       	out	0x38, r0	; 56
     b82:	0f 90       	pop	r0
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	0f 90       	pop	r0
     b88:	1f 90       	pop	r1
     b8a:	18 95       	reti

00000b8c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     b8c:	1f 92       	push	r1
     b8e:	0f 92       	push	r0
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	0f 92       	push	r0
     b94:	11 24       	eor	r1, r1
     b96:	08 b6       	in	r0, 0x38	; 56
     b98:	0f 92       	push	r0
     b9a:	18 be       	out	0x38, r1	; 56
     b9c:	09 b6       	in	r0, 0x39	; 57
     b9e:	0f 92       	push	r0
     ba0:	19 be       	out	0x39, r1	; 57
     ba2:	0b b6       	in	r0, 0x3b	; 59
     ba4:	0f 92       	push	r0
     ba6:	1b be       	out	0x3b, r1	; 59
     ba8:	2f 93       	push	r18
     baa:	3f 93       	push	r19
     bac:	4f 93       	push	r20
     bae:	5f 93       	push	r21
     bb0:	6f 93       	push	r22
     bb2:	7f 93       	push	r23
     bb4:	8f 93       	push	r24
     bb6:	9f 93       	push	r25
     bb8:	af 93       	push	r26
     bba:	bf 93       	push	r27
     bbc:	ef 93       	push	r30
     bbe:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     bc0:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     bc4:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     bc8:	e0 91 86 23 	lds	r30, 0x2386	; 0x802386 <adca_callback>
     bcc:	f0 91 87 23 	lds	r31, 0x2387	; 0x802387 <adca_callback+0x1>
     bd0:	64 e0       	ldi	r22, 0x04	; 4
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	19 95       	eicall
}
     bd8:	ff 91       	pop	r31
     bda:	ef 91       	pop	r30
     bdc:	bf 91       	pop	r27
     bde:	af 91       	pop	r26
     be0:	9f 91       	pop	r25
     be2:	8f 91       	pop	r24
     be4:	7f 91       	pop	r23
     be6:	6f 91       	pop	r22
     be8:	5f 91       	pop	r21
     bea:	4f 91       	pop	r20
     bec:	3f 91       	pop	r19
     bee:	2f 91       	pop	r18
     bf0:	0f 90       	pop	r0
     bf2:	0b be       	out	0x3b, r0	; 59
     bf4:	0f 90       	pop	r0
     bf6:	09 be       	out	0x39, r0	; 57
     bf8:	0f 90       	pop	r0
     bfa:	08 be       	out	0x38, r0	; 56
     bfc:	0f 90       	pop	r0
     bfe:	0f be       	out	0x3f, r0	; 63
     c00:	0f 90       	pop	r0
     c02:	1f 90       	pop	r1
     c04:	18 95       	reti

00000c06 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     c06:	1f 92       	push	r1
     c08:	0f 92       	push	r0
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	0f 92       	push	r0
     c0e:	11 24       	eor	r1, r1
     c10:	08 b6       	in	r0, 0x38	; 56
     c12:	0f 92       	push	r0
     c14:	18 be       	out	0x38, r1	; 56
     c16:	09 b6       	in	r0, 0x39	; 57
     c18:	0f 92       	push	r0
     c1a:	19 be       	out	0x39, r1	; 57
     c1c:	0b b6       	in	r0, 0x3b	; 59
     c1e:	0f 92       	push	r0
     c20:	1b be       	out	0x3b, r1	; 59
     c22:	2f 93       	push	r18
     c24:	3f 93       	push	r19
     c26:	4f 93       	push	r20
     c28:	5f 93       	push	r21
     c2a:	6f 93       	push	r22
     c2c:	7f 93       	push	r23
     c2e:	8f 93       	push	r24
     c30:	9f 93       	push	r25
     c32:	af 93       	push	r26
     c34:	bf 93       	push	r27
     c36:	ef 93       	push	r30
     c38:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     c3a:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     c3e:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     c42:	e0 91 86 23 	lds	r30, 0x2386	; 0x802386 <adca_callback>
     c46:	f0 91 87 23 	lds	r31, 0x2387	; 0x802387 <adca_callback+0x1>
     c4a:	68 e0       	ldi	r22, 0x08	; 8
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	92 e0       	ldi	r25, 0x02	; 2
     c50:	19 95       	eicall
}
     c52:	ff 91       	pop	r31
     c54:	ef 91       	pop	r30
     c56:	bf 91       	pop	r27
     c58:	af 91       	pop	r26
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	7f 91       	pop	r23
     c60:	6f 91       	pop	r22
     c62:	5f 91       	pop	r21
     c64:	4f 91       	pop	r20
     c66:	3f 91       	pop	r19
     c68:	2f 91       	pop	r18
     c6a:	0f 90       	pop	r0
     c6c:	0b be       	out	0x3b, r0	; 59
     c6e:	0f 90       	pop	r0
     c70:	09 be       	out	0x39, r0	; 57
     c72:	0f 90       	pop	r0
     c74:	08 be       	out	0x38, r0	; 56
     c76:	0f 90       	pop	r0
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	0f 90       	pop	r0
     c7c:	1f 90       	pop	r1
     c7e:	18 95       	reti

00000c80 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     c80:	1f 92       	push	r1
     c82:	0f 92       	push	r0
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	0f 92       	push	r0
     c88:	11 24       	eor	r1, r1
     c8a:	08 b6       	in	r0, 0x38	; 56
     c8c:	0f 92       	push	r0
     c8e:	18 be       	out	0x38, r1	; 56
     c90:	09 b6       	in	r0, 0x39	; 57
     c92:	0f 92       	push	r0
     c94:	19 be       	out	0x39, r1	; 57
     c96:	0b b6       	in	r0, 0x3b	; 59
     c98:	0f 92       	push	r0
     c9a:	1b be       	out	0x3b, r1	; 59
     c9c:	2f 93       	push	r18
     c9e:	3f 93       	push	r19
     ca0:	4f 93       	push	r20
     ca2:	5f 93       	push	r21
     ca4:	6f 93       	push	r22
     ca6:	7f 93       	push	r23
     ca8:	8f 93       	push	r24
     caa:	9f 93       	push	r25
     cac:	af 93       	push	r26
     cae:	bf 93       	push	r27
     cb0:	ef 93       	push	r30
     cb2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     cb4:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     cb8:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     cbc:	e0 91 84 23 	lds	r30, 0x2384	; 0x802384 <adcb_callback>
     cc0:	f0 91 85 23 	lds	r31, 0x2385	; 0x802385 <adcb_callback+0x1>
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	80 e4       	ldi	r24, 0x40	; 64
     cc8:	92 e0       	ldi	r25, 0x02	; 2
     cca:	19 95       	eicall
}
     ccc:	ff 91       	pop	r31
     cce:	ef 91       	pop	r30
     cd0:	bf 91       	pop	r27
     cd2:	af 91       	pop	r26
     cd4:	9f 91       	pop	r25
     cd6:	8f 91       	pop	r24
     cd8:	7f 91       	pop	r23
     cda:	6f 91       	pop	r22
     cdc:	5f 91       	pop	r21
     cde:	4f 91       	pop	r20
     ce0:	3f 91       	pop	r19
     ce2:	2f 91       	pop	r18
     ce4:	0f 90       	pop	r0
     ce6:	0b be       	out	0x3b, r0	; 59
     ce8:	0f 90       	pop	r0
     cea:	09 be       	out	0x39, r0	; 57
     cec:	0f 90       	pop	r0
     cee:	08 be       	out	0x38, r0	; 56
     cf0:	0f 90       	pop	r0
     cf2:	0f be       	out	0x3f, r0	; 63
     cf4:	0f 90       	pop	r0
     cf6:	1f 90       	pop	r1
     cf8:	18 95       	reti

00000cfa <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	08 b6       	in	r0, 0x38	; 56
     d06:	0f 92       	push	r0
     d08:	18 be       	out	0x38, r1	; 56
     d0a:	09 b6       	in	r0, 0x39	; 57
     d0c:	0f 92       	push	r0
     d0e:	19 be       	out	0x39, r1	; 57
     d10:	0b b6       	in	r0, 0x3b	; 59
     d12:	0f 92       	push	r0
     d14:	1b be       	out	0x3b, r1	; 59
     d16:	2f 93       	push	r18
     d18:	3f 93       	push	r19
     d1a:	4f 93       	push	r20
     d1c:	5f 93       	push	r21
     d1e:	6f 93       	push	r22
     d20:	7f 93       	push	r23
     d22:	8f 93       	push	r24
     d24:	9f 93       	push	r25
     d26:	af 93       	push	r26
     d28:	bf 93       	push	r27
     d2a:	ef 93       	push	r30
     d2c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     d2e:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     d32:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     d36:	e0 91 84 23 	lds	r30, 0x2384	; 0x802384 <adcb_callback>
     d3a:	f0 91 85 23 	lds	r31, 0x2385	; 0x802385 <adcb_callback+0x1>
     d3e:	62 e0       	ldi	r22, 0x02	; 2
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	92 e0       	ldi	r25, 0x02	; 2
     d44:	19 95       	eicall
}
     d46:	ff 91       	pop	r31
     d48:	ef 91       	pop	r30
     d4a:	bf 91       	pop	r27
     d4c:	af 91       	pop	r26
     d4e:	9f 91       	pop	r25
     d50:	8f 91       	pop	r24
     d52:	7f 91       	pop	r23
     d54:	6f 91       	pop	r22
     d56:	5f 91       	pop	r21
     d58:	4f 91       	pop	r20
     d5a:	3f 91       	pop	r19
     d5c:	2f 91       	pop	r18
     d5e:	0f 90       	pop	r0
     d60:	0b be       	out	0x3b, r0	; 59
     d62:	0f 90       	pop	r0
     d64:	09 be       	out	0x39, r0	; 57
     d66:	0f 90       	pop	r0
     d68:	08 be       	out	0x38, r0	; 56
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	08 b6       	in	r0, 0x38	; 56
     d80:	0f 92       	push	r0
     d82:	18 be       	out	0x38, r1	; 56
     d84:	09 b6       	in	r0, 0x39	; 57
     d86:	0f 92       	push	r0
     d88:	19 be       	out	0x39, r1	; 57
     d8a:	0b b6       	in	r0, 0x3b	; 59
     d8c:	0f 92       	push	r0
     d8e:	1b be       	out	0x3b, r1	; 59
     d90:	2f 93       	push	r18
     d92:	3f 93       	push	r19
     d94:	4f 93       	push	r20
     d96:	5f 93       	push	r21
     d98:	6f 93       	push	r22
     d9a:	7f 93       	push	r23
     d9c:	8f 93       	push	r24
     d9e:	9f 93       	push	r25
     da0:	af 93       	push	r26
     da2:	bf 93       	push	r27
     da4:	ef 93       	push	r30
     da6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     da8:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     dac:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     db0:	e0 91 84 23 	lds	r30, 0x2384	; 0x802384 <adcb_callback>
     db4:	f0 91 85 23 	lds	r31, 0x2385	; 0x802385 <adcb_callback+0x1>
     db8:	64 e0       	ldi	r22, 0x04	; 4
     dba:	80 e4       	ldi	r24, 0x40	; 64
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	19 95       	eicall
}
     dc0:	ff 91       	pop	r31
     dc2:	ef 91       	pop	r30
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	7f 91       	pop	r23
     dce:	6f 91       	pop	r22
     dd0:	5f 91       	pop	r21
     dd2:	4f 91       	pop	r20
     dd4:	3f 91       	pop	r19
     dd6:	2f 91       	pop	r18
     dd8:	0f 90       	pop	r0
     dda:	0b be       	out	0x3b, r0	; 59
     ddc:	0f 90       	pop	r0
     dde:	09 be       	out	0x39, r0	; 57
     de0:	0f 90       	pop	r0
     de2:	08 be       	out	0x38, r0	; 56
     de4:	0f 90       	pop	r0
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	0f 90       	pop	r0
     dea:	1f 90       	pop	r1
     dec:	18 95       	reti

00000dee <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     dee:	1f 92       	push	r1
     df0:	0f 92       	push	r0
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	0f 92       	push	r0
     df6:	11 24       	eor	r1, r1
     df8:	08 b6       	in	r0, 0x38	; 56
     dfa:	0f 92       	push	r0
     dfc:	18 be       	out	0x38, r1	; 56
     dfe:	09 b6       	in	r0, 0x39	; 57
     e00:	0f 92       	push	r0
     e02:	19 be       	out	0x39, r1	; 57
     e04:	0b b6       	in	r0, 0x3b	; 59
     e06:	0f 92       	push	r0
     e08:	1b be       	out	0x3b, r1	; 59
     e0a:	2f 93       	push	r18
     e0c:	3f 93       	push	r19
     e0e:	4f 93       	push	r20
     e10:	5f 93       	push	r21
     e12:	6f 93       	push	r22
     e14:	7f 93       	push	r23
     e16:	8f 93       	push	r24
     e18:	9f 93       	push	r25
     e1a:	af 93       	push	r26
     e1c:	bf 93       	push	r27
     e1e:	ef 93       	push	r30
     e20:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     e22:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     e26:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     e2a:	e0 91 84 23 	lds	r30, 0x2384	; 0x802384 <adcb_callback>
     e2e:	f0 91 85 23 	lds	r31, 0x2385	; 0x802385 <adcb_callback+0x1>
     e32:	68 e0       	ldi	r22, 0x08	; 8
     e34:	80 e4       	ldi	r24, 0x40	; 64
     e36:	92 e0       	ldi	r25, 0x02	; 2
     e38:	19 95       	eicall
}
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	7f 91       	pop	r23
     e48:	6f 91       	pop	r22
     e4a:	5f 91       	pop	r21
     e4c:	4f 91       	pop	r20
     e4e:	3f 91       	pop	r19
     e50:	2f 91       	pop	r18
     e52:	0f 90       	pop	r0
     e54:	0b be       	out	0x3b, r0	; 59
     e56:	0f 90       	pop	r0
     e58:	09 be       	out	0x39, r0	; 57
     e5a:	0f 90       	pop	r0
     e5c:	08 be       	out	0x38, r0	; 56
     e5e:	0f 90       	pop	r0
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	0f 90       	pop	r0
     e64:	1f 90       	pop	r1
     e66:	18 95       	reti

00000e68 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     e68:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     e6a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     e6c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     e6e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     e70:	60 83       	st	Z, r22
	ret                             // Return to caller
     e72:	08 95       	ret

00000e74 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     e74:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     e78:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     e7a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     e7c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     e80:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     e82:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     e86:	08 95       	ret

00000e88 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     e88:	1f 92       	push	r1
     e8a:	0f 92       	push	r0
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	0f 92       	push	r0
     e90:	11 24       	eor	r1, r1
     e92:	08 b6       	in	r0, 0x38	; 56
     e94:	0f 92       	push	r0
     e96:	18 be       	out	0x38, r1	; 56
     e98:	09 b6       	in	r0, 0x39	; 57
     e9a:	0f 92       	push	r0
     e9c:	19 be       	out	0x39, r1	; 57
     e9e:	0b b6       	in	r0, 0x3b	; 59
     ea0:	0f 92       	push	r0
     ea2:	1b be       	out	0x3b, r1	; 59
     ea4:	2f 93       	push	r18
     ea6:	3f 93       	push	r19
     ea8:	4f 93       	push	r20
     eaa:	5f 93       	push	r21
     eac:	6f 93       	push	r22
     eae:	7f 93       	push	r23
     eb0:	8f 93       	push	r24
     eb2:	9f 93       	push	r25
     eb4:	af 93       	push	r26
     eb6:	bf 93       	push	r27
     eb8:	ef 93       	push	r30
     eba:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     ebc:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <tc_tcc0_ovf_callback>
     ec0:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <tc_tcc0_ovf_callback+0x1>
     ec4:	30 97       	sbiw	r30, 0x00	; 0
     ec6:	09 f0       	breq	.+2      	; 0xeca <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     ec8:	19 95       	eicall
	}
}
     eca:	ff 91       	pop	r31
     ecc:	ef 91       	pop	r30
     ece:	bf 91       	pop	r27
     ed0:	af 91       	pop	r26
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	7f 91       	pop	r23
     ed8:	6f 91       	pop	r22
     eda:	5f 91       	pop	r21
     edc:	4f 91       	pop	r20
     ede:	3f 91       	pop	r19
     ee0:	2f 91       	pop	r18
     ee2:	0f 90       	pop	r0
     ee4:	0b be       	out	0x3b, r0	; 59
     ee6:	0f 90       	pop	r0
     ee8:	09 be       	out	0x39, r0	; 57
     eea:	0f 90       	pop	r0
     eec:	08 be       	out	0x38, r0	; 56
     eee:	0f 90       	pop	r0
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	0f 90       	pop	r0
     ef4:	1f 90       	pop	r1
     ef6:	18 95       	reti

00000ef8 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     ef8:	1f 92       	push	r1
     efa:	0f 92       	push	r0
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	0f 92       	push	r0
     f00:	11 24       	eor	r1, r1
     f02:	08 b6       	in	r0, 0x38	; 56
     f04:	0f 92       	push	r0
     f06:	18 be       	out	0x38, r1	; 56
     f08:	09 b6       	in	r0, 0x39	; 57
     f0a:	0f 92       	push	r0
     f0c:	19 be       	out	0x39, r1	; 57
     f0e:	0b b6       	in	r0, 0x3b	; 59
     f10:	0f 92       	push	r0
     f12:	1b be       	out	0x3b, r1	; 59
     f14:	2f 93       	push	r18
     f16:	3f 93       	push	r19
     f18:	4f 93       	push	r20
     f1a:	5f 93       	push	r21
     f1c:	6f 93       	push	r22
     f1e:	7f 93       	push	r23
     f20:	8f 93       	push	r24
     f22:	9f 93       	push	r25
     f24:	af 93       	push	r26
     f26:	bf 93       	push	r27
     f28:	ef 93       	push	r30
     f2a:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     f2c:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <tc_tcc0_err_callback>
     f30:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <tc_tcc0_err_callback+0x1>
     f34:	30 97       	sbiw	r30, 0x00	; 0
     f36:	09 f0       	breq	.+2      	; 0xf3a <__vector_15+0x42>
		tc_tcc0_err_callback();
     f38:	19 95       	eicall
	}
}
     f3a:	ff 91       	pop	r31
     f3c:	ef 91       	pop	r30
     f3e:	bf 91       	pop	r27
     f40:	af 91       	pop	r26
     f42:	9f 91       	pop	r25
     f44:	8f 91       	pop	r24
     f46:	7f 91       	pop	r23
     f48:	6f 91       	pop	r22
     f4a:	5f 91       	pop	r21
     f4c:	4f 91       	pop	r20
     f4e:	3f 91       	pop	r19
     f50:	2f 91       	pop	r18
     f52:	0f 90       	pop	r0
     f54:	0b be       	out	0x3b, r0	; 59
     f56:	0f 90       	pop	r0
     f58:	09 be       	out	0x39, r0	; 57
     f5a:	0f 90       	pop	r0
     f5c:	08 be       	out	0x38, r0	; 56
     f5e:	0f 90       	pop	r0
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	0f 90       	pop	r0
     f64:	1f 90       	pop	r1
     f66:	18 95       	reti

00000f68 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     f68:	1f 92       	push	r1
     f6a:	0f 92       	push	r0
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	0f 92       	push	r0
     f70:	11 24       	eor	r1, r1
     f72:	08 b6       	in	r0, 0x38	; 56
     f74:	0f 92       	push	r0
     f76:	18 be       	out	0x38, r1	; 56
     f78:	09 b6       	in	r0, 0x39	; 57
     f7a:	0f 92       	push	r0
     f7c:	19 be       	out	0x39, r1	; 57
     f7e:	0b b6       	in	r0, 0x3b	; 59
     f80:	0f 92       	push	r0
     f82:	1b be       	out	0x3b, r1	; 59
     f84:	2f 93       	push	r18
     f86:	3f 93       	push	r19
     f88:	4f 93       	push	r20
     f8a:	5f 93       	push	r21
     f8c:	6f 93       	push	r22
     f8e:	7f 93       	push	r23
     f90:	8f 93       	push	r24
     f92:	9f 93       	push	r25
     f94:	af 93       	push	r26
     f96:	bf 93       	push	r27
     f98:	ef 93       	push	r30
     f9a:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     f9c:	e0 91 c7 20 	lds	r30, 0x20C7	; 0x8020c7 <tc_tcc0_cca_callback>
     fa0:	f0 91 c8 20 	lds	r31, 0x20C8	; 0x8020c8 <tc_tcc0_cca_callback+0x1>
     fa4:	30 97       	sbiw	r30, 0x00	; 0
     fa6:	09 f0       	breq	.+2      	; 0xfaa <__vector_16+0x42>
		tc_tcc0_cca_callback();
     fa8:	19 95       	eicall
	}
}
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0b be       	out	0x3b, r0	; 59
     fc6:	0f 90       	pop	r0
     fc8:	09 be       	out	0x39, r0	; 57
     fca:	0f 90       	pop	r0
     fcc:	08 be       	out	0x38, r0	; 56
     fce:	0f 90       	pop	r0
     fd0:	0f be       	out	0x3f, r0	; 63
     fd2:	0f 90       	pop	r0
     fd4:	1f 90       	pop	r1
     fd6:	18 95       	reti

00000fd8 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     fd8:	1f 92       	push	r1
     fda:	0f 92       	push	r0
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	0f 92       	push	r0
     fe0:	11 24       	eor	r1, r1
     fe2:	08 b6       	in	r0, 0x38	; 56
     fe4:	0f 92       	push	r0
     fe6:	18 be       	out	0x38, r1	; 56
     fe8:	09 b6       	in	r0, 0x39	; 57
     fea:	0f 92       	push	r0
     fec:	19 be       	out	0x39, r1	; 57
     fee:	0b b6       	in	r0, 0x3b	; 59
     ff0:	0f 92       	push	r0
     ff2:	1b be       	out	0x3b, r1	; 59
     ff4:	2f 93       	push	r18
     ff6:	3f 93       	push	r19
     ff8:	4f 93       	push	r20
     ffa:	5f 93       	push	r21
     ffc:	6f 93       	push	r22
     ffe:	7f 93       	push	r23
    1000:	8f 93       	push	r24
    1002:	9f 93       	push	r25
    1004:	af 93       	push	r26
    1006:	bf 93       	push	r27
    1008:	ef 93       	push	r30
    100a:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
    100c:	e0 91 c5 20 	lds	r30, 0x20C5	; 0x8020c5 <tc_tcc0_ccb_callback>
    1010:	f0 91 c6 20 	lds	r31, 0x20C6	; 0x8020c6 <tc_tcc0_ccb_callback+0x1>
    1014:	30 97       	sbiw	r30, 0x00	; 0
    1016:	09 f0       	breq	.+2      	; 0x101a <__vector_17+0x42>
		tc_tcc0_ccb_callback();
    1018:	19 95       	eicall
	}
}
    101a:	ff 91       	pop	r31
    101c:	ef 91       	pop	r30
    101e:	bf 91       	pop	r27
    1020:	af 91       	pop	r26
    1022:	9f 91       	pop	r25
    1024:	8f 91       	pop	r24
    1026:	7f 91       	pop	r23
    1028:	6f 91       	pop	r22
    102a:	5f 91       	pop	r21
    102c:	4f 91       	pop	r20
    102e:	3f 91       	pop	r19
    1030:	2f 91       	pop	r18
    1032:	0f 90       	pop	r0
    1034:	0b be       	out	0x3b, r0	; 59
    1036:	0f 90       	pop	r0
    1038:	09 be       	out	0x39, r0	; 57
    103a:	0f 90       	pop	r0
    103c:	08 be       	out	0x38, r0	; 56
    103e:	0f 90       	pop	r0
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	0f 90       	pop	r0
    1044:	1f 90       	pop	r1
    1046:	18 95       	reti

00001048 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
    1048:	1f 92       	push	r1
    104a:	0f 92       	push	r0
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	0f 92       	push	r0
    1050:	11 24       	eor	r1, r1
    1052:	08 b6       	in	r0, 0x38	; 56
    1054:	0f 92       	push	r0
    1056:	18 be       	out	0x38, r1	; 56
    1058:	09 b6       	in	r0, 0x39	; 57
    105a:	0f 92       	push	r0
    105c:	19 be       	out	0x39, r1	; 57
    105e:	0b b6       	in	r0, 0x3b	; 59
    1060:	0f 92       	push	r0
    1062:	1b be       	out	0x3b, r1	; 59
    1064:	2f 93       	push	r18
    1066:	3f 93       	push	r19
    1068:	4f 93       	push	r20
    106a:	5f 93       	push	r21
    106c:	6f 93       	push	r22
    106e:	7f 93       	push	r23
    1070:	8f 93       	push	r24
    1072:	9f 93       	push	r25
    1074:	af 93       	push	r26
    1076:	bf 93       	push	r27
    1078:	ef 93       	push	r30
    107a:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
    107c:	e0 91 c3 20 	lds	r30, 0x20C3	; 0x8020c3 <tc_tcc0_ccc_callback>
    1080:	f0 91 c4 20 	lds	r31, 0x20C4	; 0x8020c4 <tc_tcc0_ccc_callback+0x1>
    1084:	30 97       	sbiw	r30, 0x00	; 0
    1086:	09 f0       	breq	.+2      	; 0x108a <__vector_18+0x42>
		tc_tcc0_ccc_callback();
    1088:	19 95       	eicall
	}
}
    108a:	ff 91       	pop	r31
    108c:	ef 91       	pop	r30
    108e:	bf 91       	pop	r27
    1090:	af 91       	pop	r26
    1092:	9f 91       	pop	r25
    1094:	8f 91       	pop	r24
    1096:	7f 91       	pop	r23
    1098:	6f 91       	pop	r22
    109a:	5f 91       	pop	r21
    109c:	4f 91       	pop	r20
    109e:	3f 91       	pop	r19
    10a0:	2f 91       	pop	r18
    10a2:	0f 90       	pop	r0
    10a4:	0b be       	out	0x3b, r0	; 59
    10a6:	0f 90       	pop	r0
    10a8:	09 be       	out	0x39, r0	; 57
    10aa:	0f 90       	pop	r0
    10ac:	08 be       	out	0x38, r0	; 56
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

000010b8 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
    10b8:	1f 92       	push	r1
    10ba:	0f 92       	push	r0
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	0f 92       	push	r0
    10c0:	11 24       	eor	r1, r1
    10c2:	08 b6       	in	r0, 0x38	; 56
    10c4:	0f 92       	push	r0
    10c6:	18 be       	out	0x38, r1	; 56
    10c8:	09 b6       	in	r0, 0x39	; 57
    10ca:	0f 92       	push	r0
    10cc:	19 be       	out	0x39, r1	; 57
    10ce:	0b b6       	in	r0, 0x3b	; 59
    10d0:	0f 92       	push	r0
    10d2:	1b be       	out	0x3b, r1	; 59
    10d4:	2f 93       	push	r18
    10d6:	3f 93       	push	r19
    10d8:	4f 93       	push	r20
    10da:	5f 93       	push	r21
    10dc:	6f 93       	push	r22
    10de:	7f 93       	push	r23
    10e0:	8f 93       	push	r24
    10e2:	9f 93       	push	r25
    10e4:	af 93       	push	r26
    10e6:	bf 93       	push	r27
    10e8:	ef 93       	push	r30
    10ea:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
    10ec:	e0 91 c1 20 	lds	r30, 0x20C1	; 0x8020c1 <tc_tcc0_ccd_callback>
    10f0:	f0 91 c2 20 	lds	r31, 0x20C2	; 0x8020c2 <tc_tcc0_ccd_callback+0x1>
    10f4:	30 97       	sbiw	r30, 0x00	; 0
    10f6:	09 f0       	breq	.+2      	; 0x10fa <__vector_19+0x42>
		tc_tcc0_ccd_callback();
    10f8:	19 95       	eicall
	}
}
    10fa:	ff 91       	pop	r31
    10fc:	ef 91       	pop	r30
    10fe:	bf 91       	pop	r27
    1100:	af 91       	pop	r26
    1102:	9f 91       	pop	r25
    1104:	8f 91       	pop	r24
    1106:	7f 91       	pop	r23
    1108:	6f 91       	pop	r22
    110a:	5f 91       	pop	r21
    110c:	4f 91       	pop	r20
    110e:	3f 91       	pop	r19
    1110:	2f 91       	pop	r18
    1112:	0f 90       	pop	r0
    1114:	0b be       	out	0x3b, r0	; 59
    1116:	0f 90       	pop	r0
    1118:	09 be       	out	0x39, r0	; 57
    111a:	0f 90       	pop	r0
    111c:	08 be       	out	0x38, r0	; 56
    111e:	0f 90       	pop	r0
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	0f 90       	pop	r0
    1124:	1f 90       	pop	r1
    1126:	18 95       	reti

00001128 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
    1128:	1f 92       	push	r1
    112a:	0f 92       	push	r0
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	0f 92       	push	r0
    1130:	11 24       	eor	r1, r1
    1132:	08 b6       	in	r0, 0x38	; 56
    1134:	0f 92       	push	r0
    1136:	18 be       	out	0x38, r1	; 56
    1138:	09 b6       	in	r0, 0x39	; 57
    113a:	0f 92       	push	r0
    113c:	19 be       	out	0x39, r1	; 57
    113e:	0b b6       	in	r0, 0x3b	; 59
    1140:	0f 92       	push	r0
    1142:	1b be       	out	0x3b, r1	; 59
    1144:	2f 93       	push	r18
    1146:	3f 93       	push	r19
    1148:	4f 93       	push	r20
    114a:	5f 93       	push	r21
    114c:	6f 93       	push	r22
    114e:	7f 93       	push	r23
    1150:	8f 93       	push	r24
    1152:	9f 93       	push	r25
    1154:	af 93       	push	r26
    1156:	bf 93       	push	r27
    1158:	ef 93       	push	r30
    115a:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
    115c:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <tc_tcc1_ovf_callback>
    1160:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <tc_tcc1_ovf_callback+0x1>
    1164:	30 97       	sbiw	r30, 0x00	; 0
    1166:	09 f0       	breq	.+2      	; 0x116a <__vector_20+0x42>
		tc_tcc1_ovf_callback();
    1168:	19 95       	eicall
	}
}
    116a:	ff 91       	pop	r31
    116c:	ef 91       	pop	r30
    116e:	bf 91       	pop	r27
    1170:	af 91       	pop	r26
    1172:	9f 91       	pop	r25
    1174:	8f 91       	pop	r24
    1176:	7f 91       	pop	r23
    1178:	6f 91       	pop	r22
    117a:	5f 91       	pop	r21
    117c:	4f 91       	pop	r20
    117e:	3f 91       	pop	r19
    1180:	2f 91       	pop	r18
    1182:	0f 90       	pop	r0
    1184:	0b be       	out	0x3b, r0	; 59
    1186:	0f 90       	pop	r0
    1188:	09 be       	out	0x39, r0	; 57
    118a:	0f 90       	pop	r0
    118c:	08 be       	out	0x38, r0	; 56
    118e:	0f 90       	pop	r0
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	0f 90       	pop	r0
    1194:	1f 90       	pop	r1
    1196:	18 95       	reti

00001198 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
    1198:	1f 92       	push	r1
    119a:	0f 92       	push	r0
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	0f 92       	push	r0
    11a0:	11 24       	eor	r1, r1
    11a2:	08 b6       	in	r0, 0x38	; 56
    11a4:	0f 92       	push	r0
    11a6:	18 be       	out	0x38, r1	; 56
    11a8:	09 b6       	in	r0, 0x39	; 57
    11aa:	0f 92       	push	r0
    11ac:	19 be       	out	0x39, r1	; 57
    11ae:	0b b6       	in	r0, 0x3b	; 59
    11b0:	0f 92       	push	r0
    11b2:	1b be       	out	0x3b, r1	; 59
    11b4:	2f 93       	push	r18
    11b6:	3f 93       	push	r19
    11b8:	4f 93       	push	r20
    11ba:	5f 93       	push	r21
    11bc:	6f 93       	push	r22
    11be:	7f 93       	push	r23
    11c0:	8f 93       	push	r24
    11c2:	9f 93       	push	r25
    11c4:	af 93       	push	r26
    11c6:	bf 93       	push	r27
    11c8:	ef 93       	push	r30
    11ca:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    11cc:	e0 91 bd 20 	lds	r30, 0x20BD	; 0x8020bd <tc_tcc1_err_callback>
    11d0:	f0 91 be 20 	lds	r31, 0x20BE	; 0x8020be <tc_tcc1_err_callback+0x1>
    11d4:	30 97       	sbiw	r30, 0x00	; 0
    11d6:	09 f0       	breq	.+2      	; 0x11da <__vector_21+0x42>
		tc_tcc1_err_callback();
    11d8:	19 95       	eicall
	}
}
    11da:	ff 91       	pop	r31
    11dc:	ef 91       	pop	r30
    11de:	bf 91       	pop	r27
    11e0:	af 91       	pop	r26
    11e2:	9f 91       	pop	r25
    11e4:	8f 91       	pop	r24
    11e6:	7f 91       	pop	r23
    11e8:	6f 91       	pop	r22
    11ea:	5f 91       	pop	r21
    11ec:	4f 91       	pop	r20
    11ee:	3f 91       	pop	r19
    11f0:	2f 91       	pop	r18
    11f2:	0f 90       	pop	r0
    11f4:	0b be       	out	0x3b, r0	; 59
    11f6:	0f 90       	pop	r0
    11f8:	09 be       	out	0x39, r0	; 57
    11fa:	0f 90       	pop	r0
    11fc:	08 be       	out	0x38, r0	; 56
    11fe:	0f 90       	pop	r0
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	0f 90       	pop	r0
    1204:	1f 90       	pop	r1
    1206:	18 95       	reti

00001208 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    1208:	1f 92       	push	r1
    120a:	0f 92       	push	r0
    120c:	0f b6       	in	r0, 0x3f	; 63
    120e:	0f 92       	push	r0
    1210:	11 24       	eor	r1, r1
    1212:	08 b6       	in	r0, 0x38	; 56
    1214:	0f 92       	push	r0
    1216:	18 be       	out	0x38, r1	; 56
    1218:	09 b6       	in	r0, 0x39	; 57
    121a:	0f 92       	push	r0
    121c:	19 be       	out	0x39, r1	; 57
    121e:	0b b6       	in	r0, 0x3b	; 59
    1220:	0f 92       	push	r0
    1222:	1b be       	out	0x3b, r1	; 59
    1224:	2f 93       	push	r18
    1226:	3f 93       	push	r19
    1228:	4f 93       	push	r20
    122a:	5f 93       	push	r21
    122c:	6f 93       	push	r22
    122e:	7f 93       	push	r23
    1230:	8f 93       	push	r24
    1232:	9f 93       	push	r25
    1234:	af 93       	push	r26
    1236:	bf 93       	push	r27
    1238:	ef 93       	push	r30
    123a:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    123c:	e0 91 bb 20 	lds	r30, 0x20BB	; 0x8020bb <tc_tcc1_cca_callback>
    1240:	f0 91 bc 20 	lds	r31, 0x20BC	; 0x8020bc <tc_tcc1_cca_callback+0x1>
    1244:	30 97       	sbiw	r30, 0x00	; 0
    1246:	09 f0       	breq	.+2      	; 0x124a <__vector_22+0x42>
		tc_tcc1_cca_callback();
    1248:	19 95       	eicall
	}
}
    124a:	ff 91       	pop	r31
    124c:	ef 91       	pop	r30
    124e:	bf 91       	pop	r27
    1250:	af 91       	pop	r26
    1252:	9f 91       	pop	r25
    1254:	8f 91       	pop	r24
    1256:	7f 91       	pop	r23
    1258:	6f 91       	pop	r22
    125a:	5f 91       	pop	r21
    125c:	4f 91       	pop	r20
    125e:	3f 91       	pop	r19
    1260:	2f 91       	pop	r18
    1262:	0f 90       	pop	r0
    1264:	0b be       	out	0x3b, r0	; 59
    1266:	0f 90       	pop	r0
    1268:	09 be       	out	0x39, r0	; 57
    126a:	0f 90       	pop	r0
    126c:	08 be       	out	0x38, r0	; 56
    126e:	0f 90       	pop	r0
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	0f 90       	pop	r0
    1274:	1f 90       	pop	r1
    1276:	18 95       	reti

00001278 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    1278:	1f 92       	push	r1
    127a:	0f 92       	push	r0
    127c:	0f b6       	in	r0, 0x3f	; 63
    127e:	0f 92       	push	r0
    1280:	11 24       	eor	r1, r1
    1282:	08 b6       	in	r0, 0x38	; 56
    1284:	0f 92       	push	r0
    1286:	18 be       	out	0x38, r1	; 56
    1288:	09 b6       	in	r0, 0x39	; 57
    128a:	0f 92       	push	r0
    128c:	19 be       	out	0x39, r1	; 57
    128e:	0b b6       	in	r0, 0x3b	; 59
    1290:	0f 92       	push	r0
    1292:	1b be       	out	0x3b, r1	; 59
    1294:	2f 93       	push	r18
    1296:	3f 93       	push	r19
    1298:	4f 93       	push	r20
    129a:	5f 93       	push	r21
    129c:	6f 93       	push	r22
    129e:	7f 93       	push	r23
    12a0:	8f 93       	push	r24
    12a2:	9f 93       	push	r25
    12a4:	af 93       	push	r26
    12a6:	bf 93       	push	r27
    12a8:	ef 93       	push	r30
    12aa:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    12ac:	e0 91 b9 20 	lds	r30, 0x20B9	; 0x8020b9 <tc_tcc1_ccb_callback>
    12b0:	f0 91 ba 20 	lds	r31, 0x20BA	; 0x8020ba <tc_tcc1_ccb_callback+0x1>
    12b4:	30 97       	sbiw	r30, 0x00	; 0
    12b6:	09 f0       	breq	.+2      	; 0x12ba <__vector_23+0x42>
		tc_tcc1_ccb_callback();
    12b8:	19 95       	eicall
	}
}
    12ba:	ff 91       	pop	r31
    12bc:	ef 91       	pop	r30
    12be:	bf 91       	pop	r27
    12c0:	af 91       	pop	r26
    12c2:	9f 91       	pop	r25
    12c4:	8f 91       	pop	r24
    12c6:	7f 91       	pop	r23
    12c8:	6f 91       	pop	r22
    12ca:	5f 91       	pop	r21
    12cc:	4f 91       	pop	r20
    12ce:	3f 91       	pop	r19
    12d0:	2f 91       	pop	r18
    12d2:	0f 90       	pop	r0
    12d4:	0b be       	out	0x3b, r0	; 59
    12d6:	0f 90       	pop	r0
    12d8:	09 be       	out	0x39, r0	; 57
    12da:	0f 90       	pop	r0
    12dc:	08 be       	out	0x38, r0	; 56
    12de:	0f 90       	pop	r0
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	0f 90       	pop	r0
    12e4:	1f 90       	pop	r1
    12e6:	18 95       	reti

000012e8 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    12e8:	1f 92       	push	r1
    12ea:	0f 92       	push	r0
    12ec:	0f b6       	in	r0, 0x3f	; 63
    12ee:	0f 92       	push	r0
    12f0:	11 24       	eor	r1, r1
    12f2:	08 b6       	in	r0, 0x38	; 56
    12f4:	0f 92       	push	r0
    12f6:	18 be       	out	0x38, r1	; 56
    12f8:	09 b6       	in	r0, 0x39	; 57
    12fa:	0f 92       	push	r0
    12fc:	19 be       	out	0x39, r1	; 57
    12fe:	0b b6       	in	r0, 0x3b	; 59
    1300:	0f 92       	push	r0
    1302:	1b be       	out	0x3b, r1	; 59
    1304:	2f 93       	push	r18
    1306:	3f 93       	push	r19
    1308:	4f 93       	push	r20
    130a:	5f 93       	push	r21
    130c:	6f 93       	push	r22
    130e:	7f 93       	push	r23
    1310:	8f 93       	push	r24
    1312:	9f 93       	push	r25
    1314:	af 93       	push	r26
    1316:	bf 93       	push	r27
    1318:	ef 93       	push	r30
    131a:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    131c:	e0 91 b7 20 	lds	r30, 0x20B7	; 0x8020b7 <tc_tcd0_ovf_callback>
    1320:	f0 91 b8 20 	lds	r31, 0x20B8	; 0x8020b8 <tc_tcd0_ovf_callback+0x1>
    1324:	30 97       	sbiw	r30, 0x00	; 0
    1326:	09 f0       	breq	.+2      	; 0x132a <__vector_77+0x42>
		tc_tcd0_ovf_callback();
    1328:	19 95       	eicall
	}
}
    132a:	ff 91       	pop	r31
    132c:	ef 91       	pop	r30
    132e:	bf 91       	pop	r27
    1330:	af 91       	pop	r26
    1332:	9f 91       	pop	r25
    1334:	8f 91       	pop	r24
    1336:	7f 91       	pop	r23
    1338:	6f 91       	pop	r22
    133a:	5f 91       	pop	r21
    133c:	4f 91       	pop	r20
    133e:	3f 91       	pop	r19
    1340:	2f 91       	pop	r18
    1342:	0f 90       	pop	r0
    1344:	0b be       	out	0x3b, r0	; 59
    1346:	0f 90       	pop	r0
    1348:	09 be       	out	0x39, r0	; 57
    134a:	0f 90       	pop	r0
    134c:	08 be       	out	0x38, r0	; 56
    134e:	0f 90       	pop	r0
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	0f 90       	pop	r0
    1354:	1f 90       	pop	r1
    1356:	18 95       	reti

00001358 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1358:	1f 92       	push	r1
    135a:	0f 92       	push	r0
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	0f 92       	push	r0
    1360:	11 24       	eor	r1, r1
    1362:	08 b6       	in	r0, 0x38	; 56
    1364:	0f 92       	push	r0
    1366:	18 be       	out	0x38, r1	; 56
    1368:	09 b6       	in	r0, 0x39	; 57
    136a:	0f 92       	push	r0
    136c:	19 be       	out	0x39, r1	; 57
    136e:	0b b6       	in	r0, 0x3b	; 59
    1370:	0f 92       	push	r0
    1372:	1b be       	out	0x3b, r1	; 59
    1374:	2f 93       	push	r18
    1376:	3f 93       	push	r19
    1378:	4f 93       	push	r20
    137a:	5f 93       	push	r21
    137c:	6f 93       	push	r22
    137e:	7f 93       	push	r23
    1380:	8f 93       	push	r24
    1382:	9f 93       	push	r25
    1384:	af 93       	push	r26
    1386:	bf 93       	push	r27
    1388:	ef 93       	push	r30
    138a:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    138c:	e0 91 b5 20 	lds	r30, 0x20B5	; 0x8020b5 <tc_tcd0_err_callback>
    1390:	f0 91 b6 20 	lds	r31, 0x20B6	; 0x8020b6 <tc_tcd0_err_callback+0x1>
    1394:	30 97       	sbiw	r30, 0x00	; 0
    1396:	09 f0       	breq	.+2      	; 0x139a <__vector_78+0x42>
		tc_tcd0_err_callback();
    1398:	19 95       	eicall
	}
}
    139a:	ff 91       	pop	r31
    139c:	ef 91       	pop	r30
    139e:	bf 91       	pop	r27
    13a0:	af 91       	pop	r26
    13a2:	9f 91       	pop	r25
    13a4:	8f 91       	pop	r24
    13a6:	7f 91       	pop	r23
    13a8:	6f 91       	pop	r22
    13aa:	5f 91       	pop	r21
    13ac:	4f 91       	pop	r20
    13ae:	3f 91       	pop	r19
    13b0:	2f 91       	pop	r18
    13b2:	0f 90       	pop	r0
    13b4:	0b be       	out	0x3b, r0	; 59
    13b6:	0f 90       	pop	r0
    13b8:	09 be       	out	0x39, r0	; 57
    13ba:	0f 90       	pop	r0
    13bc:	08 be       	out	0x38, r0	; 56
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	0f 90       	pop	r0
    13c4:	1f 90       	pop	r1
    13c6:	18 95       	reti

000013c8 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    13c8:	1f 92       	push	r1
    13ca:	0f 92       	push	r0
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	0f 92       	push	r0
    13d0:	11 24       	eor	r1, r1
    13d2:	08 b6       	in	r0, 0x38	; 56
    13d4:	0f 92       	push	r0
    13d6:	18 be       	out	0x38, r1	; 56
    13d8:	09 b6       	in	r0, 0x39	; 57
    13da:	0f 92       	push	r0
    13dc:	19 be       	out	0x39, r1	; 57
    13de:	0b b6       	in	r0, 0x3b	; 59
    13e0:	0f 92       	push	r0
    13e2:	1b be       	out	0x3b, r1	; 59
    13e4:	2f 93       	push	r18
    13e6:	3f 93       	push	r19
    13e8:	4f 93       	push	r20
    13ea:	5f 93       	push	r21
    13ec:	6f 93       	push	r22
    13ee:	7f 93       	push	r23
    13f0:	8f 93       	push	r24
    13f2:	9f 93       	push	r25
    13f4:	af 93       	push	r26
    13f6:	bf 93       	push	r27
    13f8:	ef 93       	push	r30
    13fa:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    13fc:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <tc_tcd0_cca_callback>
    1400:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <tc_tcd0_cca_callback+0x1>
    1404:	30 97       	sbiw	r30, 0x00	; 0
    1406:	09 f0       	breq	.+2      	; 0x140a <__vector_79+0x42>
		tc_tcd0_cca_callback();
    1408:	19 95       	eicall
	}
}
    140a:	ff 91       	pop	r31
    140c:	ef 91       	pop	r30
    140e:	bf 91       	pop	r27
    1410:	af 91       	pop	r26
    1412:	9f 91       	pop	r25
    1414:	8f 91       	pop	r24
    1416:	7f 91       	pop	r23
    1418:	6f 91       	pop	r22
    141a:	5f 91       	pop	r21
    141c:	4f 91       	pop	r20
    141e:	3f 91       	pop	r19
    1420:	2f 91       	pop	r18
    1422:	0f 90       	pop	r0
    1424:	0b be       	out	0x3b, r0	; 59
    1426:	0f 90       	pop	r0
    1428:	09 be       	out	0x39, r0	; 57
    142a:	0f 90       	pop	r0
    142c:	08 be       	out	0x38, r0	; 56
    142e:	0f 90       	pop	r0
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	0f 90       	pop	r0
    1434:	1f 90       	pop	r1
    1436:	18 95       	reti

00001438 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1438:	1f 92       	push	r1
    143a:	0f 92       	push	r0
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	0f 92       	push	r0
    1440:	11 24       	eor	r1, r1
    1442:	08 b6       	in	r0, 0x38	; 56
    1444:	0f 92       	push	r0
    1446:	18 be       	out	0x38, r1	; 56
    1448:	09 b6       	in	r0, 0x39	; 57
    144a:	0f 92       	push	r0
    144c:	19 be       	out	0x39, r1	; 57
    144e:	0b b6       	in	r0, 0x3b	; 59
    1450:	0f 92       	push	r0
    1452:	1b be       	out	0x3b, r1	; 59
    1454:	2f 93       	push	r18
    1456:	3f 93       	push	r19
    1458:	4f 93       	push	r20
    145a:	5f 93       	push	r21
    145c:	6f 93       	push	r22
    145e:	7f 93       	push	r23
    1460:	8f 93       	push	r24
    1462:	9f 93       	push	r25
    1464:	af 93       	push	r26
    1466:	bf 93       	push	r27
    1468:	ef 93       	push	r30
    146a:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    146c:	e0 91 b1 20 	lds	r30, 0x20B1	; 0x8020b1 <tc_tcd0_ccb_callback>
    1470:	f0 91 b2 20 	lds	r31, 0x20B2	; 0x8020b2 <tc_tcd0_ccb_callback+0x1>
    1474:	30 97       	sbiw	r30, 0x00	; 0
    1476:	09 f0       	breq	.+2      	; 0x147a <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    1478:	19 95       	eicall
	}
}
    147a:	ff 91       	pop	r31
    147c:	ef 91       	pop	r30
    147e:	bf 91       	pop	r27
    1480:	af 91       	pop	r26
    1482:	9f 91       	pop	r25
    1484:	8f 91       	pop	r24
    1486:	7f 91       	pop	r23
    1488:	6f 91       	pop	r22
    148a:	5f 91       	pop	r21
    148c:	4f 91       	pop	r20
    148e:	3f 91       	pop	r19
    1490:	2f 91       	pop	r18
    1492:	0f 90       	pop	r0
    1494:	0b be       	out	0x3b, r0	; 59
    1496:	0f 90       	pop	r0
    1498:	09 be       	out	0x39, r0	; 57
    149a:	0f 90       	pop	r0
    149c:	08 be       	out	0x38, r0	; 56
    149e:	0f 90       	pop	r0
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	0f 90       	pop	r0
    14a4:	1f 90       	pop	r1
    14a6:	18 95       	reti

000014a8 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    14a8:	1f 92       	push	r1
    14aa:	0f 92       	push	r0
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	0f 92       	push	r0
    14b0:	11 24       	eor	r1, r1
    14b2:	08 b6       	in	r0, 0x38	; 56
    14b4:	0f 92       	push	r0
    14b6:	18 be       	out	0x38, r1	; 56
    14b8:	09 b6       	in	r0, 0x39	; 57
    14ba:	0f 92       	push	r0
    14bc:	19 be       	out	0x39, r1	; 57
    14be:	0b b6       	in	r0, 0x3b	; 59
    14c0:	0f 92       	push	r0
    14c2:	1b be       	out	0x3b, r1	; 59
    14c4:	2f 93       	push	r18
    14c6:	3f 93       	push	r19
    14c8:	4f 93       	push	r20
    14ca:	5f 93       	push	r21
    14cc:	6f 93       	push	r22
    14ce:	7f 93       	push	r23
    14d0:	8f 93       	push	r24
    14d2:	9f 93       	push	r25
    14d4:	af 93       	push	r26
    14d6:	bf 93       	push	r27
    14d8:	ef 93       	push	r30
    14da:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    14dc:	e0 91 af 20 	lds	r30, 0x20AF	; 0x8020af <tc_tcd0_ccc_callback>
    14e0:	f0 91 b0 20 	lds	r31, 0x20B0	; 0x8020b0 <tc_tcd0_ccc_callback+0x1>
    14e4:	30 97       	sbiw	r30, 0x00	; 0
    14e6:	09 f0       	breq	.+2      	; 0x14ea <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    14e8:	19 95       	eicall
	}
}
    14ea:	ff 91       	pop	r31
    14ec:	ef 91       	pop	r30
    14ee:	bf 91       	pop	r27
    14f0:	af 91       	pop	r26
    14f2:	9f 91       	pop	r25
    14f4:	8f 91       	pop	r24
    14f6:	7f 91       	pop	r23
    14f8:	6f 91       	pop	r22
    14fa:	5f 91       	pop	r21
    14fc:	4f 91       	pop	r20
    14fe:	3f 91       	pop	r19
    1500:	2f 91       	pop	r18
    1502:	0f 90       	pop	r0
    1504:	0b be       	out	0x3b, r0	; 59
    1506:	0f 90       	pop	r0
    1508:	09 be       	out	0x39, r0	; 57
    150a:	0f 90       	pop	r0
    150c:	08 be       	out	0x38, r0	; 56
    150e:	0f 90       	pop	r0
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	0f 90       	pop	r0
    1514:	1f 90       	pop	r1
    1516:	18 95       	reti

00001518 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    1518:	1f 92       	push	r1
    151a:	0f 92       	push	r0
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	0f 92       	push	r0
    1520:	11 24       	eor	r1, r1
    1522:	08 b6       	in	r0, 0x38	; 56
    1524:	0f 92       	push	r0
    1526:	18 be       	out	0x38, r1	; 56
    1528:	09 b6       	in	r0, 0x39	; 57
    152a:	0f 92       	push	r0
    152c:	19 be       	out	0x39, r1	; 57
    152e:	0b b6       	in	r0, 0x3b	; 59
    1530:	0f 92       	push	r0
    1532:	1b be       	out	0x3b, r1	; 59
    1534:	2f 93       	push	r18
    1536:	3f 93       	push	r19
    1538:	4f 93       	push	r20
    153a:	5f 93       	push	r21
    153c:	6f 93       	push	r22
    153e:	7f 93       	push	r23
    1540:	8f 93       	push	r24
    1542:	9f 93       	push	r25
    1544:	af 93       	push	r26
    1546:	bf 93       	push	r27
    1548:	ef 93       	push	r30
    154a:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    154c:	e0 91 ad 20 	lds	r30, 0x20AD	; 0x8020ad <tc_tcd0_ccd_callback>
    1550:	f0 91 ae 20 	lds	r31, 0x20AE	; 0x8020ae <tc_tcd0_ccd_callback+0x1>
    1554:	30 97       	sbiw	r30, 0x00	; 0
    1556:	09 f0       	breq	.+2      	; 0x155a <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    1558:	19 95       	eicall
	}
}
    155a:	ff 91       	pop	r31
    155c:	ef 91       	pop	r30
    155e:	bf 91       	pop	r27
    1560:	af 91       	pop	r26
    1562:	9f 91       	pop	r25
    1564:	8f 91       	pop	r24
    1566:	7f 91       	pop	r23
    1568:	6f 91       	pop	r22
    156a:	5f 91       	pop	r21
    156c:	4f 91       	pop	r20
    156e:	3f 91       	pop	r19
    1570:	2f 91       	pop	r18
    1572:	0f 90       	pop	r0
    1574:	0b be       	out	0x3b, r0	; 59
    1576:	0f 90       	pop	r0
    1578:	09 be       	out	0x39, r0	; 57
    157a:	0f 90       	pop	r0
    157c:	08 be       	out	0x38, r0	; 56
    157e:	0f 90       	pop	r0
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	0f 90       	pop	r0
    1584:	1f 90       	pop	r1
    1586:	18 95       	reti

00001588 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1588:	1f 92       	push	r1
    158a:	0f 92       	push	r0
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	0f 92       	push	r0
    1590:	11 24       	eor	r1, r1
    1592:	08 b6       	in	r0, 0x38	; 56
    1594:	0f 92       	push	r0
    1596:	18 be       	out	0x38, r1	; 56
    1598:	09 b6       	in	r0, 0x39	; 57
    159a:	0f 92       	push	r0
    159c:	19 be       	out	0x39, r1	; 57
    159e:	0b b6       	in	r0, 0x3b	; 59
    15a0:	0f 92       	push	r0
    15a2:	1b be       	out	0x3b, r1	; 59
    15a4:	2f 93       	push	r18
    15a6:	3f 93       	push	r19
    15a8:	4f 93       	push	r20
    15aa:	5f 93       	push	r21
    15ac:	6f 93       	push	r22
    15ae:	7f 93       	push	r23
    15b0:	8f 93       	push	r24
    15b2:	9f 93       	push	r25
    15b4:	af 93       	push	r26
    15b6:	bf 93       	push	r27
    15b8:	ef 93       	push	r30
    15ba:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    15bc:	e0 91 ab 20 	lds	r30, 0x20AB	; 0x8020ab <tc_tcd1_ovf_callback>
    15c0:	f0 91 ac 20 	lds	r31, 0x20AC	; 0x8020ac <tc_tcd1_ovf_callback+0x1>
    15c4:	30 97       	sbiw	r30, 0x00	; 0
    15c6:	09 f0       	breq	.+2      	; 0x15ca <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    15c8:	19 95       	eicall
	}
}
    15ca:	ff 91       	pop	r31
    15cc:	ef 91       	pop	r30
    15ce:	bf 91       	pop	r27
    15d0:	af 91       	pop	r26
    15d2:	9f 91       	pop	r25
    15d4:	8f 91       	pop	r24
    15d6:	7f 91       	pop	r23
    15d8:	6f 91       	pop	r22
    15da:	5f 91       	pop	r21
    15dc:	4f 91       	pop	r20
    15de:	3f 91       	pop	r19
    15e0:	2f 91       	pop	r18
    15e2:	0f 90       	pop	r0
    15e4:	0b be       	out	0x3b, r0	; 59
    15e6:	0f 90       	pop	r0
    15e8:	09 be       	out	0x39, r0	; 57
    15ea:	0f 90       	pop	r0
    15ec:	08 be       	out	0x38, r0	; 56
    15ee:	0f 90       	pop	r0
    15f0:	0f be       	out	0x3f, r0	; 63
    15f2:	0f 90       	pop	r0
    15f4:	1f 90       	pop	r1
    15f6:	18 95       	reti

000015f8 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    15f8:	1f 92       	push	r1
    15fa:	0f 92       	push	r0
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	0f 92       	push	r0
    1600:	11 24       	eor	r1, r1
    1602:	08 b6       	in	r0, 0x38	; 56
    1604:	0f 92       	push	r0
    1606:	18 be       	out	0x38, r1	; 56
    1608:	09 b6       	in	r0, 0x39	; 57
    160a:	0f 92       	push	r0
    160c:	19 be       	out	0x39, r1	; 57
    160e:	0b b6       	in	r0, 0x3b	; 59
    1610:	0f 92       	push	r0
    1612:	1b be       	out	0x3b, r1	; 59
    1614:	2f 93       	push	r18
    1616:	3f 93       	push	r19
    1618:	4f 93       	push	r20
    161a:	5f 93       	push	r21
    161c:	6f 93       	push	r22
    161e:	7f 93       	push	r23
    1620:	8f 93       	push	r24
    1622:	9f 93       	push	r25
    1624:	af 93       	push	r26
    1626:	bf 93       	push	r27
    1628:	ef 93       	push	r30
    162a:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    162c:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <tc_tcd1_err_callback>
    1630:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <tc_tcd1_err_callback+0x1>
    1634:	30 97       	sbiw	r30, 0x00	; 0
    1636:	09 f0       	breq	.+2      	; 0x163a <__vector_84+0x42>
		tc_tcd1_err_callback();
    1638:	19 95       	eicall
	}
}
    163a:	ff 91       	pop	r31
    163c:	ef 91       	pop	r30
    163e:	bf 91       	pop	r27
    1640:	af 91       	pop	r26
    1642:	9f 91       	pop	r25
    1644:	8f 91       	pop	r24
    1646:	7f 91       	pop	r23
    1648:	6f 91       	pop	r22
    164a:	5f 91       	pop	r21
    164c:	4f 91       	pop	r20
    164e:	3f 91       	pop	r19
    1650:	2f 91       	pop	r18
    1652:	0f 90       	pop	r0
    1654:	0b be       	out	0x3b, r0	; 59
    1656:	0f 90       	pop	r0
    1658:	09 be       	out	0x39, r0	; 57
    165a:	0f 90       	pop	r0
    165c:	08 be       	out	0x38, r0	; 56
    165e:	0f 90       	pop	r0
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	0f 90       	pop	r0
    1664:	1f 90       	pop	r1
    1666:	18 95       	reti

00001668 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1668:	1f 92       	push	r1
    166a:	0f 92       	push	r0
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	0f 92       	push	r0
    1670:	11 24       	eor	r1, r1
    1672:	08 b6       	in	r0, 0x38	; 56
    1674:	0f 92       	push	r0
    1676:	18 be       	out	0x38, r1	; 56
    1678:	09 b6       	in	r0, 0x39	; 57
    167a:	0f 92       	push	r0
    167c:	19 be       	out	0x39, r1	; 57
    167e:	0b b6       	in	r0, 0x3b	; 59
    1680:	0f 92       	push	r0
    1682:	1b be       	out	0x3b, r1	; 59
    1684:	2f 93       	push	r18
    1686:	3f 93       	push	r19
    1688:	4f 93       	push	r20
    168a:	5f 93       	push	r21
    168c:	6f 93       	push	r22
    168e:	7f 93       	push	r23
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    169c:	e0 91 a7 20 	lds	r30, 0x20A7	; 0x8020a7 <tc_tcd1_cca_callback>
    16a0:	f0 91 a8 20 	lds	r31, 0x20A8	; 0x8020a8 <tc_tcd1_cca_callback+0x1>
    16a4:	30 97       	sbiw	r30, 0x00	; 0
    16a6:	09 f0       	breq	.+2      	; 0x16aa <__vector_85+0x42>
		tc_tcd1_cca_callback();
    16a8:	19 95       	eicall
	}
}
    16aa:	ff 91       	pop	r31
    16ac:	ef 91       	pop	r30
    16ae:	bf 91       	pop	r27
    16b0:	af 91       	pop	r26
    16b2:	9f 91       	pop	r25
    16b4:	8f 91       	pop	r24
    16b6:	7f 91       	pop	r23
    16b8:	6f 91       	pop	r22
    16ba:	5f 91       	pop	r21
    16bc:	4f 91       	pop	r20
    16be:	3f 91       	pop	r19
    16c0:	2f 91       	pop	r18
    16c2:	0f 90       	pop	r0
    16c4:	0b be       	out	0x3b, r0	; 59
    16c6:	0f 90       	pop	r0
    16c8:	09 be       	out	0x39, r0	; 57
    16ca:	0f 90       	pop	r0
    16cc:	08 be       	out	0x38, r0	; 56
    16ce:	0f 90       	pop	r0
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	0f 90       	pop	r0
    16d4:	1f 90       	pop	r1
    16d6:	18 95       	reti

000016d8 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    16d8:	1f 92       	push	r1
    16da:	0f 92       	push	r0
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	0f 92       	push	r0
    16e0:	11 24       	eor	r1, r1
    16e2:	08 b6       	in	r0, 0x38	; 56
    16e4:	0f 92       	push	r0
    16e6:	18 be       	out	0x38, r1	; 56
    16e8:	09 b6       	in	r0, 0x39	; 57
    16ea:	0f 92       	push	r0
    16ec:	19 be       	out	0x39, r1	; 57
    16ee:	0b b6       	in	r0, 0x3b	; 59
    16f0:	0f 92       	push	r0
    16f2:	1b be       	out	0x3b, r1	; 59
    16f4:	2f 93       	push	r18
    16f6:	3f 93       	push	r19
    16f8:	4f 93       	push	r20
    16fa:	5f 93       	push	r21
    16fc:	6f 93       	push	r22
    16fe:	7f 93       	push	r23
    1700:	8f 93       	push	r24
    1702:	9f 93       	push	r25
    1704:	af 93       	push	r26
    1706:	bf 93       	push	r27
    1708:	ef 93       	push	r30
    170a:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    170c:	e0 91 a5 20 	lds	r30, 0x20A5	; 0x8020a5 <tc_tcd1_ccb_callback>
    1710:	f0 91 a6 20 	lds	r31, 0x20A6	; 0x8020a6 <tc_tcd1_ccb_callback+0x1>
    1714:	30 97       	sbiw	r30, 0x00	; 0
    1716:	09 f0       	breq	.+2      	; 0x171a <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    1718:	19 95       	eicall
	}
}
    171a:	ff 91       	pop	r31
    171c:	ef 91       	pop	r30
    171e:	bf 91       	pop	r27
    1720:	af 91       	pop	r26
    1722:	9f 91       	pop	r25
    1724:	8f 91       	pop	r24
    1726:	7f 91       	pop	r23
    1728:	6f 91       	pop	r22
    172a:	5f 91       	pop	r21
    172c:	4f 91       	pop	r20
    172e:	3f 91       	pop	r19
    1730:	2f 91       	pop	r18
    1732:	0f 90       	pop	r0
    1734:	0b be       	out	0x3b, r0	; 59
    1736:	0f 90       	pop	r0
    1738:	09 be       	out	0x39, r0	; 57
    173a:	0f 90       	pop	r0
    173c:	08 be       	out	0x38, r0	; 56
    173e:	0f 90       	pop	r0
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	0f 90       	pop	r0
    1744:	1f 90       	pop	r1
    1746:	18 95       	reti

00001748 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    1748:	1f 92       	push	r1
    174a:	0f 92       	push	r0
    174c:	0f b6       	in	r0, 0x3f	; 63
    174e:	0f 92       	push	r0
    1750:	11 24       	eor	r1, r1
    1752:	08 b6       	in	r0, 0x38	; 56
    1754:	0f 92       	push	r0
    1756:	18 be       	out	0x38, r1	; 56
    1758:	09 b6       	in	r0, 0x39	; 57
    175a:	0f 92       	push	r0
    175c:	19 be       	out	0x39, r1	; 57
    175e:	0b b6       	in	r0, 0x3b	; 59
    1760:	0f 92       	push	r0
    1762:	1b be       	out	0x3b, r1	; 59
    1764:	2f 93       	push	r18
    1766:	3f 93       	push	r19
    1768:	4f 93       	push	r20
    176a:	5f 93       	push	r21
    176c:	6f 93       	push	r22
    176e:	7f 93       	push	r23
    1770:	8f 93       	push	r24
    1772:	9f 93       	push	r25
    1774:	af 93       	push	r26
    1776:	bf 93       	push	r27
    1778:	ef 93       	push	r30
    177a:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    177c:	e0 91 a3 20 	lds	r30, 0x20A3	; 0x8020a3 <tc_tce0_ovf_callback>
    1780:	f0 91 a4 20 	lds	r31, 0x20A4	; 0x8020a4 <tc_tce0_ovf_callback+0x1>
    1784:	30 97       	sbiw	r30, 0x00	; 0
    1786:	09 f0       	breq	.+2      	; 0x178a <__vector_47+0x42>
		tc_tce0_ovf_callback();
    1788:	19 95       	eicall
	}
}
    178a:	ff 91       	pop	r31
    178c:	ef 91       	pop	r30
    178e:	bf 91       	pop	r27
    1790:	af 91       	pop	r26
    1792:	9f 91       	pop	r25
    1794:	8f 91       	pop	r24
    1796:	7f 91       	pop	r23
    1798:	6f 91       	pop	r22
    179a:	5f 91       	pop	r21
    179c:	4f 91       	pop	r20
    179e:	3f 91       	pop	r19
    17a0:	2f 91       	pop	r18
    17a2:	0f 90       	pop	r0
    17a4:	0b be       	out	0x3b, r0	; 59
    17a6:	0f 90       	pop	r0
    17a8:	09 be       	out	0x39, r0	; 57
    17aa:	0f 90       	pop	r0
    17ac:	08 be       	out	0x38, r0	; 56
    17ae:	0f 90       	pop	r0
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	0f 90       	pop	r0
    17b4:	1f 90       	pop	r1
    17b6:	18 95       	reti

000017b8 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    17b8:	1f 92       	push	r1
    17ba:	0f 92       	push	r0
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	0f 92       	push	r0
    17c0:	11 24       	eor	r1, r1
    17c2:	08 b6       	in	r0, 0x38	; 56
    17c4:	0f 92       	push	r0
    17c6:	18 be       	out	0x38, r1	; 56
    17c8:	09 b6       	in	r0, 0x39	; 57
    17ca:	0f 92       	push	r0
    17cc:	19 be       	out	0x39, r1	; 57
    17ce:	0b b6       	in	r0, 0x3b	; 59
    17d0:	0f 92       	push	r0
    17d2:	1b be       	out	0x3b, r1	; 59
    17d4:	2f 93       	push	r18
    17d6:	3f 93       	push	r19
    17d8:	4f 93       	push	r20
    17da:	5f 93       	push	r21
    17dc:	6f 93       	push	r22
    17de:	7f 93       	push	r23
    17e0:	8f 93       	push	r24
    17e2:	9f 93       	push	r25
    17e4:	af 93       	push	r26
    17e6:	bf 93       	push	r27
    17e8:	ef 93       	push	r30
    17ea:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    17ec:	e0 91 a1 20 	lds	r30, 0x20A1	; 0x8020a1 <tc_tce0_err_callback>
    17f0:	f0 91 a2 20 	lds	r31, 0x20A2	; 0x8020a2 <tc_tce0_err_callback+0x1>
    17f4:	30 97       	sbiw	r30, 0x00	; 0
    17f6:	09 f0       	breq	.+2      	; 0x17fa <__vector_48+0x42>
		tc_tce0_err_callback();
    17f8:	19 95       	eicall
	}
}
    17fa:	ff 91       	pop	r31
    17fc:	ef 91       	pop	r30
    17fe:	bf 91       	pop	r27
    1800:	af 91       	pop	r26
    1802:	9f 91       	pop	r25
    1804:	8f 91       	pop	r24
    1806:	7f 91       	pop	r23
    1808:	6f 91       	pop	r22
    180a:	5f 91       	pop	r21
    180c:	4f 91       	pop	r20
    180e:	3f 91       	pop	r19
    1810:	2f 91       	pop	r18
    1812:	0f 90       	pop	r0
    1814:	0b be       	out	0x3b, r0	; 59
    1816:	0f 90       	pop	r0
    1818:	09 be       	out	0x39, r0	; 57
    181a:	0f 90       	pop	r0
    181c:	08 be       	out	0x38, r0	; 56
    181e:	0f 90       	pop	r0
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	0f 90       	pop	r0
    1824:	1f 90       	pop	r1
    1826:	18 95       	reti

00001828 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1828:	1f 92       	push	r1
    182a:	0f 92       	push	r0
    182c:	0f b6       	in	r0, 0x3f	; 63
    182e:	0f 92       	push	r0
    1830:	11 24       	eor	r1, r1
    1832:	08 b6       	in	r0, 0x38	; 56
    1834:	0f 92       	push	r0
    1836:	18 be       	out	0x38, r1	; 56
    1838:	09 b6       	in	r0, 0x39	; 57
    183a:	0f 92       	push	r0
    183c:	19 be       	out	0x39, r1	; 57
    183e:	0b b6       	in	r0, 0x3b	; 59
    1840:	0f 92       	push	r0
    1842:	1b be       	out	0x3b, r1	; 59
    1844:	2f 93       	push	r18
    1846:	3f 93       	push	r19
    1848:	4f 93       	push	r20
    184a:	5f 93       	push	r21
    184c:	6f 93       	push	r22
    184e:	7f 93       	push	r23
    1850:	8f 93       	push	r24
    1852:	9f 93       	push	r25
    1854:	af 93       	push	r26
    1856:	bf 93       	push	r27
    1858:	ef 93       	push	r30
    185a:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    185c:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <tc_tce0_cca_callback>
    1860:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <tc_tce0_cca_callback+0x1>
    1864:	30 97       	sbiw	r30, 0x00	; 0
    1866:	09 f0       	breq	.+2      	; 0x186a <__vector_49+0x42>
		tc_tce0_cca_callback();
    1868:	19 95       	eicall
	}
}
    186a:	ff 91       	pop	r31
    186c:	ef 91       	pop	r30
    186e:	bf 91       	pop	r27
    1870:	af 91       	pop	r26
    1872:	9f 91       	pop	r25
    1874:	8f 91       	pop	r24
    1876:	7f 91       	pop	r23
    1878:	6f 91       	pop	r22
    187a:	5f 91       	pop	r21
    187c:	4f 91       	pop	r20
    187e:	3f 91       	pop	r19
    1880:	2f 91       	pop	r18
    1882:	0f 90       	pop	r0
    1884:	0b be       	out	0x3b, r0	; 59
    1886:	0f 90       	pop	r0
    1888:	09 be       	out	0x39, r0	; 57
    188a:	0f 90       	pop	r0
    188c:	08 be       	out	0x38, r0	; 56
    188e:	0f 90       	pop	r0
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	0f 90       	pop	r0
    1894:	1f 90       	pop	r1
    1896:	18 95       	reti

00001898 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1898:	1f 92       	push	r1
    189a:	0f 92       	push	r0
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	0f 92       	push	r0
    18a0:	11 24       	eor	r1, r1
    18a2:	08 b6       	in	r0, 0x38	; 56
    18a4:	0f 92       	push	r0
    18a6:	18 be       	out	0x38, r1	; 56
    18a8:	09 b6       	in	r0, 0x39	; 57
    18aa:	0f 92       	push	r0
    18ac:	19 be       	out	0x39, r1	; 57
    18ae:	0b b6       	in	r0, 0x3b	; 59
    18b0:	0f 92       	push	r0
    18b2:	1b be       	out	0x3b, r1	; 59
    18b4:	2f 93       	push	r18
    18b6:	3f 93       	push	r19
    18b8:	4f 93       	push	r20
    18ba:	5f 93       	push	r21
    18bc:	6f 93       	push	r22
    18be:	7f 93       	push	r23
    18c0:	8f 93       	push	r24
    18c2:	9f 93       	push	r25
    18c4:	af 93       	push	r26
    18c6:	bf 93       	push	r27
    18c8:	ef 93       	push	r30
    18ca:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    18cc:	e0 91 9d 20 	lds	r30, 0x209D	; 0x80209d <tc_tce0_ccb_callback>
    18d0:	f0 91 9e 20 	lds	r31, 0x209E	; 0x80209e <tc_tce0_ccb_callback+0x1>
    18d4:	30 97       	sbiw	r30, 0x00	; 0
    18d6:	09 f0       	breq	.+2      	; 0x18da <__vector_50+0x42>
		tc_tce0_ccb_callback();
    18d8:	19 95       	eicall
	}
}
    18da:	ff 91       	pop	r31
    18dc:	ef 91       	pop	r30
    18de:	bf 91       	pop	r27
    18e0:	af 91       	pop	r26
    18e2:	9f 91       	pop	r25
    18e4:	8f 91       	pop	r24
    18e6:	7f 91       	pop	r23
    18e8:	6f 91       	pop	r22
    18ea:	5f 91       	pop	r21
    18ec:	4f 91       	pop	r20
    18ee:	3f 91       	pop	r19
    18f0:	2f 91       	pop	r18
    18f2:	0f 90       	pop	r0
    18f4:	0b be       	out	0x3b, r0	; 59
    18f6:	0f 90       	pop	r0
    18f8:	09 be       	out	0x39, r0	; 57
    18fa:	0f 90       	pop	r0
    18fc:	08 be       	out	0x38, r0	; 56
    18fe:	0f 90       	pop	r0
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	0f 90       	pop	r0
    1904:	1f 90       	pop	r1
    1906:	18 95       	reti

00001908 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1908:	1f 92       	push	r1
    190a:	0f 92       	push	r0
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	0f 92       	push	r0
    1910:	11 24       	eor	r1, r1
    1912:	08 b6       	in	r0, 0x38	; 56
    1914:	0f 92       	push	r0
    1916:	18 be       	out	0x38, r1	; 56
    1918:	09 b6       	in	r0, 0x39	; 57
    191a:	0f 92       	push	r0
    191c:	19 be       	out	0x39, r1	; 57
    191e:	0b b6       	in	r0, 0x3b	; 59
    1920:	0f 92       	push	r0
    1922:	1b be       	out	0x3b, r1	; 59
    1924:	2f 93       	push	r18
    1926:	3f 93       	push	r19
    1928:	4f 93       	push	r20
    192a:	5f 93       	push	r21
    192c:	6f 93       	push	r22
    192e:	7f 93       	push	r23
    1930:	8f 93       	push	r24
    1932:	9f 93       	push	r25
    1934:	af 93       	push	r26
    1936:	bf 93       	push	r27
    1938:	ef 93       	push	r30
    193a:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    193c:	e0 91 9b 20 	lds	r30, 0x209B	; 0x80209b <tc_tce0_ccc_callback>
    1940:	f0 91 9c 20 	lds	r31, 0x209C	; 0x80209c <tc_tce0_ccc_callback+0x1>
    1944:	30 97       	sbiw	r30, 0x00	; 0
    1946:	09 f0       	breq	.+2      	; 0x194a <__vector_51+0x42>
		tc_tce0_ccc_callback();
    1948:	19 95       	eicall
	}
}
    194a:	ff 91       	pop	r31
    194c:	ef 91       	pop	r30
    194e:	bf 91       	pop	r27
    1950:	af 91       	pop	r26
    1952:	9f 91       	pop	r25
    1954:	8f 91       	pop	r24
    1956:	7f 91       	pop	r23
    1958:	6f 91       	pop	r22
    195a:	5f 91       	pop	r21
    195c:	4f 91       	pop	r20
    195e:	3f 91       	pop	r19
    1960:	2f 91       	pop	r18
    1962:	0f 90       	pop	r0
    1964:	0b be       	out	0x3b, r0	; 59
    1966:	0f 90       	pop	r0
    1968:	09 be       	out	0x39, r0	; 57
    196a:	0f 90       	pop	r0
    196c:	08 be       	out	0x38, r0	; 56
    196e:	0f 90       	pop	r0
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	0f 90       	pop	r0
    1974:	1f 90       	pop	r1
    1976:	18 95       	reti

00001978 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	0f 92       	push	r0
    1980:	11 24       	eor	r1, r1
    1982:	08 b6       	in	r0, 0x38	; 56
    1984:	0f 92       	push	r0
    1986:	18 be       	out	0x38, r1	; 56
    1988:	09 b6       	in	r0, 0x39	; 57
    198a:	0f 92       	push	r0
    198c:	19 be       	out	0x39, r1	; 57
    198e:	0b b6       	in	r0, 0x3b	; 59
    1990:	0f 92       	push	r0
    1992:	1b be       	out	0x3b, r1	; 59
    1994:	2f 93       	push	r18
    1996:	3f 93       	push	r19
    1998:	4f 93       	push	r20
    199a:	5f 93       	push	r21
    199c:	6f 93       	push	r22
    199e:	7f 93       	push	r23
    19a0:	8f 93       	push	r24
    19a2:	9f 93       	push	r25
    19a4:	af 93       	push	r26
    19a6:	bf 93       	push	r27
    19a8:	ef 93       	push	r30
    19aa:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    19ac:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <tc_tce0_ccd_callback>
    19b0:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <tc_tce0_ccd_callback+0x1>
    19b4:	30 97       	sbiw	r30, 0x00	; 0
    19b6:	09 f0       	breq	.+2      	; 0x19ba <__vector_52+0x42>
		tc_tce0_ccd_callback();
    19b8:	19 95       	eicall
	}
}
    19ba:	ff 91       	pop	r31
    19bc:	ef 91       	pop	r30
    19be:	bf 91       	pop	r27
    19c0:	af 91       	pop	r26
    19c2:	9f 91       	pop	r25
    19c4:	8f 91       	pop	r24
    19c6:	7f 91       	pop	r23
    19c8:	6f 91       	pop	r22
    19ca:	5f 91       	pop	r21
    19cc:	4f 91       	pop	r20
    19ce:	3f 91       	pop	r19
    19d0:	2f 91       	pop	r18
    19d2:	0f 90       	pop	r0
    19d4:	0b be       	out	0x3b, r0	; 59
    19d6:	0f 90       	pop	r0
    19d8:	09 be       	out	0x39, r0	; 57
    19da:	0f 90       	pop	r0
    19dc:	08 be       	out	0x38, r0	; 56
    19de:	0f 90       	pop	r0
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	0f 90       	pop	r0
    19e4:	1f 90       	pop	r1
    19e6:	18 95       	reti

000019e8 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    19e8:	1f 92       	push	r1
    19ea:	0f 92       	push	r0
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	0f 92       	push	r0
    19f0:	11 24       	eor	r1, r1
    19f2:	08 b6       	in	r0, 0x38	; 56
    19f4:	0f 92       	push	r0
    19f6:	18 be       	out	0x38, r1	; 56
    19f8:	09 b6       	in	r0, 0x39	; 57
    19fa:	0f 92       	push	r0
    19fc:	19 be       	out	0x39, r1	; 57
    19fe:	0b b6       	in	r0, 0x3b	; 59
    1a00:	0f 92       	push	r0
    1a02:	1b be       	out	0x3b, r1	; 59
    1a04:	2f 93       	push	r18
    1a06:	3f 93       	push	r19
    1a08:	4f 93       	push	r20
    1a0a:	5f 93       	push	r21
    1a0c:	6f 93       	push	r22
    1a0e:	7f 93       	push	r23
    1a10:	8f 93       	push	r24
    1a12:	9f 93       	push	r25
    1a14:	af 93       	push	r26
    1a16:	bf 93       	push	r27
    1a18:	ef 93       	push	r30
    1a1a:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1a1c:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <tc_tce1_ovf_callback>
    1a20:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <tc_tce1_ovf_callback+0x1>
    1a24:	30 97       	sbiw	r30, 0x00	; 0
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <__vector_53+0x42>
		tc_tce1_ovf_callback();
    1a28:	19 95       	eicall
	}
}
    1a2a:	ff 91       	pop	r31
    1a2c:	ef 91       	pop	r30
    1a2e:	bf 91       	pop	r27
    1a30:	af 91       	pop	r26
    1a32:	9f 91       	pop	r25
    1a34:	8f 91       	pop	r24
    1a36:	7f 91       	pop	r23
    1a38:	6f 91       	pop	r22
    1a3a:	5f 91       	pop	r21
    1a3c:	4f 91       	pop	r20
    1a3e:	3f 91       	pop	r19
    1a40:	2f 91       	pop	r18
    1a42:	0f 90       	pop	r0
    1a44:	0b be       	out	0x3b, r0	; 59
    1a46:	0f 90       	pop	r0
    1a48:	09 be       	out	0x39, r0	; 57
    1a4a:	0f 90       	pop	r0
    1a4c:	08 be       	out	0x38, r0	; 56
    1a4e:	0f 90       	pop	r0
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	0f 90       	pop	r0
    1a54:	1f 90       	pop	r1
    1a56:	18 95       	reti

00001a58 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1a58:	1f 92       	push	r1
    1a5a:	0f 92       	push	r0
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	0f 92       	push	r0
    1a60:	11 24       	eor	r1, r1
    1a62:	08 b6       	in	r0, 0x38	; 56
    1a64:	0f 92       	push	r0
    1a66:	18 be       	out	0x38, r1	; 56
    1a68:	09 b6       	in	r0, 0x39	; 57
    1a6a:	0f 92       	push	r0
    1a6c:	19 be       	out	0x39, r1	; 57
    1a6e:	0b b6       	in	r0, 0x3b	; 59
    1a70:	0f 92       	push	r0
    1a72:	1b be       	out	0x3b, r1	; 59
    1a74:	2f 93       	push	r18
    1a76:	3f 93       	push	r19
    1a78:	4f 93       	push	r20
    1a7a:	5f 93       	push	r21
    1a7c:	6f 93       	push	r22
    1a7e:	7f 93       	push	r23
    1a80:	8f 93       	push	r24
    1a82:	9f 93       	push	r25
    1a84:	af 93       	push	r26
    1a86:	bf 93       	push	r27
    1a88:	ef 93       	push	r30
    1a8a:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1a8c:	e0 91 95 20 	lds	r30, 0x2095	; 0x802095 <tc_tce1_err_callback>
    1a90:	f0 91 96 20 	lds	r31, 0x2096	; 0x802096 <tc_tce1_err_callback+0x1>
    1a94:	30 97       	sbiw	r30, 0x00	; 0
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <__vector_54+0x42>
		tc_tce1_err_callback();
    1a98:	19 95       	eicall
	}
}
    1a9a:	ff 91       	pop	r31
    1a9c:	ef 91       	pop	r30
    1a9e:	bf 91       	pop	r27
    1aa0:	af 91       	pop	r26
    1aa2:	9f 91       	pop	r25
    1aa4:	8f 91       	pop	r24
    1aa6:	7f 91       	pop	r23
    1aa8:	6f 91       	pop	r22
    1aaa:	5f 91       	pop	r21
    1aac:	4f 91       	pop	r20
    1aae:	3f 91       	pop	r19
    1ab0:	2f 91       	pop	r18
    1ab2:	0f 90       	pop	r0
    1ab4:	0b be       	out	0x3b, r0	; 59
    1ab6:	0f 90       	pop	r0
    1ab8:	09 be       	out	0x39, r0	; 57
    1aba:	0f 90       	pop	r0
    1abc:	08 be       	out	0x38, r0	; 56
    1abe:	0f 90       	pop	r0
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	0f 90       	pop	r0
    1ac4:	1f 90       	pop	r1
    1ac6:	18 95       	reti

00001ac8 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    1ac8:	1f 92       	push	r1
    1aca:	0f 92       	push	r0
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	0f 92       	push	r0
    1ad0:	11 24       	eor	r1, r1
    1ad2:	08 b6       	in	r0, 0x38	; 56
    1ad4:	0f 92       	push	r0
    1ad6:	18 be       	out	0x38, r1	; 56
    1ad8:	09 b6       	in	r0, 0x39	; 57
    1ada:	0f 92       	push	r0
    1adc:	19 be       	out	0x39, r1	; 57
    1ade:	0b b6       	in	r0, 0x3b	; 59
    1ae0:	0f 92       	push	r0
    1ae2:	1b be       	out	0x3b, r1	; 59
    1ae4:	2f 93       	push	r18
    1ae6:	3f 93       	push	r19
    1ae8:	4f 93       	push	r20
    1aea:	5f 93       	push	r21
    1aec:	6f 93       	push	r22
    1aee:	7f 93       	push	r23
    1af0:	8f 93       	push	r24
    1af2:	9f 93       	push	r25
    1af4:	af 93       	push	r26
    1af6:	bf 93       	push	r27
    1af8:	ef 93       	push	r30
    1afa:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1afc:	e0 91 93 20 	lds	r30, 0x2093	; 0x802093 <tc_tce1_cca_callback>
    1b00:	f0 91 94 20 	lds	r31, 0x2094	; 0x802094 <tc_tce1_cca_callback+0x1>
    1b04:	30 97       	sbiw	r30, 0x00	; 0
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <__vector_55+0x42>
		tc_tce1_cca_callback();
    1b08:	19 95       	eicall
	}
}
    1b0a:	ff 91       	pop	r31
    1b0c:	ef 91       	pop	r30
    1b0e:	bf 91       	pop	r27
    1b10:	af 91       	pop	r26
    1b12:	9f 91       	pop	r25
    1b14:	8f 91       	pop	r24
    1b16:	7f 91       	pop	r23
    1b18:	6f 91       	pop	r22
    1b1a:	5f 91       	pop	r21
    1b1c:	4f 91       	pop	r20
    1b1e:	3f 91       	pop	r19
    1b20:	2f 91       	pop	r18
    1b22:	0f 90       	pop	r0
    1b24:	0b be       	out	0x3b, r0	; 59
    1b26:	0f 90       	pop	r0
    1b28:	09 be       	out	0x39, r0	; 57
    1b2a:	0f 90       	pop	r0
    1b2c:	08 be       	out	0x38, r0	; 56
    1b2e:	0f 90       	pop	r0
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	0f 90       	pop	r0
    1b34:	1f 90       	pop	r1
    1b36:	18 95       	reti

00001b38 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1b38:	1f 92       	push	r1
    1b3a:	0f 92       	push	r0
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	0f 92       	push	r0
    1b40:	11 24       	eor	r1, r1
    1b42:	08 b6       	in	r0, 0x38	; 56
    1b44:	0f 92       	push	r0
    1b46:	18 be       	out	0x38, r1	; 56
    1b48:	09 b6       	in	r0, 0x39	; 57
    1b4a:	0f 92       	push	r0
    1b4c:	19 be       	out	0x39, r1	; 57
    1b4e:	0b b6       	in	r0, 0x3b	; 59
    1b50:	0f 92       	push	r0
    1b52:	1b be       	out	0x3b, r1	; 59
    1b54:	2f 93       	push	r18
    1b56:	3f 93       	push	r19
    1b58:	4f 93       	push	r20
    1b5a:	5f 93       	push	r21
    1b5c:	6f 93       	push	r22
    1b5e:	7f 93       	push	r23
    1b60:	8f 93       	push	r24
    1b62:	9f 93       	push	r25
    1b64:	af 93       	push	r26
    1b66:	bf 93       	push	r27
    1b68:	ef 93       	push	r30
    1b6a:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1b6c:	e0 91 91 20 	lds	r30, 0x2091	; 0x802091 <tc_tce1_ccb_callback>
    1b70:	f0 91 92 20 	lds	r31, 0x2092	; 0x802092 <tc_tce1_ccb_callback+0x1>
    1b74:	30 97       	sbiw	r30, 0x00	; 0
    1b76:	09 f0       	breq	.+2      	; 0x1b7a <__vector_56+0x42>
		tc_tce1_ccb_callback();
    1b78:	19 95       	eicall
	}
}
    1b7a:	ff 91       	pop	r31
    1b7c:	ef 91       	pop	r30
    1b7e:	bf 91       	pop	r27
    1b80:	af 91       	pop	r26
    1b82:	9f 91       	pop	r25
    1b84:	8f 91       	pop	r24
    1b86:	7f 91       	pop	r23
    1b88:	6f 91       	pop	r22
    1b8a:	5f 91       	pop	r21
    1b8c:	4f 91       	pop	r20
    1b8e:	3f 91       	pop	r19
    1b90:	2f 91       	pop	r18
    1b92:	0f 90       	pop	r0
    1b94:	0b be       	out	0x3b, r0	; 59
    1b96:	0f 90       	pop	r0
    1b98:	09 be       	out	0x39, r0	; 57
    1b9a:	0f 90       	pop	r0
    1b9c:	08 be       	out	0x38, r0	; 56
    1b9e:	0f 90       	pop	r0
    1ba0:	0f be       	out	0x3f, r0	; 63
    1ba2:	0f 90       	pop	r0
    1ba4:	1f 90       	pop	r1
    1ba6:	18 95       	reti

00001ba8 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1ba8:	1f 92       	push	r1
    1baa:	0f 92       	push	r0
    1bac:	0f b6       	in	r0, 0x3f	; 63
    1bae:	0f 92       	push	r0
    1bb0:	11 24       	eor	r1, r1
    1bb2:	08 b6       	in	r0, 0x38	; 56
    1bb4:	0f 92       	push	r0
    1bb6:	18 be       	out	0x38, r1	; 56
    1bb8:	09 b6       	in	r0, 0x39	; 57
    1bba:	0f 92       	push	r0
    1bbc:	19 be       	out	0x39, r1	; 57
    1bbe:	0b b6       	in	r0, 0x3b	; 59
    1bc0:	0f 92       	push	r0
    1bc2:	1b be       	out	0x3b, r1	; 59
    1bc4:	2f 93       	push	r18
    1bc6:	3f 93       	push	r19
    1bc8:	4f 93       	push	r20
    1bca:	5f 93       	push	r21
    1bcc:	6f 93       	push	r22
    1bce:	7f 93       	push	r23
    1bd0:	8f 93       	push	r24
    1bd2:	9f 93       	push	r25
    1bd4:	af 93       	push	r26
    1bd6:	bf 93       	push	r27
    1bd8:	ef 93       	push	r30
    1bda:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1bdc:	e0 91 8f 20 	lds	r30, 0x208F	; 0x80208f <tc_tcf0_ovf_callback>
    1be0:	f0 91 90 20 	lds	r31, 0x2090	; 0x802090 <tc_tcf0_ovf_callback+0x1>
    1be4:	30 97       	sbiw	r30, 0x00	; 0
    1be6:	09 f0       	breq	.+2      	; 0x1bea <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    1be8:	19 95       	eicall
	}
}
    1bea:	ff 91       	pop	r31
    1bec:	ef 91       	pop	r30
    1bee:	bf 91       	pop	r27
    1bf0:	af 91       	pop	r26
    1bf2:	9f 91       	pop	r25
    1bf4:	8f 91       	pop	r24
    1bf6:	7f 91       	pop	r23
    1bf8:	6f 91       	pop	r22
    1bfa:	5f 91       	pop	r21
    1bfc:	4f 91       	pop	r20
    1bfe:	3f 91       	pop	r19
    1c00:	2f 91       	pop	r18
    1c02:	0f 90       	pop	r0
    1c04:	0b be       	out	0x3b, r0	; 59
    1c06:	0f 90       	pop	r0
    1c08:	09 be       	out	0x39, r0	; 57
    1c0a:	0f 90       	pop	r0
    1c0c:	08 be       	out	0x38, r0	; 56
    1c0e:	0f 90       	pop	r0
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	0f 90       	pop	r0
    1c14:	1f 90       	pop	r1
    1c16:	18 95       	reti

00001c18 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1c18:	1f 92       	push	r1
    1c1a:	0f 92       	push	r0
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	0f 92       	push	r0
    1c20:	11 24       	eor	r1, r1
    1c22:	08 b6       	in	r0, 0x38	; 56
    1c24:	0f 92       	push	r0
    1c26:	18 be       	out	0x38, r1	; 56
    1c28:	09 b6       	in	r0, 0x39	; 57
    1c2a:	0f 92       	push	r0
    1c2c:	19 be       	out	0x39, r1	; 57
    1c2e:	0b b6       	in	r0, 0x3b	; 59
    1c30:	0f 92       	push	r0
    1c32:	1b be       	out	0x3b, r1	; 59
    1c34:	2f 93       	push	r18
    1c36:	3f 93       	push	r19
    1c38:	4f 93       	push	r20
    1c3a:	5f 93       	push	r21
    1c3c:	6f 93       	push	r22
    1c3e:	7f 93       	push	r23
    1c40:	8f 93       	push	r24
    1c42:	9f 93       	push	r25
    1c44:	af 93       	push	r26
    1c46:	bf 93       	push	r27
    1c48:	ef 93       	push	r30
    1c4a:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1c4c:	e0 91 8d 20 	lds	r30, 0x208D	; 0x80208d <tc_tcf0_err_callback>
    1c50:	f0 91 8e 20 	lds	r31, 0x208E	; 0x80208e <tc_tcf0_err_callback+0x1>
    1c54:	30 97       	sbiw	r30, 0x00	; 0
    1c56:	09 f0       	breq	.+2      	; 0x1c5a <__vector_109+0x42>
		tc_tcf0_err_callback();
    1c58:	19 95       	eicall
	}
}
    1c5a:	ff 91       	pop	r31
    1c5c:	ef 91       	pop	r30
    1c5e:	bf 91       	pop	r27
    1c60:	af 91       	pop	r26
    1c62:	9f 91       	pop	r25
    1c64:	8f 91       	pop	r24
    1c66:	7f 91       	pop	r23
    1c68:	6f 91       	pop	r22
    1c6a:	5f 91       	pop	r21
    1c6c:	4f 91       	pop	r20
    1c6e:	3f 91       	pop	r19
    1c70:	2f 91       	pop	r18
    1c72:	0f 90       	pop	r0
    1c74:	0b be       	out	0x3b, r0	; 59
    1c76:	0f 90       	pop	r0
    1c78:	09 be       	out	0x39, r0	; 57
    1c7a:	0f 90       	pop	r0
    1c7c:	08 be       	out	0x38, r0	; 56
    1c7e:	0f 90       	pop	r0
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	0f 90       	pop	r0
    1c84:	1f 90       	pop	r1
    1c86:	18 95       	reti

00001c88 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1c88:	1f 92       	push	r1
    1c8a:	0f 92       	push	r0
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	0f 92       	push	r0
    1c90:	11 24       	eor	r1, r1
    1c92:	08 b6       	in	r0, 0x38	; 56
    1c94:	0f 92       	push	r0
    1c96:	18 be       	out	0x38, r1	; 56
    1c98:	09 b6       	in	r0, 0x39	; 57
    1c9a:	0f 92       	push	r0
    1c9c:	19 be       	out	0x39, r1	; 57
    1c9e:	0b b6       	in	r0, 0x3b	; 59
    1ca0:	0f 92       	push	r0
    1ca2:	1b be       	out	0x3b, r1	; 59
    1ca4:	2f 93       	push	r18
    1ca6:	3f 93       	push	r19
    1ca8:	4f 93       	push	r20
    1caa:	5f 93       	push	r21
    1cac:	6f 93       	push	r22
    1cae:	7f 93       	push	r23
    1cb0:	8f 93       	push	r24
    1cb2:	9f 93       	push	r25
    1cb4:	af 93       	push	r26
    1cb6:	bf 93       	push	r27
    1cb8:	ef 93       	push	r30
    1cba:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1cbc:	e0 91 8b 20 	lds	r30, 0x208B	; 0x80208b <tc_tcf0_cca_callback>
    1cc0:	f0 91 8c 20 	lds	r31, 0x208C	; 0x80208c <tc_tcf0_cca_callback+0x1>
    1cc4:	30 97       	sbiw	r30, 0x00	; 0
    1cc6:	09 f0       	breq	.+2      	; 0x1cca <__vector_110+0x42>
		tc_tcf0_cca_callback();
    1cc8:	19 95       	eicall
	}
}
    1cca:	ff 91       	pop	r31
    1ccc:	ef 91       	pop	r30
    1cce:	bf 91       	pop	r27
    1cd0:	af 91       	pop	r26
    1cd2:	9f 91       	pop	r25
    1cd4:	8f 91       	pop	r24
    1cd6:	7f 91       	pop	r23
    1cd8:	6f 91       	pop	r22
    1cda:	5f 91       	pop	r21
    1cdc:	4f 91       	pop	r20
    1cde:	3f 91       	pop	r19
    1ce0:	2f 91       	pop	r18
    1ce2:	0f 90       	pop	r0
    1ce4:	0b be       	out	0x3b, r0	; 59
    1ce6:	0f 90       	pop	r0
    1ce8:	09 be       	out	0x39, r0	; 57
    1cea:	0f 90       	pop	r0
    1cec:	08 be       	out	0x38, r0	; 56
    1cee:	0f 90       	pop	r0
    1cf0:	0f be       	out	0x3f, r0	; 63
    1cf2:	0f 90       	pop	r0
    1cf4:	1f 90       	pop	r1
    1cf6:	18 95       	reti

00001cf8 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1cf8:	1f 92       	push	r1
    1cfa:	0f 92       	push	r0
    1cfc:	0f b6       	in	r0, 0x3f	; 63
    1cfe:	0f 92       	push	r0
    1d00:	11 24       	eor	r1, r1
    1d02:	08 b6       	in	r0, 0x38	; 56
    1d04:	0f 92       	push	r0
    1d06:	18 be       	out	0x38, r1	; 56
    1d08:	09 b6       	in	r0, 0x39	; 57
    1d0a:	0f 92       	push	r0
    1d0c:	19 be       	out	0x39, r1	; 57
    1d0e:	0b b6       	in	r0, 0x3b	; 59
    1d10:	0f 92       	push	r0
    1d12:	1b be       	out	0x3b, r1	; 59
    1d14:	2f 93       	push	r18
    1d16:	3f 93       	push	r19
    1d18:	4f 93       	push	r20
    1d1a:	5f 93       	push	r21
    1d1c:	6f 93       	push	r22
    1d1e:	7f 93       	push	r23
    1d20:	8f 93       	push	r24
    1d22:	9f 93       	push	r25
    1d24:	af 93       	push	r26
    1d26:	bf 93       	push	r27
    1d28:	ef 93       	push	r30
    1d2a:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1d2c:	e0 91 89 20 	lds	r30, 0x2089	; 0x802089 <tc_tcf0_ccb_callback>
    1d30:	f0 91 8a 20 	lds	r31, 0x208A	; 0x80208a <tc_tcf0_ccb_callback+0x1>
    1d34:	30 97       	sbiw	r30, 0x00	; 0
    1d36:	09 f0       	breq	.+2      	; 0x1d3a <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    1d38:	19 95       	eicall
	}
}
    1d3a:	ff 91       	pop	r31
    1d3c:	ef 91       	pop	r30
    1d3e:	bf 91       	pop	r27
    1d40:	af 91       	pop	r26
    1d42:	9f 91       	pop	r25
    1d44:	8f 91       	pop	r24
    1d46:	7f 91       	pop	r23
    1d48:	6f 91       	pop	r22
    1d4a:	5f 91       	pop	r21
    1d4c:	4f 91       	pop	r20
    1d4e:	3f 91       	pop	r19
    1d50:	2f 91       	pop	r18
    1d52:	0f 90       	pop	r0
    1d54:	0b be       	out	0x3b, r0	; 59
    1d56:	0f 90       	pop	r0
    1d58:	09 be       	out	0x39, r0	; 57
    1d5a:	0f 90       	pop	r0
    1d5c:	08 be       	out	0x38, r0	; 56
    1d5e:	0f 90       	pop	r0
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	0f 90       	pop	r0
    1d64:	1f 90       	pop	r1
    1d66:	18 95       	reti

00001d68 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1d68:	1f 92       	push	r1
    1d6a:	0f 92       	push	r0
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	0f 92       	push	r0
    1d70:	11 24       	eor	r1, r1
    1d72:	08 b6       	in	r0, 0x38	; 56
    1d74:	0f 92       	push	r0
    1d76:	18 be       	out	0x38, r1	; 56
    1d78:	09 b6       	in	r0, 0x39	; 57
    1d7a:	0f 92       	push	r0
    1d7c:	19 be       	out	0x39, r1	; 57
    1d7e:	0b b6       	in	r0, 0x3b	; 59
    1d80:	0f 92       	push	r0
    1d82:	1b be       	out	0x3b, r1	; 59
    1d84:	2f 93       	push	r18
    1d86:	3f 93       	push	r19
    1d88:	4f 93       	push	r20
    1d8a:	5f 93       	push	r21
    1d8c:	6f 93       	push	r22
    1d8e:	7f 93       	push	r23
    1d90:	8f 93       	push	r24
    1d92:	9f 93       	push	r25
    1d94:	af 93       	push	r26
    1d96:	bf 93       	push	r27
    1d98:	ef 93       	push	r30
    1d9a:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1d9c:	e0 91 87 20 	lds	r30, 0x2087	; 0x802087 <tc_tcf0_ccc_callback>
    1da0:	f0 91 88 20 	lds	r31, 0x2088	; 0x802088 <tc_tcf0_ccc_callback+0x1>
    1da4:	30 97       	sbiw	r30, 0x00	; 0
    1da6:	09 f0       	breq	.+2      	; 0x1daa <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    1da8:	19 95       	eicall
	}
}
    1daa:	ff 91       	pop	r31
    1dac:	ef 91       	pop	r30
    1dae:	bf 91       	pop	r27
    1db0:	af 91       	pop	r26
    1db2:	9f 91       	pop	r25
    1db4:	8f 91       	pop	r24
    1db6:	7f 91       	pop	r23
    1db8:	6f 91       	pop	r22
    1dba:	5f 91       	pop	r21
    1dbc:	4f 91       	pop	r20
    1dbe:	3f 91       	pop	r19
    1dc0:	2f 91       	pop	r18
    1dc2:	0f 90       	pop	r0
    1dc4:	0b be       	out	0x3b, r0	; 59
    1dc6:	0f 90       	pop	r0
    1dc8:	09 be       	out	0x39, r0	; 57
    1dca:	0f 90       	pop	r0
    1dcc:	08 be       	out	0x38, r0	; 56
    1dce:	0f 90       	pop	r0
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	0f 90       	pop	r0
    1dd4:	1f 90       	pop	r1
    1dd6:	18 95       	reti

00001dd8 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1dd8:	1f 92       	push	r1
    1dda:	0f 92       	push	r0
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	0f 92       	push	r0
    1de0:	11 24       	eor	r1, r1
    1de2:	08 b6       	in	r0, 0x38	; 56
    1de4:	0f 92       	push	r0
    1de6:	18 be       	out	0x38, r1	; 56
    1de8:	09 b6       	in	r0, 0x39	; 57
    1dea:	0f 92       	push	r0
    1dec:	19 be       	out	0x39, r1	; 57
    1dee:	0b b6       	in	r0, 0x3b	; 59
    1df0:	0f 92       	push	r0
    1df2:	1b be       	out	0x3b, r1	; 59
    1df4:	2f 93       	push	r18
    1df6:	3f 93       	push	r19
    1df8:	4f 93       	push	r20
    1dfa:	5f 93       	push	r21
    1dfc:	6f 93       	push	r22
    1dfe:	7f 93       	push	r23
    1e00:	8f 93       	push	r24
    1e02:	9f 93       	push	r25
    1e04:	af 93       	push	r26
    1e06:	bf 93       	push	r27
    1e08:	ef 93       	push	r30
    1e0a:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1e0c:	e0 91 85 20 	lds	r30, 0x2085	; 0x802085 <tc_tcf0_ccd_callback>
    1e10:	f0 91 86 20 	lds	r31, 0x2086	; 0x802086 <tc_tcf0_ccd_callback+0x1>
    1e14:	30 97       	sbiw	r30, 0x00	; 0
    1e16:	09 f0       	breq	.+2      	; 0x1e1a <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    1e18:	19 95       	eicall
	}
}
    1e1a:	ff 91       	pop	r31
    1e1c:	ef 91       	pop	r30
    1e1e:	bf 91       	pop	r27
    1e20:	af 91       	pop	r26
    1e22:	9f 91       	pop	r25
    1e24:	8f 91       	pop	r24
    1e26:	7f 91       	pop	r23
    1e28:	6f 91       	pop	r22
    1e2a:	5f 91       	pop	r21
    1e2c:	4f 91       	pop	r20
    1e2e:	3f 91       	pop	r19
    1e30:	2f 91       	pop	r18
    1e32:	0f 90       	pop	r0
    1e34:	0b be       	out	0x3b, r0	; 59
    1e36:	0f 90       	pop	r0
    1e38:	09 be       	out	0x39, r0	; 57
    1e3a:	0f 90       	pop	r0
    1e3c:	08 be       	out	0x38, r0	; 56
    1e3e:	0f 90       	pop	r0
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	0f 90       	pop	r0
    1e44:	1f 90       	pop	r1
    1e46:	18 95       	reti

00001e48 <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    1e48:	1f 92       	push	r1
    1e4a:	0f 92       	push	r0
    1e4c:	0f b6       	in	r0, 0x3f	; 63
    1e4e:	0f 92       	push	r0
    1e50:	11 24       	eor	r1, r1
    1e52:	08 b6       	in	r0, 0x38	; 56
    1e54:	0f 92       	push	r0
    1e56:	18 be       	out	0x38, r1	; 56
    1e58:	09 b6       	in	r0, 0x39	; 57
    1e5a:	0f 92       	push	r0
    1e5c:	19 be       	out	0x39, r1	; 57
    1e5e:	0b b6       	in	r0, 0x3b	; 59
    1e60:	0f 92       	push	r0
    1e62:	1b be       	out	0x3b, r1	; 59
    1e64:	2f 93       	push	r18
    1e66:	3f 93       	push	r19
    1e68:	4f 93       	push	r20
    1e6a:	5f 93       	push	r21
    1e6c:	6f 93       	push	r22
    1e6e:	7f 93       	push	r23
    1e70:	8f 93       	push	r24
    1e72:	9f 93       	push	r25
    1e74:	af 93       	push	r26
    1e76:	bf 93       	push	r27
    1e78:	ef 93       	push	r30
    1e7a:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    1e7c:	e0 91 83 20 	lds	r30, 0x2083	; 0x802083 <tc_tcf1_ovf_callback>
    1e80:	f0 91 84 20 	lds	r31, 0x2084	; 0x802084 <tc_tcf1_ovf_callback+0x1>
    1e84:	30 97       	sbiw	r30, 0x00	; 0
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    1e88:	19 95       	eicall
	}
}
    1e8a:	ff 91       	pop	r31
    1e8c:	ef 91       	pop	r30
    1e8e:	bf 91       	pop	r27
    1e90:	af 91       	pop	r26
    1e92:	9f 91       	pop	r25
    1e94:	8f 91       	pop	r24
    1e96:	7f 91       	pop	r23
    1e98:	6f 91       	pop	r22
    1e9a:	5f 91       	pop	r21
    1e9c:	4f 91       	pop	r20
    1e9e:	3f 91       	pop	r19
    1ea0:	2f 91       	pop	r18
    1ea2:	0f 90       	pop	r0
    1ea4:	0b be       	out	0x3b, r0	; 59
    1ea6:	0f 90       	pop	r0
    1ea8:	09 be       	out	0x39, r0	; 57
    1eaa:	0f 90       	pop	r0
    1eac:	08 be       	out	0x38, r0	; 56
    1eae:	0f 90       	pop	r0
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	0f 90       	pop	r0
    1eb4:	1f 90       	pop	r1
    1eb6:	18 95       	reti

00001eb8 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    1eb8:	1f 92       	push	r1
    1eba:	0f 92       	push	r0
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	0f 92       	push	r0
    1ec0:	11 24       	eor	r1, r1
    1ec2:	08 b6       	in	r0, 0x38	; 56
    1ec4:	0f 92       	push	r0
    1ec6:	18 be       	out	0x38, r1	; 56
    1ec8:	09 b6       	in	r0, 0x39	; 57
    1eca:	0f 92       	push	r0
    1ecc:	19 be       	out	0x39, r1	; 57
    1ece:	0b b6       	in	r0, 0x3b	; 59
    1ed0:	0f 92       	push	r0
    1ed2:	1b be       	out	0x3b, r1	; 59
    1ed4:	2f 93       	push	r18
    1ed6:	3f 93       	push	r19
    1ed8:	4f 93       	push	r20
    1eda:	5f 93       	push	r21
    1edc:	6f 93       	push	r22
    1ede:	7f 93       	push	r23
    1ee0:	8f 93       	push	r24
    1ee2:	9f 93       	push	r25
    1ee4:	af 93       	push	r26
    1ee6:	bf 93       	push	r27
    1ee8:	ef 93       	push	r30
    1eea:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    1eec:	e0 91 81 20 	lds	r30, 0x2081	; 0x802081 <tc_tcf1_err_callback>
    1ef0:	f0 91 82 20 	lds	r31, 0x2082	; 0x802082 <tc_tcf1_err_callback+0x1>
    1ef4:	30 97       	sbiw	r30, 0x00	; 0
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <__vector_115+0x42>
		tc_tcf1_err_callback();
    1ef8:	19 95       	eicall
	}
}
    1efa:	ff 91       	pop	r31
    1efc:	ef 91       	pop	r30
    1efe:	bf 91       	pop	r27
    1f00:	af 91       	pop	r26
    1f02:	9f 91       	pop	r25
    1f04:	8f 91       	pop	r24
    1f06:	7f 91       	pop	r23
    1f08:	6f 91       	pop	r22
    1f0a:	5f 91       	pop	r21
    1f0c:	4f 91       	pop	r20
    1f0e:	3f 91       	pop	r19
    1f10:	2f 91       	pop	r18
    1f12:	0f 90       	pop	r0
    1f14:	0b be       	out	0x3b, r0	; 59
    1f16:	0f 90       	pop	r0
    1f18:	09 be       	out	0x39, r0	; 57
    1f1a:	0f 90       	pop	r0
    1f1c:	08 be       	out	0x38, r0	; 56
    1f1e:	0f 90       	pop	r0
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	0f 90       	pop	r0
    1f24:	1f 90       	pop	r1
    1f26:	18 95       	reti

00001f28 <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1f28:	1f 92       	push	r1
    1f2a:	0f 92       	push	r0
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	0f 92       	push	r0
    1f30:	11 24       	eor	r1, r1
    1f32:	08 b6       	in	r0, 0x38	; 56
    1f34:	0f 92       	push	r0
    1f36:	18 be       	out	0x38, r1	; 56
    1f38:	09 b6       	in	r0, 0x39	; 57
    1f3a:	0f 92       	push	r0
    1f3c:	19 be       	out	0x39, r1	; 57
    1f3e:	0b b6       	in	r0, 0x3b	; 59
    1f40:	0f 92       	push	r0
    1f42:	1b be       	out	0x3b, r1	; 59
    1f44:	2f 93       	push	r18
    1f46:	3f 93       	push	r19
    1f48:	4f 93       	push	r20
    1f4a:	5f 93       	push	r21
    1f4c:	6f 93       	push	r22
    1f4e:	7f 93       	push	r23
    1f50:	8f 93       	push	r24
    1f52:	9f 93       	push	r25
    1f54:	af 93       	push	r26
    1f56:	bf 93       	push	r27
    1f58:	ef 93       	push	r30
    1f5a:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1f5c:	e0 91 7f 20 	lds	r30, 0x207F	; 0x80207f <tc_tcf1_cca_callback>
    1f60:	f0 91 80 20 	lds	r31, 0x2080	; 0x802080 <tc_tcf1_cca_callback+0x1>
    1f64:	30 97       	sbiw	r30, 0x00	; 0
    1f66:	09 f0       	breq	.+2      	; 0x1f6a <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1f68:	19 95       	eicall
	}
}
    1f6a:	ff 91       	pop	r31
    1f6c:	ef 91       	pop	r30
    1f6e:	bf 91       	pop	r27
    1f70:	af 91       	pop	r26
    1f72:	9f 91       	pop	r25
    1f74:	8f 91       	pop	r24
    1f76:	7f 91       	pop	r23
    1f78:	6f 91       	pop	r22
    1f7a:	5f 91       	pop	r21
    1f7c:	4f 91       	pop	r20
    1f7e:	3f 91       	pop	r19
    1f80:	2f 91       	pop	r18
    1f82:	0f 90       	pop	r0
    1f84:	0b be       	out	0x3b, r0	; 59
    1f86:	0f 90       	pop	r0
    1f88:	09 be       	out	0x39, r0	; 57
    1f8a:	0f 90       	pop	r0
    1f8c:	08 be       	out	0x38, r0	; 56
    1f8e:	0f 90       	pop	r0
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	0f 90       	pop	r0
    1f94:	1f 90       	pop	r1
    1f96:	18 95       	reti

00001f98 <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1f98:	1f 92       	push	r1
    1f9a:	0f 92       	push	r0
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	0f 92       	push	r0
    1fa0:	11 24       	eor	r1, r1
    1fa2:	08 b6       	in	r0, 0x38	; 56
    1fa4:	0f 92       	push	r0
    1fa6:	18 be       	out	0x38, r1	; 56
    1fa8:	09 b6       	in	r0, 0x39	; 57
    1faa:	0f 92       	push	r0
    1fac:	19 be       	out	0x39, r1	; 57
    1fae:	0b b6       	in	r0, 0x3b	; 59
    1fb0:	0f 92       	push	r0
    1fb2:	1b be       	out	0x3b, r1	; 59
    1fb4:	2f 93       	push	r18
    1fb6:	3f 93       	push	r19
    1fb8:	4f 93       	push	r20
    1fba:	5f 93       	push	r21
    1fbc:	6f 93       	push	r22
    1fbe:	7f 93       	push	r23
    1fc0:	8f 93       	push	r24
    1fc2:	9f 93       	push	r25
    1fc4:	af 93       	push	r26
    1fc6:	bf 93       	push	r27
    1fc8:	ef 93       	push	r30
    1fca:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    1fcc:	e0 91 7d 20 	lds	r30, 0x207D	; 0x80207d <tc_tcf1_ccb_callback>
    1fd0:	f0 91 7e 20 	lds	r31, 0x207E	; 0x80207e <tc_tcf1_ccb_callback+0x1>
    1fd4:	30 97       	sbiw	r30, 0x00	; 0
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    1fd8:	19 95       	eicall
	}
}
    1fda:	ff 91       	pop	r31
    1fdc:	ef 91       	pop	r30
    1fde:	bf 91       	pop	r27
    1fe0:	af 91       	pop	r26
    1fe2:	9f 91       	pop	r25
    1fe4:	8f 91       	pop	r24
    1fe6:	7f 91       	pop	r23
    1fe8:	6f 91       	pop	r22
    1fea:	5f 91       	pop	r21
    1fec:	4f 91       	pop	r20
    1fee:	3f 91       	pop	r19
    1ff0:	2f 91       	pop	r18
    1ff2:	0f 90       	pop	r0
    1ff4:	0b be       	out	0x3b, r0	; 59
    1ff6:	0f 90       	pop	r0
    1ff8:	09 be       	out	0x39, r0	; 57
    1ffa:	0f 90       	pop	r0
    1ffc:	08 be       	out	0x38, r0	; 56
    1ffe:	0f 90       	pop	r0
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	0f 90       	pop	r0
    2004:	1f 90       	pop	r1
    2006:	18 95       	reti

00002008 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    2008:	fc 01       	movw	r30, r24
    200a:	91 81       	ldd	r25, Z+1	; 0x01
    200c:	95 ff       	sbrs	r25, 5
    200e:	fd cf       	rjmp	.-6      	; 0x200a <usart_putchar+0x2>
    2010:	60 83       	st	Z, r22
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	08 95       	ret

00002018 <usart_getchar>:
    2018:	fc 01       	movw	r30, r24
    201a:	91 81       	ldd	r25, Z+1	; 0x01
    201c:	99 23       	and	r25, r25
    201e:	ec f7       	brge	.-6      	; 0x201a <usart_getchar+0x2>
    2020:	80 81       	ld	r24, Z
    2022:	08 95       	ret

00002024 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    2024:	4f 92       	push	r4
    2026:	5f 92       	push	r5
    2028:	6f 92       	push	r6
    202a:	7f 92       	push	r7
    202c:	8f 92       	push	r8
    202e:	9f 92       	push	r9
    2030:	af 92       	push	r10
    2032:	bf 92       	push	r11
    2034:	ef 92       	push	r14
    2036:	ff 92       	push	r15
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
    203e:	7c 01       	movw	r14, r24
    2040:	4a 01       	movw	r8, r20
    2042:	5b 01       	movw	r10, r22
    2044:	28 01       	movw	r4, r16
    2046:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    2048:	fc 01       	movw	r30, r24
    204a:	84 81       	ldd	r24, Z+4	; 0x04
    204c:	82 ff       	sbrs	r24, 2
    204e:	16 c0       	rjmp	.+44     	; 0x207c <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    2050:	d9 01       	movw	r26, r18
    2052:	c8 01       	movw	r24, r16
    2054:	68 94       	set
    2056:	12 f8       	bld	r1, 2
    2058:	b6 95       	lsr	r27
    205a:	a7 95       	ror	r26
    205c:	97 95       	ror	r25
    205e:	87 95       	ror	r24
    2060:	16 94       	lsr	r1
    2062:	d1 f7       	brne	.-12     	; 0x2058 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    2064:	b9 01       	movw	r22, r18
    2066:	a8 01       	movw	r20, r16
    2068:	03 2e       	mov	r0, r19
    206a:	36 e1       	ldi	r19, 0x16	; 22
    206c:	76 95       	lsr	r23
    206e:	67 95       	ror	r22
    2070:	57 95       	ror	r21
    2072:	47 95       	ror	r20
    2074:	3a 95       	dec	r19
    2076:	d1 f7       	brne	.-12     	; 0x206c <usart_set_baudrate+0x48>
    2078:	30 2d       	mov	r19, r0
    207a:	15 c0       	rjmp	.+42     	; 0x20a6 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    207c:	d9 01       	movw	r26, r18
    207e:	c8 01       	movw	r24, r16
    2080:	68 94       	set
    2082:	13 f8       	bld	r1, 3
    2084:	b6 95       	lsr	r27
    2086:	a7 95       	ror	r26
    2088:	97 95       	ror	r25
    208a:	87 95       	ror	r24
    208c:	16 94       	lsr	r1
    208e:	d1 f7       	brne	.-12     	; 0x2084 <usart_set_baudrate+0x60>
		min_rate /= 2;
    2090:	b9 01       	movw	r22, r18
    2092:	a8 01       	movw	r20, r16
    2094:	03 2e       	mov	r0, r19
    2096:	37 e1       	ldi	r19, 0x17	; 23
    2098:	76 95       	lsr	r23
    209a:	67 95       	ror	r22
    209c:	57 95       	ror	r21
    209e:	47 95       	ror	r20
    20a0:	3a 95       	dec	r19
    20a2:	d1 f7       	brne	.-12     	; 0x2098 <usart_set_baudrate+0x74>
    20a4:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    20a6:	88 15       	cp	r24, r8
    20a8:	99 05       	cpc	r25, r9
    20aa:	aa 05       	cpc	r26, r10
    20ac:	bb 05       	cpc	r27, r11
    20ae:	08 f4       	brcc	.+2      	; 0x20b2 <usart_set_baudrate+0x8e>
    20b0:	a6 c0       	rjmp	.+332    	; 0x21fe <usart_set_baudrate+0x1da>
    20b2:	84 16       	cp	r8, r20
    20b4:	95 06       	cpc	r9, r21
    20b6:	a6 06       	cpc	r10, r22
    20b8:	b7 06       	cpc	r11, r23
    20ba:	08 f4       	brcc	.+2      	; 0x20be <usart_set_baudrate+0x9a>
    20bc:	a2 c0       	rjmp	.+324    	; 0x2202 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    20be:	f7 01       	movw	r30, r14
    20c0:	84 81       	ldd	r24, Z+4	; 0x04
    20c2:	82 fd       	sbrc	r24, 2
    20c4:	04 c0       	rjmp	.+8      	; 0x20ce <usart_set_baudrate+0xaa>
		baud *= 2;
    20c6:	88 0c       	add	r8, r8
    20c8:	99 1c       	adc	r9, r9
    20ca:	aa 1c       	adc	r10, r10
    20cc:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    20ce:	c3 01       	movw	r24, r6
    20d0:	b2 01       	movw	r22, r4
    20d2:	a5 01       	movw	r20, r10
    20d4:	94 01       	movw	r18, r8
    20d6:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    20da:	2f 3f       	cpi	r18, 0xFF	; 255
    20dc:	31 05       	cpc	r19, r1
    20de:	41 05       	cpc	r20, r1
    20e0:	51 05       	cpc	r21, r1
    20e2:	08 f4       	brcc	.+2      	; 0x20e6 <usart_set_baudrate+0xc2>
    20e4:	90 c0       	rjmp	.+288    	; 0x2206 <usart_set_baudrate+0x1e2>
    20e6:	8f ef       	ldi	r24, 0xFF	; 255
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a0 e0       	ldi	r26, 0x00	; 0
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	c9 ef       	ldi	r28, 0xF9	; 249
    20f0:	05 c0       	rjmp	.+10     	; 0x20fc <usart_set_baudrate+0xd8>
    20f2:	28 17       	cp	r18, r24
    20f4:	39 07       	cpc	r19, r25
    20f6:	4a 07       	cpc	r20, r26
    20f8:	5b 07       	cpc	r21, r27
    20fa:	58 f0       	brcs	.+22     	; 0x2112 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	aa 1f       	adc	r26, r26
    2102:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    2104:	cd 3f       	cpi	r28, 0xFD	; 253
    2106:	0c f4       	brge	.+2      	; 0x210a <usart_set_baudrate+0xe6>
			limit |= 1;
    2108:	81 60       	ori	r24, 0x01	; 1
    210a:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    210c:	c7 30       	cpi	r28, 0x07	; 7
    210e:	89 f7       	brne	.-30     	; 0x20f2 <usart_set_baudrate+0xce>
    2110:	4f c0       	rjmp	.+158    	; 0x21b0 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    2112:	cc 23       	and	r28, r28
    2114:	0c f0       	brlt	.+2      	; 0x2118 <usart_set_baudrate+0xf4>
    2116:	4c c0       	rjmp	.+152    	; 0x21b0 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    2118:	d5 01       	movw	r26, r10
    211a:	c4 01       	movw	r24, r8
    211c:	88 0f       	add	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	aa 1f       	adc	r26, r26
    2122:	bb 1f       	adc	r27, r27
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	aa 1f       	adc	r26, r26
    212a:	bb 1f       	adc	r27, r27
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	aa 1f       	adc	r26, r26
    2132:	bb 1f       	adc	r27, r27
    2134:	48 1a       	sub	r4, r24
    2136:	59 0a       	sbc	r5, r25
    2138:	6a 0a       	sbc	r6, r26
    213a:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    213c:	ce 3f       	cpi	r28, 0xFE	; 254
    213e:	f4 f4       	brge	.+60     	; 0x217c <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    2140:	8d ef       	ldi	r24, 0xFD	; 253
    2142:	9f ef       	ldi	r25, 0xFF	; 255
    2144:	8c 1b       	sub	r24, r28
    2146:	91 09       	sbc	r25, r1
    2148:	c7 fd       	sbrc	r28, 7
    214a:	93 95       	inc	r25
    214c:	04 c0       	rjmp	.+8      	; 0x2156 <usart_set_baudrate+0x132>
    214e:	44 0c       	add	r4, r4
    2150:	55 1c       	adc	r5, r5
    2152:	66 1c       	adc	r6, r6
    2154:	77 1c       	adc	r7, r7
    2156:	8a 95       	dec	r24
    2158:	d2 f7       	brpl	.-12     	; 0x214e <usart_set_baudrate+0x12a>
    215a:	d5 01       	movw	r26, r10
    215c:	c4 01       	movw	r24, r8
    215e:	b6 95       	lsr	r27
    2160:	a7 95       	ror	r26
    2162:	97 95       	ror	r25
    2164:	87 95       	ror	r24
    2166:	bc 01       	movw	r22, r24
    2168:	cd 01       	movw	r24, r26
    216a:	64 0d       	add	r22, r4
    216c:	75 1d       	adc	r23, r5
    216e:	86 1d       	adc	r24, r6
    2170:	97 1d       	adc	r25, r7
    2172:	a5 01       	movw	r20, r10
    2174:	94 01       	movw	r18, r8
    2176:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <__udivmodsi4>
    217a:	37 c0       	rjmp	.+110    	; 0x21ea <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    217c:	83 e0       	ldi	r24, 0x03	; 3
    217e:	8c 0f       	add	r24, r28
    2180:	a5 01       	movw	r20, r10
    2182:	94 01       	movw	r18, r8
    2184:	04 c0       	rjmp	.+8      	; 0x218e <usart_set_baudrate+0x16a>
    2186:	22 0f       	add	r18, r18
    2188:	33 1f       	adc	r19, r19
    218a:	44 1f       	adc	r20, r20
    218c:	55 1f       	adc	r21, r21
    218e:	8a 95       	dec	r24
    2190:	d2 f7       	brpl	.-12     	; 0x2186 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    2192:	da 01       	movw	r26, r20
    2194:	c9 01       	movw	r24, r18
    2196:	b6 95       	lsr	r27
    2198:	a7 95       	ror	r26
    219a:	97 95       	ror	r25
    219c:	87 95       	ror	r24
    219e:	bc 01       	movw	r22, r24
    21a0:	cd 01       	movw	r24, r26
    21a2:	64 0d       	add	r22, r4
    21a4:	75 1d       	adc	r23, r5
    21a6:	86 1d       	adc	r24, r6
    21a8:	97 1d       	adc	r25, r7
    21aa:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <__udivmodsi4>
    21ae:	1d c0       	rjmp	.+58     	; 0x21ea <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    21b0:	83 e0       	ldi	r24, 0x03	; 3
    21b2:	8c 0f       	add	r24, r28
    21b4:	a5 01       	movw	r20, r10
    21b6:	94 01       	movw	r18, r8
    21b8:	04 c0       	rjmp	.+8      	; 0x21c2 <usart_set_baudrate+0x19e>
    21ba:	22 0f       	add	r18, r18
    21bc:	33 1f       	adc	r19, r19
    21be:	44 1f       	adc	r20, r20
    21c0:	55 1f       	adc	r21, r21
    21c2:	8a 95       	dec	r24
    21c4:	d2 f7       	brpl	.-12     	; 0x21ba <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    21c6:	da 01       	movw	r26, r20
    21c8:	c9 01       	movw	r24, r18
    21ca:	b6 95       	lsr	r27
    21cc:	a7 95       	ror	r26
    21ce:	97 95       	ror	r25
    21d0:	87 95       	ror	r24
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	64 0d       	add	r22, r4
    21d8:	75 1d       	adc	r23, r5
    21da:	86 1d       	adc	r24, r6
    21dc:	97 1d       	adc	r25, r7
    21de:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <__udivmodsi4>
    21e2:	21 50       	subi	r18, 0x01	; 1
    21e4:	31 09       	sbc	r19, r1
    21e6:	41 09       	sbc	r20, r1
    21e8:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    21ea:	83 2f       	mov	r24, r19
    21ec:	8f 70       	andi	r24, 0x0F	; 15
    21ee:	c2 95       	swap	r28
    21f0:	c0 7f       	andi	r28, 0xF0	; 240
    21f2:	c8 2b       	or	r28, r24
    21f4:	f7 01       	movw	r30, r14
    21f6:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    21f8:	26 83       	std	Z+6, r18	; 0x06

	return true;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	18 c0       	rjmp	.+48     	; 0x222e <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	16 c0       	rjmp	.+44     	; 0x222e <usart_set_baudrate+0x20a>
    2202:	80 e0       	ldi	r24, 0x00	; 0
    2204:	14 c0       	rjmp	.+40     	; 0x222e <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    2206:	d5 01       	movw	r26, r10
    2208:	c4 01       	movw	r24, r8
    220a:	88 0f       	add	r24, r24
    220c:	99 1f       	adc	r25, r25
    220e:	aa 1f       	adc	r26, r26
    2210:	bb 1f       	adc	r27, r27
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	aa 1f       	adc	r26, r26
    2218:	bb 1f       	adc	r27, r27
    221a:	88 0f       	add	r24, r24
    221c:	99 1f       	adc	r25, r25
    221e:	aa 1f       	adc	r26, r26
    2220:	bb 1f       	adc	r27, r27
    2222:	48 1a       	sub	r4, r24
    2224:	59 0a       	sbc	r5, r25
    2226:	6a 0a       	sbc	r6, r26
    2228:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    222a:	c9 ef       	ldi	r28, 0xF9	; 249
    222c:	89 cf       	rjmp	.-238    	; 0x2140 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    222e:	cf 91       	pop	r28
    2230:	1f 91       	pop	r17
    2232:	0f 91       	pop	r16
    2234:	ff 90       	pop	r15
    2236:	ef 90       	pop	r14
    2238:	bf 90       	pop	r11
    223a:	af 90       	pop	r10
    223c:	9f 90       	pop	r9
    223e:	8f 90       	pop	r8
    2240:	7f 90       	pop	r7
    2242:	6f 90       	pop	r6
    2244:	5f 90       	pop	r5
    2246:	4f 90       	pop	r4
    2248:	08 95       	ret

0000224a <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	ec 01       	movw	r28, r24
    2254:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2256:	00 97       	sbiw	r24, 0x00	; 0
    2258:	09 f4       	brne	.+2      	; 0x225c <usart_init_rs232+0x12>
    225a:	5d c1       	rjmp	.+698    	; 0x2516 <usart_init_rs232+0x2cc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    225c:	80 3c       	cpi	r24, 0xC0	; 192
    225e:	91 05       	cpc	r25, r1
    2260:	29 f4       	brne	.+10     	; 0x226c <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    2262:	60 e1       	ldi	r22, 0x10	; 16
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    226a:	55 c1       	rjmp	.+682    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    226c:	c0 34       	cpi	r28, 0x40	; 64
    226e:	84 e0       	ldi	r24, 0x04	; 4
    2270:	d8 07       	cpc	r29, r24
    2272:	29 f4       	brne	.+10     	; 0x227e <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    2274:	68 e0       	ldi	r22, 0x08	; 8
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    227c:	4c c1       	rjmp	.+664    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    227e:	c1 15       	cp	r28, r1
    2280:	e4 e0       	ldi	r30, 0x04	; 4
    2282:	de 07       	cpc	r29, r30
    2284:	29 f4       	brne	.+10     	; 0x2290 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2286:	64 e0       	ldi	r22, 0x04	; 4
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    228e:	43 c1       	rjmp	.+646    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2290:	c0 38       	cpi	r28, 0x80	; 128
    2292:	f1 e0       	ldi	r31, 0x01	; 1
    2294:	df 07       	cpc	r29, r31
    2296:	29 f4       	brne	.+10     	; 0x22a2 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2298:	62 e0       	ldi	r22, 0x02	; 2
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    22a0:	3a c1       	rjmp	.+628    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    22a2:	c1 15       	cp	r28, r1
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	d8 07       	cpc	r29, r24
    22a8:	29 f4       	brne	.+10     	; 0x22b4 <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    22aa:	61 e0       	ldi	r22, 0x01	; 1
    22ac:	80 e0       	ldi	r24, 0x00	; 0
    22ae:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    22b2:	31 c1       	rjmp	.+610    	; 0x2516 <usart_init_rs232+0x2cc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    22b4:	c0 38       	cpi	r28, 0x80	; 128
    22b6:	e3 e0       	ldi	r30, 0x03	; 3
    22b8:	de 07       	cpc	r29, r30
    22ba:	29 f4       	brne	.+10     	; 0x22c6 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    22bc:	61 e0       	ldi	r22, 0x01	; 1
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    22c4:	28 c1       	rjmp	.+592    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    22c6:	c0 39       	cpi	r28, 0x90	; 144
    22c8:	f3 e0       	ldi	r31, 0x03	; 3
    22ca:	df 07       	cpc	r29, r31
    22cc:	29 f4       	brne	.+10     	; 0x22d8 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    22ce:	61 e0       	ldi	r22, 0x01	; 1
    22d0:	82 e0       	ldi	r24, 0x02	; 2
    22d2:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    22d6:	1f c1       	rjmp	.+574    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    22d8:	c1 15       	cp	r28, r1
    22da:	82 e0       	ldi	r24, 0x02	; 2
    22dc:	d8 07       	cpc	r29, r24
    22de:	29 f4       	brne	.+10     	; 0x22ea <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    22e0:	62 e0       	ldi	r22, 0x02	; 2
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    22e8:	16 c1       	rjmp	.+556    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    22ea:	c0 34       	cpi	r28, 0x40	; 64
    22ec:	e2 e0       	ldi	r30, 0x02	; 2
    22ee:	de 07       	cpc	r29, r30
    22f0:	29 f4       	brne	.+10     	; 0x22fc <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    22f2:	62 e0       	ldi	r22, 0x02	; 2
    22f4:	82 e0       	ldi	r24, 0x02	; 2
    22f6:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    22fa:	0d c1       	rjmp	.+538    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    22fc:	c1 15       	cp	r28, r1
    22fe:	f3 e0       	ldi	r31, 0x03	; 3
    2300:	df 07       	cpc	r29, r31
    2302:	29 f4       	brne	.+10     	; 0x230e <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    2304:	64 e0       	ldi	r22, 0x04	; 4
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    230c:	04 c1       	rjmp	.+520    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    230e:	c0 32       	cpi	r28, 0x20	; 32
    2310:	83 e0       	ldi	r24, 0x03	; 3
    2312:	d8 07       	cpc	r29, r24
    2314:	29 f4       	brne	.+10     	; 0x2320 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    2316:	64 e0       	ldi	r22, 0x04	; 4
    2318:	82 e0       	ldi	r24, 0x02	; 2
    231a:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    231e:	fb c0       	rjmp	.+502    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    2320:	c1 15       	cp	r28, r1
    2322:	e8 e0       	ldi	r30, 0x08	; 8
    2324:	de 07       	cpc	r29, r30
    2326:	29 f4       	brne	.+10     	; 0x2332 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2328:	61 e0       	ldi	r22, 0x01	; 1
    232a:	83 e0       	ldi	r24, 0x03	; 3
    232c:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    2330:	f2 c0       	rjmp	.+484    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    2332:	c1 15       	cp	r28, r1
    2334:	f9 e0       	ldi	r31, 0x09	; 9
    2336:	df 07       	cpc	r29, r31
    2338:	29 f4       	brne	.+10     	; 0x2344 <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    233a:	61 e0       	ldi	r22, 0x01	; 1
    233c:	84 e0       	ldi	r24, 0x04	; 4
    233e:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    2342:	e9 c0       	rjmp	.+466    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    2344:	c1 15       	cp	r28, r1
    2346:	8a e0       	ldi	r24, 0x0A	; 10
    2348:	d8 07       	cpc	r29, r24
    234a:	29 f4       	brne	.+10     	; 0x2356 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    234c:	61 e0       	ldi	r22, 0x01	; 1
    234e:	85 e0       	ldi	r24, 0x05	; 5
    2350:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    2354:	e0 c0       	rjmp	.+448    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    2356:	c1 15       	cp	r28, r1
    2358:	eb e0       	ldi	r30, 0x0B	; 11
    235a:	de 07       	cpc	r29, r30
    235c:	29 f4       	brne	.+10     	; 0x2368 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    235e:	61 e0       	ldi	r22, 0x01	; 1
    2360:	86 e0       	ldi	r24, 0x06	; 6
    2362:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    2366:	d7 c0       	rjmp	.+430    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    2368:	c0 34       	cpi	r28, 0x40	; 64
    236a:	f8 e0       	ldi	r31, 0x08	; 8
    236c:	df 07       	cpc	r29, r31
    236e:	29 f4       	brne	.+10     	; 0x237a <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2370:	62 e0       	ldi	r22, 0x02	; 2
    2372:	83 e0       	ldi	r24, 0x03	; 3
    2374:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    2378:	ce c0       	rjmp	.+412    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    237a:	c0 34       	cpi	r28, 0x40	; 64
    237c:	89 e0       	ldi	r24, 0x09	; 9
    237e:	d8 07       	cpc	r29, r24
    2380:	29 f4       	brne	.+10     	; 0x238c <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2382:	62 e0       	ldi	r22, 0x02	; 2
    2384:	84 e0       	ldi	r24, 0x04	; 4
    2386:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    238a:	c5 c0       	rjmp	.+394    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    238c:	c0 34       	cpi	r28, 0x40	; 64
    238e:	ea e0       	ldi	r30, 0x0A	; 10
    2390:	de 07       	cpc	r29, r30
    2392:	29 f4       	brne	.+10     	; 0x239e <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2394:	62 e0       	ldi	r22, 0x02	; 2
    2396:	85 e0       	ldi	r24, 0x05	; 5
    2398:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    239c:	bc c0       	rjmp	.+376    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    239e:	c0 34       	cpi	r28, 0x40	; 64
    23a0:	fb e0       	ldi	r31, 0x0B	; 11
    23a2:	df 07       	cpc	r29, r31
    23a4:	29 f4       	brne	.+10     	; 0x23b0 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    23a6:	62 e0       	ldi	r22, 0x02	; 2
    23a8:	86 e0       	ldi	r24, 0x06	; 6
    23aa:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    23ae:	b3 c0       	rjmp	.+358    	; 0x2516 <usart_init_rs232+0x2cc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    23b0:	c0 39       	cpi	r28, 0x90	; 144
    23b2:	88 e0       	ldi	r24, 0x08	; 8
    23b4:	d8 07       	cpc	r29, r24
    23b6:	29 f4       	brne	.+10     	; 0x23c2 <usart_init_rs232+0x178>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    23b8:	64 e0       	ldi	r22, 0x04	; 4
    23ba:	83 e0       	ldi	r24, 0x03	; 3
    23bc:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    23c0:	aa c0       	rjmp	.+340    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    23c2:	c0 39       	cpi	r28, 0x90	; 144
    23c4:	e9 e0       	ldi	r30, 0x09	; 9
    23c6:	de 07       	cpc	r29, r30
    23c8:	29 f4       	brne	.+10     	; 0x23d4 <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    23ca:	64 e0       	ldi	r22, 0x04	; 4
    23cc:	84 e0       	ldi	r24, 0x04	; 4
    23ce:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    23d2:	a1 c0       	rjmp	.+322    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    23d4:	c0 39       	cpi	r28, 0x90	; 144
    23d6:	fa e0       	ldi	r31, 0x0A	; 10
    23d8:	df 07       	cpc	r29, r31
    23da:	29 f4       	brne	.+10     	; 0x23e6 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    23dc:	64 e0       	ldi	r22, 0x04	; 4
    23de:	85 e0       	ldi	r24, 0x05	; 5
    23e0:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    23e4:	98 c0       	rjmp	.+304    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    23e6:	c0 39       	cpi	r28, 0x90	; 144
    23e8:	8b e0       	ldi	r24, 0x0B	; 11
    23ea:	d8 07       	cpc	r29, r24
    23ec:	29 f4       	brne	.+10     	; 0x23f8 <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    23ee:	64 e0       	ldi	r22, 0x04	; 4
    23f0:	86 e0       	ldi	r24, 0x06	; 6
    23f2:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    23f6:	8f c0       	rjmp	.+286    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    23f8:	c0 3c       	cpi	r28, 0xC0	; 192
    23fa:	e8 e0       	ldi	r30, 0x08	; 8
    23fc:	de 07       	cpc	r29, r30
    23fe:	29 f4       	brne	.+10     	; 0x240a <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2400:	68 e0       	ldi	r22, 0x08	; 8
    2402:	83 e0       	ldi	r24, 0x03	; 3
    2404:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    2408:	86 c0       	rjmp	.+268    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    240a:	c0 3c       	cpi	r28, 0xC0	; 192
    240c:	f9 e0       	ldi	r31, 0x09	; 9
    240e:	df 07       	cpc	r29, r31
    2410:	29 f4       	brne	.+10     	; 0x241c <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    2412:	68 e0       	ldi	r22, 0x08	; 8
    2414:	84 e0       	ldi	r24, 0x04	; 4
    2416:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    241a:	7d c0       	rjmp	.+250    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    241c:	c0 3c       	cpi	r28, 0xC0	; 192
    241e:	8a e0       	ldi	r24, 0x0A	; 10
    2420:	d8 07       	cpc	r29, r24
    2422:	29 f4       	brne	.+10     	; 0x242e <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    2424:	68 e0       	ldi	r22, 0x08	; 8
    2426:	85 e0       	ldi	r24, 0x05	; 5
    2428:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    242c:	74 c0       	rjmp	.+232    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    242e:	c0 3c       	cpi	r28, 0xC0	; 192
    2430:	eb e0       	ldi	r30, 0x0B	; 11
    2432:	de 07       	cpc	r29, r30
    2434:	29 f4       	brne	.+10     	; 0x2440 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    2436:	68 e0       	ldi	r22, 0x08	; 8
    2438:	86 e0       	ldi	r24, 0x06	; 6
    243a:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    243e:	6b c0       	rjmp	.+214    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2440:	c0 3a       	cpi	r28, 0xA0	; 160
    2442:	f8 e0       	ldi	r31, 0x08	; 8
    2444:	df 07       	cpc	r29, r31
    2446:	29 f4       	brne	.+10     	; 0x2452 <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2448:	60 e1       	ldi	r22, 0x10	; 16
    244a:	83 e0       	ldi	r24, 0x03	; 3
    244c:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    2450:	62 c0       	rjmp	.+196    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2452:	c0 3a       	cpi	r28, 0xA0	; 160
    2454:	89 e0       	ldi	r24, 0x09	; 9
    2456:	d8 07       	cpc	r29, r24
    2458:	29 f4       	brne	.+10     	; 0x2464 <usart_init_rs232+0x21a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    245a:	60 e1       	ldi	r22, 0x10	; 16
    245c:	84 e0       	ldi	r24, 0x04	; 4
    245e:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    2462:	59 c0       	rjmp	.+178    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    2464:	c0 3a       	cpi	r28, 0xA0	; 160
    2466:	ea e0       	ldi	r30, 0x0A	; 10
    2468:	de 07       	cpc	r29, r30
    246a:	29 f4       	brne	.+10     	; 0x2476 <usart_init_rs232+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    246c:	60 e1       	ldi	r22, 0x10	; 16
    246e:	85 e0       	ldi	r24, 0x05	; 5
    2470:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    2474:	50 c0       	rjmp	.+160    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    2476:	c0 3a       	cpi	r28, 0xA0	; 160
    2478:	fb e0       	ldi	r31, 0x0B	; 11
    247a:	df 07       	cpc	r29, r31
    247c:	29 f4       	brne	.+10     	; 0x2488 <usart_init_rs232+0x23e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    247e:	60 e1       	ldi	r22, 0x10	; 16
    2480:	86 e0       	ldi	r24, 0x06	; 6
    2482:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    2486:	47 c0       	rjmp	.+142    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    2488:	c0 3b       	cpi	r28, 0xB0	; 176
    248a:	88 e0       	ldi	r24, 0x08	; 8
    248c:	d8 07       	cpc	r29, r24
    248e:	29 f4       	brne	.+10     	; 0x249a <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    2490:	60 e2       	ldi	r22, 0x20	; 32
    2492:	83 e0       	ldi	r24, 0x03	; 3
    2494:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    2498:	3e c0       	rjmp	.+124    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    249a:	c0 3b       	cpi	r28, 0xB0	; 176
    249c:	e9 e0       	ldi	r30, 0x09	; 9
    249e:	de 07       	cpc	r29, r30
    24a0:	29 f4       	brne	.+10     	; 0x24ac <usart_init_rs232+0x262>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    24a2:	60 e2       	ldi	r22, 0x20	; 32
    24a4:	84 e0       	ldi	r24, 0x04	; 4
    24a6:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    24aa:	35 c0       	rjmp	.+106    	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    24ac:	c0 3b       	cpi	r28, 0xB0	; 176
    24ae:	fa e0       	ldi	r31, 0x0A	; 10
    24b0:	df 07       	cpc	r29, r31
    24b2:	29 f4       	brne	.+10     	; 0x24be <usart_init_rs232+0x274>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    24b4:	60 e2       	ldi	r22, 0x20	; 32
    24b6:	85 e0       	ldi	r24, 0x05	; 5
    24b8:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    24bc:	2c c0       	rjmp	.+88     	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    24be:	c0 3b       	cpi	r28, 0xB0	; 176
    24c0:	8b e0       	ldi	r24, 0x0B	; 11
    24c2:	d8 07       	cpc	r29, r24
    24c4:	29 f4       	brne	.+10     	; 0x24d0 <usart_init_rs232+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    24c6:	60 e2       	ldi	r22, 0x20	; 32
    24c8:	86 e0       	ldi	r24, 0x06	; 6
    24ca:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    24ce:	23 c0       	rjmp	.+70     	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    24d0:	c0 38       	cpi	r28, 0x80	; 128
    24d2:	e4 e0       	ldi	r30, 0x04	; 4
    24d4:	de 07       	cpc	r29, r30
    24d6:	29 f4       	brne	.+10     	; 0x24e2 <usart_init_rs232+0x298>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    24d8:	60 e4       	ldi	r22, 0x40	; 64
    24da:	83 e0       	ldi	r24, 0x03	; 3
    24dc:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    24e0:	1a c0       	rjmp	.+52     	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    24e2:	c0 39       	cpi	r28, 0x90	; 144
    24e4:	f4 e0       	ldi	r31, 0x04	; 4
    24e6:	df 07       	cpc	r29, r31
    24e8:	29 f4       	brne	.+10     	; 0x24f4 <usart_init_rs232+0x2aa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    24ea:	60 e4       	ldi	r22, 0x40	; 64
    24ec:	84 e0       	ldi	r24, 0x04	; 4
    24ee:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    24f2:	11 c0       	rjmp	.+34     	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    24f4:	c0 3a       	cpi	r28, 0xA0	; 160
    24f6:	84 e0       	ldi	r24, 0x04	; 4
    24f8:	d8 07       	cpc	r29, r24
    24fa:	29 f4       	brne	.+10     	; 0x2506 <usart_init_rs232+0x2bc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    24fc:	60 e4       	ldi	r22, 0x40	; 64
    24fe:	85 e0       	ldi	r24, 0x05	; 5
    2500:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    2504:	08 c0       	rjmp	.+16     	; 0x2516 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    2506:	c0 3b       	cpi	r28, 0xB0	; 176
    2508:	e4 e0       	ldi	r30, 0x04	; 4
    250a:	de 07       	cpc	r29, r30
    250c:	21 f4       	brne	.+8      	; 0x2516 <usart_init_rs232+0x2cc>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    250e:	60 e4       	ldi	r22, 0x40	; 64
    2510:	86 e0       	ldi	r24, 0x06	; 6
    2512:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    2516:	8d 81       	ldd	r24, Y+5	; 0x05
    2518:	8f 73       	andi	r24, 0x3F	; 63
    251a:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    251c:	f8 01       	movw	r30, r16
    251e:	95 81       	ldd	r25, Z+5	; 0x05
    2520:	84 81       	ldd	r24, Z+4	; 0x04
    2522:	89 2b       	or	r24, r25
    2524:	96 81       	ldd	r25, Z+6	; 0x06
    2526:	91 11       	cpse	r25, r1
    2528:	98 e0       	ldi	r25, 0x08	; 8
    252a:	89 2b       	or	r24, r25
    252c:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    252e:	f8 01       	movw	r30, r16
    2530:	40 81       	ld	r20, Z
    2532:	51 81       	ldd	r21, Z+1	; 0x01
    2534:	62 81       	ldd	r22, Z+2	; 0x02
    2536:	73 81       	ldd	r23, Z+3	; 0x03
    2538:	00 e0       	ldi	r16, 0x00	; 0
    253a:	18 e4       	ldi	r17, 0x48	; 72
    253c:	28 ee       	ldi	r18, 0xE8	; 232
    253e:	31 e0       	ldi	r19, 0x01	; 1
    2540:	ce 01       	movw	r24, r28
    2542:	70 dd       	rcall	.-1312   	; 0x2024 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	98 60       	ori	r25, 0x08	; 8
    2548:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    254a:	9c 81       	ldd	r25, Y+4	; 0x04
    254c:	90 61       	ori	r25, 0x10	; 16
    254e:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	1f 91       	pop	r17
    2556:	0f 91       	pop	r16
    2558:	08 95       	ret

0000255a <Get_altitude>:
	//printf("altitude = %f \n", (float)altitude);
	return altitude;
}*/

//Old, working function. Uses TEMP from pressure sensor calculations. May as well use
float Get_altitude(uint32_t initial, uint32_t pressure){
    255a:	4f 92       	push	r4
    255c:	5f 92       	push	r5
    255e:	6f 92       	push	r6
    2560:	7f 92       	push	r7
    2562:	8f 92       	push	r8
    2564:	9f 92       	push	r9
    2566:	af 92       	push	r10
    2568:	bf 92       	push	r11
    256a:	cf 92       	push	r12
    256c:	df 92       	push	r13
    256e:	ef 92       	push	r14
    2570:	ff 92       	push	r15
    2572:	29 01       	movw	r4, r18
    2574:	3a 01       	movw	r6, r20
	//printf("Initial Pressure = %lu\n", initial);
	//printf("pressure = %lu \n", pressure);
	//printf("temperature = %li \n", TEMP/100);
	//float altitude = (((287.058 * (((float)(TEMP)/100)+273.15)/9.8))*log((float)initial/get_pressure())*3.28);	Not this one, this one's bad
	float altitude = (pow(((initial/100)/(pressure/100)),(1/5.257))-1)*((TEMP/100)+273.15)/.0065; //This is now right, just gotta use the thermistor
    2576:	0f 2e       	mov	r0, r31
    2578:	f4 e6       	ldi	r31, 0x64	; 100
    257a:	cf 2e       	mov	r12, r31
    257c:	d1 2c       	mov	r13, r1
    257e:	e1 2c       	mov	r14, r1
    2580:	f1 2c       	mov	r15, r1
    2582:	f0 2d       	mov	r31, r0
    2584:	a7 01       	movw	r20, r14
    2586:	96 01       	movw	r18, r12
    2588:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <__udivmodsi4>
    258c:	49 01       	movw	r8, r18
    258e:	5a 01       	movw	r10, r20
    2590:	c3 01       	movw	r24, r6
    2592:	b2 01       	movw	r22, r4
    2594:	a7 01       	movw	r20, r14
    2596:	96 01       	movw	r18, r12
    2598:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <__udivmodsi4>
    259c:	c5 01       	movw	r24, r10
    259e:	b4 01       	movw	r22, r8
    25a0:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <__udivmodsi4>
    25a4:	ca 01       	movw	r24, r20
    25a6:	b9 01       	movw	r22, r18
    25a8:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <__floatunsisf>
    25ac:	24 eb       	ldi	r18, 0xB4	; 180
    25ae:	39 ec       	ldi	r19, 0xC9	; 201
    25b0:	42 e4       	ldi	r20, 0x42	; 66
    25b2:	5e e3       	ldi	r21, 0x3E	; 62
    25b4:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <pow>
    25b8:	4b 01       	movw	r8, r22
    25ba:	5c 01       	movw	r10, r24
	//printf("altitude = %f \n", (float)altitude);
	return altitude;
    25bc:	60 91 88 23 	lds	r22, 0x2388	; 0x802388 <TEMP>
    25c0:	70 91 89 23 	lds	r23, 0x2389	; 0x802389 <TEMP+0x1>
    25c4:	80 91 8a 23 	lds	r24, 0x238A	; 0x80238a <TEMP+0x2>
    25c8:	90 91 8b 23 	lds	r25, 0x238B	; 0x80238b <TEMP+0x3>
    25cc:	a7 01       	movw	r20, r14
    25ce:	96 01       	movw	r18, r12
    25d0:	0e 94 13 24 	call	0x4826	; 0x4826 <__divmodsi4>
    25d4:	ca 01       	movw	r24, r20
    25d6:	b9 01       	movw	r22, r18
    25d8:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__floatsisf>
    25dc:	23 e3       	ldi	r18, 0x33	; 51
    25de:	33 e9       	ldi	r19, 0x93	; 147
    25e0:	48 e8       	ldi	r20, 0x88	; 136
    25e2:	53 e4       	ldi	r21, 0x43	; 67
    25e4:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__addsf3>
    25e8:	6b 01       	movw	r12, r22
    25ea:	7c 01       	movw	r14, r24
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e8       	ldi	r20, 0x80	; 128
    25f2:	5f e3       	ldi	r21, 0x3F	; 63
    25f4:	c5 01       	movw	r24, r10
    25f6:	b4 01       	movw	r22, r8
    25f8:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <__subsf3>
    25fc:	9b 01       	movw	r18, r22
    25fe:	ac 01       	movw	r20, r24
    2600:	c7 01       	movw	r24, r14
    2602:	b6 01       	movw	r22, r12
    2604:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__mulsf3>
    2608:	24 ef       	ldi	r18, 0xF4	; 244
    260a:	3d ef       	ldi	r19, 0xFD	; 253
    260c:	44 ed       	ldi	r20, 0xD4	; 212
    260e:	5b e3       	ldi	r21, 0x3B	; 59
    2610:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__divsf3>
}
    2614:	ff 90       	pop	r15
    2616:	ef 90       	pop	r14
    2618:	df 90       	pop	r13
    261a:	cf 90       	pop	r12
    261c:	bf 90       	pop	r11
    261e:	af 90       	pop	r10
    2620:	9f 90       	pop	r9
    2622:	8f 90       	pop	r8
    2624:	7f 90       	pop	r7
    2626:	6f 90       	pop	r6
    2628:	5f 90       	pop	r5
    262a:	4f 90       	pop	r4
    262c:	08 95       	ret

0000262e <startswith>:
		{
			return i;
		}
	}
	return i+1;
}
    262e:	dc 01       	movw	r26, r24
    2630:	fb 01       	movw	r30, r22
    2632:	80 81       	ld	r24, Z
    2634:	88 23       	and	r24, r24
    2636:	01 f1       	breq	.+64     	; 0x2678 <startswith+0x4a>
    2638:	08 2e       	mov	r0, r24
    263a:	00 0c       	add	r0, r0
    263c:	99 0b       	sbc	r25, r25
    263e:	2c 91       	ld	r18, X
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	82 17       	cp	r24, r18
    2644:	93 07       	cpc	r25, r19
    2646:	d1 f4       	brne	.+52     	; 0x267c <startswith+0x4e>
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	0b c0       	rjmp	.+22     	; 0x2662 <startswith+0x34>
    264c:	02 2e       	mov	r0, r18
    264e:	00 0c       	add	r0, r0
    2650:	33 0b       	sbc	r19, r19
    2652:	fd 01       	movw	r30, r26
    2654:	e4 0f       	add	r30, r20
    2656:	f5 1f       	adc	r31, r21
    2658:	40 81       	ld	r20, Z
    265a:	50 e0       	ldi	r21, 0x00	; 0
    265c:	24 17       	cp	r18, r20
    265e:	35 07       	cpc	r19, r21
    2660:	79 f4       	brne	.+30     	; 0x2680 <startswith+0x52>
    2662:	9f 5f       	subi	r25, 0xFF	; 255
    2664:	49 2f       	mov	r20, r25
    2666:	50 e0       	ldi	r21, 0x00	; 0
    2668:	fb 01       	movw	r30, r22
    266a:	e4 0f       	add	r30, r20
    266c:	f5 1f       	adc	r31, r21
    266e:	20 81       	ld	r18, Z
    2670:	21 11       	cpse	r18, r1
    2672:	ec cf       	rjmp	.-40     	; 0x264c <startswith+0x1e>
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	08 95       	ret
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	08 95       	ret
    267c:	80 e0       	ldi	r24, 0x00	; 0
    267e:	08 95       	ret
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	08 95       	ret

00002684 <getGPSDatafromNMEA>:

GPS_data_t getGPSDatafromNMEA(uint8_t* NMEA_sentence, uint8_t sentencelength)
{
    2684:	2f 92       	push	r2
    2686:	3f 92       	push	r3
    2688:	4f 92       	push	r4
    268a:	5f 92       	push	r5
    268c:	6f 92       	push	r6
    268e:	7f 92       	push	r7
    2690:	8f 92       	push	r8
    2692:	9f 92       	push	r9
    2694:	af 92       	push	r10
    2696:	bf 92       	push	r11
    2698:	cf 92       	push	r12
    269a:	df 92       	push	r13
    269c:	ef 92       	push	r14
    269e:	ff 92       	push	r15
    26a0:	0f 93       	push	r16
    26a2:	1f 93       	push	r17
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	a2 97       	sbiw	r28, 0x22	; 34
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	4c 01       	movw	r8, r24
    26b4:	69 83       	std	Y+1, r22	; 0x01
    26b6:	7a 83       	std	Y+2, r23	; 0x02
    26b8:	24 2e       	mov	r2, r20
	uint8_t speedwritten=0;
	uint8_t heightwritten=0;
	uint8_t no_of_sateliiteswritten=0;
	uint8_t comma_position=0;
	int a=0;
	if (startswith(NMEA_sentence, "$GPGGA"))
    26ba:	66 e2       	ldi	r22, 0x26	; 38
    26bc:	70 e2       	ldi	r23, 0x20	; 32
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	9a 81       	ldd	r25, Y+2	; 0x02
    26c2:	b5 df       	rcall	.-150    	; 0x262e <startswith>
    26c4:	88 23       	and	r24, r24
    26c6:	09 f4       	brne	.+2      	; 0x26ca <getGPSDatafromNMEA+0x46>
    26c8:	45 c2       	rjmp	.+1162   	; 0x2b54 <getGPSDatafromNMEA+0x4d0>
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    26ca:	31 2c       	mov	r3, r1
    26cc:	12 14       	cp	r1, r2
    26ce:	13 04       	cpc	r1, r3
    26d0:	0c f0       	brlt	.+2      	; 0x26d4 <getGPSDatafromNMEA+0x50>
    26d2:	40 c2       	rjmp	.+1152   	; 0x2b54 <getGPSDatafromNMEA+0x4d0>
    26d4:	49 80       	ldd	r4, Y+1	; 0x01
    26d6:	5a 80       	ldd	r5, Y+2	; 0x02
    26d8:	00 e0       	ldi	r16, 0x00	; 0
    26da:	10 e0       	ldi	r17, 0x00	; 0
    26dc:	f1 2c       	mov	r15, r1
										 + 1000l*(NMEA_sentence[a+7] - '0')
										  + 100l*(NMEA_sentence[a+8] - '0')
										   + 10l*(NMEA_sentence[a+9] - '0')
										       + (NMEA_sentence[a+10] - '0');
					//printf("%lu\n",GPSData.lonminutes);
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
    26de:	df 2c       	mov	r13, r15
    26e0:	48 a2       	std	Y+32, r4	; 0x20
    26e2:	59 a2       	std	Y+33, r5	; 0x21
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
		{
			//printf("hate6");
			if (NMEA_sentence[a]==',')
    26e4:	a8 a1       	ldd	r26, Y+32	; 0x20
    26e6:	b9 a1       	ldd	r27, Y+33	; 0x21
    26e8:	8d 91       	ld	r24, X+
    26ea:	a8 a3       	std	Y+32, r26	; 0x20
    26ec:	b9 a3       	std	Y+33, r27	; 0x21
    26ee:	8c 32       	cpi	r24, 0x2C	; 44
    26f0:	09 f0       	breq	.+2      	; 0x26f4 <getGPSDatafromNMEA+0x70>
    26f2:	2a c2       	rjmp	.+1108   	; 0x2b48 <getGPSDatafromNMEA+0x4c4>
			{
				//printf("gfhghhf");
				countcommas++;
    26f4:	d3 94       	inc	r13
				if (countcommas == 1)
    26f6:	b1 e0       	ldi	r27, 0x01	; 1
    26f8:	db 12       	cpse	r13, r27
    26fa:	23 c0       	rjmp	.+70     	; 0x2742 <getGPSDatafromNMEA+0xbe>
				{
					//printf("Begin %u, end %u\n", NMEA_sentence[a + 1] - '0', NMEA_sentence[a + 2] - '0');
					GPSData.hour = 10 * (NMEA_sentence[a + 1] - (uint8_t)'0') + (NMEA_sentence[a + 2] - (uint8_t)'0');
    26fc:	e8 a1       	ldd	r30, Y+32	; 0x20
    26fe:	f9 a1       	ldd	r31, Y+33	; 0x21
    2700:	80 81       	ld	r24, Z
    2702:	88 0f       	add	r24, r24
    2704:	80 56       	subi	r24, 0x60	; 96
    2706:	98 2f       	mov	r25, r24
    2708:	99 0f       	add	r25, r25
    270a:	99 0f       	add	r25, r25
    270c:	89 0f       	add	r24, r25
    270e:	91 81       	ldd	r25, Z+1	; 0x01
    2710:	90 53       	subi	r25, 0x30	; 48
    2712:	89 0f       	add	r24, r25
    2714:	8d 87       	std	Y+13, r24	; 0x0d
					GPSData.minutes = 10 * (NMEA_sentence[a + 3] - '0') + NMEA_sentence[a + 4] - '0';
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	88 0f       	add	r24, r24
    271a:	80 56       	subi	r24, 0x60	; 96
    271c:	98 2f       	mov	r25, r24
    271e:	99 0f       	add	r25, r25
    2720:	99 0f       	add	r25, r25
    2722:	89 0f       	add	r24, r25
    2724:	93 81       	ldd	r25, Z+3	; 0x03
    2726:	90 53       	subi	r25, 0x30	; 48
    2728:	89 0f       	add	r24, r25
    272a:	8e 87       	std	Y+14, r24	; 0x0e
					GPSData.seconds = 10 * (NMEA_sentence[a + 5] - '0') + NMEA_sentence[a + 6] - '0';
    272c:	84 81       	ldd	r24, Z+4	; 0x04
    272e:	88 0f       	add	r24, r24
    2730:	80 56       	subi	r24, 0x60	; 96
    2732:	a8 2e       	mov	r10, r24
    2734:	aa 0c       	add	r10, r10
    2736:	aa 0c       	add	r10, r10
    2738:	a8 0e       	add	r10, r24
    273a:	95 81       	ldd	r25, Z+5	; 0x05
    273c:	90 53       	subi	r25, 0x30	; 48
    273e:	a9 0e       	add	r10, r25
    2740:	03 c2       	rjmp	.+1030   	; 0x2b48 <getGPSDatafromNMEA+0x4c4>
				}
				else if (countcommas == 2 && NMEA_sentence[a+1] != ',')
    2742:	f2 e0       	ldi	r31, 0x02	; 2
    2744:	df 12       	cpse	r13, r31
    2746:	bb c0       	rjmp	.+374    	; 0x28be <getGPSDatafromNMEA+0x23a>
    2748:	a8 a1       	ldd	r26, Y+32	; 0x20
    274a:	b9 a1       	ldd	r27, Y+33	; 0x21
    274c:	8c 91       	ld	r24, X
    274e:	8c 32       	cpi	r24, 0x2C	; 44
    2750:	09 f4       	brne	.+2      	; 0x2754 <getGPSDatafromNMEA+0xd0>
    2752:	ec c1       	rjmp	.+984    	; 0x2b2c <getGPSDatafromNMEA+0x4a8>
				{
					GPSData.latdegrees = 10*(NMEA_sentence[a+1] - '0') + (NMEA_sentence[a+2] - '0');
    2754:	90 e0       	ldi	r25, 0x00	; 0
    2756:	c0 97       	sbiw	r24, 0x30	; 48
    2758:	9c 01       	movw	r18, r24
    275a:	22 0f       	add	r18, r18
    275c:	33 1f       	adc	r19, r19
    275e:	88 0f       	add	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	88 0f       	add	r24, r24
    2764:	99 1f       	adc	r25, r25
    2766:	88 0f       	add	r24, r24
    2768:	99 1f       	adc	r25, r25
    276a:	82 0f       	add	r24, r18
    276c:	93 1f       	adc	r25, r19
    276e:	11 96       	adiw	r26, 0x01	; 1
    2770:	2c 91       	ld	r18, X
    2772:	11 97       	sbiw	r26, 0x01	; 1
    2774:	30 e0       	ldi	r19, 0x00	; 0
    2776:	20 53       	subi	r18, 0x30	; 48
    2778:	31 09       	sbc	r19, r1
    277a:	2c 01       	movw	r4, r24
    277c:	42 0e       	add	r4, r18
    277e:	53 1e       	adc	r5, r19
    2780:	4b 86       	std	Y+11, r4	; 0x0b
    2782:	5c 86       	std	Y+12, r5	; 0x0c
					//printf("%u\n",GPSData.latdegrees);
					GPSData.latminutes = 100000l*(NMEA_sentence[a+3] - '0') + 10000l*(NMEA_sentence[a+4] - '0') + 1000l*(NMEA_sentence[a+6] - '0') + 100l*(NMEA_sentence[a+7] - '0') + 10l*(NMEA_sentence[a+8] - '0') + (NMEA_sentence[a+9] - '0');
    2784:	12 96       	adiw	r26, 0x02	; 2
    2786:	ac 91       	ld	r26, X
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	d0 97       	sbiw	r26, 0x30	; 48
    278c:	20 ea       	ldi	r18, 0xA0	; 160
    278e:	36 e8       	ldi	r19, 0x86	; 134
    2790:	41 e0       	ldi	r20, 0x01	; 1
    2792:	50 e0       	ldi	r21, 0x00	; 0
    2794:	0e 94 3e 24 	call	0x487c	; 0x487c <__mulshisi3>
    2798:	2b 01       	movw	r4, r22
    279a:	3c 01       	movw	r6, r24
    279c:	e8 a1       	ldd	r30, Y+32	; 0x20
    279e:	f9 a1       	ldd	r31, Y+33	; 0x21
    27a0:	a3 81       	ldd	r26, Z+3	; 0x03
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	d0 97       	sbiw	r26, 0x30	; 48
    27a6:	20 e1       	ldi	r18, 0x10	; 16
    27a8:	37 e2       	ldi	r19, 0x27	; 39
    27aa:	0e 94 38 24 	call	0x4870	; 0x4870 <__usmulhisi3>
    27ae:	46 0e       	add	r4, r22
    27b0:	57 1e       	adc	r5, r23
    27b2:	68 1e       	adc	r6, r24
    27b4:	79 1e       	adc	r7, r25
    27b6:	a5 81       	ldd	r26, Z+5	; 0x05
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	d0 97       	sbiw	r26, 0x30	; 48
    27bc:	28 ee       	ldi	r18, 0xE8	; 232
    27be:	33 e0       	ldi	r19, 0x03	; 3
    27c0:	0e 94 38 24 	call	0x4870	; 0x4870 <__usmulhisi3>
    27c4:	46 0e       	add	r4, r22
    27c6:	57 1e       	adc	r5, r23
    27c8:	68 1e       	adc	r6, r24
    27ca:	79 1e       	adc	r7, r25
    27cc:	a6 81       	ldd	r26, Z+6	; 0x06
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	d0 97       	sbiw	r26, 0x30	; 48
    27d2:	24 e6       	ldi	r18, 0x64	; 100
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	0e 94 38 24 	call	0x4870	; 0x4870 <__usmulhisi3>
    27da:	ab 01       	movw	r20, r22
    27dc:	bc 01       	movw	r22, r24
    27de:	44 0d       	add	r20, r4
    27e0:	55 1d       	adc	r21, r5
    27e2:	66 1d       	adc	r22, r6
    27e4:	77 1d       	adc	r23, r7
    27e6:	97 81       	ldd	r25, Z+7	; 0x07
    27e8:	89 2f       	mov	r24, r25
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	c0 97       	sbiw	r24, 0x30	; 48
    27ee:	09 2e       	mov	r0, r25
    27f0:	00 0c       	add	r0, r0
    27f2:	aa 0b       	sbc	r26, r26
    27f4:	bb 0b       	sbc	r27, r27
    27f6:	88 0f       	add	r24, r24
    27f8:	99 1f       	adc	r25, r25
    27fa:	aa 1f       	adc	r26, r26
    27fc:	bb 1f       	adc	r27, r27
    27fe:	2c 01       	movw	r4, r24
    2800:	3d 01       	movw	r6, r26
    2802:	44 0c       	add	r4, r4
    2804:	55 1c       	adc	r5, r5
    2806:	66 1c       	adc	r6, r6
    2808:	77 1c       	adc	r7, r7
    280a:	44 0c       	add	r4, r4
    280c:	55 1c       	adc	r5, r5
    280e:	66 1c       	adc	r6, r6
    2810:	77 1c       	adc	r7, r7
    2812:	84 0d       	add	r24, r4
    2814:	95 1d       	adc	r25, r5
    2816:	a6 1d       	adc	r26, r6
    2818:	b7 1d       	adc	r27, r7
    281a:	84 0f       	add	r24, r20
    281c:	95 1f       	adc	r25, r21
    281e:	a6 1f       	adc	r26, r22
    2820:	b7 1f       	adc	r27, r23
    2822:	40 85       	ldd	r20, Z+8	; 0x08
    2824:	50 e0       	ldi	r21, 0x00	; 0
    2826:	40 53       	subi	r20, 0x30	; 48
    2828:	51 09       	sbc	r21, r1
    282a:	05 2e       	mov	r0, r21
    282c:	00 0c       	add	r0, r0
    282e:	66 0b       	sbc	r22, r22
    2830:	77 0b       	sbc	r23, r23
    2832:	2c 01       	movw	r4, r24
    2834:	3d 01       	movw	r6, r26
    2836:	44 0e       	add	r4, r20
    2838:	55 1e       	adc	r5, r21
    283a:	66 1e       	adc	r6, r22
    283c:	77 1e       	adc	r7, r23
    283e:	4f 82       	std	Y+7, r4	; 0x07
    2840:	58 86       	std	Y+8, r5	; 0x08
    2842:	69 86       	std	Y+9, r6	; 0x09
    2844:	7a 86       	std	Y+10, r7	; 0x0a
					//printf("%lu\n",GPSData.latminutes);

					GPSData.latdecimal = (NMEA_sentence[a+11] == 'N' ? 1.0 : -1.0) * ((double)GPSData.latdegrees + ((double)GPSData.latminutes/(60.0*10000.0)));
    2846:	82 85       	ldd	r24, Z+10	; 0x0a
    2848:	8e 34       	cpi	r24, 0x4E	; 78
    284a:	51 f0       	breq	.+20     	; 0x2860 <getGPSDatafromNMEA+0x1dc>
    284c:	b1 2c       	mov	r11, r1
    284e:	c1 2c       	mov	r12, r1
    2850:	68 94       	set
    2852:	ee 24       	eor	r14, r14
    2854:	e7 f8       	bld	r14, 7
    2856:	0f 2e       	mov	r0, r31
    2858:	ff eb       	ldi	r31, 0xBF	; 191
    285a:	ff 2e       	mov	r15, r31
    285c:	f0 2d       	mov	r31, r0
    285e:	09 c0       	rjmp	.+18     	; 0x2872 <getGPSDatafromNMEA+0x1ee>
    2860:	b1 2c       	mov	r11, r1
    2862:	c1 2c       	mov	r12, r1
    2864:	68 94       	set
    2866:	ee 24       	eor	r14, r14
    2868:	e7 f8       	bld	r14, 7
    286a:	0f 2e       	mov	r0, r31
    286c:	ff e3       	ldi	r31, 0x3F	; 63
    286e:	ff 2e       	mov	r15, r31
    2870:	f0 2d       	mov	r31, r0
    2872:	6f 81       	ldd	r22, Y+7	; 0x07
    2874:	78 85       	ldd	r23, Y+8	; 0x08
    2876:	89 85       	ldd	r24, Y+9	; 0x09
    2878:	9a 85       	ldd	r25, Y+10	; 0x0a
    287a:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <__floatunsisf>
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	3c e7       	ldi	r19, 0x7C	; 124
    2882:	42 e1       	ldi	r20, 0x12	; 18
    2884:	59 e4       	ldi	r21, 0x49	; 73
    2886:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__divsf3>
    288a:	2b 01       	movw	r4, r22
    288c:	3c 01       	movw	r6, r24
    288e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2890:	3c 85       	ldd	r19, Y+12	; 0x0c
    2892:	b9 01       	movw	r22, r18
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <__floatunsisf>
    289c:	9b 01       	movw	r18, r22
    289e:	ac 01       	movw	r20, r24
    28a0:	c3 01       	movw	r24, r6
    28a2:	b2 01       	movw	r22, r4
    28a4:	0e 94 07 1d 	call	0x3a0e	; 0x3a0e <__addsf3>
    28a8:	2b 2d       	mov	r18, r11
    28aa:	3c 2d       	mov	r19, r12
    28ac:	4e 2d       	mov	r20, r14
    28ae:	5f 2d       	mov	r21, r15
    28b0:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__mulsf3>
    28b4:	6f 87       	std	Y+15, r22	; 0x0f
    28b6:	78 8b       	std	Y+16, r23	; 0x10
    28b8:	89 8b       	std	Y+17, r24	; 0x11
    28ba:	9a 8b       	std	Y+18, r25	; 0x12
    28bc:	45 c1       	rjmp	.+650    	; 0x2b48 <getGPSDatafromNMEA+0x4c4>
				}
				else if (countcommas == 2)
				{
					GPSData.latdecimal = 0.0;
				}
				else if (countcommas == 4 && NMEA_sentence[a+1] != ',')
    28be:	34 e0       	ldi	r19, 0x04	; 4
    28c0:	d3 12       	cpse	r13, r19
    28c2:	c4 c0       	rjmp	.+392    	; 0x2a4c <getGPSDatafromNMEA+0x3c8>
    28c4:	a8 a1       	ldd	r26, Y+32	; 0x20
    28c6:	b9 a1       	ldd	r27, Y+33	; 0x21
    28c8:	2c 91       	ld	r18, X
    28ca:	2c 32       	cpi	r18, 0x2C	; 44
    28cc:	09 f4       	brne	.+2      	; 0x28d0 <getGPSDatafromNMEA+0x24c>
    28ce:	33 c1       	rjmp	.+614    	; 0x2b36 <getGPSDatafromNMEA+0x4b2>
				{
					GPSData.londegrees = 100*(NMEA_sentence[a+1] - '0') +10*(NMEA_sentence[a+2] - '0') + (NMEA_sentence[a+3] - '0');
    28d0:	11 96       	adiw	r26, 0x01	; 1
    28d2:	8c 91       	ld	r24, X
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	c0 97       	sbiw	r24, 0x30	; 48
    28d8:	ac 01       	movw	r20, r24
    28da:	44 0f       	add	r20, r20
    28dc:	55 1f       	adc	r21, r21
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	88 0f       	add	r24, r24
    28e4:	99 1f       	adc	r25, r25
    28e6:	88 0f       	add	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	84 0f       	add	r24, r20
    28ec:	95 1f       	adc	r25, r21
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	20 53       	subi	r18, 0x30	; 48
    28f2:	31 09       	sbc	r19, r1
    28f4:	b4 e6       	ldi	r27, 0x64	; 100
    28f6:	b2 9f       	mul	r27, r18
    28f8:	a0 01       	movw	r20, r0
    28fa:	b3 9f       	mul	r27, r19
    28fc:	50 0d       	add	r21, r0
    28fe:	11 24       	eor	r1, r1
    2900:	84 0f       	add	r24, r20
    2902:	95 1f       	adc	r25, r21
    2904:	e8 a1       	ldd	r30, Y+32	; 0x20
    2906:	f9 a1       	ldd	r31, Y+33	; 0x21
    2908:	22 81       	ldd	r18, Z+2	; 0x02
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	20 53       	subi	r18, 0x30	; 48
    290e:	31 09       	sbc	r19, r1
    2910:	2c 01       	movw	r4, r24
    2912:	42 0e       	add	r4, r18
    2914:	53 1e       	adc	r5, r19
    2916:	4f 8a       	std	Y+23, r4	; 0x17
    2918:	58 8e       	std	Y+24, r5	; 0x18
					//printf("%u\n",GPSData.londegrees);
					GPSData.lonminutes = 100000l*(NMEA_sentence[a+4] - '0')
    291a:	a3 81       	ldd	r26, Z+3	; 0x03
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	d0 97       	sbiw	r26, 0x30	; 48
    2920:	20 ea       	ldi	r18, 0xA0	; 160
    2922:	36 e8       	ldi	r19, 0x86	; 134
    2924:	41 e0       	ldi	r20, 0x01	; 1
    2926:	50 e0       	ldi	r21, 0x00	; 0
    2928:	0e 94 3e 24 	call	0x487c	; 0x487c <__mulshisi3>
    292c:	2b 01       	movw	r4, r22
    292e:	3c 01       	movw	r6, r24
    2930:	a4 81       	ldd	r26, Z+4	; 0x04
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	d0 97       	sbiw	r26, 0x30	; 48
    2936:	20 e1       	ldi	r18, 0x10	; 16
    2938:	37 e2       	ldi	r19, 0x27	; 39
    293a:	0e 94 38 24 	call	0x4870	; 0x4870 <__usmulhisi3>
    293e:	46 0e       	add	r4, r22
    2940:	57 1e       	adc	r5, r23
    2942:	68 1e       	adc	r6, r24
    2944:	79 1e       	adc	r7, r25
    2946:	a6 81       	ldd	r26, Z+6	; 0x06
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	d0 97       	sbiw	r26, 0x30	; 48
    294c:	28 ee       	ldi	r18, 0xE8	; 232
    294e:	33 e0       	ldi	r19, 0x03	; 3
    2950:	0e 94 38 24 	call	0x4870	; 0x4870 <__usmulhisi3>
    2954:	46 0e       	add	r4, r22
    2956:	57 1e       	adc	r5, r23
    2958:	68 1e       	adc	r6, r24
    295a:	79 1e       	adc	r7, r25
    295c:	a7 81       	ldd	r26, Z+7	; 0x07
    295e:	b0 e0       	ldi	r27, 0x00	; 0
    2960:	d0 97       	sbiw	r26, 0x30	; 48
    2962:	24 e6       	ldi	r18, 0x64	; 100
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	0e 94 38 24 	call	0x4870	; 0x4870 <__usmulhisi3>
    296a:	ab 01       	movw	r20, r22
    296c:	bc 01       	movw	r22, r24
    296e:	44 0d       	add	r20, r4
    2970:	55 1d       	adc	r21, r5
    2972:	66 1d       	adc	r22, r6
    2974:	77 1d       	adc	r23, r7
    2976:	90 85       	ldd	r25, Z+8	; 0x08
    2978:	89 2f       	mov	r24, r25
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	c0 97       	sbiw	r24, 0x30	; 48
    297e:	09 2e       	mov	r0, r25
    2980:	00 0c       	add	r0, r0
    2982:	aa 0b       	sbc	r26, r26
    2984:	bb 0b       	sbc	r27, r27
    2986:	88 0f       	add	r24, r24
    2988:	99 1f       	adc	r25, r25
    298a:	aa 1f       	adc	r26, r26
    298c:	bb 1f       	adc	r27, r27
    298e:	2c 01       	movw	r4, r24
    2990:	3d 01       	movw	r6, r26
    2992:	44 0c       	add	r4, r4
    2994:	55 1c       	adc	r5, r5
    2996:	66 1c       	adc	r6, r6
    2998:	77 1c       	adc	r7, r7
    299a:	44 0c       	add	r4, r4
    299c:	55 1c       	adc	r5, r5
    299e:	66 1c       	adc	r6, r6
    29a0:	77 1c       	adc	r7, r7
    29a2:	84 0d       	add	r24, r4
    29a4:	95 1d       	adc	r25, r5
    29a6:	a6 1d       	adc	r26, r6
    29a8:	b7 1d       	adc	r27, r7
    29aa:	84 0f       	add	r24, r20
    29ac:	95 1f       	adc	r25, r21
    29ae:	a6 1f       	adc	r26, r22
    29b0:	b7 1f       	adc	r27, r23
    29b2:	41 85       	ldd	r20, Z+9	; 0x09
    29b4:	50 e0       	ldi	r21, 0x00	; 0
    29b6:	40 53       	subi	r20, 0x30	; 48
    29b8:	51 09       	sbc	r21, r1
    29ba:	05 2e       	mov	r0, r21
    29bc:	00 0c       	add	r0, r0
    29be:	66 0b       	sbc	r22, r22
    29c0:	77 0b       	sbc	r23, r23
    29c2:	2c 01       	movw	r4, r24
    29c4:	3d 01       	movw	r6, r26
    29c6:	44 0e       	add	r4, r20
    29c8:	55 1e       	adc	r5, r21
    29ca:	66 1e       	adc	r6, r22
    29cc:	77 1e       	adc	r7, r23
    29ce:	4b 8a       	std	Y+19, r4	; 0x13
    29d0:	5c 8a       	std	Y+20, r5	; 0x14
    29d2:	6d 8a       	std	Y+21, r6	; 0x15
    29d4:	7e 8a       	std	Y+22, r7	; 0x16
										 + 1000l*(NMEA_sentence[a+7] - '0')
										  + 100l*(NMEA_sentence[a+8] - '0')
										   + 10l*(NMEA_sentence[a+9] - '0')
										       + (NMEA_sentence[a+10] - '0');
					//printf("%lu\n",GPSData.lonminutes);
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
    29d6:	83 85       	ldd	r24, Z+11	; 0x0b
    29d8:	85 34       	cpi	r24, 0x45	; 69
    29da:	51 f0       	breq	.+20     	; 0x29f0 <getGPSDatafromNMEA+0x36c>
    29dc:	b1 2c       	mov	r11, r1
    29de:	c1 2c       	mov	r12, r1
    29e0:	68 94       	set
    29e2:	ee 24       	eor	r14, r14
    29e4:	e7 f8       	bld	r14, 7
    29e6:	0f 2e       	mov	r0, r31
    29e8:	ff eb       	ldi	r31, 0xBF	; 191
    29ea:	ff 2e       	mov	r15, r31
    29ec:	f0 2d       	mov	r31, r0
    29ee:	09 c0       	rjmp	.+18     	; 0x2a02 <getGPSDatafromNMEA+0x37e>
    29f0:	b1 2c       	mov	r11, r1
    29f2:	c1 2c       	mov	r12, r1
    29f4:	68 94       	set
    29f6:	ee 24       	eor	r14, r14
    29f8:	e7 f8       	bld	r14, 7
    29fa:	0f 2e       	mov	r0, r31
    29fc:	ff e3       	ldi	r31, 0x3F	; 63
    29fe:	ff 2e       	mov	r15, r31
    2a00:	f0 2d       	mov	r31, r0
    2a02:	6b 89       	ldd	r22, Y+19	; 0x13
    2a04:	7c 89       	ldd	r23, Y+20	; 0x14
    2a06:	8d 89       	ldd	r24, Y+21	; 0x15
    2a08:	9e 89       	ldd	r25, Y+22	; 0x16
    2a0a:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <__floatunsisf>
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	3c e7       	ldi	r19, 0x7C	; 124
    2a12:	42 e1       	ldi	r20, 0x12	; 18
    2a14:	59 e4       	ldi	r21, 0x49	; 73
    2a16:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <__divsf3>
    2a1a:	2b 01       	movw	r4, r22
    2a1c:	3c 01       	movw	r6, r24
    2a1e:	2f 89       	ldd	r18, Y+23	; 0x17
    2a20:	38 8d       	ldd	r19, Y+24	; 0x18
    2a22:	b9 01       	movw	r22, r18
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <__floatunsisf>
    2a2c:	9b 01       	movw	r18, r22
    2a2e:	ac 01       	movw	r20, r24
    2a30:	c3 01       	movw	r24, r6
    2a32:	b2 01       	movw	r22, r4
    2a34:	ec d7       	rcall	.+4056   	; 0x3a0e <__addsf3>
    2a36:	2b 2d       	mov	r18, r11
    2a38:	3c 2d       	mov	r19, r12
    2a3a:	4e 2d       	mov	r20, r14
    2a3c:	5f 2d       	mov	r21, r15
    2a3e:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__mulsf3>
    2a42:	69 8f       	std	Y+25, r22	; 0x19
    2a44:	7a 8f       	std	Y+26, r23	; 0x1a
    2a46:	8b 8f       	std	Y+27, r24	; 0x1b
    2a48:	9c 8f       	std	Y+28, r25	; 0x1c
    2a4a:	7e c0       	rjmp	.+252    	; 0x2b48 <getGPSDatafromNMEA+0x4c4>
				}
				else if(countcommas == 4)
				{
					GPSData.londecimal = 0.0;
				}
				else if (countcommas == 6)
    2a4c:	36 e0       	ldi	r19, 0x06	; 6
    2a4e:	d3 12       	cpse	r13, r19
    2a50:	06 c0       	rjmp	.+12     	; 0x2a5e <getGPSDatafromNMEA+0x3da>
				{
					GPSData.fix_status = NMEA_sentence[a + 1] - '0';
    2a52:	a8 a1       	ldd	r26, Y+32	; 0x20
    2a54:	b9 a1       	ldd	r27, Y+33	; 0x21
    2a56:	8c 91       	ld	r24, X
    2a58:	80 53       	subi	r24, 0x30	; 48
    2a5a:	8d 8f       	std	Y+29, r24	; 0x1d
    2a5c:	75 c0       	rjmp	.+234    	; 0x2b48 <getGPSDatafromNMEA+0x4c4>
				}
				else if (countcommas == 9)
    2a5e:	b9 e0       	ldi	r27, 0x09	; 9
    2a60:	db 12       	cpse	r13, r27
    2a62:	72 c0       	rjmp	.+228    	; 0x2b48 <getGPSDatafromNMEA+0x4c4>
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    2a64:	e8 a1       	ldd	r30, Y+32	; 0x20
    2a66:	f9 a1       	ldd	r31, Y+33	; 0x21
    2a68:	c0 80       	ld	r12, Z
    2a6a:	fc e2       	ldi	r31, 0x2C	; 44
    2a6c:	cf 16       	cp	r12, r31
    2a6e:	09 f4       	brne	.+2      	; 0x2a72 <getGPSDatafromNMEA+0x3ee>
    2a70:	67 c0       	rjmp	.+206    	; 0x2b40 <getGPSDatafromNMEA+0x4bc>
    2a72:	b1 2c       	mov	r11, r1
    2a74:	1b 82       	std	Y+3, r1	; 0x03
    2a76:	1c 82       	std	Y+4, r1	; 0x04
    2a78:	1d 82       	std	Y+5, r1	; 0x05
    2a7a:	1e 82       	std	Y+6, r1	; 0x06
    2a7c:	71 2c       	mov	r7, r1
    2a7e:	e9 80       	ldd	r14, Y+1	; 0x01
    2a80:	fa 80       	ldd	r15, Y+2	; 0x02
    2a82:	e0 0e       	add	r14, r16
    2a84:	f1 1e       	adc	r15, r17
    2a86:	0e 8f       	std	Y+30, r16	; 0x1e
    2a88:	1f 8f       	std	Y+31, r17	; 0x1f
    2a8a:	1c 2d       	mov	r17, r12
    2a8c:	7a a2       	std	Y+34, r7	; 0x22
					{
						if (NMEA_sentence[a + inc + 1] == '.')
    2a8e:	1e 32       	cpi	r17, 0x2E	; 46
    2a90:	09 f4       	brne	.+2      	; 0x2a94 <getGPSDatafromNMEA+0x410>
    2a92:	3f c0       	rjmp	.+126    	; 0x2b12 <getGPSDatafromNMEA+0x48e>
						{
							period_reached = 1;
							period_counter = 1;
						}
						else if (!period_reached)
    2a94:	5a a0       	ldd	r5, Y+34	; 0x22
    2a96:	51 10       	cpse	r5, r1
    2a98:	1e c0       	rjmp	.+60     	; 0x2ad6 <getGPSDatafromNMEA+0x452>
						{
							altitude *= 10;
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	40 e2       	ldi	r20, 0x20	; 32
    2aa0:	51 e4       	ldi	r21, 0x41	; 65
    2aa2:	6b 81       	ldd	r22, Y+3	; 0x03
    2aa4:	7c 81       	ldd	r23, Y+4	; 0x04
    2aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aaa:	0e 94 d7 1e 	call	0x3dae	; 0x3dae <__mulsf3>
    2aae:	2b 01       	movw	r4, r22
    2ab0:	3c 01       	movw	r6, r24
							altitude += (float)(NMEA_sentence[a + inc + 1] - '0');
    2ab2:	61 2f       	mov	r22, r17
    2ab4:	70 e0       	ldi	r23, 0x00	; 0
    2ab6:	60 53       	subi	r22, 0x30	; 48
    2ab8:	71 09       	sbc	r23, r1
    2aba:	07 2e       	mov	r0, r23
    2abc:	00 0c       	add	r0, r0
    2abe:	88 0b       	sbc	r24, r24
    2ac0:	99 0b       	sbc	r25, r25
    2ac2:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__floatsisf>
    2ac6:	a3 01       	movw	r20, r6
    2ac8:	92 01       	movw	r18, r4
    2aca:	a1 d7       	rcall	.+3906   	; 0x3a0e <__addsf3>
    2acc:	6b 83       	std	Y+3, r22	; 0x03
    2ace:	7c 83       	std	Y+4, r23	; 0x04
    2ad0:	8d 83       	std	Y+5, r24	; 0x05
    2ad2:	9e 83       	std	Y+6, r25	; 0x06
    2ad4:	20 c0       	rjmp	.+64     	; 0x2b16 <getGPSDatafromNMEA+0x492>
    2ad6:	c1 2e       	mov	r12, r17
    2ad8:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2ada:	1f 8d       	ldd	r17, Y+31	; 0x1f
						}
						else if (period_reached && period_counter == 1)
						{
							altitude += ((float)(NMEA_sentence[a + inc + 1] - '0')) / 10.0;
    2adc:	6c 2d       	mov	r22, r12
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	60 53       	subi	r22, 0x30	; 48
    2ae2:	71 09       	sbc	r23, r1
    2ae4:	07 2e       	mov	r0, r23
    2ae6:	00 0c       	add	r0, r0
    2ae8:	88 0b       	sbc	r24, r24
    2aea:	99 0b       	sbc	r25, r25
    2aec:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__floatsisf>
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	40 e2       	ldi	r20, 0x20	; 32
    2af6:	51 e4       	ldi	r21, 0x41	; 65
    2af8:	ee d7       	rcall	.+4060   	; 0x3ad6 <__divsf3>
    2afa:	9b 01       	movw	r18, r22
    2afc:	ac 01       	movw	r20, r24
    2afe:	6b 81       	ldd	r22, Y+3	; 0x03
    2b00:	7c 81       	ldd	r23, Y+4	; 0x04
    2b02:	8d 81       	ldd	r24, Y+5	; 0x05
    2b04:	9e 81       	ldd	r25, Y+6	; 0x06
    2b06:	83 d7       	rcall	.+3846   	; 0x3a0e <__addsf3>
    2b08:	6b 83       	std	Y+3, r22	; 0x03
    2b0a:	7c 83       	std	Y+4, r23	; 0x04
    2b0c:	8d 83       	std	Y+5, r24	; 0x05
    2b0e:	9e 83       	std	Y+6, r25	; 0x06
							break;
    2b10:	1b c0       	rjmp	.+54     	; 0x2b48 <getGPSDatafromNMEA+0x4c4>
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
					{
						if (NMEA_sentence[a + inc + 1] == '.')
						{
							period_reached = 1;
    2b12:	21 e0       	ldi	r18, 0x01	; 1
    2b14:	2a a3       	std	Y+34, r18	; 0x22
						{
							altitude += ((float)(NMEA_sentence[a + inc + 1] - '0')) / 10.0;
							break;
						}
						
						inc++;
    2b16:	b3 94       	inc	r11
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    2b18:	f7 01       	movw	r30, r14
    2b1a:	eb 0d       	add	r30, r11
    2b1c:	f1 1d       	adc	r31, r1
    2b1e:	11 81       	ldd	r17, Z+1	; 0x01
    2b20:	1c 32       	cpi	r17, 0x2C	; 44
    2b22:	09 f0       	breq	.+2      	; 0x2b26 <getGPSDatafromNMEA+0x4a2>
    2b24:	b4 cf       	rjmp	.-152    	; 0x2a8e <getGPSDatafromNMEA+0x40a>
    2b26:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2b28:	1f 8d       	ldd	r17, Y+31	; 0x1f
    2b2a:	0e c0       	rjmp	.+28     	; 0x2b48 <getGPSDatafromNMEA+0x4c4>

					//printf("%f\n",GPSData.latdecimal);
				}
				else if (countcommas == 2)
				{
					GPSData.latdecimal = 0.0;
    2b2c:	1f 86       	std	Y+15, r1	; 0x0f
    2b2e:	18 8a       	std	Y+16, r1	; 0x10
    2b30:	19 8a       	std	Y+17, r1	; 0x11
    2b32:	1a 8a       	std	Y+18, r1	; 0x12
    2b34:	09 c0       	rjmp	.+18     	; 0x2b48 <getGPSDatafromNMEA+0x4c4>
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
					//printf("%f\n",GPSData.londecimal);
				}
				else if(countcommas == 4)
				{
					GPSData.londecimal = 0.0;
    2b36:	19 8e       	std	Y+25, r1	; 0x19
    2b38:	1a 8e       	std	Y+26, r1	; 0x1a
    2b3a:	1b 8e       	std	Y+27, r1	; 0x1b
    2b3c:	1c 8e       	std	Y+28, r1	; 0x1c
    2b3e:	04 c0       	rjmp	.+8      	; 0x2b48 <getGPSDatafromNMEA+0x4c4>
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    2b40:	1b 82       	std	Y+3, r1	; 0x03
    2b42:	1c 82       	std	Y+4, r1	; 0x04
    2b44:	1d 82       	std	Y+5, r1	; 0x05
    2b46:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t comma_position=0;
	int a=0;
	if (startswith(NMEA_sentence, "$GPGGA"))
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    2b48:	0f 5f       	subi	r16, 0xFF	; 255
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	02 15       	cp	r16, r2
    2b4e:	13 05       	cpc	r17, r3
    2b50:	09 f0       	breq	.+2      	; 0x2b54 <getGPSDatafromNMEA+0x4d0>
    2b52:	c8 cd       	rjmp	.-1136   	; 0x26e4 <getGPSDatafromNMEA+0x60>
	
	
	
//printf("GPSDATA altitude test %s \n ", GPSData.altitude);
//printf("GPS no of satellites test= %s \n", GPSData.noofsatellites);
return GPSData;
    2b54:	4b 84       	ldd	r4, Y+11	; 0x0b
    2b56:	5c 84       	ldd	r5, Y+12	; 0x0c
    2b58:	d4 01       	movw	r26, r8
    2b5a:	4d 92       	st	X+, r4
    2b5c:	5c 92       	st	X, r5
    2b5e:	11 97       	sbiw	r26, 0x01	; 1
    2b60:	4f 80       	ldd	r4, Y+7	; 0x07
    2b62:	58 84       	ldd	r5, Y+8	; 0x08
    2b64:	69 84       	ldd	r6, Y+9	; 0x09
    2b66:	7a 84       	ldd	r7, Y+10	; 0x0a
    2b68:	12 96       	adiw	r26, 0x02	; 2
    2b6a:	4d 92       	st	X+, r4
    2b6c:	5d 92       	st	X+, r5
    2b6e:	6d 92       	st	X+, r6
    2b70:	7c 92       	st	X, r7
    2b72:	15 97       	sbiw	r26, 0x05	; 5
    2b74:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b76:	98 89       	ldd	r25, Y+16	; 0x10
    2b78:	a9 89       	ldd	r26, Y+17	; 0x11
    2b7a:	ba 89       	ldd	r27, Y+18	; 0x12
    2b7c:	f4 01       	movw	r30, r8
    2b7e:	87 83       	std	Z+7, r24	; 0x07
    2b80:	90 87       	std	Z+8, r25	; 0x08
    2b82:	a1 87       	std	Z+9, r26	; 0x09
    2b84:	b2 87       	std	Z+10, r27	; 0x0a
    2b86:	4f 88       	ldd	r4, Y+23	; 0x17
    2b88:	58 8c       	ldd	r5, Y+24	; 0x18
    2b8a:	43 86       	std	Z+11, r4	; 0x0b
    2b8c:	54 86       	std	Z+12, r5	; 0x0c
    2b8e:	4b 88       	ldd	r4, Y+19	; 0x13
    2b90:	5c 88       	ldd	r5, Y+20	; 0x14
    2b92:	6d 88       	ldd	r6, Y+21	; 0x15
    2b94:	7e 88       	ldd	r7, Y+22	; 0x16
    2b96:	45 86       	std	Z+13, r4	; 0x0d
    2b98:	56 86       	std	Z+14, r5	; 0x0e
    2b9a:	67 86       	std	Z+15, r6	; 0x0f
    2b9c:	70 8a       	std	Z+16, r7	; 0x10
    2b9e:	89 8d       	ldd	r24, Y+25	; 0x19
    2ba0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2ba2:	ab 8d       	ldd	r26, Y+27	; 0x1b
    2ba4:	bc 8d       	ldd	r27, Y+28	; 0x1c
    2ba6:	82 8b       	std	Z+18, r24	; 0x12
    2ba8:	93 8b       	std	Z+19, r25	; 0x13
    2baa:	a4 8b       	std	Z+20, r26	; 0x14
    2bac:	b5 8b       	std	Z+21, r27	; 0x15
    2bae:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb2:	ad 81       	ldd	r26, Y+5	; 0x05
    2bb4:	be 81       	ldd	r27, Y+6	; 0x06
    2bb6:	86 8b       	std	Z+22, r24	; 0x16
    2bb8:	97 8b       	std	Z+23, r25	; 0x17
    2bba:	a0 8f       	std	Z+24, r26	; 0x18
    2bbc:	b1 8f       	std	Z+25, r27	; 0x19
    2bbe:	4d 84       	ldd	r4, Y+13	; 0x0d
    2bc0:	42 8e       	std	Z+26, r4	; 0x1a
    2bc2:	5e 84       	ldd	r5, Y+14	; 0x0e
    2bc4:	53 8e       	std	Z+27, r5	; 0x1b
    2bc6:	a4 8e       	std	Z+28, r10	; 0x1c
    2bc8:	6d 8c       	ldd	r6, Y+29	; 0x1d
    2bca:	65 8e       	std	Z+29, r6	; 0x1d


}
    2bcc:	c4 01       	movw	r24, r8
    2bce:	a2 96       	adiw	r28, 0x22	; 34
    2bd0:	cd bf       	out	0x3d, r28	; 61
    2bd2:	de bf       	out	0x3e, r29	; 62
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	1f 91       	pop	r17
    2bda:	0f 91       	pop	r16
    2bdc:	ff 90       	pop	r15
    2bde:	ef 90       	pop	r14
    2be0:	df 90       	pop	r13
    2be2:	cf 90       	pop	r12
    2be4:	bf 90       	pop	r11
    2be6:	af 90       	pop	r10
    2be8:	9f 90       	pop	r9
    2bea:	8f 90       	pop	r8
    2bec:	7f 90       	pop	r7
    2bee:	6f 90       	pop	r6
    2bf0:	5f 90       	pop	r5
    2bf2:	4f 90       	pop	r4
    2bf4:	3f 90       	pop	r3
    2bf6:	2f 90       	pop	r2
    2bf8:	08 95       	ret

00002bfa <__portable_avr_delay_cycles>:
	PORTE.OUTSET = 0b00000001;
}*/

void heatshield_solenoid(PORT_t* port){
	(*port).DIRSET = 0b10000000;
	(*port).OUTSET = 0b10000000;
    2bfa:	04 c0       	rjmp	.+8      	; 0x2c04 <__portable_avr_delay_cycles+0xa>
    2bfc:	61 50       	subi	r22, 0x01	; 1
    2bfe:	71 09       	sbc	r23, r1
    2c00:	81 09       	sbc	r24, r1
    2c02:	91 09       	sbc	r25, r1
    2c04:	61 15       	cp	r22, r1
    2c06:	71 05       	cpc	r23, r1
    2c08:	81 05       	cpc	r24, r1
    2c0a:	91 05       	cpc	r25, r1
    2c0c:	b9 f7       	brne	.-18     	; 0x2bfc <__portable_avr_delay_cycles+0x2>
    2c0e:	08 95       	ret

00002c10 <heatshield_hotwire>:
}

void heatshield_hotwire (void){
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
	PORTD.DIR |= 0b00000010;
    2c14:	c0 e6       	ldi	r28, 0x60	; 96
    2c16:	d6 e0       	ldi	r29, 0x06	; 6
    2c18:	88 81       	ld	r24, Y
    2c1a:	82 60       	ori	r24, 0x02	; 2
    2c1c:	88 83       	st	Y, r24
	PORTD.OUT |= 0b00000010; //TODO: fix these port addresses
    2c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c20:	82 60       	ori	r24, 0x02	; 2
    2c22:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(4000);
    2c24:	66 e5       	ldi	r22, 0x56	; 86
    2c26:	75 e8       	ldi	r23, 0x85	; 133
    2c28:	85 e4       	ldi	r24, 0x45	; 69
    2c2a:	91 e0       	ldi	r25, 0x01	; 1
    2c2c:	e6 df       	rcall	.-52     	; 0x2bfa <__portable_avr_delay_cycles>
	PORTD.OUT &= 0b11111101;
    2c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c30:	8d 7f       	andi	r24, 0xFD	; 253
    2c32:	8c 83       	std	Y+4, r24	; 0x04
}
    2c34:	df 91       	pop	r29
    2c36:	cf 91       	pop	r28
    2c38:	08 95       	ret

00002c3a <parachute_hotwire>:

void parachute_hotwire (void) {
    2c3a:	cf 93       	push	r28
    2c3c:	df 93       	push	r29
	PORTD.DIR |= 0b00000010;
    2c3e:	c0 e6       	ldi	r28, 0x60	; 96
    2c40:	d6 e0       	ldi	r29, 0x06	; 6
    2c42:	88 81       	ld	r24, Y
    2c44:	82 60       	ori	r24, 0x02	; 2
    2c46:	88 83       	st	Y, r24
	PORTD.OUT |= 0b00000010; //TODO: fix these port addresses
    2c48:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4a:	82 60       	ori	r24, 0x02	; 2
    2c4c:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(4000);
    2c4e:	66 e5       	ldi	r22, 0x56	; 86
    2c50:	75 e8       	ldi	r23, 0x85	; 133
    2c52:	85 e4       	ldi	r24, 0x45	; 69
    2c54:	91 e0       	ldi	r25, 0x01	; 1
    2c56:	d1 df       	rcall	.-94     	; 0x2bfa <__portable_avr_delay_cycles>
	PORTD.OUT &= 0b11111101;
    2c58:	8c 81       	ldd	r24, Y+4	; 0x04
    2c5a:	8d 7f       	andi	r24, 0xFD	; 253
    2c5c:	8c 83       	std	Y+4, r24	; 0x04
}
    2c5e:	df 91       	pop	r29
    2c60:	cf 91       	pop	r28
    2c62:	08 95       	ret

00002c64 <heatshield_detatch_hotwire>:

void heatshield_detatch_hotwire(void){
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
	PORTD.DIR |= 0b00000010;
    2c68:	c0 e6       	ldi	r28, 0x60	; 96
    2c6a:	d6 e0       	ldi	r29, 0x06	; 6
    2c6c:	88 81       	ld	r24, Y
    2c6e:	82 60       	ori	r24, 0x02	; 2
    2c70:	88 83       	st	Y, r24
	PORTD.OUT |= 0b00000010; //TODO: fix these port addresses
    2c72:	8c 81       	ldd	r24, Y+4	; 0x04
    2c74:	82 60       	ori	r24, 0x02	; 2
    2c76:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(4000);
    2c78:	66 e5       	ldi	r22, 0x56	; 86
    2c7a:	75 e8       	ldi	r23, 0x85	; 133
    2c7c:	85 e4       	ldi	r24, 0x45	; 69
    2c7e:	91 e0       	ldi	r25, 0x01	; 1
    2c80:	bc df       	rcall	.-136    	; 0x2bfa <__portable_avr_delay_cycles>
	PORTD.OUT &= 0b11111101;	
    2c82:	8c 81       	ldd	r24, Y+4	; 0x04
    2c84:	8d 7f       	andi	r24, 0xFD	; 253
    2c86:	8c 83       	std	Y+4, r24	; 0x04
}
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	08 95       	ret

00002c8e <buzzer_on>:

void buzzer_on(void){
	PORTB.DIR |= 0b00000001; 
    2c8e:	e0 e2       	ldi	r30, 0x20	; 32
    2c90:	f6 e0       	ldi	r31, 0x06	; 6
    2c92:	80 81       	ld	r24, Z
    2c94:	81 60       	ori	r24, 0x01	; 1
    2c96:	80 83       	st	Z, r24
	PORTB.OUT |= 0b00000001;
    2c98:	84 81       	ldd	r24, Z+4	; 0x04
    2c9a:	81 60       	ori	r24, 0x01	; 1
    2c9c:	84 83       	std	Z+4, r24	; 0x04
    2c9e:	08 95       	ret

00002ca0 <buzzer_off>:
	
}
void buzzer_off(void){
	PORTB.DIR |= 0b00000001;  
    2ca0:	e0 e2       	ldi	r30, 0x20	; 32
    2ca2:	f6 e0       	ldi	r31, 0x06	; 6
    2ca4:	80 81       	ld	r24, Z
    2ca6:	81 60       	ori	r24, 0x01	; 1
    2ca8:	80 83       	st	Z, r24
	PORTB.OUT &= 0b11111110;
    2caa:	84 81       	ldd	r24, Z+4	; 0x04
    2cac:	8e 7f       	andi	r24, 0xFE	; 254
    2cae:	84 83       	std	Z+4, r24	; 0x04
    2cb0:	08 95       	ret

00002cb2 <camera_on>:
	
}
void camera_on(void){
	PORTE.DIR |= 0b01000000;
    2cb2:	e0 e8       	ldi	r30, 0x80	; 128
    2cb4:	f6 e0       	ldi	r31, 0x06	; 6
    2cb6:	80 81       	ld	r24, Z
    2cb8:	80 64       	ori	r24, 0x40	; 64
    2cba:	80 83       	st	Z, r24
	PORTE.OUT |= 0b01000000;
    2cbc:	84 81       	ldd	r24, Z+4	; 0x04
    2cbe:	80 64       	ori	r24, 0x40	; 64
    2cc0:	84 83       	std	Z+4, r24	; 0x04
    2cc2:	08 95       	ret

00002cc4 <__vector_2>:
		return 0;
	}
}

ISR(MPU9250_INT_vect)
{
    2cc4:	1f 92       	push	r1
    2cc6:	0f 92       	push	r0
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	0f 92       	push	r0
    2ccc:	11 24       	eor	r1, r1
    2cce:	08 b6       	in	r0, 0x38	; 56
    2cd0:	0f 92       	push	r0
    2cd2:	18 be       	out	0x38, r1	; 56
    2cd4:	09 b6       	in	r0, 0x39	; 57
    2cd6:	0f 92       	push	r0
    2cd8:	19 be       	out	0x39, r1	; 57
    2cda:	8f 93       	push	r24
    2cdc:	9f 93       	push	r25
    2cde:	af 93       	push	r26
    2ce0:	bf 93       	push	r27
	data_rdy_flag = 1;
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <data_rdy_flag>
	timerflag = 1;
    2ce8:	80 93 d1 20 	sts	0x20D1, r24	; 0x8020d1 <timerflag>
	time++;
    2cec:	80 91 cd 20 	lds	r24, 0x20CD	; 0x8020cd <time>
    2cf0:	90 91 ce 20 	lds	r25, 0x20CE	; 0x8020ce <time+0x1>
    2cf4:	a0 91 cf 20 	lds	r26, 0x20CF	; 0x8020cf <time+0x2>
    2cf8:	b0 91 d0 20 	lds	r27, 0x20D0	; 0x8020d0 <time+0x3>
    2cfc:	01 96       	adiw	r24, 0x01	; 1
    2cfe:	a1 1d       	adc	r26, r1
    2d00:	b1 1d       	adc	r27, r1
    2d02:	80 93 cd 20 	sts	0x20CD, r24	; 0x8020cd <time>
    2d06:	90 93 ce 20 	sts	0x20CE, r25	; 0x8020ce <time+0x1>
    2d0a:	a0 93 cf 20 	sts	0x20CF, r26	; 0x8020cf <time+0x2>
    2d0e:	b0 93 d0 20 	sts	0x20D0, r27	; 0x8020d0 <time+0x3>
}
    2d12:	bf 91       	pop	r27
    2d14:	af 91       	pop	r26
    2d16:	9f 91       	pop	r25
    2d18:	8f 91       	pop	r24
    2d1a:	0f 90       	pop	r0
    2d1c:	09 be       	out	0x39, r0	; 57
    2d1e:	0f 90       	pop	r0
    2d20:	08 be       	out	0x38, r0	; 56
    2d22:	0f 90       	pop	r0
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	0f 90       	pop	r0
    2d28:	1f 90       	pop	r1
    2d2a:	18 95       	reti

00002d2c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2d2c:	04 c0       	rjmp	.+8      	; 0x2d36 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2d2e:	61 50       	subi	r22, 0x01	; 1
    2d30:	71 09       	sbc	r23, r1
    2d32:	81 09       	sbc	r24, r1
    2d34:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2d36:	61 15       	cp	r22, r1
    2d38:	71 05       	cpc	r23, r1
    2d3a:	81 05       	cpc	r24, r1
    2d3c:	91 05       	cpc	r25, r1
    2d3e:	b9 f7       	brne	.-18     	; 0x2d2e <__portable_avr_delay_cycles+0x2>
    2d40:	08 95       	ret

00002d42 <spi_init>:
uint16_t C4; // Temperature coefficient of pressure offset; TCO
uint16_t C5; // Reference temperature; Tref
uint16_t C6; // Temperature coefficient of the pressure; TEMPSENS

void spi_init(void){
	PORTC.DIRSET = 0b10110000; //Open the output pins for the SPI
    2d42:	e0 e4       	ldi	r30, 0x40	; 64
    2d44:	f6 e0       	ldi	r31, 0x06	; 6
    2d46:	80 eb       	ldi	r24, 0xB0	; 176
    2d48:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = 0b01000000; //Open the input pins for the SPI
    2d4a:	90 e4       	ldi	r25, 0x40	; 64
    2d4c:	92 83       	std	Z+2, r25	; 0x02
	PORTC.OUT = 0b10110000;
    2d4e:	84 83       	std	Z+4, r24	; 0x04
	SPIC.CTRL = 0b01010011;
    2d50:	83 e5       	ldi	r24, 0x53	; 83
    2d52:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
	PORTD.DIRSET = 0b00000010;
    2d56:	82 e0       	ldi	r24, 0x02	; 2
    2d58:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
    2d5c:	08 95       	ret

00002d5e <spi_write>:
}

void spi_write(uint8_t command){
	SPIC.DATA = command;
    2d5e:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7)); //waits until the status register changes
    2d62:	e0 ec       	ldi	r30, 0xC0	; 192
    2d64:	f8 e0       	ldi	r31, 0x08	; 8
    2d66:	82 81       	ldd	r24, Z+2	; 0x02
    2d68:	88 23       	and	r24, r24
    2d6a:	ec f7       	brge	.-6      	; 0x2d66 <spi_write+0x8>
}
    2d6c:	08 95       	ret

00002d6e <spi_read>:

uint8_t spi_read(void){
	spi_write(0xFF); //writes a max byte 
    2d6e:	8f ef       	ldi	r24, 0xFF	; 255
    2d70:	f6 df       	rcall	.-20     	; 0x2d5e <spi_write>
	return SPIC.DATA; //gets the data and returns value
    2d72:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    2d76:	08 95       	ret

00002d78 <prom_read>:
	C4 = prom_read(0xA8);
	C5 = prom_read(0xAA);
	C6 = prom_read(0xAC);
}

uint16_t prom_read(uint8_t command){ // reads the specified data value stored in the sensor.
    2d78:	1f 93       	push	r17
    2d7a:	cf 93       	push	r28
    2d7c:	df 93       	push	r29
	//int32_t P = 0;
	return P;
}

void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
    2d7e:	12 e0       	ldi	r17, 0x02	; 2
    2d80:	10 93 66 06 	sts	0x0666, r17	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>

uint16_t prom_read(uint8_t command){ // reads the specified data value stored in the sensor.
	uint16_t data;
	pres_select();
	spi_write(command);
	data = ((uint16_t)spi_read())<<8;
    2d84:	ec df       	rcall	.-40     	; 0x2d5e <spi_write>
    2d86:	f3 df       	rcall	.-26     	; 0x2d6e <spi_read>
    2d88:	c8 2f       	mov	r28, r24
    2d8a:	d0 e0       	ldi	r29, 0x00	; 0
	data += spi_read();
    2d8c:	dc 2f       	mov	r29, r28
    2d8e:	cc 27       	eor	r28, r28
    2d90:	ee df       	rcall	.-36     	; 0x2d6e <spi_read>
    2d92:	c8 0f       	add	r28, r24
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    2d94:	d1 1d       	adc	r29, r1
    2d96:	10 93 65 06 	sts	0x0665, r17	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
	pres_select();
	spi_write(command);
	data = ((uint16_t)spi_read())<<8;
	data += spi_read();
	pres_deselect();
	delay_ms(1);
    2d9a:	66 ed       	ldi	r22, 0xD6	; 214
    2d9c:	74 e1       	ldi	r23, 0x14	; 20
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
	return data;
}
    2da2:	c4 df       	rcall	.-120    	; 0x2d2c <__portable_avr_delay_cycles>
    2da4:	ce 01       	movw	r24, r28
    2da6:	df 91       	pop	r29
    2da8:	cf 91       	pop	r28
    2daa:	1f 91       	pop	r17
    2dac:	08 95       	ret

00002dae <ms5607init>:
uint8_t spi_read(void){
	spi_write(0xFF); //writes a max byte 
	return SPIC.DATA; //gets the data and returns value
}

void ms5607init(void){
    2dae:	cf 93       	push	r28
	//int32_t P = 0;
	return P;
}

void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
    2db0:	c2 e0       	ldi	r28, 0x02	; 2
    2db2:	c0 93 66 06 	sts	0x0666, r28	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	return SPIC.DATA; //gets the data and returns value
}

void ms5607init(void){
	pres_select(); // Turn on output pin for port 4. 
	spi_write(0x1E);
    2db6:	8e e1       	ldi	r24, 0x1E	; 30
    2db8:	d2 df       	rcall	.-92     	; 0x2d5e <spi_write>
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    2dba:	c0 93 65 06 	sts	0x0665, r28	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>

void ms5607init(void){
	pres_select(); // Turn on output pin for port 4. 
	spi_write(0x1E);
	pres_deselect(); //reset command for the sensor; refer to datasheet for more.
	delay_ms(10);
    2dbe:	66 e5       	ldi	r22, 0x56	; 86
    2dc0:	70 ed       	ldi	r23, 0xD0	; 208
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
	
	
	
	//Get the programmatical settings from the sensor for future calculations.
	C1 = prom_read(0xA2);
    2dc6:	b2 df       	rcall	.-156    	; 0x2d2c <__portable_avr_delay_cycles>
    2dc8:	82 ea       	ldi	r24, 0xA2	; 162
    2dca:	d6 df       	rcall	.-84     	; 0x2d78 <prom_read>
    2dcc:	80 93 8c 23 	sts	0x238C, r24	; 0x80238c <C1>
    2dd0:	90 93 8d 23 	sts	0x238D, r25	; 0x80238d <C1+0x1>
	C2 = prom_read(0xA4);
    2dd4:	84 ea       	ldi	r24, 0xA4	; 164
    2dd6:	d0 df       	rcall	.-96     	; 0x2d78 <prom_read>
    2dd8:	80 93 90 23 	sts	0x2390, r24	; 0x802390 <C2>
    2ddc:	90 93 91 23 	sts	0x2391, r25	; 0x802391 <C2+0x1>
	C3 = prom_read(0xA6);
    2de0:	86 ea       	ldi	r24, 0xA6	; 166
    2de2:	ca df       	rcall	.-108    	; 0x2d78 <prom_read>
    2de4:	80 93 8e 23 	sts	0x238E, r24	; 0x80238e <C3>
    2de8:	90 93 8f 23 	sts	0x238F, r25	; 0x80238f <C3+0x1>
	C4 = prom_read(0xA8);
    2dec:	88 ea       	ldi	r24, 0xA8	; 168
    2dee:	c4 df       	rcall	.-120    	; 0x2d78 <prom_read>
    2df0:	80 93 96 23 	sts	0x2396, r24	; 0x802396 <C4>
    2df4:	90 93 97 23 	sts	0x2397, r25	; 0x802397 <C4+0x1>
	C5 = prom_read(0xAA);
    2df8:	8a ea       	ldi	r24, 0xAA	; 170
    2dfa:	be df       	rcall	.-132    	; 0x2d78 <prom_read>
    2dfc:	80 93 94 23 	sts	0x2394, r24	; 0x802394 <C5>
    2e00:	90 93 95 23 	sts	0x2395, r25	; 0x802395 <C5+0x1>
	C6 = prom_read(0xAC);
    2e04:	8c ea       	ldi	r24, 0xAC	; 172
    2e06:	b8 df       	rcall	.-144    	; 0x2d78 <prom_read>
    2e08:	80 93 92 23 	sts	0x2392, r24	; 0x802392 <C6>
    2e0c:	90 93 93 23 	sts	0x2393, r25	; 0x802393 <C6+0x1>
}
    2e10:	cf 91       	pop	r28
    2e12:	08 95       	ret

00002e14 <data_read>:
	pres_deselect();
	delay_ms(1);
	return data;
}

uint32_t data_read(uint8_t command){
    2e14:	8f 92       	push	r8
    2e16:	9f 92       	push	r9
    2e18:	af 92       	push	r10
    2e1a:	bf 92       	push	r11
    2e1c:	cf 92       	push	r12
    2e1e:	df 92       	push	r13
    2e20:	ef 92       	push	r14
    2e22:	ff 92       	push	r15
    2e24:	1f 93       	push	r17
    2e26:	cf 93       	push	r28
    2e28:	df 93       	push	r29
	//int32_t P = 0;
	return P;
}

void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
    2e2a:	0f 2e       	mov	r0, r31
    2e2c:	f6 e6       	ldi	r31, 0x66	; 102
    2e2e:	ef 2e       	mov	r14, r31
    2e30:	f6 e0       	ldi	r31, 0x06	; 6
    2e32:	ff 2e       	mov	r15, r31
    2e34:	f0 2d       	mov	r31, r0
    2e36:	12 e0       	ldi	r17, 0x02	; 2
    2e38:	f7 01       	movw	r30, r14
}

uint32_t data_read(uint8_t command){
	uint32_t data;
	pres_select();
	spi_write(command);
    2e3a:	10 83       	st	Z, r17
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    2e3c:	90 df       	rcall	.-224    	; 0x2d5e <spi_write>
    2e3e:	c5 e6       	ldi	r28, 0x65	; 101
    2e40:	d6 e0       	ldi	r29, 0x06	; 6
uint32_t data_read(uint8_t command){
	uint32_t data;
	pres_select();
	spi_write(command);
	pres_deselect();
	delay_ms(10); //delay to wait for the data output
    2e42:	18 83       	st	Y, r17
    2e44:	66 e5       	ldi	r22, 0x56	; 86
    2e46:	70 ed       	ldi	r23, 0xD0	; 208
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
	pres_select();
	spi_write(0x00);
    2e4c:	6f df       	rcall	.-290    	; 0x2d2c <__portable_avr_delay_cycles>
    2e4e:	f7 01       	movw	r30, r14
	data = ((uint32_t)spi_read())<<16; //gets the first 16 bits of the sensor reading, shunts it to the front of the integer.
    2e50:	10 83       	st	Z, r17
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	84 df       	rcall	.-248    	; 0x2d5e <spi_write>
    2e56:	8b df       	rcall	.-234    	; 0x2d6e <spi_read>
    2e58:	c8 2e       	mov	r12, r24
    2e5a:	d1 2c       	mov	r13, r1
    2e5c:	e1 2c       	mov	r14, r1
    2e5e:	f1 2c       	mov	r15, r1
	data += ((uint32_t)spi_read())<<8; // gets another 8 bits of the reading, shunts it in as well.
    2e60:	56 01       	movw	r10, r12
    2e62:	99 24       	eor	r9, r9
    2e64:	88 24       	eor	r8, r8
    2e66:	83 df       	rcall	.-250    	; 0x2d6e <spi_read>
    2e68:	c8 2e       	mov	r12, r24
    2e6a:	d1 2c       	mov	r13, r1
    2e6c:	e1 2c       	mov	r14, r1
    2e6e:	f1 2c       	mov	r15, r1
    2e70:	fe 2c       	mov	r15, r14
    2e72:	ed 2c       	mov	r14, r13
    2e74:	dc 2c       	mov	r13, r12
    2e76:	cc 24       	eor	r12, r12
    2e78:	c8 0c       	add	r12, r8
	data += (uint32_t)spi_read(); // gets the final 8 bits from the sensor.
    2e7a:	d9 1c       	adc	r13, r9
    2e7c:	ea 1c       	adc	r14, r10
void pres_select(void){
	PORTD_OUTCLR = 0b0000010;
}

void pres_deselect(void){
	PORTD_OUTSET = 0b00000010;
    2e7e:	fb 1c       	adc	r15, r11
	data = ((uint32_t)spi_read())<<16; //gets the first 16 bits of the sensor reading, shunts it to the front of the integer.
	data += ((uint32_t)spi_read())<<8; // gets another 8 bits of the reading, shunts it in as well.
	data += (uint32_t)spi_read(); // gets the final 8 bits from the sensor.
	pres_deselect();
	//delay_ms(10);
	return data;
    2e80:	76 df       	rcall	.-276    	; 0x2d6e <spi_read>
    2e82:	18 83       	st	Y, r17
    2e84:	a7 01       	movw	r20, r14
    2e86:	96 01       	movw	r18, r12
    2e88:	28 0f       	add	r18, r24
    2e8a:	31 1d       	adc	r19, r1
    2e8c:	41 1d       	adc	r20, r1
    2e8e:	51 1d       	adc	r21, r1
}
    2e90:	ca 01       	movw	r24, r20
    2e92:	b9 01       	movw	r22, r18
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	1f 91       	pop	r17
    2e9a:	ff 90       	pop	r15
    2e9c:	ef 90       	pop	r14
    2e9e:	df 90       	pop	r13
    2ea0:	cf 90       	pop	r12
    2ea2:	bf 90       	pop	r11
    2ea4:	af 90       	pop	r10
    2ea6:	9f 90       	pop	r9
    2ea8:	8f 90       	pop	r8
    2eaa:	08 95       	ret

00002eac <get_pressure>:

uint32_t get_pressure(void){ //refer to the datasheet for these calculations.
    2eac:	2f 92       	push	r2
    2eae:	3f 92       	push	r3
    2eb0:	4f 92       	push	r4
    2eb2:	5f 92       	push	r5
    2eb4:	6f 92       	push	r6
    2eb6:	7f 92       	push	r7
    2eb8:	8f 92       	push	r8
    2eba:	9f 92       	push	r9
    2ebc:	af 92       	push	r10
    2ebe:	bf 92       	push	r11
    2ec0:	cf 92       	push	r12
    2ec2:	df 92       	push	r13
    2ec4:	ef 92       	push	r14
    2ec6:	ff 92       	push	r15
    2ec8:	0f 93       	push	r16
    2eca:	1f 93       	push	r17
    2ecc:	cf 93       	push	r28
    2ece:	df 93       	push	r29
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	64 97       	sbiw	r28, 0x14	; 20
    2ed6:	cd bf       	out	0x3d, r28	; 61
    2ed8:	de bf       	out	0x3e, r29	; 62
	
	uint32_t D1 = data_read(0x48); // Gets digital pressure value
    2eda:	88 e4       	ldi	r24, 0x48	; 72
    2edc:	9b df       	rcall	.-202    	; 0x2e14 <data_read>
    2ede:	2b 01       	movw	r4, r22
	uint32_t D2 = data_read(0x58); // Gets temperature value
    2ee0:	3c 01       	movw	r6, r24
    2ee2:	88 e5       	ldi	r24, 0x58	; 88
	
	//printf("D1: %lu, D2: %lu", D1, D2);
	
	int32_t dT = (int64_t)D2 - (int64_t)C5 * 256; // Runs calculations to get dT
	int32_t TEMP = 2000 + (int64_t)dT * (int64_t)C6 / 8388608; // Finds actual temp
    2ee4:	97 df       	rcall	.-210    	; 0x2e14 <data_read>
    2ee6:	20 91 94 23 	lds	r18, 0x2394	; 0x802394 <C5>
    2eea:	30 91 95 23 	lds	r19, 0x2395	; 0x802395 <C5+0x1>
    2eee:	89 01       	movw	r16, r18
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	32 2f       	mov	r19, r18
    2ef6:	21 2f       	mov	r18, r17
    2ef8:	10 2f       	mov	r17, r16
    2efa:	00 27       	eor	r16, r16
    2efc:	6b 01       	movw	r12, r22
    2efe:	7c 01       	movw	r14, r24
    2f00:	c0 1a       	sub	r12, r16
    2f02:	d1 0a       	sbc	r13, r17
    2f04:	e2 0a       	sbc	r14, r18
    2f06:	f3 0a       	sbc	r15, r19
    2f08:	c9 82       	std	Y+1, r12	; 0x01
    2f0a:	da 82       	std	Y+2, r13	; 0x02
    2f0c:	eb 82       	std	Y+3, r14	; 0x03
    2f0e:	fc 82       	std	Y+4, r15	; 0x04
    2f10:	ff 0c       	add	r15, r15
    2f12:	cc 08       	sbc	r12, r12
    2f14:	dc 2c       	mov	r13, r12
    2f16:	76 01       	movw	r14, r12
    2f18:	cd 82       	std	Y+5, r12	; 0x05
    2f1a:	de 82       	std	Y+6, r13	; 0x06
    2f1c:	ef 82       	std	Y+7, r14	; 0x07
	int64_t OFF =	(int64_t)C2 * 131072 + ((int64_t)C4 * (int64_t)dT) / 64;
	int64_t SENS = (int64_t)C1 * 65536 + ((int64_t)C3 * (int64_t)dT) / 128; 
	int32_t P = ((int64_t)D1 * (int64_t)SENS / 2097152 - (int64_t)OFF) / 32768; // Gets the actual temperature and type casts it.
	//printf("Test: %lld\n", test);
	//int32_t P = 0;
	return P;
    2f1e:	f8 86       	std	Y+8, r15	; 0x08
    2f20:	80 91 8e 23 	lds	r24, 0x238E	; 0x80238e <C3>
    2f24:	90 91 8f 23 	lds	r25, 0x238F	; 0x80238f <C3+0x1>
    2f28:	7c 01       	movw	r14, r24
    2f2a:	00 e0       	ldi	r16, 0x00	; 0
    2f2c:	10 e0       	ldi	r17, 0x00	; 0
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	a9 01       	movw	r20, r18
    2f34:	8d 87       	std	Y+13, r24	; 0x0d
    2f36:	fe 86       	std	Y+14, r15	; 0x0e
    2f38:	0f 87       	std	Y+15, r16	; 0x0f
    2f3a:	18 8b       	std	Y+16, r17	; 0x10
    2f3c:	29 8b       	std	Y+17, r18	; 0x11
    2f3e:	3a 8b       	std	Y+18, r19	; 0x12
    2f40:	4b 8b       	std	Y+19, r20	; 0x13
    2f42:	5c 8b       	std	Y+20, r21	; 0x14
    2f44:	a9 80       	ldd	r10, Y+1	; 0x01
    2f46:	ba 80       	ldd	r11, Y+2	; 0x02
    2f48:	cb 80       	ldd	r12, Y+3	; 0x03
    2f4a:	dc 80       	ldd	r13, Y+4	; 0x04
    2f4c:	ed 80       	ldd	r14, Y+5	; 0x05
    2f4e:	fe 2c       	mov	r15, r14
    2f50:	0e 2d       	mov	r16, r14
    2f52:	1e 2d       	mov	r17, r14
    2f54:	2d 85       	ldd	r18, Y+13	; 0x0d
    2f56:	3e 85       	ldd	r19, Y+14	; 0x0e
    2f58:	40 e0       	ldi	r20, 0x00	; 0
    2f5a:	50 e0       	ldi	r21, 0x00	; 0
    2f5c:	60 e0       	ldi	r22, 0x00	; 0
    2f5e:	70 e0       	ldi	r23, 0x00	; 0
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	0e 94 44 24 	call	0x4888	; 0x4888 <__muldi3>
    2f68:	b2 2f       	mov	r27, r18
    2f6a:	f3 2f       	mov	r31, r19
    2f6c:	e4 2f       	mov	r30, r20
    2f6e:	95 2e       	mov	r9, r21
    2f70:	86 2e       	mov	r8, r22
    2f72:	37 2e       	mov	r3, r23
    2f74:	a8 2e       	mov	r10, r24
    2f76:	b9 2e       	mov	r11, r25
    2f78:	a0 e0       	ldi	r26, 0x00	; 0
    2f7a:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__cmpdi2_s8>
    2f7e:	5c f4       	brge	.+22     	; 0x2f96 <get_pressure+0xea>
    2f80:	af e7       	ldi	r26, 0x7F	; 127
    2f82:	0e 94 d5 24 	call	0x49aa	; 0x49aa <__adddi3_s8>
    2f86:	b2 2f       	mov	r27, r18
    2f88:	f3 2f       	mov	r31, r19
    2f8a:	e4 2f       	mov	r30, r20
    2f8c:	95 2e       	mov	r9, r21
    2f8e:	86 2e       	mov	r8, r22
    2f90:	37 2e       	mov	r3, r23
    2f92:	a8 2e       	mov	r10, r24
    2f94:	b9 2e       	mov	r11, r25
    2f96:	2b 2f       	mov	r18, r27
    2f98:	3f 2f       	mov	r19, r31
    2f9a:	4e 2f       	mov	r20, r30
    2f9c:	59 2d       	mov	r21, r9
    2f9e:	68 2d       	mov	r22, r8
    2fa0:	73 2d       	mov	r23, r3
    2fa2:	8a 2d       	mov	r24, r10
    2fa4:	9b 2d       	mov	r25, r11
    2fa6:	07 e0       	ldi	r16, 0x07	; 7
    2fa8:	0e 94 ae 24 	call	0x495c	; 0x495c <__ashrdi3>
    2fac:	82 2e       	mov	r8, r18
    2fae:	93 2e       	mov	r9, r19
    2fb0:	4a 87       	std	Y+10, r20	; 0x0a
    2fb2:	59 87       	std	Y+9, r21	; 0x09
    2fb4:	b6 2f       	mov	r27, r22
    2fb6:	a7 2f       	mov	r26, r23
    2fb8:	f8 2f       	mov	r31, r24
    2fba:	e9 2f       	mov	r30, r25
    2fbc:	a0 90 8c 23 	lds	r10, 0x238C	; 0x80238c <C1>
    2fc0:	b0 90 8d 23 	lds	r11, 0x238D	; 0x80238d <C1+0x1>
    2fc4:	2a 2d       	mov	r18, r10
    2fc6:	3b 2d       	mov	r19, r11
    2fc8:	40 e0       	ldi	r20, 0x00	; 0
    2fca:	50 e0       	ldi	r21, 0x00	; 0
    2fcc:	60 e0       	ldi	r22, 0x00	; 0
    2fce:	70 e0       	ldi	r23, 0x00	; 0
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	00 e1       	ldi	r16, 0x10	; 16
    2fd6:	0e 94 95 24 	call	0x492a	; 0x492a <__ashldi3>
    2fda:	a2 2e       	mov	r10, r18
    2fdc:	b3 2e       	mov	r11, r19
    2fde:	c4 2e       	mov	r12, r20
    2fe0:	d5 2e       	mov	r13, r21
    2fe2:	e6 2e       	mov	r14, r22
    2fe4:	f7 2e       	mov	r15, r23
    2fe6:	08 2f       	mov	r16, r24
    2fe8:	19 2f       	mov	r17, r25
    2fea:	28 2d       	mov	r18, r8
    2fec:	39 2d       	mov	r19, r9
    2fee:	4a 85       	ldd	r20, Y+10	; 0x0a
    2ff0:	59 85       	ldd	r21, Y+9	; 0x09
    2ff2:	6b 2f       	mov	r22, r27
    2ff4:	7a 2f       	mov	r23, r26
    2ff6:	8f 2f       	mov	r24, r31
    2ff8:	9e 2f       	mov	r25, r30
    2ffa:	0e 94 cc 24 	call	0x4998	; 0x4998 <__adddi3>
    2ffe:	12 01       	movw	r2, r4
    3000:	23 01       	movw	r4, r6
    3002:	a2 2c       	mov	r10, r2
    3004:	b3 2c       	mov	r11, r3
    3006:	c4 2c       	mov	r12, r4
    3008:	d5 2c       	mov	r13, r5
    300a:	e1 2c       	mov	r14, r1
    300c:	f1 2c       	mov	r15, r1
    300e:	00 e0       	ldi	r16, 0x00	; 0
    3010:	10 e0       	ldi	r17, 0x00	; 0
    3012:	0e 94 44 24 	call	0x4888	; 0x4888 <__muldi3>
    3016:	12 2f       	mov	r17, r18
    3018:	3a 87       	std	Y+10, r19	; 0x0a
    301a:	49 87       	std	Y+9, r20	; 0x09
    301c:	b5 2f       	mov	r27, r21
    301e:	f6 2f       	mov	r31, r22
    3020:	e7 2f       	mov	r30, r23
    3022:	78 2e       	mov	r7, r24
    3024:	89 2e       	mov	r8, r25
    3026:	a0 e0       	ldi	r26, 0x00	; 0
    3028:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__cmpdi2_s8>
    302c:	84 f4       	brge	.+32     	; 0x304e <get_pressure+0x1a2>
    302e:	21 50       	subi	r18, 0x01	; 1
    3030:	31 09       	sbc	r19, r1
    3032:	40 4e       	sbci	r20, 0xE0	; 224
    3034:	5f 4f       	sbci	r21, 0xFF	; 255
    3036:	6f 4f       	sbci	r22, 0xFF	; 255
    3038:	7f 4f       	sbci	r23, 0xFF	; 255
    303a:	8f 4f       	sbci	r24, 0xFF	; 255
    303c:	9f 4f       	sbci	r25, 0xFF	; 255
    303e:	12 2f       	mov	r17, r18
    3040:	3a 87       	std	Y+10, r19	; 0x0a
    3042:	49 87       	std	Y+9, r20	; 0x09
    3044:	b5 2f       	mov	r27, r21
    3046:	f6 2f       	mov	r31, r22
    3048:	e7 2f       	mov	r30, r23
    304a:	78 2e       	mov	r7, r24
    304c:	89 2e       	mov	r8, r25
    304e:	21 2f       	mov	r18, r17
    3050:	3a 85       	ldd	r19, Y+10	; 0x0a
    3052:	49 85       	ldd	r20, Y+9	; 0x09
    3054:	5b 2f       	mov	r21, r27
    3056:	6f 2f       	mov	r22, r31
    3058:	7e 2f       	mov	r23, r30
    305a:	87 2d       	mov	r24, r7
    305c:	98 2d       	mov	r25, r8
    305e:	05 e1       	ldi	r16, 0x15	; 21
    3060:	0e 94 ae 24 	call	0x495c	; 0x495c <__ashrdi3>
    3064:	62 2e       	mov	r6, r18
    3066:	73 2e       	mov	r7, r19
    3068:	84 2e       	mov	r8, r20
    306a:	95 2e       	mov	r9, r21
    306c:	69 87       	std	Y+9, r22	; 0x09
    306e:	7a 87       	std	Y+10, r23	; 0x0a
    3070:	8b 87       	std	Y+11, r24	; 0x0b
    3072:	9c 87       	std	Y+12, r25	; 0x0c
    3074:	40 91 96 23 	lds	r20, 0x2396	; 0x802396 <C4>
    3078:	50 91 97 23 	lds	r21, 0x2397	; 0x802397 <C4+0x1>
    307c:	6a 01       	movw	r12, r20
    307e:	e1 2c       	mov	r14, r1
    3080:	f1 2c       	mov	r15, r1
    3082:	00 e0       	ldi	r16, 0x00	; 0
    3084:	10 e0       	ldi	r17, 0x00	; 0
    3086:	98 01       	movw	r18, r16
    3088:	4d 87       	std	Y+13, r20	; 0x0d
    308a:	de 86       	std	Y+14, r13	; 0x0e
    308c:	ef 86       	std	Y+15, r14	; 0x0f
    308e:	f8 8a       	std	Y+16, r15	; 0x10
    3090:	09 8b       	std	Y+17, r16	; 0x11
    3092:	1a 8b       	std	Y+18, r17	; 0x12
    3094:	2b 8b       	std	Y+19, r18	; 0x13
    3096:	3c 8b       	std	Y+20, r19	; 0x14
    3098:	a9 80       	ldd	r10, Y+1	; 0x01
    309a:	ba 80       	ldd	r11, Y+2	; 0x02
    309c:	cb 80       	ldd	r12, Y+3	; 0x03
    309e:	dc 80       	ldd	r13, Y+4	; 0x04
    30a0:	ed 80       	ldd	r14, Y+5	; 0x05
    30a2:	fe 2c       	mov	r15, r14
    30a4:	0e 2d       	mov	r16, r14
    30a6:	1e 2d       	mov	r17, r14
    30a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    30aa:	3e 85       	ldd	r19, Y+14	; 0x0e
    30ac:	40 e0       	ldi	r20, 0x00	; 0
    30ae:	50 e0       	ldi	r21, 0x00	; 0
    30b0:	60 e0       	ldi	r22, 0x00	; 0
    30b2:	70 e0       	ldi	r23, 0x00	; 0
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	0e 94 44 24 	call	0x4888	; 0x4888 <__muldi3>
    30bc:	b2 2f       	mov	r27, r18
    30be:	f3 2f       	mov	r31, r19
    30c0:	e4 2f       	mov	r30, r20
    30c2:	35 2e       	mov	r3, r21
    30c4:	26 2e       	mov	r2, r22
    30c6:	79 83       	std	Y+1, r23	; 0x01
    30c8:	48 2e       	mov	r4, r24
    30ca:	59 2e       	mov	r5, r25
    30cc:	a0 e0       	ldi	r26, 0x00	; 0
    30ce:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__cmpdi2_s8>
    30d2:	5c f4       	brge	.+22     	; 0x30ea <get_pressure+0x23e>
    30d4:	af e3       	ldi	r26, 0x3F	; 63
    30d6:	0e 94 d5 24 	call	0x49aa	; 0x49aa <__adddi3_s8>
    30da:	b2 2f       	mov	r27, r18
    30dc:	f3 2f       	mov	r31, r19
    30de:	e4 2f       	mov	r30, r20
    30e0:	35 2e       	mov	r3, r21
    30e2:	26 2e       	mov	r2, r22
    30e4:	79 83       	std	Y+1, r23	; 0x01
    30e6:	48 2e       	mov	r4, r24
    30e8:	59 2e       	mov	r5, r25
    30ea:	2b 2f       	mov	r18, r27
    30ec:	3f 2f       	mov	r19, r31
    30ee:	4e 2f       	mov	r20, r30
    30f0:	53 2d       	mov	r21, r3
    30f2:	62 2d       	mov	r22, r2
    30f4:	79 81       	ldd	r23, Y+1	; 0x01
    30f6:	84 2d       	mov	r24, r4
    30f8:	95 2d       	mov	r25, r5
    30fa:	06 e0       	ldi	r16, 0x06	; 6
    30fc:	0e 94 ae 24 	call	0x495c	; 0x495c <__ashrdi3>
    3100:	22 2e       	mov	r2, r18
    3102:	33 2e       	mov	r3, r19
    3104:	44 2e       	mov	r4, r20
    3106:	55 2e       	mov	r5, r21
    3108:	b6 2f       	mov	r27, r22
    310a:	a7 2f       	mov	r26, r23
    310c:	f8 2f       	mov	r31, r24
    310e:	e9 2f       	mov	r30, r25
    3110:	20 91 90 23 	lds	r18, 0x2390	; 0x802390 <C2>
    3114:	30 91 91 23 	lds	r19, 0x2391	; 0x802391 <C2+0x1>
    3118:	59 01       	movw	r10, r18
    311a:	3b 2d       	mov	r19, r11
    311c:	40 e0       	ldi	r20, 0x00	; 0
    311e:	50 e0       	ldi	r21, 0x00	; 0
    3120:	60 e0       	ldi	r22, 0x00	; 0
    3122:	70 e0       	ldi	r23, 0x00	; 0
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	01 e1       	ldi	r16, 0x11	; 17
    312a:	0e 94 95 24 	call	0x492a	; 0x492a <__ashldi3>
    312e:	a2 2e       	mov	r10, r18
    3130:	b3 2e       	mov	r11, r19
    3132:	c4 2e       	mov	r12, r20
    3134:	d5 2e       	mov	r13, r21
    3136:	e6 2e       	mov	r14, r22
    3138:	f7 2e       	mov	r15, r23
    313a:	08 2f       	mov	r16, r24
    313c:	19 2f       	mov	r17, r25
    313e:	22 2d       	mov	r18, r2
    3140:	33 2d       	mov	r19, r3
    3142:	44 2d       	mov	r20, r4
    3144:	55 2d       	mov	r21, r5
    3146:	6b 2f       	mov	r22, r27
    3148:	7a 2f       	mov	r23, r26
    314a:	8f 2f       	mov	r24, r31
    314c:	9e 2f       	mov	r25, r30
    314e:	0e 94 cc 24 	call	0x4998	; 0x4998 <__adddi3>
    3152:	a2 2e       	mov	r10, r18
    3154:	b3 2e       	mov	r11, r19
    3156:	c4 2e       	mov	r12, r20
    3158:	d5 2e       	mov	r13, r21
    315a:	e6 2e       	mov	r14, r22
    315c:	f7 2e       	mov	r15, r23
    315e:	08 2f       	mov	r16, r24
    3160:	19 2f       	mov	r17, r25
    3162:	26 2d       	mov	r18, r6
    3164:	37 2d       	mov	r19, r7
    3166:	48 2d       	mov	r20, r8
    3168:	59 2d       	mov	r21, r9
    316a:	69 85       	ldd	r22, Y+9	; 0x09
    316c:	7a 85       	ldd	r23, Y+10	; 0x0a
    316e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3170:	9c 85       	ldd	r25, Y+12	; 0x0c
    3172:	0e 94 e1 24 	call	0x49c2	; 0x49c2 <__subdi3>
    3176:	12 2f       	mov	r17, r18
    3178:	3d 83       	std	Y+5, r19	; 0x05
    317a:	49 83       	std	Y+1, r20	; 0x01
    317c:	b5 2f       	mov	r27, r21
    317e:	f6 2f       	mov	r31, r22
    3180:	e7 2f       	mov	r30, r23
    3182:	78 2e       	mov	r7, r24
    3184:	89 2e       	mov	r8, r25
    3186:	a0 e0       	ldi	r26, 0x00	; 0
    3188:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__cmpdi2_s8>
    318c:	84 f4       	brge	.+32     	; 0x31ae <get_pressure+0x302>
    318e:	21 50       	subi	r18, 0x01	; 1
    3190:	30 48       	sbci	r19, 0x80	; 128
    3192:	4f 4f       	sbci	r20, 0xFF	; 255
    3194:	5f 4f       	sbci	r21, 0xFF	; 255
    3196:	6f 4f       	sbci	r22, 0xFF	; 255
    3198:	7f 4f       	sbci	r23, 0xFF	; 255
    319a:	8f 4f       	sbci	r24, 0xFF	; 255
    319c:	9f 4f       	sbci	r25, 0xFF	; 255
    319e:	12 2f       	mov	r17, r18
    31a0:	3d 83       	std	Y+5, r19	; 0x05
    31a2:	49 83       	std	Y+1, r20	; 0x01
    31a4:	b5 2f       	mov	r27, r21
    31a6:	f6 2f       	mov	r31, r22
    31a8:	e7 2f       	mov	r30, r23
    31aa:	78 2e       	mov	r7, r24
    31ac:	89 2e       	mov	r8, r25
    31ae:	21 2f       	mov	r18, r17
    31b0:	3d 81       	ldd	r19, Y+5	; 0x05
    31b2:	49 81       	ldd	r20, Y+1	; 0x01
    31b4:	5b 2f       	mov	r21, r27
    31b6:	6f 2f       	mov	r22, r31
    31b8:	7e 2f       	mov	r23, r30
    31ba:	87 2d       	mov	r24, r7
    31bc:	98 2d       	mov	r25, r8
    31be:	0f e0       	ldi	r16, 0x0F	; 15
    31c0:	0e 94 ae 24 	call	0x495c	; 0x495c <__ashrdi3>
    31c4:	62 2f       	mov	r22, r18
    31c6:	73 2f       	mov	r23, r19
    31c8:	84 2f       	mov	r24, r20
}
    31ca:	95 2f       	mov	r25, r21
    31cc:	64 96       	adiw	r28, 0x14	; 20
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	df 91       	pop	r29
    31d4:	cf 91       	pop	r28
    31d6:	1f 91       	pop	r17
    31d8:	0f 91       	pop	r16
    31da:	ff 90       	pop	r15
    31dc:	ef 90       	pop	r14
    31de:	df 90       	pop	r13
    31e0:	cf 90       	pop	r12
    31e2:	bf 90       	pop	r11
    31e4:	af 90       	pop	r10
    31e6:	9f 90       	pop	r9
    31e8:	8f 90       	pop	r8
    31ea:	7f 90       	pop	r7
    31ec:	6f 90       	pop	r6
    31ee:	5f 90       	pop	r5
    31f0:	4f 90       	pop	r4
    31f2:	3f 90       	pop	r3
    31f4:	2f 90       	pop	r2
    31f6:	08 95       	ret

000031f8 <adc_init>:
#include <asf.h>
#include <math.h>
#include "thermistor.h"


void adc_init(void){	//This is for PA6... mostly
    31f8:	ff 92       	push	r15
    31fa:	0f 93       	push	r16
    31fc:	1f 93       	push	r17
    31fe:	cf 93       	push	r28
    3200:	df 93       	push	r29
	PORTA.DIRCLR = 0b01000000;
    3202:	e0 e0       	ldi	r30, 0x00	; 0
    3204:	f6 e0       	ldi	r31, 0x06	; 6
    3206:	80 e4       	ldi	r24, 0x40	; 64
    3208:	82 83       	std	Z+2, r24	; 0x02
	PORTA.DIR = 0b10111111;
    320a:	8f eb       	ldi	r24, 0xBF	; 191
    320c:	80 83       	st	Z, r24
	ADCA.CTRLA = 0b00000001;
    320e:	c0 e0       	ldi	r28, 0x00	; 0
    3210:	d2 e0       	ldi	r29, 0x02	; 2
    3212:	ff 24       	eor	r15, r15
    3214:	f3 94       	inc	r15
    3216:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000;
    3218:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000;
    321a:	80 e1       	ldi	r24, 0x10	; 16
    321c:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101;
    321e:	85 e0       	ldi	r24, 0x05	; 5
    3220:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    3222:	61 e2       	ldi	r22, 0x21	; 33
    3224:	70 e0       	ldi	r23, 0x00	; 0
    3226:	82 e0       	ldi	r24, 0x02	; 2
    3228:	0e 94 3a 07 	call	0xe74	; 0xe74 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    322c:	08 2f       	mov	r16, r24
    322e:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    3230:	10 2f       	mov	r17, r16
    3232:	00 27       	eor	r16, r16
    3234:	60 e2       	ldi	r22, 0x20	; 32
    3236:	70 e0       	ldi	r23, 0x00	; 0
    3238:	82 e0       	ldi	r24, 0x02	; 2
    323a:	0e 94 3a 07 	call	0xe74	; 0xe74 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    323e:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    3240:	0c 87       	std	Y+12, r16	; 0x0c
    3242:	1d 87       	std	Y+13, r17	; 0x0d
	
	ADCA.CH0.CTRL = 0b00000001;
    3244:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000110;
    3246:	86 e0       	ldi	r24, 0x06	; 6
    3248:	89 a3       	std	Y+33, r24	; 0x21
}
    324a:	df 91       	pop	r29
    324c:	cf 91       	pop	r28
    324e:	1f 91       	pop	r17
    3250:	0f 91       	pop	r16
    3252:	ff 90       	pop	r15
    3254:	08 95       	ret

00003256 <getVoltage>:


float getVoltage(void){
    3256:	cf 93       	push	r28
    3258:	df 93       	push	r29
	ADCA.CH0.CTRL  |= 0b10000000;
    325a:	e0 e0       	ldi	r30, 0x00	; 0
    325c:	f2 e0       	ldi	r31, 0x02	; 2
    325e:	80 a1       	ldd	r24, Z+32	; 0x20
    3260:	80 68       	ori	r24, 0x80	; 128
    3262:	80 a3       	std	Z+32, r24	; 0x20
	//printf("one");
	while(ADCA.CH0.INTFLAGS == 0);
    3264:	83 a1       	ldd	r24, Z+35	; 0x23
    3266:	88 23       	and	r24, r24
    3268:	e9 f3       	breq	.-6      	; 0x3264 <getVoltage+0xe>
	//printf("two");
	ADCA.CH0.INTFLAGS = 0;
    326a:	e0 e0       	ldi	r30, 0x00	; 0
    326c:	f2 e0       	ldi	r31, 0x02	; 2
    326e:	13 a2       	std	Z+35, r1	; 0x23
	//printf("three");
	uint16_t adcReading = ADCA.CH0.RES;
    3270:	c4 a1       	ldd	r28, Z+36	; 0x24
    3272:	d5 a1       	ldd	r29, Z+37	; 0x25
	printf("ADC reading = %u\n", adcReading);
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	8d e2       	ldi	r24, 0x2D	; 45
    327a:	90 e2       	ldi	r25, 0x20	; 32
    327c:	9f 93       	push	r25
    327e:	8f 93       	push	r24
    3280:	0e 94 83 26 	call	0x4d06	; 0x4d06 <printf>
	float voltage = 0.0004899 * (float)(adcReading) - 0.0856326;	//We have to find these numbers by applying differing voltage, printing ADC readings, and solve equation
	//printf("voltage: %f \n", voltage);
	return voltage;
    3284:	be 01       	movw	r22, r28
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	be d4       	rcall	.+2428   	; 0x3c08 <__floatunsisf>
    328c:	22 ea       	ldi	r18, 0xA2	; 162
    328e:	3c e6       	ldi	r19, 0x6C	; 108
    3290:	40 e0       	ldi	r20, 0x00	; 0
    3292:	5a e3       	ldi	r21, 0x3A	; 58
    3294:	8c d5       	rcall	.+2840   	; 0x3dae <__mulsf3>
    3296:	25 e2       	ldi	r18, 0x25	; 37
    3298:	30 e6       	ldi	r19, 0x60	; 96
    329a:	4f ea       	ldi	r20, 0xAF	; 175
    329c:	5d e3       	ldi	r21, 0x3D	; 61
    329e:	b6 d3       	rcall	.+1900   	; 0x3a0c <__subsf3>
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
	
}
    32a8:	df 91       	pop	r29
    32aa:	cf 91       	pop	r28
    32ac:	08 95       	ret

000032ae <getTemperature>:
	uint16_t voltage = getVoltage();
	uint16_t current = (voltage/10000);
	return current;
}
*/
float getTemperature(void){
    32ae:	8f 92       	push	r8
    32b0:	9f 92       	push	r9
    32b2:	af 92       	push	r10
    32b4:	bf 92       	push	r11
    32b6:	cf 92       	push	r12
    32b8:	df 92       	push	r13
    32ba:	ef 92       	push	r14
	float voltage = getVoltage();
    32bc:	ff 92       	push	r15
    32be:	cb df       	rcall	.-106    	; 0x3256 <getVoltage>
    32c0:	6b 01       	movw	r12, r22
	//uint16_t current = getCurrent();
	//uint16_t resistance = voltage/current;
	float resistance = (voltage*10000)/(voltage-3.3);
	//printf("resistance = %f \n", resistance);
	uint32_t temperature = 3977.0/(log(resistance/(10000.0*pow(2.71828,(-3977.0/298.15)))));
    32c2:	7c 01       	movw	r14, r24
    32c4:	20 e0       	ldi	r18, 0x00	; 0
    32c6:	30 e4       	ldi	r19, 0x40	; 64
    32c8:	4c e1       	ldi	r20, 0x1C	; 28
    32ca:	56 e4       	ldi	r21, 0x46	; 70
    32cc:	70 d5       	rcall	.+2784   	; 0x3dae <__mulsf3>
    32ce:	4b 01       	movw	r8, r22
    32d0:	5c 01       	movw	r10, r24
    32d2:	23 e3       	ldi	r18, 0x33	; 51
    32d4:	33 e3       	ldi	r19, 0x33	; 51
    32d6:	43 e5       	ldi	r20, 0x53	; 83
    32d8:	50 e4       	ldi	r21, 0x40	; 64
    32da:	c7 01       	movw	r24, r14
    32dc:	b6 01       	movw	r22, r12
    32de:	96 d3       	rcall	.+1836   	; 0x3a0c <__subsf3>
    32e0:	9b 01       	movw	r18, r22
    32e2:	ac 01       	movw	r20, r24
    32e4:	c5 01       	movw	r24, r10
    32e6:	b4 01       	movw	r22, r8
    32e8:	f6 d3       	rcall	.+2028   	; 0x3ad6 <__divsf3>
    32ea:	2b e5       	ldi	r18, 0x5B	; 91
    32ec:	30 ef       	ldi	r19, 0xF0	; 240
    32ee:	43 e8       	ldi	r20, 0x83	; 131
    32f0:	5c e3       	ldi	r21, 0x3C	; 60
	//float temperature = pow((.003351016+.0002569850*log(resistance/10000)+.000002620131*pow(log(resistance/10000),2)),-1);
	return temperature;
    32f2:	f1 d3       	rcall	.+2018   	; 0x3ad6 <__divsf3>
    32f4:	1c d5       	rcall	.+2616   	; 0x3d2e <log>
    32f6:	9b 01       	movw	r18, r22
    32f8:	ac 01       	movw	r20, r24
    32fa:	60 e0       	ldi	r22, 0x00	; 0
    32fc:	70 e9       	ldi	r23, 0x90	; 144
    32fe:	88 e7       	ldi	r24, 0x78	; 120
    3300:	95 e4       	ldi	r25, 0x45	; 69
    3302:	e9 d3       	rcall	.+2002   	; 0x3ad6 <__divsf3>
	
	
	
    3304:	55 d4       	rcall	.+2218   	; 0x3bb0 <__fixunssfsi>
    3306:	80 d4       	rcall	.+2304   	; 0x3c08 <__floatunsisf>
    3308:	ff 90       	pop	r15
    330a:	ef 90       	pop	r14
    330c:	df 90       	pop	r13
    330e:	cf 90       	pop	r12
    3310:	bf 90       	pop	r11
    3312:	af 90       	pop	r10
    3314:	9f 90       	pop	r9
    3316:	8f 90       	pop	r8
    3318:	08 95       	ret

0000331a <usart_serial_getchar>:
		read_buffer[loc] = usart_getchar(usart_channel);
		loc++;
		
	}
	return read_buffer;
}
    331a:	cf 93       	push	r28
    331c:	df 93       	push	r29
    331e:	eb 01       	movw	r28, r22
    3320:	0e 94 0c 10 	call	0x2018	; 0x2018 <usart_getchar>
    3324:	88 83       	st	Y, r24
    3326:	df 91       	pop	r29
    3328:	cf 91       	pop	r28
    332a:	08 95       	ret

0000332c <usart_serial_putchar>:
    332c:	0c 94 04 10 	jmp	0x2008	; 0x2008 <usart_putchar>
    3330:	08 95       	ret

00003332 <usart_init>:
    3332:	cf 93       	push	r28
    3334:	df 93       	push	r29
    3336:	cd b7       	in	r28, 0x3d	; 61
    3338:	de b7       	in	r29, 0x3e	; 62
    333a:	27 97       	sbiw	r28, 0x07	; 7
    333c:	cd bf       	out	0x3d, r28	; 61
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	e0 e6       	ldi	r30, 0x60	; 96
    3342:	f6 e0       	ldi	r31, 0x06	; 6
    3344:	88 e0       	ldi	r24, 0x08	; 8
    3346:	81 83       	std	Z+1, r24	; 0x01
    3348:	85 83       	std	Z+5, r24	; 0x05
    334a:	e0 e4       	ldi	r30, 0x40	; 64
    334c:	f6 e0       	ldi	r31, 0x06	; 6
    334e:	81 83       	std	Z+1, r24	; 0x01
    3350:	85 83       	std	Z+5, r24	; 0x05
    3352:	80 ea       	ldi	r24, 0xA0	; 160
    3354:	99 e0       	ldi	r25, 0x09	; 9
    3356:	80 93 82 23 	sts	0x2382, r24	; 0x802382 <stdio_base>
    335a:	90 93 83 23 	sts	0x2383, r25	; 0x802383 <stdio_base+0x1>
    335e:	86 e9       	ldi	r24, 0x96	; 150
    3360:	99 e1       	ldi	r25, 0x19	; 25
    3362:	80 93 80 23 	sts	0x2380, r24	; 0x802380 <ptr_put>
    3366:	90 93 81 23 	sts	0x2381, r25	; 0x802381 <ptr_put+0x1>
    336a:	8d e8       	ldi	r24, 0x8D	; 141
    336c:	99 e1       	ldi	r25, 0x19	; 25
    336e:	80 93 7e 23 	sts	0x237E, r24	; 0x80237e <ptr_get>
    3372:	90 93 7f 23 	sts	0x237F, r25	; 0x80237f <ptr_get+0x1>
    3376:	ed e0       	ldi	r30, 0x0D	; 13
    3378:	f0 e2       	ldi	r31, 0x20	; 32
    337a:	84 81       	ldd	r24, Z+4	; 0x04
    337c:	8d 83       	std	Y+5, r24	; 0x05
    337e:	85 81       	ldd	r24, Z+5	; 0x05
    3380:	8e 83       	std	Y+6, r24	; 0x06
    3382:	86 81       	ldd	r24, Z+6	; 0x06
    3384:	8f 83       	std	Y+7, r24	; 0x07
    3386:	80 81       	ld	r24, Z
    3388:	91 81       	ldd	r25, Z+1	; 0x01
    338a:	a2 81       	ldd	r26, Z+2	; 0x02
    338c:	b3 81       	ldd	r27, Z+3	; 0x03
    338e:	89 83       	std	Y+1, r24	; 0x01
    3390:	9a 83       	std	Y+2, r25	; 0x02
    3392:	ab 83       	std	Y+3, r26	; 0x03
    3394:	bc 83       	std	Y+4, r27	; 0x04
    3396:	60 e1       	ldi	r22, 0x10	; 16
    3398:	84 e0       	ldi	r24, 0x04	; 4
    339a:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    339e:	be 01       	movw	r22, r28
    33a0:	6f 5f       	subi	r22, 0xFF	; 255
    33a2:	7f 4f       	sbci	r23, 0xFF	; 255
    33a4:	80 ea       	ldi	r24, 0xA0	; 160
    33a6:	99 e0       	ldi	r25, 0x09	; 9
    33a8:	0e 94 25 11 	call	0x224a	; 0x224a <usart_init_rs232>
    33ac:	61 e2       	ldi	r22, 0x21	; 33
    33ae:	75 e0       	ldi	r23, 0x05	; 5
    33b0:	8a e3       	ldi	r24, 0x3A	; 58
    33b2:	95 e0       	ldi	r25, 0x05	; 5
    33b4:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <fdevopen>
    33b8:	e6 e0       	ldi	r30, 0x06	; 6
    33ba:	f0 e2       	ldi	r31, 0x20	; 32
    33bc:	84 81       	ldd	r24, Z+4	; 0x04
    33be:	8d 83       	std	Y+5, r24	; 0x05
    33c0:	85 81       	ldd	r24, Z+5	; 0x05
    33c2:	8e 83       	std	Y+6, r24	; 0x06
    33c4:	86 81       	ldd	r24, Z+6	; 0x06
    33c6:	8f 83       	std	Y+7, r24	; 0x07
    33c8:	80 81       	ld	r24, Z
    33ca:	91 81       	ldd	r25, Z+1	; 0x01
    33cc:	a2 81       	ldd	r26, Z+2	; 0x02
    33ce:	b3 81       	ldd	r27, Z+3	; 0x03
    33d0:	89 83       	std	Y+1, r24	; 0x01
    33d2:	9a 83       	std	Y+2, r25	; 0x02
    33d4:	ab 83       	std	Y+3, r26	; 0x03
    33d6:	bc 83       	std	Y+4, r27	; 0x04
    33d8:	60 e1       	ldi	r22, 0x10	; 16
    33da:	83 e0       	ldi	r24, 0x03	; 3
    33dc:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
    33e0:	be 01       	movw	r22, r28
    33e2:	6f 5f       	subi	r22, 0xFF	; 255
    33e4:	7f 4f       	sbci	r23, 0xFF	; 255
    33e6:	80 ea       	ldi	r24, 0xA0	; 160
    33e8:	98 e0       	ldi	r25, 0x08	; 8
    33ea:	0e 94 25 11 	call	0x224a	; 0x224a <usart_init_rs232>
    33ee:	27 96       	adiw	r28, 0x07	; 7
    33f0:	cd bf       	out	0x3d, r28	; 61
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	df 91       	pop	r29
    33f6:	cf 91       	pop	r28
    33f8:	08 95       	ret

000033fa <__vector_88>:
	
ISR(USARTD0_RXC_vect){
    33fa:	1f 92       	push	r1
    33fc:	0f 92       	push	r0
    33fe:	0f b6       	in	r0, 0x3f	; 63
    3400:	0f 92       	push	r0
    3402:	11 24       	eor	r1, r1
    3404:	08 b6       	in	r0, 0x38	; 56
    3406:	0f 92       	push	r0
    3408:	18 be       	out	0x38, r1	; 56
    340a:	09 b6       	in	r0, 0x39	; 57
    340c:	0f 92       	push	r0
    340e:	19 be       	out	0x39, r1	; 57
    3410:	0b b6       	in	r0, 0x3b	; 59
    3412:	0f 92       	push	r0
    3414:	1b be       	out	0x3b, r1	; 59
    3416:	2f 93       	push	r18
    3418:	3f 93       	push	r19
    341a:	4f 93       	push	r20
    341c:	5f 93       	push	r21
    341e:	6f 93       	push	r22
    3420:	7f 93       	push	r23
    3422:	8f 93       	push	r24
    3424:	9f 93       	push	r25
    3426:	af 93       	push	r26
    3428:	bf 93       	push	r27
    342a:	ef 93       	push	r30
    342c:	ff 93       	push	r31
	//If we send reset things to the board
	xbee_rx_temporary = usart_getchar(&USARTD0);
    342e:	80 ea       	ldi	r24, 0xA0	; 160
    3430:	99 e0       	ldi	r25, 0x09	; 9
    3432:	0e 94 0c 10 	call	0x2018	; 0x2018 <usart_getchar>
    3436:	80 93 98 23 	sts	0x2398, r24	; 0x802398 <xbee_rx_temporary>
	
	switch(xbee_rx_temporary){
    343a:	e0 91 98 23 	lds	r30, 0x2398	; 0x802398 <xbee_rx_temporary>
    343e:	8e 2f       	mov	r24, r30
    3440:	ee 0f       	add	r30, r30
    3442:	99 0b       	sbc	r25, r25
    3444:	aa 0b       	sbc	r26, r26
    3446:	bb 0b       	sbc	r27, r27
    3448:	fc 01       	movw	r30, r24
    344a:	b1 97       	sbiw	r30, 0x21	; 33
    344c:	ef 33       	cpi	r30, 0x3F	; 63
    344e:	f1 05       	cpc	r31, r1
    3450:	a0 f4       	brcc	.+40     	; 0x347a <__vector_88+0x80>
    3452:	88 27       	eor	r24, r24
    3454:	e2 50       	subi	r30, 0x02	; 2
    3456:	ff 4f       	sbci	r31, 0xFF	; 255
    3458:	8f 4f       	sbci	r24, 0xFF	; 255
    345a:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__tablejump2__>
		case '!':						//reset MCU 
			wdt_reset_mcu();
    345e:	0e 94 85 03 	call	0x70a	; 0x70a <wdt_reset_mcu>
			break;
		case '^':						//deploy heatshield
			heatshield_hotwire();
			break;
		case '&':						//deploy parachute
			parachute_hotwire();
    3462:	0b c0       	rjmp	.+22     	; 0x347a <__vector_88+0x80>
			break;
		case '*':						//detatching heatshield
			heatshield_detatch_hotwire();
			break;
		case '(':						//buzzer on
			buzzer_on();
    3464:	d5 db       	rcall	.-2134   	; 0x2c10 <heatshield_hotwire>
			break;
    3466:	09 c0       	rjmp	.+18     	; 0x347a <__vector_88+0x80>
		case ')':						//buzzer off
			buzzer_off();
    3468:	e8 db       	rcall	.-2096   	; 0x2c3a <parachute_hotwire>
    346a:	07 c0       	rjmp	.+14     	; 0x347a <__vector_88+0x80>
			break;
    346c:	fb db       	rcall	.-2058   	; 0x2c64 <heatshield_detatch_hotwire>
		case '_':						//camera on
			camera_on();
    346e:	05 c0       	rjmp	.+10     	; 0x347a <__vector_88+0x80>
    3470:	0e dc       	rcall	.-2020   	; 0x2c8e <buzzer_on>
			break;
	}
	
}
    3472:	03 c0       	rjmp	.+6      	; 0x347a <__vector_88+0x80>
    3474:	15 dc       	rcall	.-2006   	; 0x2ca0 <buzzer_off>
    3476:	01 c0       	rjmp	.+2      	; 0x347a <__vector_88+0x80>
    3478:	1c dc       	rcall	.-1992   	; 0x2cb2 <camera_on>
    347a:	ff 91       	pop	r31
    347c:	ef 91       	pop	r30
    347e:	bf 91       	pop	r27
    3480:	af 91       	pop	r26
    3482:	9f 91       	pop	r25
    3484:	8f 91       	pop	r24
    3486:	7f 91       	pop	r23
    3488:	6f 91       	pop	r22
    348a:	5f 91       	pop	r21
    348c:	4f 91       	pop	r20
    348e:	3f 91       	pop	r19
    3490:	2f 91       	pop	r18
    3492:	0f 90       	pop	r0
    3494:	0b be       	out	0x3b, r0	; 59
    3496:	0f 90       	pop	r0
    3498:	09 be       	out	0x39, r0	; 57
    349a:	0f 90       	pop	r0
    349c:	08 be       	out	0x38, r0	; 56
    349e:	0f 90       	pop	r0
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	0f 90       	pop	r0
    34a4:	1f 90       	pop	r1
    34a6:	18 95       	reti

000034a8 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    34a8:	04 c0       	rjmp	.+8      	; 0x34b2 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    34aa:	61 50       	subi	r22, 0x01	; 1
    34ac:	71 09       	sbc	r23, r1
    34ae:	81 09       	sbc	r24, r1
    34b0:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    34b2:	61 15       	cp	r22, r1
    34b4:	71 05       	cpc	r23, r1
    34b6:	81 05       	cpc	r24, r1
    34b8:	91 05       	cpc	r25, r1
    34ba:	b9 f7       	brne	.-18     	; 0x34aa <__portable_avr_delay_cycles+0x2>
    34bc:	08 95       	ret

000034be <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	09 f4       	brne	.+2      	; 0x34c4 <sysclk_enable_peripheral_clock+0x6>
    34c2:	5c c1       	rjmp	.+696    	; 0x377c <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    34c4:	80 3c       	cpi	r24, 0xC0	; 192
    34c6:	91 05       	cpc	r25, r1
    34c8:	29 f4       	brne	.+10     	; 0x34d4 <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    34ca:	60 e1       	ldi	r22, 0x10	; 16
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    34d2:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    34d4:	80 34       	cpi	r24, 0x40	; 64
    34d6:	24 e0       	ldi	r18, 0x04	; 4
    34d8:	92 07       	cpc	r25, r18
    34da:	29 f4       	brne	.+10     	; 0x34e6 <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    34dc:	68 e0       	ldi	r22, 0x08	; 8
    34de:	80 e0       	ldi	r24, 0x00	; 0
    34e0:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    34e4:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    34e6:	81 15       	cp	r24, r1
    34e8:	24 e0       	ldi	r18, 0x04	; 4
    34ea:	92 07       	cpc	r25, r18
    34ec:	29 f4       	brne	.+10     	; 0x34f8 <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    34ee:	64 e0       	ldi	r22, 0x04	; 4
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    34f6:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    34f8:	80 38       	cpi	r24, 0x80	; 128
    34fa:	21 e0       	ldi	r18, 0x01	; 1
    34fc:	92 07       	cpc	r25, r18
    34fe:	29 f4       	brne	.+10     	; 0x350a <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    3500:	62 e0       	ldi	r22, 0x02	; 2
    3502:	80 e0       	ldi	r24, 0x00	; 0
    3504:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3508:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    350a:	81 15       	cp	r24, r1
    350c:	21 e0       	ldi	r18, 0x01	; 1
    350e:	92 07       	cpc	r25, r18
    3510:	29 f4       	brne	.+10     	; 0x351c <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    3512:	61 e0       	ldi	r22, 0x01	; 1
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    351a:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    351c:	80 38       	cpi	r24, 0x80	; 128
    351e:	23 e0       	ldi	r18, 0x03	; 3
    3520:	92 07       	cpc	r25, r18
    3522:	29 f4       	brne	.+10     	; 0x352e <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    3524:	61 e0       	ldi	r22, 0x01	; 1
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    352c:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    352e:	80 39       	cpi	r24, 0x90	; 144
    3530:	23 e0       	ldi	r18, 0x03	; 3
    3532:	92 07       	cpc	r25, r18
    3534:	29 f4       	brne	.+10     	; 0x3540 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    3536:	61 e0       	ldi	r22, 0x01	; 1
    3538:	82 e0       	ldi	r24, 0x02	; 2
    353a:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    353e:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    3540:	81 15       	cp	r24, r1
    3542:	22 e0       	ldi	r18, 0x02	; 2
    3544:	92 07       	cpc	r25, r18
    3546:	29 f4       	brne	.+10     	; 0x3552 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    3548:	62 e0       	ldi	r22, 0x02	; 2
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3550:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    3552:	80 34       	cpi	r24, 0x40	; 64
    3554:	22 e0       	ldi	r18, 0x02	; 2
    3556:	92 07       	cpc	r25, r18
    3558:	29 f4       	brne	.+10     	; 0x3564 <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    355a:	62 e0       	ldi	r22, 0x02	; 2
    355c:	82 e0       	ldi	r24, 0x02	; 2
    355e:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3562:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    3564:	81 15       	cp	r24, r1
    3566:	23 e0       	ldi	r18, 0x03	; 3
    3568:	92 07       	cpc	r25, r18
    356a:	29 f4       	brne	.+10     	; 0x3576 <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    356c:	64 e0       	ldi	r22, 0x04	; 4
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3574:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    3576:	80 32       	cpi	r24, 0x20	; 32
    3578:	23 e0       	ldi	r18, 0x03	; 3
    357a:	92 07       	cpc	r25, r18
    357c:	29 f4       	brne	.+10     	; 0x3588 <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    357e:	64 e0       	ldi	r22, 0x04	; 4
    3580:	82 e0       	ldi	r24, 0x02	; 2
    3582:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3586:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    3588:	81 15       	cp	r24, r1
    358a:	28 e0       	ldi	r18, 0x08	; 8
    358c:	92 07       	cpc	r25, r18
    358e:	29 f4       	brne	.+10     	; 0x359a <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    3590:	61 e0       	ldi	r22, 0x01	; 1
    3592:	83 e0       	ldi	r24, 0x03	; 3
    3594:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3598:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    359a:	81 15       	cp	r24, r1
    359c:	29 e0       	ldi	r18, 0x09	; 9
    359e:	92 07       	cpc	r25, r18
    35a0:	29 f4       	brne	.+10     	; 0x35ac <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    35a2:	61 e0       	ldi	r22, 0x01	; 1
    35a4:	84 e0       	ldi	r24, 0x04	; 4
    35a6:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    35aa:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    35ac:	81 15       	cp	r24, r1
    35ae:	2a e0       	ldi	r18, 0x0A	; 10
    35b0:	92 07       	cpc	r25, r18
    35b2:	29 f4       	brne	.+10     	; 0x35be <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    35b4:	61 e0       	ldi	r22, 0x01	; 1
    35b6:	85 e0       	ldi	r24, 0x05	; 5
    35b8:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    35bc:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    35be:	81 15       	cp	r24, r1
    35c0:	2b e0       	ldi	r18, 0x0B	; 11
    35c2:	92 07       	cpc	r25, r18
    35c4:	29 f4       	brne	.+10     	; 0x35d0 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    35c6:	61 e0       	ldi	r22, 0x01	; 1
    35c8:	86 e0       	ldi	r24, 0x06	; 6
    35ca:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    35ce:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    35d0:	80 34       	cpi	r24, 0x40	; 64
    35d2:	28 e0       	ldi	r18, 0x08	; 8
    35d4:	92 07       	cpc	r25, r18
    35d6:	29 f4       	brne	.+10     	; 0x35e2 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    35d8:	62 e0       	ldi	r22, 0x02	; 2
    35da:	83 e0       	ldi	r24, 0x03	; 3
    35dc:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    35e0:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    35e2:	80 34       	cpi	r24, 0x40	; 64
    35e4:	29 e0       	ldi	r18, 0x09	; 9
    35e6:	92 07       	cpc	r25, r18
    35e8:	29 f4       	brne	.+10     	; 0x35f4 <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    35ea:	62 e0       	ldi	r22, 0x02	; 2
    35ec:	84 e0       	ldi	r24, 0x04	; 4
    35ee:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    35f2:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    35f4:	80 34       	cpi	r24, 0x40	; 64
    35f6:	2a e0       	ldi	r18, 0x0A	; 10
    35f8:	92 07       	cpc	r25, r18
    35fa:	29 f4       	brne	.+10     	; 0x3606 <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    35fc:	62 e0       	ldi	r22, 0x02	; 2
    35fe:	85 e0       	ldi	r24, 0x05	; 5
    3600:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3604:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    3606:	80 34       	cpi	r24, 0x40	; 64
    3608:	2b e0       	ldi	r18, 0x0B	; 11
    360a:	92 07       	cpc	r25, r18
    360c:	29 f4       	brne	.+10     	; 0x3618 <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    360e:	62 e0       	ldi	r22, 0x02	; 2
    3610:	86 e0       	ldi	r24, 0x06	; 6
    3612:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3616:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    3618:	80 39       	cpi	r24, 0x90	; 144
    361a:	28 e0       	ldi	r18, 0x08	; 8
    361c:	92 07       	cpc	r25, r18
    361e:	29 f4       	brne	.+10     	; 0x362a <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    3620:	64 e0       	ldi	r22, 0x04	; 4
    3622:	83 e0       	ldi	r24, 0x03	; 3
    3624:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3628:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    362a:	80 39       	cpi	r24, 0x90	; 144
    362c:	29 e0       	ldi	r18, 0x09	; 9
    362e:	92 07       	cpc	r25, r18
    3630:	29 f4       	brne	.+10     	; 0x363c <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    3632:	64 e0       	ldi	r22, 0x04	; 4
    3634:	84 e0       	ldi	r24, 0x04	; 4
    3636:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    363a:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    363c:	80 39       	cpi	r24, 0x90	; 144
    363e:	2a e0       	ldi	r18, 0x0A	; 10
    3640:	92 07       	cpc	r25, r18
    3642:	29 f4       	brne	.+10     	; 0x364e <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    3644:	64 e0       	ldi	r22, 0x04	; 4
    3646:	85 e0       	ldi	r24, 0x05	; 5
    3648:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    364c:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    364e:	80 39       	cpi	r24, 0x90	; 144
    3650:	2b e0       	ldi	r18, 0x0B	; 11
    3652:	92 07       	cpc	r25, r18
    3654:	29 f4       	brne	.+10     	; 0x3660 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    3656:	64 e0       	ldi	r22, 0x04	; 4
    3658:	86 e0       	ldi	r24, 0x06	; 6
    365a:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    365e:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    3660:	80 3c       	cpi	r24, 0xC0	; 192
    3662:	28 e0       	ldi	r18, 0x08	; 8
    3664:	92 07       	cpc	r25, r18
    3666:	29 f4       	brne	.+10     	; 0x3672 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    3668:	68 e0       	ldi	r22, 0x08	; 8
    366a:	83 e0       	ldi	r24, 0x03	; 3
    366c:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3670:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    3672:	80 3c       	cpi	r24, 0xC0	; 192
    3674:	29 e0       	ldi	r18, 0x09	; 9
    3676:	92 07       	cpc	r25, r18
    3678:	29 f4       	brne	.+10     	; 0x3684 <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    367a:	68 e0       	ldi	r22, 0x08	; 8
    367c:	84 e0       	ldi	r24, 0x04	; 4
    367e:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3682:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    3684:	80 3c       	cpi	r24, 0xC0	; 192
    3686:	2a e0       	ldi	r18, 0x0A	; 10
    3688:	92 07       	cpc	r25, r18
    368a:	29 f4       	brne	.+10     	; 0x3696 <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    368c:	68 e0       	ldi	r22, 0x08	; 8
    368e:	85 e0       	ldi	r24, 0x05	; 5
    3690:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3694:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    3696:	80 3c       	cpi	r24, 0xC0	; 192
    3698:	2b e0       	ldi	r18, 0x0B	; 11
    369a:	92 07       	cpc	r25, r18
    369c:	29 f4       	brne	.+10     	; 0x36a8 <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    369e:	68 e0       	ldi	r22, 0x08	; 8
    36a0:	86 e0       	ldi	r24, 0x06	; 6
    36a2:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    36a6:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    36a8:	80 3a       	cpi	r24, 0xA0	; 160
    36aa:	28 e0       	ldi	r18, 0x08	; 8
    36ac:	92 07       	cpc	r25, r18
    36ae:	29 f4       	brne	.+10     	; 0x36ba <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    36b0:	60 e1       	ldi	r22, 0x10	; 16
    36b2:	83 e0       	ldi	r24, 0x03	; 3
    36b4:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    36b8:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    36ba:	80 3a       	cpi	r24, 0xA0	; 160
    36bc:	29 e0       	ldi	r18, 0x09	; 9
    36be:	92 07       	cpc	r25, r18
    36c0:	29 f4       	brne	.+10     	; 0x36cc <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    36c2:	60 e1       	ldi	r22, 0x10	; 16
    36c4:	84 e0       	ldi	r24, 0x04	; 4
    36c6:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    36ca:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    36cc:	80 3a       	cpi	r24, 0xA0	; 160
    36ce:	2a e0       	ldi	r18, 0x0A	; 10
    36d0:	92 07       	cpc	r25, r18
    36d2:	29 f4       	brne	.+10     	; 0x36de <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    36d4:	60 e1       	ldi	r22, 0x10	; 16
    36d6:	85 e0       	ldi	r24, 0x05	; 5
    36d8:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    36dc:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    36de:	80 3a       	cpi	r24, 0xA0	; 160
    36e0:	2b e0       	ldi	r18, 0x0B	; 11
    36e2:	92 07       	cpc	r25, r18
    36e4:	29 f4       	brne	.+10     	; 0x36f0 <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    36e6:	60 e1       	ldi	r22, 0x10	; 16
    36e8:	86 e0       	ldi	r24, 0x06	; 6
    36ea:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    36ee:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    36f0:	80 3b       	cpi	r24, 0xB0	; 176
    36f2:	28 e0       	ldi	r18, 0x08	; 8
    36f4:	92 07       	cpc	r25, r18
    36f6:	29 f4       	brne	.+10     	; 0x3702 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    36f8:	60 e2       	ldi	r22, 0x20	; 32
    36fa:	83 e0       	ldi	r24, 0x03	; 3
    36fc:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3700:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    3702:	80 3b       	cpi	r24, 0xB0	; 176
    3704:	29 e0       	ldi	r18, 0x09	; 9
    3706:	92 07       	cpc	r25, r18
    3708:	29 f4       	brne	.+10     	; 0x3714 <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    370a:	60 e2       	ldi	r22, 0x20	; 32
    370c:	84 e0       	ldi	r24, 0x04	; 4
    370e:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3712:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    3714:	80 3b       	cpi	r24, 0xB0	; 176
    3716:	2a e0       	ldi	r18, 0x0A	; 10
    3718:	92 07       	cpc	r25, r18
    371a:	29 f4       	brne	.+10     	; 0x3726 <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    371c:	60 e2       	ldi	r22, 0x20	; 32
    371e:	85 e0       	ldi	r24, 0x05	; 5
    3720:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3724:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    3726:	80 3b       	cpi	r24, 0xB0	; 176
    3728:	2b e0       	ldi	r18, 0x0B	; 11
    372a:	92 07       	cpc	r25, r18
    372c:	29 f4       	brne	.+10     	; 0x3738 <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    372e:	60 e2       	ldi	r22, 0x20	; 32
    3730:	86 e0       	ldi	r24, 0x06	; 6
    3732:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3736:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    3738:	80 38       	cpi	r24, 0x80	; 128
    373a:	24 e0       	ldi	r18, 0x04	; 4
    373c:	92 07       	cpc	r25, r18
    373e:	29 f4       	brne	.+10     	; 0x374a <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    3740:	60 e4       	ldi	r22, 0x40	; 64
    3742:	83 e0       	ldi	r24, 0x03	; 3
    3744:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    3748:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    374a:	80 39       	cpi	r24, 0x90	; 144
    374c:	24 e0       	ldi	r18, 0x04	; 4
    374e:	92 07       	cpc	r25, r18
    3750:	29 f4       	brne	.+10     	; 0x375c <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    3752:	60 e4       	ldi	r22, 0x40	; 64
    3754:	84 e0       	ldi	r24, 0x04	; 4
    3756:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    375a:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    375c:	80 3a       	cpi	r24, 0xA0	; 160
    375e:	24 e0       	ldi	r18, 0x04	; 4
    3760:	92 07       	cpc	r25, r18
    3762:	29 f4       	brne	.+10     	; 0x376e <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    3764:	60 e4       	ldi	r22, 0x40	; 64
    3766:	85 e0       	ldi	r24, 0x05	; 5
    3768:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    376c:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    376e:	80 3b       	cpi	r24, 0xB0	; 176
    3770:	94 40       	sbci	r25, 0x04	; 4
    3772:	21 f4       	brne	.+8      	; 0x377c <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    3774:	60 e4       	ldi	r22, 0x40	; 64
    3776:	86 e0       	ldi	r24, 0x06	; 6
    3778:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <sysclk_enable_module>
    377c:	08 95       	ret

0000377e <main>:

extern uint8_t state;
//void blink (int, int);

int main (void)
{
    377e:	cf 93       	push	r28
    3780:	df 93       	push	r29
    3782:	cd b7       	in	r28, 0x3d	; 61
    3784:	de b7       	in	r29, 0x3e	; 62
    3786:	cb 57       	subi	r28, 0x7B	; 123
    3788:	d1 09       	sbc	r29, r1
    378a:	cd bf       	out	0x3d, r28	; 61
    378c:	de bf       	out	0x3e, r29	; 62
	
	sysclk_init();
    378e:	0e 94 d6 04 	call	0x9ac	; 0x9ac <sysclk_init>
	sysclk_enable_peripheral_clock(&TCF0);
    3792:	80 e0       	ldi	r24, 0x00	; 0
    3794:	9b e0       	ldi	r25, 0x0B	; 11
    3796:	93 de       	rcall	.-730    	; 0x34be <sysclk_enable_peripheral_clock>
	sysclk_enable_peripheral_clock(&TCD0);
    3798:	80 e0       	ldi	r24, 0x00	; 0
    379a:	99 e0       	ldi	r25, 0x09	; 9
    379c:	90 de       	rcall	.-736    	; 0x34be <sysclk_enable_peripheral_clock>
	sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    379e:	64 e0       	ldi	r22, 0x04	; 4
    37a0:	86 e0       	ldi	r24, 0x06	; 6
    37a2:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    37a6:	64 e0       	ldi	r22, 0x04	; 4
    37a8:	84 e0       	ldi	r24, 0x04	; 4
    37aa:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
	sysclk_enable_module(SYSCLK_PORT_C, PR_SPI_bm);
    37ae:	68 e0       	ldi	r22, 0x08	; 8
    37b0:	83 e0       	ldi	r24, 0x03	; 3
    37b2:	0e 94 0b 05 	call	0xa16	; 0xa16 <sysclk_enable_module>
// 	PORTD.OUTCLR = 0b00001000;
//	timer_founter_init(3124, 10);
		
		
	sysclk_enable_peripheral_clock(&USARTC0);
	usart_init();
    37b6:	80 ea       	ldi	r24, 0xA0	; 160
    37b8:	98 e0       	ldi	r25, 0x08	; 8
    37ba:	81 de       	rcall	.-766    	; 0x34be <sysclk_enable_peripheral_clock>
    37bc:	ba dd       	rcall	.-1164   	; 0x3332 <usart_init>
    37be:	80 ec       	ldi	r24, 0xC0	; 192
    37c0:	98 e0       	ldi	r25, 0x08	; 8
    37c2:	7d de       	rcall	.-774    	; 0x34be <sysclk_enable_peripheral_clock>
    37c4:	be da       	rcall	.-2692   	; 0x2d42 <spi_init>
    37c6:	f3 da       	rcall	.-2586   	; 0x2dae <ms5607init>
    37c8:	80 e0       	ldi	r24, 0x00	; 0
    37ca:	92 e0       	ldi	r25, 0x02	; 2
    37cc:	78 de       	rcall	.-784    	; 0x34be <sysclk_enable_peripheral_clock>
    37ce:	14 dd       	rcall	.-1496   	; 0x31f8 <adc_init>
    37d0:	6d db       	rcall	.-2342   	; 0x2eac <get_pressure>
    37d2:	ec 96       	adiw	r28, 0x3c	; 60
    37d4:	6c af       	std	Y+60, r22	; 0x3c
    37d6:	7d af       	std	Y+61, r23	; 0x3d
    37d8:	8e af       	std	Y+62, r24	; 0x3e
    37da:	9f af       	std	Y+63, r25	; 0x3f
    37dc:	ec 97       	sbiw	r28, 0x3c	; 60
    37de:	10 e2       	ldi	r17, 0x20	; 32
    37e0:	10 93 61 06 	sts	0x0661, r17	; 0x800661 <__TEXT_REGION_LENGTH__+0x700661>
    37e4:	0f 2e       	mov	r0, r31
    37e6:	f6 e6       	ldi	r31, 0x66	; 102
    37e8:	ef 2e       	mov	r14, r31
    37ea:	f6 e0       	ldi	r31, 0x06	; 6
    37ec:	ff 2e       	mov	r15, r31
    37ee:	f0 2d       	mov	r31, r0
    37f0:	f7 01       	movw	r30, r14
    37f2:	10 83       	st	Z, r17
    37f4:	66 e5       	ldi	r22, 0x56	; 86
    37f6:	70 ed       	ldi	r23, 0xD0	; 208
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	55 de       	rcall	.-854    	; 0x34a8 <__portable_avr_delay_cycles>
    37fe:	10 93 65 06 	sts	0x0665, r17	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
    3802:	66 e5       	ldi	r22, 0x56	; 86
    3804:	73 e2       	ldi	r23, 0x23	; 35
    3806:	88 e0       	ldi	r24, 0x08	; 8
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	4e de       	rcall	.-868    	; 0x34a8 <__portable_avr_delay_cycles>
    380c:	f7 01       	movw	r30, r14
    380e:	10 83       	st	Z, r17
    3810:	6c ea       	ldi	r22, 0xAC	; 172
    3812:	76 ee       	ldi	r23, 0xE6	; 230
    3814:	86 e9       	ldi	r24, 0x96	; 150
    3816:	91 e0       	ldi	r25, 0x01	; 1
    3818:	47 de       	rcall	.-882    	; 0x34a8 <__portable_avr_delay_cycles>
    381a:	10 e0       	ldi	r17, 0x00	; 0
    381c:	c1 2c       	mov	r12, r1
    381e:	d1 2c       	mov	r13, r1
    3820:	76 01       	movw	r14, r12
    3822:	0f 2e       	mov	r0, r31
    3824:	ff e3       	ldi	r31, 0x3F	; 63
    3826:	4f 2e       	mov	r4, r31
    3828:	f0 e2       	ldi	r31, 0x20	; 32
    382a:	5f 2e       	mov	r5, r31
    382c:	f0 2d       	mov	r31, r0
    382e:	ce 01       	movw	r24, r28
    3830:	01 96       	adiw	r24, 0x01	; 1
    3832:	1c 01       	movw	r2, r24
    3834:	0f 2e       	mov	r0, r31
    3836:	f0 e8       	ldi	r31, 0x80	; 128
    3838:	6f 2e       	mov	r6, r31
    383a:	f6 e0       	ldi	r31, 0x06	; 6
    383c:	7f 2e       	mov	r7, r31
    383e:	f0 2d       	mov	r31, r0
    3840:	05 e5       	ldi	r16, 0x55	; 85
    3842:	05 c0       	rjmp	.+10     	; 0x384e <main+0xd0>
    3844:	11 e0       	ldi	r17, 0x01	; 1
    3846:	03 c0       	rjmp	.+6      	; 0x384e <main+0xd0>
    3848:	12 e0       	ldi	r17, 0x02	; 2
    384a:	01 c0       	rjmp	.+2      	; 0x384e <main+0xd0>
    384c:	12 e0       	ldi	r17, 0x02	; 2
    384e:	2e db       	rcall	.-2468   	; 0x2eac <get_pressure>
    3850:	4b 01       	movw	r8, r22
    3852:	5c 01       	movw	r10, r24
    3854:	2c dd       	rcall	.-1448   	; 0x32ae <getTemperature>
    3856:	a5 01       	movw	r20, r10
    3858:	94 01       	movw	r18, r8
    385a:	ec 96       	adiw	r28, 0x3c	; 60
    385c:	6c ad       	ldd	r22, Y+60	; 0x3c
    385e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3860:	8e ad       	ldd	r24, Y+62	; 0x3e
    3862:	9f ad       	ldd	r25, Y+63	; 0x3f
    3864:	ec 97       	sbiw	r28, 0x3c	; 60
    3866:	0e 94 ad 12 	call	0x255a	; 0x255a <Get_altitude>
    386a:	9d d1       	rcall	.+826    	; 0x3ba6 <__fixsfsi>
    386c:	4b 01       	movw	r8, r22
    386e:	5c 01       	movw	r10, r24
    3870:	cd d1       	rcall	.+922    	; 0x3c0c <__floatsisf>
    3872:	26 e6       	ldi	r18, 0x66	; 102
    3874:	36 e6       	ldi	r19, 0x66	; 102
    3876:	46 e6       	ldi	r20, 0x66	; 102
    3878:	5f e3       	ldi	r21, 0x3F	; 63
    387a:	99 d2       	rcall	.+1330   	; 0x3dae <__mulsf3>
    387c:	e8 96       	adiw	r28, 0x38	; 56
    387e:	6c af       	std	Y+60, r22	; 0x3c
    3880:	7d af       	std	Y+61, r23	; 0x3d
    3882:	8e af       	std	Y+62, r24	; 0x3e
    3884:	9f af       	std	Y+63, r25	; 0x3f
    3886:	e8 97       	sbiw	r28, 0x38	; 56
    3888:	c7 01       	movw	r24, r14
    388a:	b6 01       	movw	r22, r12
    388c:	bf d1       	rcall	.+894    	; 0x3c0c <__floatsisf>
    388e:	20 ed       	ldi	r18, 0xD0	; 208
    3890:	3c ec       	ldi	r19, 0xCC	; 204
    3892:	4c ec       	ldi	r20, 0xCC	; 204
    3894:	5d e3       	ldi	r21, 0x3D	; 61
    3896:	8b d2       	rcall	.+1302   	; 0x3dae <__mulsf3>
    3898:	9b 01       	movw	r18, r22
    389a:	ac 01       	movw	r20, r24
    389c:	e8 96       	adiw	r28, 0x38	; 56
    389e:	6c ad       	ldd	r22, Y+60	; 0x3c
    38a0:	7d ad       	ldd	r23, Y+61	; 0x3d
    38a2:	8e ad       	ldd	r24, Y+62	; 0x3e
    38a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    38a6:	e8 97       	sbiw	r28, 0x38	; 56
    38a8:	b2 d0       	rcall	.+356    	; 0x3a0e <__addsf3>
    38aa:	7d d1       	rcall	.+762    	; 0x3ba6 <__fixsfsi>
    38ac:	6b 01       	movw	r12, r22
    38ae:	7c 01       	movw	r14, r24
    38b0:	80 91 87 21 	lds	r24, 0x2187	; 0x802187 <last_finished>
    38b4:	88 23       	and	r24, r24
    38b6:	09 f4       	brne	.+2      	; 0x38ba <main+0x13c>
    38b8:	4a c0       	rjmp	.+148    	; 0x394e <main+0x1d0>
    38ba:	5f 92       	push	r5
    38bc:	4f 92       	push	r4
    38be:	0e 94 83 26 	call	0x4d06	; 0x4d06 <printf>
    38c2:	0f 90       	pop	r0
    38c4:	0f 90       	pop	r0
    38c6:	80 91 87 21 	lds	r24, 0x2187	; 0x802187 <last_finished>
    38ca:	81 30       	cpi	r24, 0x01	; 1
    38cc:	09 f0       	breq	.+2      	; 0x38d0 <main+0x152>
    38ce:	3f c0       	rjmp	.+126    	; 0x394e <main+0x1d0>
    38d0:	8a e4       	ldi	r24, 0x4A	; 74
    38d2:	90 e2       	ldi	r25, 0x20	; 32
    38d4:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <puts>
    38d8:	9f b7       	in	r25, 0x3f	; 63
    38da:	f8 94       	cli
    38dc:	85 e5       	ldi	r24, 0x55	; 85
    38de:	e7 e2       	ldi	r30, 0x27	; 39
    38e0:	f3 e2       	ldi	r31, 0x23	; 35
    38e2:	d1 01       	movw	r26, r2
    38e4:	01 90       	ld	r0, Z+
    38e6:	0d 92       	st	X+, r0
    38e8:	8a 95       	dec	r24
    38ea:	e1 f7       	brne	.-8      	; 0x38e4 <main+0x166>
    38ec:	9f bf       	out	0x3f, r25	; 63
    38ee:	89 81       	ldd	r24, Y+1	; 0x01
    38f0:	8a 30       	cpi	r24, 0x0A	; 10
    38f2:	79 f0       	breq	.+30     	; 0x3912 <main+0x194>
    38f4:	fe 01       	movw	r30, r28
    38f6:	32 96       	adiw	r30, 0x02	; 2
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	21 91       	ld	r18, Z+
    38fe:	2a 30       	cpi	r18, 0x0A	; 10
    3900:	51 f0       	breq	.+20     	; 0x3916 <main+0x198>
    3902:	01 96       	adiw	r24, 0x01	; 1
    3904:	81 15       	cp	r24, r1
    3906:	24 e0       	ldi	r18, 0x04	; 4
    3908:	92 07       	cpc	r25, r18
    390a:	c1 f7       	brne	.-16     	; 0x38fc <main+0x17e>
    390c:	80 e0       	ldi	r24, 0x00	; 0
    390e:	94 e0       	ldi	r25, 0x04	; 4
    3910:	02 c0       	rjmp	.+4      	; 0x3916 <main+0x198>
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	f1 01       	movw	r30, r2
    3918:	e8 0f       	add	r30, r24
    391a:	f9 1f       	adc	r31, r25
    391c:	10 82       	st	Z, r1
    391e:	f1 01       	movw	r30, r2
    3920:	01 90       	ld	r0, Z+
    3922:	00 20       	and	r0, r0
    3924:	e9 f7       	brne	.-6      	; 0x3920 <main+0x1a2>
    3926:	31 97       	sbiw	r30, 0x01	; 1
    3928:	af 01       	movw	r20, r30
    392a:	42 19       	sub	r20, r2
    392c:	53 09       	sbc	r21, r3
    392e:	b1 01       	movw	r22, r2
    3930:	ce 01       	movw	r24, r28
    3932:	8a 5a       	subi	r24, 0xAA	; 170
    3934:	9f 4f       	sbci	r25, 0xFF	; 255
    3936:	0e 94 42 13 	call	0x2684	; 0x2684 <getGPSDatafromNMEA>
    393a:	10 92 87 21 	sts	0x2187, r1	; 0x802187 <last_finished>
    393e:	e4 96       	adiw	r28, 0x34	; 52
    3940:	8f ad       	ldd	r24, Y+63	; 0x3f
    3942:	e4 97       	sbiw	r28, 0x34	; 52
    3944:	88 23       	and	r24, r24
    3946:	19 f0       	breq	.+6      	; 0x394e <main+0x1d0>
    3948:	8f b7       	in	r24, 0x3f	; 63
    394a:	f8 94       	cli
    394c:	8f bf       	out	0x3f, r24	; 63
    394e:	66 e5       	ldi	r22, 0x56	; 86
    3950:	71 e6       	ldi	r23, 0x61	; 97
    3952:	81 e5       	ldi	r24, 0x51	; 81
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	a8 dd       	rcall	.-1200   	; 0x34a8 <__portable_avr_delay_cycles>
    3958:	11 11       	cpse	r17, r1
    395a:	1f c0       	rjmp	.+62     	; 0x399a <main+0x21c>
    395c:	f3 01       	movw	r30, r6
    395e:	01 83       	std	Z+1, r16	; 0x01
    3960:	05 83       	std	Z+5, r16	; 0x05
    3962:	f8 e0       	ldi	r31, 0x08	; 8
    3964:	f0 93 04 06 	sts	0x0604, r31	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    3968:	d7 01       	movw	r26, r14
    396a:	c6 01       	movw	r24, r12
    396c:	88 19       	sub	r24, r8
    396e:	99 09       	sbc	r25, r9
    3970:	aa 09       	sbc	r26, r10
    3972:	bb 09       	sbc	r27, r11
    3974:	0a f0       	brmi	.+2      	; 0x3978 <main+0x1fa>
    3976:	6b cf       	rjmp	.-298    	; 0x384e <main+0xd0>
    3978:	d7 01       	movw	r26, r14
    397a:	c6 01       	movw	r24, r12
    397c:	89 55       	subi	r24, 0x59	; 89
    397e:	92 40       	sbci	r25, 0x02	; 2
    3980:	a1 09       	sbc	r26, r1
    3982:	b1 09       	sbc	r27, r1
    3984:	87 3c       	cpi	r24, 0xC7	; 199
    3986:	91 05       	cpc	r25, r1
    3988:	a1 05       	cpc	r26, r1
    398a:	b1 05       	cpc	r27, r1
    398c:	08 f0       	brcs	.+2      	; 0x3990 <main+0x212>
    398e:	5f cf       	rjmp	.-322    	; 0x384e <main+0xd0>
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	f3 01       	movw	r30, r6
    3994:	81 83       	std	Z+1, r24	; 0x01
    3996:	85 83       	std	Z+5, r24	; 0x05
    3998:	02 c0       	rjmp	.+4      	; 0x399e <main+0x220>
    399a:	11 30       	cpi	r17, 0x01	; 1
    399c:	b1 f4       	brne	.+44     	; 0x39ca <main+0x24c>
    399e:	81 e5       	ldi	r24, 0x51	; 81
    39a0:	90 e2       	ldi	r25, 0x20	; 32
    39a2:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <puts>
    39a6:	fc e2       	ldi	r31, 0x2C	; 44
    39a8:	cf 16       	cp	r12, r31
    39aa:	f1 e0       	ldi	r31, 0x01	; 1
    39ac:	df 06       	cpc	r13, r31
    39ae:	e1 04       	cpc	r14, r1
    39b0:	f1 04       	cpc	r15, r1
    39b2:	0c f0       	brlt	.+2      	; 0x39b6 <main+0x238>
    39b4:	47 cf       	rjmp	.-370    	; 0x3844 <main+0xc6>
    39b6:	82 e0       	ldi	r24, 0x02	; 2
    39b8:	f3 01       	movw	r30, r6
    39ba:	81 83       	std	Z+1, r24	; 0x01
    39bc:	85 83       	std	Z+5, r24	; 0x05
    39be:	f0 e8       	ldi	r31, 0x80	; 128
    39c0:	f0 93 01 06 	sts	0x0601, r31	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    39c4:	f0 93 05 06 	sts	0x0605, r31	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    39c8:	03 c0       	rjmp	.+6      	; 0x39d0 <main+0x252>
    39ca:	12 30       	cpi	r17, 0x02	; 2
    39cc:	09 f0       	breq	.+2      	; 0x39d0 <main+0x252>
    39ce:	3f cf       	rjmp	.-386    	; 0x384e <main+0xd0>
    39d0:	81 e6       	ldi	r24, 0x61	; 97
    39d2:	90 e2       	ldi	r25, 0x20	; 32
    39d4:	0e 94 9b 26 	call	0x4d36	; 0x4d36 <puts>
    39d8:	d7 01       	movw	r26, r14
    39da:	c6 01       	movw	r24, r12
    39dc:	88 19       	sub	r24, r8
    39de:	99 09       	sbc	r25, r9
    39e0:	aa 09       	sbc	r26, r10
    39e2:	bb 09       	sbc	r27, r11
    39e4:	18 16       	cp	r1, r24
    39e6:	19 06       	cpc	r1, r25
    39e8:	1a 06       	cpc	r1, r26
    39ea:	1b 06       	cpc	r1, r27
    39ec:	0c f4       	brge	.+2      	; 0x39f0 <main+0x272>
    39ee:	2c cf       	rjmp	.-424    	; 0x3848 <main+0xca>
    39f0:	24 e6       	ldi	r18, 0x64	; 100
    39f2:	82 16       	cp	r8, r18
    39f4:	91 04       	cpc	r9, r1
    39f6:	a1 04       	cpc	r10, r1
    39f8:	b1 04       	cpc	r11, r1
    39fa:	0c f0       	brlt	.+2      	; 0x39fe <main+0x280>
    39fc:	27 cf       	rjmp	.-434    	; 0x384c <main+0xce>
    39fe:	88 e0       	ldi	r24, 0x08	; 8
    3a00:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    3a04:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    3a08:	13 e0       	ldi	r17, 0x03	; 3
    3a0a:	21 cf       	rjmp	.-446    	; 0x384e <main+0xd0>

00003a0c <__subsf3>:
    3a0c:	50 58       	subi	r21, 0x80	; 128

00003a0e <__addsf3>:
    3a0e:	bb 27       	eor	r27, r27
    3a10:	aa 27       	eor	r26, r26
    3a12:	0e d0       	rcall	.+28     	; 0x3a30 <__addsf3x>
    3a14:	4d c1       	rjmp	.+666    	; 0x3cb0 <__fp_round>
    3a16:	3e d1       	rcall	.+636    	; 0x3c94 <__fp_pscA>
    3a18:	30 f0       	brcs	.+12     	; 0x3a26 <__addsf3+0x18>
    3a1a:	43 d1       	rcall	.+646    	; 0x3ca2 <__fp_pscB>
    3a1c:	20 f0       	brcs	.+8      	; 0x3a26 <__addsf3+0x18>
    3a1e:	31 f4       	brne	.+12     	; 0x3a2c <__addsf3+0x1e>
    3a20:	9f 3f       	cpi	r25, 0xFF	; 255
    3a22:	11 f4       	brne	.+4      	; 0x3a28 <__addsf3+0x1a>
    3a24:	1e f4       	brtc	.+6      	; 0x3a2c <__addsf3+0x1e>
    3a26:	33 c1       	rjmp	.+614    	; 0x3c8e <__fp_nan>
    3a28:	0e f4       	brtc	.+2      	; 0x3a2c <__addsf3+0x1e>
    3a2a:	e0 95       	com	r30
    3a2c:	e7 fb       	bst	r30, 7
    3a2e:	29 c1       	rjmp	.+594    	; 0x3c82 <__fp_inf>

00003a30 <__addsf3x>:
    3a30:	e9 2f       	mov	r30, r25
    3a32:	4f d1       	rcall	.+670    	; 0x3cd2 <__fp_split3>
    3a34:	80 f3       	brcs	.-32     	; 0x3a16 <__addsf3+0x8>
    3a36:	ba 17       	cp	r27, r26
    3a38:	62 07       	cpc	r22, r18
    3a3a:	73 07       	cpc	r23, r19
    3a3c:	84 07       	cpc	r24, r20
    3a3e:	95 07       	cpc	r25, r21
    3a40:	18 f0       	brcs	.+6      	; 0x3a48 <__addsf3x+0x18>
    3a42:	71 f4       	brne	.+28     	; 0x3a60 <__addsf3x+0x30>
    3a44:	9e f5       	brtc	.+102    	; 0x3aac <__addsf3x+0x7c>
    3a46:	67 c1       	rjmp	.+718    	; 0x3d16 <__fp_zero>
    3a48:	0e f4       	brtc	.+2      	; 0x3a4c <__addsf3x+0x1c>
    3a4a:	e0 95       	com	r30
    3a4c:	0b 2e       	mov	r0, r27
    3a4e:	ba 2f       	mov	r27, r26
    3a50:	a0 2d       	mov	r26, r0
    3a52:	0b 01       	movw	r0, r22
    3a54:	b9 01       	movw	r22, r18
    3a56:	90 01       	movw	r18, r0
    3a58:	0c 01       	movw	r0, r24
    3a5a:	ca 01       	movw	r24, r20
    3a5c:	a0 01       	movw	r20, r0
    3a5e:	11 24       	eor	r1, r1
    3a60:	ff 27       	eor	r31, r31
    3a62:	59 1b       	sub	r21, r25
    3a64:	99 f0       	breq	.+38     	; 0x3a8c <__addsf3x+0x5c>
    3a66:	59 3f       	cpi	r21, 0xF9	; 249
    3a68:	50 f4       	brcc	.+20     	; 0x3a7e <__addsf3x+0x4e>
    3a6a:	50 3e       	cpi	r21, 0xE0	; 224
    3a6c:	68 f1       	brcs	.+90     	; 0x3ac8 <__addsf3x+0x98>
    3a6e:	1a 16       	cp	r1, r26
    3a70:	f0 40       	sbci	r31, 0x00	; 0
    3a72:	a2 2f       	mov	r26, r18
    3a74:	23 2f       	mov	r18, r19
    3a76:	34 2f       	mov	r19, r20
    3a78:	44 27       	eor	r20, r20
    3a7a:	58 5f       	subi	r21, 0xF8	; 248
    3a7c:	f3 cf       	rjmp	.-26     	; 0x3a64 <__addsf3x+0x34>
    3a7e:	46 95       	lsr	r20
    3a80:	37 95       	ror	r19
    3a82:	27 95       	ror	r18
    3a84:	a7 95       	ror	r26
    3a86:	f0 40       	sbci	r31, 0x00	; 0
    3a88:	53 95       	inc	r21
    3a8a:	c9 f7       	brne	.-14     	; 0x3a7e <__addsf3x+0x4e>
    3a8c:	7e f4       	brtc	.+30     	; 0x3aac <__addsf3x+0x7c>
    3a8e:	1f 16       	cp	r1, r31
    3a90:	ba 0b       	sbc	r27, r26
    3a92:	62 0b       	sbc	r22, r18
    3a94:	73 0b       	sbc	r23, r19
    3a96:	84 0b       	sbc	r24, r20
    3a98:	ba f0       	brmi	.+46     	; 0x3ac8 <__addsf3x+0x98>
    3a9a:	91 50       	subi	r25, 0x01	; 1
    3a9c:	a1 f0       	breq	.+40     	; 0x3ac6 <__addsf3x+0x96>
    3a9e:	ff 0f       	add	r31, r31
    3aa0:	bb 1f       	adc	r27, r27
    3aa2:	66 1f       	adc	r22, r22
    3aa4:	77 1f       	adc	r23, r23
    3aa6:	88 1f       	adc	r24, r24
    3aa8:	c2 f7       	brpl	.-16     	; 0x3a9a <__addsf3x+0x6a>
    3aaa:	0e c0       	rjmp	.+28     	; 0x3ac8 <__addsf3x+0x98>
    3aac:	ba 0f       	add	r27, r26
    3aae:	62 1f       	adc	r22, r18
    3ab0:	73 1f       	adc	r23, r19
    3ab2:	84 1f       	adc	r24, r20
    3ab4:	48 f4       	brcc	.+18     	; 0x3ac8 <__addsf3x+0x98>
    3ab6:	87 95       	ror	r24
    3ab8:	77 95       	ror	r23
    3aba:	67 95       	ror	r22
    3abc:	b7 95       	ror	r27
    3abe:	f7 95       	ror	r31
    3ac0:	9e 3f       	cpi	r25, 0xFE	; 254
    3ac2:	08 f0       	brcs	.+2      	; 0x3ac6 <__addsf3x+0x96>
    3ac4:	b3 cf       	rjmp	.-154    	; 0x3a2c <__addsf3+0x1e>
    3ac6:	93 95       	inc	r25
    3ac8:	88 0f       	add	r24, r24
    3aca:	08 f0       	brcs	.+2      	; 0x3ace <__addsf3x+0x9e>
    3acc:	99 27       	eor	r25, r25
    3ace:	ee 0f       	add	r30, r30
    3ad0:	97 95       	ror	r25
    3ad2:	87 95       	ror	r24
    3ad4:	08 95       	ret

00003ad6 <__divsf3>:
    3ad6:	0c d0       	rcall	.+24     	; 0x3af0 <__divsf3x>
    3ad8:	eb c0       	rjmp	.+470    	; 0x3cb0 <__fp_round>
    3ada:	e3 d0       	rcall	.+454    	; 0x3ca2 <__fp_pscB>
    3adc:	40 f0       	brcs	.+16     	; 0x3aee <__divsf3+0x18>
    3ade:	da d0       	rcall	.+436    	; 0x3c94 <__fp_pscA>
    3ae0:	30 f0       	brcs	.+12     	; 0x3aee <__divsf3+0x18>
    3ae2:	21 f4       	brne	.+8      	; 0x3aec <__divsf3+0x16>
    3ae4:	5f 3f       	cpi	r21, 0xFF	; 255
    3ae6:	19 f0       	breq	.+6      	; 0x3aee <__divsf3+0x18>
    3ae8:	cc c0       	rjmp	.+408    	; 0x3c82 <__fp_inf>
    3aea:	51 11       	cpse	r21, r1
    3aec:	15 c1       	rjmp	.+554    	; 0x3d18 <__fp_szero>
    3aee:	cf c0       	rjmp	.+414    	; 0x3c8e <__fp_nan>

00003af0 <__divsf3x>:
    3af0:	f0 d0       	rcall	.+480    	; 0x3cd2 <__fp_split3>
    3af2:	98 f3       	brcs	.-26     	; 0x3ada <__divsf3+0x4>

00003af4 <__divsf3_pse>:
    3af4:	99 23       	and	r25, r25
    3af6:	c9 f3       	breq	.-14     	; 0x3aea <__divsf3+0x14>
    3af8:	55 23       	and	r21, r21
    3afa:	b1 f3       	breq	.-20     	; 0x3ae8 <__divsf3+0x12>
    3afc:	95 1b       	sub	r25, r21
    3afe:	55 0b       	sbc	r21, r21
    3b00:	bb 27       	eor	r27, r27
    3b02:	aa 27       	eor	r26, r26
    3b04:	62 17       	cp	r22, r18
    3b06:	73 07       	cpc	r23, r19
    3b08:	84 07       	cpc	r24, r20
    3b0a:	38 f0       	brcs	.+14     	; 0x3b1a <__divsf3_pse+0x26>
    3b0c:	9f 5f       	subi	r25, 0xFF	; 255
    3b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b10:	22 0f       	add	r18, r18
    3b12:	33 1f       	adc	r19, r19
    3b14:	44 1f       	adc	r20, r20
    3b16:	aa 1f       	adc	r26, r26
    3b18:	a9 f3       	breq	.-22     	; 0x3b04 <__divsf3_pse+0x10>
    3b1a:	33 d0       	rcall	.+102    	; 0x3b82 <__divsf3_pse+0x8e>
    3b1c:	0e 2e       	mov	r0, r30
    3b1e:	3a f0       	brmi	.+14     	; 0x3b2e <__divsf3_pse+0x3a>
    3b20:	e0 e8       	ldi	r30, 0x80	; 128
    3b22:	30 d0       	rcall	.+96     	; 0x3b84 <__divsf3_pse+0x90>
    3b24:	91 50       	subi	r25, 0x01	; 1
    3b26:	50 40       	sbci	r21, 0x00	; 0
    3b28:	e6 95       	lsr	r30
    3b2a:	00 1c       	adc	r0, r0
    3b2c:	ca f7       	brpl	.-14     	; 0x3b20 <__divsf3_pse+0x2c>
    3b2e:	29 d0       	rcall	.+82     	; 0x3b82 <__divsf3_pse+0x8e>
    3b30:	fe 2f       	mov	r31, r30
    3b32:	27 d0       	rcall	.+78     	; 0x3b82 <__divsf3_pse+0x8e>
    3b34:	66 0f       	add	r22, r22
    3b36:	77 1f       	adc	r23, r23
    3b38:	88 1f       	adc	r24, r24
    3b3a:	bb 1f       	adc	r27, r27
    3b3c:	26 17       	cp	r18, r22
    3b3e:	37 07       	cpc	r19, r23
    3b40:	48 07       	cpc	r20, r24
    3b42:	ab 07       	cpc	r26, r27
    3b44:	b0 e8       	ldi	r27, 0x80	; 128
    3b46:	09 f0       	breq	.+2      	; 0x3b4a <__divsf3_pse+0x56>
    3b48:	bb 0b       	sbc	r27, r27
    3b4a:	80 2d       	mov	r24, r0
    3b4c:	bf 01       	movw	r22, r30
    3b4e:	ff 27       	eor	r31, r31
    3b50:	93 58       	subi	r25, 0x83	; 131
    3b52:	5f 4f       	sbci	r21, 0xFF	; 255
    3b54:	2a f0       	brmi	.+10     	; 0x3b60 <__divsf3_pse+0x6c>
    3b56:	9e 3f       	cpi	r25, 0xFE	; 254
    3b58:	51 05       	cpc	r21, r1
    3b5a:	68 f0       	brcs	.+26     	; 0x3b76 <__divsf3_pse+0x82>
    3b5c:	92 c0       	rjmp	.+292    	; 0x3c82 <__fp_inf>
    3b5e:	dc c0       	rjmp	.+440    	; 0x3d18 <__fp_szero>
    3b60:	5f 3f       	cpi	r21, 0xFF	; 255
    3b62:	ec f3       	brlt	.-6      	; 0x3b5e <__divsf3_pse+0x6a>
    3b64:	98 3e       	cpi	r25, 0xE8	; 232
    3b66:	dc f3       	brlt	.-10     	; 0x3b5e <__divsf3_pse+0x6a>
    3b68:	86 95       	lsr	r24
    3b6a:	77 95       	ror	r23
    3b6c:	67 95       	ror	r22
    3b6e:	b7 95       	ror	r27
    3b70:	f7 95       	ror	r31
    3b72:	9f 5f       	subi	r25, 0xFF	; 255
    3b74:	c9 f7       	brne	.-14     	; 0x3b68 <__divsf3_pse+0x74>
    3b76:	88 0f       	add	r24, r24
    3b78:	91 1d       	adc	r25, r1
    3b7a:	96 95       	lsr	r25
    3b7c:	87 95       	ror	r24
    3b7e:	97 f9       	bld	r25, 7
    3b80:	08 95       	ret
    3b82:	e1 e0       	ldi	r30, 0x01	; 1
    3b84:	66 0f       	add	r22, r22
    3b86:	77 1f       	adc	r23, r23
    3b88:	88 1f       	adc	r24, r24
    3b8a:	bb 1f       	adc	r27, r27
    3b8c:	62 17       	cp	r22, r18
    3b8e:	73 07       	cpc	r23, r19
    3b90:	84 07       	cpc	r24, r20
    3b92:	ba 07       	cpc	r27, r26
    3b94:	20 f0       	brcs	.+8      	; 0x3b9e <__divsf3_pse+0xaa>
    3b96:	62 1b       	sub	r22, r18
    3b98:	73 0b       	sbc	r23, r19
    3b9a:	84 0b       	sbc	r24, r20
    3b9c:	ba 0b       	sbc	r27, r26
    3b9e:	ee 1f       	adc	r30, r30
    3ba0:	88 f7       	brcc	.-30     	; 0x3b84 <__divsf3_pse+0x90>
    3ba2:	e0 95       	com	r30
    3ba4:	08 95       	ret

00003ba6 <__fixsfsi>:
    3ba6:	04 d0       	rcall	.+8      	; 0x3bb0 <__fixunssfsi>
    3ba8:	68 94       	set
    3baa:	b1 11       	cpse	r27, r1
    3bac:	b5 c0       	rjmp	.+362    	; 0x3d18 <__fp_szero>
    3bae:	08 95       	ret

00003bb0 <__fixunssfsi>:
    3bb0:	98 d0       	rcall	.+304    	; 0x3ce2 <__fp_splitA>
    3bb2:	88 f0       	brcs	.+34     	; 0x3bd6 <__fixunssfsi+0x26>
    3bb4:	9f 57       	subi	r25, 0x7F	; 127
    3bb6:	90 f0       	brcs	.+36     	; 0x3bdc <__fixunssfsi+0x2c>
    3bb8:	b9 2f       	mov	r27, r25
    3bba:	99 27       	eor	r25, r25
    3bbc:	b7 51       	subi	r27, 0x17	; 23
    3bbe:	a0 f0       	brcs	.+40     	; 0x3be8 <__fixunssfsi+0x38>
    3bc0:	d1 f0       	breq	.+52     	; 0x3bf6 <__fixunssfsi+0x46>
    3bc2:	66 0f       	add	r22, r22
    3bc4:	77 1f       	adc	r23, r23
    3bc6:	88 1f       	adc	r24, r24
    3bc8:	99 1f       	adc	r25, r25
    3bca:	1a f0       	brmi	.+6      	; 0x3bd2 <__fixunssfsi+0x22>
    3bcc:	ba 95       	dec	r27
    3bce:	c9 f7       	brne	.-14     	; 0x3bc2 <__fixunssfsi+0x12>
    3bd0:	12 c0       	rjmp	.+36     	; 0x3bf6 <__fixunssfsi+0x46>
    3bd2:	b1 30       	cpi	r27, 0x01	; 1
    3bd4:	81 f0       	breq	.+32     	; 0x3bf6 <__fixunssfsi+0x46>
    3bd6:	9f d0       	rcall	.+318    	; 0x3d16 <__fp_zero>
    3bd8:	b1 e0       	ldi	r27, 0x01	; 1
    3bda:	08 95       	ret
    3bdc:	9c c0       	rjmp	.+312    	; 0x3d16 <__fp_zero>
    3bde:	67 2f       	mov	r22, r23
    3be0:	78 2f       	mov	r23, r24
    3be2:	88 27       	eor	r24, r24
    3be4:	b8 5f       	subi	r27, 0xF8	; 248
    3be6:	39 f0       	breq	.+14     	; 0x3bf6 <__fixunssfsi+0x46>
    3be8:	b9 3f       	cpi	r27, 0xF9	; 249
    3bea:	cc f3       	brlt	.-14     	; 0x3bde <__fixunssfsi+0x2e>
    3bec:	86 95       	lsr	r24
    3bee:	77 95       	ror	r23
    3bf0:	67 95       	ror	r22
    3bf2:	b3 95       	inc	r27
    3bf4:	d9 f7       	brne	.-10     	; 0x3bec <__fixunssfsi+0x3c>
    3bf6:	3e f4       	brtc	.+14     	; 0x3c06 <__fixunssfsi+0x56>
    3bf8:	90 95       	com	r25
    3bfa:	80 95       	com	r24
    3bfc:	70 95       	com	r23
    3bfe:	61 95       	neg	r22
    3c00:	7f 4f       	sbci	r23, 0xFF	; 255
    3c02:	8f 4f       	sbci	r24, 0xFF	; 255
    3c04:	9f 4f       	sbci	r25, 0xFF	; 255
    3c06:	08 95       	ret

00003c08 <__floatunsisf>:
    3c08:	e8 94       	clt
    3c0a:	09 c0       	rjmp	.+18     	; 0x3c1e <__floatsisf+0x12>

00003c0c <__floatsisf>:
    3c0c:	97 fb       	bst	r25, 7
    3c0e:	3e f4       	brtc	.+14     	; 0x3c1e <__floatsisf+0x12>
    3c10:	90 95       	com	r25
    3c12:	80 95       	com	r24
    3c14:	70 95       	com	r23
    3c16:	61 95       	neg	r22
    3c18:	7f 4f       	sbci	r23, 0xFF	; 255
    3c1a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c1e:	99 23       	and	r25, r25
    3c20:	a9 f0       	breq	.+42     	; 0x3c4c <__floatsisf+0x40>
    3c22:	f9 2f       	mov	r31, r25
    3c24:	96 e9       	ldi	r25, 0x96	; 150
    3c26:	bb 27       	eor	r27, r27
    3c28:	93 95       	inc	r25
    3c2a:	f6 95       	lsr	r31
    3c2c:	87 95       	ror	r24
    3c2e:	77 95       	ror	r23
    3c30:	67 95       	ror	r22
    3c32:	b7 95       	ror	r27
    3c34:	f1 11       	cpse	r31, r1
    3c36:	f8 cf       	rjmp	.-16     	; 0x3c28 <__floatsisf+0x1c>
    3c38:	fa f4       	brpl	.+62     	; 0x3c78 <__floatsisf+0x6c>
    3c3a:	bb 0f       	add	r27, r27
    3c3c:	11 f4       	brne	.+4      	; 0x3c42 <__floatsisf+0x36>
    3c3e:	60 ff       	sbrs	r22, 0
    3c40:	1b c0       	rjmp	.+54     	; 0x3c78 <__floatsisf+0x6c>
    3c42:	6f 5f       	subi	r22, 0xFF	; 255
    3c44:	7f 4f       	sbci	r23, 0xFF	; 255
    3c46:	8f 4f       	sbci	r24, 0xFF	; 255
    3c48:	9f 4f       	sbci	r25, 0xFF	; 255
    3c4a:	16 c0       	rjmp	.+44     	; 0x3c78 <__floatsisf+0x6c>
    3c4c:	88 23       	and	r24, r24
    3c4e:	11 f0       	breq	.+4      	; 0x3c54 <__floatsisf+0x48>
    3c50:	96 e9       	ldi	r25, 0x96	; 150
    3c52:	11 c0       	rjmp	.+34     	; 0x3c76 <__floatsisf+0x6a>
    3c54:	77 23       	and	r23, r23
    3c56:	21 f0       	breq	.+8      	; 0x3c60 <__floatsisf+0x54>
    3c58:	9e e8       	ldi	r25, 0x8E	; 142
    3c5a:	87 2f       	mov	r24, r23
    3c5c:	76 2f       	mov	r23, r22
    3c5e:	05 c0       	rjmp	.+10     	; 0x3c6a <__floatsisf+0x5e>
    3c60:	66 23       	and	r22, r22
    3c62:	71 f0       	breq	.+28     	; 0x3c80 <__floatsisf+0x74>
    3c64:	96 e8       	ldi	r25, 0x86	; 134
    3c66:	86 2f       	mov	r24, r22
    3c68:	70 e0       	ldi	r23, 0x00	; 0
    3c6a:	60 e0       	ldi	r22, 0x00	; 0
    3c6c:	2a f0       	brmi	.+10     	; 0x3c78 <__floatsisf+0x6c>
    3c6e:	9a 95       	dec	r25
    3c70:	66 0f       	add	r22, r22
    3c72:	77 1f       	adc	r23, r23
    3c74:	88 1f       	adc	r24, r24
    3c76:	da f7       	brpl	.-10     	; 0x3c6e <__floatsisf+0x62>
    3c78:	88 0f       	add	r24, r24
    3c7a:	96 95       	lsr	r25
    3c7c:	87 95       	ror	r24
    3c7e:	97 f9       	bld	r25, 7
    3c80:	08 95       	ret

00003c82 <__fp_inf>:
    3c82:	97 f9       	bld	r25, 7
    3c84:	9f 67       	ori	r25, 0x7F	; 127
    3c86:	80 e8       	ldi	r24, 0x80	; 128
    3c88:	70 e0       	ldi	r23, 0x00	; 0
    3c8a:	60 e0       	ldi	r22, 0x00	; 0
    3c8c:	08 95       	ret

00003c8e <__fp_nan>:
    3c8e:	9f ef       	ldi	r25, 0xFF	; 255
    3c90:	80 ec       	ldi	r24, 0xC0	; 192
    3c92:	08 95       	ret

00003c94 <__fp_pscA>:
    3c94:	00 24       	eor	r0, r0
    3c96:	0a 94       	dec	r0
    3c98:	16 16       	cp	r1, r22
    3c9a:	17 06       	cpc	r1, r23
    3c9c:	18 06       	cpc	r1, r24
    3c9e:	09 06       	cpc	r0, r25
    3ca0:	08 95       	ret

00003ca2 <__fp_pscB>:
    3ca2:	00 24       	eor	r0, r0
    3ca4:	0a 94       	dec	r0
    3ca6:	12 16       	cp	r1, r18
    3ca8:	13 06       	cpc	r1, r19
    3caa:	14 06       	cpc	r1, r20
    3cac:	05 06       	cpc	r0, r21
    3cae:	08 95       	ret

00003cb0 <__fp_round>:
    3cb0:	09 2e       	mov	r0, r25
    3cb2:	03 94       	inc	r0
    3cb4:	00 0c       	add	r0, r0
    3cb6:	11 f4       	brne	.+4      	; 0x3cbc <__fp_round+0xc>
    3cb8:	88 23       	and	r24, r24
    3cba:	52 f0       	brmi	.+20     	; 0x3cd0 <__fp_round+0x20>
    3cbc:	bb 0f       	add	r27, r27
    3cbe:	40 f4       	brcc	.+16     	; 0x3cd0 <__fp_round+0x20>
    3cc0:	bf 2b       	or	r27, r31
    3cc2:	11 f4       	brne	.+4      	; 0x3cc8 <__fp_round+0x18>
    3cc4:	60 ff       	sbrs	r22, 0
    3cc6:	04 c0       	rjmp	.+8      	; 0x3cd0 <__fp_round+0x20>
    3cc8:	6f 5f       	subi	r22, 0xFF	; 255
    3cca:	7f 4f       	sbci	r23, 0xFF	; 255
    3ccc:	8f 4f       	sbci	r24, 0xFF	; 255
    3cce:	9f 4f       	sbci	r25, 0xFF	; 255
    3cd0:	08 95       	ret

00003cd2 <__fp_split3>:
    3cd2:	57 fd       	sbrc	r21, 7
    3cd4:	90 58       	subi	r25, 0x80	; 128
    3cd6:	44 0f       	add	r20, r20
    3cd8:	55 1f       	adc	r21, r21
    3cda:	59 f0       	breq	.+22     	; 0x3cf2 <__fp_splitA+0x10>
    3cdc:	5f 3f       	cpi	r21, 0xFF	; 255
    3cde:	71 f0       	breq	.+28     	; 0x3cfc <__fp_splitA+0x1a>
    3ce0:	47 95       	ror	r20

00003ce2 <__fp_splitA>:
    3ce2:	88 0f       	add	r24, r24
    3ce4:	97 fb       	bst	r25, 7
    3ce6:	99 1f       	adc	r25, r25
    3ce8:	61 f0       	breq	.+24     	; 0x3d02 <__fp_splitA+0x20>
    3cea:	9f 3f       	cpi	r25, 0xFF	; 255
    3cec:	79 f0       	breq	.+30     	; 0x3d0c <__fp_splitA+0x2a>
    3cee:	87 95       	ror	r24
    3cf0:	08 95       	ret
    3cf2:	12 16       	cp	r1, r18
    3cf4:	13 06       	cpc	r1, r19
    3cf6:	14 06       	cpc	r1, r20
    3cf8:	55 1f       	adc	r21, r21
    3cfa:	f2 cf       	rjmp	.-28     	; 0x3ce0 <__fp_split3+0xe>
    3cfc:	46 95       	lsr	r20
    3cfe:	f1 df       	rcall	.-30     	; 0x3ce2 <__fp_splitA>
    3d00:	08 c0       	rjmp	.+16     	; 0x3d12 <__fp_splitA+0x30>
    3d02:	16 16       	cp	r1, r22
    3d04:	17 06       	cpc	r1, r23
    3d06:	18 06       	cpc	r1, r24
    3d08:	99 1f       	adc	r25, r25
    3d0a:	f1 cf       	rjmp	.-30     	; 0x3cee <__fp_splitA+0xc>
    3d0c:	86 95       	lsr	r24
    3d0e:	71 05       	cpc	r23, r1
    3d10:	61 05       	cpc	r22, r1
    3d12:	08 94       	sec
    3d14:	08 95       	ret

00003d16 <__fp_zero>:
    3d16:	e8 94       	clt

00003d18 <__fp_szero>:
    3d18:	bb 27       	eor	r27, r27
    3d1a:	66 27       	eor	r22, r22
    3d1c:	77 27       	eor	r23, r23
    3d1e:	cb 01       	movw	r24, r22
    3d20:	97 f9       	bld	r25, 7
    3d22:	08 95       	ret
    3d24:	0e f0       	brts	.+2      	; 0x3d28 <__fp_szero+0x10>
    3d26:	23 c1       	rjmp	.+582    	; 0x3f6e <__fp_mpack>
    3d28:	b2 cf       	rjmp	.-156    	; 0x3c8e <__fp_nan>
    3d2a:	68 94       	set
    3d2c:	aa cf       	rjmp	.-172    	; 0x3c82 <__fp_inf>

00003d2e <log>:
    3d2e:	d9 df       	rcall	.-78     	; 0x3ce2 <__fp_splitA>
    3d30:	c8 f3       	brcs	.-14     	; 0x3d24 <__fp_szero+0xc>
    3d32:	99 23       	and	r25, r25
    3d34:	d1 f3       	breq	.-12     	; 0x3d2a <__fp_szero+0x12>
    3d36:	c6 f3       	brts	.-16     	; 0x3d28 <__fp_szero+0x10>
    3d38:	df 93       	push	r29
    3d3a:	cf 93       	push	r28
    3d3c:	1f 93       	push	r17
    3d3e:	0f 93       	push	r16
    3d40:	ff 92       	push	r15
    3d42:	c9 2f       	mov	r28, r25
    3d44:	dd 27       	eor	r29, r29
    3d46:	88 23       	and	r24, r24
    3d48:	2a f0       	brmi	.+10     	; 0x3d54 <log+0x26>
    3d4a:	21 97       	sbiw	r28, 0x01	; 1
    3d4c:	66 0f       	add	r22, r22
    3d4e:	77 1f       	adc	r23, r23
    3d50:	88 1f       	adc	r24, r24
    3d52:	da f7       	brpl	.-10     	; 0x3d4a <log+0x1c>
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	40 e8       	ldi	r20, 0x80	; 128
    3d5a:	5f eb       	ldi	r21, 0xBF	; 191
    3d5c:	9f e3       	ldi	r25, 0x3F	; 63
    3d5e:	88 39       	cpi	r24, 0x98	; 152
    3d60:	20 f0       	brcs	.+8      	; 0x3d6a <log+0x3c>
    3d62:	80 3e       	cpi	r24, 0xE0	; 224
    3d64:	30 f0       	brcs	.+12     	; 0x3d72 <log+0x44>
    3d66:	21 96       	adiw	r28, 0x01	; 1
    3d68:	8f 77       	andi	r24, 0x7F	; 127
    3d6a:	51 de       	rcall	.-862    	; 0x3a0e <__addsf3>
    3d6c:	ea e7       	ldi	r30, 0x7A	; 122
    3d6e:	f2 e0       	ldi	r31, 0x02	; 2
    3d70:	03 c0       	rjmp	.+6      	; 0x3d78 <log+0x4a>
    3d72:	4d de       	rcall	.-870    	; 0x3a0e <__addsf3>
    3d74:	e7 ea       	ldi	r30, 0xA7	; 167
    3d76:	f2 e0       	ldi	r31, 0x02	; 2
    3d78:	08 d1       	rcall	.+528    	; 0x3f8a <__fp_powser>
    3d7a:	8b 01       	movw	r16, r22
    3d7c:	be 01       	movw	r22, r28
    3d7e:	ec 01       	movw	r28, r24
    3d80:	fb 2e       	mov	r15, r27
    3d82:	6f 57       	subi	r22, 0x7F	; 127
    3d84:	71 09       	sbc	r23, r1
    3d86:	75 95       	asr	r23
    3d88:	77 1f       	adc	r23, r23
    3d8a:	88 0b       	sbc	r24, r24
    3d8c:	99 0b       	sbc	r25, r25
    3d8e:	3e df       	rcall	.-388    	; 0x3c0c <__floatsisf>
    3d90:	28 e1       	ldi	r18, 0x18	; 24
    3d92:	32 e7       	ldi	r19, 0x72	; 114
    3d94:	41 e3       	ldi	r20, 0x31	; 49
    3d96:	5f e3       	ldi	r21, 0x3F	; 63
    3d98:	16 d0       	rcall	.+44     	; 0x3dc6 <__mulsf3x>
    3d9a:	af 2d       	mov	r26, r15
    3d9c:	98 01       	movw	r18, r16
    3d9e:	ae 01       	movw	r20, r28
    3da0:	ff 90       	pop	r15
    3da2:	0f 91       	pop	r16
    3da4:	1f 91       	pop	r17
    3da6:	cf 91       	pop	r28
    3da8:	df 91       	pop	r29
    3daa:	42 de       	rcall	.-892    	; 0x3a30 <__addsf3x>
    3dac:	81 cf       	rjmp	.-254    	; 0x3cb0 <__fp_round>

00003dae <__mulsf3>:
    3dae:	0b d0       	rcall	.+22     	; 0x3dc6 <__mulsf3x>
    3db0:	7f cf       	rjmp	.-258    	; 0x3cb0 <__fp_round>
    3db2:	70 df       	rcall	.-288    	; 0x3c94 <__fp_pscA>
    3db4:	28 f0       	brcs	.+10     	; 0x3dc0 <__mulsf3+0x12>
    3db6:	75 df       	rcall	.-278    	; 0x3ca2 <__fp_pscB>
    3db8:	18 f0       	brcs	.+6      	; 0x3dc0 <__mulsf3+0x12>
    3dba:	95 23       	and	r25, r21
    3dbc:	09 f0       	breq	.+2      	; 0x3dc0 <__mulsf3+0x12>
    3dbe:	61 cf       	rjmp	.-318    	; 0x3c82 <__fp_inf>
    3dc0:	66 cf       	rjmp	.-308    	; 0x3c8e <__fp_nan>
    3dc2:	11 24       	eor	r1, r1
    3dc4:	a9 cf       	rjmp	.-174    	; 0x3d18 <__fp_szero>

00003dc6 <__mulsf3x>:
    3dc6:	85 df       	rcall	.-246    	; 0x3cd2 <__fp_split3>
    3dc8:	a0 f3       	brcs	.-24     	; 0x3db2 <__mulsf3+0x4>

00003dca <__mulsf3_pse>:
    3dca:	95 9f       	mul	r25, r21
    3dcc:	d1 f3       	breq	.-12     	; 0x3dc2 <__mulsf3+0x14>
    3dce:	95 0f       	add	r25, r21
    3dd0:	50 e0       	ldi	r21, 0x00	; 0
    3dd2:	55 1f       	adc	r21, r21
    3dd4:	62 9f       	mul	r22, r18
    3dd6:	f0 01       	movw	r30, r0
    3dd8:	72 9f       	mul	r23, r18
    3dda:	bb 27       	eor	r27, r27
    3ddc:	f0 0d       	add	r31, r0
    3dde:	b1 1d       	adc	r27, r1
    3de0:	63 9f       	mul	r22, r19
    3de2:	aa 27       	eor	r26, r26
    3de4:	f0 0d       	add	r31, r0
    3de6:	b1 1d       	adc	r27, r1
    3de8:	aa 1f       	adc	r26, r26
    3dea:	64 9f       	mul	r22, r20
    3dec:	66 27       	eor	r22, r22
    3dee:	b0 0d       	add	r27, r0
    3df0:	a1 1d       	adc	r26, r1
    3df2:	66 1f       	adc	r22, r22
    3df4:	82 9f       	mul	r24, r18
    3df6:	22 27       	eor	r18, r18
    3df8:	b0 0d       	add	r27, r0
    3dfa:	a1 1d       	adc	r26, r1
    3dfc:	62 1f       	adc	r22, r18
    3dfe:	73 9f       	mul	r23, r19
    3e00:	b0 0d       	add	r27, r0
    3e02:	a1 1d       	adc	r26, r1
    3e04:	62 1f       	adc	r22, r18
    3e06:	83 9f       	mul	r24, r19
    3e08:	a0 0d       	add	r26, r0
    3e0a:	61 1d       	adc	r22, r1
    3e0c:	22 1f       	adc	r18, r18
    3e0e:	74 9f       	mul	r23, r20
    3e10:	33 27       	eor	r19, r19
    3e12:	a0 0d       	add	r26, r0
    3e14:	61 1d       	adc	r22, r1
    3e16:	23 1f       	adc	r18, r19
    3e18:	84 9f       	mul	r24, r20
    3e1a:	60 0d       	add	r22, r0
    3e1c:	21 1d       	adc	r18, r1
    3e1e:	82 2f       	mov	r24, r18
    3e20:	76 2f       	mov	r23, r22
    3e22:	6a 2f       	mov	r22, r26
    3e24:	11 24       	eor	r1, r1
    3e26:	9f 57       	subi	r25, 0x7F	; 127
    3e28:	50 40       	sbci	r21, 0x00	; 0
    3e2a:	8a f0       	brmi	.+34     	; 0x3e4e <__mulsf3_pse+0x84>
    3e2c:	e1 f0       	breq	.+56     	; 0x3e66 <__mulsf3_pse+0x9c>
    3e2e:	88 23       	and	r24, r24
    3e30:	4a f0       	brmi	.+18     	; 0x3e44 <__mulsf3_pse+0x7a>
    3e32:	ee 0f       	add	r30, r30
    3e34:	ff 1f       	adc	r31, r31
    3e36:	bb 1f       	adc	r27, r27
    3e38:	66 1f       	adc	r22, r22
    3e3a:	77 1f       	adc	r23, r23
    3e3c:	88 1f       	adc	r24, r24
    3e3e:	91 50       	subi	r25, 0x01	; 1
    3e40:	50 40       	sbci	r21, 0x00	; 0
    3e42:	a9 f7       	brne	.-22     	; 0x3e2e <__mulsf3_pse+0x64>
    3e44:	9e 3f       	cpi	r25, 0xFE	; 254
    3e46:	51 05       	cpc	r21, r1
    3e48:	70 f0       	brcs	.+28     	; 0x3e66 <__mulsf3_pse+0x9c>
    3e4a:	1b cf       	rjmp	.-458    	; 0x3c82 <__fp_inf>
    3e4c:	65 cf       	rjmp	.-310    	; 0x3d18 <__fp_szero>
    3e4e:	5f 3f       	cpi	r21, 0xFF	; 255
    3e50:	ec f3       	brlt	.-6      	; 0x3e4c <__mulsf3_pse+0x82>
    3e52:	98 3e       	cpi	r25, 0xE8	; 232
    3e54:	dc f3       	brlt	.-10     	; 0x3e4c <__mulsf3_pse+0x82>
    3e56:	86 95       	lsr	r24
    3e58:	77 95       	ror	r23
    3e5a:	67 95       	ror	r22
    3e5c:	b7 95       	ror	r27
    3e5e:	f7 95       	ror	r31
    3e60:	e7 95       	ror	r30
    3e62:	9f 5f       	subi	r25, 0xFF	; 255
    3e64:	c1 f7       	brne	.-16     	; 0x3e56 <__mulsf3_pse+0x8c>
    3e66:	fe 2b       	or	r31, r30
    3e68:	88 0f       	add	r24, r24
    3e6a:	91 1d       	adc	r25, r1
    3e6c:	96 95       	lsr	r25
    3e6e:	87 95       	ror	r24
    3e70:	97 f9       	bld	r25, 7
    3e72:	08 95       	ret

00003e74 <pow>:
    3e74:	fa 01       	movw	r30, r20
    3e76:	ee 0f       	add	r30, r30
    3e78:	ff 1f       	adc	r31, r31
    3e7a:	30 96       	adiw	r30, 0x00	; 0
    3e7c:	21 05       	cpc	r18, r1
    3e7e:	31 05       	cpc	r19, r1
    3e80:	99 f1       	breq	.+102    	; 0x3ee8 <pow+0x74>
    3e82:	61 15       	cp	r22, r1
    3e84:	71 05       	cpc	r23, r1
    3e86:	61 f4       	brne	.+24     	; 0x3ea0 <pow+0x2c>
    3e88:	80 38       	cpi	r24, 0x80	; 128
    3e8a:	bf e3       	ldi	r27, 0x3F	; 63
    3e8c:	9b 07       	cpc	r25, r27
    3e8e:	49 f1       	breq	.+82     	; 0x3ee2 <pow+0x6e>
    3e90:	68 94       	set
    3e92:	90 38       	cpi	r25, 0x80	; 128
    3e94:	81 05       	cpc	r24, r1
    3e96:	61 f0       	breq	.+24     	; 0x3eb0 <pow+0x3c>
    3e98:	80 38       	cpi	r24, 0x80	; 128
    3e9a:	bf ef       	ldi	r27, 0xFF	; 255
    3e9c:	9b 07       	cpc	r25, r27
    3e9e:	41 f0       	breq	.+16     	; 0x3eb0 <pow+0x3c>
    3ea0:	99 23       	and	r25, r25
    3ea2:	42 f5       	brpl	.+80     	; 0x3ef4 <pow+0x80>
    3ea4:	ff 3f       	cpi	r31, 0xFF	; 255
    3ea6:	e1 05       	cpc	r30, r1
    3ea8:	31 05       	cpc	r19, r1
    3eaa:	21 05       	cpc	r18, r1
    3eac:	11 f1       	breq	.+68     	; 0x3ef2 <pow+0x7e>
    3eae:	e8 94       	clt
    3eb0:	08 94       	sec
    3eb2:	e7 95       	ror	r30
    3eb4:	d9 01       	movw	r26, r18
    3eb6:	aa 23       	and	r26, r26
    3eb8:	29 f4       	brne	.+10     	; 0x3ec4 <pow+0x50>
    3eba:	ab 2f       	mov	r26, r27
    3ebc:	be 2f       	mov	r27, r30
    3ebe:	f8 5f       	subi	r31, 0xF8	; 248
    3ec0:	d0 f3       	brcs	.-12     	; 0x3eb6 <pow+0x42>
    3ec2:	10 c0       	rjmp	.+32     	; 0x3ee4 <pow+0x70>
    3ec4:	ff 5f       	subi	r31, 0xFF	; 255
    3ec6:	70 f4       	brcc	.+28     	; 0x3ee4 <pow+0x70>
    3ec8:	a6 95       	lsr	r26
    3eca:	e0 f7       	brcc	.-8      	; 0x3ec4 <pow+0x50>
    3ecc:	f7 39       	cpi	r31, 0x97	; 151
    3ece:	50 f0       	brcs	.+20     	; 0x3ee4 <pow+0x70>
    3ed0:	19 f0       	breq	.+6      	; 0x3ed8 <pow+0x64>
    3ed2:	ff 3a       	cpi	r31, 0xAF	; 175
    3ed4:	38 f4       	brcc	.+14     	; 0x3ee4 <pow+0x70>
    3ed6:	9f 77       	andi	r25, 0x7F	; 127
    3ed8:	9f 93       	push	r25
    3eda:	0c d0       	rcall	.+24     	; 0x3ef4 <pow+0x80>
    3edc:	0f 90       	pop	r0
    3ede:	07 fc       	sbrc	r0, 7
    3ee0:	90 58       	subi	r25, 0x80	; 128
    3ee2:	08 95       	ret
    3ee4:	3e f0       	brts	.+14     	; 0x3ef4 <pow+0x80>
    3ee6:	d3 ce       	rjmp	.-602    	; 0x3c8e <__fp_nan>
    3ee8:	60 e0       	ldi	r22, 0x00	; 0
    3eea:	70 e0       	ldi	r23, 0x00	; 0
    3eec:	80 e8       	ldi	r24, 0x80	; 128
    3eee:	9f e3       	ldi	r25, 0x3F	; 63
    3ef0:	08 95       	ret
    3ef2:	4f e7       	ldi	r20, 0x7F	; 127
    3ef4:	9f 77       	andi	r25, 0x7F	; 127
    3ef6:	5f 93       	push	r21
    3ef8:	4f 93       	push	r20
    3efa:	3f 93       	push	r19
    3efc:	2f 93       	push	r18
    3efe:	17 df       	rcall	.-466    	; 0x3d2e <log>
    3f00:	2f 91       	pop	r18
    3f02:	3f 91       	pop	r19
    3f04:	4f 91       	pop	r20
    3f06:	5f 91       	pop	r21
    3f08:	52 df       	rcall	.-348    	; 0x3dae <__mulsf3>
    3f0a:	05 c0       	rjmp	.+10     	; 0x3f16 <exp>
    3f0c:	19 f4       	brne	.+6      	; 0x3f14 <pow+0xa0>
    3f0e:	0e f0       	brts	.+2      	; 0x3f12 <pow+0x9e>
    3f10:	b8 ce       	rjmp	.-656    	; 0x3c82 <__fp_inf>
    3f12:	01 cf       	rjmp	.-510    	; 0x3d16 <__fp_zero>
    3f14:	bc ce       	rjmp	.-648    	; 0x3c8e <__fp_nan>

00003f16 <exp>:
    3f16:	e5 de       	rcall	.-566    	; 0x3ce2 <__fp_splitA>
    3f18:	c8 f3       	brcs	.-14     	; 0x3f0c <pow+0x98>
    3f1a:	96 38       	cpi	r25, 0x86	; 134
    3f1c:	c0 f7       	brcc	.-16     	; 0x3f0e <pow+0x9a>
    3f1e:	07 f8       	bld	r0, 7
    3f20:	0f 92       	push	r0
    3f22:	e8 94       	clt
    3f24:	2b e3       	ldi	r18, 0x3B	; 59
    3f26:	3a ea       	ldi	r19, 0xAA	; 170
    3f28:	48 eb       	ldi	r20, 0xB8	; 184
    3f2a:	5f e7       	ldi	r21, 0x7F	; 127
    3f2c:	4e df       	rcall	.-356    	; 0x3dca <__mulsf3_pse>
    3f2e:	0f 92       	push	r0
    3f30:	0f 92       	push	r0
    3f32:	0f 92       	push	r0
    3f34:	4d b7       	in	r20, 0x3d	; 61
    3f36:	5e b7       	in	r21, 0x3e	; 62
    3f38:	0f 92       	push	r0
    3f3a:	89 d0       	rcall	.+274    	; 0x404e <modf>
    3f3c:	e4 ed       	ldi	r30, 0xD4	; 212
    3f3e:	f2 e0       	ldi	r31, 0x02	; 2
    3f40:	24 d0       	rcall	.+72     	; 0x3f8a <__fp_powser>
    3f42:	4f 91       	pop	r20
    3f44:	5f 91       	pop	r21
    3f46:	ef 91       	pop	r30
    3f48:	ff 91       	pop	r31
    3f4a:	e5 95       	asr	r30
    3f4c:	ee 1f       	adc	r30, r30
    3f4e:	ff 1f       	adc	r31, r31
    3f50:	49 f0       	breq	.+18     	; 0x3f64 <exp+0x4e>
    3f52:	fe 57       	subi	r31, 0x7E	; 126
    3f54:	e0 68       	ori	r30, 0x80	; 128
    3f56:	44 27       	eor	r20, r20
    3f58:	ee 0f       	add	r30, r30
    3f5a:	44 1f       	adc	r20, r20
    3f5c:	fa 95       	dec	r31
    3f5e:	e1 f7       	brne	.-8      	; 0x3f58 <exp+0x42>
    3f60:	41 95       	neg	r20
    3f62:	55 0b       	sbc	r21, r21
    3f64:	40 d0       	rcall	.+128    	; 0x3fe6 <ldexp>
    3f66:	0f 90       	pop	r0
    3f68:	07 fe       	sbrs	r0, 7
    3f6a:	34 c0       	rjmp	.+104    	; 0x3fd4 <inverse>
    3f6c:	08 95       	ret

00003f6e <__fp_mpack>:
    3f6e:	9f 3f       	cpi	r25, 0xFF	; 255
    3f70:	31 f0       	breq	.+12     	; 0x3f7e <__fp_mpack_finite+0xc>

00003f72 <__fp_mpack_finite>:
    3f72:	91 50       	subi	r25, 0x01	; 1
    3f74:	20 f4       	brcc	.+8      	; 0x3f7e <__fp_mpack_finite+0xc>
    3f76:	87 95       	ror	r24
    3f78:	77 95       	ror	r23
    3f7a:	67 95       	ror	r22
    3f7c:	b7 95       	ror	r27
    3f7e:	88 0f       	add	r24, r24
    3f80:	91 1d       	adc	r25, r1
    3f82:	96 95       	lsr	r25
    3f84:	87 95       	ror	r24
    3f86:	97 f9       	bld	r25, 7
    3f88:	08 95       	ret

00003f8a <__fp_powser>:
    3f8a:	df 93       	push	r29
    3f8c:	cf 93       	push	r28
    3f8e:	1f 93       	push	r17
    3f90:	0f 93       	push	r16
    3f92:	ff 92       	push	r15
    3f94:	ef 92       	push	r14
    3f96:	df 92       	push	r13
    3f98:	7b 01       	movw	r14, r22
    3f9a:	8c 01       	movw	r16, r24
    3f9c:	68 94       	set
    3f9e:	05 c0       	rjmp	.+10     	; 0x3faa <__fp_powser+0x20>
    3fa0:	da 2e       	mov	r13, r26
    3fa2:	ef 01       	movw	r28, r30
    3fa4:	10 df       	rcall	.-480    	; 0x3dc6 <__mulsf3x>
    3fa6:	fe 01       	movw	r30, r28
    3fa8:	e8 94       	clt
    3faa:	a5 91       	lpm	r26, Z+
    3fac:	25 91       	lpm	r18, Z+
    3fae:	35 91       	lpm	r19, Z+
    3fb0:	45 91       	lpm	r20, Z+
    3fb2:	55 91       	lpm	r21, Z+
    3fb4:	ae f3       	brts	.-22     	; 0x3fa0 <__fp_powser+0x16>
    3fb6:	ef 01       	movw	r28, r30
    3fb8:	3b dd       	rcall	.-1418   	; 0x3a30 <__addsf3x>
    3fba:	fe 01       	movw	r30, r28
    3fbc:	97 01       	movw	r18, r14
    3fbe:	a8 01       	movw	r20, r16
    3fc0:	da 94       	dec	r13
    3fc2:	79 f7       	brne	.-34     	; 0x3fa2 <__fp_powser+0x18>
    3fc4:	df 90       	pop	r13
    3fc6:	ef 90       	pop	r14
    3fc8:	ff 90       	pop	r15
    3fca:	0f 91       	pop	r16
    3fcc:	1f 91       	pop	r17
    3fce:	cf 91       	pop	r28
    3fd0:	df 91       	pop	r29
    3fd2:	08 95       	ret

00003fd4 <inverse>:
    3fd4:	9b 01       	movw	r18, r22
    3fd6:	ac 01       	movw	r20, r24
    3fd8:	60 e0       	ldi	r22, 0x00	; 0
    3fda:	70 e0       	ldi	r23, 0x00	; 0
    3fdc:	80 e8       	ldi	r24, 0x80	; 128
    3fde:	9f e3       	ldi	r25, 0x3F	; 63
    3fe0:	7a cd       	rjmp	.-1292   	; 0x3ad6 <__divsf3>
    3fe2:	4f ce       	rjmp	.-866    	; 0x3c82 <__fp_inf>
    3fe4:	c4 cf       	rjmp	.-120    	; 0x3f6e <__fp_mpack>

00003fe6 <ldexp>:
    3fe6:	7d de       	rcall	.-774    	; 0x3ce2 <__fp_splitA>
    3fe8:	e8 f3       	brcs	.-6      	; 0x3fe4 <inverse+0x10>
    3fea:	99 23       	and	r25, r25
    3fec:	d9 f3       	breq	.-10     	; 0x3fe4 <inverse+0x10>
    3fee:	94 0f       	add	r25, r20
    3ff0:	51 1d       	adc	r21, r1
    3ff2:	bb f3       	brvs	.-18     	; 0x3fe2 <inverse+0xe>
    3ff4:	91 50       	subi	r25, 0x01	; 1
    3ff6:	50 40       	sbci	r21, 0x00	; 0
    3ff8:	94 f0       	brlt	.+36     	; 0x401e <__stack+0x1f>
    3ffa:	59 f0       	breq	.+22     	; 0x4012 <__stack+0x13>
    3ffc:	88 23       	and	r24, r24
    3ffe:	32 f0       	brmi	.+12     	; 0x400c <__stack+0xd>
    4000:	66 0f       	add	r22, r22
    4002:	77 1f       	adc	r23, r23
    4004:	88 1f       	adc	r24, r24
    4006:	91 50       	subi	r25, 0x01	; 1
    4008:	50 40       	sbci	r21, 0x00	; 0
    400a:	c1 f7       	brne	.-16     	; 0x3ffc <ldexp+0x16>
    400c:	9e 3f       	cpi	r25, 0xFE	; 254
    400e:	51 05       	cpc	r21, r1
    4010:	44 f7       	brge	.-48     	; 0x3fe2 <inverse+0xe>
    4012:	88 0f       	add	r24, r24
    4014:	91 1d       	adc	r25, r1
    4016:	96 95       	lsr	r25
    4018:	87 95       	ror	r24
    401a:	97 f9       	bld	r25, 7
    401c:	08 95       	ret
    401e:	5f 3f       	cpi	r21, 0xFF	; 255
    4020:	ac f0       	brlt	.+42     	; 0x404c <__stack+0x4d>
    4022:	98 3e       	cpi	r25, 0xE8	; 232
    4024:	9c f0       	brlt	.+38     	; 0x404c <__stack+0x4d>
    4026:	bb 27       	eor	r27, r27
    4028:	86 95       	lsr	r24
    402a:	77 95       	ror	r23
    402c:	67 95       	ror	r22
    402e:	b7 95       	ror	r27
    4030:	08 f4       	brcc	.+2      	; 0x4034 <__stack+0x35>
    4032:	b1 60       	ori	r27, 0x01	; 1
    4034:	93 95       	inc	r25
    4036:	c1 f7       	brne	.-16     	; 0x4028 <__stack+0x29>
    4038:	bb 0f       	add	r27, r27
    403a:	58 f7       	brcc	.-42     	; 0x4012 <__stack+0x13>
    403c:	11 f4       	brne	.+4      	; 0x4042 <__stack+0x43>
    403e:	60 ff       	sbrs	r22, 0
    4040:	e8 cf       	rjmp	.-48     	; 0x4012 <__stack+0x13>
    4042:	6f 5f       	subi	r22, 0xFF	; 255
    4044:	7f 4f       	sbci	r23, 0xFF	; 255
    4046:	8f 4f       	sbci	r24, 0xFF	; 255
    4048:	9f 4f       	sbci	r25, 0xFF	; 255
    404a:	e3 cf       	rjmp	.-58     	; 0x4012 <__stack+0x13>
    404c:	65 ce       	rjmp	.-822    	; 0x3d18 <__fp_szero>

0000404e <modf>:
    404e:	fa 01       	movw	r30, r20
    4050:	dc 01       	movw	r26, r24
    4052:	aa 0f       	add	r26, r26
    4054:	bb 1f       	adc	r27, r27
    4056:	9b 01       	movw	r18, r22
    4058:	ac 01       	movw	r20, r24
    405a:	bf 57       	subi	r27, 0x7F	; 127
    405c:	28 f4       	brcc	.+10     	; 0x4068 <modf+0x1a>
    405e:	22 27       	eor	r18, r18
    4060:	33 27       	eor	r19, r19
    4062:	44 27       	eor	r20, r20
    4064:	50 78       	andi	r21, 0x80	; 128
    4066:	1f c0       	rjmp	.+62     	; 0x40a6 <modf+0x58>
    4068:	b7 51       	subi	r27, 0x17	; 23
    406a:	88 f4       	brcc	.+34     	; 0x408e <modf+0x40>
    406c:	ab 2f       	mov	r26, r27
    406e:	00 24       	eor	r0, r0
    4070:	46 95       	lsr	r20
    4072:	37 95       	ror	r19
    4074:	27 95       	ror	r18
    4076:	01 1c       	adc	r0, r1
    4078:	a3 95       	inc	r26
    407a:	d2 f3       	brmi	.-12     	; 0x4070 <modf+0x22>
    407c:	00 20       	and	r0, r0
    407e:	69 f0       	breq	.+26     	; 0x409a <modf+0x4c>
    4080:	22 0f       	add	r18, r18
    4082:	33 1f       	adc	r19, r19
    4084:	44 1f       	adc	r20, r20
    4086:	b3 95       	inc	r27
    4088:	da f3       	brmi	.-10     	; 0x4080 <modf+0x32>
    408a:	0d d0       	rcall	.+26     	; 0x40a6 <modf+0x58>
    408c:	bf cc       	rjmp	.-1666   	; 0x3a0c <__subsf3>
    408e:	61 30       	cpi	r22, 0x01	; 1
    4090:	71 05       	cpc	r23, r1
    4092:	a0 e8       	ldi	r26, 0x80	; 128
    4094:	8a 07       	cpc	r24, r26
    4096:	b9 46       	sbci	r27, 0x69	; 105
    4098:	30 f4       	brcc	.+12     	; 0x40a6 <modf+0x58>
    409a:	9b 01       	movw	r18, r22
    409c:	ac 01       	movw	r20, r24
    409e:	66 27       	eor	r22, r22
    40a0:	77 27       	eor	r23, r23
    40a2:	88 27       	eor	r24, r24
    40a4:	90 78       	andi	r25, 0x80	; 128
    40a6:	30 96       	adiw	r30, 0x00	; 0
    40a8:	21 f0       	breq	.+8      	; 0x40b2 <modf+0x64>
    40aa:	20 83       	st	Z, r18
    40ac:	31 83       	std	Z+1, r19	; 0x01
    40ae:	42 83       	std	Z+2, r20	; 0x02
    40b0:	53 83       	std	Z+3, r21	; 0x03
    40b2:	08 95       	ret

000040b4 <vfprintf>:
    40b4:	2f 92       	push	r2
    40b6:	3f 92       	push	r3
    40b8:	4f 92       	push	r4
    40ba:	5f 92       	push	r5
    40bc:	6f 92       	push	r6
    40be:	7f 92       	push	r7
    40c0:	8f 92       	push	r8
    40c2:	9f 92       	push	r9
    40c4:	af 92       	push	r10
    40c6:	bf 92       	push	r11
    40c8:	cf 92       	push	r12
    40ca:	df 92       	push	r13
    40cc:	ef 92       	push	r14
    40ce:	ff 92       	push	r15
    40d0:	0f 93       	push	r16
    40d2:	1f 93       	push	r17
    40d4:	cf 93       	push	r28
    40d6:	df 93       	push	r29
    40d8:	cd b7       	in	r28, 0x3d	; 61
    40da:	de b7       	in	r29, 0x3e	; 62
    40dc:	60 97       	sbiw	r28, 0x10	; 16
    40de:	cd bf       	out	0x3d, r28	; 61
    40e0:	de bf       	out	0x3e, r29	; 62
    40e2:	7c 01       	movw	r14, r24
    40e4:	1b 01       	movw	r2, r22
    40e6:	6a 01       	movw	r12, r20
    40e8:	fc 01       	movw	r30, r24
    40ea:	16 82       	std	Z+6, r1	; 0x06
    40ec:	17 82       	std	Z+7, r1	; 0x07
    40ee:	83 81       	ldd	r24, Z+3	; 0x03
    40f0:	81 ff       	sbrs	r24, 1
    40f2:	2a c3       	rjmp	.+1620   	; 0x4748 <vfprintf+0x694>
    40f4:	9e 01       	movw	r18, r28
    40f6:	2f 5f       	subi	r18, 0xFF	; 255
    40f8:	3f 4f       	sbci	r19, 0xFF	; 255
    40fa:	39 01       	movw	r6, r18
    40fc:	f7 01       	movw	r30, r14
    40fe:	93 81       	ldd	r25, Z+3	; 0x03
    4100:	f1 01       	movw	r30, r2
    4102:	93 fd       	sbrc	r25, 3
    4104:	85 91       	lpm	r24, Z+
    4106:	93 ff       	sbrs	r25, 3
    4108:	81 91       	ld	r24, Z+
    410a:	1f 01       	movw	r2, r30
    410c:	88 23       	and	r24, r24
    410e:	09 f4       	brne	.+2      	; 0x4112 <vfprintf+0x5e>
    4110:	17 c3       	rjmp	.+1582   	; 0x4740 <vfprintf+0x68c>
    4112:	85 32       	cpi	r24, 0x25	; 37
    4114:	39 f4       	brne	.+14     	; 0x4124 <vfprintf+0x70>
    4116:	93 fd       	sbrc	r25, 3
    4118:	85 91       	lpm	r24, Z+
    411a:	93 ff       	sbrs	r25, 3
    411c:	81 91       	ld	r24, Z+
    411e:	1f 01       	movw	r2, r30
    4120:	85 32       	cpi	r24, 0x25	; 37
    4122:	31 f4       	brne	.+12     	; 0x4130 <vfprintf+0x7c>
    4124:	b7 01       	movw	r22, r14
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	b2 d5       	rcall	.+2916   	; 0x4c8e <fputc>
    412a:	56 01       	movw	r10, r12
    412c:	65 01       	movw	r12, r10
    412e:	e6 cf       	rjmp	.-52     	; 0x40fc <vfprintf+0x48>
    4130:	10 e0       	ldi	r17, 0x00	; 0
    4132:	51 2c       	mov	r5, r1
    4134:	91 2c       	mov	r9, r1
    4136:	ff e1       	ldi	r31, 0x1F	; 31
    4138:	f9 15       	cp	r31, r9
    413a:	d8 f0       	brcs	.+54     	; 0x4172 <vfprintf+0xbe>
    413c:	8b 32       	cpi	r24, 0x2B	; 43
    413e:	79 f0       	breq	.+30     	; 0x415e <vfprintf+0xaa>
    4140:	38 f4       	brcc	.+14     	; 0x4150 <vfprintf+0x9c>
    4142:	80 32       	cpi	r24, 0x20	; 32
    4144:	79 f0       	breq	.+30     	; 0x4164 <vfprintf+0xb0>
    4146:	83 32       	cpi	r24, 0x23	; 35
    4148:	a1 f4       	brne	.+40     	; 0x4172 <vfprintf+0xbe>
    414a:	f9 2d       	mov	r31, r9
    414c:	f0 61       	ori	r31, 0x10	; 16
    414e:	2e c0       	rjmp	.+92     	; 0x41ac <vfprintf+0xf8>
    4150:	8d 32       	cpi	r24, 0x2D	; 45
    4152:	61 f0       	breq	.+24     	; 0x416c <vfprintf+0xb8>
    4154:	80 33       	cpi	r24, 0x30	; 48
    4156:	69 f4       	brne	.+26     	; 0x4172 <vfprintf+0xbe>
    4158:	29 2d       	mov	r18, r9
    415a:	21 60       	ori	r18, 0x01	; 1
    415c:	2d c0       	rjmp	.+90     	; 0x41b8 <vfprintf+0x104>
    415e:	39 2d       	mov	r19, r9
    4160:	32 60       	ori	r19, 0x02	; 2
    4162:	93 2e       	mov	r9, r19
    4164:	89 2d       	mov	r24, r9
    4166:	84 60       	ori	r24, 0x04	; 4
    4168:	98 2e       	mov	r9, r24
    416a:	2a c0       	rjmp	.+84     	; 0x41c0 <vfprintf+0x10c>
    416c:	e9 2d       	mov	r30, r9
    416e:	e8 60       	ori	r30, 0x08	; 8
    4170:	15 c0       	rjmp	.+42     	; 0x419c <vfprintf+0xe8>
    4172:	97 fc       	sbrc	r9, 7
    4174:	2d c0       	rjmp	.+90     	; 0x41d0 <vfprintf+0x11c>
    4176:	20 ed       	ldi	r18, 0xD0	; 208
    4178:	28 0f       	add	r18, r24
    417a:	2a 30       	cpi	r18, 0x0A	; 10
    417c:	88 f4       	brcc	.+34     	; 0x41a0 <vfprintf+0xec>
    417e:	96 fe       	sbrs	r9, 6
    4180:	06 c0       	rjmp	.+12     	; 0x418e <vfprintf+0xda>
    4182:	3a e0       	ldi	r19, 0x0A	; 10
    4184:	13 9f       	mul	r17, r19
    4186:	20 0d       	add	r18, r0
    4188:	11 24       	eor	r1, r1
    418a:	12 2f       	mov	r17, r18
    418c:	19 c0       	rjmp	.+50     	; 0x41c0 <vfprintf+0x10c>
    418e:	8a e0       	ldi	r24, 0x0A	; 10
    4190:	58 9e       	mul	r5, r24
    4192:	20 0d       	add	r18, r0
    4194:	11 24       	eor	r1, r1
    4196:	52 2e       	mov	r5, r18
    4198:	e9 2d       	mov	r30, r9
    419a:	e0 62       	ori	r30, 0x20	; 32
    419c:	9e 2e       	mov	r9, r30
    419e:	10 c0       	rjmp	.+32     	; 0x41c0 <vfprintf+0x10c>
    41a0:	8e 32       	cpi	r24, 0x2E	; 46
    41a2:	31 f4       	brne	.+12     	; 0x41b0 <vfprintf+0xfc>
    41a4:	96 fc       	sbrc	r9, 6
    41a6:	cc c2       	rjmp	.+1432   	; 0x4740 <vfprintf+0x68c>
    41a8:	f9 2d       	mov	r31, r9
    41aa:	f0 64       	ori	r31, 0x40	; 64
    41ac:	9f 2e       	mov	r9, r31
    41ae:	08 c0       	rjmp	.+16     	; 0x41c0 <vfprintf+0x10c>
    41b0:	8c 36       	cpi	r24, 0x6C	; 108
    41b2:	21 f4       	brne	.+8      	; 0x41bc <vfprintf+0x108>
    41b4:	29 2d       	mov	r18, r9
    41b6:	20 68       	ori	r18, 0x80	; 128
    41b8:	92 2e       	mov	r9, r18
    41ba:	02 c0       	rjmp	.+4      	; 0x41c0 <vfprintf+0x10c>
    41bc:	88 36       	cpi	r24, 0x68	; 104
    41be:	41 f4       	brne	.+16     	; 0x41d0 <vfprintf+0x11c>
    41c0:	f1 01       	movw	r30, r2
    41c2:	93 fd       	sbrc	r25, 3
    41c4:	85 91       	lpm	r24, Z+
    41c6:	93 ff       	sbrs	r25, 3
    41c8:	81 91       	ld	r24, Z+
    41ca:	1f 01       	movw	r2, r30
    41cc:	81 11       	cpse	r24, r1
    41ce:	b3 cf       	rjmp	.-154    	; 0x4136 <vfprintf+0x82>
    41d0:	9b eb       	ldi	r25, 0xBB	; 187
    41d2:	98 0f       	add	r25, r24
    41d4:	93 30       	cpi	r25, 0x03	; 3
    41d6:	20 f4       	brcc	.+8      	; 0x41e0 <vfprintf+0x12c>
    41d8:	99 2d       	mov	r25, r9
    41da:	90 61       	ori	r25, 0x10	; 16
    41dc:	80 5e       	subi	r24, 0xE0	; 224
    41de:	07 c0       	rjmp	.+14     	; 0x41ee <vfprintf+0x13a>
    41e0:	9b e9       	ldi	r25, 0x9B	; 155
    41e2:	98 0f       	add	r25, r24
    41e4:	93 30       	cpi	r25, 0x03	; 3
    41e6:	08 f0       	brcs	.+2      	; 0x41ea <vfprintf+0x136>
    41e8:	59 c1       	rjmp	.+690    	; 0x449c <vfprintf+0x3e8>
    41ea:	99 2d       	mov	r25, r9
    41ec:	9f 7e       	andi	r25, 0xEF	; 239
    41ee:	96 ff       	sbrs	r25, 6
    41f0:	16 e0       	ldi	r17, 0x06	; 6
    41f2:	9f 73       	andi	r25, 0x3F	; 63
    41f4:	99 2e       	mov	r9, r25
    41f6:	85 36       	cpi	r24, 0x65	; 101
    41f8:	19 f4       	brne	.+6      	; 0x4200 <vfprintf+0x14c>
    41fa:	90 64       	ori	r25, 0x40	; 64
    41fc:	99 2e       	mov	r9, r25
    41fe:	08 c0       	rjmp	.+16     	; 0x4210 <vfprintf+0x15c>
    4200:	86 36       	cpi	r24, 0x66	; 102
    4202:	21 f4       	brne	.+8      	; 0x420c <vfprintf+0x158>
    4204:	39 2f       	mov	r19, r25
    4206:	30 68       	ori	r19, 0x80	; 128
    4208:	93 2e       	mov	r9, r19
    420a:	02 c0       	rjmp	.+4      	; 0x4210 <vfprintf+0x15c>
    420c:	11 11       	cpse	r17, r1
    420e:	11 50       	subi	r17, 0x01	; 1
    4210:	97 fe       	sbrs	r9, 7
    4212:	07 c0       	rjmp	.+14     	; 0x4222 <vfprintf+0x16e>
    4214:	1c 33       	cpi	r17, 0x3C	; 60
    4216:	50 f4       	brcc	.+20     	; 0x422c <vfprintf+0x178>
    4218:	44 24       	eor	r4, r4
    421a:	43 94       	inc	r4
    421c:	41 0e       	add	r4, r17
    421e:	27 e0       	ldi	r18, 0x07	; 7
    4220:	0b c0       	rjmp	.+22     	; 0x4238 <vfprintf+0x184>
    4222:	18 30       	cpi	r17, 0x08	; 8
    4224:	38 f0       	brcs	.+14     	; 0x4234 <vfprintf+0x180>
    4226:	27 e0       	ldi	r18, 0x07	; 7
    4228:	17 e0       	ldi	r17, 0x07	; 7
    422a:	05 c0       	rjmp	.+10     	; 0x4236 <vfprintf+0x182>
    422c:	27 e0       	ldi	r18, 0x07	; 7
    422e:	9c e3       	ldi	r25, 0x3C	; 60
    4230:	49 2e       	mov	r4, r25
    4232:	02 c0       	rjmp	.+4      	; 0x4238 <vfprintf+0x184>
    4234:	21 2f       	mov	r18, r17
    4236:	41 2c       	mov	r4, r1
    4238:	56 01       	movw	r10, r12
    423a:	84 e0       	ldi	r24, 0x04	; 4
    423c:	a8 0e       	add	r10, r24
    423e:	b1 1c       	adc	r11, r1
    4240:	f6 01       	movw	r30, r12
    4242:	60 81       	ld	r22, Z
    4244:	71 81       	ldd	r23, Z+1	; 0x01
    4246:	82 81       	ldd	r24, Z+2	; 0x02
    4248:	93 81       	ldd	r25, Z+3	; 0x03
    424a:	04 2d       	mov	r16, r4
    424c:	a3 01       	movw	r20, r6
    424e:	e7 d3       	rcall	.+1998   	; 0x4a1e <__ftoa_engine>
    4250:	6c 01       	movw	r12, r24
    4252:	f9 81       	ldd	r31, Y+1	; 0x01
    4254:	fc 87       	std	Y+12, r31	; 0x0c
    4256:	f0 ff       	sbrs	r31, 0
    4258:	02 c0       	rjmp	.+4      	; 0x425e <vfprintf+0x1aa>
    425a:	f3 ff       	sbrs	r31, 3
    425c:	06 c0       	rjmp	.+12     	; 0x426a <vfprintf+0x1b6>
    425e:	91 fc       	sbrc	r9, 1
    4260:	06 c0       	rjmp	.+12     	; 0x426e <vfprintf+0x1ba>
    4262:	92 fe       	sbrs	r9, 2
    4264:	06 c0       	rjmp	.+12     	; 0x4272 <vfprintf+0x1be>
    4266:	00 e2       	ldi	r16, 0x20	; 32
    4268:	05 c0       	rjmp	.+10     	; 0x4274 <vfprintf+0x1c0>
    426a:	0d e2       	ldi	r16, 0x2D	; 45
    426c:	03 c0       	rjmp	.+6      	; 0x4274 <vfprintf+0x1c0>
    426e:	0b e2       	ldi	r16, 0x2B	; 43
    4270:	01 c0       	rjmp	.+2      	; 0x4274 <vfprintf+0x1c0>
    4272:	00 e0       	ldi	r16, 0x00	; 0
    4274:	8c 85       	ldd	r24, Y+12	; 0x0c
    4276:	8c 70       	andi	r24, 0x0C	; 12
    4278:	19 f0       	breq	.+6      	; 0x4280 <vfprintf+0x1cc>
    427a:	01 11       	cpse	r16, r1
    427c:	43 c2       	rjmp	.+1158   	; 0x4704 <vfprintf+0x650>
    427e:	80 c2       	rjmp	.+1280   	; 0x4780 <vfprintf+0x6cc>
    4280:	97 fe       	sbrs	r9, 7
    4282:	10 c0       	rjmp	.+32     	; 0x42a4 <vfprintf+0x1f0>
    4284:	4c 0c       	add	r4, r12
    4286:	fc 85       	ldd	r31, Y+12	; 0x0c
    4288:	f4 ff       	sbrs	r31, 4
    428a:	04 c0       	rjmp	.+8      	; 0x4294 <vfprintf+0x1e0>
    428c:	8a 81       	ldd	r24, Y+2	; 0x02
    428e:	81 33       	cpi	r24, 0x31	; 49
    4290:	09 f4       	brne	.+2      	; 0x4294 <vfprintf+0x1e0>
    4292:	4a 94       	dec	r4
    4294:	14 14       	cp	r1, r4
    4296:	74 f5       	brge	.+92     	; 0x42f4 <vfprintf+0x240>
    4298:	28 e0       	ldi	r18, 0x08	; 8
    429a:	24 15       	cp	r18, r4
    429c:	78 f5       	brcc	.+94     	; 0x42fc <vfprintf+0x248>
    429e:	88 e0       	ldi	r24, 0x08	; 8
    42a0:	48 2e       	mov	r4, r24
    42a2:	2c c0       	rjmp	.+88     	; 0x42fc <vfprintf+0x248>
    42a4:	96 fc       	sbrc	r9, 6
    42a6:	2a c0       	rjmp	.+84     	; 0x42fc <vfprintf+0x248>
    42a8:	81 2f       	mov	r24, r17
    42aa:	90 e0       	ldi	r25, 0x00	; 0
    42ac:	8c 15       	cp	r24, r12
    42ae:	9d 05       	cpc	r25, r13
    42b0:	9c f0       	brlt	.+38     	; 0x42d8 <vfprintf+0x224>
    42b2:	3c ef       	ldi	r19, 0xFC	; 252
    42b4:	c3 16       	cp	r12, r19
    42b6:	3f ef       	ldi	r19, 0xFF	; 255
    42b8:	d3 06       	cpc	r13, r19
    42ba:	74 f0       	brlt	.+28     	; 0x42d8 <vfprintf+0x224>
    42bc:	89 2d       	mov	r24, r9
    42be:	80 68       	ori	r24, 0x80	; 128
    42c0:	98 2e       	mov	r9, r24
    42c2:	0a c0       	rjmp	.+20     	; 0x42d8 <vfprintf+0x224>
    42c4:	e2 e0       	ldi	r30, 0x02	; 2
    42c6:	f0 e0       	ldi	r31, 0x00	; 0
    42c8:	ec 0f       	add	r30, r28
    42ca:	fd 1f       	adc	r31, r29
    42cc:	e1 0f       	add	r30, r17
    42ce:	f1 1d       	adc	r31, r1
    42d0:	80 81       	ld	r24, Z
    42d2:	80 33       	cpi	r24, 0x30	; 48
    42d4:	19 f4       	brne	.+6      	; 0x42dc <vfprintf+0x228>
    42d6:	11 50       	subi	r17, 0x01	; 1
    42d8:	11 11       	cpse	r17, r1
    42da:	f4 cf       	rjmp	.-24     	; 0x42c4 <vfprintf+0x210>
    42dc:	97 fe       	sbrs	r9, 7
    42de:	0e c0       	rjmp	.+28     	; 0x42fc <vfprintf+0x248>
    42e0:	44 24       	eor	r4, r4
    42e2:	43 94       	inc	r4
    42e4:	41 0e       	add	r4, r17
    42e6:	81 2f       	mov	r24, r17
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	c8 16       	cp	r12, r24
    42ec:	d9 06       	cpc	r13, r25
    42ee:	2c f4       	brge	.+10     	; 0x42fa <vfprintf+0x246>
    42f0:	1c 19       	sub	r17, r12
    42f2:	04 c0       	rjmp	.+8      	; 0x42fc <vfprintf+0x248>
    42f4:	44 24       	eor	r4, r4
    42f6:	43 94       	inc	r4
    42f8:	01 c0       	rjmp	.+2      	; 0x42fc <vfprintf+0x248>
    42fa:	10 e0       	ldi	r17, 0x00	; 0
    42fc:	97 fe       	sbrs	r9, 7
    42fe:	06 c0       	rjmp	.+12     	; 0x430c <vfprintf+0x258>
    4300:	1c 14       	cp	r1, r12
    4302:	1d 04       	cpc	r1, r13
    4304:	34 f4       	brge	.+12     	; 0x4312 <vfprintf+0x25e>
    4306:	c6 01       	movw	r24, r12
    4308:	01 96       	adiw	r24, 0x01	; 1
    430a:	05 c0       	rjmp	.+10     	; 0x4316 <vfprintf+0x262>
    430c:	85 e0       	ldi	r24, 0x05	; 5
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	02 c0       	rjmp	.+4      	; 0x4316 <vfprintf+0x262>
    4312:	81 e0       	ldi	r24, 0x01	; 1
    4314:	90 e0       	ldi	r25, 0x00	; 0
    4316:	01 11       	cpse	r16, r1
    4318:	01 96       	adiw	r24, 0x01	; 1
    431a:	11 23       	and	r17, r17
    431c:	31 f0       	breq	.+12     	; 0x432a <vfprintf+0x276>
    431e:	21 2f       	mov	r18, r17
    4320:	30 e0       	ldi	r19, 0x00	; 0
    4322:	2f 5f       	subi	r18, 0xFF	; 255
    4324:	3f 4f       	sbci	r19, 0xFF	; 255
    4326:	82 0f       	add	r24, r18
    4328:	93 1f       	adc	r25, r19
    432a:	25 2d       	mov	r18, r5
    432c:	30 e0       	ldi	r19, 0x00	; 0
    432e:	82 17       	cp	r24, r18
    4330:	93 07       	cpc	r25, r19
    4332:	14 f4       	brge	.+4      	; 0x4338 <vfprintf+0x284>
    4334:	58 1a       	sub	r5, r24
    4336:	01 c0       	rjmp	.+2      	; 0x433a <vfprintf+0x286>
    4338:	51 2c       	mov	r5, r1
    433a:	89 2d       	mov	r24, r9
    433c:	89 70       	andi	r24, 0x09	; 9
    433e:	41 f4       	brne	.+16     	; 0x4350 <vfprintf+0x29c>
    4340:	55 20       	and	r5, r5
    4342:	31 f0       	breq	.+12     	; 0x4350 <vfprintf+0x29c>
    4344:	b7 01       	movw	r22, r14
    4346:	80 e2       	ldi	r24, 0x20	; 32
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	a1 d4       	rcall	.+2370   	; 0x4c8e <fputc>
    434c:	5a 94       	dec	r5
    434e:	f8 cf       	rjmp	.-16     	; 0x4340 <vfprintf+0x28c>
    4350:	00 23       	and	r16, r16
    4352:	21 f0       	breq	.+8      	; 0x435c <vfprintf+0x2a8>
    4354:	b7 01       	movw	r22, r14
    4356:	80 2f       	mov	r24, r16
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	99 d4       	rcall	.+2354   	; 0x4c8e <fputc>
    435c:	93 fc       	sbrc	r9, 3
    435e:	08 c0       	rjmp	.+16     	; 0x4370 <vfprintf+0x2bc>
    4360:	55 20       	and	r5, r5
    4362:	31 f0       	breq	.+12     	; 0x4370 <vfprintf+0x2bc>
    4364:	b7 01       	movw	r22, r14
    4366:	80 e3       	ldi	r24, 0x30	; 48
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	91 d4       	rcall	.+2338   	; 0x4c8e <fputc>
    436c:	5a 94       	dec	r5
    436e:	f8 cf       	rjmp	.-16     	; 0x4360 <vfprintf+0x2ac>
    4370:	97 fe       	sbrs	r9, 7
    4372:	4a c0       	rjmp	.+148    	; 0x4408 <vfprintf+0x354>
    4374:	46 01       	movw	r8, r12
    4376:	d7 fe       	sbrs	r13, 7
    4378:	02 c0       	rjmp	.+4      	; 0x437e <vfprintf+0x2ca>
    437a:	81 2c       	mov	r8, r1
    437c:	91 2c       	mov	r9, r1
    437e:	c6 01       	movw	r24, r12
    4380:	88 19       	sub	r24, r8
    4382:	99 09       	sbc	r25, r9
    4384:	f3 01       	movw	r30, r6
    4386:	e8 0f       	add	r30, r24
    4388:	f9 1f       	adc	r31, r25
    438a:	ed 87       	std	Y+13, r30	; 0x0d
    438c:	fe 87       	std	Y+14, r31	; 0x0e
    438e:	96 01       	movw	r18, r12
    4390:	24 19       	sub	r18, r4
    4392:	31 09       	sbc	r19, r1
    4394:	2f 87       	std	Y+15, r18	; 0x0f
    4396:	38 8b       	std	Y+16, r19	; 0x10
    4398:	01 2f       	mov	r16, r17
    439a:	10 e0       	ldi	r17, 0x00	; 0
    439c:	11 95       	neg	r17
    439e:	01 95       	neg	r16
    43a0:	11 09       	sbc	r17, r1
    43a2:	3f ef       	ldi	r19, 0xFF	; 255
    43a4:	83 16       	cp	r8, r19
    43a6:	93 06       	cpc	r9, r19
    43a8:	21 f4       	brne	.+8      	; 0x43b2 <vfprintf+0x2fe>
    43aa:	b7 01       	movw	r22, r14
    43ac:	8e e2       	ldi	r24, 0x2E	; 46
    43ae:	90 e0       	ldi	r25, 0x00	; 0
    43b0:	6e d4       	rcall	.+2268   	; 0x4c8e <fputc>
    43b2:	c8 14       	cp	r12, r8
    43b4:	d9 04       	cpc	r13, r9
    43b6:	4c f0       	brlt	.+18     	; 0x43ca <vfprintf+0x316>
    43b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    43ba:	98 89       	ldd	r25, Y+16	; 0x10
    43bc:	88 15       	cp	r24, r8
    43be:	99 05       	cpc	r25, r9
    43c0:	24 f4       	brge	.+8      	; 0x43ca <vfprintf+0x316>
    43c2:	ed 85       	ldd	r30, Y+13	; 0x0d
    43c4:	fe 85       	ldd	r31, Y+14	; 0x0e
    43c6:	81 81       	ldd	r24, Z+1	; 0x01
    43c8:	01 c0       	rjmp	.+2      	; 0x43cc <vfprintf+0x318>
    43ca:	80 e3       	ldi	r24, 0x30	; 48
    43cc:	f1 e0       	ldi	r31, 0x01	; 1
    43ce:	8f 1a       	sub	r8, r31
    43d0:	91 08       	sbc	r9, r1
    43d2:	2d 85       	ldd	r18, Y+13	; 0x0d
    43d4:	3e 85       	ldd	r19, Y+14	; 0x0e
    43d6:	2f 5f       	subi	r18, 0xFF	; 255
    43d8:	3f 4f       	sbci	r19, 0xFF	; 255
    43da:	2d 87       	std	Y+13, r18	; 0x0d
    43dc:	3e 87       	std	Y+14, r19	; 0x0e
    43de:	80 16       	cp	r8, r16
    43e0:	91 06       	cpc	r9, r17
    43e2:	24 f0       	brlt	.+8      	; 0x43ec <vfprintf+0x338>
    43e4:	b7 01       	movw	r22, r14
    43e6:	90 e0       	ldi	r25, 0x00	; 0
    43e8:	52 d4       	rcall	.+2212   	; 0x4c8e <fputc>
    43ea:	db cf       	rjmp	.-74     	; 0x43a2 <vfprintf+0x2ee>
    43ec:	c8 14       	cp	r12, r8
    43ee:	d9 04       	cpc	r13, r9
    43f0:	41 f4       	brne	.+16     	; 0x4402 <vfprintf+0x34e>
    43f2:	9a 81       	ldd	r25, Y+2	; 0x02
    43f4:	96 33       	cpi	r25, 0x36	; 54
    43f6:	20 f4       	brcc	.+8      	; 0x4400 <vfprintf+0x34c>
    43f8:	95 33       	cpi	r25, 0x35	; 53
    43fa:	19 f4       	brne	.+6      	; 0x4402 <vfprintf+0x34e>
    43fc:	3c 85       	ldd	r19, Y+12	; 0x0c
    43fe:	34 ff       	sbrs	r19, 4
    4400:	81 e3       	ldi	r24, 0x31	; 49
    4402:	b7 01       	movw	r22, r14
    4404:	90 e0       	ldi	r25, 0x00	; 0
    4406:	48 c0       	rjmp	.+144    	; 0x4498 <vfprintf+0x3e4>
    4408:	8a 81       	ldd	r24, Y+2	; 0x02
    440a:	81 33       	cpi	r24, 0x31	; 49
    440c:	19 f0       	breq	.+6      	; 0x4414 <vfprintf+0x360>
    440e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4410:	9f 7e       	andi	r25, 0xEF	; 239
    4412:	9c 87       	std	Y+12, r25	; 0x0c
    4414:	b7 01       	movw	r22, r14
    4416:	90 e0       	ldi	r25, 0x00	; 0
    4418:	3a d4       	rcall	.+2164   	; 0x4c8e <fputc>
    441a:	11 11       	cpse	r17, r1
    441c:	05 c0       	rjmp	.+10     	; 0x4428 <vfprintf+0x374>
    441e:	94 fc       	sbrc	r9, 4
    4420:	16 c0       	rjmp	.+44     	; 0x444e <vfprintf+0x39a>
    4422:	85 e6       	ldi	r24, 0x65	; 101
    4424:	90 e0       	ldi	r25, 0x00	; 0
    4426:	15 c0       	rjmp	.+42     	; 0x4452 <vfprintf+0x39e>
    4428:	b7 01       	movw	r22, r14
    442a:	8e e2       	ldi	r24, 0x2E	; 46
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	2f d4       	rcall	.+2142   	; 0x4c8e <fputc>
    4430:	1e 5f       	subi	r17, 0xFE	; 254
    4432:	82 e0       	ldi	r24, 0x02	; 2
    4434:	01 e0       	ldi	r16, 0x01	; 1
    4436:	08 0f       	add	r16, r24
    4438:	f3 01       	movw	r30, r6
    443a:	e8 0f       	add	r30, r24
    443c:	f1 1d       	adc	r31, r1
    443e:	80 81       	ld	r24, Z
    4440:	b7 01       	movw	r22, r14
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	24 d4       	rcall	.+2120   	; 0x4c8e <fputc>
    4446:	80 2f       	mov	r24, r16
    4448:	01 13       	cpse	r16, r17
    444a:	f4 cf       	rjmp	.-24     	; 0x4434 <vfprintf+0x380>
    444c:	e8 cf       	rjmp	.-48     	; 0x441e <vfprintf+0x36a>
    444e:	85 e4       	ldi	r24, 0x45	; 69
    4450:	90 e0       	ldi	r25, 0x00	; 0
    4452:	b7 01       	movw	r22, r14
    4454:	1c d4       	rcall	.+2104   	; 0x4c8e <fputc>
    4456:	d7 fc       	sbrc	r13, 7
    4458:	06 c0       	rjmp	.+12     	; 0x4466 <vfprintf+0x3b2>
    445a:	c1 14       	cp	r12, r1
    445c:	d1 04       	cpc	r13, r1
    445e:	41 f4       	brne	.+16     	; 0x4470 <vfprintf+0x3bc>
    4460:	ec 85       	ldd	r30, Y+12	; 0x0c
    4462:	e4 ff       	sbrs	r30, 4
    4464:	05 c0       	rjmp	.+10     	; 0x4470 <vfprintf+0x3bc>
    4466:	d1 94       	neg	r13
    4468:	c1 94       	neg	r12
    446a:	d1 08       	sbc	r13, r1
    446c:	8d e2       	ldi	r24, 0x2D	; 45
    446e:	01 c0       	rjmp	.+2      	; 0x4472 <vfprintf+0x3be>
    4470:	8b e2       	ldi	r24, 0x2B	; 43
    4472:	b7 01       	movw	r22, r14
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	0b d4       	rcall	.+2070   	; 0x4c8e <fputc>
    4478:	80 e3       	ldi	r24, 0x30	; 48
    447a:	2a e0       	ldi	r18, 0x0A	; 10
    447c:	c2 16       	cp	r12, r18
    447e:	d1 04       	cpc	r13, r1
    4480:	2c f0       	brlt	.+10     	; 0x448c <vfprintf+0x3d8>
    4482:	8f 5f       	subi	r24, 0xFF	; 255
    4484:	fa e0       	ldi	r31, 0x0A	; 10
    4486:	cf 1a       	sub	r12, r31
    4488:	d1 08       	sbc	r13, r1
    448a:	f7 cf       	rjmp	.-18     	; 0x447a <vfprintf+0x3c6>
    448c:	b7 01       	movw	r22, r14
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	fe d3       	rcall	.+2044   	; 0x4c8e <fputc>
    4492:	b7 01       	movw	r22, r14
    4494:	c6 01       	movw	r24, r12
    4496:	c0 96       	adiw	r24, 0x30	; 48
    4498:	fa d3       	rcall	.+2036   	; 0x4c8e <fputc>
    449a:	49 c1       	rjmp	.+658    	; 0x472e <vfprintf+0x67a>
    449c:	83 36       	cpi	r24, 0x63	; 99
    449e:	31 f0       	breq	.+12     	; 0x44ac <vfprintf+0x3f8>
    44a0:	83 37       	cpi	r24, 0x73	; 115
    44a2:	79 f0       	breq	.+30     	; 0x44c2 <vfprintf+0x40e>
    44a4:	83 35       	cpi	r24, 0x53	; 83
    44a6:	09 f0       	breq	.+2      	; 0x44aa <vfprintf+0x3f6>
    44a8:	52 c0       	rjmp	.+164    	; 0x454e <vfprintf+0x49a>
    44aa:	1f c0       	rjmp	.+62     	; 0x44ea <vfprintf+0x436>
    44ac:	56 01       	movw	r10, r12
    44ae:	32 e0       	ldi	r19, 0x02	; 2
    44b0:	a3 0e       	add	r10, r19
    44b2:	b1 1c       	adc	r11, r1
    44b4:	f6 01       	movw	r30, r12
    44b6:	80 81       	ld	r24, Z
    44b8:	89 83       	std	Y+1, r24	; 0x01
    44ba:	01 e0       	ldi	r16, 0x01	; 1
    44bc:	10 e0       	ldi	r17, 0x00	; 0
    44be:	63 01       	movw	r12, r6
    44c0:	11 c0       	rjmp	.+34     	; 0x44e4 <vfprintf+0x430>
    44c2:	56 01       	movw	r10, r12
    44c4:	f2 e0       	ldi	r31, 0x02	; 2
    44c6:	af 0e       	add	r10, r31
    44c8:	b1 1c       	adc	r11, r1
    44ca:	f6 01       	movw	r30, r12
    44cc:	c0 80       	ld	r12, Z
    44ce:	d1 80       	ldd	r13, Z+1	; 0x01
    44d0:	96 fe       	sbrs	r9, 6
    44d2:	03 c0       	rjmp	.+6      	; 0x44da <vfprintf+0x426>
    44d4:	61 2f       	mov	r22, r17
    44d6:	70 e0       	ldi	r23, 0x00	; 0
    44d8:	02 c0       	rjmp	.+4      	; 0x44de <vfprintf+0x42a>
    44da:	6f ef       	ldi	r22, 0xFF	; 255
    44dc:	7f ef       	ldi	r23, 0xFF	; 255
    44de:	c6 01       	movw	r24, r12
    44e0:	81 d3       	rcall	.+1794   	; 0x4be4 <strnlen>
    44e2:	8c 01       	movw	r16, r24
    44e4:	f9 2d       	mov	r31, r9
    44e6:	ff 77       	andi	r31, 0x7F	; 127
    44e8:	13 c0       	rjmp	.+38     	; 0x4510 <vfprintf+0x45c>
    44ea:	56 01       	movw	r10, r12
    44ec:	22 e0       	ldi	r18, 0x02	; 2
    44ee:	a2 0e       	add	r10, r18
    44f0:	b1 1c       	adc	r11, r1
    44f2:	f6 01       	movw	r30, r12
    44f4:	c0 80       	ld	r12, Z
    44f6:	d1 80       	ldd	r13, Z+1	; 0x01
    44f8:	96 fe       	sbrs	r9, 6
    44fa:	03 c0       	rjmp	.+6      	; 0x4502 <vfprintf+0x44e>
    44fc:	61 2f       	mov	r22, r17
    44fe:	70 e0       	ldi	r23, 0x00	; 0
    4500:	02 c0       	rjmp	.+4      	; 0x4506 <vfprintf+0x452>
    4502:	6f ef       	ldi	r22, 0xFF	; 255
    4504:	7f ef       	ldi	r23, 0xFF	; 255
    4506:	c6 01       	movw	r24, r12
    4508:	62 d3       	rcall	.+1732   	; 0x4bce <strnlen_P>
    450a:	8c 01       	movw	r16, r24
    450c:	f9 2d       	mov	r31, r9
    450e:	f0 68       	ori	r31, 0x80	; 128
    4510:	9f 2e       	mov	r9, r31
    4512:	f3 fd       	sbrc	r31, 3
    4514:	18 c0       	rjmp	.+48     	; 0x4546 <vfprintf+0x492>
    4516:	85 2d       	mov	r24, r5
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	08 17       	cp	r16, r24
    451c:	19 07       	cpc	r17, r25
    451e:	98 f4       	brcc	.+38     	; 0x4546 <vfprintf+0x492>
    4520:	b7 01       	movw	r22, r14
    4522:	80 e2       	ldi	r24, 0x20	; 32
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	b3 d3       	rcall	.+1894   	; 0x4c8e <fputc>
    4528:	5a 94       	dec	r5
    452a:	f5 cf       	rjmp	.-22     	; 0x4516 <vfprintf+0x462>
    452c:	f6 01       	movw	r30, r12
    452e:	97 fc       	sbrc	r9, 7
    4530:	85 91       	lpm	r24, Z+
    4532:	97 fe       	sbrs	r9, 7
    4534:	81 91       	ld	r24, Z+
    4536:	6f 01       	movw	r12, r30
    4538:	b7 01       	movw	r22, r14
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	a8 d3       	rcall	.+1872   	; 0x4c8e <fputc>
    453e:	51 10       	cpse	r5, r1
    4540:	5a 94       	dec	r5
    4542:	01 50       	subi	r16, 0x01	; 1
    4544:	11 09       	sbc	r17, r1
    4546:	01 15       	cp	r16, r1
    4548:	11 05       	cpc	r17, r1
    454a:	81 f7       	brne	.-32     	; 0x452c <vfprintf+0x478>
    454c:	f0 c0       	rjmp	.+480    	; 0x472e <vfprintf+0x67a>
    454e:	84 36       	cpi	r24, 0x64	; 100
    4550:	11 f0       	breq	.+4      	; 0x4556 <vfprintf+0x4a2>
    4552:	89 36       	cpi	r24, 0x69	; 105
    4554:	59 f5       	brne	.+86     	; 0x45ac <vfprintf+0x4f8>
    4556:	56 01       	movw	r10, r12
    4558:	97 fe       	sbrs	r9, 7
    455a:	09 c0       	rjmp	.+18     	; 0x456e <vfprintf+0x4ba>
    455c:	24 e0       	ldi	r18, 0x04	; 4
    455e:	a2 0e       	add	r10, r18
    4560:	b1 1c       	adc	r11, r1
    4562:	f6 01       	movw	r30, r12
    4564:	60 81       	ld	r22, Z
    4566:	71 81       	ldd	r23, Z+1	; 0x01
    4568:	82 81       	ldd	r24, Z+2	; 0x02
    456a:	93 81       	ldd	r25, Z+3	; 0x03
    456c:	0a c0       	rjmp	.+20     	; 0x4582 <vfprintf+0x4ce>
    456e:	f2 e0       	ldi	r31, 0x02	; 2
    4570:	af 0e       	add	r10, r31
    4572:	b1 1c       	adc	r11, r1
    4574:	f6 01       	movw	r30, r12
    4576:	60 81       	ld	r22, Z
    4578:	71 81       	ldd	r23, Z+1	; 0x01
    457a:	07 2e       	mov	r0, r23
    457c:	00 0c       	add	r0, r0
    457e:	88 0b       	sbc	r24, r24
    4580:	99 0b       	sbc	r25, r25
    4582:	f9 2d       	mov	r31, r9
    4584:	ff 76       	andi	r31, 0x6F	; 111
    4586:	9f 2e       	mov	r9, r31
    4588:	97 ff       	sbrs	r25, 7
    458a:	09 c0       	rjmp	.+18     	; 0x459e <vfprintf+0x4ea>
    458c:	90 95       	com	r25
    458e:	80 95       	com	r24
    4590:	70 95       	com	r23
    4592:	61 95       	neg	r22
    4594:	7f 4f       	sbci	r23, 0xFF	; 255
    4596:	8f 4f       	sbci	r24, 0xFF	; 255
    4598:	9f 4f       	sbci	r25, 0xFF	; 255
    459a:	f0 68       	ori	r31, 0x80	; 128
    459c:	9f 2e       	mov	r9, r31
    459e:	2a e0       	ldi	r18, 0x0A	; 10
    45a0:	30 e0       	ldi	r19, 0x00	; 0
    45a2:	a3 01       	movw	r20, r6
    45a4:	f8 d3       	rcall	.+2032   	; 0x4d96 <__ultoa_invert>
    45a6:	c8 2e       	mov	r12, r24
    45a8:	c6 18       	sub	r12, r6
    45aa:	3e c0       	rjmp	.+124    	; 0x4628 <vfprintf+0x574>
    45ac:	09 2d       	mov	r16, r9
    45ae:	85 37       	cpi	r24, 0x75	; 117
    45b0:	21 f4       	brne	.+8      	; 0x45ba <vfprintf+0x506>
    45b2:	0f 7e       	andi	r16, 0xEF	; 239
    45b4:	2a e0       	ldi	r18, 0x0A	; 10
    45b6:	30 e0       	ldi	r19, 0x00	; 0
    45b8:	1d c0       	rjmp	.+58     	; 0x45f4 <vfprintf+0x540>
    45ba:	09 7f       	andi	r16, 0xF9	; 249
    45bc:	8f 36       	cpi	r24, 0x6F	; 111
    45be:	91 f0       	breq	.+36     	; 0x45e4 <vfprintf+0x530>
    45c0:	18 f4       	brcc	.+6      	; 0x45c8 <vfprintf+0x514>
    45c2:	88 35       	cpi	r24, 0x58	; 88
    45c4:	59 f0       	breq	.+22     	; 0x45dc <vfprintf+0x528>
    45c6:	bc c0       	rjmp	.+376    	; 0x4740 <vfprintf+0x68c>
    45c8:	80 37       	cpi	r24, 0x70	; 112
    45ca:	19 f0       	breq	.+6      	; 0x45d2 <vfprintf+0x51e>
    45cc:	88 37       	cpi	r24, 0x78	; 120
    45ce:	11 f0       	breq	.+4      	; 0x45d4 <vfprintf+0x520>
    45d0:	b7 c0       	rjmp	.+366    	; 0x4740 <vfprintf+0x68c>
    45d2:	00 61       	ori	r16, 0x10	; 16
    45d4:	04 ff       	sbrs	r16, 4
    45d6:	09 c0       	rjmp	.+18     	; 0x45ea <vfprintf+0x536>
    45d8:	04 60       	ori	r16, 0x04	; 4
    45da:	07 c0       	rjmp	.+14     	; 0x45ea <vfprintf+0x536>
    45dc:	94 fe       	sbrs	r9, 4
    45de:	08 c0       	rjmp	.+16     	; 0x45f0 <vfprintf+0x53c>
    45e0:	06 60       	ori	r16, 0x06	; 6
    45e2:	06 c0       	rjmp	.+12     	; 0x45f0 <vfprintf+0x53c>
    45e4:	28 e0       	ldi	r18, 0x08	; 8
    45e6:	30 e0       	ldi	r19, 0x00	; 0
    45e8:	05 c0       	rjmp	.+10     	; 0x45f4 <vfprintf+0x540>
    45ea:	20 e1       	ldi	r18, 0x10	; 16
    45ec:	30 e0       	ldi	r19, 0x00	; 0
    45ee:	02 c0       	rjmp	.+4      	; 0x45f4 <vfprintf+0x540>
    45f0:	20 e1       	ldi	r18, 0x10	; 16
    45f2:	32 e0       	ldi	r19, 0x02	; 2
    45f4:	56 01       	movw	r10, r12
    45f6:	07 ff       	sbrs	r16, 7
    45f8:	09 c0       	rjmp	.+18     	; 0x460c <vfprintf+0x558>
    45fa:	84 e0       	ldi	r24, 0x04	; 4
    45fc:	a8 0e       	add	r10, r24
    45fe:	b1 1c       	adc	r11, r1
    4600:	f6 01       	movw	r30, r12
    4602:	60 81       	ld	r22, Z
    4604:	71 81       	ldd	r23, Z+1	; 0x01
    4606:	82 81       	ldd	r24, Z+2	; 0x02
    4608:	93 81       	ldd	r25, Z+3	; 0x03
    460a:	08 c0       	rjmp	.+16     	; 0x461c <vfprintf+0x568>
    460c:	f2 e0       	ldi	r31, 0x02	; 2
    460e:	af 0e       	add	r10, r31
    4610:	b1 1c       	adc	r11, r1
    4612:	f6 01       	movw	r30, r12
    4614:	60 81       	ld	r22, Z
    4616:	71 81       	ldd	r23, Z+1	; 0x01
    4618:	80 e0       	ldi	r24, 0x00	; 0
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	a3 01       	movw	r20, r6
    461e:	bb d3       	rcall	.+1910   	; 0x4d96 <__ultoa_invert>
    4620:	c8 2e       	mov	r12, r24
    4622:	c6 18       	sub	r12, r6
    4624:	0f 77       	andi	r16, 0x7F	; 127
    4626:	90 2e       	mov	r9, r16
    4628:	96 fe       	sbrs	r9, 6
    462a:	0b c0       	rjmp	.+22     	; 0x4642 <vfprintf+0x58e>
    462c:	09 2d       	mov	r16, r9
    462e:	0e 7f       	andi	r16, 0xFE	; 254
    4630:	c1 16       	cp	r12, r17
    4632:	50 f4       	brcc	.+20     	; 0x4648 <vfprintf+0x594>
    4634:	94 fe       	sbrs	r9, 4
    4636:	0a c0       	rjmp	.+20     	; 0x464c <vfprintf+0x598>
    4638:	92 fc       	sbrc	r9, 2
    463a:	08 c0       	rjmp	.+16     	; 0x464c <vfprintf+0x598>
    463c:	09 2d       	mov	r16, r9
    463e:	0e 7e       	andi	r16, 0xEE	; 238
    4640:	05 c0       	rjmp	.+10     	; 0x464c <vfprintf+0x598>
    4642:	dc 2c       	mov	r13, r12
    4644:	09 2d       	mov	r16, r9
    4646:	03 c0       	rjmp	.+6      	; 0x464e <vfprintf+0x59a>
    4648:	dc 2c       	mov	r13, r12
    464a:	01 c0       	rjmp	.+2      	; 0x464e <vfprintf+0x59a>
    464c:	d1 2e       	mov	r13, r17
    464e:	04 ff       	sbrs	r16, 4
    4650:	0d c0       	rjmp	.+26     	; 0x466c <vfprintf+0x5b8>
    4652:	fe 01       	movw	r30, r28
    4654:	ec 0d       	add	r30, r12
    4656:	f1 1d       	adc	r31, r1
    4658:	80 81       	ld	r24, Z
    465a:	80 33       	cpi	r24, 0x30	; 48
    465c:	11 f4       	brne	.+4      	; 0x4662 <vfprintf+0x5ae>
    465e:	09 7e       	andi	r16, 0xE9	; 233
    4660:	09 c0       	rjmp	.+18     	; 0x4674 <vfprintf+0x5c0>
    4662:	02 ff       	sbrs	r16, 2
    4664:	06 c0       	rjmp	.+12     	; 0x4672 <vfprintf+0x5be>
    4666:	d3 94       	inc	r13
    4668:	d3 94       	inc	r13
    466a:	04 c0       	rjmp	.+8      	; 0x4674 <vfprintf+0x5c0>
    466c:	80 2f       	mov	r24, r16
    466e:	86 78       	andi	r24, 0x86	; 134
    4670:	09 f0       	breq	.+2      	; 0x4674 <vfprintf+0x5c0>
    4672:	d3 94       	inc	r13
    4674:	03 fd       	sbrc	r16, 3
    4676:	10 c0       	rjmp	.+32     	; 0x4698 <vfprintf+0x5e4>
    4678:	00 ff       	sbrs	r16, 0
    467a:	06 c0       	rjmp	.+12     	; 0x4688 <vfprintf+0x5d4>
    467c:	1c 2d       	mov	r17, r12
    467e:	d5 14       	cp	r13, r5
    4680:	78 f4       	brcc	.+30     	; 0x46a0 <vfprintf+0x5ec>
    4682:	15 0d       	add	r17, r5
    4684:	1d 19       	sub	r17, r13
    4686:	0c c0       	rjmp	.+24     	; 0x46a0 <vfprintf+0x5ec>
    4688:	d5 14       	cp	r13, r5
    468a:	50 f4       	brcc	.+20     	; 0x46a0 <vfprintf+0x5ec>
    468c:	b7 01       	movw	r22, r14
    468e:	80 e2       	ldi	r24, 0x20	; 32
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	fd d2       	rcall	.+1530   	; 0x4c8e <fputc>
    4694:	d3 94       	inc	r13
    4696:	f8 cf       	rjmp	.-16     	; 0x4688 <vfprintf+0x5d4>
    4698:	d5 14       	cp	r13, r5
    469a:	10 f4       	brcc	.+4      	; 0x46a0 <vfprintf+0x5ec>
    469c:	5d 18       	sub	r5, r13
    469e:	01 c0       	rjmp	.+2      	; 0x46a2 <vfprintf+0x5ee>
    46a0:	51 2c       	mov	r5, r1
    46a2:	04 ff       	sbrs	r16, 4
    46a4:	0f c0       	rjmp	.+30     	; 0x46c4 <vfprintf+0x610>
    46a6:	b7 01       	movw	r22, r14
    46a8:	80 e3       	ldi	r24, 0x30	; 48
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	f0 d2       	rcall	.+1504   	; 0x4c8e <fputc>
    46ae:	02 ff       	sbrs	r16, 2
    46b0:	16 c0       	rjmp	.+44     	; 0x46de <vfprintf+0x62a>
    46b2:	01 fd       	sbrc	r16, 1
    46b4:	03 c0       	rjmp	.+6      	; 0x46bc <vfprintf+0x608>
    46b6:	88 e7       	ldi	r24, 0x78	; 120
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	02 c0       	rjmp	.+4      	; 0x46c0 <vfprintf+0x60c>
    46bc:	88 e5       	ldi	r24, 0x58	; 88
    46be:	90 e0       	ldi	r25, 0x00	; 0
    46c0:	b7 01       	movw	r22, r14
    46c2:	0c c0       	rjmp	.+24     	; 0x46dc <vfprintf+0x628>
    46c4:	80 2f       	mov	r24, r16
    46c6:	86 78       	andi	r24, 0x86	; 134
    46c8:	51 f0       	breq	.+20     	; 0x46de <vfprintf+0x62a>
    46ca:	01 ff       	sbrs	r16, 1
    46cc:	02 c0       	rjmp	.+4      	; 0x46d2 <vfprintf+0x61e>
    46ce:	8b e2       	ldi	r24, 0x2B	; 43
    46d0:	01 c0       	rjmp	.+2      	; 0x46d4 <vfprintf+0x620>
    46d2:	80 e2       	ldi	r24, 0x20	; 32
    46d4:	07 fd       	sbrc	r16, 7
    46d6:	8d e2       	ldi	r24, 0x2D	; 45
    46d8:	b7 01       	movw	r22, r14
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	d8 d2       	rcall	.+1456   	; 0x4c8e <fputc>
    46de:	c1 16       	cp	r12, r17
    46e0:	30 f4       	brcc	.+12     	; 0x46ee <vfprintf+0x63a>
    46e2:	b7 01       	movw	r22, r14
    46e4:	80 e3       	ldi	r24, 0x30	; 48
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	d2 d2       	rcall	.+1444   	; 0x4c8e <fputc>
    46ea:	11 50       	subi	r17, 0x01	; 1
    46ec:	f8 cf       	rjmp	.-16     	; 0x46de <vfprintf+0x62a>
    46ee:	ca 94       	dec	r12
    46f0:	f3 01       	movw	r30, r6
    46f2:	ec 0d       	add	r30, r12
    46f4:	f1 1d       	adc	r31, r1
    46f6:	80 81       	ld	r24, Z
    46f8:	b7 01       	movw	r22, r14
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	c8 d2       	rcall	.+1424   	; 0x4c8e <fputc>
    46fe:	c1 10       	cpse	r12, r1
    4700:	f6 cf       	rjmp	.-20     	; 0x46ee <vfprintf+0x63a>
    4702:	15 c0       	rjmp	.+42     	; 0x472e <vfprintf+0x67a>
    4704:	f4 e0       	ldi	r31, 0x04	; 4
    4706:	f5 15       	cp	r31, r5
    4708:	50 f5       	brcc	.+84     	; 0x475e <vfprintf+0x6aa>
    470a:	84 e0       	ldi	r24, 0x04	; 4
    470c:	58 1a       	sub	r5, r24
    470e:	93 fe       	sbrs	r9, 3
    4710:	1e c0       	rjmp	.+60     	; 0x474e <vfprintf+0x69a>
    4712:	01 11       	cpse	r16, r1
    4714:	25 c0       	rjmp	.+74     	; 0x4760 <vfprintf+0x6ac>
    4716:	2c 85       	ldd	r18, Y+12	; 0x0c
    4718:	23 ff       	sbrs	r18, 3
    471a:	27 c0       	rjmp	.+78     	; 0x476a <vfprintf+0x6b6>
    471c:	0c ef       	ldi	r16, 0xFC	; 252
    471e:	12 e0       	ldi	r17, 0x02	; 2
    4720:	39 2d       	mov	r19, r9
    4722:	30 71       	andi	r19, 0x10	; 16
    4724:	93 2e       	mov	r9, r19
    4726:	f8 01       	movw	r30, r16
    4728:	84 91       	lpm	r24, Z
    472a:	81 11       	cpse	r24, r1
    472c:	21 c0       	rjmp	.+66     	; 0x4770 <vfprintf+0x6bc>
    472e:	55 20       	and	r5, r5
    4730:	09 f4       	brne	.+2      	; 0x4734 <vfprintf+0x680>
    4732:	fc cc       	rjmp	.-1544   	; 0x412c <vfprintf+0x78>
    4734:	b7 01       	movw	r22, r14
    4736:	80 e2       	ldi	r24, 0x20	; 32
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	a9 d2       	rcall	.+1362   	; 0x4c8e <fputc>
    473c:	5a 94       	dec	r5
    473e:	f7 cf       	rjmp	.-18     	; 0x472e <vfprintf+0x67a>
    4740:	f7 01       	movw	r30, r14
    4742:	86 81       	ldd	r24, Z+6	; 0x06
    4744:	97 81       	ldd	r25, Z+7	; 0x07
    4746:	23 c0       	rjmp	.+70     	; 0x478e <vfprintf+0x6da>
    4748:	8f ef       	ldi	r24, 0xFF	; 255
    474a:	9f ef       	ldi	r25, 0xFF	; 255
    474c:	20 c0       	rjmp	.+64     	; 0x478e <vfprintf+0x6da>
    474e:	b7 01       	movw	r22, r14
    4750:	80 e2       	ldi	r24, 0x20	; 32
    4752:	90 e0       	ldi	r25, 0x00	; 0
    4754:	9c d2       	rcall	.+1336   	; 0x4c8e <fputc>
    4756:	5a 94       	dec	r5
    4758:	51 10       	cpse	r5, r1
    475a:	f9 cf       	rjmp	.-14     	; 0x474e <vfprintf+0x69a>
    475c:	da cf       	rjmp	.-76     	; 0x4712 <vfprintf+0x65e>
    475e:	51 2c       	mov	r5, r1
    4760:	b7 01       	movw	r22, r14
    4762:	80 2f       	mov	r24, r16
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	93 d2       	rcall	.+1318   	; 0x4c8e <fputc>
    4768:	d6 cf       	rjmp	.-84     	; 0x4716 <vfprintf+0x662>
    476a:	00 e0       	ldi	r16, 0x00	; 0
    476c:	13 e0       	ldi	r17, 0x03	; 3
    476e:	d8 cf       	rjmp	.-80     	; 0x4720 <vfprintf+0x66c>
    4770:	91 10       	cpse	r9, r1
    4772:	80 52       	subi	r24, 0x20	; 32
    4774:	b7 01       	movw	r22, r14
    4776:	90 e0       	ldi	r25, 0x00	; 0
    4778:	8a d2       	rcall	.+1300   	; 0x4c8e <fputc>
    477a:	0f 5f       	subi	r16, 0xFF	; 255
    477c:	1f 4f       	sbci	r17, 0xFF	; 255
    477e:	d3 cf       	rjmp	.-90     	; 0x4726 <vfprintf+0x672>
    4780:	23 e0       	ldi	r18, 0x03	; 3
    4782:	25 15       	cp	r18, r5
    4784:	10 f4       	brcc	.+4      	; 0x478a <vfprintf+0x6d6>
    4786:	83 e0       	ldi	r24, 0x03	; 3
    4788:	c1 cf       	rjmp	.-126    	; 0x470c <vfprintf+0x658>
    478a:	51 2c       	mov	r5, r1
    478c:	c4 cf       	rjmp	.-120    	; 0x4716 <vfprintf+0x662>
    478e:	60 96       	adiw	r28, 0x10	; 16
    4790:	cd bf       	out	0x3d, r28	; 61
    4792:	de bf       	out	0x3e, r29	; 62
    4794:	df 91       	pop	r29
    4796:	cf 91       	pop	r28
    4798:	1f 91       	pop	r17
    479a:	0f 91       	pop	r16
    479c:	ff 90       	pop	r15
    479e:	ef 90       	pop	r14
    47a0:	df 90       	pop	r13
    47a2:	cf 90       	pop	r12
    47a4:	bf 90       	pop	r11
    47a6:	af 90       	pop	r10
    47a8:	9f 90       	pop	r9
    47aa:	8f 90       	pop	r8
    47ac:	7f 90       	pop	r7
    47ae:	6f 90       	pop	r6
    47b0:	5f 90       	pop	r5
    47b2:	4f 90       	pop	r4
    47b4:	3f 90       	pop	r3
    47b6:	2f 90       	pop	r2
    47b8:	08 95       	ret

000047ba <__udivmodhi4>:
    47ba:	aa 1b       	sub	r26, r26
    47bc:	bb 1b       	sub	r27, r27
    47be:	51 e1       	ldi	r21, 0x11	; 17
    47c0:	07 c0       	rjmp	.+14     	; 0x47d0 <__udivmodhi4_ep>

000047c2 <__udivmodhi4_loop>:
    47c2:	aa 1f       	adc	r26, r26
    47c4:	bb 1f       	adc	r27, r27
    47c6:	a6 17       	cp	r26, r22
    47c8:	b7 07       	cpc	r27, r23
    47ca:	10 f0       	brcs	.+4      	; 0x47d0 <__udivmodhi4_ep>
    47cc:	a6 1b       	sub	r26, r22
    47ce:	b7 0b       	sbc	r27, r23

000047d0 <__udivmodhi4_ep>:
    47d0:	88 1f       	adc	r24, r24
    47d2:	99 1f       	adc	r25, r25
    47d4:	5a 95       	dec	r21
    47d6:	a9 f7       	brne	.-22     	; 0x47c2 <__udivmodhi4_loop>
    47d8:	80 95       	com	r24
    47da:	90 95       	com	r25
    47dc:	bc 01       	movw	r22, r24
    47de:	cd 01       	movw	r24, r26
    47e0:	08 95       	ret

000047e2 <__udivmodsi4>:
    47e2:	a1 e2       	ldi	r26, 0x21	; 33
    47e4:	1a 2e       	mov	r1, r26
    47e6:	aa 1b       	sub	r26, r26
    47e8:	bb 1b       	sub	r27, r27
    47ea:	fd 01       	movw	r30, r26
    47ec:	0d c0       	rjmp	.+26     	; 0x4808 <__udivmodsi4_ep>

000047ee <__udivmodsi4_loop>:
    47ee:	aa 1f       	adc	r26, r26
    47f0:	bb 1f       	adc	r27, r27
    47f2:	ee 1f       	adc	r30, r30
    47f4:	ff 1f       	adc	r31, r31
    47f6:	a2 17       	cp	r26, r18
    47f8:	b3 07       	cpc	r27, r19
    47fa:	e4 07       	cpc	r30, r20
    47fc:	f5 07       	cpc	r31, r21
    47fe:	20 f0       	brcs	.+8      	; 0x4808 <__udivmodsi4_ep>
    4800:	a2 1b       	sub	r26, r18
    4802:	b3 0b       	sbc	r27, r19
    4804:	e4 0b       	sbc	r30, r20
    4806:	f5 0b       	sbc	r31, r21

00004808 <__udivmodsi4_ep>:
    4808:	66 1f       	adc	r22, r22
    480a:	77 1f       	adc	r23, r23
    480c:	88 1f       	adc	r24, r24
    480e:	99 1f       	adc	r25, r25
    4810:	1a 94       	dec	r1
    4812:	69 f7       	brne	.-38     	; 0x47ee <__udivmodsi4_loop>
    4814:	60 95       	com	r22
    4816:	70 95       	com	r23
    4818:	80 95       	com	r24
    481a:	90 95       	com	r25
    481c:	9b 01       	movw	r18, r22
    481e:	ac 01       	movw	r20, r24
    4820:	bd 01       	movw	r22, r26
    4822:	cf 01       	movw	r24, r30
    4824:	08 95       	ret

00004826 <__divmodsi4>:
    4826:	05 2e       	mov	r0, r21
    4828:	97 fb       	bst	r25, 7
    482a:	16 f4       	brtc	.+4      	; 0x4830 <__divmodsi4+0xa>
    482c:	00 94       	com	r0
    482e:	0f d0       	rcall	.+30     	; 0x484e <__negsi2>
    4830:	57 fd       	sbrc	r21, 7
    4832:	05 d0       	rcall	.+10     	; 0x483e <__divmodsi4_neg2>
    4834:	d6 df       	rcall	.-84     	; 0x47e2 <__udivmodsi4>
    4836:	07 fc       	sbrc	r0, 7
    4838:	02 d0       	rcall	.+4      	; 0x483e <__divmodsi4_neg2>
    483a:	46 f4       	brtc	.+16     	; 0x484c <__divmodsi4_exit>
    483c:	08 c0       	rjmp	.+16     	; 0x484e <__negsi2>

0000483e <__divmodsi4_neg2>:
    483e:	50 95       	com	r21
    4840:	40 95       	com	r20
    4842:	30 95       	com	r19
    4844:	21 95       	neg	r18
    4846:	3f 4f       	sbci	r19, 0xFF	; 255
    4848:	4f 4f       	sbci	r20, 0xFF	; 255
    484a:	5f 4f       	sbci	r21, 0xFF	; 255

0000484c <__divmodsi4_exit>:
    484c:	08 95       	ret

0000484e <__negsi2>:
    484e:	90 95       	com	r25
    4850:	80 95       	com	r24
    4852:	70 95       	com	r23
    4854:	61 95       	neg	r22
    4856:	7f 4f       	sbci	r23, 0xFF	; 255
    4858:	8f 4f       	sbci	r24, 0xFF	; 255
    485a:	9f 4f       	sbci	r25, 0xFF	; 255
    485c:	08 95       	ret

0000485e <__tablejump2__>:
    485e:	ee 0f       	add	r30, r30
    4860:	ff 1f       	adc	r31, r31
    4862:	88 1f       	adc	r24, r24
    4864:	8b bf       	out	0x3b, r24	; 59
    4866:	07 90       	elpm	r0, Z+
    4868:	f6 91       	elpm	r31, Z
    486a:	e0 2d       	mov	r30, r0
    486c:	1b be       	out	0x3b, r1	; 59
    486e:	19 94       	eijmp

00004870 <__usmulhisi3>:
    4870:	bd d0       	rcall	.+378    	; 0x49ec <__umulhisi3>

00004872 <__usmulhisi3_tail>:
    4872:	b7 ff       	sbrs	r27, 7
    4874:	08 95       	ret
    4876:	82 1b       	sub	r24, r18
    4878:	93 0b       	sbc	r25, r19
    487a:	08 95       	ret

0000487c <__mulshisi3>:
    487c:	b7 ff       	sbrs	r27, 7
    487e:	c5 c0       	rjmp	.+394    	; 0x4a0a <__muluhisi3>

00004880 <__mulohisi3>:
    4880:	c4 d0       	rcall	.+392    	; 0x4a0a <__muluhisi3>
    4882:	82 1b       	sub	r24, r18
    4884:	93 0b       	sbc	r25, r19
    4886:	08 95       	ret

00004888 <__muldi3>:
    4888:	df 93       	push	r29
    488a:	cf 93       	push	r28
    488c:	1f 93       	push	r17
    488e:	0f 93       	push	r16
    4890:	9a 9d       	mul	r25, r10
    4892:	f0 2d       	mov	r31, r0
    4894:	21 9f       	mul	r18, r17
    4896:	f0 0d       	add	r31, r0
    4898:	8b 9d       	mul	r24, r11
    489a:	f0 0d       	add	r31, r0
    489c:	8a 9d       	mul	r24, r10
    489e:	e0 2d       	mov	r30, r0
    48a0:	f1 0d       	add	r31, r1
    48a2:	03 9f       	mul	r16, r19
    48a4:	f0 0d       	add	r31, r0
    48a6:	02 9f       	mul	r16, r18
    48a8:	e0 0d       	add	r30, r0
    48aa:	f1 1d       	adc	r31, r1
    48ac:	4e 9d       	mul	r20, r14
    48ae:	e0 0d       	add	r30, r0
    48b0:	f1 1d       	adc	r31, r1
    48b2:	5e 9d       	mul	r21, r14
    48b4:	f0 0d       	add	r31, r0
    48b6:	4f 9d       	mul	r20, r15
    48b8:	f0 0d       	add	r31, r0
    48ba:	7f 93       	push	r23
    48bc:	6f 93       	push	r22
    48be:	bf 92       	push	r11
    48c0:	af 92       	push	r10
    48c2:	5f 93       	push	r21
    48c4:	4f 93       	push	r20
    48c6:	d5 01       	movw	r26, r10
    48c8:	91 d0       	rcall	.+290    	; 0x49ec <__umulhisi3>
    48ca:	8b 01       	movw	r16, r22
    48cc:	ac 01       	movw	r20, r24
    48ce:	d7 01       	movw	r26, r14
    48d0:	8d d0       	rcall	.+282    	; 0x49ec <__umulhisi3>
    48d2:	eb 01       	movw	r28, r22
    48d4:	e8 0f       	add	r30, r24
    48d6:	f9 1f       	adc	r31, r25
    48d8:	d6 01       	movw	r26, r12
    48da:	1f d0       	rcall	.+62     	; 0x491a <__muldi3_6>
    48dc:	2f 91       	pop	r18
    48de:	3f 91       	pop	r19
    48e0:	d6 01       	movw	r26, r12
    48e2:	84 d0       	rcall	.+264    	; 0x49ec <__umulhisi3>
    48e4:	c6 0f       	add	r28, r22
    48e6:	d7 1f       	adc	r29, r23
    48e8:	e8 1f       	adc	r30, r24
    48ea:	f9 1f       	adc	r31, r25
    48ec:	af 91       	pop	r26
    48ee:	bf 91       	pop	r27
    48f0:	14 d0       	rcall	.+40     	; 0x491a <__muldi3_6>
    48f2:	2f 91       	pop	r18
    48f4:	3f 91       	pop	r19
    48f6:	7a d0       	rcall	.+244    	; 0x49ec <__umulhisi3>
    48f8:	c6 0f       	add	r28, r22
    48fa:	d7 1f       	adc	r29, r23
    48fc:	e8 1f       	adc	r30, r24
    48fe:	f9 1f       	adc	r31, r25
    4900:	d6 01       	movw	r26, r12
    4902:	74 d0       	rcall	.+232    	; 0x49ec <__umulhisi3>
    4904:	e6 0f       	add	r30, r22
    4906:	f7 1f       	adc	r31, r23
    4908:	98 01       	movw	r18, r16
    490a:	be 01       	movw	r22, r28
    490c:	cf 01       	movw	r24, r30
    490e:	11 24       	eor	r1, r1
    4910:	0f 91       	pop	r16
    4912:	1f 91       	pop	r17
    4914:	cf 91       	pop	r28
    4916:	df 91       	pop	r29
    4918:	08 95       	ret

0000491a <__muldi3_6>:
    491a:	68 d0       	rcall	.+208    	; 0x49ec <__umulhisi3>
    491c:	46 0f       	add	r20, r22
    491e:	57 1f       	adc	r21, r23
    4920:	c8 1f       	adc	r28, r24
    4922:	d9 1f       	adc	r29, r25
    4924:	08 f4       	brcc	.+2      	; 0x4928 <__muldi3_6+0xe>
    4926:	31 96       	adiw	r30, 0x01	; 1
    4928:	08 95       	ret

0000492a <__ashldi3>:
    492a:	0f 93       	push	r16
    492c:	08 30       	cpi	r16, 0x08	; 8
    492e:	90 f0       	brcs	.+36     	; 0x4954 <__ashldi3+0x2a>
    4930:	98 2f       	mov	r25, r24
    4932:	87 2f       	mov	r24, r23
    4934:	76 2f       	mov	r23, r22
    4936:	65 2f       	mov	r22, r21
    4938:	54 2f       	mov	r21, r20
    493a:	43 2f       	mov	r20, r19
    493c:	32 2f       	mov	r19, r18
    493e:	22 27       	eor	r18, r18
    4940:	08 50       	subi	r16, 0x08	; 8
    4942:	f4 cf       	rjmp	.-24     	; 0x492c <__ashldi3+0x2>
    4944:	22 0f       	add	r18, r18
    4946:	33 1f       	adc	r19, r19
    4948:	44 1f       	adc	r20, r20
    494a:	55 1f       	adc	r21, r21
    494c:	66 1f       	adc	r22, r22
    494e:	77 1f       	adc	r23, r23
    4950:	88 1f       	adc	r24, r24
    4952:	99 1f       	adc	r25, r25
    4954:	0a 95       	dec	r16
    4956:	b2 f7       	brpl	.-20     	; 0x4944 <__ashldi3+0x1a>
    4958:	0f 91       	pop	r16
    495a:	08 95       	ret

0000495c <__ashrdi3>:
    495c:	97 fb       	bst	r25, 7
    495e:	10 f8       	bld	r1, 0

00004960 <__lshrdi3>:
    4960:	16 94       	lsr	r1
    4962:	00 08       	sbc	r0, r0
    4964:	0f 93       	push	r16
    4966:	08 30       	cpi	r16, 0x08	; 8
    4968:	98 f0       	brcs	.+38     	; 0x4990 <__lshrdi3+0x30>
    496a:	08 50       	subi	r16, 0x08	; 8
    496c:	23 2f       	mov	r18, r19
    496e:	34 2f       	mov	r19, r20
    4970:	45 2f       	mov	r20, r21
    4972:	56 2f       	mov	r21, r22
    4974:	67 2f       	mov	r22, r23
    4976:	78 2f       	mov	r23, r24
    4978:	89 2f       	mov	r24, r25
    497a:	90 2d       	mov	r25, r0
    497c:	f4 cf       	rjmp	.-24     	; 0x4966 <__lshrdi3+0x6>
    497e:	05 94       	asr	r0
    4980:	97 95       	ror	r25
    4982:	87 95       	ror	r24
    4984:	77 95       	ror	r23
    4986:	67 95       	ror	r22
    4988:	57 95       	ror	r21
    498a:	47 95       	ror	r20
    498c:	37 95       	ror	r19
    498e:	27 95       	ror	r18
    4990:	0a 95       	dec	r16
    4992:	aa f7       	brpl	.-22     	; 0x497e <__lshrdi3+0x1e>
    4994:	0f 91       	pop	r16
    4996:	08 95       	ret

00004998 <__adddi3>:
    4998:	2a 0d       	add	r18, r10
    499a:	3b 1d       	adc	r19, r11
    499c:	4c 1d       	adc	r20, r12
    499e:	5d 1d       	adc	r21, r13
    49a0:	6e 1d       	adc	r22, r14
    49a2:	7f 1d       	adc	r23, r15
    49a4:	80 1f       	adc	r24, r16
    49a6:	91 1f       	adc	r25, r17
    49a8:	08 95       	ret

000049aa <__adddi3_s8>:
    49aa:	00 24       	eor	r0, r0
    49ac:	a7 fd       	sbrc	r26, 7
    49ae:	00 94       	com	r0
    49b0:	2a 0f       	add	r18, r26
    49b2:	30 1d       	adc	r19, r0
    49b4:	40 1d       	adc	r20, r0
    49b6:	50 1d       	adc	r21, r0
    49b8:	60 1d       	adc	r22, r0
    49ba:	70 1d       	adc	r23, r0
    49bc:	80 1d       	adc	r24, r0
    49be:	90 1d       	adc	r25, r0
    49c0:	08 95       	ret

000049c2 <__subdi3>:
    49c2:	2a 19       	sub	r18, r10
    49c4:	3b 09       	sbc	r19, r11
    49c6:	4c 09       	sbc	r20, r12
    49c8:	5d 09       	sbc	r21, r13
    49ca:	6e 09       	sbc	r22, r14
    49cc:	7f 09       	sbc	r23, r15
    49ce:	80 0b       	sbc	r24, r16
    49d0:	91 0b       	sbc	r25, r17
    49d2:	08 95       	ret

000049d4 <__cmpdi2_s8>:
    49d4:	00 24       	eor	r0, r0
    49d6:	a7 fd       	sbrc	r26, 7
    49d8:	00 94       	com	r0
    49da:	2a 17       	cp	r18, r26
    49dc:	30 05       	cpc	r19, r0
    49de:	40 05       	cpc	r20, r0
    49e0:	50 05       	cpc	r21, r0
    49e2:	60 05       	cpc	r22, r0
    49e4:	70 05       	cpc	r23, r0
    49e6:	80 05       	cpc	r24, r0
    49e8:	90 05       	cpc	r25, r0
    49ea:	08 95       	ret

000049ec <__umulhisi3>:
    49ec:	a2 9f       	mul	r26, r18
    49ee:	b0 01       	movw	r22, r0
    49f0:	b3 9f       	mul	r27, r19
    49f2:	c0 01       	movw	r24, r0
    49f4:	a3 9f       	mul	r26, r19
    49f6:	70 0d       	add	r23, r0
    49f8:	81 1d       	adc	r24, r1
    49fa:	11 24       	eor	r1, r1
    49fc:	91 1d       	adc	r25, r1
    49fe:	b2 9f       	mul	r27, r18
    4a00:	70 0d       	add	r23, r0
    4a02:	81 1d       	adc	r24, r1
    4a04:	11 24       	eor	r1, r1
    4a06:	91 1d       	adc	r25, r1
    4a08:	08 95       	ret

00004a0a <__muluhisi3>:
    4a0a:	f0 df       	rcall	.-32     	; 0x49ec <__umulhisi3>
    4a0c:	a5 9f       	mul	r26, r21
    4a0e:	90 0d       	add	r25, r0
    4a10:	b4 9f       	mul	r27, r20
    4a12:	90 0d       	add	r25, r0
    4a14:	a4 9f       	mul	r26, r20
    4a16:	80 0d       	add	r24, r0
    4a18:	91 1d       	adc	r25, r1
    4a1a:	11 24       	eor	r1, r1
    4a1c:	08 95       	ret

00004a1e <__ftoa_engine>:
    4a1e:	28 30       	cpi	r18, 0x08	; 8
    4a20:	08 f0       	brcs	.+2      	; 0x4a24 <__ftoa_engine+0x6>
    4a22:	27 e0       	ldi	r18, 0x07	; 7
    4a24:	33 27       	eor	r19, r19
    4a26:	da 01       	movw	r26, r20
    4a28:	99 0f       	add	r25, r25
    4a2a:	31 1d       	adc	r19, r1
    4a2c:	87 fd       	sbrc	r24, 7
    4a2e:	91 60       	ori	r25, 0x01	; 1
    4a30:	00 96       	adiw	r24, 0x00	; 0
    4a32:	61 05       	cpc	r22, r1
    4a34:	71 05       	cpc	r23, r1
    4a36:	39 f4       	brne	.+14     	; 0x4a46 <__ftoa_engine+0x28>
    4a38:	32 60       	ori	r19, 0x02	; 2
    4a3a:	2e 5f       	subi	r18, 0xFE	; 254
    4a3c:	3d 93       	st	X+, r19
    4a3e:	30 e3       	ldi	r19, 0x30	; 48
    4a40:	2a 95       	dec	r18
    4a42:	e1 f7       	brne	.-8      	; 0x4a3c <__ftoa_engine+0x1e>
    4a44:	08 95       	ret
    4a46:	9f 3f       	cpi	r25, 0xFF	; 255
    4a48:	30 f0       	brcs	.+12     	; 0x4a56 <__ftoa_engine+0x38>
    4a4a:	80 38       	cpi	r24, 0x80	; 128
    4a4c:	71 05       	cpc	r23, r1
    4a4e:	61 05       	cpc	r22, r1
    4a50:	09 f0       	breq	.+2      	; 0x4a54 <__ftoa_engine+0x36>
    4a52:	3c 5f       	subi	r19, 0xFC	; 252
    4a54:	3c 5f       	subi	r19, 0xFC	; 252
    4a56:	3d 93       	st	X+, r19
    4a58:	91 30       	cpi	r25, 0x01	; 1
    4a5a:	08 f0       	brcs	.+2      	; 0x4a5e <__ftoa_engine+0x40>
    4a5c:	80 68       	ori	r24, 0x80	; 128
    4a5e:	91 1d       	adc	r25, r1
    4a60:	df 93       	push	r29
    4a62:	cf 93       	push	r28
    4a64:	1f 93       	push	r17
    4a66:	0f 93       	push	r16
    4a68:	ff 92       	push	r15
    4a6a:	ef 92       	push	r14
    4a6c:	19 2f       	mov	r17, r25
    4a6e:	98 7f       	andi	r25, 0xF8	; 248
    4a70:	96 95       	lsr	r25
    4a72:	e9 2f       	mov	r30, r25
    4a74:	96 95       	lsr	r25
    4a76:	96 95       	lsr	r25
    4a78:	e9 0f       	add	r30, r25
    4a7a:	ff 27       	eor	r31, r31
    4a7c:	e2 5a       	subi	r30, 0xA2	; 162
    4a7e:	fc 4f       	sbci	r31, 0xFC	; 252
    4a80:	99 27       	eor	r25, r25
    4a82:	33 27       	eor	r19, r19
    4a84:	ee 24       	eor	r14, r14
    4a86:	ff 24       	eor	r15, r15
    4a88:	a7 01       	movw	r20, r14
    4a8a:	e7 01       	movw	r28, r14
    4a8c:	05 90       	lpm	r0, Z+
    4a8e:	08 94       	sec
    4a90:	07 94       	ror	r0
    4a92:	28 f4       	brcc	.+10     	; 0x4a9e <__ftoa_engine+0x80>
    4a94:	36 0f       	add	r19, r22
    4a96:	e7 1e       	adc	r14, r23
    4a98:	f8 1e       	adc	r15, r24
    4a9a:	49 1f       	adc	r20, r25
    4a9c:	51 1d       	adc	r21, r1
    4a9e:	66 0f       	add	r22, r22
    4aa0:	77 1f       	adc	r23, r23
    4aa2:	88 1f       	adc	r24, r24
    4aa4:	99 1f       	adc	r25, r25
    4aa6:	06 94       	lsr	r0
    4aa8:	a1 f7       	brne	.-24     	; 0x4a92 <__ftoa_engine+0x74>
    4aaa:	05 90       	lpm	r0, Z+
    4aac:	07 94       	ror	r0
    4aae:	28 f4       	brcc	.+10     	; 0x4aba <__ftoa_engine+0x9c>
    4ab0:	e7 0e       	add	r14, r23
    4ab2:	f8 1e       	adc	r15, r24
    4ab4:	49 1f       	adc	r20, r25
    4ab6:	56 1f       	adc	r21, r22
    4ab8:	c1 1d       	adc	r28, r1
    4aba:	77 0f       	add	r23, r23
    4abc:	88 1f       	adc	r24, r24
    4abe:	99 1f       	adc	r25, r25
    4ac0:	66 1f       	adc	r22, r22
    4ac2:	06 94       	lsr	r0
    4ac4:	a1 f7       	brne	.-24     	; 0x4aae <__ftoa_engine+0x90>
    4ac6:	05 90       	lpm	r0, Z+
    4ac8:	07 94       	ror	r0
    4aca:	28 f4       	brcc	.+10     	; 0x4ad6 <__ftoa_engine+0xb8>
    4acc:	f8 0e       	add	r15, r24
    4ace:	49 1f       	adc	r20, r25
    4ad0:	56 1f       	adc	r21, r22
    4ad2:	c7 1f       	adc	r28, r23
    4ad4:	d1 1d       	adc	r29, r1
    4ad6:	88 0f       	add	r24, r24
    4ad8:	99 1f       	adc	r25, r25
    4ada:	66 1f       	adc	r22, r22
    4adc:	77 1f       	adc	r23, r23
    4ade:	06 94       	lsr	r0
    4ae0:	a1 f7       	brne	.-24     	; 0x4aca <__ftoa_engine+0xac>
    4ae2:	05 90       	lpm	r0, Z+
    4ae4:	07 94       	ror	r0
    4ae6:	20 f4       	brcc	.+8      	; 0x4af0 <__ftoa_engine+0xd2>
    4ae8:	49 0f       	add	r20, r25
    4aea:	56 1f       	adc	r21, r22
    4aec:	c7 1f       	adc	r28, r23
    4aee:	d8 1f       	adc	r29, r24
    4af0:	99 0f       	add	r25, r25
    4af2:	66 1f       	adc	r22, r22
    4af4:	77 1f       	adc	r23, r23
    4af6:	88 1f       	adc	r24, r24
    4af8:	06 94       	lsr	r0
    4afa:	a9 f7       	brne	.-22     	; 0x4ae6 <__ftoa_engine+0xc8>
    4afc:	84 91       	lpm	r24, Z
    4afe:	10 95       	com	r17
    4b00:	17 70       	andi	r17, 0x07	; 7
    4b02:	41 f0       	breq	.+16     	; 0x4b14 <__ftoa_engine+0xf6>
    4b04:	d6 95       	lsr	r29
    4b06:	c7 95       	ror	r28
    4b08:	57 95       	ror	r21
    4b0a:	47 95       	ror	r20
    4b0c:	f7 94       	ror	r15
    4b0e:	e7 94       	ror	r14
    4b10:	1a 95       	dec	r17
    4b12:	c1 f7       	brne	.-16     	; 0x4b04 <__ftoa_engine+0xe6>
    4b14:	e4 e0       	ldi	r30, 0x04	; 4
    4b16:	f3 e0       	ldi	r31, 0x03	; 3
    4b18:	68 94       	set
    4b1a:	15 90       	lpm	r1, Z+
    4b1c:	15 91       	lpm	r17, Z+
    4b1e:	35 91       	lpm	r19, Z+
    4b20:	65 91       	lpm	r22, Z+
    4b22:	95 91       	lpm	r25, Z+
    4b24:	05 90       	lpm	r0, Z+
    4b26:	7f e2       	ldi	r23, 0x2F	; 47
    4b28:	73 95       	inc	r23
    4b2a:	e1 18       	sub	r14, r1
    4b2c:	f1 0a       	sbc	r15, r17
    4b2e:	43 0b       	sbc	r20, r19
    4b30:	56 0b       	sbc	r21, r22
    4b32:	c9 0b       	sbc	r28, r25
    4b34:	d0 09       	sbc	r29, r0
    4b36:	c0 f7       	brcc	.-16     	; 0x4b28 <__ftoa_engine+0x10a>
    4b38:	e1 0c       	add	r14, r1
    4b3a:	f1 1e       	adc	r15, r17
    4b3c:	43 1f       	adc	r20, r19
    4b3e:	56 1f       	adc	r21, r22
    4b40:	c9 1f       	adc	r28, r25
    4b42:	d0 1d       	adc	r29, r0
    4b44:	7e f4       	brtc	.+30     	; 0x4b64 <__ftoa_engine+0x146>
    4b46:	70 33       	cpi	r23, 0x30	; 48
    4b48:	11 f4       	brne	.+4      	; 0x4b4e <__ftoa_engine+0x130>
    4b4a:	8a 95       	dec	r24
    4b4c:	e6 cf       	rjmp	.-52     	; 0x4b1a <__ftoa_engine+0xfc>
    4b4e:	e8 94       	clt
    4b50:	01 50       	subi	r16, 0x01	; 1
    4b52:	30 f0       	brcs	.+12     	; 0x4b60 <__ftoa_engine+0x142>
    4b54:	08 0f       	add	r16, r24
    4b56:	0a f4       	brpl	.+2      	; 0x4b5a <__ftoa_engine+0x13c>
    4b58:	00 27       	eor	r16, r16
    4b5a:	02 17       	cp	r16, r18
    4b5c:	08 f4       	brcc	.+2      	; 0x4b60 <__ftoa_engine+0x142>
    4b5e:	20 2f       	mov	r18, r16
    4b60:	23 95       	inc	r18
    4b62:	02 2f       	mov	r16, r18
    4b64:	7a 33       	cpi	r23, 0x3A	; 58
    4b66:	28 f0       	brcs	.+10     	; 0x4b72 <__ftoa_engine+0x154>
    4b68:	79 e3       	ldi	r23, 0x39	; 57
    4b6a:	7d 93       	st	X+, r23
    4b6c:	2a 95       	dec	r18
    4b6e:	e9 f7       	brne	.-6      	; 0x4b6a <__ftoa_engine+0x14c>
    4b70:	10 c0       	rjmp	.+32     	; 0x4b92 <__ftoa_engine+0x174>
    4b72:	7d 93       	st	X+, r23
    4b74:	2a 95       	dec	r18
    4b76:	89 f6       	brne	.-94     	; 0x4b1a <__ftoa_engine+0xfc>
    4b78:	06 94       	lsr	r0
    4b7a:	97 95       	ror	r25
    4b7c:	67 95       	ror	r22
    4b7e:	37 95       	ror	r19
    4b80:	17 95       	ror	r17
    4b82:	17 94       	ror	r1
    4b84:	e1 18       	sub	r14, r1
    4b86:	f1 0a       	sbc	r15, r17
    4b88:	43 0b       	sbc	r20, r19
    4b8a:	56 0b       	sbc	r21, r22
    4b8c:	c9 0b       	sbc	r28, r25
    4b8e:	d0 09       	sbc	r29, r0
    4b90:	98 f0       	brcs	.+38     	; 0x4bb8 <__ftoa_engine+0x19a>
    4b92:	23 95       	inc	r18
    4b94:	7e 91       	ld	r23, -X
    4b96:	73 95       	inc	r23
    4b98:	7a 33       	cpi	r23, 0x3A	; 58
    4b9a:	08 f0       	brcs	.+2      	; 0x4b9e <__ftoa_engine+0x180>
    4b9c:	70 e3       	ldi	r23, 0x30	; 48
    4b9e:	7c 93       	st	X, r23
    4ba0:	20 13       	cpse	r18, r16
    4ba2:	b8 f7       	brcc	.-18     	; 0x4b92 <__ftoa_engine+0x174>
    4ba4:	7e 91       	ld	r23, -X
    4ba6:	70 61       	ori	r23, 0x10	; 16
    4ba8:	7d 93       	st	X+, r23
    4baa:	30 f0       	brcs	.+12     	; 0x4bb8 <__ftoa_engine+0x19a>
    4bac:	83 95       	inc	r24
    4bae:	71 e3       	ldi	r23, 0x31	; 49
    4bb0:	7d 93       	st	X+, r23
    4bb2:	70 e3       	ldi	r23, 0x30	; 48
    4bb4:	2a 95       	dec	r18
    4bb6:	e1 f7       	brne	.-8      	; 0x4bb0 <__ftoa_engine+0x192>
    4bb8:	11 24       	eor	r1, r1
    4bba:	ef 90       	pop	r14
    4bbc:	ff 90       	pop	r15
    4bbe:	0f 91       	pop	r16
    4bc0:	1f 91       	pop	r17
    4bc2:	cf 91       	pop	r28
    4bc4:	df 91       	pop	r29
    4bc6:	99 27       	eor	r25, r25
    4bc8:	87 fd       	sbrc	r24, 7
    4bca:	90 95       	com	r25
    4bcc:	08 95       	ret

00004bce <strnlen_P>:
    4bce:	fc 01       	movw	r30, r24
    4bd0:	05 90       	lpm	r0, Z+
    4bd2:	61 50       	subi	r22, 0x01	; 1
    4bd4:	70 40       	sbci	r23, 0x00	; 0
    4bd6:	01 10       	cpse	r0, r1
    4bd8:	d8 f7       	brcc	.-10     	; 0x4bd0 <strnlen_P+0x2>
    4bda:	80 95       	com	r24
    4bdc:	90 95       	com	r25
    4bde:	8e 0f       	add	r24, r30
    4be0:	9f 1f       	adc	r25, r31
    4be2:	08 95       	ret

00004be4 <strnlen>:
    4be4:	fc 01       	movw	r30, r24
    4be6:	61 50       	subi	r22, 0x01	; 1
    4be8:	70 40       	sbci	r23, 0x00	; 0
    4bea:	01 90       	ld	r0, Z+
    4bec:	01 10       	cpse	r0, r1
    4bee:	d8 f7       	brcc	.-10     	; 0x4be6 <strnlen+0x2>
    4bf0:	80 95       	com	r24
    4bf2:	90 95       	com	r25
    4bf4:	8e 0f       	add	r24, r30
    4bf6:	9f 1f       	adc	r25, r31
    4bf8:	08 95       	ret

00004bfa <fdevopen>:
    4bfa:	0f 93       	push	r16
    4bfc:	1f 93       	push	r17
    4bfe:	cf 93       	push	r28
    4c00:	df 93       	push	r29
    4c02:	00 97       	sbiw	r24, 0x00	; 0
    4c04:	31 f4       	brne	.+12     	; 0x4c12 <fdevopen+0x18>
    4c06:	61 15       	cp	r22, r1
    4c08:	71 05       	cpc	r23, r1
    4c0a:	19 f4       	brne	.+6      	; 0x4c12 <fdevopen+0x18>
    4c0c:	80 e0       	ldi	r24, 0x00	; 0
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	39 c0       	rjmp	.+114    	; 0x4c84 <fdevopen+0x8a>
    4c12:	8b 01       	movw	r16, r22
    4c14:	ec 01       	movw	r28, r24
    4c16:	6e e0       	ldi	r22, 0x0E	; 14
    4c18:	70 e0       	ldi	r23, 0x00	; 0
    4c1a:	81 e0       	ldi	r24, 0x01	; 1
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	19 d1       	rcall	.+562    	; 0x4e52 <calloc>
    4c20:	fc 01       	movw	r30, r24
    4c22:	89 2b       	or	r24, r25
    4c24:	99 f3       	breq	.-26     	; 0x4c0c <fdevopen+0x12>
    4c26:	80 e8       	ldi	r24, 0x80	; 128
    4c28:	83 83       	std	Z+3, r24	; 0x03
    4c2a:	01 15       	cp	r16, r1
    4c2c:	11 05       	cpc	r17, r1
    4c2e:	71 f0       	breq	.+28     	; 0x4c4c <fdevopen+0x52>
    4c30:	02 87       	std	Z+10, r16	; 0x0a
    4c32:	13 87       	std	Z+11, r17	; 0x0b
    4c34:	81 e8       	ldi	r24, 0x81	; 129
    4c36:	83 83       	std	Z+3, r24	; 0x03
    4c38:	80 91 99 23 	lds	r24, 0x2399	; 0x802399 <__iob>
    4c3c:	90 91 9a 23 	lds	r25, 0x239A	; 0x80239a <__iob+0x1>
    4c40:	89 2b       	or	r24, r25
    4c42:	21 f4       	brne	.+8      	; 0x4c4c <fdevopen+0x52>
    4c44:	e0 93 99 23 	sts	0x2399, r30	; 0x802399 <__iob>
    4c48:	f0 93 9a 23 	sts	0x239A, r31	; 0x80239a <__iob+0x1>
    4c4c:	20 97       	sbiw	r28, 0x00	; 0
    4c4e:	c9 f0       	breq	.+50     	; 0x4c82 <fdevopen+0x88>
    4c50:	c0 87       	std	Z+8, r28	; 0x08
    4c52:	d1 87       	std	Z+9, r29	; 0x09
    4c54:	83 81       	ldd	r24, Z+3	; 0x03
    4c56:	82 60       	ori	r24, 0x02	; 2
    4c58:	83 83       	std	Z+3, r24	; 0x03
    4c5a:	80 91 9b 23 	lds	r24, 0x239B	; 0x80239b <__iob+0x2>
    4c5e:	90 91 9c 23 	lds	r25, 0x239C	; 0x80239c <__iob+0x3>
    4c62:	89 2b       	or	r24, r25
    4c64:	71 f4       	brne	.+28     	; 0x4c82 <fdevopen+0x88>
    4c66:	e0 93 9b 23 	sts	0x239B, r30	; 0x80239b <__iob+0x2>
    4c6a:	f0 93 9c 23 	sts	0x239C, r31	; 0x80239c <__iob+0x3>
    4c6e:	80 91 9d 23 	lds	r24, 0x239D	; 0x80239d <__iob+0x4>
    4c72:	90 91 9e 23 	lds	r25, 0x239E	; 0x80239e <__iob+0x5>
    4c76:	89 2b       	or	r24, r25
    4c78:	21 f4       	brne	.+8      	; 0x4c82 <fdevopen+0x88>
    4c7a:	e0 93 9d 23 	sts	0x239D, r30	; 0x80239d <__iob+0x4>
    4c7e:	f0 93 9e 23 	sts	0x239E, r31	; 0x80239e <__iob+0x5>
    4c82:	cf 01       	movw	r24, r30
    4c84:	df 91       	pop	r29
    4c86:	cf 91       	pop	r28
    4c88:	1f 91       	pop	r17
    4c8a:	0f 91       	pop	r16
    4c8c:	08 95       	ret

00004c8e <fputc>:
    4c8e:	0f 93       	push	r16
    4c90:	1f 93       	push	r17
    4c92:	cf 93       	push	r28
    4c94:	df 93       	push	r29
    4c96:	fb 01       	movw	r30, r22
    4c98:	23 81       	ldd	r18, Z+3	; 0x03
    4c9a:	21 fd       	sbrc	r18, 1
    4c9c:	03 c0       	rjmp	.+6      	; 0x4ca4 <fputc+0x16>
    4c9e:	8f ef       	ldi	r24, 0xFF	; 255
    4ca0:	9f ef       	ldi	r25, 0xFF	; 255
    4ca2:	2c c0       	rjmp	.+88     	; 0x4cfc <fputc+0x6e>
    4ca4:	22 ff       	sbrs	r18, 2
    4ca6:	16 c0       	rjmp	.+44     	; 0x4cd4 <fputc+0x46>
    4ca8:	46 81       	ldd	r20, Z+6	; 0x06
    4caa:	57 81       	ldd	r21, Z+7	; 0x07
    4cac:	24 81       	ldd	r18, Z+4	; 0x04
    4cae:	35 81       	ldd	r19, Z+5	; 0x05
    4cb0:	42 17       	cp	r20, r18
    4cb2:	53 07       	cpc	r21, r19
    4cb4:	44 f4       	brge	.+16     	; 0x4cc6 <fputc+0x38>
    4cb6:	a0 81       	ld	r26, Z
    4cb8:	b1 81       	ldd	r27, Z+1	; 0x01
    4cba:	9d 01       	movw	r18, r26
    4cbc:	2f 5f       	subi	r18, 0xFF	; 255
    4cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    4cc0:	20 83       	st	Z, r18
    4cc2:	31 83       	std	Z+1, r19	; 0x01
    4cc4:	8c 93       	st	X, r24
    4cc6:	26 81       	ldd	r18, Z+6	; 0x06
    4cc8:	37 81       	ldd	r19, Z+7	; 0x07
    4cca:	2f 5f       	subi	r18, 0xFF	; 255
    4ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    4cce:	26 83       	std	Z+6, r18	; 0x06
    4cd0:	37 83       	std	Z+7, r19	; 0x07
    4cd2:	14 c0       	rjmp	.+40     	; 0x4cfc <fputc+0x6e>
    4cd4:	8b 01       	movw	r16, r22
    4cd6:	ec 01       	movw	r28, r24
    4cd8:	fb 01       	movw	r30, r22
    4cda:	00 84       	ldd	r0, Z+8	; 0x08
    4cdc:	f1 85       	ldd	r31, Z+9	; 0x09
    4cde:	e0 2d       	mov	r30, r0
    4ce0:	19 95       	eicall
    4ce2:	89 2b       	or	r24, r25
    4ce4:	e1 f6       	brne	.-72     	; 0x4c9e <fputc+0x10>
    4ce6:	d8 01       	movw	r26, r16
    4ce8:	16 96       	adiw	r26, 0x06	; 6
    4cea:	8d 91       	ld	r24, X+
    4cec:	9c 91       	ld	r25, X
    4cee:	17 97       	sbiw	r26, 0x07	; 7
    4cf0:	01 96       	adiw	r24, 0x01	; 1
    4cf2:	16 96       	adiw	r26, 0x06	; 6
    4cf4:	8d 93       	st	X+, r24
    4cf6:	9c 93       	st	X, r25
    4cf8:	17 97       	sbiw	r26, 0x07	; 7
    4cfa:	ce 01       	movw	r24, r28
    4cfc:	df 91       	pop	r29
    4cfe:	cf 91       	pop	r28
    4d00:	1f 91       	pop	r17
    4d02:	0f 91       	pop	r16
    4d04:	08 95       	ret

00004d06 <printf>:
    4d06:	cf 93       	push	r28
    4d08:	df 93       	push	r29
    4d0a:	cd b7       	in	r28, 0x3d	; 61
    4d0c:	de b7       	in	r29, 0x3e	; 62
    4d0e:	ae 01       	movw	r20, r28
    4d10:	4a 5f       	subi	r20, 0xFA	; 250
    4d12:	5f 4f       	sbci	r21, 0xFF	; 255
    4d14:	fa 01       	movw	r30, r20
    4d16:	61 91       	ld	r22, Z+
    4d18:	71 91       	ld	r23, Z+
    4d1a:	af 01       	movw	r20, r30
    4d1c:	80 91 9b 23 	lds	r24, 0x239B	; 0x80239b <__iob+0x2>
    4d20:	90 91 9c 23 	lds	r25, 0x239C	; 0x80239c <__iob+0x3>
    4d24:	c7 d9       	rcall	.-3186   	; 0x40b4 <vfprintf>
    4d26:	df 91       	pop	r29
    4d28:	cf 91       	pop	r28
    4d2a:	08 95       	ret

00004d2c <putchar>:
    4d2c:	60 91 9b 23 	lds	r22, 0x239B	; 0x80239b <__iob+0x2>
    4d30:	70 91 9c 23 	lds	r23, 0x239C	; 0x80239c <__iob+0x3>
    4d34:	ac cf       	rjmp	.-168    	; 0x4c8e <fputc>

00004d36 <puts>:
    4d36:	0f 93       	push	r16
    4d38:	1f 93       	push	r17
    4d3a:	cf 93       	push	r28
    4d3c:	df 93       	push	r29
    4d3e:	e0 91 9b 23 	lds	r30, 0x239B	; 0x80239b <__iob+0x2>
    4d42:	f0 91 9c 23 	lds	r31, 0x239C	; 0x80239c <__iob+0x3>
    4d46:	23 81       	ldd	r18, Z+3	; 0x03
    4d48:	21 ff       	sbrs	r18, 1
    4d4a:	1b c0       	rjmp	.+54     	; 0x4d82 <puts+0x4c>
    4d4c:	8c 01       	movw	r16, r24
    4d4e:	d0 e0       	ldi	r29, 0x00	; 0
    4d50:	c0 e0       	ldi	r28, 0x00	; 0
    4d52:	f8 01       	movw	r30, r16
    4d54:	81 91       	ld	r24, Z+
    4d56:	8f 01       	movw	r16, r30
    4d58:	60 91 9b 23 	lds	r22, 0x239B	; 0x80239b <__iob+0x2>
    4d5c:	70 91 9c 23 	lds	r23, 0x239C	; 0x80239c <__iob+0x3>
    4d60:	db 01       	movw	r26, r22
    4d62:	18 96       	adiw	r26, 0x08	; 8
    4d64:	ed 91       	ld	r30, X+
    4d66:	fc 91       	ld	r31, X
    4d68:	19 97       	sbiw	r26, 0x09	; 9
    4d6a:	88 23       	and	r24, r24
    4d6c:	31 f0       	breq	.+12     	; 0x4d7a <puts+0x44>
    4d6e:	19 95       	eicall
    4d70:	89 2b       	or	r24, r25
    4d72:	79 f3       	breq	.-34     	; 0x4d52 <puts+0x1c>
    4d74:	df ef       	ldi	r29, 0xFF	; 255
    4d76:	cf ef       	ldi	r28, 0xFF	; 255
    4d78:	ec cf       	rjmp	.-40     	; 0x4d52 <puts+0x1c>
    4d7a:	8a e0       	ldi	r24, 0x0A	; 10
    4d7c:	19 95       	eicall
    4d7e:	89 2b       	or	r24, r25
    4d80:	19 f0       	breq	.+6      	; 0x4d88 <puts+0x52>
    4d82:	8f ef       	ldi	r24, 0xFF	; 255
    4d84:	9f ef       	ldi	r25, 0xFF	; 255
    4d86:	02 c0       	rjmp	.+4      	; 0x4d8c <puts+0x56>
    4d88:	8d 2f       	mov	r24, r29
    4d8a:	9c 2f       	mov	r25, r28
    4d8c:	df 91       	pop	r29
    4d8e:	cf 91       	pop	r28
    4d90:	1f 91       	pop	r17
    4d92:	0f 91       	pop	r16
    4d94:	08 95       	ret

00004d96 <__ultoa_invert>:
    4d96:	fa 01       	movw	r30, r20
    4d98:	aa 27       	eor	r26, r26
    4d9a:	28 30       	cpi	r18, 0x08	; 8
    4d9c:	51 f1       	breq	.+84     	; 0x4df2 <__ultoa_invert+0x5c>
    4d9e:	20 31       	cpi	r18, 0x10	; 16
    4da0:	81 f1       	breq	.+96     	; 0x4e02 <__ultoa_invert+0x6c>
    4da2:	e8 94       	clt
    4da4:	6f 93       	push	r22
    4da6:	6e 7f       	andi	r22, 0xFE	; 254
    4da8:	6e 5f       	subi	r22, 0xFE	; 254
    4daa:	7f 4f       	sbci	r23, 0xFF	; 255
    4dac:	8f 4f       	sbci	r24, 0xFF	; 255
    4dae:	9f 4f       	sbci	r25, 0xFF	; 255
    4db0:	af 4f       	sbci	r26, 0xFF	; 255
    4db2:	b1 e0       	ldi	r27, 0x01	; 1
    4db4:	3e d0       	rcall	.+124    	; 0x4e32 <__ultoa_invert+0x9c>
    4db6:	b4 e0       	ldi	r27, 0x04	; 4
    4db8:	3c d0       	rcall	.+120    	; 0x4e32 <__ultoa_invert+0x9c>
    4dba:	67 0f       	add	r22, r23
    4dbc:	78 1f       	adc	r23, r24
    4dbe:	89 1f       	adc	r24, r25
    4dc0:	9a 1f       	adc	r25, r26
    4dc2:	a1 1d       	adc	r26, r1
    4dc4:	68 0f       	add	r22, r24
    4dc6:	79 1f       	adc	r23, r25
    4dc8:	8a 1f       	adc	r24, r26
    4dca:	91 1d       	adc	r25, r1
    4dcc:	a1 1d       	adc	r26, r1
    4dce:	6a 0f       	add	r22, r26
    4dd0:	71 1d       	adc	r23, r1
    4dd2:	81 1d       	adc	r24, r1
    4dd4:	91 1d       	adc	r25, r1
    4dd6:	a1 1d       	adc	r26, r1
    4dd8:	20 d0       	rcall	.+64     	; 0x4e1a <__ultoa_invert+0x84>
    4dda:	09 f4       	brne	.+2      	; 0x4dde <__ultoa_invert+0x48>
    4ddc:	68 94       	set
    4dde:	3f 91       	pop	r19
    4de0:	2a e0       	ldi	r18, 0x0A	; 10
    4de2:	26 9f       	mul	r18, r22
    4de4:	11 24       	eor	r1, r1
    4de6:	30 19       	sub	r19, r0
    4de8:	30 5d       	subi	r19, 0xD0	; 208
    4dea:	31 93       	st	Z+, r19
    4dec:	de f6       	brtc	.-74     	; 0x4da4 <__ultoa_invert+0xe>
    4dee:	cf 01       	movw	r24, r30
    4df0:	08 95       	ret
    4df2:	46 2f       	mov	r20, r22
    4df4:	47 70       	andi	r20, 0x07	; 7
    4df6:	40 5d       	subi	r20, 0xD0	; 208
    4df8:	41 93       	st	Z+, r20
    4dfa:	b3 e0       	ldi	r27, 0x03	; 3
    4dfc:	0f d0       	rcall	.+30     	; 0x4e1c <__ultoa_invert+0x86>
    4dfe:	c9 f7       	brne	.-14     	; 0x4df2 <__ultoa_invert+0x5c>
    4e00:	f6 cf       	rjmp	.-20     	; 0x4dee <__ultoa_invert+0x58>
    4e02:	46 2f       	mov	r20, r22
    4e04:	4f 70       	andi	r20, 0x0F	; 15
    4e06:	40 5d       	subi	r20, 0xD0	; 208
    4e08:	4a 33       	cpi	r20, 0x3A	; 58
    4e0a:	18 f0       	brcs	.+6      	; 0x4e12 <__ultoa_invert+0x7c>
    4e0c:	49 5d       	subi	r20, 0xD9	; 217
    4e0e:	31 fd       	sbrc	r19, 1
    4e10:	40 52       	subi	r20, 0x20	; 32
    4e12:	41 93       	st	Z+, r20
    4e14:	02 d0       	rcall	.+4      	; 0x4e1a <__ultoa_invert+0x84>
    4e16:	a9 f7       	brne	.-22     	; 0x4e02 <__ultoa_invert+0x6c>
    4e18:	ea cf       	rjmp	.-44     	; 0x4dee <__ultoa_invert+0x58>
    4e1a:	b4 e0       	ldi	r27, 0x04	; 4
    4e1c:	a6 95       	lsr	r26
    4e1e:	97 95       	ror	r25
    4e20:	87 95       	ror	r24
    4e22:	77 95       	ror	r23
    4e24:	67 95       	ror	r22
    4e26:	ba 95       	dec	r27
    4e28:	c9 f7       	brne	.-14     	; 0x4e1c <__ultoa_invert+0x86>
    4e2a:	00 97       	sbiw	r24, 0x00	; 0
    4e2c:	61 05       	cpc	r22, r1
    4e2e:	71 05       	cpc	r23, r1
    4e30:	08 95       	ret
    4e32:	9b 01       	movw	r18, r22
    4e34:	ac 01       	movw	r20, r24
    4e36:	0a 2e       	mov	r0, r26
    4e38:	06 94       	lsr	r0
    4e3a:	57 95       	ror	r21
    4e3c:	47 95       	ror	r20
    4e3e:	37 95       	ror	r19
    4e40:	27 95       	ror	r18
    4e42:	ba 95       	dec	r27
    4e44:	c9 f7       	brne	.-14     	; 0x4e38 <__ultoa_invert+0xa2>
    4e46:	62 0f       	add	r22, r18
    4e48:	73 1f       	adc	r23, r19
    4e4a:	84 1f       	adc	r24, r20
    4e4c:	95 1f       	adc	r25, r21
    4e4e:	a0 1d       	adc	r26, r0
    4e50:	08 95       	ret

00004e52 <calloc>:
    4e52:	0f 93       	push	r16
    4e54:	1f 93       	push	r17
    4e56:	cf 93       	push	r28
    4e58:	df 93       	push	r29
    4e5a:	86 9f       	mul	r24, r22
    4e5c:	80 01       	movw	r16, r0
    4e5e:	87 9f       	mul	r24, r23
    4e60:	10 0d       	add	r17, r0
    4e62:	96 9f       	mul	r25, r22
    4e64:	10 0d       	add	r17, r0
    4e66:	11 24       	eor	r1, r1
    4e68:	c8 01       	movw	r24, r16
    4e6a:	0d d0       	rcall	.+26     	; 0x4e86 <malloc>
    4e6c:	ec 01       	movw	r28, r24
    4e6e:	00 97       	sbiw	r24, 0x00	; 0
    4e70:	21 f0       	breq	.+8      	; 0x4e7a <calloc+0x28>
    4e72:	a8 01       	movw	r20, r16
    4e74:	60 e0       	ldi	r22, 0x00	; 0
    4e76:	70 e0       	ldi	r23, 0x00	; 0
    4e78:	27 d1       	rcall	.+590    	; 0x50c8 <memset>
    4e7a:	ce 01       	movw	r24, r28
    4e7c:	df 91       	pop	r29
    4e7e:	cf 91       	pop	r28
    4e80:	1f 91       	pop	r17
    4e82:	0f 91       	pop	r16
    4e84:	08 95       	ret

00004e86 <malloc>:
    4e86:	0f 93       	push	r16
    4e88:	1f 93       	push	r17
    4e8a:	cf 93       	push	r28
    4e8c:	df 93       	push	r29
    4e8e:	82 30       	cpi	r24, 0x02	; 2
    4e90:	91 05       	cpc	r25, r1
    4e92:	10 f4       	brcc	.+4      	; 0x4e98 <malloc+0x12>
    4e94:	82 e0       	ldi	r24, 0x02	; 2
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	e0 91 a1 23 	lds	r30, 0x23A1	; 0x8023a1 <__flp>
    4e9c:	f0 91 a2 23 	lds	r31, 0x23A2	; 0x8023a2 <__flp+0x1>
    4ea0:	20 e0       	ldi	r18, 0x00	; 0
    4ea2:	30 e0       	ldi	r19, 0x00	; 0
    4ea4:	a0 e0       	ldi	r26, 0x00	; 0
    4ea6:	b0 e0       	ldi	r27, 0x00	; 0
    4ea8:	30 97       	sbiw	r30, 0x00	; 0
    4eaa:	19 f1       	breq	.+70     	; 0x4ef2 <malloc+0x6c>
    4eac:	40 81       	ld	r20, Z
    4eae:	51 81       	ldd	r21, Z+1	; 0x01
    4eb0:	02 81       	ldd	r16, Z+2	; 0x02
    4eb2:	13 81       	ldd	r17, Z+3	; 0x03
    4eb4:	48 17       	cp	r20, r24
    4eb6:	59 07       	cpc	r21, r25
    4eb8:	c8 f0       	brcs	.+50     	; 0x4eec <malloc+0x66>
    4eba:	84 17       	cp	r24, r20
    4ebc:	95 07       	cpc	r25, r21
    4ebe:	69 f4       	brne	.+26     	; 0x4eda <malloc+0x54>
    4ec0:	10 97       	sbiw	r26, 0x00	; 0
    4ec2:	31 f0       	breq	.+12     	; 0x4ed0 <malloc+0x4a>
    4ec4:	12 96       	adiw	r26, 0x02	; 2
    4ec6:	0c 93       	st	X, r16
    4ec8:	12 97       	sbiw	r26, 0x02	; 2
    4eca:	13 96       	adiw	r26, 0x03	; 3
    4ecc:	1c 93       	st	X, r17
    4ece:	27 c0       	rjmp	.+78     	; 0x4f1e <malloc+0x98>
    4ed0:	00 93 a1 23 	sts	0x23A1, r16	; 0x8023a1 <__flp>
    4ed4:	10 93 a2 23 	sts	0x23A2, r17	; 0x8023a2 <__flp+0x1>
    4ed8:	22 c0       	rjmp	.+68     	; 0x4f1e <malloc+0x98>
    4eda:	21 15       	cp	r18, r1
    4edc:	31 05       	cpc	r19, r1
    4ede:	19 f0       	breq	.+6      	; 0x4ee6 <malloc+0x60>
    4ee0:	42 17       	cp	r20, r18
    4ee2:	53 07       	cpc	r21, r19
    4ee4:	18 f4       	brcc	.+6      	; 0x4eec <malloc+0x66>
    4ee6:	9a 01       	movw	r18, r20
    4ee8:	bd 01       	movw	r22, r26
    4eea:	ef 01       	movw	r28, r30
    4eec:	df 01       	movw	r26, r30
    4eee:	f8 01       	movw	r30, r16
    4ef0:	db cf       	rjmp	.-74     	; 0x4ea8 <malloc+0x22>
    4ef2:	21 15       	cp	r18, r1
    4ef4:	31 05       	cpc	r19, r1
    4ef6:	f9 f0       	breq	.+62     	; 0x4f36 <malloc+0xb0>
    4ef8:	28 1b       	sub	r18, r24
    4efa:	39 0b       	sbc	r19, r25
    4efc:	24 30       	cpi	r18, 0x04	; 4
    4efe:	31 05       	cpc	r19, r1
    4f00:	80 f4       	brcc	.+32     	; 0x4f22 <malloc+0x9c>
    4f02:	8a 81       	ldd	r24, Y+2	; 0x02
    4f04:	9b 81       	ldd	r25, Y+3	; 0x03
    4f06:	61 15       	cp	r22, r1
    4f08:	71 05       	cpc	r23, r1
    4f0a:	21 f0       	breq	.+8      	; 0x4f14 <malloc+0x8e>
    4f0c:	fb 01       	movw	r30, r22
    4f0e:	82 83       	std	Z+2, r24	; 0x02
    4f10:	93 83       	std	Z+3, r25	; 0x03
    4f12:	04 c0       	rjmp	.+8      	; 0x4f1c <malloc+0x96>
    4f14:	80 93 a1 23 	sts	0x23A1, r24	; 0x8023a1 <__flp>
    4f18:	90 93 a2 23 	sts	0x23A2, r25	; 0x8023a2 <__flp+0x1>
    4f1c:	fe 01       	movw	r30, r28
    4f1e:	32 96       	adiw	r30, 0x02	; 2
    4f20:	44 c0       	rjmp	.+136    	; 0x4faa <malloc+0x124>
    4f22:	fe 01       	movw	r30, r28
    4f24:	e2 0f       	add	r30, r18
    4f26:	f3 1f       	adc	r31, r19
    4f28:	81 93       	st	Z+, r24
    4f2a:	91 93       	st	Z+, r25
    4f2c:	22 50       	subi	r18, 0x02	; 2
    4f2e:	31 09       	sbc	r19, r1
    4f30:	28 83       	st	Y, r18
    4f32:	39 83       	std	Y+1, r19	; 0x01
    4f34:	3a c0       	rjmp	.+116    	; 0x4faa <malloc+0x124>
    4f36:	20 91 9f 23 	lds	r18, 0x239F	; 0x80239f <__brkval>
    4f3a:	30 91 a0 23 	lds	r19, 0x23A0	; 0x8023a0 <__brkval+0x1>
    4f3e:	23 2b       	or	r18, r19
    4f40:	41 f4       	brne	.+16     	; 0x4f52 <malloc+0xcc>
    4f42:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4f46:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    4f4a:	20 93 9f 23 	sts	0x239F, r18	; 0x80239f <__brkval>
    4f4e:	30 93 a0 23 	sts	0x23A0, r19	; 0x8023a0 <__brkval+0x1>
    4f52:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4f56:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    4f5a:	21 15       	cp	r18, r1
    4f5c:	31 05       	cpc	r19, r1
    4f5e:	41 f4       	brne	.+16     	; 0x4f70 <malloc+0xea>
    4f60:	2d b7       	in	r18, 0x3d	; 61
    4f62:	3e b7       	in	r19, 0x3e	; 62
    4f64:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4f68:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    4f6c:	24 1b       	sub	r18, r20
    4f6e:	35 0b       	sbc	r19, r21
    4f70:	e0 91 9f 23 	lds	r30, 0x239F	; 0x80239f <__brkval>
    4f74:	f0 91 a0 23 	lds	r31, 0x23A0	; 0x8023a0 <__brkval+0x1>
    4f78:	e2 17       	cp	r30, r18
    4f7a:	f3 07       	cpc	r31, r19
    4f7c:	a0 f4       	brcc	.+40     	; 0x4fa6 <malloc+0x120>
    4f7e:	2e 1b       	sub	r18, r30
    4f80:	3f 0b       	sbc	r19, r31
    4f82:	28 17       	cp	r18, r24
    4f84:	39 07       	cpc	r19, r25
    4f86:	78 f0       	brcs	.+30     	; 0x4fa6 <malloc+0x120>
    4f88:	ac 01       	movw	r20, r24
    4f8a:	4e 5f       	subi	r20, 0xFE	; 254
    4f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    4f8e:	24 17       	cp	r18, r20
    4f90:	35 07       	cpc	r19, r21
    4f92:	48 f0       	brcs	.+18     	; 0x4fa6 <malloc+0x120>
    4f94:	4e 0f       	add	r20, r30
    4f96:	5f 1f       	adc	r21, r31
    4f98:	40 93 9f 23 	sts	0x239F, r20	; 0x80239f <__brkval>
    4f9c:	50 93 a0 23 	sts	0x23A0, r21	; 0x8023a0 <__brkval+0x1>
    4fa0:	81 93       	st	Z+, r24
    4fa2:	91 93       	st	Z+, r25
    4fa4:	02 c0       	rjmp	.+4      	; 0x4faa <malloc+0x124>
    4fa6:	e0 e0       	ldi	r30, 0x00	; 0
    4fa8:	f0 e0       	ldi	r31, 0x00	; 0
    4faa:	cf 01       	movw	r24, r30
    4fac:	df 91       	pop	r29
    4fae:	cf 91       	pop	r28
    4fb0:	1f 91       	pop	r17
    4fb2:	0f 91       	pop	r16
    4fb4:	08 95       	ret

00004fb6 <free>:
    4fb6:	cf 93       	push	r28
    4fb8:	df 93       	push	r29
    4fba:	00 97       	sbiw	r24, 0x00	; 0
    4fbc:	09 f4       	brne	.+2      	; 0x4fc0 <free+0xa>
    4fbe:	81 c0       	rjmp	.+258    	; 0x50c2 <free+0x10c>
    4fc0:	fc 01       	movw	r30, r24
    4fc2:	32 97       	sbiw	r30, 0x02	; 2
    4fc4:	12 82       	std	Z+2, r1	; 0x02
    4fc6:	13 82       	std	Z+3, r1	; 0x03
    4fc8:	a0 91 a1 23 	lds	r26, 0x23A1	; 0x8023a1 <__flp>
    4fcc:	b0 91 a2 23 	lds	r27, 0x23A2	; 0x8023a2 <__flp+0x1>
    4fd0:	10 97       	sbiw	r26, 0x00	; 0
    4fd2:	81 f4       	brne	.+32     	; 0x4ff4 <free+0x3e>
    4fd4:	20 81       	ld	r18, Z
    4fd6:	31 81       	ldd	r19, Z+1	; 0x01
    4fd8:	82 0f       	add	r24, r18
    4fda:	93 1f       	adc	r25, r19
    4fdc:	20 91 9f 23 	lds	r18, 0x239F	; 0x80239f <__brkval>
    4fe0:	30 91 a0 23 	lds	r19, 0x23A0	; 0x8023a0 <__brkval+0x1>
    4fe4:	28 17       	cp	r18, r24
    4fe6:	39 07       	cpc	r19, r25
    4fe8:	51 f5       	brne	.+84     	; 0x503e <free+0x88>
    4fea:	e0 93 9f 23 	sts	0x239F, r30	; 0x80239f <__brkval>
    4fee:	f0 93 a0 23 	sts	0x23A0, r31	; 0x8023a0 <__brkval+0x1>
    4ff2:	67 c0       	rjmp	.+206    	; 0x50c2 <free+0x10c>
    4ff4:	ed 01       	movw	r28, r26
    4ff6:	20 e0       	ldi	r18, 0x00	; 0
    4ff8:	30 e0       	ldi	r19, 0x00	; 0
    4ffa:	ce 17       	cp	r28, r30
    4ffc:	df 07       	cpc	r29, r31
    4ffe:	40 f4       	brcc	.+16     	; 0x5010 <free+0x5a>
    5000:	4a 81       	ldd	r20, Y+2	; 0x02
    5002:	5b 81       	ldd	r21, Y+3	; 0x03
    5004:	9e 01       	movw	r18, r28
    5006:	41 15       	cp	r20, r1
    5008:	51 05       	cpc	r21, r1
    500a:	f1 f0       	breq	.+60     	; 0x5048 <free+0x92>
    500c:	ea 01       	movw	r28, r20
    500e:	f5 cf       	rjmp	.-22     	; 0x4ffa <free+0x44>
    5010:	c2 83       	std	Z+2, r28	; 0x02
    5012:	d3 83       	std	Z+3, r29	; 0x03
    5014:	40 81       	ld	r20, Z
    5016:	51 81       	ldd	r21, Z+1	; 0x01
    5018:	84 0f       	add	r24, r20
    501a:	95 1f       	adc	r25, r21
    501c:	c8 17       	cp	r28, r24
    501e:	d9 07       	cpc	r29, r25
    5020:	59 f4       	brne	.+22     	; 0x5038 <free+0x82>
    5022:	88 81       	ld	r24, Y
    5024:	99 81       	ldd	r25, Y+1	; 0x01
    5026:	84 0f       	add	r24, r20
    5028:	95 1f       	adc	r25, r21
    502a:	02 96       	adiw	r24, 0x02	; 2
    502c:	80 83       	st	Z, r24
    502e:	91 83       	std	Z+1, r25	; 0x01
    5030:	8a 81       	ldd	r24, Y+2	; 0x02
    5032:	9b 81       	ldd	r25, Y+3	; 0x03
    5034:	82 83       	std	Z+2, r24	; 0x02
    5036:	93 83       	std	Z+3, r25	; 0x03
    5038:	21 15       	cp	r18, r1
    503a:	31 05       	cpc	r19, r1
    503c:	29 f4       	brne	.+10     	; 0x5048 <free+0x92>
    503e:	e0 93 a1 23 	sts	0x23A1, r30	; 0x8023a1 <__flp>
    5042:	f0 93 a2 23 	sts	0x23A2, r31	; 0x8023a2 <__flp+0x1>
    5046:	3d c0       	rjmp	.+122    	; 0x50c2 <free+0x10c>
    5048:	e9 01       	movw	r28, r18
    504a:	ea 83       	std	Y+2, r30	; 0x02
    504c:	fb 83       	std	Y+3, r31	; 0x03
    504e:	49 91       	ld	r20, Y+
    5050:	59 91       	ld	r21, Y+
    5052:	c4 0f       	add	r28, r20
    5054:	d5 1f       	adc	r29, r21
    5056:	ec 17       	cp	r30, r28
    5058:	fd 07       	cpc	r31, r29
    505a:	61 f4       	brne	.+24     	; 0x5074 <free+0xbe>
    505c:	80 81       	ld	r24, Z
    505e:	91 81       	ldd	r25, Z+1	; 0x01
    5060:	84 0f       	add	r24, r20
    5062:	95 1f       	adc	r25, r21
    5064:	02 96       	adiw	r24, 0x02	; 2
    5066:	e9 01       	movw	r28, r18
    5068:	88 83       	st	Y, r24
    506a:	99 83       	std	Y+1, r25	; 0x01
    506c:	82 81       	ldd	r24, Z+2	; 0x02
    506e:	93 81       	ldd	r25, Z+3	; 0x03
    5070:	8a 83       	std	Y+2, r24	; 0x02
    5072:	9b 83       	std	Y+3, r25	; 0x03
    5074:	e0 e0       	ldi	r30, 0x00	; 0
    5076:	f0 e0       	ldi	r31, 0x00	; 0
    5078:	12 96       	adiw	r26, 0x02	; 2
    507a:	8d 91       	ld	r24, X+
    507c:	9c 91       	ld	r25, X
    507e:	13 97       	sbiw	r26, 0x03	; 3
    5080:	00 97       	sbiw	r24, 0x00	; 0
    5082:	19 f0       	breq	.+6      	; 0x508a <free+0xd4>
    5084:	fd 01       	movw	r30, r26
    5086:	dc 01       	movw	r26, r24
    5088:	f7 cf       	rjmp	.-18     	; 0x5078 <free+0xc2>
    508a:	8d 91       	ld	r24, X+
    508c:	9c 91       	ld	r25, X
    508e:	11 97       	sbiw	r26, 0x01	; 1
    5090:	9d 01       	movw	r18, r26
    5092:	2e 5f       	subi	r18, 0xFE	; 254
    5094:	3f 4f       	sbci	r19, 0xFF	; 255
    5096:	82 0f       	add	r24, r18
    5098:	93 1f       	adc	r25, r19
    509a:	20 91 9f 23 	lds	r18, 0x239F	; 0x80239f <__brkval>
    509e:	30 91 a0 23 	lds	r19, 0x23A0	; 0x8023a0 <__brkval+0x1>
    50a2:	28 17       	cp	r18, r24
    50a4:	39 07       	cpc	r19, r25
    50a6:	69 f4       	brne	.+26     	; 0x50c2 <free+0x10c>
    50a8:	30 97       	sbiw	r30, 0x00	; 0
    50aa:	29 f4       	brne	.+10     	; 0x50b6 <free+0x100>
    50ac:	10 92 a1 23 	sts	0x23A1, r1	; 0x8023a1 <__flp>
    50b0:	10 92 a2 23 	sts	0x23A2, r1	; 0x8023a2 <__flp+0x1>
    50b4:	02 c0       	rjmp	.+4      	; 0x50ba <free+0x104>
    50b6:	12 82       	std	Z+2, r1	; 0x02
    50b8:	13 82       	std	Z+3, r1	; 0x03
    50ba:	a0 93 9f 23 	sts	0x239F, r26	; 0x80239f <__brkval>
    50be:	b0 93 a0 23 	sts	0x23A0, r27	; 0x8023a0 <__brkval+0x1>
    50c2:	df 91       	pop	r29
    50c4:	cf 91       	pop	r28
    50c6:	08 95       	ret

000050c8 <memset>:
    50c8:	dc 01       	movw	r26, r24
    50ca:	01 c0       	rjmp	.+2      	; 0x50ce <memset+0x6>
    50cc:	6d 93       	st	X+, r22
    50ce:	41 50       	subi	r20, 0x01	; 1
    50d0:	50 40       	sbci	r21, 0x00	; 0
    50d2:	e0 f7       	brcc	.-8      	; 0x50cc <memset+0x4>
    50d4:	08 95       	ret

000050d6 <_exit>:
    50d6:	f8 94       	cli

000050d8 <__stop_program>:
    50d8:	ff cf       	rjmp	.-2      	; 0x50d8 <__stop_program>
