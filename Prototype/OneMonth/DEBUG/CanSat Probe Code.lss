
CanSat Probe Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00802000  000046d4  00004768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000080  00802046  00802046  000047ae  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000047ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000480c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000598  00000000  00000000  00004850  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010e60  00000000  00000000  00004de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005e02  00000000  00000000  00015c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000093cd  00000000  00000000  0001ba4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c54  00000000  00000000  00024e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00034c19  00000000  00000000  00026a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006046  00000000  00000000  0005b685  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000500  00000000  00000000  000616d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c262  00000000  00000000  00061bd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fe c1       	rjmp	.+1020   	; 0x3fe <__ctors_end>
       2:	00 00       	nop
       4:	22 c2       	rjmp	.+1092   	; 0x44a <__bad_interrupt>
       6:	00 00       	nop
       8:	20 c2       	rjmp	.+1088   	; 0x44a <__bad_interrupt>
       a:	00 00       	nop
       c:	1e c2       	rjmp	.+1084   	; 0x44a <__bad_interrupt>
       e:	00 00       	nop
      10:	1c c2       	rjmp	.+1080   	; 0x44a <__bad_interrupt>
      12:	00 00       	nop
      14:	1a c2       	rjmp	.+1076   	; 0x44a <__bad_interrupt>
      16:	00 00       	nop
      18:	18 c2       	rjmp	.+1072   	; 0x44a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	16 c2       	rjmp	.+1068   	; 0x44a <__bad_interrupt>
      1e:	00 00       	nop
      20:	14 c2       	rjmp	.+1064   	; 0x44a <__bad_interrupt>
      22:	00 00       	nop
      24:	12 c2       	rjmp	.+1060   	; 0x44a <__bad_interrupt>
      26:	00 00       	nop
      28:	10 c2       	rjmp	.+1056   	; 0x44a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0e c2       	rjmp	.+1052   	; 0x44a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c c2       	rjmp	.+1048   	; 0x44a <__bad_interrupt>
      32:	00 00       	nop
      34:	a2 c2       	rjmp	.+1348   	; 0x57a <__vector_13>
      36:	00 00       	nop
      38:	ea c5       	rjmp	.+3028   	; 0xc0e <__vector_14>
      3a:	00 00       	nop
      3c:	20 c6       	rjmp	.+3136   	; 0xc7e <__vector_15>
      3e:	00 00       	nop
      40:	56 c6       	rjmp	.+3244   	; 0xcee <__vector_16>
      42:	00 00       	nop
      44:	8c c6       	rjmp	.+3352   	; 0xd5e <__vector_17>
      46:	00 00       	nop
      48:	c2 c6       	rjmp	.+3460   	; 0xdce <__vector_18>
      4a:	00 00       	nop
      4c:	f8 c6       	rjmp	.+3568   	; 0xe3e <__vector_19>
      4e:	00 00       	nop
      50:	2e c7       	rjmp	.+3676   	; 0xeae <__vector_20>
      52:	00 00       	nop
      54:	64 c7       	rjmp	.+3784   	; 0xf1e <__vector_21>
      56:	00 00       	nop
      58:	9a c7       	rjmp	.+3892   	; 0xf8e <__vector_22>
      5a:	00 00       	nop
      5c:	d0 c7       	rjmp	.+4000   	; 0xffe <__vector_23>
      5e:	00 00       	nop
      60:	f4 c1       	rjmp	.+1000   	; 0x44a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__vector_25>
      68:	f0 c1       	rjmp	.+992    	; 0x44a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ee c1       	rjmp	.+988    	; 0x44a <__bad_interrupt>
      6e:	00 00       	nop
      70:	ec c1       	rjmp	.+984    	; 0x44a <__bad_interrupt>
      72:	00 00       	nop
      74:	ea c1       	rjmp	.+980    	; 0x44a <__bad_interrupt>
      76:	00 00       	nop
      78:	e8 c1       	rjmp	.+976    	; 0x44a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e6 c1       	rjmp	.+972    	; 0x44a <__bad_interrupt>
      7e:	00 00       	nop
      80:	e4 c1       	rjmp	.+968    	; 0x44a <__bad_interrupt>
      82:	00 00       	nop
      84:	e2 c1       	rjmp	.+964    	; 0x44a <__bad_interrupt>
      86:	00 00       	nop
      88:	e0 c1       	rjmp	.+960    	; 0x44a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	de c1       	rjmp	.+956    	; 0x44a <__bad_interrupt>
      8e:	00 00       	nop
      90:	dc c1       	rjmp	.+952    	; 0x44a <__bad_interrupt>
      92:	00 00       	nop
      94:	da c1       	rjmp	.+948    	; 0x44a <__bad_interrupt>
      96:	00 00       	nop
      98:	d8 c1       	rjmp	.+944    	; 0x44a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	b4 c4       	rjmp	.+2408   	; 0xa06 <__vector_39>
      9e:	00 00       	nop
      a0:	ef c4       	rjmp	.+2526   	; 0xa80 <__vector_40>
      a2:	00 00       	nop
      a4:	2a c5       	rjmp	.+2644   	; 0xafa <__vector_41>
      a6:	00 00       	nop
      a8:	65 c5       	rjmp	.+2762   	; 0xb74 <__vector_42>
      aa:	00 00       	nop
      ac:	ce c1       	rjmp	.+924    	; 0x44a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cc c1       	rjmp	.+920    	; 0x44a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ca c1       	rjmp	.+916    	; 0x44a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c4 c2       	rjmp	.+1416   	; 0x642 <__vector_46>
      ba:	00 00       	nop
      bc:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__vector_47>
      c0:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__vector_48>
      c4:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <__vector_49>
      c8:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_50>
      cc:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__vector_51>
      d0:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_52>
      d4:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_53>
      d8:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__vector_54>
      dc:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__vector_55>
      e0:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_56>
      e4:	b2 c1       	rjmp	.+868    	; 0x44a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b0 c1       	rjmp	.+864    	; 0x44a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ae c1       	rjmp	.+860    	; 0x44a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ac c1       	rjmp	.+856    	; 0x44a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	aa c1       	rjmp	.+852    	; 0x44a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a8 c1       	rjmp	.+848    	; 0x44a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a6 c1       	rjmp	.+844    	; 0x44a <__bad_interrupt>
      fe:	00 00       	nop
     100:	a4 c1       	rjmp	.+840    	; 0x44a <__bad_interrupt>
     102:	00 00       	nop
     104:	a2 c1       	rjmp	.+836    	; 0x44a <__bad_interrupt>
     106:	00 00       	nop
     108:	a0 c1       	rjmp	.+832    	; 0x44a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9e c1       	rjmp	.+828    	; 0x44a <__bad_interrupt>
     10e:	00 00       	nop
     110:	9c c1       	rjmp	.+824    	; 0x44a <__bad_interrupt>
     112:	00 00       	nop
     114:	9a c1       	rjmp	.+820    	; 0x44a <__bad_interrupt>
     116:	00 00       	nop
     118:	98 c1       	rjmp	.+816    	; 0x44a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	80 c3       	rjmp	.+1792   	; 0x81e <__vector_71>
     11e:	00 00       	nop
     120:	bb c3       	rjmp	.+1910   	; 0x898 <__vector_72>
     122:	00 00       	nop
     124:	f6 c3       	rjmp	.+2028   	; 0x912 <__vector_73>
     126:	00 00       	nop
     128:	31 c4       	rjmp	.+2146   	; 0x98c <__vector_74>
     12a:	00 00       	nop
     12c:	8e c1       	rjmp	.+796    	; 0x44a <__bad_interrupt>
     12e:	00 00       	nop
     130:	56 c2       	rjmp	.+1196   	; 0x5de <__vector_76>
     132:	00 00       	nop
     134:	9c c7       	rjmp	.+3896   	; 0x106e <__vector_77>
     136:	00 00       	nop
     138:	d2 c7       	rjmp	.+4004   	; 0x10de <__vector_78>
     13a:	00 00       	nop
     13c:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__vector_79>
     140:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_80>
     144:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_81>
     148:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_82>
     14c:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_83>
     150:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__vector_84>
     154:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_85>
     158:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__vector_86>
     15c:	76 c1       	rjmp	.+748    	; 0x44a <__bad_interrupt>
     15e:	00 00       	nop
     160:	74 c1       	rjmp	.+744    	; 0x44a <__bad_interrupt>
     162:	00 00       	nop
     164:	72 c1       	rjmp	.+740    	; 0x44a <__bad_interrupt>
     166:	00 00       	nop
     168:	70 c1       	rjmp	.+736    	; 0x44a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6e c1       	rjmp	.+732    	; 0x44a <__bad_interrupt>
     16e:	00 00       	nop
     170:	6c c1       	rjmp	.+728    	; 0x44a <__bad_interrupt>
     172:	00 00       	nop
     174:	6a c1       	rjmp	.+724    	; 0x44a <__bad_interrupt>
     176:	00 00       	nop
     178:	68 c1       	rjmp	.+720    	; 0x44a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	66 c1       	rjmp	.+716    	; 0x44a <__bad_interrupt>
     17e:	00 00       	nop
     180:	64 c1       	rjmp	.+712    	; 0x44a <__bad_interrupt>
     182:	00 00       	nop
     184:	62 c1       	rjmp	.+708    	; 0x44a <__bad_interrupt>
     186:	00 00       	nop
     188:	60 c1       	rjmp	.+704    	; 0x44a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5e c1       	rjmp	.+700    	; 0x44a <__bad_interrupt>
     18e:	00 00       	nop
     190:	5c c1       	rjmp	.+696    	; 0x44a <__bad_interrupt>
     192:	00 00       	nop
     194:	5a c1       	rjmp	.+692    	; 0x44a <__bad_interrupt>
     196:	00 00       	nop
     198:	58 c1       	rjmp	.+688    	; 0x44a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	56 c1       	rjmp	.+684    	; 0x44a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	54 c1       	rjmp	.+680    	; 0x44a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	52 c1       	rjmp	.+676    	; 0x44a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	50 c1       	rjmp	.+672    	; 0x44a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	7c c2       	rjmp	.+1272   	; 0x6a6 <__vector_107>
     1ae:	00 00       	nop
     1b0:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__vector_108>
     1b4:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__vector_109>
     1b8:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__vector_110>
     1bc:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__vector_111>
     1c0:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__vector_112>
     1c4:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__vector_113>
     1c8:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__vector_114>
     1cc:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__vector_115>
     1d0:	0c 94 57 0e 	jmp	0x1cae	; 0x1cae <__vector_116>
     1d4:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__vector_117>
     1d8:	38 c1       	rjmp	.+624    	; 0x44a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	36 c1       	rjmp	.+620    	; 0x44a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	34 c1       	rjmp	.+616    	; 0x44a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	32 c1       	rjmp	.+612    	; 0x44a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	30 c1       	rjmp	.+608    	; 0x44a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2e c1       	rjmp	.+604    	; 0x44a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2c c1       	rjmp	.+600    	; 0x44a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	2a c1       	rjmp	.+596    	; 0x44a <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	28 c1       	rjmp	.+592    	; 0x44a <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	d9 15       	cp	r29, r9
     1fe:	e7 15       	cp	r30, r7
     200:	e7 15       	cp	r30, r7
     202:	e7 15       	cp	r30, r7
     204:	e7 15       	cp	r30, r7
     206:	de 15       	cp	r29, r14
     208:	e7 15       	cp	r30, r7
     20a:	e2 15       	cp	r30, r2
     20c:	e4 15       	cp	r30, r4
     20e:	e0 15       	cp	r30, r0
     210:	e7 15       	cp	r30, r7
     212:	e7 15       	cp	r30, r7
     214:	e7 15       	cp	r30, r7
     216:	e7 15       	cp	r30, r7
     218:	e7 15       	cp	r30, r7
     21a:	e7 15       	cp	r30, r7
     21c:	e7 15       	cp	r30, r7
     21e:	e7 15       	cp	r30, r7
     220:	e7 15       	cp	r30, r7
     222:	e7 15       	cp	r30, r7
     224:	e7 15       	cp	r30, r7
     226:	e7 15       	cp	r30, r7
     228:	e7 15       	cp	r30, r7
     22a:	e7 15       	cp	r30, r7
     22c:	e7 15       	cp	r30, r7
     22e:	e7 15       	cp	r30, r7
     230:	e7 15       	cp	r30, r7
     232:	e7 15       	cp	r30, r7
     234:	e7 15       	cp	r30, r7
     236:	e7 15       	cp	r30, r7
     238:	e7 15       	cp	r30, r7
     23a:	e7 15       	cp	r30, r7
     23c:	e7 15       	cp	r30, r7
     23e:	e7 15       	cp	r30, r7
     240:	e7 15       	cp	r30, r7
     242:	e7 15       	cp	r30, r7
     244:	e7 15       	cp	r30, r7
     246:	e7 15       	cp	r30, r7
     248:	e7 15       	cp	r30, r7
     24a:	e7 15       	cp	r30, r7
     24c:	e7 15       	cp	r30, r7
     24e:	e7 15       	cp	r30, r7
     250:	e7 15       	cp	r30, r7
     252:	e7 15       	cp	r30, r7
     254:	e7 15       	cp	r30, r7
     256:	e7 15       	cp	r30, r7
     258:	e7 15       	cp	r30, r7
     25a:	e7 15       	cp	r30, r7
     25c:	e7 15       	cp	r30, r7
     25e:	e7 15       	cp	r30, r7
     260:	e7 15       	cp	r30, r7
     262:	e7 15       	cp	r30, r7
     264:	e7 15       	cp	r30, r7
     266:	e7 15       	cp	r30, r7
     268:	e7 15       	cp	r30, r7
     26a:	e7 15       	cp	r30, r7
     26c:	e7 15       	cp	r30, r7
     26e:	e7 15       	cp	r30, r7
     270:	e7 15       	cp	r30, r7
     272:	e7 15       	cp	r30, r7
     274:	e7 15       	cp	r30, r7
     276:	dc 15       	cp	r29, r12
     278:	e6 15       	cp	r30, r6
     27a:	08 00       	.word	0x0008	; ????
     27c:	00 00       	nop
     27e:	be 92       	st	-X, r11
     280:	24 49       	sbci	r18, 0x94	; 148
     282:	12 3e       	cpi	r17, 0xE2	; 226
     284:	ab aa       	std	Y+51, r10	; 0x33
     286:	aa 2a       	or	r10, r26
     288:	be cd       	rjmp	.-1156   	; 0xfffffe06 <__eeprom_end+0xff7efe06>
     28a:	cc cc       	rjmp	.-1640   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28c:	4c 3e       	cpi	r20, 0xEC	; 236
     28e:	00 00       	nop
     290:	00 80       	ld	r0, Z
     292:	be ab       	std	Y+54, r27	; 0x36
     294:	aa aa       	std	Y+50, r10	; 0x32
     296:	aa 3e       	cpi	r26, 0xEA	; 234
     298:	00 00       	nop
     29a:	00 00       	nop
     29c:	bf 00       	.word	0x00bf	; ????
     29e:	00 00       	nop
     2a0:	80 3f       	cpi	r24, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	00 08       	sbc	r0, r0
     2a8:	41 78       	andi	r20, 0x81	; 129
     2aa:	d3 bb       	out	0x13, r29	; 19
     2ac:	43 87       	std	Z+11, r20	; 0x0b
     2ae:	d1 13       	cpse	r29, r17
     2b0:	3d 19       	sub	r19, r13
     2b2:	0e 3c       	cpi	r16, 0xCE	; 206
     2b4:	c3 bd       	out	0x23, r28	; 35
     2b6:	42 82       	std	Z+2, r4	; 0x02
     2b8:	ad 2b       	or	r26, r29
     2ba:	3e 68       	ori	r19, 0x8E	; 142
     2bc:	ec 82       	std	Y+4, r14	; 0x04
     2be:	76 be       	out	0x36, r7	; 54
     2c0:	d9 8f       	std	Y+25, r29	; 0x19
     2c2:	e1 a9       	ldd	r30, Z+49	; 0x31
     2c4:	3e 4c       	sbci	r19, 0xCE	; 206
     2c6:	80 ef       	ldi	r24, 0xF0	; 240
     2c8:	ff be       	out	0x3f, r15	; 63
     2ca:	01 c4       	rjmp	.+2050   	; 0xace <__vector_40+0x4e>
     2cc:	ff 7f       	andi	r31, 0xFF	; 255
     2ce:	3f 00       	.word	0x003f	; ????
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	07 63       	ori	r16, 0x37	; 55
     2d6:	42 36       	cpi	r20, 0x62	; 98
     2d8:	b7 9b       	sbis	0x16, 7	; 22
     2da:	d8 a7       	std	Y+40, r29	; 0x28
     2dc:	1a 39       	cpi	r17, 0x9A	; 154
     2de:	68 56       	subi	r22, 0x68	; 104
     2e0:	18 ae       	std	Y+56, r1	; 0x38
     2e2:	ba ab       	std	Y+50, r27	; 0x32
     2e4:	55 8c       	ldd	r5, Z+29	; 0x1d
     2e6:	1d 3c       	cpi	r17, 0xCD	; 205
     2e8:	b7 cc       	rjmp	.-1682   	; 0xfffffc58 <__eeprom_end+0xff7efc58>
     2ea:	57 63       	ori	r21, 0x37	; 55
     2ec:	bd 6d       	ori	r27, 0xDD	; 221
     2ee:	ed fd       	.word	0xfded	; ????
     2f0:	75 3e       	cpi	r23, 0xE5	; 229
     2f2:	f6 17       	cp	r31, r22
     2f4:	72 31       	cpi	r23, 0x12	; 18
     2f6:	bf 00       	.word	0x00bf	; ????
     2f8:	00 00       	nop
     2fa:	80 3f       	cpi	r24, 0xF0	; 240

000002fc <__trampolines_end>:
     2fc:	6e 61       	ori	r22, 0x1E	; 30
     2fe:	6e 00       	.word	0x006e	; ????

00000300 <__c.2332>:
     300:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     310:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     320:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     330:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     340:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     350:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     360:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     370:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     380:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     390:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     3a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     3b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     3c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003fe <__ctors_end>:
     3fe:	11 24       	eor	r1, r1
     400:	1f be       	out	0x3f, r1	; 63
     402:	cf ef       	ldi	r28, 0xFF	; 255
     404:	cd bf       	out	0x3d, r28	; 61
     406:	df e3       	ldi	r29, 0x3F	; 63
     408:	de bf       	out	0x3e, r29	; 62
     40a:	00 e0       	ldi	r16, 0x00	; 0
     40c:	0c bf       	out	0x3c, r16	; 60
     40e:	18 be       	out	0x38, r1	; 56
     410:	19 be       	out	0x39, r1	; 57
     412:	1a be       	out	0x3a, r1	; 58
     414:	1b be       	out	0x3b, r1	; 59

00000416 <__do_copy_data>:
     416:	10 e2       	ldi	r17, 0x20	; 32
     418:	a0 e0       	ldi	r26, 0x00	; 0
     41a:	b0 e2       	ldi	r27, 0x20	; 32
     41c:	e4 ed       	ldi	r30, 0xD4	; 212
     41e:	f6 e4       	ldi	r31, 0x46	; 70
     420:	00 e0       	ldi	r16, 0x00	; 0
     422:	0b bf       	out	0x3b, r16	; 59
     424:	02 c0       	rjmp	.+4      	; 0x42a <__do_copy_data+0x14>
     426:	07 90       	elpm	r0, Z+
     428:	0d 92       	st	X+, r0
     42a:	a6 34       	cpi	r26, 0x46	; 70
     42c:	b1 07       	cpc	r27, r17
     42e:	d9 f7       	brne	.-10     	; 0x426 <__do_copy_data+0x10>
     430:	1b be       	out	0x3b, r1	; 59

00000432 <__do_clear_bss>:
     432:	20 e2       	ldi	r18, 0x20	; 32
     434:	a6 e4       	ldi	r26, 0x46	; 70
     436:	b0 e2       	ldi	r27, 0x20	; 32
     438:	01 c0       	rjmp	.+2      	; 0x43c <.do_clear_bss_start>

0000043a <.do_clear_bss_loop>:
     43a:	1d 92       	st	X+, r1

0000043c <.do_clear_bss_start>:
     43c:	a6 3c       	cpi	r26, 0xC6	; 198
     43e:	b2 07       	cpc	r27, r18
     440:	e1 f7       	brne	.-8      	; 0x43a <.do_clear_bss_loop>
     442:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <main>
     446:	0c 94 68 23 	jmp	0x46d0	; 0x46d0 <_exit>

0000044a <__bad_interrupt>:
     44a:	da cd       	rjmp	.-1100   	; 0x0 <__vectors>

0000044c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     450:	e0 91 46 20 	lds	r30, 0x2046	; 0x802046 <__data_end>
     454:	f0 91 47 20 	lds	r31, 0x2047	; 0x802047 <__data_end+0x1>
     458:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     45a:	83 ff       	sbrs	r24, 3
     45c:	08 c0       	rjmp	.+16     	; 0x46e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     45e:	88 60       	ori	r24, 0x08	; 8
     460:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     462:	83 e0       	ldi	r24, 0x03	; 3
     464:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     466:	86 ef       	ldi	r24, 0xF6	; 246
     468:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <__data_end+0xa>
     46c:	83 c0       	rjmp	.+262    	; 0x574 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     46e:	98 2f       	mov	r25, r24
     470:	94 71       	andi	r25, 0x14	; 20
     472:	31 f0       	breq	.+12     	; 0x480 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <__data_end+0xa>
     47e:	7a c0       	rjmp	.+244    	; 0x574 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     480:	86 ff       	sbrs	r24, 6
     482:	43 c0       	rjmp	.+134    	; 0x50a <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     484:	c6 e4       	ldi	r28, 0x46	; 70
     486:	d0 e2       	ldi	r29, 0x20	; 32
     488:	aa 81       	ldd	r26, Y+2	; 0x02
     48a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     48c:	8c 81       	ldd	r24, Y+4	; 0x04
     48e:	9d 81       	ldd	r25, Y+5	; 0x05
     490:	14 96       	adiw	r26, 0x04	; 4
     492:	2d 91       	ld	r18, X+
     494:	3c 91       	ld	r19, X
     496:	15 97       	sbiw	r26, 0x05	; 5
     498:	82 17       	cp	r24, r18
     49a:	93 07       	cpc	r25, r19
     49c:	6c f4       	brge	.+26     	; 0x4b8 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     49e:	9c 01       	movw	r18, r24
     4a0:	2f 5f       	subi	r18, 0xFF	; 255
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	20 93 4a 20 	sts	0x204A, r18	; 0x80204a <__data_end+0x4>
     4a8:	30 93 4b 20 	sts	0x204B, r19	; 0x80204b <__data_end+0x5>
     4ac:	a8 0f       	add	r26, r24
     4ae:	b9 1f       	adc	r27, r25
     4b0:	11 96       	adiw	r26, 0x01	; 1
     4b2:	8c 91       	ld	r24, X
     4b4:	87 83       	std	Z+7, r24	; 0x07
     4b6:	5e c0       	rjmp	.+188    	; 0x574 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     4b8:	80 91 4c 20 	lds	r24, 0x204C	; 0x80204c <__data_end+0x6>
     4bc:	90 91 4d 20 	lds	r25, 0x204D	; 0x80204d <__data_end+0x7>
     4c0:	18 96       	adiw	r26, 0x08	; 8
     4c2:	2d 91       	ld	r18, X+
     4c4:	3c 91       	ld	r19, X
     4c6:	19 97       	sbiw	r26, 0x09	; 9
     4c8:	82 17       	cp	r24, r18
     4ca:	93 07       	cpc	r25, r19
     4cc:	c8 f4       	brcc	.+50     	; 0x500 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     4ce:	20 91 4e 20 	lds	r18, 0x204E	; 0x80204e <__data_end+0x8>
     4d2:	22 23       	and	r18, r18
     4d4:	21 f0       	breq	.+8      	; 0x4de <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     4d6:	86 81       	ldd	r24, Z+6	; 0x06
     4d8:	81 60       	ori	r24, 0x01	; 1
     4da:	86 83       	std	Z+6, r24	; 0x06
     4dc:	4b c0       	rjmp	.+150    	; 0x574 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     4de:	16 96       	adiw	r26, 0x06	; 6
     4e0:	2d 91       	ld	r18, X+
     4e2:	3c 91       	ld	r19, X
     4e4:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     4e6:	ac 01       	movw	r20, r24
     4e8:	4f 5f       	subi	r20, 0xFF	; 255
     4ea:	5f 4f       	sbci	r21, 0xFF	; 255
     4ec:	40 93 4c 20 	sts	0x204C, r20	; 0x80204c <__data_end+0x6>
     4f0:	50 93 4d 20 	sts	0x204D, r21	; 0x80204d <__data_end+0x7>
     4f4:	d9 01       	movw	r26, r18
     4f6:	a8 0f       	add	r26, r24
     4f8:	b9 1f       	adc	r27, r25
     4fa:	8c 91       	ld	r24, X
     4fc:	87 83       	std	Z+7, r24	; 0x07
     4fe:	3a c0       	rjmp	.+116    	; 0x574 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     500:	83 e0       	ldi	r24, 0x03	; 3
     502:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     504:	10 92 50 20 	sts	0x2050, r1	; 0x802050 <__data_end+0xa>
     508:	35 c0       	rjmp	.+106    	; 0x574 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     50a:	88 23       	and	r24, r24
     50c:	84 f5       	brge	.+96     	; 0x56e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     50e:	a6 e4       	ldi	r26, 0x46	; 70
     510:	b0 e2       	ldi	r27, 0x20	; 32
     512:	12 96       	adiw	r26, 0x02	; 2
     514:	cd 91       	ld	r28, X+
     516:	dc 91       	ld	r29, X
     518:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     51a:	16 96       	adiw	r26, 0x06	; 6
     51c:	8d 91       	ld	r24, X+
     51e:	9c 91       	ld	r25, X
     520:	17 97       	sbiw	r26, 0x07	; 7
     522:	28 85       	ldd	r18, Y+8	; 0x08
     524:	39 85       	ldd	r19, Y+9	; 0x09
     526:	82 17       	cp	r24, r18
     528:	93 07       	cpc	r25, r19
     52a:	d8 f4       	brcc	.+54     	; 0x562 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     52c:	6e 81       	ldd	r22, Y+6	; 0x06
     52e:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     530:	9c 01       	movw	r18, r24
     532:	2f 5f       	subi	r18, 0xFF	; 255
     534:	3f 4f       	sbci	r19, 0xFF	; 255
     536:	20 93 4c 20 	sts	0x204C, r18	; 0x80204c <__data_end+0x6>
     53a:	30 93 4d 20 	sts	0x204D, r19	; 0x80204d <__data_end+0x7>
     53e:	47 81       	ldd	r20, Z+7	; 0x07
     540:	db 01       	movw	r26, r22
     542:	a8 0f       	add	r26, r24
     544:	b9 1f       	adc	r27, r25
     546:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     548:	88 85       	ldd	r24, Y+8	; 0x08
     54a:	99 85       	ldd	r25, Y+9	; 0x09
     54c:	28 17       	cp	r18, r24
     54e:	39 07       	cpc	r19, r25
     550:	18 f4       	brcc	.+6      	; 0x558 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	83 83       	std	Z+3, r24	; 0x03
     556:	0e c0       	rjmp	.+28     	; 0x574 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     558:	87 e0       	ldi	r24, 0x07	; 7
     55a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     55c:	10 92 50 20 	sts	0x2050, r1	; 0x802050 <__data_end+0xa>
     560:	09 c0       	rjmp	.+18     	; 0x574 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     566:	89 ef       	ldi	r24, 0xF9	; 249
     568:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <__data_end+0xa>
     56c:	03 c0       	rjmp	.+6      	; 0x574 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     56e:	8b ef       	ldi	r24, 0xFB	; 251
     570:	80 93 50 20 	sts	0x2050, r24	; 0x802050 <__data_end+0xa>
	}
}
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     57a:	1f 92       	push	r1
     57c:	0f 92       	push	r0
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	0f 92       	push	r0
     582:	11 24       	eor	r1, r1
     584:	08 b6       	in	r0, 0x38	; 56
     586:	0f 92       	push	r0
     588:	18 be       	out	0x38, r1	; 56
     58a:	09 b6       	in	r0, 0x39	; 57
     58c:	0f 92       	push	r0
     58e:	19 be       	out	0x39, r1	; 57
     590:	0b b6       	in	r0, 0x3b	; 59
     592:	0f 92       	push	r0
     594:	1b be       	out	0x3b, r1	; 59
     596:	2f 93       	push	r18
     598:	3f 93       	push	r19
     59a:	4f 93       	push	r20
     59c:	5f 93       	push	r21
     59e:	6f 93       	push	r22
     5a0:	7f 93       	push	r23
     5a2:	8f 93       	push	r24
     5a4:	9f 93       	push	r25
     5a6:	af 93       	push	r26
     5a8:	bf 93       	push	r27
     5aa:	ef 93       	push	r30
     5ac:	ff 93       	push	r31
     5ae:	4e df       	rcall	.-356    	; 0x44c <twim_interrupt_handler>
     5b0:	ff 91       	pop	r31
     5b2:	ef 91       	pop	r30
     5b4:	bf 91       	pop	r27
     5b6:	af 91       	pop	r26
     5b8:	9f 91       	pop	r25
     5ba:	8f 91       	pop	r24
     5bc:	7f 91       	pop	r23
     5be:	6f 91       	pop	r22
     5c0:	5f 91       	pop	r21
     5c2:	4f 91       	pop	r20
     5c4:	3f 91       	pop	r19
     5c6:	2f 91       	pop	r18
     5c8:	0f 90       	pop	r0
     5ca:	0b be       	out	0x3b, r0	; 59
     5cc:	0f 90       	pop	r0
     5ce:	09 be       	out	0x39, r0	; 57
     5d0:	0f 90       	pop	r0
     5d2:	08 be       	out	0x38, r0	; 56
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	0f 90       	pop	r0
     5da:	1f 90       	pop	r1
     5dc:	18 95       	reti

000005de <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     5de:	1f 92       	push	r1
     5e0:	0f 92       	push	r0
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	08 b6       	in	r0, 0x38	; 56
     5ea:	0f 92       	push	r0
     5ec:	18 be       	out	0x38, r1	; 56
     5ee:	09 b6       	in	r0, 0x39	; 57
     5f0:	0f 92       	push	r0
     5f2:	19 be       	out	0x39, r1	; 57
     5f4:	0b b6       	in	r0, 0x3b	; 59
     5f6:	0f 92       	push	r0
     5f8:	1b be       	out	0x3b, r1	; 59
     5fa:	2f 93       	push	r18
     5fc:	3f 93       	push	r19
     5fe:	4f 93       	push	r20
     600:	5f 93       	push	r21
     602:	6f 93       	push	r22
     604:	7f 93       	push	r23
     606:	8f 93       	push	r24
     608:	9f 93       	push	r25
     60a:	af 93       	push	r26
     60c:	bf 93       	push	r27
     60e:	ef 93       	push	r30
     610:	ff 93       	push	r31
     612:	1c df       	rcall	.-456    	; 0x44c <twim_interrupt_handler>
     614:	ff 91       	pop	r31
     616:	ef 91       	pop	r30
     618:	bf 91       	pop	r27
     61a:	af 91       	pop	r26
     61c:	9f 91       	pop	r25
     61e:	8f 91       	pop	r24
     620:	7f 91       	pop	r23
     622:	6f 91       	pop	r22
     624:	5f 91       	pop	r21
     626:	4f 91       	pop	r20
     628:	3f 91       	pop	r19
     62a:	2f 91       	pop	r18
     62c:	0f 90       	pop	r0
     62e:	0b be       	out	0x3b, r0	; 59
     630:	0f 90       	pop	r0
     632:	09 be       	out	0x39, r0	; 57
     634:	0f 90       	pop	r0
     636:	08 be       	out	0x38, r0	; 56
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     642:	1f 92       	push	r1
     644:	0f 92       	push	r0
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	0f 92       	push	r0
     64a:	11 24       	eor	r1, r1
     64c:	08 b6       	in	r0, 0x38	; 56
     64e:	0f 92       	push	r0
     650:	18 be       	out	0x38, r1	; 56
     652:	09 b6       	in	r0, 0x39	; 57
     654:	0f 92       	push	r0
     656:	19 be       	out	0x39, r1	; 57
     658:	0b b6       	in	r0, 0x3b	; 59
     65a:	0f 92       	push	r0
     65c:	1b be       	out	0x3b, r1	; 59
     65e:	2f 93       	push	r18
     660:	3f 93       	push	r19
     662:	4f 93       	push	r20
     664:	5f 93       	push	r21
     666:	6f 93       	push	r22
     668:	7f 93       	push	r23
     66a:	8f 93       	push	r24
     66c:	9f 93       	push	r25
     66e:	af 93       	push	r26
     670:	bf 93       	push	r27
     672:	ef 93       	push	r30
     674:	ff 93       	push	r31
     676:	ea de       	rcall	.-556    	; 0x44c <twim_interrupt_handler>
     678:	ff 91       	pop	r31
     67a:	ef 91       	pop	r30
     67c:	bf 91       	pop	r27
     67e:	af 91       	pop	r26
     680:	9f 91       	pop	r25
     682:	8f 91       	pop	r24
     684:	7f 91       	pop	r23
     686:	6f 91       	pop	r22
     688:	5f 91       	pop	r21
     68a:	4f 91       	pop	r20
     68c:	3f 91       	pop	r19
     68e:	2f 91       	pop	r18
     690:	0f 90       	pop	r0
     692:	0b be       	out	0x3b, r0	; 59
     694:	0f 90       	pop	r0
     696:	09 be       	out	0x39, r0	; 57
     698:	0f 90       	pop	r0
     69a:	08 be       	out	0x38, r0	; 56
     69c:	0f 90       	pop	r0
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	0f 90       	pop	r0
     6a2:	1f 90       	pop	r1
     6a4:	18 95       	reti

000006a6 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     6a6:	1f 92       	push	r1
     6a8:	0f 92       	push	r0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
     6b0:	08 b6       	in	r0, 0x38	; 56
     6b2:	0f 92       	push	r0
     6b4:	18 be       	out	0x38, r1	; 56
     6b6:	09 b6       	in	r0, 0x39	; 57
     6b8:	0f 92       	push	r0
     6ba:	19 be       	out	0x39, r1	; 57
     6bc:	0b b6       	in	r0, 0x3b	; 59
     6be:	0f 92       	push	r0
     6c0:	1b be       	out	0x3b, r1	; 59
     6c2:	2f 93       	push	r18
     6c4:	3f 93       	push	r19
     6c6:	4f 93       	push	r20
     6c8:	5f 93       	push	r21
     6ca:	6f 93       	push	r22
     6cc:	7f 93       	push	r23
     6ce:	8f 93       	push	r24
     6d0:	9f 93       	push	r25
     6d2:	af 93       	push	r26
     6d4:	bf 93       	push	r27
     6d6:	ef 93       	push	r30
     6d8:	ff 93       	push	r31
     6da:	b8 de       	rcall	.-656    	; 0x44c <twim_interrupt_handler>
     6dc:	ff 91       	pop	r31
     6de:	ef 91       	pop	r30
     6e0:	bf 91       	pop	r27
     6e2:	af 91       	pop	r26
     6e4:	9f 91       	pop	r25
     6e6:	8f 91       	pop	r24
     6e8:	7f 91       	pop	r23
     6ea:	6f 91       	pop	r22
     6ec:	5f 91       	pop	r21
     6ee:	4f 91       	pop	r20
     6f0:	3f 91       	pop	r19
     6f2:	2f 91       	pop	r18
     6f4:	0f 90       	pop	r0
     6f6:	0b be       	out	0x3b, r0	; 59
     6f8:	0f 90       	pop	r0
     6fa:	09 be       	out	0x39, r0	; 57
     6fc:	0f 90       	pop	r0
     6fe:	08 be       	out	0x38, r0	; 56
     700:	0f 90       	pop	r0
     702:	0f be       	out	0x3f, r0	; 63
     704:	0f 90       	pop	r0
     706:	1f 90       	pop	r1
     708:	18 95       	reti

0000070a <wdt_reset_mcu>:
uint8_t temp;
	/*
	 * WDT enabled (minimum timeout period for max. security)
	 */
	temp = WDT_PER_8CLK_gc | (1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     70a:	63 e0       	ldi	r22, 0x03	; 3
     70c:	80 e8       	ldi	r24, 0x80	; 128
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	6e d2       	rcall	.+1244   	; 0xbee <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
     712:	e0 e8       	ldi	r30, 0x80	; 128
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	82 81       	ldd	r24, Z+2	; 0x02
     718:	80 fd       	sbrc	r24, 0
     71a:	fd cf       	rjmp	.-6      	; 0x716 <wdt_reset_mcu+0xc>
	wdt_wait_while_busy();
	/*
	 * WDT enabled (maximum window period for max. security)
	 */
	temp = WDT_WPER_8KCLK_gc | (1 << WDT_WEN_bp) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
     71c:	6b e2       	ldi	r22, 0x2B	; 43
     71e:	81 e8       	ldi	r24, 0x81	; 129
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	65 d2       	rcall	.+1226   	; 0xbee <ccp_write_io>
     724:	e0 e8       	ldi	r30, 0x80	; 128
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	82 81       	ldd	r24, Z+2	; 0x02
     72a:	80 fd       	sbrc	r24, 0
     72c:	fd cf       	rjmp	.-6      	; 0x728 <wdt_reset_mcu+0x1e>
	wdt_wait_while_busy();
	/*
	 * WDT Reset during window => WDT generates an Hard Reset.
	 */
	wdt_reset();
     72e:	a8 95       	wdr
     730:	ff cf       	rjmp	.-2      	; 0x730 <wdt_reset_mcu+0x26>

00000732 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	1f 92       	push	r1
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     73e:	8f ef       	ldi	r24, 0xFF	; 255
     740:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     744:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     748:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     74c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     750:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     754:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     758:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     75c:	8f b7       	in	r24, 0x3f	; 63
     75e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     760:	f8 94       	cli
	return flags;
     762:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     764:	e0 e5       	ldi	r30, 0x50	; 80
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 81       	ld	r24, Z
     76a:	82 60       	ori	r24, 0x02	; 2
     76c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     76e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     770:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     772:	81 ff       	sbrs	r24, 1
     774:	fd cf       	rjmp	.-6      	; 0x770 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	80 e4       	ldi	r24, 0x40	; 64
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	38 d2       	rcall	.+1136   	; 0xbee <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     77e:	8f b7       	in	r24, 0x3f	; 63
     780:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     782:	f8 94       	cli
	return flags;
     784:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     786:	e0 e5       	ldi	r30, 0x50	; 80
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	8e 7f       	andi	r24, 0xFE	; 254
     78e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     790:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	1f 92       	push	r1
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7a6:	9f b7       	in	r25, 0x3f	; 63
     7a8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     7aa:	f8 94       	cli
	return flags;
     7ac:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     7ae:	e8 2f       	mov	r30, r24
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	e0 59       	subi	r30, 0x90	; 144
     7b4:	ff 4f       	sbci	r31, 0xFF	; 255
     7b6:	60 95       	com	r22
     7b8:	80 81       	ld	r24, Z
     7ba:	68 23       	and	r22, r24
     7bc:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7be:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	1f 92       	push	r1
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     7d2:	80 91 a5 20 	lds	r24, 0x20A5	; 0x8020a5 <stdio_base>
     7d6:	90 91 a6 20 	lds	r25, 0x20A6	; 0x8020a6 <stdio_base+0x1>
     7da:	e0 91 a1 20 	lds	r30, 0x20A1	; 0x8020a1 <ptr_get>
     7de:	f0 91 a2 20 	lds	r31, 0x20A2	; 0x8020a2 <ptr_get+0x1>
     7e2:	be 01       	movw	r22, r28
     7e4:	6f 5f       	subi	r22, 0xFF	; 255
     7e6:	7f 4f       	sbci	r23, 0xFF	; 255
     7e8:	19 95       	eicall
	return c;
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
}
     7ec:	08 2e       	mov	r0, r24
     7ee:	00 0c       	add	r0, r0
     7f0:	99 0b       	sbc	r25, r25
     7f2:	0f 90       	pop	r0
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     7fa:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     7fc:	80 91 a5 20 	lds	r24, 0x20A5	; 0x8020a5 <stdio_base>
     800:	90 91 a6 20 	lds	r25, 0x20A6	; 0x8020a6 <stdio_base+0x1>
     804:	e0 91 a3 20 	lds	r30, 0x20A3	; 0x8020a3 <ptr_put>
     808:	f0 91 a4 20 	lds	r31, 0x20A4	; 0x8020a4 <ptr_put+0x1>
     80c:	19 95       	eicall
     80e:	99 23       	and	r25, r25
     810:	1c f0       	brlt	.+6      	; 0x818 <_write+0x1e>
		return -1;
	}
	return 1;
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     81c:	08 95       	ret

0000081e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     81e:	1f 92       	push	r1
     820:	0f 92       	push	r0
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	08 b6       	in	r0, 0x38	; 56
     82a:	0f 92       	push	r0
     82c:	18 be       	out	0x38, r1	; 56
     82e:	09 b6       	in	r0, 0x39	; 57
     830:	0f 92       	push	r0
     832:	19 be       	out	0x39, r1	; 57
     834:	0b b6       	in	r0, 0x3b	; 59
     836:	0f 92       	push	r0
     838:	1b be       	out	0x3b, r1	; 59
     83a:	2f 93       	push	r18
     83c:	3f 93       	push	r19
     83e:	4f 93       	push	r20
     840:	5f 93       	push	r21
     842:	6f 93       	push	r22
     844:	7f 93       	push	r23
     846:	8f 93       	push	r24
     848:	9f 93       	push	r25
     84a:	af 93       	push	r26
     84c:	bf 93       	push	r27
     84e:	ef 93       	push	r30
     850:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     852:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     856:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     85a:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <adca_callback>
     85e:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <adca_callback+0x1>
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	19 95       	eicall
}
     86a:	ff 91       	pop	r31
     86c:	ef 91       	pop	r30
     86e:	bf 91       	pop	r27
     870:	af 91       	pop	r26
     872:	9f 91       	pop	r25
     874:	8f 91       	pop	r24
     876:	7f 91       	pop	r23
     878:	6f 91       	pop	r22
     87a:	5f 91       	pop	r21
     87c:	4f 91       	pop	r20
     87e:	3f 91       	pop	r19
     880:	2f 91       	pop	r18
     882:	0f 90       	pop	r0
     884:	0b be       	out	0x3b, r0	; 59
     886:	0f 90       	pop	r0
     888:	09 be       	out	0x39, r0	; 57
     88a:	0f 90       	pop	r0
     88c:	08 be       	out	0x38, r0	; 56
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
     8a2:	08 b6       	in	r0, 0x38	; 56
     8a4:	0f 92       	push	r0
     8a6:	18 be       	out	0x38, r1	; 56
     8a8:	09 b6       	in	r0, 0x39	; 57
     8aa:	0f 92       	push	r0
     8ac:	19 be       	out	0x39, r1	; 57
     8ae:	0b b6       	in	r0, 0x3b	; 59
     8b0:	0f 92       	push	r0
     8b2:	1b be       	out	0x3b, r1	; 59
     8b4:	2f 93       	push	r18
     8b6:	3f 93       	push	r19
     8b8:	4f 93       	push	r20
     8ba:	5f 93       	push	r21
     8bc:	6f 93       	push	r22
     8be:	7f 93       	push	r23
     8c0:	8f 93       	push	r24
     8c2:	9f 93       	push	r25
     8c4:	af 93       	push	r26
     8c6:	bf 93       	push	r27
     8c8:	ef 93       	push	r30
     8ca:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     8cc:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     8d0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     8d4:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <adca_callback>
     8d8:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <adca_callback+0x1>
     8dc:	62 e0       	ldi	r22, 0x02	; 2
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	19 95       	eicall
}
     8e4:	ff 91       	pop	r31
     8e6:	ef 91       	pop	r30
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	7f 91       	pop	r23
     8f2:	6f 91       	pop	r22
     8f4:	5f 91       	pop	r21
     8f6:	4f 91       	pop	r20
     8f8:	3f 91       	pop	r19
     8fa:	2f 91       	pop	r18
     8fc:	0f 90       	pop	r0
     8fe:	0b be       	out	0x3b, r0	; 59
     900:	0f 90       	pop	r0
     902:	09 be       	out	0x39, r0	; 57
     904:	0f 90       	pop	r0
     906:	08 be       	out	0x38, r0	; 56
     908:	0f 90       	pop	r0
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	0f 90       	pop	r0
     90e:	1f 90       	pop	r1
     910:	18 95       	reti

00000912 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     912:	1f 92       	push	r1
     914:	0f 92       	push	r0
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	0f 92       	push	r0
     91a:	11 24       	eor	r1, r1
     91c:	08 b6       	in	r0, 0x38	; 56
     91e:	0f 92       	push	r0
     920:	18 be       	out	0x38, r1	; 56
     922:	09 b6       	in	r0, 0x39	; 57
     924:	0f 92       	push	r0
     926:	19 be       	out	0x39, r1	; 57
     928:	0b b6       	in	r0, 0x3b	; 59
     92a:	0f 92       	push	r0
     92c:	1b be       	out	0x3b, r1	; 59
     92e:	2f 93       	push	r18
     930:	3f 93       	push	r19
     932:	4f 93       	push	r20
     934:	5f 93       	push	r21
     936:	6f 93       	push	r22
     938:	7f 93       	push	r23
     93a:	8f 93       	push	r24
     93c:	9f 93       	push	r25
     93e:	af 93       	push	r26
     940:	bf 93       	push	r27
     942:	ef 93       	push	r30
     944:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     946:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     94a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     94e:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <adca_callback>
     952:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <adca_callback+0x1>
     956:	64 e0       	ldi	r22, 0x04	; 4
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	19 95       	eicall
}
     95e:	ff 91       	pop	r31
     960:	ef 91       	pop	r30
     962:	bf 91       	pop	r27
     964:	af 91       	pop	r26
     966:	9f 91       	pop	r25
     968:	8f 91       	pop	r24
     96a:	7f 91       	pop	r23
     96c:	6f 91       	pop	r22
     96e:	5f 91       	pop	r21
     970:	4f 91       	pop	r20
     972:	3f 91       	pop	r19
     974:	2f 91       	pop	r18
     976:	0f 90       	pop	r0
     978:	0b be       	out	0x3b, r0	; 59
     97a:	0f 90       	pop	r0
     97c:	09 be       	out	0x39, r0	; 57
     97e:	0f 90       	pop	r0
     980:	08 be       	out	0x38, r0	; 56
     982:	0f 90       	pop	r0
     984:	0f be       	out	0x3f, r0	; 63
     986:	0f 90       	pop	r0
     988:	1f 90       	pop	r1
     98a:	18 95       	reti

0000098c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     98c:	1f 92       	push	r1
     98e:	0f 92       	push	r0
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	08 b6       	in	r0, 0x38	; 56
     998:	0f 92       	push	r0
     99a:	18 be       	out	0x38, r1	; 56
     99c:	09 b6       	in	r0, 0x39	; 57
     99e:	0f 92       	push	r0
     9a0:	19 be       	out	0x39, r1	; 57
     9a2:	0b b6       	in	r0, 0x3b	; 59
     9a4:	0f 92       	push	r0
     9a6:	1b be       	out	0x3b, r1	; 59
     9a8:	2f 93       	push	r18
     9aa:	3f 93       	push	r19
     9ac:	4f 93       	push	r20
     9ae:	5f 93       	push	r21
     9b0:	6f 93       	push	r22
     9b2:	7f 93       	push	r23
     9b4:	8f 93       	push	r24
     9b6:	9f 93       	push	r25
     9b8:	af 93       	push	r26
     9ba:	bf 93       	push	r27
     9bc:	ef 93       	push	r30
     9be:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     9c0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     9c4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     9c8:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <adca_callback>
     9cc:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <adca_callback+0x1>
     9d0:	68 e0       	ldi	r22, 0x08	; 8
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	19 95       	eicall
}
     9d8:	ff 91       	pop	r31
     9da:	ef 91       	pop	r30
     9dc:	bf 91       	pop	r27
     9de:	af 91       	pop	r26
     9e0:	9f 91       	pop	r25
     9e2:	8f 91       	pop	r24
     9e4:	7f 91       	pop	r23
     9e6:	6f 91       	pop	r22
     9e8:	5f 91       	pop	r21
     9ea:	4f 91       	pop	r20
     9ec:	3f 91       	pop	r19
     9ee:	2f 91       	pop	r18
     9f0:	0f 90       	pop	r0
     9f2:	0b be       	out	0x3b, r0	; 59
     9f4:	0f 90       	pop	r0
     9f6:	09 be       	out	0x39, r0	; 57
     9f8:	0f 90       	pop	r0
     9fa:	08 be       	out	0x38, r0	; 56
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	0f 90       	pop	r0
     a02:	1f 90       	pop	r1
     a04:	18 95       	reti

00000a06 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     a06:	1f 92       	push	r1
     a08:	0f 92       	push	r0
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	0f 92       	push	r0
     a0e:	11 24       	eor	r1, r1
     a10:	08 b6       	in	r0, 0x38	; 56
     a12:	0f 92       	push	r0
     a14:	18 be       	out	0x38, r1	; 56
     a16:	09 b6       	in	r0, 0x39	; 57
     a18:	0f 92       	push	r0
     a1a:	19 be       	out	0x39, r1	; 57
     a1c:	0b b6       	in	r0, 0x3b	; 59
     a1e:	0f 92       	push	r0
     a20:	1b be       	out	0x3b, r1	; 59
     a22:	2f 93       	push	r18
     a24:	3f 93       	push	r19
     a26:	4f 93       	push	r20
     a28:	5f 93       	push	r21
     a2a:	6f 93       	push	r22
     a2c:	7f 93       	push	r23
     a2e:	8f 93       	push	r24
     a30:	9f 93       	push	r25
     a32:	af 93       	push	r26
     a34:	bf 93       	push	r27
     a36:	ef 93       	push	r30
     a38:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     a3a:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     a3e:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     a42:	e0 91 a7 20 	lds	r30, 0x20A7	; 0x8020a7 <adcb_callback>
     a46:	f0 91 a8 20 	lds	r31, 0x20A8	; 0x8020a8 <adcb_callback+0x1>
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	80 e4       	ldi	r24, 0x40	; 64
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	19 95       	eicall
}
     a52:	ff 91       	pop	r31
     a54:	ef 91       	pop	r30
     a56:	bf 91       	pop	r27
     a58:	af 91       	pop	r26
     a5a:	9f 91       	pop	r25
     a5c:	8f 91       	pop	r24
     a5e:	7f 91       	pop	r23
     a60:	6f 91       	pop	r22
     a62:	5f 91       	pop	r21
     a64:	4f 91       	pop	r20
     a66:	3f 91       	pop	r19
     a68:	2f 91       	pop	r18
     a6a:	0f 90       	pop	r0
     a6c:	0b be       	out	0x3b, r0	; 59
     a6e:	0f 90       	pop	r0
     a70:	09 be       	out	0x39, r0	; 57
     a72:	0f 90       	pop	r0
     a74:	08 be       	out	0x38, r0	; 56
     a76:	0f 90       	pop	r0
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	0f 90       	pop	r0
     a7c:	1f 90       	pop	r1
     a7e:	18 95       	reti

00000a80 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	08 b6       	in	r0, 0x38	; 56
     a8c:	0f 92       	push	r0
     a8e:	18 be       	out	0x38, r1	; 56
     a90:	09 b6       	in	r0, 0x39	; 57
     a92:	0f 92       	push	r0
     a94:	19 be       	out	0x39, r1	; 57
     a96:	0b b6       	in	r0, 0x3b	; 59
     a98:	0f 92       	push	r0
     a9a:	1b be       	out	0x3b, r1	; 59
     a9c:	2f 93       	push	r18
     a9e:	3f 93       	push	r19
     aa0:	4f 93       	push	r20
     aa2:	5f 93       	push	r21
     aa4:	6f 93       	push	r22
     aa6:	7f 93       	push	r23
     aa8:	8f 93       	push	r24
     aaa:	9f 93       	push	r25
     aac:	af 93       	push	r26
     aae:	bf 93       	push	r27
     ab0:	ef 93       	push	r30
     ab2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     ab4:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     ab8:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     abc:	e0 91 a7 20 	lds	r30, 0x20A7	; 0x8020a7 <adcb_callback>
     ac0:	f0 91 a8 20 	lds	r31, 0x20A8	; 0x8020a8 <adcb_callback+0x1>
     ac4:	62 e0       	ldi	r22, 0x02	; 2
     ac6:	80 e4       	ldi	r24, 0x40	; 64
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	19 95       	eicall
}
     acc:	ff 91       	pop	r31
     ace:	ef 91       	pop	r30
     ad0:	bf 91       	pop	r27
     ad2:	af 91       	pop	r26
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	7f 91       	pop	r23
     ada:	6f 91       	pop	r22
     adc:	5f 91       	pop	r21
     ade:	4f 91       	pop	r20
     ae0:	3f 91       	pop	r19
     ae2:	2f 91       	pop	r18
     ae4:	0f 90       	pop	r0
     ae6:	0b be       	out	0x3b, r0	; 59
     ae8:	0f 90       	pop	r0
     aea:	09 be       	out	0x39, r0	; 57
     aec:	0f 90       	pop	r0
     aee:	08 be       	out	0x38, r0	; 56
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	1f 90       	pop	r1
     af8:	18 95       	reti

00000afa <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     afa:	1f 92       	push	r1
     afc:	0f 92       	push	r0
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	0f 92       	push	r0
     b02:	11 24       	eor	r1, r1
     b04:	08 b6       	in	r0, 0x38	; 56
     b06:	0f 92       	push	r0
     b08:	18 be       	out	0x38, r1	; 56
     b0a:	09 b6       	in	r0, 0x39	; 57
     b0c:	0f 92       	push	r0
     b0e:	19 be       	out	0x39, r1	; 57
     b10:	0b b6       	in	r0, 0x3b	; 59
     b12:	0f 92       	push	r0
     b14:	1b be       	out	0x3b, r1	; 59
     b16:	2f 93       	push	r18
     b18:	3f 93       	push	r19
     b1a:	4f 93       	push	r20
     b1c:	5f 93       	push	r21
     b1e:	6f 93       	push	r22
     b20:	7f 93       	push	r23
     b22:	8f 93       	push	r24
     b24:	9f 93       	push	r25
     b26:	af 93       	push	r26
     b28:	bf 93       	push	r27
     b2a:	ef 93       	push	r30
     b2c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     b2e:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     b32:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     b36:	e0 91 a7 20 	lds	r30, 0x20A7	; 0x8020a7 <adcb_callback>
     b3a:	f0 91 a8 20 	lds	r31, 0x20A8	; 0x8020a8 <adcb_callback+0x1>
     b3e:	64 e0       	ldi	r22, 0x04	; 4
     b40:	80 e4       	ldi	r24, 0x40	; 64
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	19 95       	eicall
}
     b46:	ff 91       	pop	r31
     b48:	ef 91       	pop	r30
     b4a:	bf 91       	pop	r27
     b4c:	af 91       	pop	r26
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	7f 91       	pop	r23
     b54:	6f 91       	pop	r22
     b56:	5f 91       	pop	r21
     b58:	4f 91       	pop	r20
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	0f 90       	pop	r0
     b60:	0b be       	out	0x3b, r0	; 59
     b62:	0f 90       	pop	r0
     b64:	09 be       	out	0x39, r0	; 57
     b66:	0f 90       	pop	r0
     b68:	08 be       	out	0x38, r0	; 56
     b6a:	0f 90       	pop	r0
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	0f 90       	pop	r0
     b70:	1f 90       	pop	r1
     b72:	18 95       	reti

00000b74 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     b74:	1f 92       	push	r1
     b76:	0f 92       	push	r0
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	0f 92       	push	r0
     b7c:	11 24       	eor	r1, r1
     b7e:	08 b6       	in	r0, 0x38	; 56
     b80:	0f 92       	push	r0
     b82:	18 be       	out	0x38, r1	; 56
     b84:	09 b6       	in	r0, 0x39	; 57
     b86:	0f 92       	push	r0
     b88:	19 be       	out	0x39, r1	; 57
     b8a:	0b b6       	in	r0, 0x3b	; 59
     b8c:	0f 92       	push	r0
     b8e:	1b be       	out	0x3b, r1	; 59
     b90:	2f 93       	push	r18
     b92:	3f 93       	push	r19
     b94:	4f 93       	push	r20
     b96:	5f 93       	push	r21
     b98:	6f 93       	push	r22
     b9a:	7f 93       	push	r23
     b9c:	8f 93       	push	r24
     b9e:	9f 93       	push	r25
     ba0:	af 93       	push	r26
     ba2:	bf 93       	push	r27
     ba4:	ef 93       	push	r30
     ba6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     ba8:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     bac:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     bb0:	e0 91 a7 20 	lds	r30, 0x20A7	; 0x8020a7 <adcb_callback>
     bb4:	f0 91 a8 20 	lds	r31, 0x20A8	; 0x8020a8 <adcb_callback+0x1>
     bb8:	68 e0       	ldi	r22, 0x08	; 8
     bba:	80 e4       	ldi	r24, 0x40	; 64
     bbc:	92 e0       	ldi	r25, 0x02	; 2
     bbe:	19 95       	eicall
}
     bc0:	ff 91       	pop	r31
     bc2:	ef 91       	pop	r30
     bc4:	bf 91       	pop	r27
     bc6:	af 91       	pop	r26
     bc8:	9f 91       	pop	r25
     bca:	8f 91       	pop	r24
     bcc:	7f 91       	pop	r23
     bce:	6f 91       	pop	r22
     bd0:	5f 91       	pop	r21
     bd2:	4f 91       	pop	r20
     bd4:	3f 91       	pop	r19
     bd6:	2f 91       	pop	r18
     bd8:	0f 90       	pop	r0
     bda:	0b be       	out	0x3b, r0	; 59
     bdc:	0f 90       	pop	r0
     bde:	09 be       	out	0x39, r0	; 57
     be0:	0f 90       	pop	r0
     be2:	08 be       	out	0x38, r0	; 56
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     bee:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     bf0:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     bf2:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     bf4:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     bf6:	60 83       	st	Z, r22
	ret                             // Return to caller
     bf8:	08 95       	ret

00000bfa <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     bfa:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     bfe:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     c00:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     c02:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     c06:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     c08:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     c0c:	08 95       	ret

00000c0e <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	08 b6       	in	r0, 0x38	; 56
     c1a:	0f 92       	push	r0
     c1c:	18 be       	out	0x38, r1	; 56
     c1e:	09 b6       	in	r0, 0x39	; 57
     c20:	0f 92       	push	r0
     c22:	19 be       	out	0x39, r1	; 57
     c24:	0b b6       	in	r0, 0x3b	; 59
     c26:	0f 92       	push	r0
     c28:	1b be       	out	0x3b, r1	; 59
     c2a:	2f 93       	push	r18
     c2c:	3f 93       	push	r19
     c2e:	4f 93       	push	r20
     c30:	5f 93       	push	r21
     c32:	6f 93       	push	r22
     c34:	7f 93       	push	r23
     c36:	8f 93       	push	r24
     c38:	9f 93       	push	r25
     c3a:	af 93       	push	r26
     c3c:	bf 93       	push	r27
     c3e:	ef 93       	push	r30
     c40:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     c42:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <tc_tcc0_ovf_callback>
     c46:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <tc_tcc0_ovf_callback+0x1>
     c4a:	30 97       	sbiw	r30, 0x00	; 0
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     c4e:	19 95       	eicall
	}
}
     c50:	ff 91       	pop	r31
     c52:	ef 91       	pop	r30
     c54:	bf 91       	pop	r27
     c56:	af 91       	pop	r26
     c58:	9f 91       	pop	r25
     c5a:	8f 91       	pop	r24
     c5c:	7f 91       	pop	r23
     c5e:	6f 91       	pop	r22
     c60:	5f 91       	pop	r21
     c62:	4f 91       	pop	r20
     c64:	3f 91       	pop	r19
     c66:	2f 91       	pop	r18
     c68:	0f 90       	pop	r0
     c6a:	0b be       	out	0x3b, r0	; 59
     c6c:	0f 90       	pop	r0
     c6e:	09 be       	out	0x39, r0	; 57
     c70:	0f 90       	pop	r0
     c72:	08 be       	out	0x38, r0	; 56
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	08 b6       	in	r0, 0x38	; 56
     c8a:	0f 92       	push	r0
     c8c:	18 be       	out	0x38, r1	; 56
     c8e:	09 b6       	in	r0, 0x39	; 57
     c90:	0f 92       	push	r0
     c92:	19 be       	out	0x39, r1	; 57
     c94:	0b b6       	in	r0, 0x3b	; 59
     c96:	0f 92       	push	r0
     c98:	1b be       	out	0x3b, r1	; 59
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     cb2:	e0 91 9d 20 	lds	r30, 0x209D	; 0x80209d <tc_tcc0_err_callback>
     cb6:	f0 91 9e 20 	lds	r31, 0x209E	; 0x80209e <tc_tcc0_err_callback+0x1>
     cba:	30 97       	sbiw	r30, 0x00	; 0
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <__vector_15+0x42>
		tc_tcc0_err_callback();
     cbe:	19 95       	eicall
	}
}
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0b be       	out	0x3b, r0	; 59
     cdc:	0f 90       	pop	r0
     cde:	09 be       	out	0x39, r0	; 57
     ce0:	0f 90       	pop	r0
     ce2:	08 be       	out	0x38, r0	; 56
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	0f 90       	pop	r0
     cea:	1f 90       	pop	r1
     cec:	18 95       	reti

00000cee <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     cee:	1f 92       	push	r1
     cf0:	0f 92       	push	r0
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	0f 92       	push	r0
     cf6:	11 24       	eor	r1, r1
     cf8:	08 b6       	in	r0, 0x38	; 56
     cfa:	0f 92       	push	r0
     cfc:	18 be       	out	0x38, r1	; 56
     cfe:	09 b6       	in	r0, 0x39	; 57
     d00:	0f 92       	push	r0
     d02:	19 be       	out	0x39, r1	; 57
     d04:	0b b6       	in	r0, 0x3b	; 59
     d06:	0f 92       	push	r0
     d08:	1b be       	out	0x3b, r1	; 59
     d0a:	2f 93       	push	r18
     d0c:	3f 93       	push	r19
     d0e:	4f 93       	push	r20
     d10:	5f 93       	push	r21
     d12:	6f 93       	push	r22
     d14:	7f 93       	push	r23
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     d22:	e0 91 9b 20 	lds	r30, 0x209B	; 0x80209b <tc_tcc0_cca_callback>
     d26:	f0 91 9c 20 	lds	r31, 0x209C	; 0x80209c <tc_tcc0_cca_callback+0x1>
     d2a:	30 97       	sbiw	r30, 0x00	; 0
     d2c:	09 f0       	breq	.+2      	; 0xd30 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     d2e:	19 95       	eicall
	}
}
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	7f 91       	pop	r23
     d3e:	6f 91       	pop	r22
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	0f 90       	pop	r0
     d4a:	0b be       	out	0x3b, r0	; 59
     d4c:	0f 90       	pop	r0
     d4e:	09 be       	out	0x39, r0	; 57
     d50:	0f 90       	pop	r0
     d52:	08 be       	out	0x38, r0	; 56
     d54:	0f 90       	pop	r0
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	0f 90       	pop	r0
     d5a:	1f 90       	pop	r1
     d5c:	18 95       	reti

00000d5e <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     d5e:	1f 92       	push	r1
     d60:	0f 92       	push	r0
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	08 b6       	in	r0, 0x38	; 56
     d6a:	0f 92       	push	r0
     d6c:	18 be       	out	0x38, r1	; 56
     d6e:	09 b6       	in	r0, 0x39	; 57
     d70:	0f 92       	push	r0
     d72:	19 be       	out	0x39, r1	; 57
     d74:	0b b6       	in	r0, 0x3b	; 59
     d76:	0f 92       	push	r0
     d78:	1b be       	out	0x3b, r1	; 59
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     d92:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <tc_tcc0_ccb_callback>
     d96:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <tc_tcc0_ccb_callback+0x1>
     d9a:	30 97       	sbiw	r30, 0x00	; 0
     d9c:	09 f0       	breq	.+2      	; 0xda0 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     d9e:	19 95       	eicall
	}
}
     da0:	ff 91       	pop	r31
     da2:	ef 91       	pop	r30
     da4:	bf 91       	pop	r27
     da6:	af 91       	pop	r26
     da8:	9f 91       	pop	r25
     daa:	8f 91       	pop	r24
     dac:	7f 91       	pop	r23
     dae:	6f 91       	pop	r22
     db0:	5f 91       	pop	r21
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0b be       	out	0x3b, r0	; 59
     dbc:	0f 90       	pop	r0
     dbe:	09 be       	out	0x39, r0	; 57
     dc0:	0f 90       	pop	r0
     dc2:	08 be       	out	0x38, r0	; 56
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	08 b6       	in	r0, 0x38	; 56
     dda:	0f 92       	push	r0
     ddc:	18 be       	out	0x38, r1	; 56
     dde:	09 b6       	in	r0, 0x39	; 57
     de0:	0f 92       	push	r0
     de2:	19 be       	out	0x39, r1	; 57
     de4:	0b b6       	in	r0, 0x3b	; 59
     de6:	0f 92       	push	r0
     de8:	1b be       	out	0x3b, r1	; 59
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     e02:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <tc_tcc0_ccc_callback>
     e06:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <tc_tcc0_ccc_callback+0x1>
     e0a:	30 97       	sbiw	r30, 0x00	; 0
     e0c:	09 f0       	breq	.+2      	; 0xe10 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     e0e:	19 95       	eicall
	}
}
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	bf 91       	pop	r27
     e16:	af 91       	pop	r26
     e18:	9f 91       	pop	r25
     e1a:	8f 91       	pop	r24
     e1c:	7f 91       	pop	r23
     e1e:	6f 91       	pop	r22
     e20:	5f 91       	pop	r21
     e22:	4f 91       	pop	r20
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	0b be       	out	0x3b, r0	; 59
     e2c:	0f 90       	pop	r0
     e2e:	09 be       	out	0x39, r0	; 57
     e30:	0f 90       	pop	r0
     e32:	08 be       	out	0x38, r0	; 56
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	08 b6       	in	r0, 0x38	; 56
     e4a:	0f 92       	push	r0
     e4c:	18 be       	out	0x38, r1	; 56
     e4e:	09 b6       	in	r0, 0x39	; 57
     e50:	0f 92       	push	r0
     e52:	19 be       	out	0x39, r1	; 57
     e54:	0b b6       	in	r0, 0x3b	; 59
     e56:	0f 92       	push	r0
     e58:	1b be       	out	0x3b, r1	; 59
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     e72:	e0 91 95 20 	lds	r30, 0x2095	; 0x802095 <tc_tcc0_ccd_callback>
     e76:	f0 91 96 20 	lds	r31, 0x2096	; 0x802096 <tc_tcc0_ccd_callback+0x1>
     e7a:	30 97       	sbiw	r30, 0x00	; 0
     e7c:	09 f0       	breq	.+2      	; 0xe80 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     e7e:	19 95       	eicall
	}
}
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0b be       	out	0x3b, r0	; 59
     e9c:	0f 90       	pop	r0
     e9e:	09 be       	out	0x39, r0	; 57
     ea0:	0f 90       	pop	r0
     ea2:	08 be       	out	0x38, r0	; 56
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	08 b6       	in	r0, 0x38	; 56
     eba:	0f 92       	push	r0
     ebc:	18 be       	out	0x38, r1	; 56
     ebe:	09 b6       	in	r0, 0x39	; 57
     ec0:	0f 92       	push	r0
     ec2:	19 be       	out	0x39, r1	; 57
     ec4:	0b b6       	in	r0, 0x3b	; 59
     ec6:	0f 92       	push	r0
     ec8:	1b be       	out	0x3b, r1	; 59
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     ee2:	e0 91 93 20 	lds	r30, 0x2093	; 0x802093 <tc_tcc1_ovf_callback>
     ee6:	f0 91 94 20 	lds	r31, 0x2094	; 0x802094 <tc_tcc1_ovf_callback+0x1>
     eea:	30 97       	sbiw	r30, 0x00	; 0
     eec:	09 f0       	breq	.+2      	; 0xef0 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     eee:	19 95       	eicall
	}
}
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	bf 91       	pop	r27
     ef6:	af 91       	pop	r26
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	7f 91       	pop	r23
     efe:	6f 91       	pop	r22
     f00:	5f 91       	pop	r21
     f02:	4f 91       	pop	r20
     f04:	3f 91       	pop	r19
     f06:	2f 91       	pop	r18
     f08:	0f 90       	pop	r0
     f0a:	0b be       	out	0x3b, r0	; 59
     f0c:	0f 90       	pop	r0
     f0e:	09 be       	out	0x39, r0	; 57
     f10:	0f 90       	pop	r0
     f12:	08 be       	out	0x38, r0	; 56
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	08 b6       	in	r0, 0x38	; 56
     f2a:	0f 92       	push	r0
     f2c:	18 be       	out	0x38, r1	; 56
     f2e:	09 b6       	in	r0, 0x39	; 57
     f30:	0f 92       	push	r0
     f32:	19 be       	out	0x39, r1	; 57
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	1b be       	out	0x3b, r1	; 59
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     f52:	e0 91 91 20 	lds	r30, 0x2091	; 0x802091 <tc_tcc1_err_callback>
     f56:	f0 91 92 20 	lds	r31, 0x2092	; 0x802092 <tc_tcc1_err_callback+0x1>
     f5a:	30 97       	sbiw	r30, 0x00	; 0
     f5c:	09 f0       	breq	.+2      	; 0xf60 <__vector_21+0x42>
		tc_tcc1_err_callback();
     f5e:	19 95       	eicall
	}
}
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0b be       	out	0x3b, r0	; 59
     f7c:	0f 90       	pop	r0
     f7e:	09 be       	out	0x39, r0	; 57
     f80:	0f 90       	pop	r0
     f82:	08 be       	out	0x38, r0	; 56
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	08 b6       	in	r0, 0x38	; 56
     f9a:	0f 92       	push	r0
     f9c:	18 be       	out	0x38, r1	; 56
     f9e:	09 b6       	in	r0, 0x39	; 57
     fa0:	0f 92       	push	r0
     fa2:	19 be       	out	0x39, r1	; 57
     fa4:	0b b6       	in	r0, 0x3b	; 59
     fa6:	0f 92       	push	r0
     fa8:	1b be       	out	0x3b, r1	; 59
     faa:	2f 93       	push	r18
     fac:	3f 93       	push	r19
     fae:	4f 93       	push	r20
     fb0:	5f 93       	push	r21
     fb2:	6f 93       	push	r22
     fb4:	7f 93       	push	r23
     fb6:	8f 93       	push	r24
     fb8:	9f 93       	push	r25
     fba:	af 93       	push	r26
     fbc:	bf 93       	push	r27
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     fc2:	e0 91 8f 20 	lds	r30, 0x208F	; 0x80208f <tc_tcc1_cca_callback>
     fc6:	f0 91 90 20 	lds	r31, 0x2090	; 0x802090 <tc_tcc1_cca_callback+0x1>
     fca:	30 97       	sbiw	r30, 0x00	; 0
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <__vector_22+0x42>
		tc_tcc1_cca_callback();
     fce:	19 95       	eicall
	}
}
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	bf 91       	pop	r27
     fd6:	af 91       	pop	r26
     fd8:	9f 91       	pop	r25
     fda:	8f 91       	pop	r24
     fdc:	7f 91       	pop	r23
     fde:	6f 91       	pop	r22
     fe0:	5f 91       	pop	r21
     fe2:	4f 91       	pop	r20
     fe4:	3f 91       	pop	r19
     fe6:	2f 91       	pop	r18
     fe8:	0f 90       	pop	r0
     fea:	0b be       	out	0x3b, r0	; 59
     fec:	0f 90       	pop	r0
     fee:	09 be       	out	0x39, r0	; 57
     ff0:	0f 90       	pop	r0
     ff2:	08 be       	out	0x38, r0	; 56
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	0f 90       	pop	r0
     ffa:	1f 90       	pop	r1
     ffc:	18 95       	reti

00000ffe <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	08 b6       	in	r0, 0x38	; 56
    100a:	0f 92       	push	r0
    100c:	18 be       	out	0x38, r1	; 56
    100e:	09 b6       	in	r0, 0x39	; 57
    1010:	0f 92       	push	r0
    1012:	19 be       	out	0x39, r1	; 57
    1014:	0b b6       	in	r0, 0x3b	; 59
    1016:	0f 92       	push	r0
    1018:	1b be       	out	0x3b, r1	; 59
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    1032:	e0 91 8d 20 	lds	r30, 0x208D	; 0x80208d <tc_tcc1_ccb_callback>
    1036:	f0 91 8e 20 	lds	r31, 0x208E	; 0x80208e <tc_tcc1_ccb_callback+0x1>
    103a:	30 97       	sbiw	r30, 0x00	; 0
    103c:	09 f0       	breq	.+2      	; 0x1040 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
    103e:	19 95       	eicall
	}
}
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0b be       	out	0x3b, r0	; 59
    105c:	0f 90       	pop	r0
    105e:	09 be       	out	0x39, r0	; 57
    1060:	0f 90       	pop	r0
    1062:	08 be       	out	0x38, r0	; 56
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	08 b6       	in	r0, 0x38	; 56
    107a:	0f 92       	push	r0
    107c:	18 be       	out	0x38, r1	; 56
    107e:	09 b6       	in	r0, 0x39	; 57
    1080:	0f 92       	push	r0
    1082:	19 be       	out	0x39, r1	; 57
    1084:	0b b6       	in	r0, 0x3b	; 59
    1086:	0f 92       	push	r0
    1088:	1b be       	out	0x3b, r1	; 59
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    10a2:	e0 91 8b 20 	lds	r30, 0x208B	; 0x80208b <tc_tcd0_ovf_callback>
    10a6:	f0 91 8c 20 	lds	r31, 0x208C	; 0x80208c <tc_tcd0_ovf_callback+0x1>
    10aa:	30 97       	sbiw	r30, 0x00	; 0
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
    10ae:	19 95       	eicall
	}
}
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	bf 91       	pop	r27
    10b6:	af 91       	pop	r26
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	7f 91       	pop	r23
    10be:	6f 91       	pop	r22
    10c0:	5f 91       	pop	r21
    10c2:	4f 91       	pop	r20
    10c4:	3f 91       	pop	r19
    10c6:	2f 91       	pop	r18
    10c8:	0f 90       	pop	r0
    10ca:	0b be       	out	0x3b, r0	; 59
    10cc:	0f 90       	pop	r0
    10ce:	09 be       	out	0x39, r0	; 57
    10d0:	0f 90       	pop	r0
    10d2:	08 be       	out	0x38, r0	; 56
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	08 b6       	in	r0, 0x38	; 56
    10ea:	0f 92       	push	r0
    10ec:	18 be       	out	0x38, r1	; 56
    10ee:	09 b6       	in	r0, 0x39	; 57
    10f0:	0f 92       	push	r0
    10f2:	19 be       	out	0x39, r1	; 57
    10f4:	0b b6       	in	r0, 0x3b	; 59
    10f6:	0f 92       	push	r0
    10f8:	1b be       	out	0x3b, r1	; 59
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    1112:	e0 91 89 20 	lds	r30, 0x2089	; 0x802089 <tc_tcd0_err_callback>
    1116:	f0 91 8a 20 	lds	r31, 0x208A	; 0x80208a <tc_tcd0_err_callback+0x1>
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	09 f0       	breq	.+2      	; 0x1120 <__vector_78+0x42>
		tc_tcd0_err_callback();
    111e:	19 95       	eicall
	}
}
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0b be       	out	0x3b, r0	; 59
    113c:	0f 90       	pop	r0
    113e:	09 be       	out	0x39, r0	; 57
    1140:	0f 90       	pop	r0
    1142:	08 be       	out	0x38, r0	; 56
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    114e:	1f 92       	push	r1
    1150:	0f 92       	push	r0
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	0f 92       	push	r0
    1156:	11 24       	eor	r1, r1
    1158:	08 b6       	in	r0, 0x38	; 56
    115a:	0f 92       	push	r0
    115c:	18 be       	out	0x38, r1	; 56
    115e:	09 b6       	in	r0, 0x39	; 57
    1160:	0f 92       	push	r0
    1162:	19 be       	out	0x39, r1	; 57
    1164:	0b b6       	in	r0, 0x3b	; 59
    1166:	0f 92       	push	r0
    1168:	1b be       	out	0x3b, r1	; 59
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1182:	e0 91 87 20 	lds	r30, 0x2087	; 0x802087 <tc_tcd0_cca_callback>
    1186:	f0 91 88 20 	lds	r31, 0x2088	; 0x802088 <tc_tcd0_cca_callback+0x1>
    118a:	30 97       	sbiw	r30, 0x00	; 0
    118c:	09 f0       	breq	.+2      	; 0x1190 <__vector_79+0x42>
		tc_tcd0_cca_callback();
    118e:	19 95       	eicall
	}
}
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0b be       	out	0x3b, r0	; 59
    11ac:	0f 90       	pop	r0
    11ae:	09 be       	out	0x39, r0	; 57
    11b0:	0f 90       	pop	r0
    11b2:	08 be       	out	0x38, r0	; 56
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	08 b6       	in	r0, 0x38	; 56
    11ca:	0f 92       	push	r0
    11cc:	18 be       	out	0x38, r1	; 56
    11ce:	09 b6       	in	r0, 0x39	; 57
    11d0:	0f 92       	push	r0
    11d2:	19 be       	out	0x39, r1	; 57
    11d4:	0b b6       	in	r0, 0x3b	; 59
    11d6:	0f 92       	push	r0
    11d8:	1b be       	out	0x3b, r1	; 59
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    11f2:	e0 91 85 20 	lds	r30, 0x2085	; 0x802085 <tc_tcd0_ccb_callback>
    11f6:	f0 91 86 20 	lds	r31, 0x2086	; 0x802086 <tc_tcd0_ccb_callback+0x1>
    11fa:	30 97       	sbiw	r30, 0x00	; 0
    11fc:	09 f0       	breq	.+2      	; 0x1200 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    11fe:	19 95       	eicall
	}
}
    1200:	ff 91       	pop	r31
    1202:	ef 91       	pop	r30
    1204:	bf 91       	pop	r27
    1206:	af 91       	pop	r26
    1208:	9f 91       	pop	r25
    120a:	8f 91       	pop	r24
    120c:	7f 91       	pop	r23
    120e:	6f 91       	pop	r22
    1210:	5f 91       	pop	r21
    1212:	4f 91       	pop	r20
    1214:	3f 91       	pop	r19
    1216:	2f 91       	pop	r18
    1218:	0f 90       	pop	r0
    121a:	0b be       	out	0x3b, r0	; 59
    121c:	0f 90       	pop	r0
    121e:	09 be       	out	0x39, r0	; 57
    1220:	0f 90       	pop	r0
    1222:	08 be       	out	0x38, r0	; 56
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	08 b6       	in	r0, 0x38	; 56
    123a:	0f 92       	push	r0
    123c:	18 be       	out	0x38, r1	; 56
    123e:	09 b6       	in	r0, 0x39	; 57
    1240:	0f 92       	push	r0
    1242:	19 be       	out	0x39, r1	; 57
    1244:	0b b6       	in	r0, 0x3b	; 59
    1246:	0f 92       	push	r0
    1248:	1b be       	out	0x3b, r1	; 59
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1262:	e0 91 83 20 	lds	r30, 0x2083	; 0x802083 <tc_tcd0_ccc_callback>
    1266:	f0 91 84 20 	lds	r31, 0x2084	; 0x802084 <tc_tcd0_ccc_callback+0x1>
    126a:	30 97       	sbiw	r30, 0x00	; 0
    126c:	09 f0       	breq	.+2      	; 0x1270 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    126e:	19 95       	eicall
	}
}
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0b be       	out	0x3b, r0	; 59
    128c:	0f 90       	pop	r0
    128e:	09 be       	out	0x39, r0	; 57
    1290:	0f 90       	pop	r0
    1292:	08 be       	out	0x38, r0	; 56
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	0f 90       	pop	r0
    129a:	1f 90       	pop	r1
    129c:	18 95       	reti

0000129e <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	08 b6       	in	r0, 0x38	; 56
    12aa:	0f 92       	push	r0
    12ac:	18 be       	out	0x38, r1	; 56
    12ae:	09 b6       	in	r0, 0x39	; 57
    12b0:	0f 92       	push	r0
    12b2:	19 be       	out	0x39, r1	; 57
    12b4:	0b b6       	in	r0, 0x3b	; 59
    12b6:	0f 92       	push	r0
    12b8:	1b be       	out	0x3b, r1	; 59
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    12d2:	e0 91 81 20 	lds	r30, 0x2081	; 0x802081 <tc_tcd0_ccd_callback>
    12d6:	f0 91 82 20 	lds	r31, 0x2082	; 0x802082 <tc_tcd0_ccd_callback+0x1>
    12da:	30 97       	sbiw	r30, 0x00	; 0
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    12de:	19 95       	eicall
	}
}
    12e0:	ff 91       	pop	r31
    12e2:	ef 91       	pop	r30
    12e4:	bf 91       	pop	r27
    12e6:	af 91       	pop	r26
    12e8:	9f 91       	pop	r25
    12ea:	8f 91       	pop	r24
    12ec:	7f 91       	pop	r23
    12ee:	6f 91       	pop	r22
    12f0:	5f 91       	pop	r21
    12f2:	4f 91       	pop	r20
    12f4:	3f 91       	pop	r19
    12f6:	2f 91       	pop	r18
    12f8:	0f 90       	pop	r0
    12fa:	0b be       	out	0x3b, r0	; 59
    12fc:	0f 90       	pop	r0
    12fe:	09 be       	out	0x39, r0	; 57
    1300:	0f 90       	pop	r0
    1302:	08 be       	out	0x38, r0	; 56
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	08 b6       	in	r0, 0x38	; 56
    131a:	0f 92       	push	r0
    131c:	18 be       	out	0x38, r1	; 56
    131e:	09 b6       	in	r0, 0x39	; 57
    1320:	0f 92       	push	r0
    1322:	19 be       	out	0x39, r1	; 57
    1324:	0b b6       	in	r0, 0x3b	; 59
    1326:	0f 92       	push	r0
    1328:	1b be       	out	0x3b, r1	; 59
    132a:	2f 93       	push	r18
    132c:	3f 93       	push	r19
    132e:	4f 93       	push	r20
    1330:	5f 93       	push	r21
    1332:	6f 93       	push	r22
    1334:	7f 93       	push	r23
    1336:	8f 93       	push	r24
    1338:	9f 93       	push	r25
    133a:	af 93       	push	r26
    133c:	bf 93       	push	r27
    133e:	ef 93       	push	r30
    1340:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1342:	e0 91 7f 20 	lds	r30, 0x207F	; 0x80207f <tc_tcd1_ovf_callback>
    1346:	f0 91 80 20 	lds	r31, 0x2080	; 0x802080 <tc_tcd1_ovf_callback+0x1>
    134a:	30 97       	sbiw	r30, 0x00	; 0
    134c:	09 f0       	breq	.+2      	; 0x1350 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    134e:	19 95       	eicall
	}
}
    1350:	ff 91       	pop	r31
    1352:	ef 91       	pop	r30
    1354:	bf 91       	pop	r27
    1356:	af 91       	pop	r26
    1358:	9f 91       	pop	r25
    135a:	8f 91       	pop	r24
    135c:	7f 91       	pop	r23
    135e:	6f 91       	pop	r22
    1360:	5f 91       	pop	r21
    1362:	4f 91       	pop	r20
    1364:	3f 91       	pop	r19
    1366:	2f 91       	pop	r18
    1368:	0f 90       	pop	r0
    136a:	0b be       	out	0x3b, r0	; 59
    136c:	0f 90       	pop	r0
    136e:	09 be       	out	0x39, r0	; 57
    1370:	0f 90       	pop	r0
    1372:	08 be       	out	0x38, r0	; 56
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	0f 90       	pop	r0
    137a:	1f 90       	pop	r1
    137c:	18 95       	reti

0000137e <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    137e:	1f 92       	push	r1
    1380:	0f 92       	push	r0
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	0f 92       	push	r0
    1386:	11 24       	eor	r1, r1
    1388:	08 b6       	in	r0, 0x38	; 56
    138a:	0f 92       	push	r0
    138c:	18 be       	out	0x38, r1	; 56
    138e:	09 b6       	in	r0, 0x39	; 57
    1390:	0f 92       	push	r0
    1392:	19 be       	out	0x39, r1	; 57
    1394:	0b b6       	in	r0, 0x3b	; 59
    1396:	0f 92       	push	r0
    1398:	1b be       	out	0x3b, r1	; 59
    139a:	2f 93       	push	r18
    139c:	3f 93       	push	r19
    139e:	4f 93       	push	r20
    13a0:	5f 93       	push	r21
    13a2:	6f 93       	push	r22
    13a4:	7f 93       	push	r23
    13a6:	8f 93       	push	r24
    13a8:	9f 93       	push	r25
    13aa:	af 93       	push	r26
    13ac:	bf 93       	push	r27
    13ae:	ef 93       	push	r30
    13b0:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    13b2:	e0 91 7d 20 	lds	r30, 0x207D	; 0x80207d <tc_tcd1_err_callback>
    13b6:	f0 91 7e 20 	lds	r31, 0x207E	; 0x80207e <tc_tcd1_err_callback+0x1>
    13ba:	30 97       	sbiw	r30, 0x00	; 0
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <__vector_84+0x42>
		tc_tcd1_err_callback();
    13be:	19 95       	eicall
	}
}
    13c0:	ff 91       	pop	r31
    13c2:	ef 91       	pop	r30
    13c4:	bf 91       	pop	r27
    13c6:	af 91       	pop	r26
    13c8:	9f 91       	pop	r25
    13ca:	8f 91       	pop	r24
    13cc:	7f 91       	pop	r23
    13ce:	6f 91       	pop	r22
    13d0:	5f 91       	pop	r21
    13d2:	4f 91       	pop	r20
    13d4:	3f 91       	pop	r19
    13d6:	2f 91       	pop	r18
    13d8:	0f 90       	pop	r0
    13da:	0b be       	out	0x3b, r0	; 59
    13dc:	0f 90       	pop	r0
    13de:	09 be       	out	0x39, r0	; 57
    13e0:	0f 90       	pop	r0
    13e2:	08 be       	out	0x38, r0	; 56
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	08 b6       	in	r0, 0x38	; 56
    13fa:	0f 92       	push	r0
    13fc:	18 be       	out	0x38, r1	; 56
    13fe:	09 b6       	in	r0, 0x39	; 57
    1400:	0f 92       	push	r0
    1402:	19 be       	out	0x39, r1	; 57
    1404:	0b b6       	in	r0, 0x3b	; 59
    1406:	0f 92       	push	r0
    1408:	1b be       	out	0x3b, r1	; 59
    140a:	2f 93       	push	r18
    140c:	3f 93       	push	r19
    140e:	4f 93       	push	r20
    1410:	5f 93       	push	r21
    1412:	6f 93       	push	r22
    1414:	7f 93       	push	r23
    1416:	8f 93       	push	r24
    1418:	9f 93       	push	r25
    141a:	af 93       	push	r26
    141c:	bf 93       	push	r27
    141e:	ef 93       	push	r30
    1420:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1422:	e0 91 7b 20 	lds	r30, 0x207B	; 0x80207b <tc_tcd1_cca_callback>
    1426:	f0 91 7c 20 	lds	r31, 0x207C	; 0x80207c <tc_tcd1_cca_callback+0x1>
    142a:	30 97       	sbiw	r30, 0x00	; 0
    142c:	09 f0       	breq	.+2      	; 0x1430 <__vector_85+0x42>
		tc_tcd1_cca_callback();
    142e:	19 95       	eicall
	}
}
    1430:	ff 91       	pop	r31
    1432:	ef 91       	pop	r30
    1434:	bf 91       	pop	r27
    1436:	af 91       	pop	r26
    1438:	9f 91       	pop	r25
    143a:	8f 91       	pop	r24
    143c:	7f 91       	pop	r23
    143e:	6f 91       	pop	r22
    1440:	5f 91       	pop	r21
    1442:	4f 91       	pop	r20
    1444:	3f 91       	pop	r19
    1446:	2f 91       	pop	r18
    1448:	0f 90       	pop	r0
    144a:	0b be       	out	0x3b, r0	; 59
    144c:	0f 90       	pop	r0
    144e:	09 be       	out	0x39, r0	; 57
    1450:	0f 90       	pop	r0
    1452:	08 be       	out	0x38, r0	; 56
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti

0000145e <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    145e:	1f 92       	push	r1
    1460:	0f 92       	push	r0
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	0f 92       	push	r0
    1466:	11 24       	eor	r1, r1
    1468:	08 b6       	in	r0, 0x38	; 56
    146a:	0f 92       	push	r0
    146c:	18 be       	out	0x38, r1	; 56
    146e:	09 b6       	in	r0, 0x39	; 57
    1470:	0f 92       	push	r0
    1472:	19 be       	out	0x39, r1	; 57
    1474:	0b b6       	in	r0, 0x3b	; 59
    1476:	0f 92       	push	r0
    1478:	1b be       	out	0x3b, r1	; 59
    147a:	2f 93       	push	r18
    147c:	3f 93       	push	r19
    147e:	4f 93       	push	r20
    1480:	5f 93       	push	r21
    1482:	6f 93       	push	r22
    1484:	7f 93       	push	r23
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	af 93       	push	r26
    148c:	bf 93       	push	r27
    148e:	ef 93       	push	r30
    1490:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1492:	e0 91 79 20 	lds	r30, 0x2079	; 0x802079 <tc_tcd1_ccb_callback>
    1496:	f0 91 7a 20 	lds	r31, 0x207A	; 0x80207a <tc_tcd1_ccb_callback+0x1>
    149a:	30 97       	sbiw	r30, 0x00	; 0
    149c:	09 f0       	breq	.+2      	; 0x14a0 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    149e:	19 95       	eicall
	}
}
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	0b be       	out	0x3b, r0	; 59
    14bc:	0f 90       	pop	r0
    14be:	09 be       	out	0x39, r0	; 57
    14c0:	0f 90       	pop	r0
    14c2:	08 be       	out	0x38, r0	; 56
    14c4:	0f 90       	pop	r0
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	0f 90       	pop	r0
    14ca:	1f 90       	pop	r1
    14cc:	18 95       	reti

000014ce <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    14ce:	1f 92       	push	r1
    14d0:	0f 92       	push	r0
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	0f 92       	push	r0
    14d6:	11 24       	eor	r1, r1
    14d8:	08 b6       	in	r0, 0x38	; 56
    14da:	0f 92       	push	r0
    14dc:	18 be       	out	0x38, r1	; 56
    14de:	09 b6       	in	r0, 0x39	; 57
    14e0:	0f 92       	push	r0
    14e2:	19 be       	out	0x39, r1	; 57
    14e4:	0b b6       	in	r0, 0x3b	; 59
    14e6:	0f 92       	push	r0
    14e8:	1b be       	out	0x3b, r1	; 59
    14ea:	2f 93       	push	r18
    14ec:	3f 93       	push	r19
    14ee:	4f 93       	push	r20
    14f0:	5f 93       	push	r21
    14f2:	6f 93       	push	r22
    14f4:	7f 93       	push	r23
    14f6:	8f 93       	push	r24
    14f8:	9f 93       	push	r25
    14fa:	af 93       	push	r26
    14fc:	bf 93       	push	r27
    14fe:	ef 93       	push	r30
    1500:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1502:	e0 91 77 20 	lds	r30, 0x2077	; 0x802077 <tc_tce0_ovf_callback>
    1506:	f0 91 78 20 	lds	r31, 0x2078	; 0x802078 <tc_tce0_ovf_callback+0x1>
    150a:	30 97       	sbiw	r30, 0x00	; 0
    150c:	09 f0       	breq	.+2      	; 0x1510 <__vector_47+0x42>
		tc_tce0_ovf_callback();
    150e:	19 95       	eicall
	}
}
    1510:	ff 91       	pop	r31
    1512:	ef 91       	pop	r30
    1514:	bf 91       	pop	r27
    1516:	af 91       	pop	r26
    1518:	9f 91       	pop	r25
    151a:	8f 91       	pop	r24
    151c:	7f 91       	pop	r23
    151e:	6f 91       	pop	r22
    1520:	5f 91       	pop	r21
    1522:	4f 91       	pop	r20
    1524:	3f 91       	pop	r19
    1526:	2f 91       	pop	r18
    1528:	0f 90       	pop	r0
    152a:	0b be       	out	0x3b, r0	; 59
    152c:	0f 90       	pop	r0
    152e:	09 be       	out	0x39, r0	; 57
    1530:	0f 90       	pop	r0
    1532:	08 be       	out	0x38, r0	; 56
    1534:	0f 90       	pop	r0
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	0f 90       	pop	r0
    153a:	1f 90       	pop	r1
    153c:	18 95       	reti

0000153e <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    153e:	1f 92       	push	r1
    1540:	0f 92       	push	r0
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	0f 92       	push	r0
    1546:	11 24       	eor	r1, r1
    1548:	08 b6       	in	r0, 0x38	; 56
    154a:	0f 92       	push	r0
    154c:	18 be       	out	0x38, r1	; 56
    154e:	09 b6       	in	r0, 0x39	; 57
    1550:	0f 92       	push	r0
    1552:	19 be       	out	0x39, r1	; 57
    1554:	0b b6       	in	r0, 0x3b	; 59
    1556:	0f 92       	push	r0
    1558:	1b be       	out	0x3b, r1	; 59
    155a:	2f 93       	push	r18
    155c:	3f 93       	push	r19
    155e:	4f 93       	push	r20
    1560:	5f 93       	push	r21
    1562:	6f 93       	push	r22
    1564:	7f 93       	push	r23
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	af 93       	push	r26
    156c:	bf 93       	push	r27
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1572:	e0 91 75 20 	lds	r30, 0x2075	; 0x802075 <tc_tce0_err_callback>
    1576:	f0 91 76 20 	lds	r31, 0x2076	; 0x802076 <tc_tce0_err_callback+0x1>
    157a:	30 97       	sbiw	r30, 0x00	; 0
    157c:	09 f0       	breq	.+2      	; 0x1580 <__vector_48+0x42>
		tc_tce0_err_callback();
    157e:	19 95       	eicall
	}
}
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0b be       	out	0x3b, r0	; 59
    159c:	0f 90       	pop	r0
    159e:	09 be       	out	0x39, r0	; 57
    15a0:	0f 90       	pop	r0
    15a2:	08 be       	out	0x38, r0	; 56
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	0f 90       	pop	r0
    15aa:	1f 90       	pop	r1
    15ac:	18 95       	reti

000015ae <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    15ae:	1f 92       	push	r1
    15b0:	0f 92       	push	r0
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	0f 92       	push	r0
    15b6:	11 24       	eor	r1, r1
    15b8:	08 b6       	in	r0, 0x38	; 56
    15ba:	0f 92       	push	r0
    15bc:	18 be       	out	0x38, r1	; 56
    15be:	09 b6       	in	r0, 0x39	; 57
    15c0:	0f 92       	push	r0
    15c2:	19 be       	out	0x39, r1	; 57
    15c4:	0b b6       	in	r0, 0x3b	; 59
    15c6:	0f 92       	push	r0
    15c8:	1b be       	out	0x3b, r1	; 59
    15ca:	2f 93       	push	r18
    15cc:	3f 93       	push	r19
    15ce:	4f 93       	push	r20
    15d0:	5f 93       	push	r21
    15d2:	6f 93       	push	r22
    15d4:	7f 93       	push	r23
    15d6:	8f 93       	push	r24
    15d8:	9f 93       	push	r25
    15da:	af 93       	push	r26
    15dc:	bf 93       	push	r27
    15de:	ef 93       	push	r30
    15e0:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    15e2:	e0 91 73 20 	lds	r30, 0x2073	; 0x802073 <tc_tce0_cca_callback>
    15e6:	f0 91 74 20 	lds	r31, 0x2074	; 0x802074 <tc_tce0_cca_callback+0x1>
    15ea:	30 97       	sbiw	r30, 0x00	; 0
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <__vector_49+0x42>
		tc_tce0_cca_callback();
    15ee:	19 95       	eicall
	}
}
    15f0:	ff 91       	pop	r31
    15f2:	ef 91       	pop	r30
    15f4:	bf 91       	pop	r27
    15f6:	af 91       	pop	r26
    15f8:	9f 91       	pop	r25
    15fa:	8f 91       	pop	r24
    15fc:	7f 91       	pop	r23
    15fe:	6f 91       	pop	r22
    1600:	5f 91       	pop	r21
    1602:	4f 91       	pop	r20
    1604:	3f 91       	pop	r19
    1606:	2f 91       	pop	r18
    1608:	0f 90       	pop	r0
    160a:	0b be       	out	0x3b, r0	; 59
    160c:	0f 90       	pop	r0
    160e:	09 be       	out	0x39, r0	; 57
    1610:	0f 90       	pop	r0
    1612:	08 be       	out	0x38, r0	; 56
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	08 b6       	in	r0, 0x38	; 56
    162a:	0f 92       	push	r0
    162c:	18 be       	out	0x38, r1	; 56
    162e:	09 b6       	in	r0, 0x39	; 57
    1630:	0f 92       	push	r0
    1632:	19 be       	out	0x39, r1	; 57
    1634:	0b b6       	in	r0, 0x3b	; 59
    1636:	0f 92       	push	r0
    1638:	1b be       	out	0x3b, r1	; 59
    163a:	2f 93       	push	r18
    163c:	3f 93       	push	r19
    163e:	4f 93       	push	r20
    1640:	5f 93       	push	r21
    1642:	6f 93       	push	r22
    1644:	7f 93       	push	r23
    1646:	8f 93       	push	r24
    1648:	9f 93       	push	r25
    164a:	af 93       	push	r26
    164c:	bf 93       	push	r27
    164e:	ef 93       	push	r30
    1650:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1652:	e0 91 71 20 	lds	r30, 0x2071	; 0x802071 <tc_tce0_ccb_callback>
    1656:	f0 91 72 20 	lds	r31, 0x2072	; 0x802072 <tc_tce0_ccb_callback+0x1>
    165a:	30 97       	sbiw	r30, 0x00	; 0
    165c:	09 f0       	breq	.+2      	; 0x1660 <__vector_50+0x42>
		tc_tce0_ccb_callback();
    165e:	19 95       	eicall
	}
}
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	bf 91       	pop	r27
    1666:	af 91       	pop	r26
    1668:	9f 91       	pop	r25
    166a:	8f 91       	pop	r24
    166c:	7f 91       	pop	r23
    166e:	6f 91       	pop	r22
    1670:	5f 91       	pop	r21
    1672:	4f 91       	pop	r20
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	0f 90       	pop	r0
    167a:	0b be       	out	0x3b, r0	; 59
    167c:	0f 90       	pop	r0
    167e:	09 be       	out	0x39, r0	; 57
    1680:	0f 90       	pop	r0
    1682:	08 be       	out	0x38, r0	; 56
    1684:	0f 90       	pop	r0
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	0f 90       	pop	r0
    168a:	1f 90       	pop	r1
    168c:	18 95       	reti

0000168e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    168e:	1f 92       	push	r1
    1690:	0f 92       	push	r0
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	0f 92       	push	r0
    1696:	11 24       	eor	r1, r1
    1698:	08 b6       	in	r0, 0x38	; 56
    169a:	0f 92       	push	r0
    169c:	18 be       	out	0x38, r1	; 56
    169e:	09 b6       	in	r0, 0x39	; 57
    16a0:	0f 92       	push	r0
    16a2:	19 be       	out	0x39, r1	; 57
    16a4:	0b b6       	in	r0, 0x3b	; 59
    16a6:	0f 92       	push	r0
    16a8:	1b be       	out	0x3b, r1	; 59
    16aa:	2f 93       	push	r18
    16ac:	3f 93       	push	r19
    16ae:	4f 93       	push	r20
    16b0:	5f 93       	push	r21
    16b2:	6f 93       	push	r22
    16b4:	7f 93       	push	r23
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	af 93       	push	r26
    16bc:	bf 93       	push	r27
    16be:	ef 93       	push	r30
    16c0:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    16c2:	e0 91 6f 20 	lds	r30, 0x206F	; 0x80206f <tc_tce0_ccc_callback>
    16c6:	f0 91 70 20 	lds	r31, 0x2070	; 0x802070 <tc_tce0_ccc_callback+0x1>
    16ca:	30 97       	sbiw	r30, 0x00	; 0
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <__vector_51+0x42>
		tc_tce0_ccc_callback();
    16ce:	19 95       	eicall
	}
}
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	bf 91       	pop	r27
    16d6:	af 91       	pop	r26
    16d8:	9f 91       	pop	r25
    16da:	8f 91       	pop	r24
    16dc:	7f 91       	pop	r23
    16de:	6f 91       	pop	r22
    16e0:	5f 91       	pop	r21
    16e2:	4f 91       	pop	r20
    16e4:	3f 91       	pop	r19
    16e6:	2f 91       	pop	r18
    16e8:	0f 90       	pop	r0
    16ea:	0b be       	out	0x3b, r0	; 59
    16ec:	0f 90       	pop	r0
    16ee:	09 be       	out	0x39, r0	; 57
    16f0:	0f 90       	pop	r0
    16f2:	08 be       	out	0x38, r0	; 56
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	08 b6       	in	r0, 0x38	; 56
    170a:	0f 92       	push	r0
    170c:	18 be       	out	0x38, r1	; 56
    170e:	09 b6       	in	r0, 0x39	; 57
    1710:	0f 92       	push	r0
    1712:	19 be       	out	0x39, r1	; 57
    1714:	0b b6       	in	r0, 0x3b	; 59
    1716:	0f 92       	push	r0
    1718:	1b be       	out	0x3b, r1	; 59
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1732:	e0 91 6d 20 	lds	r30, 0x206D	; 0x80206d <tc_tce0_ccd_callback>
    1736:	f0 91 6e 20 	lds	r31, 0x206E	; 0x80206e <tc_tce0_ccd_callback+0x1>
    173a:	30 97       	sbiw	r30, 0x00	; 0
    173c:	09 f0       	breq	.+2      	; 0x1740 <__vector_52+0x42>
		tc_tce0_ccd_callback();
    173e:	19 95       	eicall
	}
}
    1740:	ff 91       	pop	r31
    1742:	ef 91       	pop	r30
    1744:	bf 91       	pop	r27
    1746:	af 91       	pop	r26
    1748:	9f 91       	pop	r25
    174a:	8f 91       	pop	r24
    174c:	7f 91       	pop	r23
    174e:	6f 91       	pop	r22
    1750:	5f 91       	pop	r21
    1752:	4f 91       	pop	r20
    1754:	3f 91       	pop	r19
    1756:	2f 91       	pop	r18
    1758:	0f 90       	pop	r0
    175a:	0b be       	out	0x3b, r0	; 59
    175c:	0f 90       	pop	r0
    175e:	09 be       	out	0x39, r0	; 57
    1760:	0f 90       	pop	r0
    1762:	08 be       	out	0x38, r0	; 56
    1764:	0f 90       	pop	r0
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	0f 90       	pop	r0
    176a:	1f 90       	pop	r1
    176c:	18 95       	reti

0000176e <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	08 b6       	in	r0, 0x38	; 56
    177a:	0f 92       	push	r0
    177c:	18 be       	out	0x38, r1	; 56
    177e:	09 b6       	in	r0, 0x39	; 57
    1780:	0f 92       	push	r0
    1782:	19 be       	out	0x39, r1	; 57
    1784:	0b b6       	in	r0, 0x3b	; 59
    1786:	0f 92       	push	r0
    1788:	1b be       	out	0x3b, r1	; 59
    178a:	2f 93       	push	r18
    178c:	3f 93       	push	r19
    178e:	4f 93       	push	r20
    1790:	5f 93       	push	r21
    1792:	6f 93       	push	r22
    1794:	7f 93       	push	r23
    1796:	8f 93       	push	r24
    1798:	9f 93       	push	r25
    179a:	af 93       	push	r26
    179c:	bf 93       	push	r27
    179e:	ef 93       	push	r30
    17a0:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    17a2:	e0 91 6b 20 	lds	r30, 0x206B	; 0x80206b <tc_tce1_ovf_callback>
    17a6:	f0 91 6c 20 	lds	r31, 0x206C	; 0x80206c <tc_tce1_ovf_callback+0x1>
    17aa:	30 97       	sbiw	r30, 0x00	; 0
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <__vector_53+0x42>
		tc_tce1_ovf_callback();
    17ae:	19 95       	eicall
	}
}
    17b0:	ff 91       	pop	r31
    17b2:	ef 91       	pop	r30
    17b4:	bf 91       	pop	r27
    17b6:	af 91       	pop	r26
    17b8:	9f 91       	pop	r25
    17ba:	8f 91       	pop	r24
    17bc:	7f 91       	pop	r23
    17be:	6f 91       	pop	r22
    17c0:	5f 91       	pop	r21
    17c2:	4f 91       	pop	r20
    17c4:	3f 91       	pop	r19
    17c6:	2f 91       	pop	r18
    17c8:	0f 90       	pop	r0
    17ca:	0b be       	out	0x3b, r0	; 59
    17cc:	0f 90       	pop	r0
    17ce:	09 be       	out	0x39, r0	; 57
    17d0:	0f 90       	pop	r0
    17d2:	08 be       	out	0x38, r0	; 56
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    17de:	1f 92       	push	r1
    17e0:	0f 92       	push	r0
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
    17e8:	08 b6       	in	r0, 0x38	; 56
    17ea:	0f 92       	push	r0
    17ec:	18 be       	out	0x38, r1	; 56
    17ee:	09 b6       	in	r0, 0x39	; 57
    17f0:	0f 92       	push	r0
    17f2:	19 be       	out	0x39, r1	; 57
    17f4:	0b b6       	in	r0, 0x3b	; 59
    17f6:	0f 92       	push	r0
    17f8:	1b be       	out	0x3b, r1	; 59
    17fa:	2f 93       	push	r18
    17fc:	3f 93       	push	r19
    17fe:	4f 93       	push	r20
    1800:	5f 93       	push	r21
    1802:	6f 93       	push	r22
    1804:	7f 93       	push	r23
    1806:	8f 93       	push	r24
    1808:	9f 93       	push	r25
    180a:	af 93       	push	r26
    180c:	bf 93       	push	r27
    180e:	ef 93       	push	r30
    1810:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1812:	e0 91 69 20 	lds	r30, 0x2069	; 0x802069 <tc_tce1_err_callback>
    1816:	f0 91 6a 20 	lds	r31, 0x206A	; 0x80206a <tc_tce1_err_callback+0x1>
    181a:	30 97       	sbiw	r30, 0x00	; 0
    181c:	09 f0       	breq	.+2      	; 0x1820 <__vector_54+0x42>
		tc_tce1_err_callback();
    181e:	19 95       	eicall
	}
}
    1820:	ff 91       	pop	r31
    1822:	ef 91       	pop	r30
    1824:	bf 91       	pop	r27
    1826:	af 91       	pop	r26
    1828:	9f 91       	pop	r25
    182a:	8f 91       	pop	r24
    182c:	7f 91       	pop	r23
    182e:	6f 91       	pop	r22
    1830:	5f 91       	pop	r21
    1832:	4f 91       	pop	r20
    1834:	3f 91       	pop	r19
    1836:	2f 91       	pop	r18
    1838:	0f 90       	pop	r0
    183a:	0b be       	out	0x3b, r0	; 59
    183c:	0f 90       	pop	r0
    183e:	09 be       	out	0x39, r0	; 57
    1840:	0f 90       	pop	r0
    1842:	08 be       	out	0x38, r0	; 56
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    184e:	1f 92       	push	r1
    1850:	0f 92       	push	r0
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	0f 92       	push	r0
    1856:	11 24       	eor	r1, r1
    1858:	08 b6       	in	r0, 0x38	; 56
    185a:	0f 92       	push	r0
    185c:	18 be       	out	0x38, r1	; 56
    185e:	09 b6       	in	r0, 0x39	; 57
    1860:	0f 92       	push	r0
    1862:	19 be       	out	0x39, r1	; 57
    1864:	0b b6       	in	r0, 0x3b	; 59
    1866:	0f 92       	push	r0
    1868:	1b be       	out	0x3b, r1	; 59
    186a:	2f 93       	push	r18
    186c:	3f 93       	push	r19
    186e:	4f 93       	push	r20
    1870:	5f 93       	push	r21
    1872:	6f 93       	push	r22
    1874:	7f 93       	push	r23
    1876:	8f 93       	push	r24
    1878:	9f 93       	push	r25
    187a:	af 93       	push	r26
    187c:	bf 93       	push	r27
    187e:	ef 93       	push	r30
    1880:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1882:	e0 91 67 20 	lds	r30, 0x2067	; 0x802067 <tc_tce1_cca_callback>
    1886:	f0 91 68 20 	lds	r31, 0x2068	; 0x802068 <tc_tce1_cca_callback+0x1>
    188a:	30 97       	sbiw	r30, 0x00	; 0
    188c:	09 f0       	breq	.+2      	; 0x1890 <__vector_55+0x42>
		tc_tce1_cca_callback();
    188e:	19 95       	eicall
	}
}
    1890:	ff 91       	pop	r31
    1892:	ef 91       	pop	r30
    1894:	bf 91       	pop	r27
    1896:	af 91       	pop	r26
    1898:	9f 91       	pop	r25
    189a:	8f 91       	pop	r24
    189c:	7f 91       	pop	r23
    189e:	6f 91       	pop	r22
    18a0:	5f 91       	pop	r21
    18a2:	4f 91       	pop	r20
    18a4:	3f 91       	pop	r19
    18a6:	2f 91       	pop	r18
    18a8:	0f 90       	pop	r0
    18aa:	0b be       	out	0x3b, r0	; 59
    18ac:	0f 90       	pop	r0
    18ae:	09 be       	out	0x39, r0	; 57
    18b0:	0f 90       	pop	r0
    18b2:	08 be       	out	0x38, r0	; 56
    18b4:	0f 90       	pop	r0
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	0f 90       	pop	r0
    18ba:	1f 90       	pop	r1
    18bc:	18 95       	reti

000018be <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	08 b6       	in	r0, 0x38	; 56
    18ca:	0f 92       	push	r0
    18cc:	18 be       	out	0x38, r1	; 56
    18ce:	09 b6       	in	r0, 0x39	; 57
    18d0:	0f 92       	push	r0
    18d2:	19 be       	out	0x39, r1	; 57
    18d4:	0b b6       	in	r0, 0x3b	; 59
    18d6:	0f 92       	push	r0
    18d8:	1b be       	out	0x3b, r1	; 59
    18da:	2f 93       	push	r18
    18dc:	3f 93       	push	r19
    18de:	4f 93       	push	r20
    18e0:	5f 93       	push	r21
    18e2:	6f 93       	push	r22
    18e4:	7f 93       	push	r23
    18e6:	8f 93       	push	r24
    18e8:	9f 93       	push	r25
    18ea:	af 93       	push	r26
    18ec:	bf 93       	push	r27
    18ee:	ef 93       	push	r30
    18f0:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    18f2:	e0 91 65 20 	lds	r30, 0x2065	; 0x802065 <tc_tce1_ccb_callback>
    18f6:	f0 91 66 20 	lds	r31, 0x2066	; 0x802066 <tc_tce1_ccb_callback+0x1>
    18fa:	30 97       	sbiw	r30, 0x00	; 0
    18fc:	09 f0       	breq	.+2      	; 0x1900 <__vector_56+0x42>
		tc_tce1_ccb_callback();
    18fe:	19 95       	eicall
	}
}
    1900:	ff 91       	pop	r31
    1902:	ef 91       	pop	r30
    1904:	bf 91       	pop	r27
    1906:	af 91       	pop	r26
    1908:	9f 91       	pop	r25
    190a:	8f 91       	pop	r24
    190c:	7f 91       	pop	r23
    190e:	6f 91       	pop	r22
    1910:	5f 91       	pop	r21
    1912:	4f 91       	pop	r20
    1914:	3f 91       	pop	r19
    1916:	2f 91       	pop	r18
    1918:	0f 90       	pop	r0
    191a:	0b be       	out	0x3b, r0	; 59
    191c:	0f 90       	pop	r0
    191e:	09 be       	out	0x39, r0	; 57
    1920:	0f 90       	pop	r0
    1922:	08 be       	out	0x38, r0	; 56
    1924:	0f 90       	pop	r0
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	0f 90       	pop	r0
    192a:	1f 90       	pop	r1
    192c:	18 95       	reti

0000192e <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    192e:	1f 92       	push	r1
    1930:	0f 92       	push	r0
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	0f 92       	push	r0
    1936:	11 24       	eor	r1, r1
    1938:	08 b6       	in	r0, 0x38	; 56
    193a:	0f 92       	push	r0
    193c:	18 be       	out	0x38, r1	; 56
    193e:	09 b6       	in	r0, 0x39	; 57
    1940:	0f 92       	push	r0
    1942:	19 be       	out	0x39, r1	; 57
    1944:	0b b6       	in	r0, 0x3b	; 59
    1946:	0f 92       	push	r0
    1948:	1b be       	out	0x3b, r1	; 59
    194a:	2f 93       	push	r18
    194c:	3f 93       	push	r19
    194e:	4f 93       	push	r20
    1950:	5f 93       	push	r21
    1952:	6f 93       	push	r22
    1954:	7f 93       	push	r23
    1956:	8f 93       	push	r24
    1958:	9f 93       	push	r25
    195a:	af 93       	push	r26
    195c:	bf 93       	push	r27
    195e:	ef 93       	push	r30
    1960:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1962:	e0 91 63 20 	lds	r30, 0x2063	; 0x802063 <tc_tcf0_ovf_callback>
    1966:	f0 91 64 20 	lds	r31, 0x2064	; 0x802064 <tc_tcf0_ovf_callback+0x1>
    196a:	30 97       	sbiw	r30, 0x00	; 0
    196c:	09 f0       	breq	.+2      	; 0x1970 <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    196e:	19 95       	eicall
	}
}
    1970:	ff 91       	pop	r31
    1972:	ef 91       	pop	r30
    1974:	bf 91       	pop	r27
    1976:	af 91       	pop	r26
    1978:	9f 91       	pop	r25
    197a:	8f 91       	pop	r24
    197c:	7f 91       	pop	r23
    197e:	6f 91       	pop	r22
    1980:	5f 91       	pop	r21
    1982:	4f 91       	pop	r20
    1984:	3f 91       	pop	r19
    1986:	2f 91       	pop	r18
    1988:	0f 90       	pop	r0
    198a:	0b be       	out	0x3b, r0	; 59
    198c:	0f 90       	pop	r0
    198e:	09 be       	out	0x39, r0	; 57
    1990:	0f 90       	pop	r0
    1992:	08 be       	out	0x38, r0	; 56
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	0f 90       	pop	r0
    199a:	1f 90       	pop	r1
    199c:	18 95       	reti

0000199e <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    199e:	1f 92       	push	r1
    19a0:	0f 92       	push	r0
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	0f 92       	push	r0
    19a6:	11 24       	eor	r1, r1
    19a8:	08 b6       	in	r0, 0x38	; 56
    19aa:	0f 92       	push	r0
    19ac:	18 be       	out	0x38, r1	; 56
    19ae:	09 b6       	in	r0, 0x39	; 57
    19b0:	0f 92       	push	r0
    19b2:	19 be       	out	0x39, r1	; 57
    19b4:	0b b6       	in	r0, 0x3b	; 59
    19b6:	0f 92       	push	r0
    19b8:	1b be       	out	0x3b, r1	; 59
    19ba:	2f 93       	push	r18
    19bc:	3f 93       	push	r19
    19be:	4f 93       	push	r20
    19c0:	5f 93       	push	r21
    19c2:	6f 93       	push	r22
    19c4:	7f 93       	push	r23
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	af 93       	push	r26
    19cc:	bf 93       	push	r27
    19ce:	ef 93       	push	r30
    19d0:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    19d2:	e0 91 61 20 	lds	r30, 0x2061	; 0x802061 <tc_tcf0_err_callback>
    19d6:	f0 91 62 20 	lds	r31, 0x2062	; 0x802062 <tc_tcf0_err_callback+0x1>
    19da:	30 97       	sbiw	r30, 0x00	; 0
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <__vector_109+0x42>
		tc_tcf0_err_callback();
    19de:	19 95       	eicall
	}
}
    19e0:	ff 91       	pop	r31
    19e2:	ef 91       	pop	r30
    19e4:	bf 91       	pop	r27
    19e6:	af 91       	pop	r26
    19e8:	9f 91       	pop	r25
    19ea:	8f 91       	pop	r24
    19ec:	7f 91       	pop	r23
    19ee:	6f 91       	pop	r22
    19f0:	5f 91       	pop	r21
    19f2:	4f 91       	pop	r20
    19f4:	3f 91       	pop	r19
    19f6:	2f 91       	pop	r18
    19f8:	0f 90       	pop	r0
    19fa:	0b be       	out	0x3b, r0	; 59
    19fc:	0f 90       	pop	r0
    19fe:	09 be       	out	0x39, r0	; 57
    1a00:	0f 90       	pop	r0
    1a02:	08 be       	out	0x38, r0	; 56
    1a04:	0f 90       	pop	r0
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	0f 90       	pop	r0
    1a0a:	1f 90       	pop	r1
    1a0c:	18 95       	reti

00001a0e <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1a0e:	1f 92       	push	r1
    1a10:	0f 92       	push	r0
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	0f 92       	push	r0
    1a16:	11 24       	eor	r1, r1
    1a18:	08 b6       	in	r0, 0x38	; 56
    1a1a:	0f 92       	push	r0
    1a1c:	18 be       	out	0x38, r1	; 56
    1a1e:	09 b6       	in	r0, 0x39	; 57
    1a20:	0f 92       	push	r0
    1a22:	19 be       	out	0x39, r1	; 57
    1a24:	0b b6       	in	r0, 0x3b	; 59
    1a26:	0f 92       	push	r0
    1a28:	1b be       	out	0x3b, r1	; 59
    1a2a:	2f 93       	push	r18
    1a2c:	3f 93       	push	r19
    1a2e:	4f 93       	push	r20
    1a30:	5f 93       	push	r21
    1a32:	6f 93       	push	r22
    1a34:	7f 93       	push	r23
    1a36:	8f 93       	push	r24
    1a38:	9f 93       	push	r25
    1a3a:	af 93       	push	r26
    1a3c:	bf 93       	push	r27
    1a3e:	ef 93       	push	r30
    1a40:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1a42:	e0 91 5f 20 	lds	r30, 0x205F	; 0x80205f <tc_tcf0_cca_callback>
    1a46:	f0 91 60 20 	lds	r31, 0x2060	; 0x802060 <tc_tcf0_cca_callback+0x1>
    1a4a:	30 97       	sbiw	r30, 0x00	; 0
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <__vector_110+0x42>
		tc_tcf0_cca_callback();
    1a4e:	19 95       	eicall
	}
}
    1a50:	ff 91       	pop	r31
    1a52:	ef 91       	pop	r30
    1a54:	bf 91       	pop	r27
    1a56:	af 91       	pop	r26
    1a58:	9f 91       	pop	r25
    1a5a:	8f 91       	pop	r24
    1a5c:	7f 91       	pop	r23
    1a5e:	6f 91       	pop	r22
    1a60:	5f 91       	pop	r21
    1a62:	4f 91       	pop	r20
    1a64:	3f 91       	pop	r19
    1a66:	2f 91       	pop	r18
    1a68:	0f 90       	pop	r0
    1a6a:	0b be       	out	0x3b, r0	; 59
    1a6c:	0f 90       	pop	r0
    1a6e:	09 be       	out	0x39, r0	; 57
    1a70:	0f 90       	pop	r0
    1a72:	08 be       	out	0x38, r0	; 56
    1a74:	0f 90       	pop	r0
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	0f 90       	pop	r0
    1a7a:	1f 90       	pop	r1
    1a7c:	18 95       	reti

00001a7e <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1a7e:	1f 92       	push	r1
    1a80:	0f 92       	push	r0
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	0f 92       	push	r0
    1a86:	11 24       	eor	r1, r1
    1a88:	08 b6       	in	r0, 0x38	; 56
    1a8a:	0f 92       	push	r0
    1a8c:	18 be       	out	0x38, r1	; 56
    1a8e:	09 b6       	in	r0, 0x39	; 57
    1a90:	0f 92       	push	r0
    1a92:	19 be       	out	0x39, r1	; 57
    1a94:	0b b6       	in	r0, 0x3b	; 59
    1a96:	0f 92       	push	r0
    1a98:	1b be       	out	0x3b, r1	; 59
    1a9a:	2f 93       	push	r18
    1a9c:	3f 93       	push	r19
    1a9e:	4f 93       	push	r20
    1aa0:	5f 93       	push	r21
    1aa2:	6f 93       	push	r22
    1aa4:	7f 93       	push	r23
    1aa6:	8f 93       	push	r24
    1aa8:	9f 93       	push	r25
    1aaa:	af 93       	push	r26
    1aac:	bf 93       	push	r27
    1aae:	ef 93       	push	r30
    1ab0:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1ab2:	e0 91 5d 20 	lds	r30, 0x205D	; 0x80205d <tc_tcf0_ccb_callback>
    1ab6:	f0 91 5e 20 	lds	r31, 0x205E	; 0x80205e <tc_tcf0_ccb_callback+0x1>
    1aba:	30 97       	sbiw	r30, 0x00	; 0
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    1abe:	19 95       	eicall
	}
}
    1ac0:	ff 91       	pop	r31
    1ac2:	ef 91       	pop	r30
    1ac4:	bf 91       	pop	r27
    1ac6:	af 91       	pop	r26
    1ac8:	9f 91       	pop	r25
    1aca:	8f 91       	pop	r24
    1acc:	7f 91       	pop	r23
    1ace:	6f 91       	pop	r22
    1ad0:	5f 91       	pop	r21
    1ad2:	4f 91       	pop	r20
    1ad4:	3f 91       	pop	r19
    1ad6:	2f 91       	pop	r18
    1ad8:	0f 90       	pop	r0
    1ada:	0b be       	out	0x3b, r0	; 59
    1adc:	0f 90       	pop	r0
    1ade:	09 be       	out	0x39, r0	; 57
    1ae0:	0f 90       	pop	r0
    1ae2:	08 be       	out	0x38, r0	; 56
    1ae4:	0f 90       	pop	r0
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	0f 90       	pop	r0
    1aea:	1f 90       	pop	r1
    1aec:	18 95       	reti

00001aee <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1aee:	1f 92       	push	r1
    1af0:	0f 92       	push	r0
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	0f 92       	push	r0
    1af6:	11 24       	eor	r1, r1
    1af8:	08 b6       	in	r0, 0x38	; 56
    1afa:	0f 92       	push	r0
    1afc:	18 be       	out	0x38, r1	; 56
    1afe:	09 b6       	in	r0, 0x39	; 57
    1b00:	0f 92       	push	r0
    1b02:	19 be       	out	0x39, r1	; 57
    1b04:	0b b6       	in	r0, 0x3b	; 59
    1b06:	0f 92       	push	r0
    1b08:	1b be       	out	0x3b, r1	; 59
    1b0a:	2f 93       	push	r18
    1b0c:	3f 93       	push	r19
    1b0e:	4f 93       	push	r20
    1b10:	5f 93       	push	r21
    1b12:	6f 93       	push	r22
    1b14:	7f 93       	push	r23
    1b16:	8f 93       	push	r24
    1b18:	9f 93       	push	r25
    1b1a:	af 93       	push	r26
    1b1c:	bf 93       	push	r27
    1b1e:	ef 93       	push	r30
    1b20:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1b22:	e0 91 5b 20 	lds	r30, 0x205B	; 0x80205b <tc_tcf0_ccc_callback>
    1b26:	f0 91 5c 20 	lds	r31, 0x205C	; 0x80205c <tc_tcf0_ccc_callback+0x1>
    1b2a:	30 97       	sbiw	r30, 0x00	; 0
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    1b2e:	19 95       	eicall
	}
}
    1b30:	ff 91       	pop	r31
    1b32:	ef 91       	pop	r30
    1b34:	bf 91       	pop	r27
    1b36:	af 91       	pop	r26
    1b38:	9f 91       	pop	r25
    1b3a:	8f 91       	pop	r24
    1b3c:	7f 91       	pop	r23
    1b3e:	6f 91       	pop	r22
    1b40:	5f 91       	pop	r21
    1b42:	4f 91       	pop	r20
    1b44:	3f 91       	pop	r19
    1b46:	2f 91       	pop	r18
    1b48:	0f 90       	pop	r0
    1b4a:	0b be       	out	0x3b, r0	; 59
    1b4c:	0f 90       	pop	r0
    1b4e:	09 be       	out	0x39, r0	; 57
    1b50:	0f 90       	pop	r0
    1b52:	08 be       	out	0x38, r0	; 56
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	0f 90       	pop	r0
    1b5a:	1f 90       	pop	r1
    1b5c:	18 95       	reti

00001b5e <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1b5e:	1f 92       	push	r1
    1b60:	0f 92       	push	r0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	0f 92       	push	r0
    1b66:	11 24       	eor	r1, r1
    1b68:	08 b6       	in	r0, 0x38	; 56
    1b6a:	0f 92       	push	r0
    1b6c:	18 be       	out	0x38, r1	; 56
    1b6e:	09 b6       	in	r0, 0x39	; 57
    1b70:	0f 92       	push	r0
    1b72:	19 be       	out	0x39, r1	; 57
    1b74:	0b b6       	in	r0, 0x3b	; 59
    1b76:	0f 92       	push	r0
    1b78:	1b be       	out	0x3b, r1	; 59
    1b7a:	2f 93       	push	r18
    1b7c:	3f 93       	push	r19
    1b7e:	4f 93       	push	r20
    1b80:	5f 93       	push	r21
    1b82:	6f 93       	push	r22
    1b84:	7f 93       	push	r23
    1b86:	8f 93       	push	r24
    1b88:	9f 93       	push	r25
    1b8a:	af 93       	push	r26
    1b8c:	bf 93       	push	r27
    1b8e:	ef 93       	push	r30
    1b90:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1b92:	e0 91 59 20 	lds	r30, 0x2059	; 0x802059 <tc_tcf0_ccd_callback>
    1b96:	f0 91 5a 20 	lds	r31, 0x205A	; 0x80205a <tc_tcf0_ccd_callback+0x1>
    1b9a:	30 97       	sbiw	r30, 0x00	; 0
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    1b9e:	19 95       	eicall
	}
}
    1ba0:	ff 91       	pop	r31
    1ba2:	ef 91       	pop	r30
    1ba4:	bf 91       	pop	r27
    1ba6:	af 91       	pop	r26
    1ba8:	9f 91       	pop	r25
    1baa:	8f 91       	pop	r24
    1bac:	7f 91       	pop	r23
    1bae:	6f 91       	pop	r22
    1bb0:	5f 91       	pop	r21
    1bb2:	4f 91       	pop	r20
    1bb4:	3f 91       	pop	r19
    1bb6:	2f 91       	pop	r18
    1bb8:	0f 90       	pop	r0
    1bba:	0b be       	out	0x3b, r0	; 59
    1bbc:	0f 90       	pop	r0
    1bbe:	09 be       	out	0x39, r0	; 57
    1bc0:	0f 90       	pop	r0
    1bc2:	08 be       	out	0x38, r0	; 56
    1bc4:	0f 90       	pop	r0
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	0f 90       	pop	r0
    1bca:	1f 90       	pop	r1
    1bcc:	18 95       	reti

00001bce <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    1bce:	1f 92       	push	r1
    1bd0:	0f 92       	push	r0
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	0f 92       	push	r0
    1bd6:	11 24       	eor	r1, r1
    1bd8:	08 b6       	in	r0, 0x38	; 56
    1bda:	0f 92       	push	r0
    1bdc:	18 be       	out	0x38, r1	; 56
    1bde:	09 b6       	in	r0, 0x39	; 57
    1be0:	0f 92       	push	r0
    1be2:	19 be       	out	0x39, r1	; 57
    1be4:	0b b6       	in	r0, 0x3b	; 59
    1be6:	0f 92       	push	r0
    1be8:	1b be       	out	0x3b, r1	; 59
    1bea:	2f 93       	push	r18
    1bec:	3f 93       	push	r19
    1bee:	4f 93       	push	r20
    1bf0:	5f 93       	push	r21
    1bf2:	6f 93       	push	r22
    1bf4:	7f 93       	push	r23
    1bf6:	8f 93       	push	r24
    1bf8:	9f 93       	push	r25
    1bfa:	af 93       	push	r26
    1bfc:	bf 93       	push	r27
    1bfe:	ef 93       	push	r30
    1c00:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    1c02:	e0 91 57 20 	lds	r30, 0x2057	; 0x802057 <tc_tcf1_ovf_callback>
    1c06:	f0 91 58 20 	lds	r31, 0x2058	; 0x802058 <tc_tcf1_ovf_callback+0x1>
    1c0a:	30 97       	sbiw	r30, 0x00	; 0
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    1c0e:	19 95       	eicall
	}
}
    1c10:	ff 91       	pop	r31
    1c12:	ef 91       	pop	r30
    1c14:	bf 91       	pop	r27
    1c16:	af 91       	pop	r26
    1c18:	9f 91       	pop	r25
    1c1a:	8f 91       	pop	r24
    1c1c:	7f 91       	pop	r23
    1c1e:	6f 91       	pop	r22
    1c20:	5f 91       	pop	r21
    1c22:	4f 91       	pop	r20
    1c24:	3f 91       	pop	r19
    1c26:	2f 91       	pop	r18
    1c28:	0f 90       	pop	r0
    1c2a:	0b be       	out	0x3b, r0	; 59
    1c2c:	0f 90       	pop	r0
    1c2e:	09 be       	out	0x39, r0	; 57
    1c30:	0f 90       	pop	r0
    1c32:	08 be       	out	0x38, r0	; 56
    1c34:	0f 90       	pop	r0
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	0f 90       	pop	r0
    1c3a:	1f 90       	pop	r1
    1c3c:	18 95       	reti

00001c3e <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    1c3e:	1f 92       	push	r1
    1c40:	0f 92       	push	r0
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	0f 92       	push	r0
    1c46:	11 24       	eor	r1, r1
    1c48:	08 b6       	in	r0, 0x38	; 56
    1c4a:	0f 92       	push	r0
    1c4c:	18 be       	out	0x38, r1	; 56
    1c4e:	09 b6       	in	r0, 0x39	; 57
    1c50:	0f 92       	push	r0
    1c52:	19 be       	out	0x39, r1	; 57
    1c54:	0b b6       	in	r0, 0x3b	; 59
    1c56:	0f 92       	push	r0
    1c58:	1b be       	out	0x3b, r1	; 59
    1c5a:	2f 93       	push	r18
    1c5c:	3f 93       	push	r19
    1c5e:	4f 93       	push	r20
    1c60:	5f 93       	push	r21
    1c62:	6f 93       	push	r22
    1c64:	7f 93       	push	r23
    1c66:	8f 93       	push	r24
    1c68:	9f 93       	push	r25
    1c6a:	af 93       	push	r26
    1c6c:	bf 93       	push	r27
    1c6e:	ef 93       	push	r30
    1c70:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    1c72:	e0 91 55 20 	lds	r30, 0x2055	; 0x802055 <tc_tcf1_err_callback>
    1c76:	f0 91 56 20 	lds	r31, 0x2056	; 0x802056 <tc_tcf1_err_callback+0x1>
    1c7a:	30 97       	sbiw	r30, 0x00	; 0
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <__vector_115+0x42>
		tc_tcf1_err_callback();
    1c7e:	19 95       	eicall
	}
}
    1c80:	ff 91       	pop	r31
    1c82:	ef 91       	pop	r30
    1c84:	bf 91       	pop	r27
    1c86:	af 91       	pop	r26
    1c88:	9f 91       	pop	r25
    1c8a:	8f 91       	pop	r24
    1c8c:	7f 91       	pop	r23
    1c8e:	6f 91       	pop	r22
    1c90:	5f 91       	pop	r21
    1c92:	4f 91       	pop	r20
    1c94:	3f 91       	pop	r19
    1c96:	2f 91       	pop	r18
    1c98:	0f 90       	pop	r0
    1c9a:	0b be       	out	0x3b, r0	; 59
    1c9c:	0f 90       	pop	r0
    1c9e:	09 be       	out	0x39, r0	; 57
    1ca0:	0f 90       	pop	r0
    1ca2:	08 be       	out	0x38, r0	; 56
    1ca4:	0f 90       	pop	r0
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	0f 90       	pop	r0
    1caa:	1f 90       	pop	r1
    1cac:	18 95       	reti

00001cae <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1cae:	1f 92       	push	r1
    1cb0:	0f 92       	push	r0
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	0f 92       	push	r0
    1cb6:	11 24       	eor	r1, r1
    1cb8:	08 b6       	in	r0, 0x38	; 56
    1cba:	0f 92       	push	r0
    1cbc:	18 be       	out	0x38, r1	; 56
    1cbe:	09 b6       	in	r0, 0x39	; 57
    1cc0:	0f 92       	push	r0
    1cc2:	19 be       	out	0x39, r1	; 57
    1cc4:	0b b6       	in	r0, 0x3b	; 59
    1cc6:	0f 92       	push	r0
    1cc8:	1b be       	out	0x3b, r1	; 59
    1cca:	2f 93       	push	r18
    1ccc:	3f 93       	push	r19
    1cce:	4f 93       	push	r20
    1cd0:	5f 93       	push	r21
    1cd2:	6f 93       	push	r22
    1cd4:	7f 93       	push	r23
    1cd6:	8f 93       	push	r24
    1cd8:	9f 93       	push	r25
    1cda:	af 93       	push	r26
    1cdc:	bf 93       	push	r27
    1cde:	ef 93       	push	r30
    1ce0:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1ce2:	e0 91 53 20 	lds	r30, 0x2053	; 0x802053 <tc_tcf1_cca_callback>
    1ce6:	f0 91 54 20 	lds	r31, 0x2054	; 0x802054 <tc_tcf1_cca_callback+0x1>
    1cea:	30 97       	sbiw	r30, 0x00	; 0
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1cee:	19 95       	eicall
	}
}
    1cf0:	ff 91       	pop	r31
    1cf2:	ef 91       	pop	r30
    1cf4:	bf 91       	pop	r27
    1cf6:	af 91       	pop	r26
    1cf8:	9f 91       	pop	r25
    1cfa:	8f 91       	pop	r24
    1cfc:	7f 91       	pop	r23
    1cfe:	6f 91       	pop	r22
    1d00:	5f 91       	pop	r21
    1d02:	4f 91       	pop	r20
    1d04:	3f 91       	pop	r19
    1d06:	2f 91       	pop	r18
    1d08:	0f 90       	pop	r0
    1d0a:	0b be       	out	0x3b, r0	; 59
    1d0c:	0f 90       	pop	r0
    1d0e:	09 be       	out	0x39, r0	; 57
    1d10:	0f 90       	pop	r0
    1d12:	08 be       	out	0x38, r0	; 56
    1d14:	0f 90       	pop	r0
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	0f 90       	pop	r0
    1d1a:	1f 90       	pop	r1
    1d1c:	18 95       	reti

00001d1e <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1d1e:	1f 92       	push	r1
    1d20:	0f 92       	push	r0
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	0f 92       	push	r0
    1d26:	11 24       	eor	r1, r1
    1d28:	08 b6       	in	r0, 0x38	; 56
    1d2a:	0f 92       	push	r0
    1d2c:	18 be       	out	0x38, r1	; 56
    1d2e:	09 b6       	in	r0, 0x39	; 57
    1d30:	0f 92       	push	r0
    1d32:	19 be       	out	0x39, r1	; 57
    1d34:	0b b6       	in	r0, 0x3b	; 59
    1d36:	0f 92       	push	r0
    1d38:	1b be       	out	0x3b, r1	; 59
    1d3a:	2f 93       	push	r18
    1d3c:	3f 93       	push	r19
    1d3e:	4f 93       	push	r20
    1d40:	5f 93       	push	r21
    1d42:	6f 93       	push	r22
    1d44:	7f 93       	push	r23
    1d46:	8f 93       	push	r24
    1d48:	9f 93       	push	r25
    1d4a:	af 93       	push	r26
    1d4c:	bf 93       	push	r27
    1d4e:	ef 93       	push	r30
    1d50:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    1d52:	e0 91 51 20 	lds	r30, 0x2051	; 0x802051 <tc_tcf1_ccb_callback>
    1d56:	f0 91 52 20 	lds	r31, 0x2052	; 0x802052 <tc_tcf1_ccb_callback+0x1>
    1d5a:	30 97       	sbiw	r30, 0x00	; 0
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    1d5e:	19 95       	eicall
	}
}
    1d60:	ff 91       	pop	r31
    1d62:	ef 91       	pop	r30
    1d64:	bf 91       	pop	r27
    1d66:	af 91       	pop	r26
    1d68:	9f 91       	pop	r25
    1d6a:	8f 91       	pop	r24
    1d6c:	7f 91       	pop	r23
    1d6e:	6f 91       	pop	r22
    1d70:	5f 91       	pop	r21
    1d72:	4f 91       	pop	r20
    1d74:	3f 91       	pop	r19
    1d76:	2f 91       	pop	r18
    1d78:	0f 90       	pop	r0
    1d7a:	0b be       	out	0x3b, r0	; 59
    1d7c:	0f 90       	pop	r0
    1d7e:	09 be       	out	0x39, r0	; 57
    1d80:	0f 90       	pop	r0
    1d82:	08 be       	out	0x38, r0	; 56
    1d84:	0f 90       	pop	r0
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	0f 90       	pop	r0
    1d8a:	1f 90       	pop	r1
    1d8c:	18 95       	reti

00001d8e <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1d8e:	fc 01       	movw	r30, r24
    1d90:	91 81       	ldd	r25, Z+1	; 0x01
    1d92:	95 ff       	sbrs	r25, 5
    1d94:	fd cf       	rjmp	.-6      	; 0x1d90 <usart_putchar+0x2>
    1d96:	60 83       	st	Z, r22
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	08 95       	ret

00001d9e <usart_getchar>:
    1d9e:	fc 01       	movw	r30, r24
    1da0:	91 81       	ldd	r25, Z+1	; 0x01
    1da2:	99 23       	and	r25, r25
    1da4:	ec f7       	brge	.-6      	; 0x1da0 <usart_getchar+0x2>
    1da6:	80 81       	ld	r24, Z
    1da8:	08 95       	ret

00001daa <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1daa:	4f 92       	push	r4
    1dac:	5f 92       	push	r5
    1dae:	6f 92       	push	r6
    1db0:	7f 92       	push	r7
    1db2:	8f 92       	push	r8
    1db4:	9f 92       	push	r9
    1db6:	af 92       	push	r10
    1db8:	bf 92       	push	r11
    1dba:	ef 92       	push	r14
    1dbc:	ff 92       	push	r15
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	7c 01       	movw	r14, r24
    1dc6:	4a 01       	movw	r8, r20
    1dc8:	5b 01       	movw	r10, r22
    1dca:	28 01       	movw	r4, r16
    1dcc:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1dce:	fc 01       	movw	r30, r24
    1dd0:	84 81       	ldd	r24, Z+4	; 0x04
    1dd2:	82 ff       	sbrs	r24, 2
    1dd4:	16 c0       	rjmp	.+44     	; 0x1e02 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1dd6:	d9 01       	movw	r26, r18
    1dd8:	c8 01       	movw	r24, r16
    1dda:	68 94       	set
    1ddc:	12 f8       	bld	r1, 2
    1dde:	b6 95       	lsr	r27
    1de0:	a7 95       	ror	r26
    1de2:	97 95       	ror	r25
    1de4:	87 95       	ror	r24
    1de6:	16 94       	lsr	r1
    1de8:	d1 f7       	brne	.-12     	; 0x1dde <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1dea:	b9 01       	movw	r22, r18
    1dec:	a8 01       	movw	r20, r16
    1dee:	03 2e       	mov	r0, r19
    1df0:	36 e1       	ldi	r19, 0x16	; 22
    1df2:	76 95       	lsr	r23
    1df4:	67 95       	ror	r22
    1df6:	57 95       	ror	r21
    1df8:	47 95       	ror	r20
    1dfa:	3a 95       	dec	r19
    1dfc:	d1 f7       	brne	.-12     	; 0x1df2 <usart_set_baudrate+0x48>
    1dfe:	30 2d       	mov	r19, r0
    1e00:	15 c0       	rjmp	.+42     	; 0x1e2c <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1e02:	d9 01       	movw	r26, r18
    1e04:	c8 01       	movw	r24, r16
    1e06:	68 94       	set
    1e08:	13 f8       	bld	r1, 3
    1e0a:	b6 95       	lsr	r27
    1e0c:	a7 95       	ror	r26
    1e0e:	97 95       	ror	r25
    1e10:	87 95       	ror	r24
    1e12:	16 94       	lsr	r1
    1e14:	d1 f7       	brne	.-12     	; 0x1e0a <usart_set_baudrate+0x60>
		min_rate /= 2;
    1e16:	b9 01       	movw	r22, r18
    1e18:	a8 01       	movw	r20, r16
    1e1a:	03 2e       	mov	r0, r19
    1e1c:	37 e1       	ldi	r19, 0x17	; 23
    1e1e:	76 95       	lsr	r23
    1e20:	67 95       	ror	r22
    1e22:	57 95       	ror	r21
    1e24:	47 95       	ror	r20
    1e26:	3a 95       	dec	r19
    1e28:	d1 f7       	brne	.-12     	; 0x1e1e <usart_set_baudrate+0x74>
    1e2a:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1e2c:	88 15       	cp	r24, r8
    1e2e:	99 05       	cpc	r25, r9
    1e30:	aa 05       	cpc	r26, r10
    1e32:	bb 05       	cpc	r27, r11
    1e34:	08 f4       	brcc	.+2      	; 0x1e38 <usart_set_baudrate+0x8e>
    1e36:	a6 c0       	rjmp	.+332    	; 0x1f84 <usart_set_baudrate+0x1da>
    1e38:	84 16       	cp	r8, r20
    1e3a:	95 06       	cpc	r9, r21
    1e3c:	a6 06       	cpc	r10, r22
    1e3e:	b7 06       	cpc	r11, r23
    1e40:	08 f4       	brcc	.+2      	; 0x1e44 <usart_set_baudrate+0x9a>
    1e42:	a2 c0       	rjmp	.+324    	; 0x1f88 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1e44:	f7 01       	movw	r30, r14
    1e46:	84 81       	ldd	r24, Z+4	; 0x04
    1e48:	82 fd       	sbrc	r24, 2
    1e4a:	04 c0       	rjmp	.+8      	; 0x1e54 <usart_set_baudrate+0xaa>
		baud *= 2;
    1e4c:	88 0c       	add	r8, r8
    1e4e:	99 1c       	adc	r9, r9
    1e50:	aa 1c       	adc	r10, r10
    1e52:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1e54:	c3 01       	movw	r24, r6
    1e56:	b2 01       	movw	r22, r4
    1e58:	a5 01       	movw	r20, r10
    1e5a:	94 01       	movw	r18, r8
    1e5c:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1e60:	2f 3f       	cpi	r18, 0xFF	; 255
    1e62:	31 05       	cpc	r19, r1
    1e64:	41 05       	cpc	r20, r1
    1e66:	51 05       	cpc	r21, r1
    1e68:	08 f4       	brcc	.+2      	; 0x1e6c <usart_set_baudrate+0xc2>
    1e6a:	90 c0       	rjmp	.+288    	; 0x1f8c <usart_set_baudrate+0x1e2>
    1e6c:	8f ef       	ldi	r24, 0xFF	; 255
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	a0 e0       	ldi	r26, 0x00	; 0
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	c9 ef       	ldi	r28, 0xF9	; 249
    1e76:	05 c0       	rjmp	.+10     	; 0x1e82 <usart_set_baudrate+0xd8>
    1e78:	28 17       	cp	r18, r24
    1e7a:	39 07       	cpc	r19, r25
    1e7c:	4a 07       	cpc	r20, r26
    1e7e:	5b 07       	cpc	r21, r27
    1e80:	58 f0       	brcs	.+22     	; 0x1e98 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	aa 1f       	adc	r26, r26
    1e88:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1e8a:	cd 3f       	cpi	r28, 0xFD	; 253
    1e8c:	0c f4       	brge	.+2      	; 0x1e90 <usart_set_baudrate+0xe6>
			limit |= 1;
    1e8e:	81 60       	ori	r24, 0x01	; 1
    1e90:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1e92:	c7 30       	cpi	r28, 0x07	; 7
    1e94:	89 f7       	brne	.-30     	; 0x1e78 <usart_set_baudrate+0xce>
    1e96:	4f c0       	rjmp	.+158    	; 0x1f36 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1e98:	cc 23       	and	r28, r28
    1e9a:	0c f0       	brlt	.+2      	; 0x1e9e <usart_set_baudrate+0xf4>
    1e9c:	4c c0       	rjmp	.+152    	; 0x1f36 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1e9e:	d5 01       	movw	r26, r10
    1ea0:	c4 01       	movw	r24, r8
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	aa 1f       	adc	r26, r26
    1ea8:	bb 1f       	adc	r27, r27
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	aa 1f       	adc	r26, r26
    1eb0:	bb 1f       	adc	r27, r27
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	aa 1f       	adc	r26, r26
    1eb8:	bb 1f       	adc	r27, r27
    1eba:	48 1a       	sub	r4, r24
    1ebc:	59 0a       	sbc	r5, r25
    1ebe:	6a 0a       	sbc	r6, r26
    1ec0:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1ec2:	ce 3f       	cpi	r28, 0xFE	; 254
    1ec4:	f4 f4       	brge	.+60     	; 0x1f02 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1ec6:	8d ef       	ldi	r24, 0xFD	; 253
    1ec8:	9f ef       	ldi	r25, 0xFF	; 255
    1eca:	8c 1b       	sub	r24, r28
    1ecc:	91 09       	sbc	r25, r1
    1ece:	c7 fd       	sbrc	r28, 7
    1ed0:	93 95       	inc	r25
    1ed2:	04 c0       	rjmp	.+8      	; 0x1edc <usart_set_baudrate+0x132>
    1ed4:	44 0c       	add	r4, r4
    1ed6:	55 1c       	adc	r5, r5
    1ed8:	66 1c       	adc	r6, r6
    1eda:	77 1c       	adc	r7, r7
    1edc:	8a 95       	dec	r24
    1ede:	d2 f7       	brpl	.-12     	; 0x1ed4 <usart_set_baudrate+0x12a>
    1ee0:	d5 01       	movw	r26, r10
    1ee2:	c4 01       	movw	r24, r8
    1ee4:	b6 95       	lsr	r27
    1ee6:	a7 95       	ror	r26
    1ee8:	97 95       	ror	r25
    1eea:	87 95       	ror	r24
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	64 0d       	add	r22, r4
    1ef2:	75 1d       	adc	r23, r5
    1ef4:	86 1d       	adc	r24, r6
    1ef6:	97 1d       	adc	r25, r7
    1ef8:	a5 01       	movw	r20, r10
    1efa:	94 01       	movw	r18, r8
    1efc:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__udivmodsi4>
    1f00:	37 c0       	rjmp	.+110    	; 0x1f70 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    1f02:	83 e0       	ldi	r24, 0x03	; 3
    1f04:	8c 0f       	add	r24, r28
    1f06:	a5 01       	movw	r20, r10
    1f08:	94 01       	movw	r18, r8
    1f0a:	04 c0       	rjmp	.+8      	; 0x1f14 <usart_set_baudrate+0x16a>
    1f0c:	22 0f       	add	r18, r18
    1f0e:	33 1f       	adc	r19, r19
    1f10:	44 1f       	adc	r20, r20
    1f12:	55 1f       	adc	r21, r21
    1f14:	8a 95       	dec	r24
    1f16:	d2 f7       	brpl	.-12     	; 0x1f0c <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    1f18:	da 01       	movw	r26, r20
    1f1a:	c9 01       	movw	r24, r18
    1f1c:	b6 95       	lsr	r27
    1f1e:	a7 95       	ror	r26
    1f20:	97 95       	ror	r25
    1f22:	87 95       	ror	r24
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	64 0d       	add	r22, r4
    1f2a:	75 1d       	adc	r23, r5
    1f2c:	86 1d       	adc	r24, r6
    1f2e:	97 1d       	adc	r25, r7
    1f30:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__udivmodsi4>
    1f34:	1d c0       	rjmp	.+58     	; 0x1f70 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1f36:	83 e0       	ldi	r24, 0x03	; 3
    1f38:	8c 0f       	add	r24, r28
    1f3a:	a5 01       	movw	r20, r10
    1f3c:	94 01       	movw	r18, r8
    1f3e:	04 c0       	rjmp	.+8      	; 0x1f48 <usart_set_baudrate+0x19e>
    1f40:	22 0f       	add	r18, r18
    1f42:	33 1f       	adc	r19, r19
    1f44:	44 1f       	adc	r20, r20
    1f46:	55 1f       	adc	r21, r21
    1f48:	8a 95       	dec	r24
    1f4a:	d2 f7       	brpl	.-12     	; 0x1f40 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    1f4c:	da 01       	movw	r26, r20
    1f4e:	c9 01       	movw	r24, r18
    1f50:	b6 95       	lsr	r27
    1f52:	a7 95       	ror	r26
    1f54:	97 95       	ror	r25
    1f56:	87 95       	ror	r24
    1f58:	bc 01       	movw	r22, r24
    1f5a:	cd 01       	movw	r24, r26
    1f5c:	64 0d       	add	r22, r4
    1f5e:	75 1d       	adc	r23, r5
    1f60:	86 1d       	adc	r24, r6
    1f62:	97 1d       	adc	r25, r7
    1f64:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__udivmodsi4>
    1f68:	21 50       	subi	r18, 0x01	; 1
    1f6a:	31 09       	sbc	r19, r1
    1f6c:	41 09       	sbc	r20, r1
    1f6e:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1f70:	83 2f       	mov	r24, r19
    1f72:	8f 70       	andi	r24, 0x0F	; 15
    1f74:	c2 95       	swap	r28
    1f76:	c0 7f       	andi	r28, 0xF0	; 240
    1f78:	c8 2b       	or	r28, r24
    1f7a:	f7 01       	movw	r30, r14
    1f7c:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1f7e:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	18 c0       	rjmp	.+48     	; 0x1fb4 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	16 c0       	rjmp	.+44     	; 0x1fb4 <usart_set_baudrate+0x20a>
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	14 c0       	rjmp	.+40     	; 0x1fb4 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1f8c:	d5 01       	movw	r26, r10
    1f8e:	c4 01       	movw	r24, r8
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	aa 1f       	adc	r26, r26
    1f96:	bb 1f       	adc	r27, r27
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	aa 1f       	adc	r26, r26
    1f9e:	bb 1f       	adc	r27, r27
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	aa 1f       	adc	r26, r26
    1fa6:	bb 1f       	adc	r27, r27
    1fa8:	48 1a       	sub	r4, r24
    1faa:	59 0a       	sbc	r5, r25
    1fac:	6a 0a       	sbc	r6, r26
    1fae:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1fb0:	c9 ef       	ldi	r28, 0xF9	; 249
    1fb2:	89 cf       	rjmp	.-238    	; 0x1ec6 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1fb4:	cf 91       	pop	r28
    1fb6:	1f 91       	pop	r17
    1fb8:	0f 91       	pop	r16
    1fba:	ff 90       	pop	r15
    1fbc:	ef 90       	pop	r14
    1fbe:	bf 90       	pop	r11
    1fc0:	af 90       	pop	r10
    1fc2:	9f 90       	pop	r9
    1fc4:	8f 90       	pop	r8
    1fc6:	7f 90       	pop	r7
    1fc8:	6f 90       	pop	r6
    1fca:	5f 90       	pop	r5
    1fcc:	4f 90       	pop	r4
    1fce:	08 95       	ret

00001fd0 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1fd0:	0f 93       	push	r16
    1fd2:	1f 93       	push	r17
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
    1fd8:	ec 01       	movw	r28, r24
    1fda:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <usart_init_rs232+0x12>
    1fe0:	5d c1       	rjmp	.+698    	; 0x229c <usart_init_rs232+0x2cc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1fe2:	80 3c       	cpi	r24, 0xC0	; 192
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	29 f4       	brne	.+10     	; 0x1ff2 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1fe8:	60 e1       	ldi	r22, 0x10	; 16
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    1ff0:	55 c1       	rjmp	.+682    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1ff2:	c0 34       	cpi	r28, 0x40	; 64
    1ff4:	84 e0       	ldi	r24, 0x04	; 4
    1ff6:	d8 07       	cpc	r29, r24
    1ff8:	29 f4       	brne	.+10     	; 0x2004 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1ffa:	68 e0       	ldi	r22, 0x08	; 8
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2002:	4c c1       	rjmp	.+664    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    2004:	c1 15       	cp	r28, r1
    2006:	e4 e0       	ldi	r30, 0x04	; 4
    2008:	de 07       	cpc	r29, r30
    200a:	29 f4       	brne	.+10     	; 0x2016 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    200c:	64 e0       	ldi	r22, 0x04	; 4
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2014:	43 c1       	rjmp	.+646    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2016:	c0 38       	cpi	r28, 0x80	; 128
    2018:	f1 e0       	ldi	r31, 0x01	; 1
    201a:	df 07       	cpc	r29, r31
    201c:	29 f4       	brne	.+10     	; 0x2028 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    201e:	62 e0       	ldi	r22, 0x02	; 2
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2026:	3a c1       	rjmp	.+628    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    2028:	c1 15       	cp	r28, r1
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	d8 07       	cpc	r29, r24
    202e:	29 f4       	brne	.+10     	; 0x203a <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2030:	61 e0       	ldi	r22, 0x01	; 1
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2038:	31 c1       	rjmp	.+610    	; 0x229c <usart_init_rs232+0x2cc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    203a:	c0 38       	cpi	r28, 0x80	; 128
    203c:	e3 e0       	ldi	r30, 0x03	; 3
    203e:	de 07       	cpc	r29, r30
    2040:	29 f4       	brne	.+10     	; 0x204c <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2042:	61 e0       	ldi	r22, 0x01	; 1
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    204a:	28 c1       	rjmp	.+592    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    204c:	c0 39       	cpi	r28, 0x90	; 144
    204e:	f3 e0       	ldi	r31, 0x03	; 3
    2050:	df 07       	cpc	r29, r31
    2052:	29 f4       	brne	.+10     	; 0x205e <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2054:	61 e0       	ldi	r22, 0x01	; 1
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    205c:	1f c1       	rjmp	.+574    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    205e:	c1 15       	cp	r28, r1
    2060:	82 e0       	ldi	r24, 0x02	; 2
    2062:	d8 07       	cpc	r29, r24
    2064:	29 f4       	brne	.+10     	; 0x2070 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2066:	62 e0       	ldi	r22, 0x02	; 2
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    206e:	16 c1       	rjmp	.+556    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    2070:	c0 34       	cpi	r28, 0x40	; 64
    2072:	e2 e0       	ldi	r30, 0x02	; 2
    2074:	de 07       	cpc	r29, r30
    2076:	29 f4       	brne	.+10     	; 0x2082 <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2078:	62 e0       	ldi	r22, 0x02	; 2
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2080:	0d c1       	rjmp	.+538    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    2082:	c1 15       	cp	r28, r1
    2084:	f3 e0       	ldi	r31, 0x03	; 3
    2086:	df 07       	cpc	r29, r31
    2088:	29 f4       	brne	.+10     	; 0x2094 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    208a:	64 e0       	ldi	r22, 0x04	; 4
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2092:	04 c1       	rjmp	.+520    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    2094:	c0 32       	cpi	r28, 0x20	; 32
    2096:	83 e0       	ldi	r24, 0x03	; 3
    2098:	d8 07       	cpc	r29, r24
    209a:	29 f4       	brne	.+10     	; 0x20a6 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    209c:	64 e0       	ldi	r22, 0x04	; 4
    209e:	82 e0       	ldi	r24, 0x02	; 2
    20a0:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    20a4:	fb c0       	rjmp	.+502    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    20a6:	c1 15       	cp	r28, r1
    20a8:	e8 e0       	ldi	r30, 0x08	; 8
    20aa:	de 07       	cpc	r29, r30
    20ac:	29 f4       	brne	.+10     	; 0x20b8 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    20ae:	61 e0       	ldi	r22, 0x01	; 1
    20b0:	83 e0       	ldi	r24, 0x03	; 3
    20b2:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    20b6:	f2 c0       	rjmp	.+484    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    20b8:	c1 15       	cp	r28, r1
    20ba:	f9 e0       	ldi	r31, 0x09	; 9
    20bc:	df 07       	cpc	r29, r31
    20be:	29 f4       	brne	.+10     	; 0x20ca <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    20c0:	61 e0       	ldi	r22, 0x01	; 1
    20c2:	84 e0       	ldi	r24, 0x04	; 4
    20c4:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    20c8:	e9 c0       	rjmp	.+466    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    20ca:	c1 15       	cp	r28, r1
    20cc:	8a e0       	ldi	r24, 0x0A	; 10
    20ce:	d8 07       	cpc	r29, r24
    20d0:	29 f4       	brne	.+10     	; 0x20dc <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    20d2:	61 e0       	ldi	r22, 0x01	; 1
    20d4:	85 e0       	ldi	r24, 0x05	; 5
    20d6:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    20da:	e0 c0       	rjmp	.+448    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    20dc:	c1 15       	cp	r28, r1
    20de:	eb e0       	ldi	r30, 0x0B	; 11
    20e0:	de 07       	cpc	r29, r30
    20e2:	29 f4       	brne	.+10     	; 0x20ee <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    20e4:	61 e0       	ldi	r22, 0x01	; 1
    20e6:	86 e0       	ldi	r24, 0x06	; 6
    20e8:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    20ec:	d7 c0       	rjmp	.+430    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    20ee:	c0 34       	cpi	r28, 0x40	; 64
    20f0:	f8 e0       	ldi	r31, 0x08	; 8
    20f2:	df 07       	cpc	r29, r31
    20f4:	29 f4       	brne	.+10     	; 0x2100 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    20f6:	62 e0       	ldi	r22, 0x02	; 2
    20f8:	83 e0       	ldi	r24, 0x03	; 3
    20fa:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    20fe:	ce c0       	rjmp	.+412    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2100:	c0 34       	cpi	r28, 0x40	; 64
    2102:	89 e0       	ldi	r24, 0x09	; 9
    2104:	d8 07       	cpc	r29, r24
    2106:	29 f4       	brne	.+10     	; 0x2112 <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2108:	62 e0       	ldi	r22, 0x02	; 2
    210a:	84 e0       	ldi	r24, 0x04	; 4
    210c:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2110:	c5 c0       	rjmp	.+394    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2112:	c0 34       	cpi	r28, 0x40	; 64
    2114:	ea e0       	ldi	r30, 0x0A	; 10
    2116:	de 07       	cpc	r29, r30
    2118:	29 f4       	brne	.+10     	; 0x2124 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    211a:	62 e0       	ldi	r22, 0x02	; 2
    211c:	85 e0       	ldi	r24, 0x05	; 5
    211e:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2122:	bc c0       	rjmp	.+376    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    2124:	c0 34       	cpi	r28, 0x40	; 64
    2126:	fb e0       	ldi	r31, 0x0B	; 11
    2128:	df 07       	cpc	r29, r31
    212a:	29 f4       	brne	.+10     	; 0x2136 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    212c:	62 e0       	ldi	r22, 0x02	; 2
    212e:	86 e0       	ldi	r24, 0x06	; 6
    2130:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2134:	b3 c0       	rjmp	.+358    	; 0x229c <usart_init_rs232+0x2cc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2136:	c0 39       	cpi	r28, 0x90	; 144
    2138:	88 e0       	ldi	r24, 0x08	; 8
    213a:	d8 07       	cpc	r29, r24
    213c:	29 f4       	brne	.+10     	; 0x2148 <usart_init_rs232+0x178>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    213e:	64 e0       	ldi	r22, 0x04	; 4
    2140:	83 e0       	ldi	r24, 0x03	; 3
    2142:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2146:	aa c0       	rjmp	.+340    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2148:	c0 39       	cpi	r28, 0x90	; 144
    214a:	e9 e0       	ldi	r30, 0x09	; 9
    214c:	de 07       	cpc	r29, r30
    214e:	29 f4       	brne	.+10     	; 0x215a <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2150:	64 e0       	ldi	r22, 0x04	; 4
    2152:	84 e0       	ldi	r24, 0x04	; 4
    2154:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2158:	a1 c0       	rjmp	.+322    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    215a:	c0 39       	cpi	r28, 0x90	; 144
    215c:	fa e0       	ldi	r31, 0x0A	; 10
    215e:	df 07       	cpc	r29, r31
    2160:	29 f4       	brne	.+10     	; 0x216c <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2162:	64 e0       	ldi	r22, 0x04	; 4
    2164:	85 e0       	ldi	r24, 0x05	; 5
    2166:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    216a:	98 c0       	rjmp	.+304    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    216c:	c0 39       	cpi	r28, 0x90	; 144
    216e:	8b e0       	ldi	r24, 0x0B	; 11
    2170:	d8 07       	cpc	r29, r24
    2172:	29 f4       	brne	.+10     	; 0x217e <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2174:	64 e0       	ldi	r22, 0x04	; 4
    2176:	86 e0       	ldi	r24, 0x06	; 6
    2178:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    217c:	8f c0       	rjmp	.+286    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    217e:	c0 3c       	cpi	r28, 0xC0	; 192
    2180:	e8 e0       	ldi	r30, 0x08	; 8
    2182:	de 07       	cpc	r29, r30
    2184:	29 f4       	brne	.+10     	; 0x2190 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2186:	68 e0       	ldi	r22, 0x08	; 8
    2188:	83 e0       	ldi	r24, 0x03	; 3
    218a:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    218e:	86 c0       	rjmp	.+268    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    2190:	c0 3c       	cpi	r28, 0xC0	; 192
    2192:	f9 e0       	ldi	r31, 0x09	; 9
    2194:	df 07       	cpc	r29, r31
    2196:	29 f4       	brne	.+10     	; 0x21a2 <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    2198:	68 e0       	ldi	r22, 0x08	; 8
    219a:	84 e0       	ldi	r24, 0x04	; 4
    219c:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    21a0:	7d c0       	rjmp	.+250    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    21a2:	c0 3c       	cpi	r28, 0xC0	; 192
    21a4:	8a e0       	ldi	r24, 0x0A	; 10
    21a6:	d8 07       	cpc	r29, r24
    21a8:	29 f4       	brne	.+10     	; 0x21b4 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    21aa:	68 e0       	ldi	r22, 0x08	; 8
    21ac:	85 e0       	ldi	r24, 0x05	; 5
    21ae:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    21b2:	74 c0       	rjmp	.+232    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    21b4:	c0 3c       	cpi	r28, 0xC0	; 192
    21b6:	eb e0       	ldi	r30, 0x0B	; 11
    21b8:	de 07       	cpc	r29, r30
    21ba:	29 f4       	brne	.+10     	; 0x21c6 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    21bc:	68 e0       	ldi	r22, 0x08	; 8
    21be:	86 e0       	ldi	r24, 0x06	; 6
    21c0:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    21c4:	6b c0       	rjmp	.+214    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    21c6:	c0 3a       	cpi	r28, 0xA0	; 160
    21c8:	f8 e0       	ldi	r31, 0x08	; 8
    21ca:	df 07       	cpc	r29, r31
    21cc:	29 f4       	brne	.+10     	; 0x21d8 <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    21ce:	60 e1       	ldi	r22, 0x10	; 16
    21d0:	83 e0       	ldi	r24, 0x03	; 3
    21d2:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    21d6:	62 c0       	rjmp	.+196    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    21d8:	c0 3a       	cpi	r28, 0xA0	; 160
    21da:	89 e0       	ldi	r24, 0x09	; 9
    21dc:	d8 07       	cpc	r29, r24
    21de:	29 f4       	brne	.+10     	; 0x21ea <usart_init_rs232+0x21a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    21e0:	60 e1       	ldi	r22, 0x10	; 16
    21e2:	84 e0       	ldi	r24, 0x04	; 4
    21e4:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    21e8:	59 c0       	rjmp	.+178    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    21ea:	c0 3a       	cpi	r28, 0xA0	; 160
    21ec:	ea e0       	ldi	r30, 0x0A	; 10
    21ee:	de 07       	cpc	r29, r30
    21f0:	29 f4       	brne	.+10     	; 0x21fc <usart_init_rs232+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    21f2:	60 e1       	ldi	r22, 0x10	; 16
    21f4:	85 e0       	ldi	r24, 0x05	; 5
    21f6:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    21fa:	50 c0       	rjmp	.+160    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    21fc:	c0 3a       	cpi	r28, 0xA0	; 160
    21fe:	fb e0       	ldi	r31, 0x0B	; 11
    2200:	df 07       	cpc	r29, r31
    2202:	29 f4       	brne	.+10     	; 0x220e <usart_init_rs232+0x23e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    2204:	60 e1       	ldi	r22, 0x10	; 16
    2206:	86 e0       	ldi	r24, 0x06	; 6
    2208:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    220c:	47 c0       	rjmp	.+142    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    220e:	c0 3b       	cpi	r28, 0xB0	; 176
    2210:	88 e0       	ldi	r24, 0x08	; 8
    2212:	d8 07       	cpc	r29, r24
    2214:	29 f4       	brne	.+10     	; 0x2220 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    2216:	60 e2       	ldi	r22, 0x20	; 32
    2218:	83 e0       	ldi	r24, 0x03	; 3
    221a:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    221e:	3e c0       	rjmp	.+124    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    2220:	c0 3b       	cpi	r28, 0xB0	; 176
    2222:	e9 e0       	ldi	r30, 0x09	; 9
    2224:	de 07       	cpc	r29, r30
    2226:	29 f4       	brne	.+10     	; 0x2232 <usart_init_rs232+0x262>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    2228:	60 e2       	ldi	r22, 0x20	; 32
    222a:	84 e0       	ldi	r24, 0x04	; 4
    222c:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2230:	35 c0       	rjmp	.+106    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    2232:	c0 3b       	cpi	r28, 0xB0	; 176
    2234:	fa e0       	ldi	r31, 0x0A	; 10
    2236:	df 07       	cpc	r29, r31
    2238:	29 f4       	brne	.+10     	; 0x2244 <usart_init_rs232+0x274>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    223a:	60 e2       	ldi	r22, 0x20	; 32
    223c:	85 e0       	ldi	r24, 0x05	; 5
    223e:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2242:	2c c0       	rjmp	.+88     	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    2244:	c0 3b       	cpi	r28, 0xB0	; 176
    2246:	8b e0       	ldi	r24, 0x0B	; 11
    2248:	d8 07       	cpc	r29, r24
    224a:	29 f4       	brne	.+10     	; 0x2256 <usart_init_rs232+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    224c:	60 e2       	ldi	r22, 0x20	; 32
    224e:	86 e0       	ldi	r24, 0x06	; 6
    2250:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2254:	23 c0       	rjmp	.+70     	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    2256:	c0 38       	cpi	r28, 0x80	; 128
    2258:	e4 e0       	ldi	r30, 0x04	; 4
    225a:	de 07       	cpc	r29, r30
    225c:	29 f4       	brne	.+10     	; 0x2268 <usart_init_rs232+0x298>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    225e:	60 e4       	ldi	r22, 0x40	; 64
    2260:	83 e0       	ldi	r24, 0x03	; 3
    2262:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2266:	1a c0       	rjmp	.+52     	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    2268:	c0 39       	cpi	r28, 0x90	; 144
    226a:	f4 e0       	ldi	r31, 0x04	; 4
    226c:	df 07       	cpc	r29, r31
    226e:	29 f4       	brne	.+10     	; 0x227a <usart_init_rs232+0x2aa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    2270:	60 e4       	ldi	r22, 0x40	; 64
    2272:	84 e0       	ldi	r24, 0x04	; 4
    2274:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2278:	11 c0       	rjmp	.+34     	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    227a:	c0 3a       	cpi	r28, 0xA0	; 160
    227c:	84 e0       	ldi	r24, 0x04	; 4
    227e:	d8 07       	cpc	r29, r24
    2280:	29 f4       	brne	.+10     	; 0x228c <usart_init_rs232+0x2bc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2282:	60 e4       	ldi	r22, 0x40	; 64
    2284:	85 e0       	ldi	r24, 0x05	; 5
    2286:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    228a:	08 c0       	rjmp	.+16     	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    228c:	c0 3b       	cpi	r28, 0xB0	; 176
    228e:	e4 e0       	ldi	r30, 0x04	; 4
    2290:	de 07       	cpc	r29, r30
    2292:	21 f4       	brne	.+8      	; 0x229c <usart_init_rs232+0x2cc>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    2294:	60 e4       	ldi	r22, 0x40	; 64
    2296:	86 e0       	ldi	r24, 0x06	; 6
    2298:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	8f 73       	andi	r24, 0x3F	; 63
    22a0:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    22a2:	f8 01       	movw	r30, r16
    22a4:	95 81       	ldd	r25, Z+5	; 0x05
    22a6:	84 81       	ldd	r24, Z+4	; 0x04
    22a8:	89 2b       	or	r24, r25
    22aa:	96 81       	ldd	r25, Z+6	; 0x06
    22ac:	91 11       	cpse	r25, r1
    22ae:	98 e0       	ldi	r25, 0x08	; 8
    22b0:	89 2b       	or	r24, r25
    22b2:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    22b4:	f8 01       	movw	r30, r16
    22b6:	40 81       	ld	r20, Z
    22b8:	51 81       	ldd	r21, Z+1	; 0x01
    22ba:	62 81       	ldd	r22, Z+2	; 0x02
    22bc:	73 81       	ldd	r23, Z+3	; 0x03
    22be:	00 e0       	ldi	r16, 0x00	; 0
    22c0:	18 e4       	ldi	r17, 0x48	; 72
    22c2:	28 ee       	ldi	r18, 0xE8	; 232
    22c4:	31 e0       	ldi	r19, 0x01	; 1
    22c6:	ce 01       	movw	r24, r28
    22c8:	70 dd       	rcall	.-1312   	; 0x1daa <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	98 60       	ori	r25, 0x08	; 8
    22ce:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    22d0:	9c 81       	ldd	r25, Y+4	; 0x04
    22d2:	90 61       	ori	r25, 0x10	; 16
    22d4:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	08 95       	ret

000022e0 <Get_altitude>:
#include "thermistor.h"
#include <math.h>

extern int32_t TEMP;

float Get_altitude(uint32_t initial, uint32_t pressure, uint32_t temperature){
    22e0:	4f 92       	push	r4
    22e2:	5f 92       	push	r5
    22e4:	6f 92       	push	r6
    22e6:	7f 92       	push	r7
    22e8:	8f 92       	push	r8
    22ea:	9f 92       	push	r9
    22ec:	af 92       	push	r10
    22ee:	bf 92       	push	r11
    22f0:	cf 92       	push	r12
    22f2:	df 92       	push	r13
    22f4:	ef 92       	push	r14
    22f6:	ff 92       	push	r15
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	00 d0       	rcall	.+0      	; 0x2302 <Get_altitude+0x22>
    2302:	1f 92       	push	r1
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	49 01       	movw	r8, r18
    230a:	5a 01       	movw	r10, r20
    230c:	27 01       	movw	r4, r14
    230e:	38 01       	movw	r6, r16
	//printf("Initial Pressure = %lu\n", initial);
	//printf("pressure = %lu \n", pressure);
	//printf("temperature = %lu \n", temperature);
	//float altitude = (((287.058 * (((float)(TEMP)/100)+273.15)/9.8))*log((float)initial/get_pressure())*3.28);	Not this one, this one's bad
	float altitude = (pow(((initial/100)/(pressure/100)),(1/5.257))-1)*((temperature/100)+273.15)/.0065; //This is now right, just gotta use the thermistor
    2310:	0f 2e       	mov	r0, r31
    2312:	f4 e6       	ldi	r31, 0x64	; 100
    2314:	cf 2e       	mov	r12, r31
    2316:	d1 2c       	mov	r13, r1
    2318:	e1 2c       	mov	r14, r1
    231a:	f1 2c       	mov	r15, r1
    231c:	f0 2d       	mov	r31, r0
    231e:	a7 01       	movw	r20, r14
    2320:	96 01       	movw	r18, r12
    2322:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__udivmodsi4>
    2326:	29 83       	std	Y+1, r18	; 0x01
    2328:	3a 83       	std	Y+2, r19	; 0x02
    232a:	4b 83       	std	Y+3, r20	; 0x03
    232c:	5c 83       	std	Y+4, r21	; 0x04
    232e:	c5 01       	movw	r24, r10
    2330:	b4 01       	movw	r22, r8
    2332:	a7 01       	movw	r20, r14
    2334:	96 01       	movw	r18, r12
    2336:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__udivmodsi4>
    233a:	69 81       	ldd	r22, Y+1	; 0x01
    233c:	7a 81       	ldd	r23, Y+2	; 0x02
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__udivmodsi4>
    2346:	ca 01       	movw	r24, r20
    2348:	b9 01       	movw	r22, r18
    234a:	a8 d7       	rcall	.+3920   	; 0x329c <__floatunsisf>
    234c:	24 eb       	ldi	r18, 0xB4	; 180
    234e:	39 ec       	ldi	r19, 0xC9	; 201
    2350:	42 e4       	ldi	r20, 0x42	; 66
    2352:	5e e3       	ldi	r21, 0x3E	; 62
    2354:	0e 94 84 1a 	call	0x3508	; 0x3508 <pow>
    2358:	4b 01       	movw	r8, r22
    235a:	5c 01       	movw	r10, r24
	//printf("altitude = %f \n", (float)altitude);
	return altitude;
    235c:	c3 01       	movw	r24, r6
    235e:	b2 01       	movw	r22, r4
    2360:	a7 01       	movw	r20, r14
    2362:	96 01       	movw	r18, r12
    2364:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <__udivmodsi4>
    2368:	ca 01       	movw	r24, r20
    236a:	b9 01       	movw	r22, r18
    236c:	97 d7       	rcall	.+3886   	; 0x329c <__floatunsisf>
    236e:	23 e3       	ldi	r18, 0x33	; 51
    2370:	33 e9       	ldi	r19, 0x93	; 147
    2372:	48 e8       	ldi	r20, 0x88	; 136
    2374:	53 e4       	ldi	r21, 0x43	; 67
    2376:	95 d6       	rcall	.+3370   	; 0x30a2 <__addsf3>
    2378:	6b 01       	movw	r12, r22
    237a:	7c 01       	movw	r14, r24
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e8       	ldi	r20, 0x80	; 128
    2382:	5f e3       	ldi	r21, 0x3F	; 63
    2384:	c5 01       	movw	r24, r10
    2386:	b4 01       	movw	r22, r8
    2388:	8b d6       	rcall	.+3350   	; 0x30a0 <__subsf3>
    238a:	9b 01       	movw	r18, r22
    238c:	ac 01       	movw	r20, r24
    238e:	c7 01       	movw	r24, r14
    2390:	b6 01       	movw	r22, r12
    2392:	0e 94 21 1a 	call	0x3442	; 0x3442 <__mulsf3>
    2396:	24 ef       	ldi	r18, 0xF4	; 244
    2398:	3d ef       	ldi	r19, 0xFD	; 253
    239a:	44 ed       	ldi	r20, 0xD4	; 212
    239c:	5b e3       	ldi	r21, 0x3B	; 59
    239e:	e5 d6       	rcall	.+3530   	; 0x316a <__divsf3>
}
    23a0:	24 96       	adiw	r28, 0x04	; 4
    23a2:	cd bf       	out	0x3d, r28	; 61
    23a4:	de bf       	out	0x3e, r29	; 62
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	1f 91       	pop	r17
    23ac:	0f 91       	pop	r16
    23ae:	ff 90       	pop	r15
    23b0:	ef 90       	pop	r14
    23b2:	df 90       	pop	r13
    23b4:	cf 90       	pop	r12
    23b6:	bf 90       	pop	r11
    23b8:	af 90       	pop	r10
    23ba:	9f 90       	pop	r9
    23bc:	8f 90       	pop	r8
    23be:	7f 90       	pop	r7
    23c0:	6f 90       	pop	r6
    23c2:	5f 90       	pop	r5
    23c4:	4f 90       	pop	r4
    23c6:	08 95       	ret

000023c8 <__portable_avr_delay_cycles>:
	PORTE.OUTSET = 0b00000001;
}*/

void heatshield_solenoid(PORT_t* port){
	(*port).DIRSET = 0b10000000;
	(*port).OUTSET = 0b10000000;
    23c8:	04 c0       	rjmp	.+8      	; 0x23d2 <__portable_avr_delay_cycles+0xa>
    23ca:	61 50       	subi	r22, 0x01	; 1
    23cc:	71 09       	sbc	r23, r1
    23ce:	81 09       	sbc	r24, r1
    23d0:	91 09       	sbc	r25, r1
    23d2:	61 15       	cp	r22, r1
    23d4:	71 05       	cpc	r23, r1
    23d6:	81 05       	cpc	r24, r1
    23d8:	91 05       	cpc	r25, r1
    23da:	b9 f7       	brne	.-18     	; 0x23ca <__portable_avr_delay_cycles+0x2>
    23dc:	08 95       	ret

000023de <heatshield_hotwire>:
}

void heatshield_hotwire (void){
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
	PORTD.DIR |= 0b00000010;
    23e2:	c0 e6       	ldi	r28, 0x60	; 96
    23e4:	d6 e0       	ldi	r29, 0x06	; 6
    23e6:	88 81       	ld	r24, Y
    23e8:	82 60       	ori	r24, 0x02	; 2
    23ea:	88 83       	st	Y, r24
	PORTD.OUT |= 0b00000010; //TODO: fix these port addresses
    23ec:	8c 81       	ldd	r24, Y+4	; 0x04
    23ee:	82 60       	ori	r24, 0x02	; 2
    23f0:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(4000);
    23f2:	66 e5       	ldi	r22, 0x56	; 86
    23f4:	75 e8       	ldi	r23, 0x85	; 133
    23f6:	85 e4       	ldi	r24, 0x45	; 69
    23f8:	91 e0       	ldi	r25, 0x01	; 1
    23fa:	e6 df       	rcall	.-52     	; 0x23c8 <__portable_avr_delay_cycles>
	PORTD.OUT &= 0b11111101;
    23fc:	8c 81       	ldd	r24, Y+4	; 0x04
    23fe:	8d 7f       	andi	r24, 0xFD	; 253
    2400:	8c 83       	std	Y+4, r24	; 0x04
}
    2402:	df 91       	pop	r29
    2404:	cf 91       	pop	r28
    2406:	08 95       	ret

00002408 <parachute_hotwire>:

void parachute_hotwire (void) {
    2408:	cf 93       	push	r28
    240a:	df 93       	push	r29
	PORTD.DIR |= 0b00000010;
    240c:	c0 e6       	ldi	r28, 0x60	; 96
    240e:	d6 e0       	ldi	r29, 0x06	; 6
    2410:	88 81       	ld	r24, Y
    2412:	82 60       	ori	r24, 0x02	; 2
    2414:	88 83       	st	Y, r24
	PORTD.OUT |= 0b00000010; //TODO: fix these port addresses
    2416:	8c 81       	ldd	r24, Y+4	; 0x04
    2418:	82 60       	ori	r24, 0x02	; 2
    241a:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(4000);
    241c:	66 e5       	ldi	r22, 0x56	; 86
    241e:	75 e8       	ldi	r23, 0x85	; 133
    2420:	85 e4       	ldi	r24, 0x45	; 69
    2422:	91 e0       	ldi	r25, 0x01	; 1
    2424:	d1 df       	rcall	.-94     	; 0x23c8 <__portable_avr_delay_cycles>
	PORTD.OUT &= 0b11111101;
    2426:	8c 81       	ldd	r24, Y+4	; 0x04
    2428:	8d 7f       	andi	r24, 0xFD	; 253
    242a:	8c 83       	std	Y+4, r24	; 0x04
}
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	08 95       	ret

00002432 <heatshield_detatch_hotwire>:

void heatshield_detatch_hotwire(void){
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
	PORTD.DIR |= 0b00000010;
    2436:	c0 e6       	ldi	r28, 0x60	; 96
    2438:	d6 e0       	ldi	r29, 0x06	; 6
    243a:	88 81       	ld	r24, Y
    243c:	82 60       	ori	r24, 0x02	; 2
    243e:	88 83       	st	Y, r24
	PORTD.OUT |= 0b00000010; //TODO: fix these port addresses
    2440:	8c 81       	ldd	r24, Y+4	; 0x04
    2442:	82 60       	ori	r24, 0x02	; 2
    2444:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(4000);
    2446:	66 e5       	ldi	r22, 0x56	; 86
    2448:	75 e8       	ldi	r23, 0x85	; 133
    244a:	85 e4       	ldi	r24, 0x45	; 69
    244c:	91 e0       	ldi	r25, 0x01	; 1
    244e:	bc df       	rcall	.-136    	; 0x23c8 <__portable_avr_delay_cycles>
	PORTD.OUT &= 0b11111101;	
    2450:	8c 81       	ldd	r24, Y+4	; 0x04
    2452:	8d 7f       	andi	r24, 0xFD	; 253
    2454:	8c 83       	std	Y+4, r24	; 0x04
}
    2456:	df 91       	pop	r29
    2458:	cf 91       	pop	r28
    245a:	08 95       	ret

0000245c <buzzer_on>:

void buzzer_on(void){
	PORTA.DIR |= 0b00001000;
    245c:	e0 e0       	ldi	r30, 0x00	; 0
    245e:	f6 e0       	ldi	r31, 0x06	; 6
    2460:	80 81       	ld	r24, Z
    2462:	88 60       	ori	r24, 0x08	; 8
    2464:	80 83       	st	Z, r24
	PORTA.OUT |= 0b00001000;
    2466:	84 81       	ldd	r24, Z+4	; 0x04
    2468:	88 60       	ori	r24, 0x08	; 8
    246a:	84 83       	std	Z+4, r24	; 0x04
    246c:	08 95       	ret

0000246e <buzzer_off>:
	
}
void buzzer_off(void){
	PORTA.DIR |= 0b00001000;
    246e:	e0 e0       	ldi	r30, 0x00	; 0
    2470:	f6 e0       	ldi	r31, 0x06	; 6
    2472:	80 81       	ld	r24, Z
    2474:	88 60       	ori	r24, 0x08	; 8
    2476:	80 83       	st	Z, r24
	PORTA.OUT &= 0b11110111;
    2478:	84 81       	ldd	r24, Z+4	; 0x04
    247a:	87 7f       	andi	r24, 0xF7	; 247
    247c:	84 83       	std	Z+4, r24	; 0x04
    247e:	08 95       	ret

00002480 <camera_on>:
	
}
void camera_on(void){
	PORTE.DIR |= 0b01000000;
    2480:	e0 e8       	ldi	r30, 0x80	; 128
    2482:	f6 e0       	ldi	r31, 0x06	; 6
    2484:	80 81       	ld	r24, Z
    2486:	80 64       	ori	r24, 0x40	; 64
    2488:	80 83       	st	Z, r24
	PORTE.OUT |= 0b01000000;
    248a:	84 81       	ldd	r24, Z+4	; 0x04
    248c:	80 64       	ori	r24, 0x40	; 64
    248e:	84 83       	std	Z+4, r24	; 0x04
    2490:	08 95       	ret

00002492 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2492:	04 c0       	rjmp	.+8      	; 0x249c <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2494:	61 50       	subi	r22, 0x01	; 1
    2496:	71 09       	sbc	r23, r1
    2498:	81 09       	sbc	r24, r1
    249a:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    249c:	61 15       	cp	r22, r1
    249e:	71 05       	cpc	r23, r1
    24a0:	81 05       	cpc	r24, r1
    24a2:	91 05       	cpc	r25, r1
    24a4:	b9 f7       	brne	.-18     	; 0x2494 <__portable_avr_delay_cycles+0x2>
    24a6:	08 95       	ret

000024a8 <SPI_init>:
uint16_t c5;
uint16_t c6;


void SPI_init(void){
	PORTC.DIRSET = 0b10110000;
    24a8:	e0 e4       	ldi	r30, 0x40	; 64
    24aa:	f6 e0       	ldi	r31, 0x06	; 6
    24ac:	80 eb       	ldi	r24, 0xB0	; 176
    24ae:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = 0b01000000;
    24b0:	90 e4       	ldi	r25, 0x40	; 64
    24b2:	92 83       	std	Z+2, r25	; 0x02
	PORTC.OUTSET = 0b10110000;
    24b4:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0b01010011;
    24b6:	83 e5       	ldi	r24, 0x53	; 83
    24b8:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    24bc:	08 95       	ret

000024be <SPI_write>:
}

void SPI_write(uint8_t data){
	SPIC.DATA = data;
    24be:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
    24c2:	e0 ec       	ldi	r30, 0xC0	; 192
    24c4:	f8 e0       	ldi	r31, 0x08	; 8
    24c6:	82 81       	ldd	r24, Z+2	; 0x02
    24c8:	88 23       	and	r24, r24
    24ca:	ec f7       	brge	.-6      	; 0x24c6 <SPI_write+0x8>
}
    24cc:	08 95       	ret

000024ce <spi_read>:

uint8_t spi_read (void){
	SPI_write(0xFF);
    24ce:	8f ef       	ldi	r24, 0xFF	; 255
    24d0:	f6 df       	rcall	.-20     	; 0x24be <SPI_write>
	return SPIC.DATA;
    24d2:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    24d6:	08 95       	ret

000024d8 <prom_read>:
	//printf("c5: %u \n", c5);
	c6 = prom_read(0xAC);
	//printf("c6: %u \n", c6);
}

uint16_t prom_read(uint8_t command){
    24d8:	ff 92       	push	r15
    24da:	0f 93       	push	r16
    24dc:	1f 93       	push	r17
    24de:	cf 93       	push	r28
    24e0:	df 93       	push	r29
	uint16_t data;
	PORTC.OUTCLR = 0b00010000;
    24e2:	00 e4       	ldi	r16, 0x40	; 64
    24e4:	16 e0       	ldi	r17, 0x06	; 6
    24e6:	68 94       	set
    24e8:	ff 24       	eor	r15, r15
    24ea:	f4 f8       	bld	r15, 4
    24ec:	f8 01       	movw	r30, r16
	SPI_write(command);
	data = ((uint16_t)spi_read())<<8;	//Bitshifting
    24ee:	f6 82       	std	Z+6, r15	; 0x06
    24f0:	e6 df       	rcall	.-52     	; 0x24be <SPI_write>
    24f2:	ed df       	rcall	.-38     	; 0x24ce <spi_read>
    24f4:	c8 2f       	mov	r28, r24
    24f6:	d0 e0       	ldi	r29, 0x00	; 0
	data += spi_read();
    24f8:	dc 2f       	mov	r29, r28
    24fa:	cc 27       	eor	r28, r28
    24fc:	e8 df       	rcall	.-48     	; 0x24ce <spi_read>
    24fe:	c8 0f       	add	r28, r24
	PORTC.OUTSET = 0b00010000;
    2500:	d1 1d       	adc	r29, r1
    2502:	f8 01       	movw	r30, r16
	delay_ms(1);
    2504:	f5 82       	std	Z+5, r15	; 0x05
    2506:	66 ed       	ldi	r22, 0xD6	; 214
    2508:	74 e1       	ldi	r23, 0x14	; 20
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	90 e0       	ldi	r25, 0x00	; 0
	//printf("data: %lu \n", data);
	return data;
}
    250e:	c1 df       	rcall	.-126    	; 0x2492 <__portable_avr_delay_cycles>
    2510:	ce 01       	movw	r24, r28
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	1f 91       	pop	r17
    2518:	0f 91       	pop	r16
    251a:	ff 90       	pop	r15
    251c:	08 95       	ret

0000251e <ms5607_init>:
uint8_t spi_read (void){
	SPI_write(0xFF);
	return SPIC.DATA;
}

void ms5607_init(void){
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
	PORTC.OUTCLR = 0b00010000;
    2524:	c0 e4       	ldi	r28, 0x40	; 64
    2526:	d6 e0       	ldi	r29, 0x06	; 6
    2528:	10 e1       	ldi	r17, 0x10	; 16
    252a:	1e 83       	std	Y+6, r17	; 0x06
	SPI_write(0x1E);
    252c:	8e e1       	ldi	r24, 0x1E	; 30
    252e:	c7 df       	rcall	.-114    	; 0x24be <SPI_write>
	PORTC.OUTSET = 0b00010000;
    2530:	1d 83       	std	Y+5, r17	; 0x05
	delay_ms(10);
    2532:	66 e5       	ldi	r22, 0x56	; 86
    2534:	70 ed       	ldi	r23, 0xD0	; 208
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	90 e0       	ldi	r25, 0x00	; 0
	c1 = prom_read(0xA2);
    253a:	ab df       	rcall	.-170    	; 0x2492 <__portable_avr_delay_cycles>
    253c:	82 ea       	ldi	r24, 0xA2	; 162
    253e:	cc df       	rcall	.-104    	; 0x24d8 <prom_read>
    2540:	80 93 b7 20 	sts	0x20B7, r24	; 0x8020b7 <c1>
    2544:	90 93 b8 20 	sts	0x20B8, r25	; 0x8020b8 <c1+0x1>
	//printf("c1: %u \n", c1);
	c2 = prom_read(0xA4);
    2548:	84 ea       	ldi	r24, 0xA4	; 164
    254a:	c6 df       	rcall	.-116    	; 0x24d8 <prom_read>
    254c:	80 93 b3 20 	sts	0x20B3, r24	; 0x8020b3 <c2>
    2550:	90 93 b4 20 	sts	0x20B4, r25	; 0x8020b4 <c2+0x1>
	//printf("c2: %u \n", c2);
	c3 = prom_read(0xA6);
    2554:	86 ea       	ldi	r24, 0xA6	; 166
    2556:	c0 df       	rcall	.-128    	; 0x24d8 <prom_read>
    2558:	80 93 b9 20 	sts	0x20B9, r24	; 0x8020b9 <c3>
    255c:	90 93 ba 20 	sts	0x20BA, r25	; 0x8020ba <c3+0x1>
	//printf("c3: %u \n", c3);
	c4 = prom_read(0xA8);
    2560:	88 ea       	ldi	r24, 0xA8	; 168
    2562:	ba df       	rcall	.-140    	; 0x24d8 <prom_read>
    2564:	80 93 b1 20 	sts	0x20B1, r24	; 0x8020b1 <c4>
    2568:	90 93 b2 20 	sts	0x20B2, r25	; 0x8020b2 <c4+0x1>
	//printf("c4: %u \n", c4);
	c5 = prom_read(0xAA);
    256c:	8a ea       	ldi	r24, 0xAA	; 170
    256e:	b4 df       	rcall	.-152    	; 0x24d8 <prom_read>
    2570:	80 93 b5 20 	sts	0x20B5, r24	; 0x8020b5 <c5>
    2574:	90 93 b6 20 	sts	0x20B6, r25	; 0x8020b6 <c5+0x1>
	//printf("c5: %u \n", c5);
	c6 = prom_read(0xAC);
    2578:	8c ea       	ldi	r24, 0xAC	; 172
    257a:	ae df       	rcall	.-164    	; 0x24d8 <prom_read>
    257c:	80 93 af 20 	sts	0x20AF, r24	; 0x8020af <c6>
    2580:	90 93 b0 20 	sts	0x20B0, r25	; 0x8020b0 <c6+0x1>
	//printf("c6: %u \n", c6);
}
    2584:	df 91       	pop	r29
    2586:	cf 91       	pop	r28
    2588:	1f 91       	pop	r17
    258a:	08 95       	ret

0000258c <data_read>:
	delay_ms(1);
	//printf("data: %lu \n", data);
	return data;
}

uint32_t data_read(uint8_t command){
    258c:	8f 92       	push	r8
    258e:	9f 92       	push	r9
    2590:	af 92       	push	r10
    2592:	bf 92       	push	r11
    2594:	cf 92       	push	r12
    2596:	df 92       	push	r13
    2598:	ef 92       	push	r14
    259a:	ff 92       	push	r15
    259c:	1f 93       	push	r17
    259e:	cf 93       	push	r28
    25a0:	df 93       	push	r29
	uint32_t data;
	PORTC.OUTCLR = 0b00010000;
    25a2:	c0 e4       	ldi	r28, 0x40	; 64
    25a4:	d6 e0       	ldi	r29, 0x06	; 6
    25a6:	10 e1       	ldi	r17, 0x10	; 16
	SPI_write(command);
    25a8:	1e 83       	std	Y+6, r17	; 0x06
	PORTC.OUTSET = 0b00010000;
    25aa:	89 df       	rcall	.-238    	; 0x24be <SPI_write>
	delay_ms(9);
    25ac:	1d 83       	std	Y+5, r17	; 0x05
    25ae:	61 e8       	ldi	r22, 0x81	; 129
    25b0:	7b eb       	ldi	r23, 0xBB	; 187
    25b2:	80 e0       	ldi	r24, 0x00	; 0
	PORTC.OUTCLR = 0b00010000;
    25b4:	90 e0       	ldi	r25, 0x00	; 0
    25b6:	6d df       	rcall	.-294    	; 0x2492 <__portable_avr_delay_cycles>
    25b8:	1e 83       	std	Y+6, r17	; 0x06
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	80 df       	rcall	.-256    	; 0x24be <SPI_write>
    25be:	87 df       	rcall	.-242    	; 0x24ce <spi_read>
    25c0:	c8 2e       	mov	r12, r24
    25c2:	d1 2c       	mov	r13, r1
    25c4:	e1 2c       	mov	r14, r1
    25c6:	f1 2c       	mov	r15, r1
    25c8:	56 01       	movw	r10, r12
    25ca:	99 24       	eor	r9, r9
    25cc:	88 24       	eor	r8, r8
    25ce:	7f df       	rcall	.-258    	; 0x24ce <spi_read>
    25d0:	c8 2e       	mov	r12, r24
    25d2:	d1 2c       	mov	r13, r1
    25d4:	e1 2c       	mov	r14, r1
    25d6:	f1 2c       	mov	r15, r1
    25d8:	fe 2c       	mov	r15, r14
    25da:	ed 2c       	mov	r14, r13
    25dc:	dc 2c       	mov	r13, r12
    25de:	cc 24       	eor	r12, r12
    25e0:	c8 0c       	add	r12, r8
    25e2:	d9 1c       	adc	r13, r9
    25e4:	ea 1c       	adc	r14, r10
    25e6:	fb 1c       	adc	r15, r11
    25e8:	72 df       	rcall	.-284    	; 0x24ce <spi_read>
    25ea:	1d 83       	std	Y+5, r17	; 0x05
    25ec:	a7 01       	movw	r20, r14
    25ee:	96 01       	movw	r18, r12
    25f0:	28 0f       	add	r18, r24
    25f2:	31 1d       	adc	r19, r1
    25f4:	41 1d       	adc	r20, r1
    25f6:	51 1d       	adc	r21, r1
    25f8:	ca 01       	movw	r24, r20
    25fa:	b9 01       	movw	r22, r18
    25fc:	df 91       	pop	r29
    25fe:	cf 91       	pop	r28
    2600:	1f 91       	pop	r17
    2602:	ff 90       	pop	r15
    2604:	ef 90       	pop	r14
    2606:	df 90       	pop	r13
    2608:	cf 90       	pop	r12
    260a:	bf 90       	pop	r11
    260c:	af 90       	pop	r10
    260e:	9f 90       	pop	r9
    2610:	8f 90       	pop	r8
    2612:	08 95       	ret

00002614 <get_pressure>:
    2614:	2f 92       	push	r2
    2616:	3f 92       	push	r3
    2618:	4f 92       	push	r4
    261a:	5f 92       	push	r5
    261c:	6f 92       	push	r6
    261e:	7f 92       	push	r7
    2620:	8f 92       	push	r8
    2622:	9f 92       	push	r9
    2624:	af 92       	push	r10
    2626:	bf 92       	push	r11
    2628:	cf 92       	push	r12
    262a:	df 92       	push	r13
    262c:	ef 92       	push	r14
    262e:	ff 92       	push	r15
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
    263c:	61 97       	sbiw	r28, 0x11	; 17
    263e:	cd bf       	out	0x3d, r28	; 61
    2640:	de bf       	out	0x3e, r29	; 62
    2642:	88 e4       	ldi	r24, 0x48	; 72
    2644:	a3 df       	rcall	.-186    	; 0x258c <data_read>
    2646:	6d 83       	std	Y+5, r22	; 0x05
    2648:	7e 83       	std	Y+6, r23	; 0x06
    264a:	8f 83       	std	Y+7, r24	; 0x07
    264c:	98 87       	std	Y+8, r25	; 0x08
    264e:	88 e5       	ldi	r24, 0x58	; 88
    2650:	9d df       	rcall	.-198    	; 0x258c <data_read>
    2652:	20 91 b5 20 	lds	r18, 0x20B5	; 0x8020b5 <c5>
    2656:	30 91 b6 20 	lds	r19, 0x20B6	; 0x8020b6 <c5+0x1>
    265a:	89 01       	movw	r16, r18
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	32 2f       	mov	r19, r18
    2662:	21 2f       	mov	r18, r17
    2664:	10 2f       	mov	r17, r16
    2666:	00 27       	eor	r16, r16
    2668:	6b 01       	movw	r12, r22
    266a:	7c 01       	movw	r14, r24
    266c:	c0 1a       	sub	r12, r16
    266e:	d1 0a       	sbc	r13, r17
    2670:	e2 0a       	sbc	r14, r18
    2672:	f3 0a       	sbc	r15, r19
    2674:	c9 82       	std	Y+1, r12	; 0x01
    2676:	da 82       	std	Y+2, r13	; 0x02
    2678:	eb 82       	std	Y+3, r14	; 0x03
    267a:	fc 82       	std	Y+4, r15	; 0x04
    267c:	20 90 af 20 	lds	r2, 0x20AF	; 0x8020af <c6>
    2680:	30 90 b0 20 	lds	r3, 0x20B0	; 0x8020b0 <c6+0x1>
    2684:	d7 01       	movw	r26, r14
    2686:	c6 01       	movw	r24, r12
    2688:	bb 0f       	add	r27, r27
    268a:	88 0b       	sbc	r24, r24
    268c:	98 2f       	mov	r25, r24
    268e:	dc 01       	movw	r26, r24
    2690:	a9 80       	ldd	r10, Y+1	; 0x01
    2692:	ba 80       	ldd	r11, Y+2	; 0x02
    2694:	cb 80       	ldd	r12, Y+3	; 0x03
    2696:	dc 80       	ldd	r13, Y+4	; 0x04
    2698:	e8 2e       	mov	r14, r24
    269a:	f8 2e       	mov	r15, r24
    269c:	08 2f       	mov	r16, r24
    269e:	18 2f       	mov	r17, r24
    26a0:	22 2d       	mov	r18, r2
    26a2:	33 2d       	mov	r19, r3
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	50 e0       	ldi	r21, 0x00	; 0
    26a8:	60 e0       	ldi	r22, 0x00	; 0
    26aa:	70 e0       	ldi	r23, 0x00	; 0
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__muldi3>
    26b4:	89 8b       	std	Y+17, r24	; 0x11
    26b6:	b2 2f       	mov	r27, r18
    26b8:	f3 2f       	mov	r31, r19
    26ba:	e4 2f       	mov	r30, r20
    26bc:	95 2e       	mov	r9, r21
    26be:	86 2e       	mov	r8, r22
    26c0:	77 2e       	mov	r7, r23
    26c2:	a8 2e       	mov	r10, r24
    26c4:	b9 2e       	mov	r11, r25
    26c6:	a0 e0       	ldi	r26, 0x00	; 0
    26c8:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__cmpdi2_s8>
    26cc:	84 f4       	brge	.+32     	; 0x26ee <get_pressure+0xda>
    26ce:	21 50       	subi	r18, 0x01	; 1
    26d0:	31 09       	sbc	r19, r1
    26d2:	40 48       	sbci	r20, 0x80	; 128
    26d4:	5f 4f       	sbci	r21, 0xFF	; 255
    26d6:	6f 4f       	sbci	r22, 0xFF	; 255
    26d8:	7f 4f       	sbci	r23, 0xFF	; 255
    26da:	8f 4f       	sbci	r24, 0xFF	; 255
    26dc:	9f 4f       	sbci	r25, 0xFF	; 255
    26de:	b2 2f       	mov	r27, r18
    26e0:	f3 2f       	mov	r31, r19
    26e2:	e4 2f       	mov	r30, r20
    26e4:	95 2e       	mov	r9, r21
    26e6:	86 2e       	mov	r8, r22
    26e8:	77 2e       	mov	r7, r23
    26ea:	a8 2e       	mov	r10, r24
    26ec:	b9 2e       	mov	r11, r25
    26ee:	2b 2f       	mov	r18, r27
    26f0:	3f 2f       	mov	r19, r31
    26f2:	4e 2f       	mov	r20, r30
    26f4:	59 2d       	mov	r21, r9
    26f6:	68 2d       	mov	r22, r8
    26f8:	77 2d       	mov	r23, r7
    26fa:	8a 2d       	mov	r24, r10
    26fc:	9b 2d       	mov	r25, r11
    26fe:	07 e1       	ldi	r16, 0x17	; 23
    2700:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__ashrdi3>
    2704:	82 2e       	mov	r8, r18
    2706:	93 2e       	mov	r9, r19
    2708:	00 e3       	ldi	r16, 0x30	; 48
    270a:	80 1a       	sub	r8, r16
    270c:	08 ef       	ldi	r16, 0xF8	; 248
    270e:	90 0a       	sbc	r9, r16
    2710:	09 2c       	mov	r0, r9
    2712:	00 0c       	add	r0, r0
    2714:	aa 08       	sbc	r10, r10
    2716:	bb 08       	sbc	r11, r11
    2718:	80 92 ab 20 	sts	0x20AB, r8	; 0x8020ab <TEMP>
    271c:	90 92 ac 20 	sts	0x20AC, r9	; 0x8020ac <TEMP+0x1>
    2720:	a0 92 ad 20 	sts	0x20AD, r10	; 0x8020ad <TEMP+0x2>
    2724:	b0 92 ae 20 	sts	0x20AE, r11	; 0x8020ae <TEMP+0x3>
    2728:	a0 91 b9 20 	lds	r26, 0x20B9	; 0x8020b9 <c3>
    272c:	b0 91 ba 20 	lds	r27, 0x20BA	; 0x8020ba <c3+0x1>
    2730:	29 81       	ldd	r18, Y+1	; 0x01
    2732:	3a 81       	ldd	r19, Y+2	; 0x02
    2734:	4b 81       	ldd	r20, Y+3	; 0x03
    2736:	5c 81       	ldd	r21, Y+4	; 0x04
    2738:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <__muluhisi3>
    273c:	4b 01       	movw	r8, r22
    273e:	5c 01       	movw	r10, r24
    2740:	99 23       	and	r25, r25
    2742:	2c f4       	brge	.+10     	; 0x274e <get_pressure+0x13a>
    2744:	1f e7       	ldi	r17, 0x7F	; 127
    2746:	81 0e       	add	r8, r17
    2748:	91 1c       	adc	r9, r1
    274a:	a1 1c       	adc	r10, r1
    274c:	b1 1c       	adc	r11, r1
    274e:	24 01       	movw	r4, r8
    2750:	35 01       	movw	r6, r10
    2752:	68 94       	set
    2754:	16 f8       	bld	r1, 6
    2756:	75 94       	asr	r7
    2758:	67 94       	ror	r6
    275a:	57 94       	ror	r5
    275c:	47 94       	ror	r4
    275e:	16 94       	lsr	r1
    2760:	d1 f7       	brne	.-12     	; 0x2756 <get_pressure+0x142>
    2762:	bb 0c       	add	r11, r11
    2764:	88 08       	sbc	r8, r8
    2766:	98 2c       	mov	r9, r8
    2768:	54 01       	movw	r10, r8
    276a:	80 91 b7 20 	lds	r24, 0x20B7	; 0x8020b7 <c1>
    276e:	90 91 b8 20 	lds	r25, 0x20B8	; 0x8020b8 <c1+0x1>
    2772:	6c 01       	movw	r12, r24
    2774:	e1 2c       	mov	r14, r1
    2776:	f1 2c       	mov	r15, r1
    2778:	00 e0       	ldi	r16, 0x00	; 0
    277a:	10 e0       	ldi	r17, 0x00	; 0
    277c:	98 01       	movw	r18, r16
    277e:	89 87       	std	Y+9, r24	; 0x09
    2780:	da 86       	std	Y+10, r13	; 0x0a
    2782:	eb 86       	std	Y+11, r14	; 0x0b
    2784:	fc 86       	std	Y+12, r15	; 0x0c
    2786:	0d 87       	std	Y+13, r16	; 0x0d
    2788:	1e 87       	std	Y+14, r17	; 0x0e
    278a:	2f 87       	std	Y+15, r18	; 0x0f
    278c:	38 8b       	std	Y+16, r19	; 0x10
    278e:	28 2f       	mov	r18, r24
    2790:	3d 2d       	mov	r19, r13
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	70 e0       	ldi	r23, 0x00	; 0
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	00 e1       	ldi	r16, 0x10	; 16
    27a0:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__ashldi3>
    27a4:	f2 2f       	mov	r31, r18
    27a6:	e3 2f       	mov	r30, r19
    27a8:	c4 2e       	mov	r12, r20
    27aa:	d5 2e       	mov	r13, r21
    27ac:	e6 2e       	mov	r14, r22
    27ae:	f7 2e       	mov	r15, r23
    27b0:	08 2f       	mov	r16, r24
    27b2:	19 2f       	mov	r17, r25
    27b4:	24 2d       	mov	r18, r4
    27b6:	35 2d       	mov	r19, r5
    27b8:	46 2d       	mov	r20, r6
    27ba:	57 2d       	mov	r21, r7
    27bc:	68 2d       	mov	r22, r8
    27be:	78 2d       	mov	r23, r8
    27c0:	88 2d       	mov	r24, r8
    27c2:	98 2d       	mov	r25, r8
    27c4:	af 2e       	mov	r10, r31
    27c6:	be 2e       	mov	r11, r30
    27c8:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__adddi3>
    27cc:	ed 80       	ldd	r14, Y+5	; 0x05
    27ce:	fe 80       	ldd	r15, Y+6	; 0x06
    27d0:	0f 81       	ldd	r16, Y+7	; 0x07
    27d2:	18 85       	ldd	r17, Y+8	; 0x08
    27d4:	17 01       	movw	r2, r14
    27d6:	28 01       	movw	r4, r16
    27d8:	ae 2c       	mov	r10, r14
    27da:	b3 2c       	mov	r11, r3
    27dc:	c4 2c       	mov	r12, r4
    27de:	d5 2c       	mov	r13, r5
    27e0:	e1 2c       	mov	r14, r1
    27e2:	f1 2c       	mov	r15, r1
    27e4:	00 e0       	ldi	r16, 0x00	; 0
    27e6:	10 e0       	ldi	r17, 0x00	; 0
    27e8:	0e 94 5c 1f 	call	0x3eb8	; 0x3eb8 <__muldi3>
    27ec:	12 2f       	mov	r17, r18
    27ee:	39 87       	std	Y+9, r19	; 0x09
    27f0:	4d 83       	std	Y+5, r20	; 0x05
    27f2:	b5 2f       	mov	r27, r21
    27f4:	f6 2f       	mov	r31, r22
    27f6:	e7 2f       	mov	r30, r23
    27f8:	78 2e       	mov	r7, r24
    27fa:	89 2e       	mov	r8, r25
    27fc:	a0 e0       	ldi	r26, 0x00	; 0
    27fe:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__cmpdi2_s8>
    2802:	84 f4       	brge	.+32     	; 0x2824 <get_pressure+0x210>
    2804:	21 50       	subi	r18, 0x01	; 1
    2806:	31 09       	sbc	r19, r1
    2808:	40 4e       	sbci	r20, 0xE0	; 224
    280a:	5f 4f       	sbci	r21, 0xFF	; 255
    280c:	6f 4f       	sbci	r22, 0xFF	; 255
    280e:	7f 4f       	sbci	r23, 0xFF	; 255
    2810:	8f 4f       	sbci	r24, 0xFF	; 255
    2812:	9f 4f       	sbci	r25, 0xFF	; 255
    2814:	12 2f       	mov	r17, r18
    2816:	39 87       	std	Y+9, r19	; 0x09
    2818:	4d 83       	std	Y+5, r20	; 0x05
    281a:	b5 2f       	mov	r27, r21
    281c:	f6 2f       	mov	r31, r22
    281e:	e7 2f       	mov	r30, r23
    2820:	78 2e       	mov	r7, r24
    2822:	89 2e       	mov	r8, r25
    2824:	21 2f       	mov	r18, r17
    2826:	39 85       	ldd	r19, Y+9	; 0x09
    2828:	4d 81       	ldd	r20, Y+5	; 0x05
    282a:	5b 2f       	mov	r21, r27
    282c:	6f 2f       	mov	r22, r31
    282e:	7e 2f       	mov	r23, r30
    2830:	87 2d       	mov	r24, r7
    2832:	98 2d       	mov	r25, r8
    2834:	05 e1       	ldi	r16, 0x15	; 21
    2836:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__ashrdi3>
    283a:	52 2e       	mov	r5, r18
    283c:	63 2e       	mov	r6, r19
    283e:	74 2e       	mov	r7, r20
    2840:	59 8b       	std	Y+17, r21	; 0x11
    2842:	69 87       	std	Y+9, r22	; 0x09
    2844:	f7 2f       	mov	r31, r23
    2846:	e8 2f       	mov	r30, r24
    2848:	49 2e       	mov	r4, r25
    284a:	a0 91 b1 20 	lds	r26, 0x20B1	; 0x8020b1 <c4>
    284e:	b0 91 b2 20 	lds	r27, 0x20B2	; 0x8020b2 <c4+0x1>
    2852:	29 81       	ldd	r18, Y+1	; 0x01
    2854:	3a 81       	ldd	r19, Y+2	; 0x02
    2856:	4b 81       	ldd	r20, Y+3	; 0x03
    2858:	5c 81       	ldd	r21, Y+4	; 0x04
    285a:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <__muluhisi3>
    285e:	4b 01       	movw	r8, r22
    2860:	5c 01       	movw	r10, r24
    2862:	99 23       	and	r25, r25
    2864:	2c f4       	brge	.+10     	; 0x2870 <get_pressure+0x25c>
    2866:	0f e3       	ldi	r16, 0x3F	; 63
    2868:	80 0e       	add	r8, r16
    286a:	91 1c       	adc	r9, r1
    286c:	a1 1c       	adc	r10, r1
    286e:	b1 1c       	adc	r11, r1
    2870:	75 01       	movw	r14, r10
    2872:	64 01       	movw	r12, r8
    2874:	68 94       	set
    2876:	15 f8       	bld	r1, 5
    2878:	f5 94       	asr	r15
    287a:	e7 94       	ror	r14
    287c:	d7 94       	ror	r13
    287e:	c7 94       	ror	r12
    2880:	16 94       	lsr	r1
    2882:	d1 f7       	brne	.-12     	; 0x2878 <get_pressure+0x264>
    2884:	bb 0c       	add	r11, r11
    2886:	88 08       	sbc	r8, r8
    2888:	98 2c       	mov	r9, r8
    288a:	54 01       	movw	r10, r8
    288c:	20 91 b3 20 	lds	r18, 0x20B3	; 0x8020b3 <c2>
    2890:	30 91 b4 20 	lds	r19, 0x20B4	; 0x8020b4 <c2+0x1>
    2894:	a9 01       	movw	r20, r18
    2896:	35 2f       	mov	r19, r21
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	50 e0       	ldi	r21, 0x00	; 0
    289c:	60 e0       	ldi	r22, 0x00	; 0
    289e:	70 e0       	ldi	r23, 0x00	; 0
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	01 e1       	ldi	r16, 0x11	; 17
    28a6:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__ashldi3>
    28aa:	22 2e       	mov	r2, r18
    28ac:	33 2e       	mov	r3, r19
    28ae:	49 83       	std	Y+1, r20	; 0x01
    28b0:	5d 83       	std	Y+5, r21	; 0x05
    28b2:	b6 2f       	mov	r27, r22
    28b4:	a7 2f       	mov	r26, r23
    28b6:	08 2f       	mov	r16, r24
    28b8:	19 2f       	mov	r17, r25
    28ba:	2c 2d       	mov	r18, r12
    28bc:	3d 2d       	mov	r19, r13
    28be:	4e 2d       	mov	r20, r14
    28c0:	5f 2d       	mov	r21, r15
    28c2:	68 2d       	mov	r22, r8
    28c4:	78 2d       	mov	r23, r8
    28c6:	88 2d       	mov	r24, r8
    28c8:	98 2d       	mov	r25, r8
    28ca:	a2 2c       	mov	r10, r2
    28cc:	b3 2c       	mov	r11, r3
    28ce:	c9 80       	ldd	r12, Y+1	; 0x01
    28d0:	dd 80       	ldd	r13, Y+5	; 0x05
    28d2:	eb 2e       	mov	r14, r27
    28d4:	fa 2e       	mov	r15, r26
    28d6:	0e 94 e4 1f 	call	0x3fc8	; 0x3fc8 <__adddi3>
    28da:	a2 2e       	mov	r10, r18
    28dc:	b3 2e       	mov	r11, r19
    28de:	c4 2e       	mov	r12, r20
    28e0:	d5 2e       	mov	r13, r21
    28e2:	e6 2e       	mov	r14, r22
    28e4:	f7 2e       	mov	r15, r23
    28e6:	08 2f       	mov	r16, r24
    28e8:	19 2f       	mov	r17, r25
    28ea:	25 2d       	mov	r18, r5
    28ec:	36 2d       	mov	r19, r6
    28ee:	47 2d       	mov	r20, r7
    28f0:	59 89       	ldd	r21, Y+17	; 0x11
    28f2:	69 85       	ldd	r22, Y+9	; 0x09
    28f4:	7f 2f       	mov	r23, r31
    28f6:	8e 2f       	mov	r24, r30
    28f8:	94 2d       	mov	r25, r4
    28fa:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <__subdi3>
    28fe:	12 2f       	mov	r17, r18
    2900:	3d 83       	std	Y+5, r19	; 0x05
    2902:	49 83       	std	Y+1, r20	; 0x01
    2904:	b5 2f       	mov	r27, r21
    2906:	f6 2f       	mov	r31, r22
    2908:	e7 2f       	mov	r30, r23
    290a:	78 2e       	mov	r7, r24
    290c:	89 2e       	mov	r8, r25
    290e:	a0 e0       	ldi	r26, 0x00	; 0
    2910:	0e 94 f6 1f 	call	0x3fec	; 0x3fec <__cmpdi2_s8>
    2914:	84 f4       	brge	.+32     	; 0x2936 <get_pressure+0x322>
    2916:	21 50       	subi	r18, 0x01	; 1
    2918:	30 48       	sbci	r19, 0x80	; 128
    291a:	4f 4f       	sbci	r20, 0xFF	; 255
    291c:	5f 4f       	sbci	r21, 0xFF	; 255
    291e:	6f 4f       	sbci	r22, 0xFF	; 255
    2920:	7f 4f       	sbci	r23, 0xFF	; 255
    2922:	8f 4f       	sbci	r24, 0xFF	; 255
    2924:	9f 4f       	sbci	r25, 0xFF	; 255
    2926:	12 2f       	mov	r17, r18
    2928:	3d 83       	std	Y+5, r19	; 0x05
    292a:	49 83       	std	Y+1, r20	; 0x01
    292c:	b5 2f       	mov	r27, r21
    292e:	f6 2f       	mov	r31, r22
    2930:	e7 2f       	mov	r30, r23
    2932:	78 2e       	mov	r7, r24
    2934:	89 2e       	mov	r8, r25
    2936:	21 2f       	mov	r18, r17
    2938:	3d 81       	ldd	r19, Y+5	; 0x05
    293a:	49 81       	ldd	r20, Y+1	; 0x01
    293c:	5b 2f       	mov	r21, r27
    293e:	6f 2f       	mov	r22, r31
    2940:	7e 2f       	mov	r23, r30
    2942:	87 2d       	mov	r24, r7
    2944:	98 2d       	mov	r25, r8
    2946:	0f e0       	ldi	r16, 0x0F	; 15
    2948:	0e 94 c6 1f 	call	0x3f8c	; 0x3f8c <__ashrdi3>
    294c:	62 2f       	mov	r22, r18
    294e:	73 2f       	mov	r23, r19
    2950:	84 2f       	mov	r24, r20
    2952:	95 2f       	mov	r25, r21
    2954:	61 96       	adiw	r28, 0x11	; 17
    2956:	cd bf       	out	0x3d, r28	; 61
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	1f 91       	pop	r17
    2960:	0f 91       	pop	r16
    2962:	ff 90       	pop	r15
    2964:	ef 90       	pop	r14
    2966:	df 90       	pop	r13
    2968:	cf 90       	pop	r12
    296a:	bf 90       	pop	r11
    296c:	af 90       	pop	r10
    296e:	9f 90       	pop	r9
    2970:	8f 90       	pop	r8
    2972:	7f 90       	pop	r7
    2974:	6f 90       	pop	r6
    2976:	5f 90       	pop	r5
    2978:	4f 90       	pop	r4
    297a:	3f 90       	pop	r3
    297c:	2f 90       	pop	r2
    297e:	08 95       	ret

00002980 <adc_init>:
#include <asf.h>
#include <math.h>
#include "thermistor.h"


void adc_init(void){	//This is for PA0... mostly
    2980:	ff 92       	push	r15
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
	PORTA.DIRCLR = 0b00000001;
    298a:	e0 e0       	ldi	r30, 0x00	; 0
    298c:	f6 e0       	ldi	r31, 0x06	; 6
    298e:	ff 24       	eor	r15, r15
    2990:	f3 94       	inc	r15
    2992:	f2 82       	std	Z+2, r15	; 0x02
	PORTA.DIR = 0b11111110;
    2994:	8e ef       	ldi	r24, 0xFE	; 254
    2996:	80 83       	st	Z, r24
	ADCA.CTRLA = 0b00000001;
    2998:	c0 e0       	ldi	r28, 0x00	; 0
    299a:	d2 e0       	ldi	r29, 0x02	; 2
    299c:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000;
    299e:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000;
    29a0:	80 e1       	ldi	r24, 0x10	; 16
    29a2:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101;
    29a4:	85 e0       	ldi	r24, 0x05	; 5
    29a6:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    29a8:	61 e2       	ldi	r22, 0x21	; 33
    29aa:	70 e0       	ldi	r23, 0x00	; 0
    29ac:	82 e0       	ldi	r24, 0x02	; 2
    29ae:	0e 94 fd 05 	call	0xbfa	; 0xbfa <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    29b2:	08 2f       	mov	r16, r24
    29b4:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    29b6:	10 2f       	mov	r17, r16
    29b8:	00 27       	eor	r16, r16
    29ba:	60 e2       	ldi	r22, 0x20	; 32
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	82 e0       	ldi	r24, 0x02	; 2
    29c0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    29c4:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    29c6:	0c 87       	std	Y+12, r16	; 0x0c
    29c8:	1d 87       	std	Y+13, r17	; 0x0d
	
	ADCA.CH0.CTRL = 0b00000001;
    29ca:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000000;
    29cc:	19 a2       	std	Y+33, r1	; 0x21
}
    29ce:	df 91       	pop	r29
    29d0:	cf 91       	pop	r28
    29d2:	1f 91       	pop	r17
    29d4:	0f 91       	pop	r16
    29d6:	ff 90       	pop	r15
    29d8:	08 95       	ret

000029da <getVoltage>:


float getVoltage(void){
	ADCA.CH0.CTRL  |= 0b10000000;
    29da:	e0 e0       	ldi	r30, 0x00	; 0
    29dc:	f2 e0       	ldi	r31, 0x02	; 2
    29de:	80 a1       	ldd	r24, Z+32	; 0x20
    29e0:	80 68       	ori	r24, 0x80	; 128
    29e2:	80 a3       	std	Z+32, r24	; 0x20
	//printf("one");
	while(ADCA.CH0.INTFLAGS == 0);
    29e4:	83 a1       	ldd	r24, Z+35	; 0x23
    29e6:	88 23       	and	r24, r24
    29e8:	e9 f3       	breq	.-6      	; 0x29e4 <getVoltage+0xa>
	//printf("two");
	//ADCA.CH0.INTFLAGS = 0;
	//printf("three");
	uint16_t adcReading = ADCA.CH0.RES;
    29ea:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    29ee:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
	//printf("ADC reading = %u\n", adcReading);
	float voltage = 0.0004899 * (float)(adcReading) - 0.0856326;	//We have to find these numbers by applying differing voltage, printing ADC readings, and solve equation
	//printf("voltage: %f \n", voltage);
	return voltage;
    29f2:	80 e0       	ldi	r24, 0x00	; 0
    29f4:	90 e0       	ldi	r25, 0x00	; 0
    29f6:	52 d4       	rcall	.+2212   	; 0x329c <__floatunsisf>
    29f8:	22 ea       	ldi	r18, 0xA2	; 162
    29fa:	3c e6       	ldi	r19, 0x6C	; 108
    29fc:	40 e0       	ldi	r20, 0x00	; 0
    29fe:	5a e3       	ldi	r21, 0x3A	; 58
    2a00:	20 d5       	rcall	.+2624   	; 0x3442 <__mulsf3>
    2a02:	25 e2       	ldi	r18, 0x25	; 37
    2a04:	30 e6       	ldi	r19, 0x60	; 96
    2a06:	4f ea       	ldi	r20, 0xAF	; 175
    2a08:	5d e3       	ldi	r21, 0x3D	; 61
	
}
    2a0a:	4a c3       	rjmp	.+1684   	; 0x30a0 <__subsf3>

00002a0c <getTemperature>:
	uint16_t voltage = getVoltage();
	uint16_t current = (voltage/10000);
	return current;
}
*/
float getTemperature(void){
    2a0c:	8f 92       	push	r8
    2a0e:	9f 92       	push	r9
    2a10:	af 92       	push	r10
    2a12:	bf 92       	push	r11
    2a14:	cf 92       	push	r12
    2a16:	df 92       	push	r13
    2a18:	ef 92       	push	r14
	float voltage = getVoltage();
    2a1a:	ff 92       	push	r15
    2a1c:	de df       	rcall	.-68     	; 0x29da <getVoltage>
    2a1e:	6b 01       	movw	r12, r22
	//uint16_t current = getCurrent();
	//uint16_t resistance = voltage/current;
	float resistance = (voltage*10000)/(voltage-3.3);
	//printf("resistance = %f \n", resistance);
	uint32_t temperature = 3977.0/(log(resistance/(10000.0*pow(2.71828,(-3977.0/298.15)))));
    2a20:	7c 01       	movw	r14, r24
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e4       	ldi	r19, 0x40	; 64
    2a26:	4c e1       	ldi	r20, 0x1C	; 28
    2a28:	56 e4       	ldi	r21, 0x46	; 70
    2a2a:	0b d5       	rcall	.+2582   	; 0x3442 <__mulsf3>
    2a2c:	4b 01       	movw	r8, r22
    2a2e:	5c 01       	movw	r10, r24
    2a30:	23 e3       	ldi	r18, 0x33	; 51
    2a32:	33 e3       	ldi	r19, 0x33	; 51
    2a34:	43 e5       	ldi	r20, 0x53	; 83
    2a36:	50 e4       	ldi	r21, 0x40	; 64
    2a38:	c7 01       	movw	r24, r14
    2a3a:	b6 01       	movw	r22, r12
    2a3c:	31 d3       	rcall	.+1634   	; 0x30a0 <__subsf3>
    2a3e:	9b 01       	movw	r18, r22
    2a40:	ac 01       	movw	r20, r24
    2a42:	c5 01       	movw	r24, r10
    2a44:	b4 01       	movw	r22, r8
    2a46:	91 d3       	rcall	.+1826   	; 0x316a <__divsf3>
    2a48:	2b e5       	ldi	r18, 0x5B	; 91
    2a4a:	30 ef       	ldi	r19, 0xF0	; 240
    2a4c:	43 e8       	ldi	r20, 0x83	; 131
    2a4e:	5c e3       	ldi	r21, 0x3C	; 60
	//float temperature = pow((.003351016+.0002569850*log(resistance/10000)+.000002620131*pow(log(resistance/10000),2)),-1);
	return temperature;
    2a50:	8c d3       	rcall	.+1816   	; 0x316a <__divsf3>
    2a52:	b7 d4       	rcall	.+2414   	; 0x33c2 <log>
    2a54:	9b 01       	movw	r18, r22
    2a56:	ac 01       	movw	r20, r24
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	70 e9       	ldi	r23, 0x90	; 144
    2a5c:	88 e7       	ldi	r24, 0x78	; 120
    2a5e:	95 e4       	ldi	r25, 0x45	; 69
    2a60:	84 d3       	rcall	.+1800   	; 0x316a <__divsf3>
	
	
	
    2a62:	f0 d3       	rcall	.+2016   	; 0x3244 <__fixunssfsi>
    2a64:	1b d4       	rcall	.+2102   	; 0x329c <__floatunsisf>
    2a66:	ff 90       	pop	r15
    2a68:	ef 90       	pop	r14
    2a6a:	df 90       	pop	r13
    2a6c:	cf 90       	pop	r12
    2a6e:	bf 90       	pop	r11
    2a70:	af 90       	pop	r10
    2a72:	9f 90       	pop	r9
    2a74:	8f 90       	pop	r8
    2a76:	08 95       	ret

00002a78 <usart_serial_getchar>:
		read_buffer[loc] = usart_getchar(usart_channel);
		loc++;
		
	}
	return read_buffer;
}
    2a78:	cf 93       	push	r28
    2a7a:	df 93       	push	r29
    2a7c:	eb 01       	movw	r28, r22
    2a7e:	8f d9       	rcall	.-3298   	; 0x1d9e <usart_getchar>
    2a80:	88 83       	st	Y, r24
    2a82:	df 91       	pop	r29
    2a84:	cf 91       	pop	r28
    2a86:	08 95       	ret

00002a88 <usart_serial_putchar>:
    2a88:	82 c9       	rjmp	.-3324   	; 0x1d8e <usart_putchar>
    2a8a:	08 95       	ret

00002a8c <usart_init>:
    2a8c:	cf 93       	push	r28
    2a8e:	df 93       	push	r29
    2a90:	cd b7       	in	r28, 0x3d	; 61
    2a92:	de b7       	in	r29, 0x3e	; 62
    2a94:	27 97       	sbiw	r28, 0x07	; 7
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	de bf       	out	0x3e, r29	; 62
    2a9a:	e0 e4       	ldi	r30, 0x40	; 64
    2a9c:	f6 e0       	ldi	r31, 0x06	; 6
    2a9e:	88 e0       	ldi	r24, 0x08	; 8
    2aa0:	81 83       	std	Z+1, r24	; 0x01
    2aa2:	85 83       	std	Z+5, r24	; 0x05
    2aa4:	e0 e6       	ldi	r30, 0x60	; 96
    2aa6:	f6 e0       	ldi	r31, 0x06	; 6
    2aa8:	81 83       	std	Z+1, r24	; 0x01
    2aaa:	85 83       	std	Z+5, r24	; 0x05
    2aac:	80 ea       	ldi	r24, 0xA0	; 160
    2aae:	98 e0       	ldi	r25, 0x08	; 8
    2ab0:	80 93 a5 20 	sts	0x20A5, r24	; 0x8020a5 <stdio_base>
    2ab4:	90 93 a6 20 	sts	0x20A6, r25	; 0x8020a6 <stdio_base+0x1>
    2ab8:	84 e4       	ldi	r24, 0x44	; 68
    2aba:	95 e1       	ldi	r25, 0x15	; 21
    2abc:	80 93 a3 20 	sts	0x20A3, r24	; 0x8020a3 <ptr_put>
    2ac0:	90 93 a4 20 	sts	0x20A4, r25	; 0x8020a4 <ptr_put+0x1>
    2ac4:	8c e3       	ldi	r24, 0x3C	; 60
    2ac6:	95 e1       	ldi	r25, 0x15	; 21
    2ac8:	80 93 a1 20 	sts	0x20A1, r24	; 0x8020a1 <ptr_get>
    2acc:	90 93 a2 20 	sts	0x20A2, r25	; 0x8020a2 <ptr_get+0x1>
    2ad0:	ed e0       	ldi	r30, 0x0D	; 13
    2ad2:	f0 e2       	ldi	r31, 0x20	; 32
    2ad4:	84 81       	ldd	r24, Z+4	; 0x04
    2ad6:	8d 83       	std	Y+5, r24	; 0x05
    2ad8:	85 81       	ldd	r24, Z+5	; 0x05
    2ada:	8e 83       	std	Y+6, r24	; 0x06
    2adc:	86 81       	ldd	r24, Z+6	; 0x06
    2ade:	8f 83       	std	Y+7, r24	; 0x07
    2ae0:	80 81       	ld	r24, Z
    2ae2:	91 81       	ldd	r25, Z+1	; 0x01
    2ae4:	a2 81       	ldd	r26, Z+2	; 0x02
    2ae6:	b3 81       	ldd	r27, Z+3	; 0x03
    2ae8:	89 83       	std	Y+1, r24	; 0x01
    2aea:	9a 83       	std	Y+2, r25	; 0x02
    2aec:	ab 83       	std	Y+3, r26	; 0x03
    2aee:	bc 83       	std	Y+4, r27	; 0x04
    2af0:	60 e1       	ldi	r22, 0x10	; 16
    2af2:	83 e0       	ldi	r24, 0x03	; 3
    2af4:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2af8:	be 01       	movw	r22, r28
    2afa:	6f 5f       	subi	r22, 0xFF	; 255
    2afc:	7f 4f       	sbci	r23, 0xFF	; 255
    2afe:	80 ea       	ldi	r24, 0xA0	; 160
    2b00:	98 e0       	ldi	r25, 0x08	; 8
    2b02:	66 da       	rcall	.-2868   	; 0x1fd0 <usart_init_rs232>
    2b04:	64 ee       	ldi	r22, 0xE4	; 228
    2b06:	73 e0       	ldi	r23, 0x03	; 3
    2b08:	8d ef       	ldi	r24, 0xFD	; 253
    2b0a:	93 e0       	ldi	r25, 0x03	; 3
    2b0c:	0e 94 ff 20 	call	0x41fe	; 0x41fe <fdevopen>
    2b10:	e6 e0       	ldi	r30, 0x06	; 6
    2b12:	f0 e2       	ldi	r31, 0x20	; 32
    2b14:	84 81       	ldd	r24, Z+4	; 0x04
    2b16:	8d 83       	std	Y+5, r24	; 0x05
    2b18:	85 81       	ldd	r24, Z+5	; 0x05
    2b1a:	8e 83       	std	Y+6, r24	; 0x06
    2b1c:	86 81       	ldd	r24, Z+6	; 0x06
    2b1e:	8f 83       	std	Y+7, r24	; 0x07
    2b20:	80 81       	ld	r24, Z
    2b22:	91 81       	ldd	r25, Z+1	; 0x01
    2b24:	a2 81       	ldd	r26, Z+2	; 0x02
    2b26:	b3 81       	ldd	r27, Z+3	; 0x03
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	9a 83       	std	Y+2, r25	; 0x02
    2b2c:	ab 83       	std	Y+3, r26	; 0x03
    2b2e:	bc 83       	std	Y+4, r27	; 0x04
    2b30:	60 e1       	ldi	r22, 0x10	; 16
    2b32:	84 e0       	ldi	r24, 0x04	; 4
    2b34:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2b38:	be 01       	movw	r22, r28
    2b3a:	6f 5f       	subi	r22, 0xFF	; 255
    2b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b3e:	80 ea       	ldi	r24, 0xA0	; 160
    2b40:	99 e0       	ldi	r25, 0x09	; 9
    2b42:	46 da       	rcall	.-2932   	; 0x1fd0 <usart_init_rs232>
    2b44:	27 96       	adiw	r28, 0x07	; 7
    2b46:	cd bf       	out	0x3d, r28	; 61
    2b48:	de bf       	out	0x3e, r29	; 62
    2b4a:	df 91       	pop	r29
    2b4c:	cf 91       	pop	r28
    2b4e:	08 95       	ret

00002b50 <__vector_25>:
	
ISR(USARTC0_RXC_vect){
    2b50:	1f 92       	push	r1
    2b52:	0f 92       	push	r0
    2b54:	0f b6       	in	r0, 0x3f	; 63
    2b56:	0f 92       	push	r0
    2b58:	11 24       	eor	r1, r1
    2b5a:	08 b6       	in	r0, 0x38	; 56
    2b5c:	0f 92       	push	r0
    2b5e:	18 be       	out	0x38, r1	; 56
    2b60:	09 b6       	in	r0, 0x39	; 57
    2b62:	0f 92       	push	r0
    2b64:	19 be       	out	0x39, r1	; 57
    2b66:	0b b6       	in	r0, 0x3b	; 59
    2b68:	0f 92       	push	r0
    2b6a:	1b be       	out	0x3b, r1	; 59
    2b6c:	2f 93       	push	r18
    2b6e:	3f 93       	push	r19
    2b70:	4f 93       	push	r20
    2b72:	5f 93       	push	r21
    2b74:	6f 93       	push	r22
    2b76:	7f 93       	push	r23
    2b78:	8f 93       	push	r24
    2b7a:	9f 93       	push	r25
    2b7c:	af 93       	push	r26
    2b7e:	bf 93       	push	r27
    2b80:	ef 93       	push	r30
    2b82:	ff 93       	push	r31
	//If we send reset things to the board
	xbee_rx_temporary = usart_getchar(&USARTC0);
    2b84:	80 ea       	ldi	r24, 0xA0	; 160
    2b86:	98 e0       	ldi	r25, 0x08	; 8
    2b88:	0a d9       	rcall	.-3564   	; 0x1d9e <usart_getchar>
    2b8a:	80 93 bb 20 	sts	0x20BB, r24	; 0x8020bb <xbee_rx_temporary>
	
	switch(xbee_rx_temporary){
    2b8e:	e0 91 bb 20 	lds	r30, 0x20BB	; 0x8020bb <xbee_rx_temporary>
    2b92:	8e 2f       	mov	r24, r30
    2b94:	ee 0f       	add	r30, r30
    2b96:	99 0b       	sbc	r25, r25
    2b98:	aa 0b       	sbc	r26, r26
    2b9a:	bb 0b       	sbc	r27, r27
    2b9c:	fc 01       	movw	r30, r24
    2b9e:	b1 97       	sbiw	r30, 0x21	; 33
    2ba0:	ef 33       	cpi	r30, 0x3F	; 63
    2ba2:	f1 05       	cpc	r31, r1
    2ba4:	a0 f4       	brcc	.+40     	; 0x2bce <__vector_25+0x7e>
    2ba6:	88 27       	eor	r24, r24
    2ba8:	e2 50       	subi	r30, 0x02	; 2
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	8f 4f       	sbci	r24, 0xFF	; 255
    2bae:	0c 94 49 1f 	jmp	0x3e92	; 0x3e92 <__tablejump2__>
		case '!':						//reset MCU 
			wdt_reset_mcu();
    2bb2:	0e 94 85 03 	call	0x70a	; 0x70a <wdt_reset_mcu>
			break;
		case '&':						//deploy parachute
			parachute_hotwire();
			break;
		case '*':						//detatching heatshield
			heatshield_detatch_hotwire();
    2bb6:	0b c0       	rjmp	.+22     	; 0x2bce <__vector_25+0x7e>
			break;
		case '(':						//buzzer on
			buzzer_on();
    2bb8:	12 dc       	rcall	.-2012   	; 0x23de <heatshield_hotwire>
			break;
    2bba:	09 c0       	rjmp	.+18     	; 0x2bce <__vector_25+0x7e>
		case ')':						//buzzer off
			buzzer_off();
    2bbc:	25 dc       	rcall	.-1974   	; 0x2408 <parachute_hotwire>
    2bbe:	07 c0       	rjmp	.+14     	; 0x2bce <__vector_25+0x7e>
			break;
    2bc0:	38 dc       	rcall	.-1936   	; 0x2432 <heatshield_detatch_hotwire>
		case '_':						//camera on
			camera_on();
    2bc2:	05 c0       	rjmp	.+10     	; 0x2bce <__vector_25+0x7e>
    2bc4:	4b dc       	rcall	.-1898   	; 0x245c <buzzer_on>
			break;
	}
	
}
    2bc6:	03 c0       	rjmp	.+6      	; 0x2bce <__vector_25+0x7e>
    2bc8:	52 dc       	rcall	.-1884   	; 0x246e <buzzer_off>
    2bca:	01 c0       	rjmp	.+2      	; 0x2bce <__vector_25+0x7e>
    2bcc:	59 dc       	rcall	.-1870   	; 0x2480 <camera_on>
    2bce:	ff 91       	pop	r31
    2bd0:	ef 91       	pop	r30
    2bd2:	bf 91       	pop	r27
    2bd4:	af 91       	pop	r26
    2bd6:	9f 91       	pop	r25
    2bd8:	8f 91       	pop	r24
    2bda:	7f 91       	pop	r23
    2bdc:	6f 91       	pop	r22
    2bde:	5f 91       	pop	r21
    2be0:	4f 91       	pop	r20
    2be2:	3f 91       	pop	r19
    2be4:	2f 91       	pop	r18
    2be6:	0f 90       	pop	r0
    2be8:	0b be       	out	0x3b, r0	; 59
    2bea:	0f 90       	pop	r0
    2bec:	09 be       	out	0x39, r0	; 57
    2bee:	0f 90       	pop	r0
    2bf0:	08 be       	out	0x38, r0	; 56
    2bf2:	0f 90       	pop	r0
 * \param c       Character to write.
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	0f 90       	pop	r0
    2bf8:	1f 90       	pop	r1
    2bfa:	18 95       	reti

00002bfc <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2bfc:	04 c0       	rjmp	.+8      	; 0x2c06 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2bfe:	61 50       	subi	r22, 0x01	; 1
    2c00:	71 09       	sbc	r23, r1
    2c02:	81 09       	sbc	r24, r1
    2c04:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2c06:	61 15       	cp	r22, r1
    2c08:	71 05       	cpc	r23, r1
    2c0a:	81 05       	cpc	r24, r1
    2c0c:	91 05       	cpc	r25, r1
    2c0e:	b9 f7       	brne	.-18     	; 0x2bfe <__portable_avr_delay_cycles+0x2>
    2c10:	08 95       	ret

00002c12 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2c12:	00 97       	sbiw	r24, 0x00	; 0
    2c14:	09 f4       	brne	.+2      	; 0x2c18 <sysclk_enable_peripheral_clock+0x6>
    2c16:	5c c1       	rjmp	.+696    	; 0x2ed0 <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    2c18:	80 3c       	cpi	r24, 0xC0	; 192
    2c1a:	91 05       	cpc	r25, r1
    2c1c:	29 f4       	brne	.+10     	; 0x2c28 <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    2c1e:	60 e1       	ldi	r22, 0x10	; 16
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2c26:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    2c28:	80 34       	cpi	r24, 0x40	; 64
    2c2a:	24 e0       	ldi	r18, 0x04	; 4
    2c2c:	92 07       	cpc	r25, r18
    2c2e:	29 f4       	brne	.+10     	; 0x2c3a <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    2c30:	68 e0       	ldi	r22, 0x08	; 8
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2c38:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    2c3a:	81 15       	cp	r24, r1
    2c3c:	24 e0       	ldi	r18, 0x04	; 4
    2c3e:	92 07       	cpc	r25, r18
    2c40:	29 f4       	brne	.+10     	; 0x2c4c <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2c42:	64 e0       	ldi	r22, 0x04	; 4
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2c4a:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2c4c:	80 38       	cpi	r24, 0x80	; 128
    2c4e:	21 e0       	ldi	r18, 0x01	; 1
    2c50:	92 07       	cpc	r25, r18
    2c52:	29 f4       	brne	.+10     	; 0x2c5e <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2c54:	62 e0       	ldi	r22, 0x02	; 2
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2c5c:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    2c5e:	81 15       	cp	r24, r1
    2c60:	21 e0       	ldi	r18, 0x01	; 1
    2c62:	92 07       	cpc	r25, r18
    2c64:	29 f4       	brne	.+10     	; 0x2c70 <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2c66:	61 e0       	ldi	r22, 0x01	; 1
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2c6e:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    2c70:	80 38       	cpi	r24, 0x80	; 128
    2c72:	23 e0       	ldi	r18, 0x03	; 3
    2c74:	92 07       	cpc	r25, r18
    2c76:	29 f4       	brne	.+10     	; 0x2c82 <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2c78:	61 e0       	ldi	r22, 0x01	; 1
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2c80:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    2c82:	80 39       	cpi	r24, 0x90	; 144
    2c84:	23 e0       	ldi	r18, 0x03	; 3
    2c86:	92 07       	cpc	r25, r18
    2c88:	29 f4       	brne	.+10     	; 0x2c94 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2c8a:	61 e0       	ldi	r22, 0x01	; 1
    2c8c:	82 e0       	ldi	r24, 0x02	; 2
    2c8e:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2c92:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    2c94:	81 15       	cp	r24, r1
    2c96:	22 e0       	ldi	r18, 0x02	; 2
    2c98:	92 07       	cpc	r25, r18
    2c9a:	29 f4       	brne	.+10     	; 0x2ca6 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2c9c:	62 e0       	ldi	r22, 0x02	; 2
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2ca4:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    2ca6:	80 34       	cpi	r24, 0x40	; 64
    2ca8:	22 e0       	ldi	r18, 0x02	; 2
    2caa:	92 07       	cpc	r25, r18
    2cac:	29 f4       	brne	.+10     	; 0x2cb8 <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2cae:	62 e0       	ldi	r22, 0x02	; 2
    2cb0:	82 e0       	ldi	r24, 0x02	; 2
    2cb2:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2cb6:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    2cb8:	81 15       	cp	r24, r1
    2cba:	23 e0       	ldi	r18, 0x03	; 3
    2cbc:	92 07       	cpc	r25, r18
    2cbe:	29 f4       	brne	.+10     	; 0x2cca <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    2cc0:	64 e0       	ldi	r22, 0x04	; 4
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2cc8:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    2cca:	80 32       	cpi	r24, 0x20	; 32
    2ccc:	23 e0       	ldi	r18, 0x03	; 3
    2cce:	92 07       	cpc	r25, r18
    2cd0:	29 f4       	brne	.+10     	; 0x2cdc <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    2cd2:	64 e0       	ldi	r22, 0x04	; 4
    2cd4:	82 e0       	ldi	r24, 0x02	; 2
    2cd6:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2cda:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    2cdc:	81 15       	cp	r24, r1
    2cde:	28 e0       	ldi	r18, 0x08	; 8
    2ce0:	92 07       	cpc	r25, r18
    2ce2:	29 f4       	brne	.+10     	; 0x2cee <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2ce4:	61 e0       	ldi	r22, 0x01	; 1
    2ce6:	83 e0       	ldi	r24, 0x03	; 3
    2ce8:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2cec:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    2cee:	81 15       	cp	r24, r1
    2cf0:	29 e0       	ldi	r18, 0x09	; 9
    2cf2:	92 07       	cpc	r25, r18
    2cf4:	29 f4       	brne	.+10     	; 0x2d00 <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2cf6:	61 e0       	ldi	r22, 0x01	; 1
    2cf8:	84 e0       	ldi	r24, 0x04	; 4
    2cfa:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2cfe:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    2d00:	81 15       	cp	r24, r1
    2d02:	2a e0       	ldi	r18, 0x0A	; 10
    2d04:	92 07       	cpc	r25, r18
    2d06:	29 f4       	brne	.+10     	; 0x2d12 <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2d08:	61 e0       	ldi	r22, 0x01	; 1
    2d0a:	85 e0       	ldi	r24, 0x05	; 5
    2d0c:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2d10:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    2d12:	81 15       	cp	r24, r1
    2d14:	2b e0       	ldi	r18, 0x0B	; 11
    2d16:	92 07       	cpc	r25, r18
    2d18:	29 f4       	brne	.+10     	; 0x2d24 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    2d1a:	61 e0       	ldi	r22, 0x01	; 1
    2d1c:	86 e0       	ldi	r24, 0x06	; 6
    2d1e:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2d22:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    2d24:	80 34       	cpi	r24, 0x40	; 64
    2d26:	28 e0       	ldi	r18, 0x08	; 8
    2d28:	92 07       	cpc	r25, r18
    2d2a:	29 f4       	brne	.+10     	; 0x2d36 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2d2c:	62 e0       	ldi	r22, 0x02	; 2
    2d2e:	83 e0       	ldi	r24, 0x03	; 3
    2d30:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2d34:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2d36:	80 34       	cpi	r24, 0x40	; 64
    2d38:	29 e0       	ldi	r18, 0x09	; 9
    2d3a:	92 07       	cpc	r25, r18
    2d3c:	29 f4       	brne	.+10     	; 0x2d48 <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2d3e:	62 e0       	ldi	r22, 0x02	; 2
    2d40:	84 e0       	ldi	r24, 0x04	; 4
    2d42:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2d46:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2d48:	80 34       	cpi	r24, 0x40	; 64
    2d4a:	2a e0       	ldi	r18, 0x0A	; 10
    2d4c:	92 07       	cpc	r25, r18
    2d4e:	29 f4       	brne	.+10     	; 0x2d5a <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2d50:	62 e0       	ldi	r22, 0x02	; 2
    2d52:	85 e0       	ldi	r24, 0x05	; 5
    2d54:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2d58:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    2d5a:	80 34       	cpi	r24, 0x40	; 64
    2d5c:	2b e0       	ldi	r18, 0x0B	; 11
    2d5e:	92 07       	cpc	r25, r18
    2d60:	29 f4       	brne	.+10     	; 0x2d6c <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    2d62:	62 e0       	ldi	r22, 0x02	; 2
    2d64:	86 e0       	ldi	r24, 0x06	; 6
    2d66:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2d6a:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2d6c:	80 39       	cpi	r24, 0x90	; 144
    2d6e:	28 e0       	ldi	r18, 0x08	; 8
    2d70:	92 07       	cpc	r25, r18
    2d72:	29 f4       	brne	.+10     	; 0x2d7e <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2d74:	64 e0       	ldi	r22, 0x04	; 4
    2d76:	83 e0       	ldi	r24, 0x03	; 3
    2d78:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2d7c:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2d7e:	80 39       	cpi	r24, 0x90	; 144
    2d80:	29 e0       	ldi	r18, 0x09	; 9
    2d82:	92 07       	cpc	r25, r18
    2d84:	29 f4       	brne	.+10     	; 0x2d90 <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2d86:	64 e0       	ldi	r22, 0x04	; 4
    2d88:	84 e0       	ldi	r24, 0x04	; 4
    2d8a:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2d8e:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    2d90:	80 39       	cpi	r24, 0x90	; 144
    2d92:	2a e0       	ldi	r18, 0x0A	; 10
    2d94:	92 07       	cpc	r25, r18
    2d96:	29 f4       	brne	.+10     	; 0x2da2 <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2d98:	64 e0       	ldi	r22, 0x04	; 4
    2d9a:	85 e0       	ldi	r24, 0x05	; 5
    2d9c:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2da0:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    2da2:	80 39       	cpi	r24, 0x90	; 144
    2da4:	2b e0       	ldi	r18, 0x0B	; 11
    2da6:	92 07       	cpc	r25, r18
    2da8:	29 f4       	brne	.+10     	; 0x2db4 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2daa:	64 e0       	ldi	r22, 0x04	; 4
    2dac:	86 e0       	ldi	r24, 0x06	; 6
    2dae:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2db2:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    2db4:	80 3c       	cpi	r24, 0xC0	; 192
    2db6:	28 e0       	ldi	r18, 0x08	; 8
    2db8:	92 07       	cpc	r25, r18
    2dba:	29 f4       	brne	.+10     	; 0x2dc6 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2dbc:	68 e0       	ldi	r22, 0x08	; 8
    2dbe:	83 e0       	ldi	r24, 0x03	; 3
    2dc0:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2dc4:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    2dc6:	80 3c       	cpi	r24, 0xC0	; 192
    2dc8:	29 e0       	ldi	r18, 0x09	; 9
    2dca:	92 07       	cpc	r25, r18
    2dcc:	29 f4       	brne	.+10     	; 0x2dd8 <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    2dce:	68 e0       	ldi	r22, 0x08	; 8
    2dd0:	84 e0       	ldi	r24, 0x04	; 4
    2dd2:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2dd6:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    2dd8:	80 3c       	cpi	r24, 0xC0	; 192
    2dda:	2a e0       	ldi	r18, 0x0A	; 10
    2ddc:	92 07       	cpc	r25, r18
    2dde:	29 f4       	brne	.+10     	; 0x2dea <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    2de0:	68 e0       	ldi	r22, 0x08	; 8
    2de2:	85 e0       	ldi	r24, 0x05	; 5
    2de4:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2de8:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    2dea:	80 3c       	cpi	r24, 0xC0	; 192
    2dec:	2b e0       	ldi	r18, 0x0B	; 11
    2dee:	92 07       	cpc	r25, r18
    2df0:	29 f4       	brne	.+10     	; 0x2dfc <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    2df2:	68 e0       	ldi	r22, 0x08	; 8
    2df4:	86 e0       	ldi	r24, 0x06	; 6
    2df6:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2dfa:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2dfc:	80 3a       	cpi	r24, 0xA0	; 160
    2dfe:	28 e0       	ldi	r18, 0x08	; 8
    2e00:	92 07       	cpc	r25, r18
    2e02:	29 f4       	brne	.+10     	; 0x2e0e <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2e04:	60 e1       	ldi	r22, 0x10	; 16
    2e06:	83 e0       	ldi	r24, 0x03	; 3
    2e08:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2e0c:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2e0e:	80 3a       	cpi	r24, 0xA0	; 160
    2e10:	29 e0       	ldi	r18, 0x09	; 9
    2e12:	92 07       	cpc	r25, r18
    2e14:	29 f4       	brne	.+10     	; 0x2e20 <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2e16:	60 e1       	ldi	r22, 0x10	; 16
    2e18:	84 e0       	ldi	r24, 0x04	; 4
    2e1a:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2e1e:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    2e20:	80 3a       	cpi	r24, 0xA0	; 160
    2e22:	2a e0       	ldi	r18, 0x0A	; 10
    2e24:	92 07       	cpc	r25, r18
    2e26:	29 f4       	brne	.+10     	; 0x2e32 <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2e28:	60 e1       	ldi	r22, 0x10	; 16
    2e2a:	85 e0       	ldi	r24, 0x05	; 5
    2e2c:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2e30:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    2e32:	80 3a       	cpi	r24, 0xA0	; 160
    2e34:	2b e0       	ldi	r18, 0x0B	; 11
    2e36:	92 07       	cpc	r25, r18
    2e38:	29 f4       	brne	.+10     	; 0x2e44 <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    2e3a:	60 e1       	ldi	r22, 0x10	; 16
    2e3c:	86 e0       	ldi	r24, 0x06	; 6
    2e3e:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2e42:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    2e44:	80 3b       	cpi	r24, 0xB0	; 176
    2e46:	28 e0       	ldi	r18, 0x08	; 8
    2e48:	92 07       	cpc	r25, r18
    2e4a:	29 f4       	brne	.+10     	; 0x2e56 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    2e4c:	60 e2       	ldi	r22, 0x20	; 32
    2e4e:	83 e0       	ldi	r24, 0x03	; 3
    2e50:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2e54:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    2e56:	80 3b       	cpi	r24, 0xB0	; 176
    2e58:	29 e0       	ldi	r18, 0x09	; 9
    2e5a:	92 07       	cpc	r25, r18
    2e5c:	29 f4       	brne	.+10     	; 0x2e68 <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    2e5e:	60 e2       	ldi	r22, 0x20	; 32
    2e60:	84 e0       	ldi	r24, 0x04	; 4
    2e62:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2e66:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    2e68:	80 3b       	cpi	r24, 0xB0	; 176
    2e6a:	2a e0       	ldi	r18, 0x0A	; 10
    2e6c:	92 07       	cpc	r25, r18
    2e6e:	29 f4       	brne	.+10     	; 0x2e7a <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    2e70:	60 e2       	ldi	r22, 0x20	; 32
    2e72:	85 e0       	ldi	r24, 0x05	; 5
    2e74:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2e78:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    2e7a:	80 3b       	cpi	r24, 0xB0	; 176
    2e7c:	2b e0       	ldi	r18, 0x0B	; 11
    2e7e:	92 07       	cpc	r25, r18
    2e80:	29 f4       	brne	.+10     	; 0x2e8c <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    2e82:	60 e2       	ldi	r22, 0x20	; 32
    2e84:	86 e0       	ldi	r24, 0x06	; 6
    2e86:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2e8a:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    2e8c:	80 38       	cpi	r24, 0x80	; 128
    2e8e:	24 e0       	ldi	r18, 0x04	; 4
    2e90:	92 07       	cpc	r25, r18
    2e92:	29 f4       	brne	.+10     	; 0x2e9e <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2e94:	60 e4       	ldi	r22, 0x40	; 64
    2e96:	83 e0       	ldi	r24, 0x03	; 3
    2e98:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2e9c:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    2e9e:	80 39       	cpi	r24, 0x90	; 144
    2ea0:	24 e0       	ldi	r18, 0x04	; 4
    2ea2:	92 07       	cpc	r25, r18
    2ea4:	29 f4       	brne	.+10     	; 0x2eb0 <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    2ea6:	60 e4       	ldi	r22, 0x40	; 64
    2ea8:	84 e0       	ldi	r24, 0x04	; 4
    2eaa:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2eae:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    2eb0:	80 3a       	cpi	r24, 0xA0	; 160
    2eb2:	24 e0       	ldi	r18, 0x04	; 4
    2eb4:	92 07       	cpc	r25, r18
    2eb6:	29 f4       	brne	.+10     	; 0x2ec2 <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2eb8:	60 e4       	ldi	r22, 0x40	; 64
    2eba:	85 e0       	ldi	r24, 0x05	; 5
    2ebc:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2ec0:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    2ec2:	80 3b       	cpi	r24, 0xB0	; 176
    2ec4:	94 40       	sbci	r25, 0x04	; 4
    2ec6:	21 f4       	brne	.+8      	; 0x2ed0 <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    2ec8:	60 e4       	ldi	r22, 0x40	; 64
    2eca:	86 e0       	ldi	r24, 0x06	; 6
    2ecc:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    2ed0:	08 95       	ret

00002ed2 <main>:
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	cd b7       	in	r28, 0x3d	; 61
    2ed8:	de b7       	in	r29, 0x3e	; 62
    2eda:	2a 97       	sbiw	r28, 0x0a	; 10
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0e 94 99 03 	call	0x732	; 0x732 <sysclk_init>
    2ee4:	80 e0       	ldi	r24, 0x00	; 0
    2ee6:	9b e0       	ldi	r25, 0x0B	; 11
    2ee8:	94 de       	rcall	.-728    	; 0x2c12 <sysclk_enable_peripheral_clock>
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	99 e0       	ldi	r25, 0x09	; 9
    2eee:	91 de       	rcall	.-734    	; 0x2c12 <sysclk_enable_peripheral_clock>
    2ef0:	64 e0       	ldi	r22, 0x04	; 4
    2ef2:	86 e0       	ldi	r24, 0x06	; 6
    2ef4:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2ef8:	64 e0       	ldi	r22, 0x04	; 4
    2efa:	84 e0       	ldi	r24, 0x04	; 4
    2efc:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2f00:	68 e0       	ldi	r22, 0x08	; 8
    2f02:	83 e0       	ldi	r24, 0x03	; 3
    2f04:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2f08:	80 ea       	ldi	r24, 0xA0	; 160
    2f0a:	98 e0       	ldi	r25, 0x08	; 8
    2f0c:	82 de       	rcall	.-764    	; 0x2c12 <sysclk_enable_peripheral_clock>
    2f0e:	be dd       	rcall	.-1156   	; 0x2a8c <usart_init>
    2f10:	80 ec       	ldi	r24, 0xC0	; 192
    2f12:	98 e0       	ldi	r25, 0x08	; 8
    2f14:	7e de       	rcall	.-772    	; 0x2c12 <sysclk_enable_peripheral_clock>
    2f16:	c8 da       	rcall	.-2672   	; 0x24a8 <SPI_init>
    2f18:	02 db       	rcall	.-2556   	; 0x251e <ms5607_init>
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	92 e0       	ldi	r25, 0x02	; 2
    2f1e:	79 de       	rcall	.-782    	; 0x2c12 <sysclk_enable_peripheral_clock>
    2f20:	2f dd       	rcall	.-1442   	; 0x2980 <adc_init>
    2f22:	78 db       	rcall	.-2320   	; 0x2614 <get_pressure>
    2f24:	6d 83       	std	Y+5, r22	; 0x05
    2f26:	7e 83       	std	Y+6, r23	; 0x06
    2f28:	8f 83       	std	Y+7, r24	; 0x07
    2f2a:	98 87       	std	Y+8, r25	; 0x08
    2f2c:	31 2c       	mov	r3, r1
    2f2e:	41 2c       	mov	r4, r1
    2f30:	51 2c       	mov	r5, r1
    2f32:	32 01       	movw	r6, r4
    2f34:	0f 2e       	mov	r0, r31
    2f36:	f5 e5       	ldi	r31, 0x55	; 85
    2f38:	2f 2e       	mov	r2, r31
    2f3a:	f0 2d       	mov	r31, r0
    2f3c:	39 86       	std	Y+9, r3	; 0x09
    2f3e:	08 c0       	rjmp	.+16     	; 0x2f50 <main+0x7e>
    2f40:	21 e0       	ldi	r18, 0x01	; 1
    2f42:	29 87       	std	Y+9, r18	; 0x09
    2f44:	05 c0       	rjmp	.+10     	; 0x2f50 <main+0x7e>
    2f46:	82 e0       	ldi	r24, 0x02	; 2
    2f48:	89 87       	std	Y+9, r24	; 0x09
    2f4a:	02 c0       	rjmp	.+4      	; 0x2f50 <main+0x7e>
    2f4c:	92 e0       	ldi	r25, 0x02	; 2
    2f4e:	99 87       	std	Y+9, r25	; 0x09
    2f50:	61 db       	rcall	.-2366   	; 0x2614 <get_pressure>
    2f52:	d6 2e       	mov	r13, r22
    2f54:	37 2e       	mov	r3, r23
    2f56:	c8 2e       	mov	r12, r24
    2f58:	9a 87       	std	Y+10, r25	; 0x0a
    2f5a:	58 dd       	rcall	.-1360   	; 0x2a0c <getTemperature>
    2f5c:	73 d1       	rcall	.+742    	; 0x3244 <__fixunssfsi>
    2f5e:	7b 01       	movw	r14, r22
    2f60:	8c 01       	movw	r16, r24
    2f62:	2d 2d       	mov	r18, r13
    2f64:	33 2d       	mov	r19, r3
    2f66:	4c 2d       	mov	r20, r12
    2f68:	5a 85       	ldd	r21, Y+10	; 0x0a
    2f6a:	6d 81       	ldd	r22, Y+5	; 0x05
    2f6c:	7e 81       	ldd	r23, Y+6	; 0x06
    2f6e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f70:	98 85       	ldd	r25, Y+8	; 0x08
    2f72:	b6 d9       	rcall	.-3220   	; 0x22e0 <Get_altitude>
    2f74:	62 d1       	rcall	.+708    	; 0x323a <__fixsfsi>
    2f76:	4b 01       	movw	r8, r22
    2f78:	5c 01       	movw	r10, r24
    2f7a:	92 d1       	rcall	.+804    	; 0x32a0 <__floatsisf>
    2f7c:	26 e6       	ldi	r18, 0x66	; 102
    2f7e:	36 e6       	ldi	r19, 0x66	; 102
    2f80:	46 e6       	ldi	r20, 0x66	; 102
    2f82:	5f e3       	ldi	r21, 0x3F	; 63
    2f84:	5e d2       	rcall	.+1212   	; 0x3442 <__mulsf3>
    2f86:	69 83       	std	Y+1, r22	; 0x01
    2f88:	7a 83       	std	Y+2, r23	; 0x02
    2f8a:	8b 83       	std	Y+3, r24	; 0x03
    2f8c:	9c 83       	std	Y+4, r25	; 0x04
    2f8e:	c3 01       	movw	r24, r6
    2f90:	b2 01       	movw	r22, r4
    2f92:	86 d1       	rcall	.+780    	; 0x32a0 <__floatsisf>
    2f94:	20 ed       	ldi	r18, 0xD0	; 208
    2f96:	3c ec       	ldi	r19, 0xCC	; 204
    2f98:	4c ec       	ldi	r20, 0xCC	; 204
    2f9a:	5d e3       	ldi	r21, 0x3D	; 61
    2f9c:	52 d2       	rcall	.+1188   	; 0x3442 <__mulsf3>
    2f9e:	9b 01       	movw	r18, r22
    2fa0:	ac 01       	movw	r20, r24
    2fa2:	69 81       	ldd	r22, Y+1	; 0x01
    2fa4:	7a 81       	ldd	r23, Y+2	; 0x02
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2faa:	7b d0       	rcall	.+246    	; 0x30a2 <__addsf3>
    2fac:	46 d1       	rcall	.+652    	; 0x323a <__fixsfsi>
    2fae:	2b 01       	movw	r4, r22
    2fb0:	3c 01       	movw	r6, r24
    2fb2:	2a 85       	ldd	r18, Y+10	; 0x0a
    2fb4:	2f 93       	push	r18
    2fb6:	cf 92       	push	r12
    2fb8:	3f 92       	push	r3
    2fba:	df 92       	push	r13
    2fbc:	84 e1       	ldi	r24, 0x14	; 20
    2fbe:	90 e2       	ldi	r25, 0x20	; 32
    2fc0:	9f 93       	push	r25
    2fc2:	8f 93       	push	r24
    2fc4:	0e 94 85 21 	call	0x430a	; 0x430a <printf>
    2fc8:	66 e5       	ldi	r22, 0x56	; 86
    2fca:	71 e6       	ldi	r23, 0x61	; 97
    2fcc:	81 e5       	ldi	r24, 0x51	; 81
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	15 de       	rcall	.-982    	; 0x2bfc <__portable_avr_delay_cycles>
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	89 85       	ldd	r24, Y+9	; 0x09
    2fe0:	81 11       	cpse	r24, r1
    2fe2:	21 c0       	rjmp	.+66     	; 0x3026 <main+0x154>
    2fe4:	20 92 81 06 	sts	0x0681, r2	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    2fe8:	20 92 85 06 	sts	0x0685, r2	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    2fec:	98 e0       	ldi	r25, 0x08	; 8
    2fee:	90 93 04 06 	sts	0x0604, r25	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    2ff2:	d3 01       	movw	r26, r6
    2ff4:	c2 01       	movw	r24, r4
    2ff6:	88 19       	sub	r24, r8
    2ff8:	99 09       	sbc	r25, r9
    2ffa:	aa 09       	sbc	r26, r10
    2ffc:	bb 09       	sbc	r27, r11
    2ffe:	0a f0       	brmi	.+2      	; 0x3002 <main+0x130>
    3000:	a7 cf       	rjmp	.-178    	; 0x2f50 <main+0x7e>
    3002:	d3 01       	movw	r26, r6
    3004:	c2 01       	movw	r24, r4
    3006:	89 55       	subi	r24, 0x59	; 89
    3008:	92 40       	sbci	r25, 0x02	; 2
    300a:	a1 09       	sbc	r26, r1
    300c:	b1 09       	sbc	r27, r1
    300e:	87 3c       	cpi	r24, 0xC7	; 199
    3010:	91 05       	cpc	r25, r1
    3012:	a1 05       	cpc	r26, r1
    3014:	b1 05       	cpc	r27, r1
    3016:	08 f0       	brcs	.+2      	; 0x301a <main+0x148>
    3018:	9b cf       	rjmp	.-202    	; 0x2f50 <main+0x7e>
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    3020:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    3024:	03 c0       	rjmp	.+6      	; 0x302c <main+0x15a>
    3026:	29 85       	ldd	r18, Y+9	; 0x09
    3028:	21 30       	cpi	r18, 0x01	; 1
    302a:	b9 f4       	brne	.+46     	; 0x305a <main+0x188>
    302c:	86 e2       	ldi	r24, 0x26	; 38
    302e:	90 e2       	ldi	r25, 0x20	; 32
    3030:	0e 94 98 21 	call	0x4330	; 0x4330 <puts>
    3034:	8c e2       	ldi	r24, 0x2C	; 44
    3036:	48 16       	cp	r4, r24
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	58 06       	cpc	r5, r24
    303c:	61 04       	cpc	r6, r1
    303e:	71 04       	cpc	r7, r1
    3040:	0c f0       	brlt	.+2      	; 0x3044 <main+0x172>
    3042:	7e cf       	rjmp	.-260    	; 0x2f40 <main+0x6e>
    3044:	82 e0       	ldi	r24, 0x02	; 2
    3046:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    304a:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    304e:	90 e8       	ldi	r25, 0x80	; 128
    3050:	90 93 01 06 	sts	0x0601, r25	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    3054:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    3058:	04 c0       	rjmp	.+8      	; 0x3062 <main+0x190>
    305a:	29 85       	ldd	r18, Y+9	; 0x09
    305c:	22 30       	cpi	r18, 0x02	; 2
    305e:	09 f0       	breq	.+2      	; 0x3062 <main+0x190>
    3060:	77 cf       	rjmp	.-274    	; 0x2f50 <main+0x7e>
    3062:	86 e3       	ldi	r24, 0x36	; 54
    3064:	90 e2       	ldi	r25, 0x20	; 32
    3066:	0e 94 98 21 	call	0x4330	; 0x4330 <puts>
    306a:	d3 01       	movw	r26, r6
    306c:	c2 01       	movw	r24, r4
    306e:	88 19       	sub	r24, r8
    3070:	99 09       	sbc	r25, r9
    3072:	aa 09       	sbc	r26, r10
    3074:	bb 09       	sbc	r27, r11
    3076:	18 16       	cp	r1, r24
    3078:	19 06       	cpc	r1, r25
    307a:	1a 06       	cpc	r1, r26
    307c:	1b 06       	cpc	r1, r27
    307e:	0c f4       	brge	.+2      	; 0x3082 <main+0x1b0>
    3080:	62 cf       	rjmp	.-316    	; 0x2f46 <main+0x74>
    3082:	84 e6       	ldi	r24, 0x64	; 100
    3084:	88 16       	cp	r8, r24
    3086:	91 04       	cpc	r9, r1
    3088:	a1 04       	cpc	r10, r1
    308a:	b1 04       	cpc	r11, r1
    308c:	0c f0       	brlt	.+2      	; 0x3090 <main+0x1be>
    308e:	5e cf       	rjmp	.-324    	; 0x2f4c <main+0x7a>
    3090:	98 e0       	ldi	r25, 0x08	; 8
    3092:	90 93 01 06 	sts	0x0601, r25	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    3096:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    309a:	23 e0       	ldi	r18, 0x03	; 3
    309c:	29 87       	std	Y+9, r18	; 0x09
    309e:	58 cf       	rjmp	.-336    	; 0x2f50 <main+0x7e>

000030a0 <__subsf3>:
    30a0:	50 58       	subi	r21, 0x80	; 128

000030a2 <__addsf3>:
    30a2:	bb 27       	eor	r27, r27
    30a4:	aa 27       	eor	r26, r26
    30a6:	0e d0       	rcall	.+28     	; 0x30c4 <__addsf3x>
    30a8:	4d c1       	rjmp	.+666    	; 0x3344 <__fp_round>
    30aa:	3e d1       	rcall	.+636    	; 0x3328 <__fp_pscA>
    30ac:	30 f0       	brcs	.+12     	; 0x30ba <__addsf3+0x18>
    30ae:	43 d1       	rcall	.+646    	; 0x3336 <__fp_pscB>
    30b0:	20 f0       	brcs	.+8      	; 0x30ba <__addsf3+0x18>
    30b2:	31 f4       	brne	.+12     	; 0x30c0 <__addsf3+0x1e>
    30b4:	9f 3f       	cpi	r25, 0xFF	; 255
    30b6:	11 f4       	brne	.+4      	; 0x30bc <__addsf3+0x1a>
    30b8:	1e f4       	brtc	.+6      	; 0x30c0 <__addsf3+0x1e>
    30ba:	33 c1       	rjmp	.+614    	; 0x3322 <__fp_nan>
    30bc:	0e f4       	brtc	.+2      	; 0x30c0 <__addsf3+0x1e>
    30be:	e0 95       	com	r30
    30c0:	e7 fb       	bst	r30, 7
    30c2:	29 c1       	rjmp	.+594    	; 0x3316 <__fp_inf>

000030c4 <__addsf3x>:
    30c4:	e9 2f       	mov	r30, r25
    30c6:	4f d1       	rcall	.+670    	; 0x3366 <__fp_split3>
    30c8:	80 f3       	brcs	.-32     	; 0x30aa <__addsf3+0x8>
    30ca:	ba 17       	cp	r27, r26
    30cc:	62 07       	cpc	r22, r18
    30ce:	73 07       	cpc	r23, r19
    30d0:	84 07       	cpc	r24, r20
    30d2:	95 07       	cpc	r25, r21
    30d4:	18 f0       	brcs	.+6      	; 0x30dc <__addsf3x+0x18>
    30d6:	71 f4       	brne	.+28     	; 0x30f4 <__addsf3x+0x30>
    30d8:	9e f5       	brtc	.+102    	; 0x3140 <__addsf3x+0x7c>
    30da:	67 c1       	rjmp	.+718    	; 0x33aa <__fp_zero>
    30dc:	0e f4       	brtc	.+2      	; 0x30e0 <__addsf3x+0x1c>
    30de:	e0 95       	com	r30
    30e0:	0b 2e       	mov	r0, r27
    30e2:	ba 2f       	mov	r27, r26
    30e4:	a0 2d       	mov	r26, r0
    30e6:	0b 01       	movw	r0, r22
    30e8:	b9 01       	movw	r22, r18
    30ea:	90 01       	movw	r18, r0
    30ec:	0c 01       	movw	r0, r24
    30ee:	ca 01       	movw	r24, r20
    30f0:	a0 01       	movw	r20, r0
    30f2:	11 24       	eor	r1, r1
    30f4:	ff 27       	eor	r31, r31
    30f6:	59 1b       	sub	r21, r25
    30f8:	99 f0       	breq	.+38     	; 0x3120 <__addsf3x+0x5c>
    30fa:	59 3f       	cpi	r21, 0xF9	; 249
    30fc:	50 f4       	brcc	.+20     	; 0x3112 <__addsf3x+0x4e>
    30fe:	50 3e       	cpi	r21, 0xE0	; 224
    3100:	68 f1       	brcs	.+90     	; 0x315c <__addsf3x+0x98>
    3102:	1a 16       	cp	r1, r26
    3104:	f0 40       	sbci	r31, 0x00	; 0
    3106:	a2 2f       	mov	r26, r18
    3108:	23 2f       	mov	r18, r19
    310a:	34 2f       	mov	r19, r20
    310c:	44 27       	eor	r20, r20
    310e:	58 5f       	subi	r21, 0xF8	; 248
    3110:	f3 cf       	rjmp	.-26     	; 0x30f8 <__addsf3x+0x34>
    3112:	46 95       	lsr	r20
    3114:	37 95       	ror	r19
    3116:	27 95       	ror	r18
    3118:	a7 95       	ror	r26
    311a:	f0 40       	sbci	r31, 0x00	; 0
    311c:	53 95       	inc	r21
    311e:	c9 f7       	brne	.-14     	; 0x3112 <__addsf3x+0x4e>
    3120:	7e f4       	brtc	.+30     	; 0x3140 <__addsf3x+0x7c>
    3122:	1f 16       	cp	r1, r31
    3124:	ba 0b       	sbc	r27, r26
    3126:	62 0b       	sbc	r22, r18
    3128:	73 0b       	sbc	r23, r19
    312a:	84 0b       	sbc	r24, r20
    312c:	ba f0       	brmi	.+46     	; 0x315c <__addsf3x+0x98>
    312e:	91 50       	subi	r25, 0x01	; 1
    3130:	a1 f0       	breq	.+40     	; 0x315a <__addsf3x+0x96>
    3132:	ff 0f       	add	r31, r31
    3134:	bb 1f       	adc	r27, r27
    3136:	66 1f       	adc	r22, r22
    3138:	77 1f       	adc	r23, r23
    313a:	88 1f       	adc	r24, r24
    313c:	c2 f7       	brpl	.-16     	; 0x312e <__addsf3x+0x6a>
    313e:	0e c0       	rjmp	.+28     	; 0x315c <__addsf3x+0x98>
    3140:	ba 0f       	add	r27, r26
    3142:	62 1f       	adc	r22, r18
    3144:	73 1f       	adc	r23, r19
    3146:	84 1f       	adc	r24, r20
    3148:	48 f4       	brcc	.+18     	; 0x315c <__addsf3x+0x98>
    314a:	87 95       	ror	r24
    314c:	77 95       	ror	r23
    314e:	67 95       	ror	r22
    3150:	b7 95       	ror	r27
    3152:	f7 95       	ror	r31
    3154:	9e 3f       	cpi	r25, 0xFE	; 254
    3156:	08 f0       	brcs	.+2      	; 0x315a <__addsf3x+0x96>
    3158:	b3 cf       	rjmp	.-154    	; 0x30c0 <__addsf3+0x1e>
    315a:	93 95       	inc	r25
    315c:	88 0f       	add	r24, r24
    315e:	08 f0       	brcs	.+2      	; 0x3162 <__addsf3x+0x9e>
    3160:	99 27       	eor	r25, r25
    3162:	ee 0f       	add	r30, r30
    3164:	97 95       	ror	r25
    3166:	87 95       	ror	r24
    3168:	08 95       	ret

0000316a <__divsf3>:
    316a:	0c d0       	rcall	.+24     	; 0x3184 <__divsf3x>
    316c:	eb c0       	rjmp	.+470    	; 0x3344 <__fp_round>
    316e:	e3 d0       	rcall	.+454    	; 0x3336 <__fp_pscB>
    3170:	40 f0       	brcs	.+16     	; 0x3182 <__divsf3+0x18>
    3172:	da d0       	rcall	.+436    	; 0x3328 <__fp_pscA>
    3174:	30 f0       	brcs	.+12     	; 0x3182 <__divsf3+0x18>
    3176:	21 f4       	brne	.+8      	; 0x3180 <__divsf3+0x16>
    3178:	5f 3f       	cpi	r21, 0xFF	; 255
    317a:	19 f0       	breq	.+6      	; 0x3182 <__divsf3+0x18>
    317c:	cc c0       	rjmp	.+408    	; 0x3316 <__fp_inf>
    317e:	51 11       	cpse	r21, r1
    3180:	15 c1       	rjmp	.+554    	; 0x33ac <__fp_szero>
    3182:	cf c0       	rjmp	.+414    	; 0x3322 <__fp_nan>

00003184 <__divsf3x>:
    3184:	f0 d0       	rcall	.+480    	; 0x3366 <__fp_split3>
    3186:	98 f3       	brcs	.-26     	; 0x316e <__divsf3+0x4>

00003188 <__divsf3_pse>:
    3188:	99 23       	and	r25, r25
    318a:	c9 f3       	breq	.-14     	; 0x317e <__divsf3+0x14>
    318c:	55 23       	and	r21, r21
    318e:	b1 f3       	breq	.-20     	; 0x317c <__divsf3+0x12>
    3190:	95 1b       	sub	r25, r21
    3192:	55 0b       	sbc	r21, r21
    3194:	bb 27       	eor	r27, r27
    3196:	aa 27       	eor	r26, r26
    3198:	62 17       	cp	r22, r18
    319a:	73 07       	cpc	r23, r19
    319c:	84 07       	cpc	r24, r20
    319e:	38 f0       	brcs	.+14     	; 0x31ae <__divsf3_pse+0x26>
    31a0:	9f 5f       	subi	r25, 0xFF	; 255
    31a2:	5f 4f       	sbci	r21, 0xFF	; 255
    31a4:	22 0f       	add	r18, r18
    31a6:	33 1f       	adc	r19, r19
    31a8:	44 1f       	adc	r20, r20
    31aa:	aa 1f       	adc	r26, r26
    31ac:	a9 f3       	breq	.-22     	; 0x3198 <__divsf3_pse+0x10>
    31ae:	33 d0       	rcall	.+102    	; 0x3216 <__divsf3_pse+0x8e>
    31b0:	0e 2e       	mov	r0, r30
    31b2:	3a f0       	brmi	.+14     	; 0x31c2 <__divsf3_pse+0x3a>
    31b4:	e0 e8       	ldi	r30, 0x80	; 128
    31b6:	30 d0       	rcall	.+96     	; 0x3218 <__divsf3_pse+0x90>
    31b8:	91 50       	subi	r25, 0x01	; 1
    31ba:	50 40       	sbci	r21, 0x00	; 0
    31bc:	e6 95       	lsr	r30
    31be:	00 1c       	adc	r0, r0
    31c0:	ca f7       	brpl	.-14     	; 0x31b4 <__divsf3_pse+0x2c>
    31c2:	29 d0       	rcall	.+82     	; 0x3216 <__divsf3_pse+0x8e>
    31c4:	fe 2f       	mov	r31, r30
    31c6:	27 d0       	rcall	.+78     	; 0x3216 <__divsf3_pse+0x8e>
    31c8:	66 0f       	add	r22, r22
    31ca:	77 1f       	adc	r23, r23
    31cc:	88 1f       	adc	r24, r24
    31ce:	bb 1f       	adc	r27, r27
    31d0:	26 17       	cp	r18, r22
    31d2:	37 07       	cpc	r19, r23
    31d4:	48 07       	cpc	r20, r24
    31d6:	ab 07       	cpc	r26, r27
    31d8:	b0 e8       	ldi	r27, 0x80	; 128
    31da:	09 f0       	breq	.+2      	; 0x31de <__divsf3_pse+0x56>
    31dc:	bb 0b       	sbc	r27, r27
    31de:	80 2d       	mov	r24, r0
    31e0:	bf 01       	movw	r22, r30
    31e2:	ff 27       	eor	r31, r31
    31e4:	93 58       	subi	r25, 0x83	; 131
    31e6:	5f 4f       	sbci	r21, 0xFF	; 255
    31e8:	2a f0       	brmi	.+10     	; 0x31f4 <__divsf3_pse+0x6c>
    31ea:	9e 3f       	cpi	r25, 0xFE	; 254
    31ec:	51 05       	cpc	r21, r1
    31ee:	68 f0       	brcs	.+26     	; 0x320a <__divsf3_pse+0x82>
    31f0:	92 c0       	rjmp	.+292    	; 0x3316 <__fp_inf>
    31f2:	dc c0       	rjmp	.+440    	; 0x33ac <__fp_szero>
    31f4:	5f 3f       	cpi	r21, 0xFF	; 255
    31f6:	ec f3       	brlt	.-6      	; 0x31f2 <__divsf3_pse+0x6a>
    31f8:	98 3e       	cpi	r25, 0xE8	; 232
    31fa:	dc f3       	brlt	.-10     	; 0x31f2 <__divsf3_pse+0x6a>
    31fc:	86 95       	lsr	r24
    31fe:	77 95       	ror	r23
    3200:	67 95       	ror	r22
    3202:	b7 95       	ror	r27
    3204:	f7 95       	ror	r31
    3206:	9f 5f       	subi	r25, 0xFF	; 255
    3208:	c9 f7       	brne	.-14     	; 0x31fc <__divsf3_pse+0x74>
    320a:	88 0f       	add	r24, r24
    320c:	91 1d       	adc	r25, r1
    320e:	96 95       	lsr	r25
    3210:	87 95       	ror	r24
    3212:	97 f9       	bld	r25, 7
    3214:	08 95       	ret
    3216:	e1 e0       	ldi	r30, 0x01	; 1
    3218:	66 0f       	add	r22, r22
    321a:	77 1f       	adc	r23, r23
    321c:	88 1f       	adc	r24, r24
    321e:	bb 1f       	adc	r27, r27
    3220:	62 17       	cp	r22, r18
    3222:	73 07       	cpc	r23, r19
    3224:	84 07       	cpc	r24, r20
    3226:	ba 07       	cpc	r27, r26
    3228:	20 f0       	brcs	.+8      	; 0x3232 <__divsf3_pse+0xaa>
    322a:	62 1b       	sub	r22, r18
    322c:	73 0b       	sbc	r23, r19
    322e:	84 0b       	sbc	r24, r20
    3230:	ba 0b       	sbc	r27, r26
    3232:	ee 1f       	adc	r30, r30
    3234:	88 f7       	brcc	.-30     	; 0x3218 <__divsf3_pse+0x90>
    3236:	e0 95       	com	r30
    3238:	08 95       	ret

0000323a <__fixsfsi>:
    323a:	04 d0       	rcall	.+8      	; 0x3244 <__fixunssfsi>
    323c:	68 94       	set
    323e:	b1 11       	cpse	r27, r1
    3240:	b5 c0       	rjmp	.+362    	; 0x33ac <__fp_szero>
    3242:	08 95       	ret

00003244 <__fixunssfsi>:
    3244:	98 d0       	rcall	.+304    	; 0x3376 <__fp_splitA>
    3246:	88 f0       	brcs	.+34     	; 0x326a <__fixunssfsi+0x26>
    3248:	9f 57       	subi	r25, 0x7F	; 127
    324a:	90 f0       	brcs	.+36     	; 0x3270 <__fixunssfsi+0x2c>
    324c:	b9 2f       	mov	r27, r25
    324e:	99 27       	eor	r25, r25
    3250:	b7 51       	subi	r27, 0x17	; 23
    3252:	a0 f0       	brcs	.+40     	; 0x327c <__fixunssfsi+0x38>
    3254:	d1 f0       	breq	.+52     	; 0x328a <__fixunssfsi+0x46>
    3256:	66 0f       	add	r22, r22
    3258:	77 1f       	adc	r23, r23
    325a:	88 1f       	adc	r24, r24
    325c:	99 1f       	adc	r25, r25
    325e:	1a f0       	brmi	.+6      	; 0x3266 <__fixunssfsi+0x22>
    3260:	ba 95       	dec	r27
    3262:	c9 f7       	brne	.-14     	; 0x3256 <__fixunssfsi+0x12>
    3264:	12 c0       	rjmp	.+36     	; 0x328a <__fixunssfsi+0x46>
    3266:	b1 30       	cpi	r27, 0x01	; 1
    3268:	81 f0       	breq	.+32     	; 0x328a <__fixunssfsi+0x46>
    326a:	9f d0       	rcall	.+318    	; 0x33aa <__fp_zero>
    326c:	b1 e0       	ldi	r27, 0x01	; 1
    326e:	08 95       	ret
    3270:	9c c0       	rjmp	.+312    	; 0x33aa <__fp_zero>
    3272:	67 2f       	mov	r22, r23
    3274:	78 2f       	mov	r23, r24
    3276:	88 27       	eor	r24, r24
    3278:	b8 5f       	subi	r27, 0xF8	; 248
    327a:	39 f0       	breq	.+14     	; 0x328a <__fixunssfsi+0x46>
    327c:	b9 3f       	cpi	r27, 0xF9	; 249
    327e:	cc f3       	brlt	.-14     	; 0x3272 <__fixunssfsi+0x2e>
    3280:	86 95       	lsr	r24
    3282:	77 95       	ror	r23
    3284:	67 95       	ror	r22
    3286:	b3 95       	inc	r27
    3288:	d9 f7       	brne	.-10     	; 0x3280 <__fixunssfsi+0x3c>
    328a:	3e f4       	brtc	.+14     	; 0x329a <__fixunssfsi+0x56>
    328c:	90 95       	com	r25
    328e:	80 95       	com	r24
    3290:	70 95       	com	r23
    3292:	61 95       	neg	r22
    3294:	7f 4f       	sbci	r23, 0xFF	; 255
    3296:	8f 4f       	sbci	r24, 0xFF	; 255
    3298:	9f 4f       	sbci	r25, 0xFF	; 255
    329a:	08 95       	ret

0000329c <__floatunsisf>:
    329c:	e8 94       	clt
    329e:	09 c0       	rjmp	.+18     	; 0x32b2 <__floatsisf+0x12>

000032a0 <__floatsisf>:
    32a0:	97 fb       	bst	r25, 7
    32a2:	3e f4       	brtc	.+14     	; 0x32b2 <__floatsisf+0x12>
    32a4:	90 95       	com	r25
    32a6:	80 95       	com	r24
    32a8:	70 95       	com	r23
    32aa:	61 95       	neg	r22
    32ac:	7f 4f       	sbci	r23, 0xFF	; 255
    32ae:	8f 4f       	sbci	r24, 0xFF	; 255
    32b0:	9f 4f       	sbci	r25, 0xFF	; 255
    32b2:	99 23       	and	r25, r25
    32b4:	a9 f0       	breq	.+42     	; 0x32e0 <__floatsisf+0x40>
    32b6:	f9 2f       	mov	r31, r25
    32b8:	96 e9       	ldi	r25, 0x96	; 150
    32ba:	bb 27       	eor	r27, r27
    32bc:	93 95       	inc	r25
    32be:	f6 95       	lsr	r31
    32c0:	87 95       	ror	r24
    32c2:	77 95       	ror	r23
    32c4:	67 95       	ror	r22
    32c6:	b7 95       	ror	r27
    32c8:	f1 11       	cpse	r31, r1
    32ca:	f8 cf       	rjmp	.-16     	; 0x32bc <__floatsisf+0x1c>
    32cc:	fa f4       	brpl	.+62     	; 0x330c <__floatsisf+0x6c>
    32ce:	bb 0f       	add	r27, r27
    32d0:	11 f4       	brne	.+4      	; 0x32d6 <__floatsisf+0x36>
    32d2:	60 ff       	sbrs	r22, 0
    32d4:	1b c0       	rjmp	.+54     	; 0x330c <__floatsisf+0x6c>
    32d6:	6f 5f       	subi	r22, 0xFF	; 255
    32d8:	7f 4f       	sbci	r23, 0xFF	; 255
    32da:	8f 4f       	sbci	r24, 0xFF	; 255
    32dc:	9f 4f       	sbci	r25, 0xFF	; 255
    32de:	16 c0       	rjmp	.+44     	; 0x330c <__floatsisf+0x6c>
    32e0:	88 23       	and	r24, r24
    32e2:	11 f0       	breq	.+4      	; 0x32e8 <__floatsisf+0x48>
    32e4:	96 e9       	ldi	r25, 0x96	; 150
    32e6:	11 c0       	rjmp	.+34     	; 0x330a <__floatsisf+0x6a>
    32e8:	77 23       	and	r23, r23
    32ea:	21 f0       	breq	.+8      	; 0x32f4 <__floatsisf+0x54>
    32ec:	9e e8       	ldi	r25, 0x8E	; 142
    32ee:	87 2f       	mov	r24, r23
    32f0:	76 2f       	mov	r23, r22
    32f2:	05 c0       	rjmp	.+10     	; 0x32fe <__floatsisf+0x5e>
    32f4:	66 23       	and	r22, r22
    32f6:	71 f0       	breq	.+28     	; 0x3314 <__floatsisf+0x74>
    32f8:	96 e8       	ldi	r25, 0x86	; 134
    32fa:	86 2f       	mov	r24, r22
    32fc:	70 e0       	ldi	r23, 0x00	; 0
    32fe:	60 e0       	ldi	r22, 0x00	; 0
    3300:	2a f0       	brmi	.+10     	; 0x330c <__floatsisf+0x6c>
    3302:	9a 95       	dec	r25
    3304:	66 0f       	add	r22, r22
    3306:	77 1f       	adc	r23, r23
    3308:	88 1f       	adc	r24, r24
    330a:	da f7       	brpl	.-10     	; 0x3302 <__floatsisf+0x62>
    330c:	88 0f       	add	r24, r24
    330e:	96 95       	lsr	r25
    3310:	87 95       	ror	r24
    3312:	97 f9       	bld	r25, 7
    3314:	08 95       	ret

00003316 <__fp_inf>:
    3316:	97 f9       	bld	r25, 7
    3318:	9f 67       	ori	r25, 0x7F	; 127
    331a:	80 e8       	ldi	r24, 0x80	; 128
    331c:	70 e0       	ldi	r23, 0x00	; 0
    331e:	60 e0       	ldi	r22, 0x00	; 0
    3320:	08 95       	ret

00003322 <__fp_nan>:
    3322:	9f ef       	ldi	r25, 0xFF	; 255
    3324:	80 ec       	ldi	r24, 0xC0	; 192
    3326:	08 95       	ret

00003328 <__fp_pscA>:
    3328:	00 24       	eor	r0, r0
    332a:	0a 94       	dec	r0
    332c:	16 16       	cp	r1, r22
    332e:	17 06       	cpc	r1, r23
    3330:	18 06       	cpc	r1, r24
    3332:	09 06       	cpc	r0, r25
    3334:	08 95       	ret

00003336 <__fp_pscB>:
    3336:	00 24       	eor	r0, r0
    3338:	0a 94       	dec	r0
    333a:	12 16       	cp	r1, r18
    333c:	13 06       	cpc	r1, r19
    333e:	14 06       	cpc	r1, r20
    3340:	05 06       	cpc	r0, r21
    3342:	08 95       	ret

00003344 <__fp_round>:
    3344:	09 2e       	mov	r0, r25
    3346:	03 94       	inc	r0
    3348:	00 0c       	add	r0, r0
    334a:	11 f4       	brne	.+4      	; 0x3350 <__fp_round+0xc>
    334c:	88 23       	and	r24, r24
    334e:	52 f0       	brmi	.+20     	; 0x3364 <__fp_round+0x20>
    3350:	bb 0f       	add	r27, r27
    3352:	40 f4       	brcc	.+16     	; 0x3364 <__fp_round+0x20>
    3354:	bf 2b       	or	r27, r31
    3356:	11 f4       	brne	.+4      	; 0x335c <__fp_round+0x18>
    3358:	60 ff       	sbrs	r22, 0
    335a:	04 c0       	rjmp	.+8      	; 0x3364 <__fp_round+0x20>
    335c:	6f 5f       	subi	r22, 0xFF	; 255
    335e:	7f 4f       	sbci	r23, 0xFF	; 255
    3360:	8f 4f       	sbci	r24, 0xFF	; 255
    3362:	9f 4f       	sbci	r25, 0xFF	; 255
    3364:	08 95       	ret

00003366 <__fp_split3>:
    3366:	57 fd       	sbrc	r21, 7
    3368:	90 58       	subi	r25, 0x80	; 128
    336a:	44 0f       	add	r20, r20
    336c:	55 1f       	adc	r21, r21
    336e:	59 f0       	breq	.+22     	; 0x3386 <__fp_splitA+0x10>
    3370:	5f 3f       	cpi	r21, 0xFF	; 255
    3372:	71 f0       	breq	.+28     	; 0x3390 <__fp_splitA+0x1a>
    3374:	47 95       	ror	r20

00003376 <__fp_splitA>:
    3376:	88 0f       	add	r24, r24
    3378:	97 fb       	bst	r25, 7
    337a:	99 1f       	adc	r25, r25
    337c:	61 f0       	breq	.+24     	; 0x3396 <__fp_splitA+0x20>
    337e:	9f 3f       	cpi	r25, 0xFF	; 255
    3380:	79 f0       	breq	.+30     	; 0x33a0 <__fp_splitA+0x2a>
    3382:	87 95       	ror	r24
    3384:	08 95       	ret
    3386:	12 16       	cp	r1, r18
    3388:	13 06       	cpc	r1, r19
    338a:	14 06       	cpc	r1, r20
    338c:	55 1f       	adc	r21, r21
    338e:	f2 cf       	rjmp	.-28     	; 0x3374 <__fp_split3+0xe>
    3390:	46 95       	lsr	r20
    3392:	f1 df       	rcall	.-30     	; 0x3376 <__fp_splitA>
    3394:	08 c0       	rjmp	.+16     	; 0x33a6 <__fp_splitA+0x30>
    3396:	16 16       	cp	r1, r22
    3398:	17 06       	cpc	r1, r23
    339a:	18 06       	cpc	r1, r24
    339c:	99 1f       	adc	r25, r25
    339e:	f1 cf       	rjmp	.-30     	; 0x3382 <__fp_splitA+0xc>
    33a0:	86 95       	lsr	r24
    33a2:	71 05       	cpc	r23, r1
    33a4:	61 05       	cpc	r22, r1
    33a6:	08 94       	sec
    33a8:	08 95       	ret

000033aa <__fp_zero>:
    33aa:	e8 94       	clt

000033ac <__fp_szero>:
    33ac:	bb 27       	eor	r27, r27
    33ae:	66 27       	eor	r22, r22
    33b0:	77 27       	eor	r23, r23
    33b2:	cb 01       	movw	r24, r22
    33b4:	97 f9       	bld	r25, 7
    33b6:	08 95       	ret
    33b8:	0e f0       	brts	.+2      	; 0x33bc <__fp_szero+0x10>
    33ba:	23 c1       	rjmp	.+582    	; 0x3602 <__fp_mpack>
    33bc:	b2 cf       	rjmp	.-156    	; 0x3322 <__fp_nan>
    33be:	68 94       	set
    33c0:	aa cf       	rjmp	.-172    	; 0x3316 <__fp_inf>

000033c2 <log>:
    33c2:	d9 df       	rcall	.-78     	; 0x3376 <__fp_splitA>
    33c4:	c8 f3       	brcs	.-14     	; 0x33b8 <__fp_szero+0xc>
    33c6:	99 23       	and	r25, r25
    33c8:	d1 f3       	breq	.-12     	; 0x33be <__fp_szero+0x12>
    33ca:	c6 f3       	brts	.-16     	; 0x33bc <__fp_szero+0x10>
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	1f 93       	push	r17
    33d2:	0f 93       	push	r16
    33d4:	ff 92       	push	r15
    33d6:	c9 2f       	mov	r28, r25
    33d8:	dd 27       	eor	r29, r29
    33da:	88 23       	and	r24, r24
    33dc:	2a f0       	brmi	.+10     	; 0x33e8 <log+0x26>
    33de:	21 97       	sbiw	r28, 0x01	; 1
    33e0:	66 0f       	add	r22, r22
    33e2:	77 1f       	adc	r23, r23
    33e4:	88 1f       	adc	r24, r24
    33e6:	da f7       	brpl	.-10     	; 0x33de <log+0x1c>
    33e8:	20 e0       	ldi	r18, 0x00	; 0
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	40 e8       	ldi	r20, 0x80	; 128
    33ee:	5f eb       	ldi	r21, 0xBF	; 191
    33f0:	9f e3       	ldi	r25, 0x3F	; 63
    33f2:	88 39       	cpi	r24, 0x98	; 152
    33f4:	20 f0       	brcs	.+8      	; 0x33fe <log+0x3c>
    33f6:	80 3e       	cpi	r24, 0xE0	; 224
    33f8:	30 f0       	brcs	.+12     	; 0x3406 <log+0x44>
    33fa:	21 96       	adiw	r28, 0x01	; 1
    33fc:	8f 77       	andi	r24, 0x7F	; 127
    33fe:	51 de       	rcall	.-862    	; 0x30a2 <__addsf3>
    3400:	ea e7       	ldi	r30, 0x7A	; 122
    3402:	f2 e0       	ldi	r31, 0x02	; 2
    3404:	03 c0       	rjmp	.+6      	; 0x340c <log+0x4a>
    3406:	4d de       	rcall	.-870    	; 0x30a2 <__addsf3>
    3408:	e7 ea       	ldi	r30, 0xA7	; 167
    340a:	f2 e0       	ldi	r31, 0x02	; 2
    340c:	08 d1       	rcall	.+528    	; 0x361e <__fp_powser>
    340e:	8b 01       	movw	r16, r22
    3410:	be 01       	movw	r22, r28
    3412:	ec 01       	movw	r28, r24
    3414:	fb 2e       	mov	r15, r27
    3416:	6f 57       	subi	r22, 0x7F	; 127
    3418:	71 09       	sbc	r23, r1
    341a:	75 95       	asr	r23
    341c:	77 1f       	adc	r23, r23
    341e:	88 0b       	sbc	r24, r24
    3420:	99 0b       	sbc	r25, r25
    3422:	3e df       	rcall	.-388    	; 0x32a0 <__floatsisf>
    3424:	28 e1       	ldi	r18, 0x18	; 24
    3426:	32 e7       	ldi	r19, 0x72	; 114
    3428:	41 e3       	ldi	r20, 0x31	; 49
    342a:	5f e3       	ldi	r21, 0x3F	; 63
    342c:	16 d0       	rcall	.+44     	; 0x345a <__mulsf3x>
    342e:	af 2d       	mov	r26, r15
    3430:	98 01       	movw	r18, r16
    3432:	ae 01       	movw	r20, r28
    3434:	ff 90       	pop	r15
    3436:	0f 91       	pop	r16
    3438:	1f 91       	pop	r17
    343a:	cf 91       	pop	r28
    343c:	df 91       	pop	r29
    343e:	42 de       	rcall	.-892    	; 0x30c4 <__addsf3x>
    3440:	81 cf       	rjmp	.-254    	; 0x3344 <__fp_round>

00003442 <__mulsf3>:
    3442:	0b d0       	rcall	.+22     	; 0x345a <__mulsf3x>
    3444:	7f cf       	rjmp	.-258    	; 0x3344 <__fp_round>
    3446:	70 df       	rcall	.-288    	; 0x3328 <__fp_pscA>
    3448:	28 f0       	brcs	.+10     	; 0x3454 <__mulsf3+0x12>
    344a:	75 df       	rcall	.-278    	; 0x3336 <__fp_pscB>
    344c:	18 f0       	brcs	.+6      	; 0x3454 <__mulsf3+0x12>
    344e:	95 23       	and	r25, r21
    3450:	09 f0       	breq	.+2      	; 0x3454 <__mulsf3+0x12>
    3452:	61 cf       	rjmp	.-318    	; 0x3316 <__fp_inf>
    3454:	66 cf       	rjmp	.-308    	; 0x3322 <__fp_nan>
    3456:	11 24       	eor	r1, r1
    3458:	a9 cf       	rjmp	.-174    	; 0x33ac <__fp_szero>

0000345a <__mulsf3x>:
    345a:	85 df       	rcall	.-246    	; 0x3366 <__fp_split3>
    345c:	a0 f3       	brcs	.-24     	; 0x3446 <__mulsf3+0x4>

0000345e <__mulsf3_pse>:
    345e:	95 9f       	mul	r25, r21
    3460:	d1 f3       	breq	.-12     	; 0x3456 <__mulsf3+0x14>
    3462:	95 0f       	add	r25, r21
    3464:	50 e0       	ldi	r21, 0x00	; 0
    3466:	55 1f       	adc	r21, r21
    3468:	62 9f       	mul	r22, r18
    346a:	f0 01       	movw	r30, r0
    346c:	72 9f       	mul	r23, r18
    346e:	bb 27       	eor	r27, r27
    3470:	f0 0d       	add	r31, r0
    3472:	b1 1d       	adc	r27, r1
    3474:	63 9f       	mul	r22, r19
    3476:	aa 27       	eor	r26, r26
    3478:	f0 0d       	add	r31, r0
    347a:	b1 1d       	adc	r27, r1
    347c:	aa 1f       	adc	r26, r26
    347e:	64 9f       	mul	r22, r20
    3480:	66 27       	eor	r22, r22
    3482:	b0 0d       	add	r27, r0
    3484:	a1 1d       	adc	r26, r1
    3486:	66 1f       	adc	r22, r22
    3488:	82 9f       	mul	r24, r18
    348a:	22 27       	eor	r18, r18
    348c:	b0 0d       	add	r27, r0
    348e:	a1 1d       	adc	r26, r1
    3490:	62 1f       	adc	r22, r18
    3492:	73 9f       	mul	r23, r19
    3494:	b0 0d       	add	r27, r0
    3496:	a1 1d       	adc	r26, r1
    3498:	62 1f       	adc	r22, r18
    349a:	83 9f       	mul	r24, r19
    349c:	a0 0d       	add	r26, r0
    349e:	61 1d       	adc	r22, r1
    34a0:	22 1f       	adc	r18, r18
    34a2:	74 9f       	mul	r23, r20
    34a4:	33 27       	eor	r19, r19
    34a6:	a0 0d       	add	r26, r0
    34a8:	61 1d       	adc	r22, r1
    34aa:	23 1f       	adc	r18, r19
    34ac:	84 9f       	mul	r24, r20
    34ae:	60 0d       	add	r22, r0
    34b0:	21 1d       	adc	r18, r1
    34b2:	82 2f       	mov	r24, r18
    34b4:	76 2f       	mov	r23, r22
    34b6:	6a 2f       	mov	r22, r26
    34b8:	11 24       	eor	r1, r1
    34ba:	9f 57       	subi	r25, 0x7F	; 127
    34bc:	50 40       	sbci	r21, 0x00	; 0
    34be:	8a f0       	brmi	.+34     	; 0x34e2 <__mulsf3_pse+0x84>
    34c0:	e1 f0       	breq	.+56     	; 0x34fa <__mulsf3_pse+0x9c>
    34c2:	88 23       	and	r24, r24
    34c4:	4a f0       	brmi	.+18     	; 0x34d8 <__mulsf3_pse+0x7a>
    34c6:	ee 0f       	add	r30, r30
    34c8:	ff 1f       	adc	r31, r31
    34ca:	bb 1f       	adc	r27, r27
    34cc:	66 1f       	adc	r22, r22
    34ce:	77 1f       	adc	r23, r23
    34d0:	88 1f       	adc	r24, r24
    34d2:	91 50       	subi	r25, 0x01	; 1
    34d4:	50 40       	sbci	r21, 0x00	; 0
    34d6:	a9 f7       	brne	.-22     	; 0x34c2 <__mulsf3_pse+0x64>
    34d8:	9e 3f       	cpi	r25, 0xFE	; 254
    34da:	51 05       	cpc	r21, r1
    34dc:	70 f0       	brcs	.+28     	; 0x34fa <__mulsf3_pse+0x9c>
    34de:	1b cf       	rjmp	.-458    	; 0x3316 <__fp_inf>
    34e0:	65 cf       	rjmp	.-310    	; 0x33ac <__fp_szero>
    34e2:	5f 3f       	cpi	r21, 0xFF	; 255
    34e4:	ec f3       	brlt	.-6      	; 0x34e0 <__mulsf3_pse+0x82>
    34e6:	98 3e       	cpi	r25, 0xE8	; 232
    34e8:	dc f3       	brlt	.-10     	; 0x34e0 <__mulsf3_pse+0x82>
    34ea:	86 95       	lsr	r24
    34ec:	77 95       	ror	r23
    34ee:	67 95       	ror	r22
    34f0:	b7 95       	ror	r27
    34f2:	f7 95       	ror	r31
    34f4:	e7 95       	ror	r30
    34f6:	9f 5f       	subi	r25, 0xFF	; 255
    34f8:	c1 f7       	brne	.-16     	; 0x34ea <__mulsf3_pse+0x8c>
    34fa:	fe 2b       	or	r31, r30
    34fc:	88 0f       	add	r24, r24
    34fe:	91 1d       	adc	r25, r1
    3500:	96 95       	lsr	r25
    3502:	87 95       	ror	r24
    3504:	97 f9       	bld	r25, 7
    3506:	08 95       	ret

00003508 <pow>:
    3508:	fa 01       	movw	r30, r20
    350a:	ee 0f       	add	r30, r30
    350c:	ff 1f       	adc	r31, r31
    350e:	30 96       	adiw	r30, 0x00	; 0
    3510:	21 05       	cpc	r18, r1
    3512:	31 05       	cpc	r19, r1
    3514:	99 f1       	breq	.+102    	; 0x357c <pow+0x74>
    3516:	61 15       	cp	r22, r1
    3518:	71 05       	cpc	r23, r1
    351a:	61 f4       	brne	.+24     	; 0x3534 <pow+0x2c>
    351c:	80 38       	cpi	r24, 0x80	; 128
    351e:	bf e3       	ldi	r27, 0x3F	; 63
    3520:	9b 07       	cpc	r25, r27
    3522:	49 f1       	breq	.+82     	; 0x3576 <pow+0x6e>
    3524:	68 94       	set
    3526:	90 38       	cpi	r25, 0x80	; 128
    3528:	81 05       	cpc	r24, r1
    352a:	61 f0       	breq	.+24     	; 0x3544 <pow+0x3c>
    352c:	80 38       	cpi	r24, 0x80	; 128
    352e:	bf ef       	ldi	r27, 0xFF	; 255
    3530:	9b 07       	cpc	r25, r27
    3532:	41 f0       	breq	.+16     	; 0x3544 <pow+0x3c>
    3534:	99 23       	and	r25, r25
    3536:	42 f5       	brpl	.+80     	; 0x3588 <pow+0x80>
    3538:	ff 3f       	cpi	r31, 0xFF	; 255
    353a:	e1 05       	cpc	r30, r1
    353c:	31 05       	cpc	r19, r1
    353e:	21 05       	cpc	r18, r1
    3540:	11 f1       	breq	.+68     	; 0x3586 <pow+0x7e>
    3542:	e8 94       	clt
    3544:	08 94       	sec
    3546:	e7 95       	ror	r30
    3548:	d9 01       	movw	r26, r18
    354a:	aa 23       	and	r26, r26
    354c:	29 f4       	brne	.+10     	; 0x3558 <pow+0x50>
    354e:	ab 2f       	mov	r26, r27
    3550:	be 2f       	mov	r27, r30
    3552:	f8 5f       	subi	r31, 0xF8	; 248
    3554:	d0 f3       	brcs	.-12     	; 0x354a <pow+0x42>
    3556:	10 c0       	rjmp	.+32     	; 0x3578 <pow+0x70>
    3558:	ff 5f       	subi	r31, 0xFF	; 255
    355a:	70 f4       	brcc	.+28     	; 0x3578 <pow+0x70>
    355c:	a6 95       	lsr	r26
    355e:	e0 f7       	brcc	.-8      	; 0x3558 <pow+0x50>
    3560:	f7 39       	cpi	r31, 0x97	; 151
    3562:	50 f0       	brcs	.+20     	; 0x3578 <pow+0x70>
    3564:	19 f0       	breq	.+6      	; 0x356c <pow+0x64>
    3566:	ff 3a       	cpi	r31, 0xAF	; 175
    3568:	38 f4       	brcc	.+14     	; 0x3578 <pow+0x70>
    356a:	9f 77       	andi	r25, 0x7F	; 127
    356c:	9f 93       	push	r25
    356e:	0c d0       	rcall	.+24     	; 0x3588 <pow+0x80>
    3570:	0f 90       	pop	r0
    3572:	07 fc       	sbrc	r0, 7
    3574:	90 58       	subi	r25, 0x80	; 128
    3576:	08 95       	ret
    3578:	3e f0       	brts	.+14     	; 0x3588 <pow+0x80>
    357a:	d3 ce       	rjmp	.-602    	; 0x3322 <__fp_nan>
    357c:	60 e0       	ldi	r22, 0x00	; 0
    357e:	70 e0       	ldi	r23, 0x00	; 0
    3580:	80 e8       	ldi	r24, 0x80	; 128
    3582:	9f e3       	ldi	r25, 0x3F	; 63
    3584:	08 95       	ret
    3586:	4f e7       	ldi	r20, 0x7F	; 127
    3588:	9f 77       	andi	r25, 0x7F	; 127
    358a:	5f 93       	push	r21
    358c:	4f 93       	push	r20
    358e:	3f 93       	push	r19
    3590:	2f 93       	push	r18
    3592:	17 df       	rcall	.-466    	; 0x33c2 <log>
    3594:	2f 91       	pop	r18
    3596:	3f 91       	pop	r19
    3598:	4f 91       	pop	r20
    359a:	5f 91       	pop	r21
    359c:	52 df       	rcall	.-348    	; 0x3442 <__mulsf3>
    359e:	05 c0       	rjmp	.+10     	; 0x35aa <exp>
    35a0:	19 f4       	brne	.+6      	; 0x35a8 <pow+0xa0>
    35a2:	0e f0       	brts	.+2      	; 0x35a6 <pow+0x9e>
    35a4:	b8 ce       	rjmp	.-656    	; 0x3316 <__fp_inf>
    35a6:	01 cf       	rjmp	.-510    	; 0x33aa <__fp_zero>
    35a8:	bc ce       	rjmp	.-648    	; 0x3322 <__fp_nan>

000035aa <exp>:
    35aa:	e5 de       	rcall	.-566    	; 0x3376 <__fp_splitA>
    35ac:	c8 f3       	brcs	.-14     	; 0x35a0 <pow+0x98>
    35ae:	96 38       	cpi	r25, 0x86	; 134
    35b0:	c0 f7       	brcc	.-16     	; 0x35a2 <pow+0x9a>
    35b2:	07 f8       	bld	r0, 7
    35b4:	0f 92       	push	r0
    35b6:	e8 94       	clt
    35b8:	2b e3       	ldi	r18, 0x3B	; 59
    35ba:	3a ea       	ldi	r19, 0xAA	; 170
    35bc:	48 eb       	ldi	r20, 0xB8	; 184
    35be:	5f e7       	ldi	r21, 0x7F	; 127
    35c0:	4e df       	rcall	.-356    	; 0x345e <__mulsf3_pse>
    35c2:	0f 92       	push	r0
    35c4:	0f 92       	push	r0
    35c6:	0f 92       	push	r0
    35c8:	4d b7       	in	r20, 0x3d	; 61
    35ca:	5e b7       	in	r21, 0x3e	; 62
    35cc:	0f 92       	push	r0
    35ce:	89 d0       	rcall	.+274    	; 0x36e2 <modf>
    35d0:	e4 ed       	ldi	r30, 0xD4	; 212
    35d2:	f2 e0       	ldi	r31, 0x02	; 2
    35d4:	24 d0       	rcall	.+72     	; 0x361e <__fp_powser>
    35d6:	4f 91       	pop	r20
    35d8:	5f 91       	pop	r21
    35da:	ef 91       	pop	r30
    35dc:	ff 91       	pop	r31
    35de:	e5 95       	asr	r30
    35e0:	ee 1f       	adc	r30, r30
    35e2:	ff 1f       	adc	r31, r31
    35e4:	49 f0       	breq	.+18     	; 0x35f8 <exp+0x4e>
    35e6:	fe 57       	subi	r31, 0x7E	; 126
    35e8:	e0 68       	ori	r30, 0x80	; 128
    35ea:	44 27       	eor	r20, r20
    35ec:	ee 0f       	add	r30, r30
    35ee:	44 1f       	adc	r20, r20
    35f0:	fa 95       	dec	r31
    35f2:	e1 f7       	brne	.-8      	; 0x35ec <exp+0x42>
    35f4:	41 95       	neg	r20
    35f6:	55 0b       	sbc	r21, r21
    35f8:	40 d0       	rcall	.+128    	; 0x367a <ldexp>
    35fa:	0f 90       	pop	r0
    35fc:	07 fe       	sbrs	r0, 7
    35fe:	34 c0       	rjmp	.+104    	; 0x3668 <inverse>
    3600:	08 95       	ret

00003602 <__fp_mpack>:
    3602:	9f 3f       	cpi	r25, 0xFF	; 255
    3604:	31 f0       	breq	.+12     	; 0x3612 <__fp_mpack_finite+0xc>

00003606 <__fp_mpack_finite>:
    3606:	91 50       	subi	r25, 0x01	; 1
    3608:	20 f4       	brcc	.+8      	; 0x3612 <__fp_mpack_finite+0xc>
    360a:	87 95       	ror	r24
    360c:	77 95       	ror	r23
    360e:	67 95       	ror	r22
    3610:	b7 95       	ror	r27
    3612:	88 0f       	add	r24, r24
    3614:	91 1d       	adc	r25, r1
    3616:	96 95       	lsr	r25
    3618:	87 95       	ror	r24
    361a:	97 f9       	bld	r25, 7
    361c:	08 95       	ret

0000361e <__fp_powser>:
    361e:	df 93       	push	r29
    3620:	cf 93       	push	r28
    3622:	1f 93       	push	r17
    3624:	0f 93       	push	r16
    3626:	ff 92       	push	r15
    3628:	ef 92       	push	r14
    362a:	df 92       	push	r13
    362c:	7b 01       	movw	r14, r22
    362e:	8c 01       	movw	r16, r24
    3630:	68 94       	set
    3632:	05 c0       	rjmp	.+10     	; 0x363e <__fp_powser+0x20>
    3634:	da 2e       	mov	r13, r26
    3636:	ef 01       	movw	r28, r30
    3638:	10 df       	rcall	.-480    	; 0x345a <__mulsf3x>
    363a:	fe 01       	movw	r30, r28
    363c:	e8 94       	clt
    363e:	a5 91       	lpm	r26, Z+
    3640:	25 91       	lpm	r18, Z+
    3642:	35 91       	lpm	r19, Z+
    3644:	45 91       	lpm	r20, Z+
    3646:	55 91       	lpm	r21, Z+
    3648:	ae f3       	brts	.-22     	; 0x3634 <__fp_powser+0x16>
    364a:	ef 01       	movw	r28, r30
    364c:	3b dd       	rcall	.-1418   	; 0x30c4 <__addsf3x>
    364e:	fe 01       	movw	r30, r28
    3650:	97 01       	movw	r18, r14
    3652:	a8 01       	movw	r20, r16
    3654:	da 94       	dec	r13
    3656:	79 f7       	brne	.-34     	; 0x3636 <__fp_powser+0x18>
    3658:	df 90       	pop	r13
    365a:	ef 90       	pop	r14
    365c:	ff 90       	pop	r15
    365e:	0f 91       	pop	r16
    3660:	1f 91       	pop	r17
    3662:	cf 91       	pop	r28
    3664:	df 91       	pop	r29
    3666:	08 95       	ret

00003668 <inverse>:
    3668:	9b 01       	movw	r18, r22
    366a:	ac 01       	movw	r20, r24
    366c:	60 e0       	ldi	r22, 0x00	; 0
    366e:	70 e0       	ldi	r23, 0x00	; 0
    3670:	80 e8       	ldi	r24, 0x80	; 128
    3672:	9f e3       	ldi	r25, 0x3F	; 63
    3674:	7a cd       	rjmp	.-1292   	; 0x316a <__divsf3>
    3676:	4f ce       	rjmp	.-866    	; 0x3316 <__fp_inf>
    3678:	c4 cf       	rjmp	.-120    	; 0x3602 <__fp_mpack>

0000367a <ldexp>:
    367a:	7d de       	rcall	.-774    	; 0x3376 <__fp_splitA>
    367c:	e8 f3       	brcs	.-6      	; 0x3678 <inverse+0x10>
    367e:	99 23       	and	r25, r25
    3680:	d9 f3       	breq	.-10     	; 0x3678 <inverse+0x10>
    3682:	94 0f       	add	r25, r20
    3684:	51 1d       	adc	r21, r1
    3686:	bb f3       	brvs	.-18     	; 0x3676 <inverse+0xe>
    3688:	91 50       	subi	r25, 0x01	; 1
    368a:	50 40       	sbci	r21, 0x00	; 0
    368c:	94 f0       	brlt	.+36     	; 0x36b2 <ldexp+0x38>
    368e:	59 f0       	breq	.+22     	; 0x36a6 <ldexp+0x2c>
    3690:	88 23       	and	r24, r24
    3692:	32 f0       	brmi	.+12     	; 0x36a0 <ldexp+0x26>
    3694:	66 0f       	add	r22, r22
    3696:	77 1f       	adc	r23, r23
    3698:	88 1f       	adc	r24, r24
    369a:	91 50       	subi	r25, 0x01	; 1
    369c:	50 40       	sbci	r21, 0x00	; 0
    369e:	c1 f7       	brne	.-16     	; 0x3690 <ldexp+0x16>
    36a0:	9e 3f       	cpi	r25, 0xFE	; 254
    36a2:	51 05       	cpc	r21, r1
    36a4:	44 f7       	brge	.-48     	; 0x3676 <inverse+0xe>
    36a6:	88 0f       	add	r24, r24
    36a8:	91 1d       	adc	r25, r1
    36aa:	96 95       	lsr	r25
    36ac:	87 95       	ror	r24
    36ae:	97 f9       	bld	r25, 7
    36b0:	08 95       	ret
    36b2:	5f 3f       	cpi	r21, 0xFF	; 255
    36b4:	ac f0       	brlt	.+42     	; 0x36e0 <ldexp+0x66>
    36b6:	98 3e       	cpi	r25, 0xE8	; 232
    36b8:	9c f0       	brlt	.+38     	; 0x36e0 <ldexp+0x66>
    36ba:	bb 27       	eor	r27, r27
    36bc:	86 95       	lsr	r24
    36be:	77 95       	ror	r23
    36c0:	67 95       	ror	r22
    36c2:	b7 95       	ror	r27
    36c4:	08 f4       	brcc	.+2      	; 0x36c8 <ldexp+0x4e>
    36c6:	b1 60       	ori	r27, 0x01	; 1
    36c8:	93 95       	inc	r25
    36ca:	c1 f7       	brne	.-16     	; 0x36bc <ldexp+0x42>
    36cc:	bb 0f       	add	r27, r27
    36ce:	58 f7       	brcc	.-42     	; 0x36a6 <ldexp+0x2c>
    36d0:	11 f4       	brne	.+4      	; 0x36d6 <ldexp+0x5c>
    36d2:	60 ff       	sbrs	r22, 0
    36d4:	e8 cf       	rjmp	.-48     	; 0x36a6 <ldexp+0x2c>
    36d6:	6f 5f       	subi	r22, 0xFF	; 255
    36d8:	7f 4f       	sbci	r23, 0xFF	; 255
    36da:	8f 4f       	sbci	r24, 0xFF	; 255
    36dc:	9f 4f       	sbci	r25, 0xFF	; 255
    36de:	e3 cf       	rjmp	.-58     	; 0x36a6 <ldexp+0x2c>
    36e0:	65 ce       	rjmp	.-822    	; 0x33ac <__fp_szero>

000036e2 <modf>:
    36e2:	fa 01       	movw	r30, r20
    36e4:	dc 01       	movw	r26, r24
    36e6:	aa 0f       	add	r26, r26
    36e8:	bb 1f       	adc	r27, r27
    36ea:	9b 01       	movw	r18, r22
    36ec:	ac 01       	movw	r20, r24
    36ee:	bf 57       	subi	r27, 0x7F	; 127
    36f0:	28 f4       	brcc	.+10     	; 0x36fc <modf+0x1a>
    36f2:	22 27       	eor	r18, r18
    36f4:	33 27       	eor	r19, r19
    36f6:	44 27       	eor	r20, r20
    36f8:	50 78       	andi	r21, 0x80	; 128
    36fa:	1f c0       	rjmp	.+62     	; 0x373a <modf+0x58>
    36fc:	b7 51       	subi	r27, 0x17	; 23
    36fe:	88 f4       	brcc	.+34     	; 0x3722 <modf+0x40>
    3700:	ab 2f       	mov	r26, r27
    3702:	00 24       	eor	r0, r0
    3704:	46 95       	lsr	r20
    3706:	37 95       	ror	r19
    3708:	27 95       	ror	r18
    370a:	01 1c       	adc	r0, r1
    370c:	a3 95       	inc	r26
    370e:	d2 f3       	brmi	.-12     	; 0x3704 <modf+0x22>
    3710:	00 20       	and	r0, r0
    3712:	69 f0       	breq	.+26     	; 0x372e <modf+0x4c>
    3714:	22 0f       	add	r18, r18
    3716:	33 1f       	adc	r19, r19
    3718:	44 1f       	adc	r20, r20
    371a:	b3 95       	inc	r27
    371c:	da f3       	brmi	.-10     	; 0x3714 <modf+0x32>
    371e:	0d d0       	rcall	.+26     	; 0x373a <modf+0x58>
    3720:	bf cc       	rjmp	.-1666   	; 0x30a0 <__subsf3>
    3722:	61 30       	cpi	r22, 0x01	; 1
    3724:	71 05       	cpc	r23, r1
    3726:	a0 e8       	ldi	r26, 0x80	; 128
    3728:	8a 07       	cpc	r24, r26
    372a:	b9 46       	sbci	r27, 0x69	; 105
    372c:	30 f4       	brcc	.+12     	; 0x373a <modf+0x58>
    372e:	9b 01       	movw	r18, r22
    3730:	ac 01       	movw	r20, r24
    3732:	66 27       	eor	r22, r22
    3734:	77 27       	eor	r23, r23
    3736:	88 27       	eor	r24, r24
    3738:	90 78       	andi	r25, 0x80	; 128
    373a:	30 96       	adiw	r30, 0x00	; 0
    373c:	21 f0       	breq	.+8      	; 0x3746 <modf+0x64>
    373e:	20 83       	st	Z, r18
    3740:	31 83       	std	Z+1, r19	; 0x01
    3742:	42 83       	std	Z+2, r20	; 0x02
    3744:	53 83       	std	Z+3, r21	; 0x03
    3746:	08 95       	ret

00003748 <vfprintf>:
    3748:	2f 92       	push	r2
    374a:	3f 92       	push	r3
    374c:	4f 92       	push	r4
    374e:	5f 92       	push	r5
    3750:	6f 92       	push	r6
    3752:	7f 92       	push	r7
    3754:	8f 92       	push	r8
    3756:	9f 92       	push	r9
    3758:	af 92       	push	r10
    375a:	bf 92       	push	r11
    375c:	cf 92       	push	r12
    375e:	df 92       	push	r13
    3760:	ef 92       	push	r14
    3762:	ff 92       	push	r15
    3764:	0f 93       	push	r16
    3766:	1f 93       	push	r17
    3768:	cf 93       	push	r28
    376a:	df 93       	push	r29
    376c:	cd b7       	in	r28, 0x3d	; 61
    376e:	de b7       	in	r29, 0x3e	; 62
    3770:	60 97       	sbiw	r28, 0x10	; 16
    3772:	cd bf       	out	0x3d, r28	; 61
    3774:	de bf       	out	0x3e, r29	; 62
    3776:	7c 01       	movw	r14, r24
    3778:	1b 01       	movw	r2, r22
    377a:	6a 01       	movw	r12, r20
    377c:	fc 01       	movw	r30, r24
    377e:	16 82       	std	Z+6, r1	; 0x06
    3780:	17 82       	std	Z+7, r1	; 0x07
    3782:	83 81       	ldd	r24, Z+3	; 0x03
    3784:	81 ff       	sbrs	r24, 1
    3786:	2a c3       	rjmp	.+1620   	; 0x3ddc <vfprintf+0x694>
    3788:	9e 01       	movw	r18, r28
    378a:	2f 5f       	subi	r18, 0xFF	; 255
    378c:	3f 4f       	sbci	r19, 0xFF	; 255
    378e:	39 01       	movw	r6, r18
    3790:	f7 01       	movw	r30, r14
    3792:	93 81       	ldd	r25, Z+3	; 0x03
    3794:	f1 01       	movw	r30, r2
    3796:	93 fd       	sbrc	r25, 3
    3798:	85 91       	lpm	r24, Z+
    379a:	93 ff       	sbrs	r25, 3
    379c:	81 91       	ld	r24, Z+
    379e:	1f 01       	movw	r2, r30
    37a0:	88 23       	and	r24, r24
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <vfprintf+0x5e>
    37a4:	17 c3       	rjmp	.+1582   	; 0x3dd4 <vfprintf+0x68c>
    37a6:	85 32       	cpi	r24, 0x25	; 37
    37a8:	39 f4       	brne	.+14     	; 0x37b8 <vfprintf+0x70>
    37aa:	93 fd       	sbrc	r25, 3
    37ac:	85 91       	lpm	r24, Z+
    37ae:	93 ff       	sbrs	r25, 3
    37b0:	81 91       	ld	r24, Z+
    37b2:	1f 01       	movw	r2, r30
    37b4:	85 32       	cpi	r24, 0x25	; 37
    37b6:	31 f4       	brne	.+12     	; 0x37c4 <vfprintf+0x7c>
    37b8:	b7 01       	movw	r22, r14
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	6a d5       	rcall	.+2772   	; 0x4292 <fputc>
    37be:	56 01       	movw	r10, r12
    37c0:	65 01       	movw	r12, r10
    37c2:	e6 cf       	rjmp	.-52     	; 0x3790 <vfprintf+0x48>
    37c4:	10 e0       	ldi	r17, 0x00	; 0
    37c6:	51 2c       	mov	r5, r1
    37c8:	91 2c       	mov	r9, r1
    37ca:	ff e1       	ldi	r31, 0x1F	; 31
    37cc:	f9 15       	cp	r31, r9
    37ce:	d8 f0       	brcs	.+54     	; 0x3806 <vfprintf+0xbe>
    37d0:	8b 32       	cpi	r24, 0x2B	; 43
    37d2:	79 f0       	breq	.+30     	; 0x37f2 <vfprintf+0xaa>
    37d4:	38 f4       	brcc	.+14     	; 0x37e4 <vfprintf+0x9c>
    37d6:	80 32       	cpi	r24, 0x20	; 32
    37d8:	79 f0       	breq	.+30     	; 0x37f8 <vfprintf+0xb0>
    37da:	83 32       	cpi	r24, 0x23	; 35
    37dc:	a1 f4       	brne	.+40     	; 0x3806 <vfprintf+0xbe>
    37de:	f9 2d       	mov	r31, r9
    37e0:	f0 61       	ori	r31, 0x10	; 16
    37e2:	2e c0       	rjmp	.+92     	; 0x3840 <vfprintf+0xf8>
    37e4:	8d 32       	cpi	r24, 0x2D	; 45
    37e6:	61 f0       	breq	.+24     	; 0x3800 <vfprintf+0xb8>
    37e8:	80 33       	cpi	r24, 0x30	; 48
    37ea:	69 f4       	brne	.+26     	; 0x3806 <vfprintf+0xbe>
    37ec:	29 2d       	mov	r18, r9
    37ee:	21 60       	ori	r18, 0x01	; 1
    37f0:	2d c0       	rjmp	.+90     	; 0x384c <vfprintf+0x104>
    37f2:	39 2d       	mov	r19, r9
    37f4:	32 60       	ori	r19, 0x02	; 2
    37f6:	93 2e       	mov	r9, r19
    37f8:	89 2d       	mov	r24, r9
    37fa:	84 60       	ori	r24, 0x04	; 4
    37fc:	98 2e       	mov	r9, r24
    37fe:	2a c0       	rjmp	.+84     	; 0x3854 <vfprintf+0x10c>
    3800:	e9 2d       	mov	r30, r9
    3802:	e8 60       	ori	r30, 0x08	; 8
    3804:	15 c0       	rjmp	.+42     	; 0x3830 <vfprintf+0xe8>
    3806:	97 fc       	sbrc	r9, 7
    3808:	2d c0       	rjmp	.+90     	; 0x3864 <vfprintf+0x11c>
    380a:	20 ed       	ldi	r18, 0xD0	; 208
    380c:	28 0f       	add	r18, r24
    380e:	2a 30       	cpi	r18, 0x0A	; 10
    3810:	88 f4       	brcc	.+34     	; 0x3834 <vfprintf+0xec>
    3812:	96 fe       	sbrs	r9, 6
    3814:	06 c0       	rjmp	.+12     	; 0x3822 <vfprintf+0xda>
    3816:	3a e0       	ldi	r19, 0x0A	; 10
    3818:	13 9f       	mul	r17, r19
    381a:	20 0d       	add	r18, r0
    381c:	11 24       	eor	r1, r1
    381e:	12 2f       	mov	r17, r18
    3820:	19 c0       	rjmp	.+50     	; 0x3854 <vfprintf+0x10c>
    3822:	8a e0       	ldi	r24, 0x0A	; 10
    3824:	58 9e       	mul	r5, r24
    3826:	20 0d       	add	r18, r0
    3828:	11 24       	eor	r1, r1
    382a:	52 2e       	mov	r5, r18
    382c:	e9 2d       	mov	r30, r9
    382e:	e0 62       	ori	r30, 0x20	; 32
    3830:	9e 2e       	mov	r9, r30
    3832:	10 c0       	rjmp	.+32     	; 0x3854 <vfprintf+0x10c>
    3834:	8e 32       	cpi	r24, 0x2E	; 46
    3836:	31 f4       	brne	.+12     	; 0x3844 <vfprintf+0xfc>
    3838:	96 fc       	sbrc	r9, 6
    383a:	cc c2       	rjmp	.+1432   	; 0x3dd4 <vfprintf+0x68c>
    383c:	f9 2d       	mov	r31, r9
    383e:	f0 64       	ori	r31, 0x40	; 64
    3840:	9f 2e       	mov	r9, r31
    3842:	08 c0       	rjmp	.+16     	; 0x3854 <vfprintf+0x10c>
    3844:	8c 36       	cpi	r24, 0x6C	; 108
    3846:	21 f4       	brne	.+8      	; 0x3850 <vfprintf+0x108>
    3848:	29 2d       	mov	r18, r9
    384a:	20 68       	ori	r18, 0x80	; 128
    384c:	92 2e       	mov	r9, r18
    384e:	02 c0       	rjmp	.+4      	; 0x3854 <vfprintf+0x10c>
    3850:	88 36       	cpi	r24, 0x68	; 104
    3852:	41 f4       	brne	.+16     	; 0x3864 <vfprintf+0x11c>
    3854:	f1 01       	movw	r30, r2
    3856:	93 fd       	sbrc	r25, 3
    3858:	85 91       	lpm	r24, Z+
    385a:	93 ff       	sbrs	r25, 3
    385c:	81 91       	ld	r24, Z+
    385e:	1f 01       	movw	r2, r30
    3860:	81 11       	cpse	r24, r1
    3862:	b3 cf       	rjmp	.-154    	; 0x37ca <vfprintf+0x82>
    3864:	9b eb       	ldi	r25, 0xBB	; 187
    3866:	98 0f       	add	r25, r24
    3868:	93 30       	cpi	r25, 0x03	; 3
    386a:	20 f4       	brcc	.+8      	; 0x3874 <vfprintf+0x12c>
    386c:	99 2d       	mov	r25, r9
    386e:	90 61       	ori	r25, 0x10	; 16
    3870:	80 5e       	subi	r24, 0xE0	; 224
    3872:	07 c0       	rjmp	.+14     	; 0x3882 <vfprintf+0x13a>
    3874:	9b e9       	ldi	r25, 0x9B	; 155
    3876:	98 0f       	add	r25, r24
    3878:	93 30       	cpi	r25, 0x03	; 3
    387a:	08 f0       	brcs	.+2      	; 0x387e <vfprintf+0x136>
    387c:	59 c1       	rjmp	.+690    	; 0x3b30 <vfprintf+0x3e8>
    387e:	99 2d       	mov	r25, r9
    3880:	9f 7e       	andi	r25, 0xEF	; 239
    3882:	96 ff       	sbrs	r25, 6
    3884:	16 e0       	ldi	r17, 0x06	; 6
    3886:	9f 73       	andi	r25, 0x3F	; 63
    3888:	99 2e       	mov	r9, r25
    388a:	85 36       	cpi	r24, 0x65	; 101
    388c:	19 f4       	brne	.+6      	; 0x3894 <vfprintf+0x14c>
    388e:	90 64       	ori	r25, 0x40	; 64
    3890:	99 2e       	mov	r9, r25
    3892:	08 c0       	rjmp	.+16     	; 0x38a4 <vfprintf+0x15c>
    3894:	86 36       	cpi	r24, 0x66	; 102
    3896:	21 f4       	brne	.+8      	; 0x38a0 <vfprintf+0x158>
    3898:	39 2f       	mov	r19, r25
    389a:	30 68       	ori	r19, 0x80	; 128
    389c:	93 2e       	mov	r9, r19
    389e:	02 c0       	rjmp	.+4      	; 0x38a4 <vfprintf+0x15c>
    38a0:	11 11       	cpse	r17, r1
    38a2:	11 50       	subi	r17, 0x01	; 1
    38a4:	97 fe       	sbrs	r9, 7
    38a6:	07 c0       	rjmp	.+14     	; 0x38b6 <vfprintf+0x16e>
    38a8:	1c 33       	cpi	r17, 0x3C	; 60
    38aa:	50 f4       	brcc	.+20     	; 0x38c0 <vfprintf+0x178>
    38ac:	44 24       	eor	r4, r4
    38ae:	43 94       	inc	r4
    38b0:	41 0e       	add	r4, r17
    38b2:	27 e0       	ldi	r18, 0x07	; 7
    38b4:	0b c0       	rjmp	.+22     	; 0x38cc <vfprintf+0x184>
    38b6:	18 30       	cpi	r17, 0x08	; 8
    38b8:	38 f0       	brcs	.+14     	; 0x38c8 <vfprintf+0x180>
    38ba:	27 e0       	ldi	r18, 0x07	; 7
    38bc:	17 e0       	ldi	r17, 0x07	; 7
    38be:	05 c0       	rjmp	.+10     	; 0x38ca <vfprintf+0x182>
    38c0:	27 e0       	ldi	r18, 0x07	; 7
    38c2:	9c e3       	ldi	r25, 0x3C	; 60
    38c4:	49 2e       	mov	r4, r25
    38c6:	02 c0       	rjmp	.+4      	; 0x38cc <vfprintf+0x184>
    38c8:	21 2f       	mov	r18, r17
    38ca:	41 2c       	mov	r4, r1
    38cc:	56 01       	movw	r10, r12
    38ce:	84 e0       	ldi	r24, 0x04	; 4
    38d0:	a8 0e       	add	r10, r24
    38d2:	b1 1c       	adc	r11, r1
    38d4:	f6 01       	movw	r30, r12
    38d6:	60 81       	ld	r22, Z
    38d8:	71 81       	ldd	r23, Z+1	; 0x01
    38da:	82 81       	ldd	r24, Z+2	; 0x02
    38dc:	93 81       	ldd	r25, Z+3	; 0x03
    38de:	04 2d       	mov	r16, r4
    38e0:	a3 01       	movw	r20, r6
    38e2:	9f d3       	rcall	.+1854   	; 0x4022 <__ftoa_engine>
    38e4:	6c 01       	movw	r12, r24
    38e6:	f9 81       	ldd	r31, Y+1	; 0x01
    38e8:	fc 87       	std	Y+12, r31	; 0x0c
    38ea:	f0 ff       	sbrs	r31, 0
    38ec:	02 c0       	rjmp	.+4      	; 0x38f2 <vfprintf+0x1aa>
    38ee:	f3 ff       	sbrs	r31, 3
    38f0:	06 c0       	rjmp	.+12     	; 0x38fe <vfprintf+0x1b6>
    38f2:	91 fc       	sbrc	r9, 1
    38f4:	06 c0       	rjmp	.+12     	; 0x3902 <vfprintf+0x1ba>
    38f6:	92 fe       	sbrs	r9, 2
    38f8:	06 c0       	rjmp	.+12     	; 0x3906 <vfprintf+0x1be>
    38fa:	00 e2       	ldi	r16, 0x20	; 32
    38fc:	05 c0       	rjmp	.+10     	; 0x3908 <vfprintf+0x1c0>
    38fe:	0d e2       	ldi	r16, 0x2D	; 45
    3900:	03 c0       	rjmp	.+6      	; 0x3908 <vfprintf+0x1c0>
    3902:	0b e2       	ldi	r16, 0x2B	; 43
    3904:	01 c0       	rjmp	.+2      	; 0x3908 <vfprintf+0x1c0>
    3906:	00 e0       	ldi	r16, 0x00	; 0
    3908:	8c 85       	ldd	r24, Y+12	; 0x0c
    390a:	8c 70       	andi	r24, 0x0C	; 12
    390c:	19 f0       	breq	.+6      	; 0x3914 <vfprintf+0x1cc>
    390e:	01 11       	cpse	r16, r1
    3910:	43 c2       	rjmp	.+1158   	; 0x3d98 <vfprintf+0x650>
    3912:	80 c2       	rjmp	.+1280   	; 0x3e14 <vfprintf+0x6cc>
    3914:	97 fe       	sbrs	r9, 7
    3916:	10 c0       	rjmp	.+32     	; 0x3938 <vfprintf+0x1f0>
    3918:	4c 0c       	add	r4, r12
    391a:	fc 85       	ldd	r31, Y+12	; 0x0c
    391c:	f4 ff       	sbrs	r31, 4
    391e:	04 c0       	rjmp	.+8      	; 0x3928 <vfprintf+0x1e0>
    3920:	8a 81       	ldd	r24, Y+2	; 0x02
    3922:	81 33       	cpi	r24, 0x31	; 49
    3924:	09 f4       	brne	.+2      	; 0x3928 <vfprintf+0x1e0>
    3926:	4a 94       	dec	r4
    3928:	14 14       	cp	r1, r4
    392a:	74 f5       	brge	.+92     	; 0x3988 <vfprintf+0x240>
    392c:	28 e0       	ldi	r18, 0x08	; 8
    392e:	24 15       	cp	r18, r4
    3930:	78 f5       	brcc	.+94     	; 0x3990 <vfprintf+0x248>
    3932:	88 e0       	ldi	r24, 0x08	; 8
    3934:	48 2e       	mov	r4, r24
    3936:	2c c0       	rjmp	.+88     	; 0x3990 <vfprintf+0x248>
    3938:	96 fc       	sbrc	r9, 6
    393a:	2a c0       	rjmp	.+84     	; 0x3990 <vfprintf+0x248>
    393c:	81 2f       	mov	r24, r17
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	8c 15       	cp	r24, r12
    3942:	9d 05       	cpc	r25, r13
    3944:	9c f0       	brlt	.+38     	; 0x396c <vfprintf+0x224>
    3946:	3c ef       	ldi	r19, 0xFC	; 252
    3948:	c3 16       	cp	r12, r19
    394a:	3f ef       	ldi	r19, 0xFF	; 255
    394c:	d3 06       	cpc	r13, r19
    394e:	74 f0       	brlt	.+28     	; 0x396c <vfprintf+0x224>
    3950:	89 2d       	mov	r24, r9
    3952:	80 68       	ori	r24, 0x80	; 128
    3954:	98 2e       	mov	r9, r24
    3956:	0a c0       	rjmp	.+20     	; 0x396c <vfprintf+0x224>
    3958:	e2 e0       	ldi	r30, 0x02	; 2
    395a:	f0 e0       	ldi	r31, 0x00	; 0
    395c:	ec 0f       	add	r30, r28
    395e:	fd 1f       	adc	r31, r29
    3960:	e1 0f       	add	r30, r17
    3962:	f1 1d       	adc	r31, r1
    3964:	80 81       	ld	r24, Z
    3966:	80 33       	cpi	r24, 0x30	; 48
    3968:	19 f4       	brne	.+6      	; 0x3970 <vfprintf+0x228>
    396a:	11 50       	subi	r17, 0x01	; 1
    396c:	11 11       	cpse	r17, r1
    396e:	f4 cf       	rjmp	.-24     	; 0x3958 <vfprintf+0x210>
    3970:	97 fe       	sbrs	r9, 7
    3972:	0e c0       	rjmp	.+28     	; 0x3990 <vfprintf+0x248>
    3974:	44 24       	eor	r4, r4
    3976:	43 94       	inc	r4
    3978:	41 0e       	add	r4, r17
    397a:	81 2f       	mov	r24, r17
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	c8 16       	cp	r12, r24
    3980:	d9 06       	cpc	r13, r25
    3982:	2c f4       	brge	.+10     	; 0x398e <vfprintf+0x246>
    3984:	1c 19       	sub	r17, r12
    3986:	04 c0       	rjmp	.+8      	; 0x3990 <vfprintf+0x248>
    3988:	44 24       	eor	r4, r4
    398a:	43 94       	inc	r4
    398c:	01 c0       	rjmp	.+2      	; 0x3990 <vfprintf+0x248>
    398e:	10 e0       	ldi	r17, 0x00	; 0
    3990:	97 fe       	sbrs	r9, 7
    3992:	06 c0       	rjmp	.+12     	; 0x39a0 <vfprintf+0x258>
    3994:	1c 14       	cp	r1, r12
    3996:	1d 04       	cpc	r1, r13
    3998:	34 f4       	brge	.+12     	; 0x39a6 <vfprintf+0x25e>
    399a:	c6 01       	movw	r24, r12
    399c:	01 96       	adiw	r24, 0x01	; 1
    399e:	05 c0       	rjmp	.+10     	; 0x39aa <vfprintf+0x262>
    39a0:	85 e0       	ldi	r24, 0x05	; 5
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	02 c0       	rjmp	.+4      	; 0x39aa <vfprintf+0x262>
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	90 e0       	ldi	r25, 0x00	; 0
    39aa:	01 11       	cpse	r16, r1
    39ac:	01 96       	adiw	r24, 0x01	; 1
    39ae:	11 23       	and	r17, r17
    39b0:	31 f0       	breq	.+12     	; 0x39be <vfprintf+0x276>
    39b2:	21 2f       	mov	r18, r17
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	2f 5f       	subi	r18, 0xFF	; 255
    39b8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ba:	82 0f       	add	r24, r18
    39bc:	93 1f       	adc	r25, r19
    39be:	25 2d       	mov	r18, r5
    39c0:	30 e0       	ldi	r19, 0x00	; 0
    39c2:	82 17       	cp	r24, r18
    39c4:	93 07       	cpc	r25, r19
    39c6:	14 f4       	brge	.+4      	; 0x39cc <vfprintf+0x284>
    39c8:	58 1a       	sub	r5, r24
    39ca:	01 c0       	rjmp	.+2      	; 0x39ce <vfprintf+0x286>
    39cc:	51 2c       	mov	r5, r1
    39ce:	89 2d       	mov	r24, r9
    39d0:	89 70       	andi	r24, 0x09	; 9
    39d2:	41 f4       	brne	.+16     	; 0x39e4 <vfprintf+0x29c>
    39d4:	55 20       	and	r5, r5
    39d6:	31 f0       	breq	.+12     	; 0x39e4 <vfprintf+0x29c>
    39d8:	b7 01       	movw	r22, r14
    39da:	80 e2       	ldi	r24, 0x20	; 32
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	59 d4       	rcall	.+2226   	; 0x4292 <fputc>
    39e0:	5a 94       	dec	r5
    39e2:	f8 cf       	rjmp	.-16     	; 0x39d4 <vfprintf+0x28c>
    39e4:	00 23       	and	r16, r16
    39e6:	21 f0       	breq	.+8      	; 0x39f0 <vfprintf+0x2a8>
    39e8:	b7 01       	movw	r22, r14
    39ea:	80 2f       	mov	r24, r16
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	51 d4       	rcall	.+2210   	; 0x4292 <fputc>
    39f0:	93 fc       	sbrc	r9, 3
    39f2:	08 c0       	rjmp	.+16     	; 0x3a04 <vfprintf+0x2bc>
    39f4:	55 20       	and	r5, r5
    39f6:	31 f0       	breq	.+12     	; 0x3a04 <vfprintf+0x2bc>
    39f8:	b7 01       	movw	r22, r14
    39fa:	80 e3       	ldi	r24, 0x30	; 48
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	49 d4       	rcall	.+2194   	; 0x4292 <fputc>
    3a00:	5a 94       	dec	r5
    3a02:	f8 cf       	rjmp	.-16     	; 0x39f4 <vfprintf+0x2ac>
    3a04:	97 fe       	sbrs	r9, 7
    3a06:	4a c0       	rjmp	.+148    	; 0x3a9c <vfprintf+0x354>
    3a08:	46 01       	movw	r8, r12
    3a0a:	d7 fe       	sbrs	r13, 7
    3a0c:	02 c0       	rjmp	.+4      	; 0x3a12 <vfprintf+0x2ca>
    3a0e:	81 2c       	mov	r8, r1
    3a10:	91 2c       	mov	r9, r1
    3a12:	c6 01       	movw	r24, r12
    3a14:	88 19       	sub	r24, r8
    3a16:	99 09       	sbc	r25, r9
    3a18:	f3 01       	movw	r30, r6
    3a1a:	e8 0f       	add	r30, r24
    3a1c:	f9 1f       	adc	r31, r25
    3a1e:	ed 87       	std	Y+13, r30	; 0x0d
    3a20:	fe 87       	std	Y+14, r31	; 0x0e
    3a22:	96 01       	movw	r18, r12
    3a24:	24 19       	sub	r18, r4
    3a26:	31 09       	sbc	r19, r1
    3a28:	2f 87       	std	Y+15, r18	; 0x0f
    3a2a:	38 8b       	std	Y+16, r19	; 0x10
    3a2c:	01 2f       	mov	r16, r17
    3a2e:	10 e0       	ldi	r17, 0x00	; 0
    3a30:	11 95       	neg	r17
    3a32:	01 95       	neg	r16
    3a34:	11 09       	sbc	r17, r1
    3a36:	3f ef       	ldi	r19, 0xFF	; 255
    3a38:	83 16       	cp	r8, r19
    3a3a:	93 06       	cpc	r9, r19
    3a3c:	21 f4       	brne	.+8      	; 0x3a46 <vfprintf+0x2fe>
    3a3e:	b7 01       	movw	r22, r14
    3a40:	8e e2       	ldi	r24, 0x2E	; 46
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	26 d4       	rcall	.+2124   	; 0x4292 <fputc>
    3a46:	c8 14       	cp	r12, r8
    3a48:	d9 04       	cpc	r13, r9
    3a4a:	4c f0       	brlt	.+18     	; 0x3a5e <vfprintf+0x316>
    3a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a4e:	98 89       	ldd	r25, Y+16	; 0x10
    3a50:	88 15       	cp	r24, r8
    3a52:	99 05       	cpc	r25, r9
    3a54:	24 f4       	brge	.+8      	; 0x3a5e <vfprintf+0x316>
    3a56:	ed 85       	ldd	r30, Y+13	; 0x0d
    3a58:	fe 85       	ldd	r31, Y+14	; 0x0e
    3a5a:	81 81       	ldd	r24, Z+1	; 0x01
    3a5c:	01 c0       	rjmp	.+2      	; 0x3a60 <vfprintf+0x318>
    3a5e:	80 e3       	ldi	r24, 0x30	; 48
    3a60:	f1 e0       	ldi	r31, 0x01	; 1
    3a62:	8f 1a       	sub	r8, r31
    3a64:	91 08       	sbc	r9, r1
    3a66:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a68:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a6a:	2f 5f       	subi	r18, 0xFF	; 255
    3a6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a6e:	2d 87       	std	Y+13, r18	; 0x0d
    3a70:	3e 87       	std	Y+14, r19	; 0x0e
    3a72:	80 16       	cp	r8, r16
    3a74:	91 06       	cpc	r9, r17
    3a76:	24 f0       	brlt	.+8      	; 0x3a80 <vfprintf+0x338>
    3a78:	b7 01       	movw	r22, r14
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	0a d4       	rcall	.+2068   	; 0x4292 <fputc>
    3a7e:	db cf       	rjmp	.-74     	; 0x3a36 <vfprintf+0x2ee>
    3a80:	c8 14       	cp	r12, r8
    3a82:	d9 04       	cpc	r13, r9
    3a84:	41 f4       	brne	.+16     	; 0x3a96 <vfprintf+0x34e>
    3a86:	9a 81       	ldd	r25, Y+2	; 0x02
    3a88:	96 33       	cpi	r25, 0x36	; 54
    3a8a:	20 f4       	brcc	.+8      	; 0x3a94 <vfprintf+0x34c>
    3a8c:	95 33       	cpi	r25, 0x35	; 53
    3a8e:	19 f4       	brne	.+6      	; 0x3a96 <vfprintf+0x34e>
    3a90:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a92:	34 ff       	sbrs	r19, 4
    3a94:	81 e3       	ldi	r24, 0x31	; 49
    3a96:	b7 01       	movw	r22, r14
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	48 c0       	rjmp	.+144    	; 0x3b2c <vfprintf+0x3e4>
    3a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a9e:	81 33       	cpi	r24, 0x31	; 49
    3aa0:	19 f0       	breq	.+6      	; 0x3aa8 <vfprintf+0x360>
    3aa2:	9c 85       	ldd	r25, Y+12	; 0x0c
    3aa4:	9f 7e       	andi	r25, 0xEF	; 239
    3aa6:	9c 87       	std	Y+12, r25	; 0x0c
    3aa8:	b7 01       	movw	r22, r14
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	f2 d3       	rcall	.+2020   	; 0x4292 <fputc>
    3aae:	11 11       	cpse	r17, r1
    3ab0:	05 c0       	rjmp	.+10     	; 0x3abc <vfprintf+0x374>
    3ab2:	94 fc       	sbrc	r9, 4
    3ab4:	16 c0       	rjmp	.+44     	; 0x3ae2 <vfprintf+0x39a>
    3ab6:	85 e6       	ldi	r24, 0x65	; 101
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	15 c0       	rjmp	.+42     	; 0x3ae6 <vfprintf+0x39e>
    3abc:	b7 01       	movw	r22, r14
    3abe:	8e e2       	ldi	r24, 0x2E	; 46
    3ac0:	90 e0       	ldi	r25, 0x00	; 0
    3ac2:	e7 d3       	rcall	.+1998   	; 0x4292 <fputc>
    3ac4:	1e 5f       	subi	r17, 0xFE	; 254
    3ac6:	82 e0       	ldi	r24, 0x02	; 2
    3ac8:	01 e0       	ldi	r16, 0x01	; 1
    3aca:	08 0f       	add	r16, r24
    3acc:	f3 01       	movw	r30, r6
    3ace:	e8 0f       	add	r30, r24
    3ad0:	f1 1d       	adc	r31, r1
    3ad2:	80 81       	ld	r24, Z
    3ad4:	b7 01       	movw	r22, r14
    3ad6:	90 e0       	ldi	r25, 0x00	; 0
    3ad8:	dc d3       	rcall	.+1976   	; 0x4292 <fputc>
    3ada:	80 2f       	mov	r24, r16
    3adc:	01 13       	cpse	r16, r17
    3ade:	f4 cf       	rjmp	.-24     	; 0x3ac8 <vfprintf+0x380>
    3ae0:	e8 cf       	rjmp	.-48     	; 0x3ab2 <vfprintf+0x36a>
    3ae2:	85 e4       	ldi	r24, 0x45	; 69
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	b7 01       	movw	r22, r14
    3ae8:	d4 d3       	rcall	.+1960   	; 0x4292 <fputc>
    3aea:	d7 fc       	sbrc	r13, 7
    3aec:	06 c0       	rjmp	.+12     	; 0x3afa <vfprintf+0x3b2>
    3aee:	c1 14       	cp	r12, r1
    3af0:	d1 04       	cpc	r13, r1
    3af2:	41 f4       	brne	.+16     	; 0x3b04 <vfprintf+0x3bc>
    3af4:	ec 85       	ldd	r30, Y+12	; 0x0c
    3af6:	e4 ff       	sbrs	r30, 4
    3af8:	05 c0       	rjmp	.+10     	; 0x3b04 <vfprintf+0x3bc>
    3afa:	d1 94       	neg	r13
    3afc:	c1 94       	neg	r12
    3afe:	d1 08       	sbc	r13, r1
    3b00:	8d e2       	ldi	r24, 0x2D	; 45
    3b02:	01 c0       	rjmp	.+2      	; 0x3b06 <vfprintf+0x3be>
    3b04:	8b e2       	ldi	r24, 0x2B	; 43
    3b06:	b7 01       	movw	r22, r14
    3b08:	90 e0       	ldi	r25, 0x00	; 0
    3b0a:	c3 d3       	rcall	.+1926   	; 0x4292 <fputc>
    3b0c:	80 e3       	ldi	r24, 0x30	; 48
    3b0e:	2a e0       	ldi	r18, 0x0A	; 10
    3b10:	c2 16       	cp	r12, r18
    3b12:	d1 04       	cpc	r13, r1
    3b14:	2c f0       	brlt	.+10     	; 0x3b20 <vfprintf+0x3d8>
    3b16:	8f 5f       	subi	r24, 0xFF	; 255
    3b18:	fa e0       	ldi	r31, 0x0A	; 10
    3b1a:	cf 1a       	sub	r12, r31
    3b1c:	d1 08       	sbc	r13, r1
    3b1e:	f7 cf       	rjmp	.-18     	; 0x3b0e <vfprintf+0x3c6>
    3b20:	b7 01       	movw	r22, r14
    3b22:	90 e0       	ldi	r25, 0x00	; 0
    3b24:	b6 d3       	rcall	.+1900   	; 0x4292 <fputc>
    3b26:	b7 01       	movw	r22, r14
    3b28:	c6 01       	movw	r24, r12
    3b2a:	c0 96       	adiw	r24, 0x30	; 48
    3b2c:	b2 d3       	rcall	.+1892   	; 0x4292 <fputc>
    3b2e:	49 c1       	rjmp	.+658    	; 0x3dc2 <vfprintf+0x67a>
    3b30:	83 36       	cpi	r24, 0x63	; 99
    3b32:	31 f0       	breq	.+12     	; 0x3b40 <vfprintf+0x3f8>
    3b34:	83 37       	cpi	r24, 0x73	; 115
    3b36:	79 f0       	breq	.+30     	; 0x3b56 <vfprintf+0x40e>
    3b38:	83 35       	cpi	r24, 0x53	; 83
    3b3a:	09 f0       	breq	.+2      	; 0x3b3e <vfprintf+0x3f6>
    3b3c:	52 c0       	rjmp	.+164    	; 0x3be2 <vfprintf+0x49a>
    3b3e:	1f c0       	rjmp	.+62     	; 0x3b7e <vfprintf+0x436>
    3b40:	56 01       	movw	r10, r12
    3b42:	32 e0       	ldi	r19, 0x02	; 2
    3b44:	a3 0e       	add	r10, r19
    3b46:	b1 1c       	adc	r11, r1
    3b48:	f6 01       	movw	r30, r12
    3b4a:	80 81       	ld	r24, Z
    3b4c:	89 83       	std	Y+1, r24	; 0x01
    3b4e:	01 e0       	ldi	r16, 0x01	; 1
    3b50:	10 e0       	ldi	r17, 0x00	; 0
    3b52:	63 01       	movw	r12, r6
    3b54:	11 c0       	rjmp	.+34     	; 0x3b78 <vfprintf+0x430>
    3b56:	56 01       	movw	r10, r12
    3b58:	f2 e0       	ldi	r31, 0x02	; 2
    3b5a:	af 0e       	add	r10, r31
    3b5c:	b1 1c       	adc	r11, r1
    3b5e:	f6 01       	movw	r30, r12
    3b60:	c0 80       	ld	r12, Z
    3b62:	d1 80       	ldd	r13, Z+1	; 0x01
    3b64:	96 fe       	sbrs	r9, 6
    3b66:	03 c0       	rjmp	.+6      	; 0x3b6e <vfprintf+0x426>
    3b68:	61 2f       	mov	r22, r17
    3b6a:	70 e0       	ldi	r23, 0x00	; 0
    3b6c:	02 c0       	rjmp	.+4      	; 0x3b72 <vfprintf+0x42a>
    3b6e:	6f ef       	ldi	r22, 0xFF	; 255
    3b70:	7f ef       	ldi	r23, 0xFF	; 255
    3b72:	c6 01       	movw	r24, r12
    3b74:	39 d3       	rcall	.+1650   	; 0x41e8 <strnlen>
    3b76:	8c 01       	movw	r16, r24
    3b78:	f9 2d       	mov	r31, r9
    3b7a:	ff 77       	andi	r31, 0x7F	; 127
    3b7c:	13 c0       	rjmp	.+38     	; 0x3ba4 <vfprintf+0x45c>
    3b7e:	56 01       	movw	r10, r12
    3b80:	22 e0       	ldi	r18, 0x02	; 2
    3b82:	a2 0e       	add	r10, r18
    3b84:	b1 1c       	adc	r11, r1
    3b86:	f6 01       	movw	r30, r12
    3b88:	c0 80       	ld	r12, Z
    3b8a:	d1 80       	ldd	r13, Z+1	; 0x01
    3b8c:	96 fe       	sbrs	r9, 6
    3b8e:	03 c0       	rjmp	.+6      	; 0x3b96 <vfprintf+0x44e>
    3b90:	61 2f       	mov	r22, r17
    3b92:	70 e0       	ldi	r23, 0x00	; 0
    3b94:	02 c0       	rjmp	.+4      	; 0x3b9a <vfprintf+0x452>
    3b96:	6f ef       	ldi	r22, 0xFF	; 255
    3b98:	7f ef       	ldi	r23, 0xFF	; 255
    3b9a:	c6 01       	movw	r24, r12
    3b9c:	1a d3       	rcall	.+1588   	; 0x41d2 <strnlen_P>
    3b9e:	8c 01       	movw	r16, r24
    3ba0:	f9 2d       	mov	r31, r9
    3ba2:	f0 68       	ori	r31, 0x80	; 128
    3ba4:	9f 2e       	mov	r9, r31
    3ba6:	f3 fd       	sbrc	r31, 3
    3ba8:	18 c0       	rjmp	.+48     	; 0x3bda <vfprintf+0x492>
    3baa:	85 2d       	mov	r24, r5
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	08 17       	cp	r16, r24
    3bb0:	19 07       	cpc	r17, r25
    3bb2:	98 f4       	brcc	.+38     	; 0x3bda <vfprintf+0x492>
    3bb4:	b7 01       	movw	r22, r14
    3bb6:	80 e2       	ldi	r24, 0x20	; 32
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	6b d3       	rcall	.+1750   	; 0x4292 <fputc>
    3bbc:	5a 94       	dec	r5
    3bbe:	f5 cf       	rjmp	.-22     	; 0x3baa <vfprintf+0x462>
    3bc0:	f6 01       	movw	r30, r12
    3bc2:	97 fc       	sbrc	r9, 7
    3bc4:	85 91       	lpm	r24, Z+
    3bc6:	97 fe       	sbrs	r9, 7
    3bc8:	81 91       	ld	r24, Z+
    3bca:	6f 01       	movw	r12, r30
    3bcc:	b7 01       	movw	r22, r14
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	60 d3       	rcall	.+1728   	; 0x4292 <fputc>
    3bd2:	51 10       	cpse	r5, r1
    3bd4:	5a 94       	dec	r5
    3bd6:	01 50       	subi	r16, 0x01	; 1
    3bd8:	11 09       	sbc	r17, r1
    3bda:	01 15       	cp	r16, r1
    3bdc:	11 05       	cpc	r17, r1
    3bde:	81 f7       	brne	.-32     	; 0x3bc0 <vfprintf+0x478>
    3be0:	f0 c0       	rjmp	.+480    	; 0x3dc2 <vfprintf+0x67a>
    3be2:	84 36       	cpi	r24, 0x64	; 100
    3be4:	11 f0       	breq	.+4      	; 0x3bea <vfprintf+0x4a2>
    3be6:	89 36       	cpi	r24, 0x69	; 105
    3be8:	59 f5       	brne	.+86     	; 0x3c40 <vfprintf+0x4f8>
    3bea:	56 01       	movw	r10, r12
    3bec:	97 fe       	sbrs	r9, 7
    3bee:	09 c0       	rjmp	.+18     	; 0x3c02 <vfprintf+0x4ba>
    3bf0:	24 e0       	ldi	r18, 0x04	; 4
    3bf2:	a2 0e       	add	r10, r18
    3bf4:	b1 1c       	adc	r11, r1
    3bf6:	f6 01       	movw	r30, r12
    3bf8:	60 81       	ld	r22, Z
    3bfa:	71 81       	ldd	r23, Z+1	; 0x01
    3bfc:	82 81       	ldd	r24, Z+2	; 0x02
    3bfe:	93 81       	ldd	r25, Z+3	; 0x03
    3c00:	0a c0       	rjmp	.+20     	; 0x3c16 <vfprintf+0x4ce>
    3c02:	f2 e0       	ldi	r31, 0x02	; 2
    3c04:	af 0e       	add	r10, r31
    3c06:	b1 1c       	adc	r11, r1
    3c08:	f6 01       	movw	r30, r12
    3c0a:	60 81       	ld	r22, Z
    3c0c:	71 81       	ldd	r23, Z+1	; 0x01
    3c0e:	07 2e       	mov	r0, r23
    3c10:	00 0c       	add	r0, r0
    3c12:	88 0b       	sbc	r24, r24
    3c14:	99 0b       	sbc	r25, r25
    3c16:	f9 2d       	mov	r31, r9
    3c18:	ff 76       	andi	r31, 0x6F	; 111
    3c1a:	9f 2e       	mov	r9, r31
    3c1c:	97 ff       	sbrs	r25, 7
    3c1e:	09 c0       	rjmp	.+18     	; 0x3c32 <vfprintf+0x4ea>
    3c20:	90 95       	com	r25
    3c22:	80 95       	com	r24
    3c24:	70 95       	com	r23
    3c26:	61 95       	neg	r22
    3c28:	7f 4f       	sbci	r23, 0xFF	; 255
    3c2a:	8f 4f       	sbci	r24, 0xFF	; 255
    3c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c2e:	f0 68       	ori	r31, 0x80	; 128
    3c30:	9f 2e       	mov	r9, r31
    3c32:	2a e0       	ldi	r18, 0x0A	; 10
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	a3 01       	movw	r20, r6
    3c38:	ab d3       	rcall	.+1878   	; 0x4390 <__ultoa_invert>
    3c3a:	c8 2e       	mov	r12, r24
    3c3c:	c6 18       	sub	r12, r6
    3c3e:	3e c0       	rjmp	.+124    	; 0x3cbc <vfprintf+0x574>
    3c40:	09 2d       	mov	r16, r9
    3c42:	85 37       	cpi	r24, 0x75	; 117
    3c44:	21 f4       	brne	.+8      	; 0x3c4e <vfprintf+0x506>
    3c46:	0f 7e       	andi	r16, 0xEF	; 239
    3c48:	2a e0       	ldi	r18, 0x0A	; 10
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	1d c0       	rjmp	.+58     	; 0x3c88 <vfprintf+0x540>
    3c4e:	09 7f       	andi	r16, 0xF9	; 249
    3c50:	8f 36       	cpi	r24, 0x6F	; 111
    3c52:	91 f0       	breq	.+36     	; 0x3c78 <vfprintf+0x530>
    3c54:	18 f4       	brcc	.+6      	; 0x3c5c <vfprintf+0x514>
    3c56:	88 35       	cpi	r24, 0x58	; 88
    3c58:	59 f0       	breq	.+22     	; 0x3c70 <vfprintf+0x528>
    3c5a:	bc c0       	rjmp	.+376    	; 0x3dd4 <vfprintf+0x68c>
    3c5c:	80 37       	cpi	r24, 0x70	; 112
    3c5e:	19 f0       	breq	.+6      	; 0x3c66 <vfprintf+0x51e>
    3c60:	88 37       	cpi	r24, 0x78	; 120
    3c62:	11 f0       	breq	.+4      	; 0x3c68 <vfprintf+0x520>
    3c64:	b7 c0       	rjmp	.+366    	; 0x3dd4 <vfprintf+0x68c>
    3c66:	00 61       	ori	r16, 0x10	; 16
    3c68:	04 ff       	sbrs	r16, 4
    3c6a:	09 c0       	rjmp	.+18     	; 0x3c7e <vfprintf+0x536>
    3c6c:	04 60       	ori	r16, 0x04	; 4
    3c6e:	07 c0       	rjmp	.+14     	; 0x3c7e <vfprintf+0x536>
    3c70:	94 fe       	sbrs	r9, 4
    3c72:	08 c0       	rjmp	.+16     	; 0x3c84 <vfprintf+0x53c>
    3c74:	06 60       	ori	r16, 0x06	; 6
    3c76:	06 c0       	rjmp	.+12     	; 0x3c84 <vfprintf+0x53c>
    3c78:	28 e0       	ldi	r18, 0x08	; 8
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	05 c0       	rjmp	.+10     	; 0x3c88 <vfprintf+0x540>
    3c7e:	20 e1       	ldi	r18, 0x10	; 16
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	02 c0       	rjmp	.+4      	; 0x3c88 <vfprintf+0x540>
    3c84:	20 e1       	ldi	r18, 0x10	; 16
    3c86:	32 e0       	ldi	r19, 0x02	; 2
    3c88:	56 01       	movw	r10, r12
    3c8a:	07 ff       	sbrs	r16, 7
    3c8c:	09 c0       	rjmp	.+18     	; 0x3ca0 <vfprintf+0x558>
    3c8e:	84 e0       	ldi	r24, 0x04	; 4
    3c90:	a8 0e       	add	r10, r24
    3c92:	b1 1c       	adc	r11, r1
    3c94:	f6 01       	movw	r30, r12
    3c96:	60 81       	ld	r22, Z
    3c98:	71 81       	ldd	r23, Z+1	; 0x01
    3c9a:	82 81       	ldd	r24, Z+2	; 0x02
    3c9c:	93 81       	ldd	r25, Z+3	; 0x03
    3c9e:	08 c0       	rjmp	.+16     	; 0x3cb0 <vfprintf+0x568>
    3ca0:	f2 e0       	ldi	r31, 0x02	; 2
    3ca2:	af 0e       	add	r10, r31
    3ca4:	b1 1c       	adc	r11, r1
    3ca6:	f6 01       	movw	r30, r12
    3ca8:	60 81       	ld	r22, Z
    3caa:	71 81       	ldd	r23, Z+1	; 0x01
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	90 e0       	ldi	r25, 0x00	; 0
    3cb0:	a3 01       	movw	r20, r6
    3cb2:	6e d3       	rcall	.+1756   	; 0x4390 <__ultoa_invert>
    3cb4:	c8 2e       	mov	r12, r24
    3cb6:	c6 18       	sub	r12, r6
    3cb8:	0f 77       	andi	r16, 0x7F	; 127
    3cba:	90 2e       	mov	r9, r16
    3cbc:	96 fe       	sbrs	r9, 6
    3cbe:	0b c0       	rjmp	.+22     	; 0x3cd6 <vfprintf+0x58e>
    3cc0:	09 2d       	mov	r16, r9
    3cc2:	0e 7f       	andi	r16, 0xFE	; 254
    3cc4:	c1 16       	cp	r12, r17
    3cc6:	50 f4       	brcc	.+20     	; 0x3cdc <vfprintf+0x594>
    3cc8:	94 fe       	sbrs	r9, 4
    3cca:	0a c0       	rjmp	.+20     	; 0x3ce0 <vfprintf+0x598>
    3ccc:	92 fc       	sbrc	r9, 2
    3cce:	08 c0       	rjmp	.+16     	; 0x3ce0 <vfprintf+0x598>
    3cd0:	09 2d       	mov	r16, r9
    3cd2:	0e 7e       	andi	r16, 0xEE	; 238
    3cd4:	05 c0       	rjmp	.+10     	; 0x3ce0 <vfprintf+0x598>
    3cd6:	dc 2c       	mov	r13, r12
    3cd8:	09 2d       	mov	r16, r9
    3cda:	03 c0       	rjmp	.+6      	; 0x3ce2 <vfprintf+0x59a>
    3cdc:	dc 2c       	mov	r13, r12
    3cde:	01 c0       	rjmp	.+2      	; 0x3ce2 <vfprintf+0x59a>
    3ce0:	d1 2e       	mov	r13, r17
    3ce2:	04 ff       	sbrs	r16, 4
    3ce4:	0d c0       	rjmp	.+26     	; 0x3d00 <vfprintf+0x5b8>
    3ce6:	fe 01       	movw	r30, r28
    3ce8:	ec 0d       	add	r30, r12
    3cea:	f1 1d       	adc	r31, r1
    3cec:	80 81       	ld	r24, Z
    3cee:	80 33       	cpi	r24, 0x30	; 48
    3cf0:	11 f4       	brne	.+4      	; 0x3cf6 <vfprintf+0x5ae>
    3cf2:	09 7e       	andi	r16, 0xE9	; 233
    3cf4:	09 c0       	rjmp	.+18     	; 0x3d08 <vfprintf+0x5c0>
    3cf6:	02 ff       	sbrs	r16, 2
    3cf8:	06 c0       	rjmp	.+12     	; 0x3d06 <vfprintf+0x5be>
    3cfa:	d3 94       	inc	r13
    3cfc:	d3 94       	inc	r13
    3cfe:	04 c0       	rjmp	.+8      	; 0x3d08 <vfprintf+0x5c0>
    3d00:	80 2f       	mov	r24, r16
    3d02:	86 78       	andi	r24, 0x86	; 134
    3d04:	09 f0       	breq	.+2      	; 0x3d08 <vfprintf+0x5c0>
    3d06:	d3 94       	inc	r13
    3d08:	03 fd       	sbrc	r16, 3
    3d0a:	10 c0       	rjmp	.+32     	; 0x3d2c <vfprintf+0x5e4>
    3d0c:	00 ff       	sbrs	r16, 0
    3d0e:	06 c0       	rjmp	.+12     	; 0x3d1c <vfprintf+0x5d4>
    3d10:	1c 2d       	mov	r17, r12
    3d12:	d5 14       	cp	r13, r5
    3d14:	78 f4       	brcc	.+30     	; 0x3d34 <vfprintf+0x5ec>
    3d16:	15 0d       	add	r17, r5
    3d18:	1d 19       	sub	r17, r13
    3d1a:	0c c0       	rjmp	.+24     	; 0x3d34 <vfprintf+0x5ec>
    3d1c:	d5 14       	cp	r13, r5
    3d1e:	50 f4       	brcc	.+20     	; 0x3d34 <vfprintf+0x5ec>
    3d20:	b7 01       	movw	r22, r14
    3d22:	80 e2       	ldi	r24, 0x20	; 32
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	b5 d2       	rcall	.+1386   	; 0x4292 <fputc>
    3d28:	d3 94       	inc	r13
    3d2a:	f8 cf       	rjmp	.-16     	; 0x3d1c <vfprintf+0x5d4>
    3d2c:	d5 14       	cp	r13, r5
    3d2e:	10 f4       	brcc	.+4      	; 0x3d34 <vfprintf+0x5ec>
    3d30:	5d 18       	sub	r5, r13
    3d32:	01 c0       	rjmp	.+2      	; 0x3d36 <vfprintf+0x5ee>
    3d34:	51 2c       	mov	r5, r1
    3d36:	04 ff       	sbrs	r16, 4
    3d38:	0f c0       	rjmp	.+30     	; 0x3d58 <vfprintf+0x610>
    3d3a:	b7 01       	movw	r22, r14
    3d3c:	80 e3       	ldi	r24, 0x30	; 48
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	a8 d2       	rcall	.+1360   	; 0x4292 <fputc>
    3d42:	02 ff       	sbrs	r16, 2
    3d44:	16 c0       	rjmp	.+44     	; 0x3d72 <vfprintf+0x62a>
    3d46:	01 fd       	sbrc	r16, 1
    3d48:	03 c0       	rjmp	.+6      	; 0x3d50 <vfprintf+0x608>
    3d4a:	88 e7       	ldi	r24, 0x78	; 120
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	02 c0       	rjmp	.+4      	; 0x3d54 <vfprintf+0x60c>
    3d50:	88 e5       	ldi	r24, 0x58	; 88
    3d52:	90 e0       	ldi	r25, 0x00	; 0
    3d54:	b7 01       	movw	r22, r14
    3d56:	0c c0       	rjmp	.+24     	; 0x3d70 <vfprintf+0x628>
    3d58:	80 2f       	mov	r24, r16
    3d5a:	86 78       	andi	r24, 0x86	; 134
    3d5c:	51 f0       	breq	.+20     	; 0x3d72 <vfprintf+0x62a>
    3d5e:	01 ff       	sbrs	r16, 1
    3d60:	02 c0       	rjmp	.+4      	; 0x3d66 <vfprintf+0x61e>
    3d62:	8b e2       	ldi	r24, 0x2B	; 43
    3d64:	01 c0       	rjmp	.+2      	; 0x3d68 <vfprintf+0x620>
    3d66:	80 e2       	ldi	r24, 0x20	; 32
    3d68:	07 fd       	sbrc	r16, 7
    3d6a:	8d e2       	ldi	r24, 0x2D	; 45
    3d6c:	b7 01       	movw	r22, r14
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	90 d2       	rcall	.+1312   	; 0x4292 <fputc>
    3d72:	c1 16       	cp	r12, r17
    3d74:	30 f4       	brcc	.+12     	; 0x3d82 <vfprintf+0x63a>
    3d76:	b7 01       	movw	r22, r14
    3d78:	80 e3       	ldi	r24, 0x30	; 48
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	8a d2       	rcall	.+1300   	; 0x4292 <fputc>
    3d7e:	11 50       	subi	r17, 0x01	; 1
    3d80:	f8 cf       	rjmp	.-16     	; 0x3d72 <vfprintf+0x62a>
    3d82:	ca 94       	dec	r12
    3d84:	f3 01       	movw	r30, r6
    3d86:	ec 0d       	add	r30, r12
    3d88:	f1 1d       	adc	r31, r1
    3d8a:	80 81       	ld	r24, Z
    3d8c:	b7 01       	movw	r22, r14
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	80 d2       	rcall	.+1280   	; 0x4292 <fputc>
    3d92:	c1 10       	cpse	r12, r1
    3d94:	f6 cf       	rjmp	.-20     	; 0x3d82 <vfprintf+0x63a>
    3d96:	15 c0       	rjmp	.+42     	; 0x3dc2 <vfprintf+0x67a>
    3d98:	f4 e0       	ldi	r31, 0x04	; 4
    3d9a:	f5 15       	cp	r31, r5
    3d9c:	50 f5       	brcc	.+84     	; 0x3df2 <vfprintf+0x6aa>
    3d9e:	84 e0       	ldi	r24, 0x04	; 4
    3da0:	58 1a       	sub	r5, r24
    3da2:	93 fe       	sbrs	r9, 3
    3da4:	1e c0       	rjmp	.+60     	; 0x3de2 <vfprintf+0x69a>
    3da6:	01 11       	cpse	r16, r1
    3da8:	25 c0       	rjmp	.+74     	; 0x3df4 <vfprintf+0x6ac>
    3daa:	2c 85       	ldd	r18, Y+12	; 0x0c
    3dac:	23 ff       	sbrs	r18, 3
    3dae:	27 c0       	rjmp	.+78     	; 0x3dfe <vfprintf+0x6b6>
    3db0:	0c ef       	ldi	r16, 0xFC	; 252
    3db2:	12 e0       	ldi	r17, 0x02	; 2
    3db4:	39 2d       	mov	r19, r9
    3db6:	30 71       	andi	r19, 0x10	; 16
    3db8:	93 2e       	mov	r9, r19
    3dba:	f8 01       	movw	r30, r16
    3dbc:	84 91       	lpm	r24, Z
    3dbe:	81 11       	cpse	r24, r1
    3dc0:	21 c0       	rjmp	.+66     	; 0x3e04 <vfprintf+0x6bc>
    3dc2:	55 20       	and	r5, r5
    3dc4:	09 f4       	brne	.+2      	; 0x3dc8 <vfprintf+0x680>
    3dc6:	fc cc       	rjmp	.-1544   	; 0x37c0 <vfprintf+0x78>
    3dc8:	b7 01       	movw	r22, r14
    3dca:	80 e2       	ldi	r24, 0x20	; 32
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	61 d2       	rcall	.+1218   	; 0x4292 <fputc>
    3dd0:	5a 94       	dec	r5
    3dd2:	f7 cf       	rjmp	.-18     	; 0x3dc2 <vfprintf+0x67a>
    3dd4:	f7 01       	movw	r30, r14
    3dd6:	86 81       	ldd	r24, Z+6	; 0x06
    3dd8:	97 81       	ldd	r25, Z+7	; 0x07
    3dda:	23 c0       	rjmp	.+70     	; 0x3e22 <vfprintf+0x6da>
    3ddc:	8f ef       	ldi	r24, 0xFF	; 255
    3dde:	9f ef       	ldi	r25, 0xFF	; 255
    3de0:	20 c0       	rjmp	.+64     	; 0x3e22 <vfprintf+0x6da>
    3de2:	b7 01       	movw	r22, r14
    3de4:	80 e2       	ldi	r24, 0x20	; 32
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	54 d2       	rcall	.+1192   	; 0x4292 <fputc>
    3dea:	5a 94       	dec	r5
    3dec:	51 10       	cpse	r5, r1
    3dee:	f9 cf       	rjmp	.-14     	; 0x3de2 <vfprintf+0x69a>
    3df0:	da cf       	rjmp	.-76     	; 0x3da6 <vfprintf+0x65e>
    3df2:	51 2c       	mov	r5, r1
    3df4:	b7 01       	movw	r22, r14
    3df6:	80 2f       	mov	r24, r16
    3df8:	90 e0       	ldi	r25, 0x00	; 0
    3dfa:	4b d2       	rcall	.+1174   	; 0x4292 <fputc>
    3dfc:	d6 cf       	rjmp	.-84     	; 0x3daa <vfprintf+0x662>
    3dfe:	00 e0       	ldi	r16, 0x00	; 0
    3e00:	13 e0       	ldi	r17, 0x03	; 3
    3e02:	d8 cf       	rjmp	.-80     	; 0x3db4 <vfprintf+0x66c>
    3e04:	91 10       	cpse	r9, r1
    3e06:	80 52       	subi	r24, 0x20	; 32
    3e08:	b7 01       	movw	r22, r14
    3e0a:	90 e0       	ldi	r25, 0x00	; 0
    3e0c:	42 d2       	rcall	.+1156   	; 0x4292 <fputc>
    3e0e:	0f 5f       	subi	r16, 0xFF	; 255
    3e10:	1f 4f       	sbci	r17, 0xFF	; 255
    3e12:	d3 cf       	rjmp	.-90     	; 0x3dba <vfprintf+0x672>
    3e14:	23 e0       	ldi	r18, 0x03	; 3
    3e16:	25 15       	cp	r18, r5
    3e18:	10 f4       	brcc	.+4      	; 0x3e1e <vfprintf+0x6d6>
    3e1a:	83 e0       	ldi	r24, 0x03	; 3
    3e1c:	c1 cf       	rjmp	.-126    	; 0x3da0 <vfprintf+0x658>
    3e1e:	51 2c       	mov	r5, r1
    3e20:	c4 cf       	rjmp	.-120    	; 0x3daa <vfprintf+0x662>
    3e22:	60 96       	adiw	r28, 0x10	; 16
    3e24:	cd bf       	out	0x3d, r28	; 61
    3e26:	de bf       	out	0x3e, r29	; 62
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	1f 91       	pop	r17
    3e2e:	0f 91       	pop	r16
    3e30:	ff 90       	pop	r15
    3e32:	ef 90       	pop	r14
    3e34:	df 90       	pop	r13
    3e36:	cf 90       	pop	r12
    3e38:	bf 90       	pop	r11
    3e3a:	af 90       	pop	r10
    3e3c:	9f 90       	pop	r9
    3e3e:	8f 90       	pop	r8
    3e40:	7f 90       	pop	r7
    3e42:	6f 90       	pop	r6
    3e44:	5f 90       	pop	r5
    3e46:	4f 90       	pop	r4
    3e48:	3f 90       	pop	r3
    3e4a:	2f 90       	pop	r2
    3e4c:	08 95       	ret

00003e4e <__udivmodsi4>:
    3e4e:	a1 e2       	ldi	r26, 0x21	; 33
    3e50:	1a 2e       	mov	r1, r26
    3e52:	aa 1b       	sub	r26, r26
    3e54:	bb 1b       	sub	r27, r27
    3e56:	fd 01       	movw	r30, r26
    3e58:	0d c0       	rjmp	.+26     	; 0x3e74 <__udivmodsi4_ep>

00003e5a <__udivmodsi4_loop>:
    3e5a:	aa 1f       	adc	r26, r26
    3e5c:	bb 1f       	adc	r27, r27
    3e5e:	ee 1f       	adc	r30, r30
    3e60:	ff 1f       	adc	r31, r31
    3e62:	a2 17       	cp	r26, r18
    3e64:	b3 07       	cpc	r27, r19
    3e66:	e4 07       	cpc	r30, r20
    3e68:	f5 07       	cpc	r31, r21
    3e6a:	20 f0       	brcs	.+8      	; 0x3e74 <__udivmodsi4_ep>
    3e6c:	a2 1b       	sub	r26, r18
    3e6e:	b3 0b       	sbc	r27, r19
    3e70:	e4 0b       	sbc	r30, r20
    3e72:	f5 0b       	sbc	r31, r21

00003e74 <__udivmodsi4_ep>:
    3e74:	66 1f       	adc	r22, r22
    3e76:	77 1f       	adc	r23, r23
    3e78:	88 1f       	adc	r24, r24
    3e7a:	99 1f       	adc	r25, r25
    3e7c:	1a 94       	dec	r1
    3e7e:	69 f7       	brne	.-38     	; 0x3e5a <__udivmodsi4_loop>
    3e80:	60 95       	com	r22
    3e82:	70 95       	com	r23
    3e84:	80 95       	com	r24
    3e86:	90 95       	com	r25
    3e88:	9b 01       	movw	r18, r22
    3e8a:	ac 01       	movw	r20, r24
    3e8c:	bd 01       	movw	r22, r26
    3e8e:	cf 01       	movw	r24, r30
    3e90:	08 95       	ret

00003e92 <__tablejump2__>:
    3e92:	ee 0f       	add	r30, r30
    3e94:	ff 1f       	adc	r31, r31
    3e96:	88 1f       	adc	r24, r24
    3e98:	8b bf       	out	0x3b, r24	; 59
    3e9a:	07 90       	elpm	r0, Z+
    3e9c:	f6 91       	elpm	r31, Z
    3e9e:	e0 2d       	mov	r30, r0
    3ea0:	1b be       	out	0x3b, r1	; 59
    3ea2:	19 94       	eijmp

00003ea4 <__muluhisi3>:
    3ea4:	af d0       	rcall	.+350    	; 0x4004 <__umulhisi3>
    3ea6:	a5 9f       	mul	r26, r21
    3ea8:	90 0d       	add	r25, r0
    3eaa:	b4 9f       	mul	r27, r20
    3eac:	90 0d       	add	r25, r0
    3eae:	a4 9f       	mul	r26, r20
    3eb0:	80 0d       	add	r24, r0
    3eb2:	91 1d       	adc	r25, r1
    3eb4:	11 24       	eor	r1, r1
    3eb6:	08 95       	ret

00003eb8 <__muldi3>:
    3eb8:	df 93       	push	r29
    3eba:	cf 93       	push	r28
    3ebc:	1f 93       	push	r17
    3ebe:	0f 93       	push	r16
    3ec0:	9a 9d       	mul	r25, r10
    3ec2:	f0 2d       	mov	r31, r0
    3ec4:	21 9f       	mul	r18, r17
    3ec6:	f0 0d       	add	r31, r0
    3ec8:	8b 9d       	mul	r24, r11
    3eca:	f0 0d       	add	r31, r0
    3ecc:	8a 9d       	mul	r24, r10
    3ece:	e0 2d       	mov	r30, r0
    3ed0:	f1 0d       	add	r31, r1
    3ed2:	03 9f       	mul	r16, r19
    3ed4:	f0 0d       	add	r31, r0
    3ed6:	02 9f       	mul	r16, r18
    3ed8:	e0 0d       	add	r30, r0
    3eda:	f1 1d       	adc	r31, r1
    3edc:	4e 9d       	mul	r20, r14
    3ede:	e0 0d       	add	r30, r0
    3ee0:	f1 1d       	adc	r31, r1
    3ee2:	5e 9d       	mul	r21, r14
    3ee4:	f0 0d       	add	r31, r0
    3ee6:	4f 9d       	mul	r20, r15
    3ee8:	f0 0d       	add	r31, r0
    3eea:	7f 93       	push	r23
    3eec:	6f 93       	push	r22
    3eee:	bf 92       	push	r11
    3ef0:	af 92       	push	r10
    3ef2:	5f 93       	push	r21
    3ef4:	4f 93       	push	r20
    3ef6:	d5 01       	movw	r26, r10
    3ef8:	85 d0       	rcall	.+266    	; 0x4004 <__umulhisi3>
    3efa:	8b 01       	movw	r16, r22
    3efc:	ac 01       	movw	r20, r24
    3efe:	d7 01       	movw	r26, r14
    3f00:	81 d0       	rcall	.+258    	; 0x4004 <__umulhisi3>
    3f02:	eb 01       	movw	r28, r22
    3f04:	e8 0f       	add	r30, r24
    3f06:	f9 1f       	adc	r31, r25
    3f08:	d6 01       	movw	r26, r12
    3f0a:	1f d0       	rcall	.+62     	; 0x3f4a <__muldi3_6>
    3f0c:	2f 91       	pop	r18
    3f0e:	3f 91       	pop	r19
    3f10:	d6 01       	movw	r26, r12
    3f12:	78 d0       	rcall	.+240    	; 0x4004 <__umulhisi3>
    3f14:	c6 0f       	add	r28, r22
    3f16:	d7 1f       	adc	r29, r23
    3f18:	e8 1f       	adc	r30, r24
    3f1a:	f9 1f       	adc	r31, r25
    3f1c:	af 91       	pop	r26
    3f1e:	bf 91       	pop	r27
    3f20:	14 d0       	rcall	.+40     	; 0x3f4a <__muldi3_6>
    3f22:	2f 91       	pop	r18
    3f24:	3f 91       	pop	r19
    3f26:	6e d0       	rcall	.+220    	; 0x4004 <__umulhisi3>
    3f28:	c6 0f       	add	r28, r22
    3f2a:	d7 1f       	adc	r29, r23
    3f2c:	e8 1f       	adc	r30, r24
    3f2e:	f9 1f       	adc	r31, r25
    3f30:	d6 01       	movw	r26, r12
    3f32:	68 d0       	rcall	.+208    	; 0x4004 <__umulhisi3>
    3f34:	e6 0f       	add	r30, r22
    3f36:	f7 1f       	adc	r31, r23
    3f38:	98 01       	movw	r18, r16
    3f3a:	be 01       	movw	r22, r28
    3f3c:	cf 01       	movw	r24, r30
    3f3e:	11 24       	eor	r1, r1
    3f40:	0f 91       	pop	r16
    3f42:	1f 91       	pop	r17
    3f44:	cf 91       	pop	r28
    3f46:	df 91       	pop	r29
    3f48:	08 95       	ret

00003f4a <__muldi3_6>:
    3f4a:	5c d0       	rcall	.+184    	; 0x4004 <__umulhisi3>
    3f4c:	46 0f       	add	r20, r22
    3f4e:	57 1f       	adc	r21, r23
    3f50:	c8 1f       	adc	r28, r24
    3f52:	d9 1f       	adc	r29, r25
    3f54:	08 f4       	brcc	.+2      	; 0x3f58 <__muldi3_6+0xe>
    3f56:	31 96       	adiw	r30, 0x01	; 1
    3f58:	08 95       	ret

00003f5a <__ashldi3>:
    3f5a:	0f 93       	push	r16
    3f5c:	08 30       	cpi	r16, 0x08	; 8
    3f5e:	90 f0       	brcs	.+36     	; 0x3f84 <__ashldi3+0x2a>
    3f60:	98 2f       	mov	r25, r24
    3f62:	87 2f       	mov	r24, r23
    3f64:	76 2f       	mov	r23, r22
    3f66:	65 2f       	mov	r22, r21
    3f68:	54 2f       	mov	r21, r20
    3f6a:	43 2f       	mov	r20, r19
    3f6c:	32 2f       	mov	r19, r18
    3f6e:	22 27       	eor	r18, r18
    3f70:	08 50       	subi	r16, 0x08	; 8
    3f72:	f4 cf       	rjmp	.-24     	; 0x3f5c <__ashldi3+0x2>
    3f74:	22 0f       	add	r18, r18
    3f76:	33 1f       	adc	r19, r19
    3f78:	44 1f       	adc	r20, r20
    3f7a:	55 1f       	adc	r21, r21
    3f7c:	66 1f       	adc	r22, r22
    3f7e:	77 1f       	adc	r23, r23
    3f80:	88 1f       	adc	r24, r24
    3f82:	99 1f       	adc	r25, r25
    3f84:	0a 95       	dec	r16
    3f86:	b2 f7       	brpl	.-20     	; 0x3f74 <__ashldi3+0x1a>
    3f88:	0f 91       	pop	r16
    3f8a:	08 95       	ret

00003f8c <__ashrdi3>:
    3f8c:	97 fb       	bst	r25, 7
    3f8e:	10 f8       	bld	r1, 0

00003f90 <__lshrdi3>:
    3f90:	16 94       	lsr	r1
    3f92:	00 08       	sbc	r0, r0
    3f94:	0f 93       	push	r16
    3f96:	08 30       	cpi	r16, 0x08	; 8
    3f98:	98 f0       	brcs	.+38     	; 0x3fc0 <__lshrdi3+0x30>
    3f9a:	08 50       	subi	r16, 0x08	; 8
    3f9c:	23 2f       	mov	r18, r19
    3f9e:	34 2f       	mov	r19, r20
    3fa0:	45 2f       	mov	r20, r21
    3fa2:	56 2f       	mov	r21, r22
    3fa4:	67 2f       	mov	r22, r23
    3fa6:	78 2f       	mov	r23, r24
    3fa8:	89 2f       	mov	r24, r25
    3faa:	90 2d       	mov	r25, r0
    3fac:	f4 cf       	rjmp	.-24     	; 0x3f96 <__lshrdi3+0x6>
    3fae:	05 94       	asr	r0
    3fb0:	97 95       	ror	r25
    3fb2:	87 95       	ror	r24
    3fb4:	77 95       	ror	r23
    3fb6:	67 95       	ror	r22
    3fb8:	57 95       	ror	r21
    3fba:	47 95       	ror	r20
    3fbc:	37 95       	ror	r19
    3fbe:	27 95       	ror	r18
    3fc0:	0a 95       	dec	r16
    3fc2:	aa f7       	brpl	.-22     	; 0x3fae <__lshrdi3+0x1e>
    3fc4:	0f 91       	pop	r16
    3fc6:	08 95       	ret

00003fc8 <__adddi3>:
    3fc8:	2a 0d       	add	r18, r10
    3fca:	3b 1d       	adc	r19, r11
    3fcc:	4c 1d       	adc	r20, r12
    3fce:	5d 1d       	adc	r21, r13
    3fd0:	6e 1d       	adc	r22, r14
    3fd2:	7f 1d       	adc	r23, r15
    3fd4:	80 1f       	adc	r24, r16
    3fd6:	91 1f       	adc	r25, r17
    3fd8:	08 95       	ret

00003fda <__subdi3>:
    3fda:	2a 19       	sub	r18, r10
    3fdc:	3b 09       	sbc	r19, r11
    3fde:	4c 09       	sbc	r20, r12
    3fe0:	5d 09       	sbc	r21, r13
    3fe2:	6e 09       	sbc	r22, r14
    3fe4:	7f 09       	sbc	r23, r15
    3fe6:	80 0b       	sbc	r24, r16
    3fe8:	91 0b       	sbc	r25, r17
    3fea:	08 95       	ret

00003fec <__cmpdi2_s8>:
    3fec:	00 24       	eor	r0, r0
    3fee:	a7 fd       	sbrc	r26, 7
    3ff0:	00 94       	com	r0
    3ff2:	2a 17       	cp	r18, r26
    3ff4:	30 05       	cpc	r19, r0
    3ff6:	40 05       	cpc	r20, r0
    3ff8:	50 05       	cpc	r21, r0
    3ffa:	60 05       	cpc	r22, r0
    3ffc:	70 05       	cpc	r23, r0
    3ffe:	80 05       	cpc	r24, r0
    4000:	90 05       	cpc	r25, r0
    4002:	08 95       	ret

00004004 <__umulhisi3>:
    4004:	a2 9f       	mul	r26, r18
    4006:	b0 01       	movw	r22, r0
    4008:	b3 9f       	mul	r27, r19
    400a:	c0 01       	movw	r24, r0
    400c:	a3 9f       	mul	r26, r19
    400e:	70 0d       	add	r23, r0
    4010:	81 1d       	adc	r24, r1
    4012:	11 24       	eor	r1, r1
    4014:	91 1d       	adc	r25, r1
    4016:	b2 9f       	mul	r27, r18
    4018:	70 0d       	add	r23, r0
    401a:	81 1d       	adc	r24, r1
    401c:	11 24       	eor	r1, r1
    401e:	91 1d       	adc	r25, r1
    4020:	08 95       	ret

00004022 <__ftoa_engine>:
    4022:	28 30       	cpi	r18, 0x08	; 8
    4024:	08 f0       	brcs	.+2      	; 0x4028 <__ftoa_engine+0x6>
    4026:	27 e0       	ldi	r18, 0x07	; 7
    4028:	33 27       	eor	r19, r19
    402a:	da 01       	movw	r26, r20
    402c:	99 0f       	add	r25, r25
    402e:	31 1d       	adc	r19, r1
    4030:	87 fd       	sbrc	r24, 7
    4032:	91 60       	ori	r25, 0x01	; 1
    4034:	00 96       	adiw	r24, 0x00	; 0
    4036:	61 05       	cpc	r22, r1
    4038:	71 05       	cpc	r23, r1
    403a:	39 f4       	brne	.+14     	; 0x404a <__ftoa_engine+0x28>
    403c:	32 60       	ori	r19, 0x02	; 2
    403e:	2e 5f       	subi	r18, 0xFE	; 254
    4040:	3d 93       	st	X+, r19
    4042:	30 e3       	ldi	r19, 0x30	; 48
    4044:	2a 95       	dec	r18
    4046:	e1 f7       	brne	.-8      	; 0x4040 <__ftoa_engine+0x1e>
    4048:	08 95       	ret
    404a:	9f 3f       	cpi	r25, 0xFF	; 255
    404c:	30 f0       	brcs	.+12     	; 0x405a <__ftoa_engine+0x38>
    404e:	80 38       	cpi	r24, 0x80	; 128
    4050:	71 05       	cpc	r23, r1
    4052:	61 05       	cpc	r22, r1
    4054:	09 f0       	breq	.+2      	; 0x4058 <__ftoa_engine+0x36>
    4056:	3c 5f       	subi	r19, 0xFC	; 252
    4058:	3c 5f       	subi	r19, 0xFC	; 252
    405a:	3d 93       	st	X+, r19
    405c:	91 30       	cpi	r25, 0x01	; 1
    405e:	08 f0       	brcs	.+2      	; 0x4062 <__ftoa_engine+0x40>
    4060:	80 68       	ori	r24, 0x80	; 128
    4062:	91 1d       	adc	r25, r1
    4064:	df 93       	push	r29
    4066:	cf 93       	push	r28
    4068:	1f 93       	push	r17
    406a:	0f 93       	push	r16
    406c:	ff 92       	push	r15
    406e:	ef 92       	push	r14
    4070:	19 2f       	mov	r17, r25
    4072:	98 7f       	andi	r25, 0xF8	; 248
    4074:	96 95       	lsr	r25
    4076:	e9 2f       	mov	r30, r25
    4078:	96 95       	lsr	r25
    407a:	96 95       	lsr	r25
    407c:	e9 0f       	add	r30, r25
    407e:	ff 27       	eor	r31, r31
    4080:	e2 5a       	subi	r30, 0xA2	; 162
    4082:	fc 4f       	sbci	r31, 0xFC	; 252
    4084:	99 27       	eor	r25, r25
    4086:	33 27       	eor	r19, r19
    4088:	ee 24       	eor	r14, r14
    408a:	ff 24       	eor	r15, r15
    408c:	a7 01       	movw	r20, r14
    408e:	e7 01       	movw	r28, r14
    4090:	05 90       	lpm	r0, Z+
    4092:	08 94       	sec
    4094:	07 94       	ror	r0
    4096:	28 f4       	brcc	.+10     	; 0x40a2 <__ftoa_engine+0x80>
    4098:	36 0f       	add	r19, r22
    409a:	e7 1e       	adc	r14, r23
    409c:	f8 1e       	adc	r15, r24
    409e:	49 1f       	adc	r20, r25
    40a0:	51 1d       	adc	r21, r1
    40a2:	66 0f       	add	r22, r22
    40a4:	77 1f       	adc	r23, r23
    40a6:	88 1f       	adc	r24, r24
    40a8:	99 1f       	adc	r25, r25
    40aa:	06 94       	lsr	r0
    40ac:	a1 f7       	brne	.-24     	; 0x4096 <__ftoa_engine+0x74>
    40ae:	05 90       	lpm	r0, Z+
    40b0:	07 94       	ror	r0
    40b2:	28 f4       	brcc	.+10     	; 0x40be <__ftoa_engine+0x9c>
    40b4:	e7 0e       	add	r14, r23
    40b6:	f8 1e       	adc	r15, r24
    40b8:	49 1f       	adc	r20, r25
    40ba:	56 1f       	adc	r21, r22
    40bc:	c1 1d       	adc	r28, r1
    40be:	77 0f       	add	r23, r23
    40c0:	88 1f       	adc	r24, r24
    40c2:	99 1f       	adc	r25, r25
    40c4:	66 1f       	adc	r22, r22
    40c6:	06 94       	lsr	r0
    40c8:	a1 f7       	brne	.-24     	; 0x40b2 <__ftoa_engine+0x90>
    40ca:	05 90       	lpm	r0, Z+
    40cc:	07 94       	ror	r0
    40ce:	28 f4       	brcc	.+10     	; 0x40da <__ftoa_engine+0xb8>
    40d0:	f8 0e       	add	r15, r24
    40d2:	49 1f       	adc	r20, r25
    40d4:	56 1f       	adc	r21, r22
    40d6:	c7 1f       	adc	r28, r23
    40d8:	d1 1d       	adc	r29, r1
    40da:	88 0f       	add	r24, r24
    40dc:	99 1f       	adc	r25, r25
    40de:	66 1f       	adc	r22, r22
    40e0:	77 1f       	adc	r23, r23
    40e2:	06 94       	lsr	r0
    40e4:	a1 f7       	brne	.-24     	; 0x40ce <__ftoa_engine+0xac>
    40e6:	05 90       	lpm	r0, Z+
    40e8:	07 94       	ror	r0
    40ea:	20 f4       	brcc	.+8      	; 0x40f4 <__ftoa_engine+0xd2>
    40ec:	49 0f       	add	r20, r25
    40ee:	56 1f       	adc	r21, r22
    40f0:	c7 1f       	adc	r28, r23
    40f2:	d8 1f       	adc	r29, r24
    40f4:	99 0f       	add	r25, r25
    40f6:	66 1f       	adc	r22, r22
    40f8:	77 1f       	adc	r23, r23
    40fa:	88 1f       	adc	r24, r24
    40fc:	06 94       	lsr	r0
    40fe:	a9 f7       	brne	.-22     	; 0x40ea <__ftoa_engine+0xc8>
    4100:	84 91       	lpm	r24, Z
    4102:	10 95       	com	r17
    4104:	17 70       	andi	r17, 0x07	; 7
    4106:	41 f0       	breq	.+16     	; 0x4118 <__ftoa_engine+0xf6>
    4108:	d6 95       	lsr	r29
    410a:	c7 95       	ror	r28
    410c:	57 95       	ror	r21
    410e:	47 95       	ror	r20
    4110:	f7 94       	ror	r15
    4112:	e7 94       	ror	r14
    4114:	1a 95       	dec	r17
    4116:	c1 f7       	brne	.-16     	; 0x4108 <__ftoa_engine+0xe6>
    4118:	e4 e0       	ldi	r30, 0x04	; 4
    411a:	f3 e0       	ldi	r31, 0x03	; 3
    411c:	68 94       	set
    411e:	15 90       	lpm	r1, Z+
    4120:	15 91       	lpm	r17, Z+
    4122:	35 91       	lpm	r19, Z+
    4124:	65 91       	lpm	r22, Z+
    4126:	95 91       	lpm	r25, Z+
    4128:	05 90       	lpm	r0, Z+
    412a:	7f e2       	ldi	r23, 0x2F	; 47
    412c:	73 95       	inc	r23
    412e:	e1 18       	sub	r14, r1
    4130:	f1 0a       	sbc	r15, r17
    4132:	43 0b       	sbc	r20, r19
    4134:	56 0b       	sbc	r21, r22
    4136:	c9 0b       	sbc	r28, r25
    4138:	d0 09       	sbc	r29, r0
    413a:	c0 f7       	brcc	.-16     	; 0x412c <__ftoa_engine+0x10a>
    413c:	e1 0c       	add	r14, r1
    413e:	f1 1e       	adc	r15, r17
    4140:	43 1f       	adc	r20, r19
    4142:	56 1f       	adc	r21, r22
    4144:	c9 1f       	adc	r28, r25
    4146:	d0 1d       	adc	r29, r0
    4148:	7e f4       	brtc	.+30     	; 0x4168 <__ftoa_engine+0x146>
    414a:	70 33       	cpi	r23, 0x30	; 48
    414c:	11 f4       	brne	.+4      	; 0x4152 <__ftoa_engine+0x130>
    414e:	8a 95       	dec	r24
    4150:	e6 cf       	rjmp	.-52     	; 0x411e <__ftoa_engine+0xfc>
    4152:	e8 94       	clt
    4154:	01 50       	subi	r16, 0x01	; 1
    4156:	30 f0       	brcs	.+12     	; 0x4164 <__ftoa_engine+0x142>
    4158:	08 0f       	add	r16, r24
    415a:	0a f4       	brpl	.+2      	; 0x415e <__ftoa_engine+0x13c>
    415c:	00 27       	eor	r16, r16
    415e:	02 17       	cp	r16, r18
    4160:	08 f4       	brcc	.+2      	; 0x4164 <__ftoa_engine+0x142>
    4162:	20 2f       	mov	r18, r16
    4164:	23 95       	inc	r18
    4166:	02 2f       	mov	r16, r18
    4168:	7a 33       	cpi	r23, 0x3A	; 58
    416a:	28 f0       	brcs	.+10     	; 0x4176 <__ftoa_engine+0x154>
    416c:	79 e3       	ldi	r23, 0x39	; 57
    416e:	7d 93       	st	X+, r23
    4170:	2a 95       	dec	r18
    4172:	e9 f7       	brne	.-6      	; 0x416e <__ftoa_engine+0x14c>
    4174:	10 c0       	rjmp	.+32     	; 0x4196 <__ftoa_engine+0x174>
    4176:	7d 93       	st	X+, r23
    4178:	2a 95       	dec	r18
    417a:	89 f6       	brne	.-94     	; 0x411e <__ftoa_engine+0xfc>
    417c:	06 94       	lsr	r0
    417e:	97 95       	ror	r25
    4180:	67 95       	ror	r22
    4182:	37 95       	ror	r19
    4184:	17 95       	ror	r17
    4186:	17 94       	ror	r1
    4188:	e1 18       	sub	r14, r1
    418a:	f1 0a       	sbc	r15, r17
    418c:	43 0b       	sbc	r20, r19
    418e:	56 0b       	sbc	r21, r22
    4190:	c9 0b       	sbc	r28, r25
    4192:	d0 09       	sbc	r29, r0
    4194:	98 f0       	brcs	.+38     	; 0x41bc <__ftoa_engine+0x19a>
    4196:	23 95       	inc	r18
    4198:	7e 91       	ld	r23, -X
    419a:	73 95       	inc	r23
    419c:	7a 33       	cpi	r23, 0x3A	; 58
    419e:	08 f0       	brcs	.+2      	; 0x41a2 <__ftoa_engine+0x180>
    41a0:	70 e3       	ldi	r23, 0x30	; 48
    41a2:	7c 93       	st	X, r23
    41a4:	20 13       	cpse	r18, r16
    41a6:	b8 f7       	brcc	.-18     	; 0x4196 <__ftoa_engine+0x174>
    41a8:	7e 91       	ld	r23, -X
    41aa:	70 61       	ori	r23, 0x10	; 16
    41ac:	7d 93       	st	X+, r23
    41ae:	30 f0       	brcs	.+12     	; 0x41bc <__ftoa_engine+0x19a>
    41b0:	83 95       	inc	r24
    41b2:	71 e3       	ldi	r23, 0x31	; 49
    41b4:	7d 93       	st	X+, r23
    41b6:	70 e3       	ldi	r23, 0x30	; 48
    41b8:	2a 95       	dec	r18
    41ba:	e1 f7       	brne	.-8      	; 0x41b4 <__ftoa_engine+0x192>
    41bc:	11 24       	eor	r1, r1
    41be:	ef 90       	pop	r14
    41c0:	ff 90       	pop	r15
    41c2:	0f 91       	pop	r16
    41c4:	1f 91       	pop	r17
    41c6:	cf 91       	pop	r28
    41c8:	df 91       	pop	r29
    41ca:	99 27       	eor	r25, r25
    41cc:	87 fd       	sbrc	r24, 7
    41ce:	90 95       	com	r25
    41d0:	08 95       	ret

000041d2 <strnlen_P>:
    41d2:	fc 01       	movw	r30, r24
    41d4:	05 90       	lpm	r0, Z+
    41d6:	61 50       	subi	r22, 0x01	; 1
    41d8:	70 40       	sbci	r23, 0x00	; 0
    41da:	01 10       	cpse	r0, r1
    41dc:	d8 f7       	brcc	.-10     	; 0x41d4 <strnlen_P+0x2>
    41de:	80 95       	com	r24
    41e0:	90 95       	com	r25
    41e2:	8e 0f       	add	r24, r30
    41e4:	9f 1f       	adc	r25, r31
    41e6:	08 95       	ret

000041e8 <strnlen>:
    41e8:	fc 01       	movw	r30, r24
    41ea:	61 50       	subi	r22, 0x01	; 1
    41ec:	70 40       	sbci	r23, 0x00	; 0
    41ee:	01 90       	ld	r0, Z+
    41f0:	01 10       	cpse	r0, r1
    41f2:	d8 f7       	brcc	.-10     	; 0x41ea <strnlen+0x2>
    41f4:	80 95       	com	r24
    41f6:	90 95       	com	r25
    41f8:	8e 0f       	add	r24, r30
    41fa:	9f 1f       	adc	r25, r31
    41fc:	08 95       	ret

000041fe <fdevopen>:
    41fe:	0f 93       	push	r16
    4200:	1f 93       	push	r17
    4202:	cf 93       	push	r28
    4204:	df 93       	push	r29
    4206:	00 97       	sbiw	r24, 0x00	; 0
    4208:	31 f4       	brne	.+12     	; 0x4216 <fdevopen+0x18>
    420a:	61 15       	cp	r22, r1
    420c:	71 05       	cpc	r23, r1
    420e:	19 f4       	brne	.+6      	; 0x4216 <fdevopen+0x18>
    4210:	80 e0       	ldi	r24, 0x00	; 0
    4212:	90 e0       	ldi	r25, 0x00	; 0
    4214:	39 c0       	rjmp	.+114    	; 0x4288 <fdevopen+0x8a>
    4216:	8b 01       	movw	r16, r22
    4218:	ec 01       	movw	r28, r24
    421a:	6e e0       	ldi	r22, 0x0E	; 14
    421c:	70 e0       	ldi	r23, 0x00	; 0
    421e:	81 e0       	ldi	r24, 0x01	; 1
    4220:	90 e0       	ldi	r25, 0x00	; 0
    4222:	14 d1       	rcall	.+552    	; 0x444c <calloc>
    4224:	fc 01       	movw	r30, r24
    4226:	89 2b       	or	r24, r25
    4228:	99 f3       	breq	.-26     	; 0x4210 <fdevopen+0x12>
    422a:	80 e8       	ldi	r24, 0x80	; 128
    422c:	83 83       	std	Z+3, r24	; 0x03
    422e:	01 15       	cp	r16, r1
    4230:	11 05       	cpc	r17, r1
    4232:	71 f0       	breq	.+28     	; 0x4250 <fdevopen+0x52>
    4234:	02 87       	std	Z+10, r16	; 0x0a
    4236:	13 87       	std	Z+11, r17	; 0x0b
    4238:	81 e8       	ldi	r24, 0x81	; 129
    423a:	83 83       	std	Z+3, r24	; 0x03
    423c:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <__iob>
    4240:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <__iob+0x1>
    4244:	89 2b       	or	r24, r25
    4246:	21 f4       	brne	.+8      	; 0x4250 <fdevopen+0x52>
    4248:	e0 93 bc 20 	sts	0x20BC, r30	; 0x8020bc <__iob>
    424c:	f0 93 bd 20 	sts	0x20BD, r31	; 0x8020bd <__iob+0x1>
    4250:	20 97       	sbiw	r28, 0x00	; 0
    4252:	c9 f0       	breq	.+50     	; 0x4286 <fdevopen+0x88>
    4254:	c0 87       	std	Z+8, r28	; 0x08
    4256:	d1 87       	std	Z+9, r29	; 0x09
    4258:	83 81       	ldd	r24, Z+3	; 0x03
    425a:	82 60       	ori	r24, 0x02	; 2
    425c:	83 83       	std	Z+3, r24	; 0x03
    425e:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <__iob+0x2>
    4262:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <__iob+0x3>
    4266:	89 2b       	or	r24, r25
    4268:	71 f4       	brne	.+28     	; 0x4286 <fdevopen+0x88>
    426a:	e0 93 be 20 	sts	0x20BE, r30	; 0x8020be <__iob+0x2>
    426e:	f0 93 bf 20 	sts	0x20BF, r31	; 0x8020bf <__iob+0x3>
    4272:	80 91 c0 20 	lds	r24, 0x20C0	; 0x8020c0 <__iob+0x4>
    4276:	90 91 c1 20 	lds	r25, 0x20C1	; 0x8020c1 <__iob+0x5>
    427a:	89 2b       	or	r24, r25
    427c:	21 f4       	brne	.+8      	; 0x4286 <fdevopen+0x88>
    427e:	e0 93 c0 20 	sts	0x20C0, r30	; 0x8020c0 <__iob+0x4>
    4282:	f0 93 c1 20 	sts	0x20C1, r31	; 0x8020c1 <__iob+0x5>
    4286:	cf 01       	movw	r24, r30
    4288:	df 91       	pop	r29
    428a:	cf 91       	pop	r28
    428c:	1f 91       	pop	r17
    428e:	0f 91       	pop	r16
    4290:	08 95       	ret

00004292 <fputc>:
    4292:	0f 93       	push	r16
    4294:	1f 93       	push	r17
    4296:	cf 93       	push	r28
    4298:	df 93       	push	r29
    429a:	fb 01       	movw	r30, r22
    429c:	23 81       	ldd	r18, Z+3	; 0x03
    429e:	21 fd       	sbrc	r18, 1
    42a0:	03 c0       	rjmp	.+6      	; 0x42a8 <fputc+0x16>
    42a2:	8f ef       	ldi	r24, 0xFF	; 255
    42a4:	9f ef       	ldi	r25, 0xFF	; 255
    42a6:	2c c0       	rjmp	.+88     	; 0x4300 <fputc+0x6e>
    42a8:	22 ff       	sbrs	r18, 2
    42aa:	16 c0       	rjmp	.+44     	; 0x42d8 <fputc+0x46>
    42ac:	46 81       	ldd	r20, Z+6	; 0x06
    42ae:	57 81       	ldd	r21, Z+7	; 0x07
    42b0:	24 81       	ldd	r18, Z+4	; 0x04
    42b2:	35 81       	ldd	r19, Z+5	; 0x05
    42b4:	42 17       	cp	r20, r18
    42b6:	53 07       	cpc	r21, r19
    42b8:	44 f4       	brge	.+16     	; 0x42ca <fputc+0x38>
    42ba:	a0 81       	ld	r26, Z
    42bc:	b1 81       	ldd	r27, Z+1	; 0x01
    42be:	9d 01       	movw	r18, r26
    42c0:	2f 5f       	subi	r18, 0xFF	; 255
    42c2:	3f 4f       	sbci	r19, 0xFF	; 255
    42c4:	20 83       	st	Z, r18
    42c6:	31 83       	std	Z+1, r19	; 0x01
    42c8:	8c 93       	st	X, r24
    42ca:	26 81       	ldd	r18, Z+6	; 0x06
    42cc:	37 81       	ldd	r19, Z+7	; 0x07
    42ce:	2f 5f       	subi	r18, 0xFF	; 255
    42d0:	3f 4f       	sbci	r19, 0xFF	; 255
    42d2:	26 83       	std	Z+6, r18	; 0x06
    42d4:	37 83       	std	Z+7, r19	; 0x07
    42d6:	14 c0       	rjmp	.+40     	; 0x4300 <fputc+0x6e>
    42d8:	8b 01       	movw	r16, r22
    42da:	ec 01       	movw	r28, r24
    42dc:	fb 01       	movw	r30, r22
    42de:	00 84       	ldd	r0, Z+8	; 0x08
    42e0:	f1 85       	ldd	r31, Z+9	; 0x09
    42e2:	e0 2d       	mov	r30, r0
    42e4:	19 95       	eicall
    42e6:	89 2b       	or	r24, r25
    42e8:	e1 f6       	brne	.-72     	; 0x42a2 <fputc+0x10>
    42ea:	d8 01       	movw	r26, r16
    42ec:	16 96       	adiw	r26, 0x06	; 6
    42ee:	8d 91       	ld	r24, X+
    42f0:	9c 91       	ld	r25, X
    42f2:	17 97       	sbiw	r26, 0x07	; 7
    42f4:	01 96       	adiw	r24, 0x01	; 1
    42f6:	16 96       	adiw	r26, 0x06	; 6
    42f8:	8d 93       	st	X+, r24
    42fa:	9c 93       	st	X, r25
    42fc:	17 97       	sbiw	r26, 0x07	; 7
    42fe:	ce 01       	movw	r24, r28
    4300:	df 91       	pop	r29
    4302:	cf 91       	pop	r28
    4304:	1f 91       	pop	r17
    4306:	0f 91       	pop	r16
    4308:	08 95       	ret

0000430a <printf>:
    430a:	cf 93       	push	r28
    430c:	df 93       	push	r29
    430e:	cd b7       	in	r28, 0x3d	; 61
    4310:	de b7       	in	r29, 0x3e	; 62
    4312:	ae 01       	movw	r20, r28
    4314:	4a 5f       	subi	r20, 0xFA	; 250
    4316:	5f 4f       	sbci	r21, 0xFF	; 255
    4318:	fa 01       	movw	r30, r20
    431a:	61 91       	ld	r22, Z+
    431c:	71 91       	ld	r23, Z+
    431e:	af 01       	movw	r20, r30
    4320:	80 91 be 20 	lds	r24, 0x20BE	; 0x8020be <__iob+0x2>
    4324:	90 91 bf 20 	lds	r25, 0x20BF	; 0x8020bf <__iob+0x3>
    4328:	0f da       	rcall	.-3042   	; 0x3748 <vfprintf>
    432a:	df 91       	pop	r29
    432c:	cf 91       	pop	r28
    432e:	08 95       	ret

00004330 <puts>:
    4330:	0f 93       	push	r16
    4332:	1f 93       	push	r17
    4334:	cf 93       	push	r28
    4336:	df 93       	push	r29
    4338:	e0 91 be 20 	lds	r30, 0x20BE	; 0x8020be <__iob+0x2>
    433c:	f0 91 bf 20 	lds	r31, 0x20BF	; 0x8020bf <__iob+0x3>
    4340:	23 81       	ldd	r18, Z+3	; 0x03
    4342:	21 ff       	sbrs	r18, 1
    4344:	1b c0       	rjmp	.+54     	; 0x437c <puts+0x4c>
    4346:	8c 01       	movw	r16, r24
    4348:	d0 e0       	ldi	r29, 0x00	; 0
    434a:	c0 e0       	ldi	r28, 0x00	; 0
    434c:	f8 01       	movw	r30, r16
    434e:	81 91       	ld	r24, Z+
    4350:	8f 01       	movw	r16, r30
    4352:	60 91 be 20 	lds	r22, 0x20BE	; 0x8020be <__iob+0x2>
    4356:	70 91 bf 20 	lds	r23, 0x20BF	; 0x8020bf <__iob+0x3>
    435a:	db 01       	movw	r26, r22
    435c:	18 96       	adiw	r26, 0x08	; 8
    435e:	ed 91       	ld	r30, X+
    4360:	fc 91       	ld	r31, X
    4362:	19 97       	sbiw	r26, 0x09	; 9
    4364:	88 23       	and	r24, r24
    4366:	31 f0       	breq	.+12     	; 0x4374 <puts+0x44>
    4368:	19 95       	eicall
    436a:	89 2b       	or	r24, r25
    436c:	79 f3       	breq	.-34     	; 0x434c <puts+0x1c>
    436e:	df ef       	ldi	r29, 0xFF	; 255
    4370:	cf ef       	ldi	r28, 0xFF	; 255
    4372:	ec cf       	rjmp	.-40     	; 0x434c <puts+0x1c>
    4374:	8a e0       	ldi	r24, 0x0A	; 10
    4376:	19 95       	eicall
    4378:	89 2b       	or	r24, r25
    437a:	19 f0       	breq	.+6      	; 0x4382 <puts+0x52>
    437c:	8f ef       	ldi	r24, 0xFF	; 255
    437e:	9f ef       	ldi	r25, 0xFF	; 255
    4380:	02 c0       	rjmp	.+4      	; 0x4386 <puts+0x56>
    4382:	8d 2f       	mov	r24, r29
    4384:	9c 2f       	mov	r25, r28
    4386:	df 91       	pop	r29
    4388:	cf 91       	pop	r28
    438a:	1f 91       	pop	r17
    438c:	0f 91       	pop	r16
    438e:	08 95       	ret

00004390 <__ultoa_invert>:
    4390:	fa 01       	movw	r30, r20
    4392:	aa 27       	eor	r26, r26
    4394:	28 30       	cpi	r18, 0x08	; 8
    4396:	51 f1       	breq	.+84     	; 0x43ec <__ultoa_invert+0x5c>
    4398:	20 31       	cpi	r18, 0x10	; 16
    439a:	81 f1       	breq	.+96     	; 0x43fc <__ultoa_invert+0x6c>
    439c:	e8 94       	clt
    439e:	6f 93       	push	r22
    43a0:	6e 7f       	andi	r22, 0xFE	; 254
    43a2:	6e 5f       	subi	r22, 0xFE	; 254
    43a4:	7f 4f       	sbci	r23, 0xFF	; 255
    43a6:	8f 4f       	sbci	r24, 0xFF	; 255
    43a8:	9f 4f       	sbci	r25, 0xFF	; 255
    43aa:	af 4f       	sbci	r26, 0xFF	; 255
    43ac:	b1 e0       	ldi	r27, 0x01	; 1
    43ae:	3e d0       	rcall	.+124    	; 0x442c <__ultoa_invert+0x9c>
    43b0:	b4 e0       	ldi	r27, 0x04	; 4
    43b2:	3c d0       	rcall	.+120    	; 0x442c <__ultoa_invert+0x9c>
    43b4:	67 0f       	add	r22, r23
    43b6:	78 1f       	adc	r23, r24
    43b8:	89 1f       	adc	r24, r25
    43ba:	9a 1f       	adc	r25, r26
    43bc:	a1 1d       	adc	r26, r1
    43be:	68 0f       	add	r22, r24
    43c0:	79 1f       	adc	r23, r25
    43c2:	8a 1f       	adc	r24, r26
    43c4:	91 1d       	adc	r25, r1
    43c6:	a1 1d       	adc	r26, r1
    43c8:	6a 0f       	add	r22, r26
    43ca:	71 1d       	adc	r23, r1
    43cc:	81 1d       	adc	r24, r1
    43ce:	91 1d       	adc	r25, r1
    43d0:	a1 1d       	adc	r26, r1
    43d2:	20 d0       	rcall	.+64     	; 0x4414 <__ultoa_invert+0x84>
    43d4:	09 f4       	brne	.+2      	; 0x43d8 <__ultoa_invert+0x48>
    43d6:	68 94       	set
    43d8:	3f 91       	pop	r19
    43da:	2a e0       	ldi	r18, 0x0A	; 10
    43dc:	26 9f       	mul	r18, r22
    43de:	11 24       	eor	r1, r1
    43e0:	30 19       	sub	r19, r0
    43e2:	30 5d       	subi	r19, 0xD0	; 208
    43e4:	31 93       	st	Z+, r19
    43e6:	de f6       	brtc	.-74     	; 0x439e <__ultoa_invert+0xe>
    43e8:	cf 01       	movw	r24, r30
    43ea:	08 95       	ret
    43ec:	46 2f       	mov	r20, r22
    43ee:	47 70       	andi	r20, 0x07	; 7
    43f0:	40 5d       	subi	r20, 0xD0	; 208
    43f2:	41 93       	st	Z+, r20
    43f4:	b3 e0       	ldi	r27, 0x03	; 3
    43f6:	0f d0       	rcall	.+30     	; 0x4416 <__ultoa_invert+0x86>
    43f8:	c9 f7       	brne	.-14     	; 0x43ec <__ultoa_invert+0x5c>
    43fa:	f6 cf       	rjmp	.-20     	; 0x43e8 <__ultoa_invert+0x58>
    43fc:	46 2f       	mov	r20, r22
    43fe:	4f 70       	andi	r20, 0x0F	; 15
    4400:	40 5d       	subi	r20, 0xD0	; 208
    4402:	4a 33       	cpi	r20, 0x3A	; 58
    4404:	18 f0       	brcs	.+6      	; 0x440c <__ultoa_invert+0x7c>
    4406:	49 5d       	subi	r20, 0xD9	; 217
    4408:	31 fd       	sbrc	r19, 1
    440a:	40 52       	subi	r20, 0x20	; 32
    440c:	41 93       	st	Z+, r20
    440e:	02 d0       	rcall	.+4      	; 0x4414 <__ultoa_invert+0x84>
    4410:	a9 f7       	brne	.-22     	; 0x43fc <__ultoa_invert+0x6c>
    4412:	ea cf       	rjmp	.-44     	; 0x43e8 <__ultoa_invert+0x58>
    4414:	b4 e0       	ldi	r27, 0x04	; 4
    4416:	a6 95       	lsr	r26
    4418:	97 95       	ror	r25
    441a:	87 95       	ror	r24
    441c:	77 95       	ror	r23
    441e:	67 95       	ror	r22
    4420:	ba 95       	dec	r27
    4422:	c9 f7       	brne	.-14     	; 0x4416 <__ultoa_invert+0x86>
    4424:	00 97       	sbiw	r24, 0x00	; 0
    4426:	61 05       	cpc	r22, r1
    4428:	71 05       	cpc	r23, r1
    442a:	08 95       	ret
    442c:	9b 01       	movw	r18, r22
    442e:	ac 01       	movw	r20, r24
    4430:	0a 2e       	mov	r0, r26
    4432:	06 94       	lsr	r0
    4434:	57 95       	ror	r21
    4436:	47 95       	ror	r20
    4438:	37 95       	ror	r19
    443a:	27 95       	ror	r18
    443c:	ba 95       	dec	r27
    443e:	c9 f7       	brne	.-14     	; 0x4432 <__ultoa_invert+0xa2>
    4440:	62 0f       	add	r22, r18
    4442:	73 1f       	adc	r23, r19
    4444:	84 1f       	adc	r24, r20
    4446:	95 1f       	adc	r25, r21
    4448:	a0 1d       	adc	r26, r0
    444a:	08 95       	ret

0000444c <calloc>:
    444c:	0f 93       	push	r16
    444e:	1f 93       	push	r17
    4450:	cf 93       	push	r28
    4452:	df 93       	push	r29
    4454:	86 9f       	mul	r24, r22
    4456:	80 01       	movw	r16, r0
    4458:	87 9f       	mul	r24, r23
    445a:	10 0d       	add	r17, r0
    445c:	96 9f       	mul	r25, r22
    445e:	10 0d       	add	r17, r0
    4460:	11 24       	eor	r1, r1
    4462:	c8 01       	movw	r24, r16
    4464:	0d d0       	rcall	.+26     	; 0x4480 <malloc>
    4466:	ec 01       	movw	r28, r24
    4468:	00 97       	sbiw	r24, 0x00	; 0
    446a:	21 f0       	breq	.+8      	; 0x4474 <calloc+0x28>
    446c:	a8 01       	movw	r20, r16
    446e:	60 e0       	ldi	r22, 0x00	; 0
    4470:	70 e0       	ldi	r23, 0x00	; 0
    4472:	27 d1       	rcall	.+590    	; 0x46c2 <memset>
    4474:	ce 01       	movw	r24, r28
    4476:	df 91       	pop	r29
    4478:	cf 91       	pop	r28
    447a:	1f 91       	pop	r17
    447c:	0f 91       	pop	r16
    447e:	08 95       	ret

00004480 <malloc>:
    4480:	0f 93       	push	r16
    4482:	1f 93       	push	r17
    4484:	cf 93       	push	r28
    4486:	df 93       	push	r29
    4488:	82 30       	cpi	r24, 0x02	; 2
    448a:	91 05       	cpc	r25, r1
    448c:	10 f4       	brcc	.+4      	; 0x4492 <malloc+0x12>
    448e:	82 e0       	ldi	r24, 0x02	; 2
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	e0 91 c4 20 	lds	r30, 0x20C4	; 0x8020c4 <__flp>
    4496:	f0 91 c5 20 	lds	r31, 0x20C5	; 0x8020c5 <__flp+0x1>
    449a:	20 e0       	ldi	r18, 0x00	; 0
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	a0 e0       	ldi	r26, 0x00	; 0
    44a0:	b0 e0       	ldi	r27, 0x00	; 0
    44a2:	30 97       	sbiw	r30, 0x00	; 0
    44a4:	19 f1       	breq	.+70     	; 0x44ec <malloc+0x6c>
    44a6:	40 81       	ld	r20, Z
    44a8:	51 81       	ldd	r21, Z+1	; 0x01
    44aa:	02 81       	ldd	r16, Z+2	; 0x02
    44ac:	13 81       	ldd	r17, Z+3	; 0x03
    44ae:	48 17       	cp	r20, r24
    44b0:	59 07       	cpc	r21, r25
    44b2:	c8 f0       	brcs	.+50     	; 0x44e6 <malloc+0x66>
    44b4:	84 17       	cp	r24, r20
    44b6:	95 07       	cpc	r25, r21
    44b8:	69 f4       	brne	.+26     	; 0x44d4 <malloc+0x54>
    44ba:	10 97       	sbiw	r26, 0x00	; 0
    44bc:	31 f0       	breq	.+12     	; 0x44ca <malloc+0x4a>
    44be:	12 96       	adiw	r26, 0x02	; 2
    44c0:	0c 93       	st	X, r16
    44c2:	12 97       	sbiw	r26, 0x02	; 2
    44c4:	13 96       	adiw	r26, 0x03	; 3
    44c6:	1c 93       	st	X, r17
    44c8:	27 c0       	rjmp	.+78     	; 0x4518 <malloc+0x98>
    44ca:	00 93 c4 20 	sts	0x20C4, r16	; 0x8020c4 <__flp>
    44ce:	10 93 c5 20 	sts	0x20C5, r17	; 0x8020c5 <__flp+0x1>
    44d2:	22 c0       	rjmp	.+68     	; 0x4518 <malloc+0x98>
    44d4:	21 15       	cp	r18, r1
    44d6:	31 05       	cpc	r19, r1
    44d8:	19 f0       	breq	.+6      	; 0x44e0 <malloc+0x60>
    44da:	42 17       	cp	r20, r18
    44dc:	53 07       	cpc	r21, r19
    44de:	18 f4       	brcc	.+6      	; 0x44e6 <malloc+0x66>
    44e0:	9a 01       	movw	r18, r20
    44e2:	bd 01       	movw	r22, r26
    44e4:	ef 01       	movw	r28, r30
    44e6:	df 01       	movw	r26, r30
    44e8:	f8 01       	movw	r30, r16
    44ea:	db cf       	rjmp	.-74     	; 0x44a2 <malloc+0x22>
    44ec:	21 15       	cp	r18, r1
    44ee:	31 05       	cpc	r19, r1
    44f0:	f9 f0       	breq	.+62     	; 0x4530 <malloc+0xb0>
    44f2:	28 1b       	sub	r18, r24
    44f4:	39 0b       	sbc	r19, r25
    44f6:	24 30       	cpi	r18, 0x04	; 4
    44f8:	31 05       	cpc	r19, r1
    44fa:	80 f4       	brcc	.+32     	; 0x451c <malloc+0x9c>
    44fc:	8a 81       	ldd	r24, Y+2	; 0x02
    44fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4500:	61 15       	cp	r22, r1
    4502:	71 05       	cpc	r23, r1
    4504:	21 f0       	breq	.+8      	; 0x450e <malloc+0x8e>
    4506:	fb 01       	movw	r30, r22
    4508:	82 83       	std	Z+2, r24	; 0x02
    450a:	93 83       	std	Z+3, r25	; 0x03
    450c:	04 c0       	rjmp	.+8      	; 0x4516 <malloc+0x96>
    450e:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <__flp>
    4512:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <__flp+0x1>
    4516:	fe 01       	movw	r30, r28
    4518:	32 96       	adiw	r30, 0x02	; 2
    451a:	44 c0       	rjmp	.+136    	; 0x45a4 <malloc+0x124>
    451c:	fe 01       	movw	r30, r28
    451e:	e2 0f       	add	r30, r18
    4520:	f3 1f       	adc	r31, r19
    4522:	81 93       	st	Z+, r24
    4524:	91 93       	st	Z+, r25
    4526:	22 50       	subi	r18, 0x02	; 2
    4528:	31 09       	sbc	r19, r1
    452a:	28 83       	st	Y, r18
    452c:	39 83       	std	Y+1, r19	; 0x01
    452e:	3a c0       	rjmp	.+116    	; 0x45a4 <malloc+0x124>
    4530:	20 91 c2 20 	lds	r18, 0x20C2	; 0x8020c2 <__brkval>
    4534:	30 91 c3 20 	lds	r19, 0x20C3	; 0x8020c3 <__brkval+0x1>
    4538:	23 2b       	or	r18, r19
    453a:	41 f4       	brne	.+16     	; 0x454c <malloc+0xcc>
    453c:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4540:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    4544:	20 93 c2 20 	sts	0x20C2, r18	; 0x8020c2 <__brkval>
    4548:	30 93 c3 20 	sts	0x20C3, r19	; 0x8020c3 <__brkval+0x1>
    454c:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4550:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    4554:	21 15       	cp	r18, r1
    4556:	31 05       	cpc	r19, r1
    4558:	41 f4       	brne	.+16     	; 0x456a <malloc+0xea>
    455a:	2d b7       	in	r18, 0x3d	; 61
    455c:	3e b7       	in	r19, 0x3e	; 62
    455e:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4562:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    4566:	24 1b       	sub	r18, r20
    4568:	35 0b       	sbc	r19, r21
    456a:	e0 91 c2 20 	lds	r30, 0x20C2	; 0x8020c2 <__brkval>
    456e:	f0 91 c3 20 	lds	r31, 0x20C3	; 0x8020c3 <__brkval+0x1>
    4572:	e2 17       	cp	r30, r18
    4574:	f3 07       	cpc	r31, r19
    4576:	a0 f4       	brcc	.+40     	; 0x45a0 <malloc+0x120>
    4578:	2e 1b       	sub	r18, r30
    457a:	3f 0b       	sbc	r19, r31
    457c:	28 17       	cp	r18, r24
    457e:	39 07       	cpc	r19, r25
    4580:	78 f0       	brcs	.+30     	; 0x45a0 <malloc+0x120>
    4582:	ac 01       	movw	r20, r24
    4584:	4e 5f       	subi	r20, 0xFE	; 254
    4586:	5f 4f       	sbci	r21, 0xFF	; 255
    4588:	24 17       	cp	r18, r20
    458a:	35 07       	cpc	r19, r21
    458c:	48 f0       	brcs	.+18     	; 0x45a0 <malloc+0x120>
    458e:	4e 0f       	add	r20, r30
    4590:	5f 1f       	adc	r21, r31
    4592:	40 93 c2 20 	sts	0x20C2, r20	; 0x8020c2 <__brkval>
    4596:	50 93 c3 20 	sts	0x20C3, r21	; 0x8020c3 <__brkval+0x1>
    459a:	81 93       	st	Z+, r24
    459c:	91 93       	st	Z+, r25
    459e:	02 c0       	rjmp	.+4      	; 0x45a4 <malloc+0x124>
    45a0:	e0 e0       	ldi	r30, 0x00	; 0
    45a2:	f0 e0       	ldi	r31, 0x00	; 0
    45a4:	cf 01       	movw	r24, r30
    45a6:	df 91       	pop	r29
    45a8:	cf 91       	pop	r28
    45aa:	1f 91       	pop	r17
    45ac:	0f 91       	pop	r16
    45ae:	08 95       	ret

000045b0 <free>:
    45b0:	cf 93       	push	r28
    45b2:	df 93       	push	r29
    45b4:	00 97       	sbiw	r24, 0x00	; 0
    45b6:	09 f4       	brne	.+2      	; 0x45ba <free+0xa>
    45b8:	81 c0       	rjmp	.+258    	; 0x46bc <free+0x10c>
    45ba:	fc 01       	movw	r30, r24
    45bc:	32 97       	sbiw	r30, 0x02	; 2
    45be:	12 82       	std	Z+2, r1	; 0x02
    45c0:	13 82       	std	Z+3, r1	; 0x03
    45c2:	a0 91 c4 20 	lds	r26, 0x20C4	; 0x8020c4 <__flp>
    45c6:	b0 91 c5 20 	lds	r27, 0x20C5	; 0x8020c5 <__flp+0x1>
    45ca:	10 97       	sbiw	r26, 0x00	; 0
    45cc:	81 f4       	brne	.+32     	; 0x45ee <free+0x3e>
    45ce:	20 81       	ld	r18, Z
    45d0:	31 81       	ldd	r19, Z+1	; 0x01
    45d2:	82 0f       	add	r24, r18
    45d4:	93 1f       	adc	r25, r19
    45d6:	20 91 c2 20 	lds	r18, 0x20C2	; 0x8020c2 <__brkval>
    45da:	30 91 c3 20 	lds	r19, 0x20C3	; 0x8020c3 <__brkval+0x1>
    45de:	28 17       	cp	r18, r24
    45e0:	39 07       	cpc	r19, r25
    45e2:	51 f5       	brne	.+84     	; 0x4638 <free+0x88>
    45e4:	e0 93 c2 20 	sts	0x20C2, r30	; 0x8020c2 <__brkval>
    45e8:	f0 93 c3 20 	sts	0x20C3, r31	; 0x8020c3 <__brkval+0x1>
    45ec:	67 c0       	rjmp	.+206    	; 0x46bc <free+0x10c>
    45ee:	ed 01       	movw	r28, r26
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	ce 17       	cp	r28, r30
    45f6:	df 07       	cpc	r29, r31
    45f8:	40 f4       	brcc	.+16     	; 0x460a <free+0x5a>
    45fa:	4a 81       	ldd	r20, Y+2	; 0x02
    45fc:	5b 81       	ldd	r21, Y+3	; 0x03
    45fe:	9e 01       	movw	r18, r28
    4600:	41 15       	cp	r20, r1
    4602:	51 05       	cpc	r21, r1
    4604:	f1 f0       	breq	.+60     	; 0x4642 <free+0x92>
    4606:	ea 01       	movw	r28, r20
    4608:	f5 cf       	rjmp	.-22     	; 0x45f4 <free+0x44>
    460a:	c2 83       	std	Z+2, r28	; 0x02
    460c:	d3 83       	std	Z+3, r29	; 0x03
    460e:	40 81       	ld	r20, Z
    4610:	51 81       	ldd	r21, Z+1	; 0x01
    4612:	84 0f       	add	r24, r20
    4614:	95 1f       	adc	r25, r21
    4616:	c8 17       	cp	r28, r24
    4618:	d9 07       	cpc	r29, r25
    461a:	59 f4       	brne	.+22     	; 0x4632 <free+0x82>
    461c:	88 81       	ld	r24, Y
    461e:	99 81       	ldd	r25, Y+1	; 0x01
    4620:	84 0f       	add	r24, r20
    4622:	95 1f       	adc	r25, r21
    4624:	02 96       	adiw	r24, 0x02	; 2
    4626:	80 83       	st	Z, r24
    4628:	91 83       	std	Z+1, r25	; 0x01
    462a:	8a 81       	ldd	r24, Y+2	; 0x02
    462c:	9b 81       	ldd	r25, Y+3	; 0x03
    462e:	82 83       	std	Z+2, r24	; 0x02
    4630:	93 83       	std	Z+3, r25	; 0x03
    4632:	21 15       	cp	r18, r1
    4634:	31 05       	cpc	r19, r1
    4636:	29 f4       	brne	.+10     	; 0x4642 <free+0x92>
    4638:	e0 93 c4 20 	sts	0x20C4, r30	; 0x8020c4 <__flp>
    463c:	f0 93 c5 20 	sts	0x20C5, r31	; 0x8020c5 <__flp+0x1>
    4640:	3d c0       	rjmp	.+122    	; 0x46bc <free+0x10c>
    4642:	e9 01       	movw	r28, r18
    4644:	ea 83       	std	Y+2, r30	; 0x02
    4646:	fb 83       	std	Y+3, r31	; 0x03
    4648:	49 91       	ld	r20, Y+
    464a:	59 91       	ld	r21, Y+
    464c:	c4 0f       	add	r28, r20
    464e:	d5 1f       	adc	r29, r21
    4650:	ec 17       	cp	r30, r28
    4652:	fd 07       	cpc	r31, r29
    4654:	61 f4       	brne	.+24     	; 0x466e <free+0xbe>
    4656:	80 81       	ld	r24, Z
    4658:	91 81       	ldd	r25, Z+1	; 0x01
    465a:	84 0f       	add	r24, r20
    465c:	95 1f       	adc	r25, r21
    465e:	02 96       	adiw	r24, 0x02	; 2
    4660:	e9 01       	movw	r28, r18
    4662:	88 83       	st	Y, r24
    4664:	99 83       	std	Y+1, r25	; 0x01
    4666:	82 81       	ldd	r24, Z+2	; 0x02
    4668:	93 81       	ldd	r25, Z+3	; 0x03
    466a:	8a 83       	std	Y+2, r24	; 0x02
    466c:	9b 83       	std	Y+3, r25	; 0x03
    466e:	e0 e0       	ldi	r30, 0x00	; 0
    4670:	f0 e0       	ldi	r31, 0x00	; 0
    4672:	12 96       	adiw	r26, 0x02	; 2
    4674:	8d 91       	ld	r24, X+
    4676:	9c 91       	ld	r25, X
    4678:	13 97       	sbiw	r26, 0x03	; 3
    467a:	00 97       	sbiw	r24, 0x00	; 0
    467c:	19 f0       	breq	.+6      	; 0x4684 <free+0xd4>
    467e:	fd 01       	movw	r30, r26
    4680:	dc 01       	movw	r26, r24
    4682:	f7 cf       	rjmp	.-18     	; 0x4672 <free+0xc2>
    4684:	8d 91       	ld	r24, X+
    4686:	9c 91       	ld	r25, X
    4688:	11 97       	sbiw	r26, 0x01	; 1
    468a:	9d 01       	movw	r18, r26
    468c:	2e 5f       	subi	r18, 0xFE	; 254
    468e:	3f 4f       	sbci	r19, 0xFF	; 255
    4690:	82 0f       	add	r24, r18
    4692:	93 1f       	adc	r25, r19
    4694:	20 91 c2 20 	lds	r18, 0x20C2	; 0x8020c2 <__brkval>
    4698:	30 91 c3 20 	lds	r19, 0x20C3	; 0x8020c3 <__brkval+0x1>
    469c:	28 17       	cp	r18, r24
    469e:	39 07       	cpc	r19, r25
    46a0:	69 f4       	brne	.+26     	; 0x46bc <free+0x10c>
    46a2:	30 97       	sbiw	r30, 0x00	; 0
    46a4:	29 f4       	brne	.+10     	; 0x46b0 <free+0x100>
    46a6:	10 92 c4 20 	sts	0x20C4, r1	; 0x8020c4 <__flp>
    46aa:	10 92 c5 20 	sts	0x20C5, r1	; 0x8020c5 <__flp+0x1>
    46ae:	02 c0       	rjmp	.+4      	; 0x46b4 <free+0x104>
    46b0:	12 82       	std	Z+2, r1	; 0x02
    46b2:	13 82       	std	Z+3, r1	; 0x03
    46b4:	a0 93 c2 20 	sts	0x20C2, r26	; 0x8020c2 <__brkval>
    46b8:	b0 93 c3 20 	sts	0x20C3, r27	; 0x8020c3 <__brkval+0x1>
    46bc:	df 91       	pop	r29
    46be:	cf 91       	pop	r28
    46c0:	08 95       	ret

000046c2 <memset>:
    46c2:	dc 01       	movw	r26, r24
    46c4:	01 c0       	rjmp	.+2      	; 0x46c8 <memset+0x6>
    46c6:	6d 93       	st	X+, r22
    46c8:	41 50       	subi	r20, 0x01	; 1
    46ca:	50 40       	sbci	r21, 0x00	; 0
    46cc:	e0 f7       	brcc	.-8      	; 0x46c6 <memset+0x4>
    46ce:	08 95       	ret

000046d0 <_exit>:
    46d0:	f8 94       	cli

000046d2 <__stop_program>:
    46d2:	ff cf       	rjmp	.-2      	; 0x46d2 <__stop_program>
