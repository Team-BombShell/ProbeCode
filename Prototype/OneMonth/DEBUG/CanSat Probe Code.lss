
CanSat Probe Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003e  00802000  00003f0a  00003f9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  0080203e  0080203e  00003fdc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003fdc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004038  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000480  00000000  00000000  00004078  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f481  00000000  00000000  000044f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005726  00000000  00000000  00013979  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000075eb  00000000  00000000  0001909f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001874  00000000  00000000  0002068c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00034169  00000000  00000000  00021f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000053ff  00000000  00000000  00056069  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  0005b468  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c64f  00000000  00000000  0005b838  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ab c1       	rjmp	.+854    	; 0x358 <__ctors_end>
       2:	00 00       	nop
       4:	cf c1       	rjmp	.+926    	; 0x3a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c1       	rjmp	.+922    	; 0x3a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c1       	rjmp	.+918    	; 0x3a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c1       	rjmp	.+914    	; 0x3a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c1       	rjmp	.+910    	; 0x3a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c1       	rjmp	.+906    	; 0x3a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c1       	rjmp	.+902    	; 0x3a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c1       	rjmp	.+898    	; 0x3a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c1       	rjmp	.+894    	; 0x3a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	bd c1       	rjmp	.+890    	; 0x3a4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bb c1       	rjmp	.+886    	; 0x3a4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b9 c1       	rjmp	.+882    	; 0x3a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	b7 c1       	rjmp	.+878    	; 0x3a4 <__bad_interrupt>
      36:	00 00       	nop
      38:	24 c4       	rjmp	.+2120   	; 0x882 <__vector_14>
      3a:	00 00       	nop
      3c:	5a c4       	rjmp	.+2228   	; 0x8f2 <__vector_15>
      3e:	00 00       	nop
      40:	90 c4       	rjmp	.+2336   	; 0x962 <__vector_16>
      42:	00 00       	nop
      44:	c6 c4       	rjmp	.+2444   	; 0x9d2 <__vector_17>
      46:	00 00       	nop
      48:	fc c4       	rjmp	.+2552   	; 0xa42 <__vector_18>
      4a:	00 00       	nop
      4c:	32 c5       	rjmp	.+2660   	; 0xab2 <__vector_19>
      4e:	00 00       	nop
      50:	68 c5       	rjmp	.+2768   	; 0xb22 <__vector_20>
      52:	00 00       	nop
      54:	9e c5       	rjmp	.+2876   	; 0xb92 <__vector_21>
      56:	00 00       	nop
      58:	d4 c5       	rjmp	.+2984   	; 0xc02 <__vector_22>
      5a:	00 00       	nop
      5c:	0a c6       	rjmp	.+3092   	; 0xc72 <__vector_23>
      5e:	00 00       	nop
      60:	a1 c1       	rjmp	.+834    	; 0x3a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	9f c1       	rjmp	.+830    	; 0x3a4 <__bad_interrupt>
      66:	00 00       	nop
      68:	9d c1       	rjmp	.+826    	; 0x3a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c1       	rjmp	.+822    	; 0x3a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c1       	rjmp	.+818    	; 0x3a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c1       	rjmp	.+814    	; 0x3a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c1       	rjmp	.+810    	; 0x3a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c1       	rjmp	.+806    	; 0x3a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c1       	rjmp	.+802    	; 0x3a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c1       	rjmp	.+798    	; 0x3a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c1       	rjmp	.+794    	; 0x3a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c1       	rjmp	.+790    	; 0x3a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c1       	rjmp	.+786    	; 0x3a4 <__bad_interrupt>
      92:	00 00       	nop
      94:	87 c1       	rjmp	.+782    	; 0x3a4 <__bad_interrupt>
      96:	00 00       	nop
      98:	85 c1       	rjmp	.+778    	; 0x3a4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ee c2       	rjmp	.+1500   	; 0x67a <__vector_39>
      9e:	00 00       	nop
      a0:	29 c3       	rjmp	.+1618   	; 0x6f4 <__vector_40>
      a2:	00 00       	nop
      a4:	64 c3       	rjmp	.+1736   	; 0x76e <__vector_41>
      a6:	00 00       	nop
      a8:	9f c3       	rjmp	.+1854   	; 0x7e8 <__vector_42>
      aa:	00 00       	nop
      ac:	7b c1       	rjmp	.+758    	; 0x3a4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	79 c1       	rjmp	.+754    	; 0x3a4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	77 c1       	rjmp	.+750    	; 0x3a4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	75 c1       	rjmp	.+746    	; 0x3a4 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__vector_47>
      c0:	0c 94 d9 08 	jmp	0x11b2	; 0x11b2 <__vector_48>
      c4:	0c 94 11 09 	jmp	0x1222	; 0x1222 <__vector_49>
      c8:	0c 94 49 09 	jmp	0x1292	; 0x1292 <__vector_50>
      cc:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__vector_51>
      d0:	0c 94 b9 09 	jmp	0x1372	; 0x1372 <__vector_52>
      d4:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__vector_53>
      d8:	0c 94 29 0a 	jmp	0x1452	; 0x1452 <__vector_54>
      dc:	0c 94 61 0a 	jmp	0x14c2	; 0x14c2 <__vector_55>
      e0:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <__vector_56>
      e4:	5f c1       	rjmp	.+702    	; 0x3a4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	5d c1       	rjmp	.+698    	; 0x3a4 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	5b c1       	rjmp	.+694    	; 0x3a4 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	59 c1       	rjmp	.+690    	; 0x3a4 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	57 c1       	rjmp	.+686    	; 0x3a4 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	55 c1       	rjmp	.+682    	; 0x3a4 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	53 c1       	rjmp	.+678    	; 0x3a4 <__bad_interrupt>
      fe:	00 00       	nop
     100:	51 c1       	rjmp	.+674    	; 0x3a4 <__bad_interrupt>
     102:	00 00       	nop
     104:	4f c1       	rjmp	.+670    	; 0x3a4 <__bad_interrupt>
     106:	00 00       	nop
     108:	4d c1       	rjmp	.+666    	; 0x3a4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	4b c1       	rjmp	.+662    	; 0x3a4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	49 c1       	rjmp	.+658    	; 0x3a4 <__bad_interrupt>
     112:	00 00       	nop
     114:	47 c1       	rjmp	.+654    	; 0x3a4 <__bad_interrupt>
     116:	00 00       	nop
     118:	45 c1       	rjmp	.+650    	; 0x3a4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ba c1       	rjmp	.+884    	; 0x492 <__vector_71>
     11e:	00 00       	nop
     120:	f5 c1       	rjmp	.+1002   	; 0x50c <__vector_72>
     122:	00 00       	nop
     124:	30 c2       	rjmp	.+1120   	; 0x586 <__vector_73>
     126:	00 00       	nop
     128:	6b c2       	rjmp	.+1238   	; 0x600 <__vector_74>
     12a:	00 00       	nop
     12c:	3b c1       	rjmp	.+630    	; 0x3a4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	39 c1       	rjmp	.+626    	; 0x3a4 <__bad_interrupt>
     132:	00 00       	nop
     134:	d6 c5       	rjmp	.+2988   	; 0xce2 <__vector_77>
     136:	00 00       	nop
     138:	0c c6       	rjmp	.+3096   	; 0xd52 <__vector_78>
     13a:	00 00       	nop
     13c:	42 c6       	rjmp	.+3204   	; 0xdc2 <__vector_79>
     13e:	00 00       	nop
     140:	78 c6       	rjmp	.+3312   	; 0xe32 <__vector_80>
     142:	00 00       	nop
     144:	ae c6       	rjmp	.+3420   	; 0xea2 <__vector_81>
     146:	00 00       	nop
     148:	e4 c6       	rjmp	.+3528   	; 0xf12 <__vector_82>
     14a:	00 00       	nop
     14c:	1a c7       	rjmp	.+3636   	; 0xf82 <__vector_83>
     14e:	00 00       	nop
     150:	50 c7       	rjmp	.+3744   	; 0xff2 <__vector_84>
     152:	00 00       	nop
     154:	86 c7       	rjmp	.+3852   	; 0x1062 <__vector_85>
     156:	00 00       	nop
     158:	bc c7       	rjmp	.+3960   	; 0x10d2 <__vector_86>
     15a:	00 00       	nop
     15c:	23 c1       	rjmp	.+582    	; 0x3a4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	21 c1       	rjmp	.+578    	; 0x3a4 <__bad_interrupt>
     162:	00 00       	nop
     164:	1f c1       	rjmp	.+574    	; 0x3a4 <__bad_interrupt>
     166:	00 00       	nop
     168:	1d c1       	rjmp	.+570    	; 0x3a4 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	1b c1       	rjmp	.+566    	; 0x3a4 <__bad_interrupt>
     16e:	00 00       	nop
     170:	19 c1       	rjmp	.+562    	; 0x3a4 <__bad_interrupt>
     172:	00 00       	nop
     174:	17 c1       	rjmp	.+558    	; 0x3a4 <__bad_interrupt>
     176:	00 00       	nop
     178:	15 c1       	rjmp	.+554    	; 0x3a4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	13 c1       	rjmp	.+550    	; 0x3a4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	11 c1       	rjmp	.+546    	; 0x3a4 <__bad_interrupt>
     182:	00 00       	nop
     184:	0f c1       	rjmp	.+542    	; 0x3a4 <__bad_interrupt>
     186:	00 00       	nop
     188:	0d c1       	rjmp	.+538    	; 0x3a4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	0b c1       	rjmp	.+534    	; 0x3a4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	09 c1       	rjmp	.+530    	; 0x3a4 <__bad_interrupt>
     192:	00 00       	nop
     194:	07 c1       	rjmp	.+526    	; 0x3a4 <__bad_interrupt>
     196:	00 00       	nop
     198:	05 c1       	rjmp	.+522    	; 0x3a4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	03 c1       	rjmp	.+518    	; 0x3a4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	01 c1       	rjmp	.+514    	; 0x3a4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	ff c0       	rjmp	.+510    	; 0x3a4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	fd c0       	rjmp	.+506    	; 0x3a4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	fb c0       	rjmp	.+502    	; 0x3a4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 d1 0a 	jmp	0x15a2	; 0x15a2 <__vector_108>
     1b4:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <__vector_109>
     1b8:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <__vector_110>
     1bc:	0c 94 79 0b 	jmp	0x16f2	; 0x16f2 <__vector_111>
     1c0:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__vector_112>
     1c4:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__vector_113>
     1c8:	0c 94 21 0c 	jmp	0x1842	; 0x1842 <__vector_114>
     1cc:	0c 94 59 0c 	jmp	0x18b2	; 0x18b2 <__vector_115>
     1d0:	0c 94 91 0c 	jmp	0x1922	; 0x1922 <__vector_116>
     1d4:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <__vector_117>
     1d8:	e5 c0       	rjmp	.+458    	; 0x3a4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	e3 c0       	rjmp	.+454    	; 0x3a4 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	e1 c0       	rjmp	.+450    	; 0x3a4 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	df c0       	rjmp	.+446    	; 0x3a4 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	dd c0       	rjmp	.+442    	; 0x3a4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	db c0       	rjmp	.+438    	; 0x3a4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	d9 c0       	rjmp	.+434    	; 0x3a4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	d7 c0       	rjmp	.+430    	; 0x3a4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	d5 c0       	rjmp	.+426    	; 0x3a4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 00       	.word	0x0008	; ????
     1fe:	00 00       	nop
     200:	be 92       	st	-X, r11
     202:	24 49       	sbci	r18, 0x94	; 148
     204:	12 3e       	cpi	r17, 0xE2	; 226
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	be cd       	rjmp	.-1156   	; 0xfffffd88 <__eeprom_end+0xff7efd88>
     20c:	cc cc       	rjmp	.-1640   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     20e:	4c 3e       	cpi	r20, 0xEC	; 236
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	be ab       	std	Y+54, r27	; 0x36
     216:	aa aa       	std	Y+50, r10	; 0x32
     218:	aa 3e       	cpi	r26, 0xEA	; 234
     21a:	00 00       	nop
     21c:	00 00       	nop
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	00 00       	nop
     226:	00 00       	nop
     228:	00 08       	sbc	r0, r0
     22a:	41 78       	andi	r20, 0x81	; 129
     22c:	d3 bb       	out	0x13, r29	; 19
     22e:	43 87       	std	Z+11, r20	; 0x0b
     230:	d1 13       	cpse	r29, r17
     232:	3d 19       	sub	r19, r13
     234:	0e 3c       	cpi	r16, 0xCE	; 206
     236:	c3 bd       	out	0x23, r28	; 35
     238:	42 82       	std	Z+2, r4	; 0x02
     23a:	ad 2b       	or	r26, r29
     23c:	3e 68       	ori	r19, 0x8E	; 142
     23e:	ec 82       	std	Y+4, r14	; 0x04
     240:	76 be       	out	0x36, r7	; 54
     242:	d9 8f       	std	Y+25, r29	; 0x19
     244:	e1 a9       	ldd	r30, Z+49	; 0x31
     246:	3e 4c       	sbci	r19, 0xCE	; 206
     248:	80 ef       	ldi	r24, 0xF0	; 240
     24a:	ff be       	out	0x3f, r15	; 63
     24c:	01 c4       	rjmp	.+2050   	; 0xa50 <__vector_18+0xe>
     24e:	ff 7f       	andi	r31, 0xFF	; 255
     250:	3f 00       	.word	0x003f	; ????
     252:	00 00       	nop
	...

00000256 <__trampolines_end>:
     256:	6e 61       	ori	r22, 0x1E	; 30
     258:	6e 00       	.word	0x006e	; ????

0000025a <__c.2332>:
     25a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     26a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     27a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     28a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     29a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2aa:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2ba:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2ca:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2da:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     2ea:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     2fa:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     30a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     31a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     32a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     33a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     34a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000358 <__ctors_end>:
     358:	11 24       	eor	r1, r1
     35a:	1f be       	out	0x3f, r1	; 63
     35c:	cf ef       	ldi	r28, 0xFF	; 255
     35e:	cd bf       	out	0x3d, r28	; 61
     360:	df e3       	ldi	r29, 0x3F	; 63
     362:	de bf       	out	0x3e, r29	; 62
     364:	00 e0       	ldi	r16, 0x00	; 0
     366:	0c bf       	out	0x3c, r16	; 60
     368:	18 be       	out	0x38, r1	; 56
     36a:	19 be       	out	0x39, r1	; 57
     36c:	1a be       	out	0x3a, r1	; 58
     36e:	1b be       	out	0x3b, r1	; 59

00000370 <__do_copy_data>:
     370:	10 e2       	ldi	r17, 0x20	; 32
     372:	a0 e0       	ldi	r26, 0x00	; 0
     374:	b0 e2       	ldi	r27, 0x20	; 32
     376:	ea e0       	ldi	r30, 0x0A	; 10
     378:	ff e3       	ldi	r31, 0x3F	; 63
     37a:	00 e0       	ldi	r16, 0x00	; 0
     37c:	0b bf       	out	0x3b, r16	; 59
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x14>
     380:	07 90       	elpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 33       	cpi	r26, 0x3E	; 62
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0x10>
     38a:	1b be       	out	0x3b, r1	; 59

0000038c <__do_clear_bss>:
     38c:	20 e2       	ldi	r18, 0x20	; 32
     38e:	ae e3       	ldi	r26, 0x3E	; 62
     390:	b0 e2       	ldi	r27, 0x20	; 32
     392:	01 c0       	rjmp	.+2      	; 0x396 <.do_clear_bss_start>

00000394 <.do_clear_bss_loop>:
     394:	1d 92       	st	X+, r1

00000396 <.do_clear_bss_start>:
     396:	a2 3b       	cpi	r26, 0xB2	; 178
     398:	b2 07       	cpc	r27, r18
     39a:	e1 f7       	brne	.-8      	; 0x394 <.do_clear_bss_loop>
     39c:	0e 94 71 14 	call	0x28e2	; 0x28e2 <main>
     3a0:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <_exit>

000003a4 <__bad_interrupt>:
     3a4:	2d ce       	rjmp	.-934    	; 0x0 <__vectors>

000003a6 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     3a6:	cf 93       	push	r28
     3a8:	df 93       	push	r29
     3aa:	1f 92       	push	r1
     3ac:	1f 92       	push	r1
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     3b2:	8f ef       	ldi	r24, 0xFF	; 255
     3b4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     3b8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     3bc:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     3c0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     3c4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     3c8:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     3cc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3d0:	8f b7       	in	r24, 0x3f	; 63
     3d2:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     3d4:	f8 94       	cli
	return flags;
     3d6:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     3d8:	e0 e5       	ldi	r30, 0x50	; 80
     3da:	f0 e0       	ldi	r31, 0x00	; 0
     3dc:	80 81       	ld	r24, Z
     3de:	82 60       	ori	r24, 0x02	; 2
     3e0:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     3e2:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     3e4:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     3e6:	81 ff       	sbrs	r24, 1
     3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     3ea:	61 e0       	ldi	r22, 0x01	; 1
     3ec:	80 e4       	ldi	r24, 0x40	; 64
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	38 d2       	rcall	.+1136   	; 0x862 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3f2:	8f b7       	in	r24, 0x3f	; 63
     3f4:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     3f6:	f8 94       	cli
	return flags;
     3f8:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     3fa:	e0 e5       	ldi	r30, 0x50	; 80
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	80 81       	ld	r24, Z
     400:	8e 7f       	andi	r24, 0xFE	; 254
     402:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     404:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	08 95       	ret

00000410 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     410:	cf 93       	push	r28
     412:	df 93       	push	r29
     414:	1f 92       	push	r1
     416:	cd b7       	in	r28, 0x3d	; 61
     418:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     41a:	9f b7       	in	r25, 0x3f	; 63
     41c:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     41e:	f8 94       	cli
	return flags;
     420:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     422:	e8 2f       	mov	r30, r24
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	e0 59       	subi	r30, 0x90	; 144
     428:	ff 4f       	sbci	r31, 0xFF	; 255
     42a:	60 95       	com	r22
     42c:	80 81       	ld	r24, Z
     42e:	68 23       	and	r22, r24
     430:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     432:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     434:	0f 90       	pop	r0
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	1f 92       	push	r1
     442:	cd b7       	in	r28, 0x3d	; 61
     444:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     446:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <stdio_base>
     44a:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <stdio_base+0x1>
     44e:	e0 91 8e 20 	lds	r30, 0x208E	; 0x80208e <ptr_get>
     452:	f0 91 8f 20 	lds	r31, 0x208F	; 0x80208f <ptr_get+0x1>
     456:	be 01       	movw	r22, r28
     458:	6f 5f       	subi	r22, 0xFF	; 255
     45a:	7f 4f       	sbci	r23, 0xFF	; 255
     45c:	19 95       	eicall
	return c;
     45e:	89 81       	ldd	r24, Y+1	; 0x01
}
     460:	08 2e       	mov	r0, r24
     462:	00 0c       	add	r0, r0
     464:	99 0b       	sbc	r25, r25
     466:	0f 90       	pop	r0
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     46e:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     470:	80 91 92 20 	lds	r24, 0x2092	; 0x802092 <stdio_base>
     474:	90 91 93 20 	lds	r25, 0x2093	; 0x802093 <stdio_base+0x1>
     478:	e0 91 90 20 	lds	r30, 0x2090	; 0x802090 <ptr_put>
     47c:	f0 91 91 20 	lds	r31, 0x2091	; 0x802091 <ptr_put+0x1>
     480:	19 95       	eicall
     482:	99 23       	and	r25, r25
     484:	1c f0       	brlt	.+6      	; 0x48c <_write+0x1e>
		return -1;
	}
	return 1;
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     48c:	8f ef       	ldi	r24, 0xFF	; 255
     48e:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     490:	08 95       	ret

00000492 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     492:	1f 92       	push	r1
     494:	0f 92       	push	r0
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	0f 92       	push	r0
     49a:	11 24       	eor	r1, r1
     49c:	08 b6       	in	r0, 0x38	; 56
     49e:	0f 92       	push	r0
     4a0:	18 be       	out	0x38, r1	; 56
     4a2:	09 b6       	in	r0, 0x39	; 57
     4a4:	0f 92       	push	r0
     4a6:	19 be       	out	0x39, r1	; 57
     4a8:	0b b6       	in	r0, 0x3b	; 59
     4aa:	0f 92       	push	r0
     4ac:	1b be       	out	0x3b, r1	; 59
     4ae:	2f 93       	push	r18
     4b0:	3f 93       	push	r19
     4b2:	4f 93       	push	r20
     4b4:	5f 93       	push	r21
     4b6:	6f 93       	push	r22
     4b8:	7f 93       	push	r23
     4ba:	8f 93       	push	r24
     4bc:	9f 93       	push	r25
     4be:	af 93       	push	r26
     4c0:	bf 93       	push	r27
     4c2:	ef 93       	push	r30
     4c4:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     4c6:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     4ca:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     4ce:	e0 91 96 20 	lds	r30, 0x2096	; 0x802096 <adca_callback>
     4d2:	f0 91 97 20 	lds	r31, 0x2097	; 0x802097 <adca_callback+0x1>
     4d6:	61 e0       	ldi	r22, 0x01	; 1
     4d8:	80 e0       	ldi	r24, 0x00	; 0
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	19 95       	eicall
}
     4de:	ff 91       	pop	r31
     4e0:	ef 91       	pop	r30
     4e2:	bf 91       	pop	r27
     4e4:	af 91       	pop	r26
     4e6:	9f 91       	pop	r25
     4e8:	8f 91       	pop	r24
     4ea:	7f 91       	pop	r23
     4ec:	6f 91       	pop	r22
     4ee:	5f 91       	pop	r21
     4f0:	4f 91       	pop	r20
     4f2:	3f 91       	pop	r19
     4f4:	2f 91       	pop	r18
     4f6:	0f 90       	pop	r0
     4f8:	0b be       	out	0x3b, r0	; 59
     4fa:	0f 90       	pop	r0
     4fc:	09 be       	out	0x39, r0	; 57
     4fe:	0f 90       	pop	r0
     500:	08 be       	out	0x38, r0	; 56
     502:	0f 90       	pop	r0
     504:	0f be       	out	0x3f, r0	; 63
     506:	0f 90       	pop	r0
     508:	1f 90       	pop	r1
     50a:	18 95       	reti

0000050c <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     50c:	1f 92       	push	r1
     50e:	0f 92       	push	r0
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	0f 92       	push	r0
     514:	11 24       	eor	r1, r1
     516:	08 b6       	in	r0, 0x38	; 56
     518:	0f 92       	push	r0
     51a:	18 be       	out	0x38, r1	; 56
     51c:	09 b6       	in	r0, 0x39	; 57
     51e:	0f 92       	push	r0
     520:	19 be       	out	0x39, r1	; 57
     522:	0b b6       	in	r0, 0x3b	; 59
     524:	0f 92       	push	r0
     526:	1b be       	out	0x3b, r1	; 59
     528:	2f 93       	push	r18
     52a:	3f 93       	push	r19
     52c:	4f 93       	push	r20
     52e:	5f 93       	push	r21
     530:	6f 93       	push	r22
     532:	7f 93       	push	r23
     534:	8f 93       	push	r24
     536:	9f 93       	push	r25
     538:	af 93       	push	r26
     53a:	bf 93       	push	r27
     53c:	ef 93       	push	r30
     53e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     540:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     544:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     548:	e0 91 96 20 	lds	r30, 0x2096	; 0x802096 <adca_callback>
     54c:	f0 91 97 20 	lds	r31, 0x2097	; 0x802097 <adca_callback+0x1>
     550:	62 e0       	ldi	r22, 0x02	; 2
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	92 e0       	ldi	r25, 0x02	; 2
     556:	19 95       	eicall
}
     558:	ff 91       	pop	r31
     55a:	ef 91       	pop	r30
     55c:	bf 91       	pop	r27
     55e:	af 91       	pop	r26
     560:	9f 91       	pop	r25
     562:	8f 91       	pop	r24
     564:	7f 91       	pop	r23
     566:	6f 91       	pop	r22
     568:	5f 91       	pop	r21
     56a:	4f 91       	pop	r20
     56c:	3f 91       	pop	r19
     56e:	2f 91       	pop	r18
     570:	0f 90       	pop	r0
     572:	0b be       	out	0x3b, r0	; 59
     574:	0f 90       	pop	r0
     576:	09 be       	out	0x39, r0	; 57
     578:	0f 90       	pop	r0
     57a:	08 be       	out	0x38, r0	; 56
     57c:	0f 90       	pop	r0
     57e:	0f be       	out	0x3f, r0	; 63
     580:	0f 90       	pop	r0
     582:	1f 90       	pop	r1
     584:	18 95       	reti

00000586 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     586:	1f 92       	push	r1
     588:	0f 92       	push	r0
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	0f 92       	push	r0
     58e:	11 24       	eor	r1, r1
     590:	08 b6       	in	r0, 0x38	; 56
     592:	0f 92       	push	r0
     594:	18 be       	out	0x38, r1	; 56
     596:	09 b6       	in	r0, 0x39	; 57
     598:	0f 92       	push	r0
     59a:	19 be       	out	0x39, r1	; 57
     59c:	0b b6       	in	r0, 0x3b	; 59
     59e:	0f 92       	push	r0
     5a0:	1b be       	out	0x3b, r1	; 59
     5a2:	2f 93       	push	r18
     5a4:	3f 93       	push	r19
     5a6:	4f 93       	push	r20
     5a8:	5f 93       	push	r21
     5aa:	6f 93       	push	r22
     5ac:	7f 93       	push	r23
     5ae:	8f 93       	push	r24
     5b0:	9f 93       	push	r25
     5b2:	af 93       	push	r26
     5b4:	bf 93       	push	r27
     5b6:	ef 93       	push	r30
     5b8:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     5ba:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     5be:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     5c2:	e0 91 96 20 	lds	r30, 0x2096	; 0x802096 <adca_callback>
     5c6:	f0 91 97 20 	lds	r31, 0x2097	; 0x802097 <adca_callback+0x1>
     5ca:	64 e0       	ldi	r22, 0x04	; 4
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	92 e0       	ldi	r25, 0x02	; 2
     5d0:	19 95       	eicall
}
     5d2:	ff 91       	pop	r31
     5d4:	ef 91       	pop	r30
     5d6:	bf 91       	pop	r27
     5d8:	af 91       	pop	r26
     5da:	9f 91       	pop	r25
     5dc:	8f 91       	pop	r24
     5de:	7f 91       	pop	r23
     5e0:	6f 91       	pop	r22
     5e2:	5f 91       	pop	r21
     5e4:	4f 91       	pop	r20
     5e6:	3f 91       	pop	r19
     5e8:	2f 91       	pop	r18
     5ea:	0f 90       	pop	r0
     5ec:	0b be       	out	0x3b, r0	; 59
     5ee:	0f 90       	pop	r0
     5f0:	09 be       	out	0x39, r0	; 57
     5f2:	0f 90       	pop	r0
     5f4:	08 be       	out	0x38, r0	; 56
     5f6:	0f 90       	pop	r0
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	0f 90       	pop	r0
     5fc:	1f 90       	pop	r1
     5fe:	18 95       	reti

00000600 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     600:	1f 92       	push	r1
     602:	0f 92       	push	r0
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	0f 92       	push	r0
     608:	11 24       	eor	r1, r1
     60a:	08 b6       	in	r0, 0x38	; 56
     60c:	0f 92       	push	r0
     60e:	18 be       	out	0x38, r1	; 56
     610:	09 b6       	in	r0, 0x39	; 57
     612:	0f 92       	push	r0
     614:	19 be       	out	0x39, r1	; 57
     616:	0b b6       	in	r0, 0x3b	; 59
     618:	0f 92       	push	r0
     61a:	1b be       	out	0x3b, r1	; 59
     61c:	2f 93       	push	r18
     61e:	3f 93       	push	r19
     620:	4f 93       	push	r20
     622:	5f 93       	push	r21
     624:	6f 93       	push	r22
     626:	7f 93       	push	r23
     628:	8f 93       	push	r24
     62a:	9f 93       	push	r25
     62c:	af 93       	push	r26
     62e:	bf 93       	push	r27
     630:	ef 93       	push	r30
     632:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     634:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     638:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     63c:	e0 91 96 20 	lds	r30, 0x2096	; 0x802096 <adca_callback>
     640:	f0 91 97 20 	lds	r31, 0x2097	; 0x802097 <adca_callback+0x1>
     644:	68 e0       	ldi	r22, 0x08	; 8
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	19 95       	eicall
}
     64c:	ff 91       	pop	r31
     64e:	ef 91       	pop	r30
     650:	bf 91       	pop	r27
     652:	af 91       	pop	r26
     654:	9f 91       	pop	r25
     656:	8f 91       	pop	r24
     658:	7f 91       	pop	r23
     65a:	6f 91       	pop	r22
     65c:	5f 91       	pop	r21
     65e:	4f 91       	pop	r20
     660:	3f 91       	pop	r19
     662:	2f 91       	pop	r18
     664:	0f 90       	pop	r0
     666:	0b be       	out	0x3b, r0	; 59
     668:	0f 90       	pop	r0
     66a:	09 be       	out	0x39, r0	; 57
     66c:	0f 90       	pop	r0
     66e:	08 be       	out	0x38, r0	; 56
     670:	0f 90       	pop	r0
     672:	0f be       	out	0x3f, r0	; 63
     674:	0f 90       	pop	r0
     676:	1f 90       	pop	r1
     678:	18 95       	reti

0000067a <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     67a:	1f 92       	push	r1
     67c:	0f 92       	push	r0
     67e:	0f b6       	in	r0, 0x3f	; 63
     680:	0f 92       	push	r0
     682:	11 24       	eor	r1, r1
     684:	08 b6       	in	r0, 0x38	; 56
     686:	0f 92       	push	r0
     688:	18 be       	out	0x38, r1	; 56
     68a:	09 b6       	in	r0, 0x39	; 57
     68c:	0f 92       	push	r0
     68e:	19 be       	out	0x39, r1	; 57
     690:	0b b6       	in	r0, 0x3b	; 59
     692:	0f 92       	push	r0
     694:	1b be       	out	0x3b, r1	; 59
     696:	2f 93       	push	r18
     698:	3f 93       	push	r19
     69a:	4f 93       	push	r20
     69c:	5f 93       	push	r21
     69e:	6f 93       	push	r22
     6a0:	7f 93       	push	r23
     6a2:	8f 93       	push	r24
     6a4:	9f 93       	push	r25
     6a6:	af 93       	push	r26
     6a8:	bf 93       	push	r27
     6aa:	ef 93       	push	r30
     6ac:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     6ae:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     6b2:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     6b6:	e0 91 94 20 	lds	r30, 0x2094	; 0x802094 <adcb_callback>
     6ba:	f0 91 95 20 	lds	r31, 0x2095	; 0x802095 <adcb_callback+0x1>
     6be:	61 e0       	ldi	r22, 0x01	; 1
     6c0:	80 e4       	ldi	r24, 0x40	; 64
     6c2:	92 e0       	ldi	r25, 0x02	; 2
     6c4:	19 95       	eicall
}
     6c6:	ff 91       	pop	r31
     6c8:	ef 91       	pop	r30
     6ca:	bf 91       	pop	r27
     6cc:	af 91       	pop	r26
     6ce:	9f 91       	pop	r25
     6d0:	8f 91       	pop	r24
     6d2:	7f 91       	pop	r23
     6d4:	6f 91       	pop	r22
     6d6:	5f 91       	pop	r21
     6d8:	4f 91       	pop	r20
     6da:	3f 91       	pop	r19
     6dc:	2f 91       	pop	r18
     6de:	0f 90       	pop	r0
     6e0:	0b be       	out	0x3b, r0	; 59
     6e2:	0f 90       	pop	r0
     6e4:	09 be       	out	0x39, r0	; 57
     6e6:	0f 90       	pop	r0
     6e8:	08 be       	out	0x38, r0	; 56
     6ea:	0f 90       	pop	r0
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	0f 90       	pop	r0
     6f0:	1f 90       	pop	r1
     6f2:	18 95       	reti

000006f4 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     6f4:	1f 92       	push	r1
     6f6:	0f 92       	push	r0
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	0f 92       	push	r0
     6fc:	11 24       	eor	r1, r1
     6fe:	08 b6       	in	r0, 0x38	; 56
     700:	0f 92       	push	r0
     702:	18 be       	out	0x38, r1	; 56
     704:	09 b6       	in	r0, 0x39	; 57
     706:	0f 92       	push	r0
     708:	19 be       	out	0x39, r1	; 57
     70a:	0b b6       	in	r0, 0x3b	; 59
     70c:	0f 92       	push	r0
     70e:	1b be       	out	0x3b, r1	; 59
     710:	2f 93       	push	r18
     712:	3f 93       	push	r19
     714:	4f 93       	push	r20
     716:	5f 93       	push	r21
     718:	6f 93       	push	r22
     71a:	7f 93       	push	r23
     71c:	8f 93       	push	r24
     71e:	9f 93       	push	r25
     720:	af 93       	push	r26
     722:	bf 93       	push	r27
     724:	ef 93       	push	r30
     726:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     728:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     72c:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     730:	e0 91 94 20 	lds	r30, 0x2094	; 0x802094 <adcb_callback>
     734:	f0 91 95 20 	lds	r31, 0x2095	; 0x802095 <adcb_callback+0x1>
     738:	62 e0       	ldi	r22, 0x02	; 2
     73a:	80 e4       	ldi	r24, 0x40	; 64
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	19 95       	eicall
}
     740:	ff 91       	pop	r31
     742:	ef 91       	pop	r30
     744:	bf 91       	pop	r27
     746:	af 91       	pop	r26
     748:	9f 91       	pop	r25
     74a:	8f 91       	pop	r24
     74c:	7f 91       	pop	r23
     74e:	6f 91       	pop	r22
     750:	5f 91       	pop	r21
     752:	4f 91       	pop	r20
     754:	3f 91       	pop	r19
     756:	2f 91       	pop	r18
     758:	0f 90       	pop	r0
     75a:	0b be       	out	0x3b, r0	; 59
     75c:	0f 90       	pop	r0
     75e:	09 be       	out	0x39, r0	; 57
     760:	0f 90       	pop	r0
     762:	08 be       	out	0x38, r0	; 56
     764:	0f 90       	pop	r0
     766:	0f be       	out	0x3f, r0	; 63
     768:	0f 90       	pop	r0
     76a:	1f 90       	pop	r1
     76c:	18 95       	reti

0000076e <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     76e:	1f 92       	push	r1
     770:	0f 92       	push	r0
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	0f 92       	push	r0
     776:	11 24       	eor	r1, r1
     778:	08 b6       	in	r0, 0x38	; 56
     77a:	0f 92       	push	r0
     77c:	18 be       	out	0x38, r1	; 56
     77e:	09 b6       	in	r0, 0x39	; 57
     780:	0f 92       	push	r0
     782:	19 be       	out	0x39, r1	; 57
     784:	0b b6       	in	r0, 0x3b	; 59
     786:	0f 92       	push	r0
     788:	1b be       	out	0x3b, r1	; 59
     78a:	2f 93       	push	r18
     78c:	3f 93       	push	r19
     78e:	4f 93       	push	r20
     790:	5f 93       	push	r21
     792:	6f 93       	push	r22
     794:	7f 93       	push	r23
     796:	8f 93       	push	r24
     798:	9f 93       	push	r25
     79a:	af 93       	push	r26
     79c:	bf 93       	push	r27
     79e:	ef 93       	push	r30
     7a0:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     7a2:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     7a6:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     7aa:	e0 91 94 20 	lds	r30, 0x2094	; 0x802094 <adcb_callback>
     7ae:	f0 91 95 20 	lds	r31, 0x2095	; 0x802095 <adcb_callback+0x1>
     7b2:	64 e0       	ldi	r22, 0x04	; 4
     7b4:	80 e4       	ldi	r24, 0x40	; 64
     7b6:	92 e0       	ldi	r25, 0x02	; 2
     7b8:	19 95       	eicall
}
     7ba:	ff 91       	pop	r31
     7bc:	ef 91       	pop	r30
     7be:	bf 91       	pop	r27
     7c0:	af 91       	pop	r26
     7c2:	9f 91       	pop	r25
     7c4:	8f 91       	pop	r24
     7c6:	7f 91       	pop	r23
     7c8:	6f 91       	pop	r22
     7ca:	5f 91       	pop	r21
     7cc:	4f 91       	pop	r20
     7ce:	3f 91       	pop	r19
     7d0:	2f 91       	pop	r18
     7d2:	0f 90       	pop	r0
     7d4:	0b be       	out	0x3b, r0	; 59
     7d6:	0f 90       	pop	r0
     7d8:	09 be       	out	0x39, r0	; 57
     7da:	0f 90       	pop	r0
     7dc:	08 be       	out	0x38, r0	; 56
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     7e8:	1f 92       	push	r1
     7ea:	0f 92       	push	r0
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	0f 92       	push	r0
     7f0:	11 24       	eor	r1, r1
     7f2:	08 b6       	in	r0, 0x38	; 56
     7f4:	0f 92       	push	r0
     7f6:	18 be       	out	0x38, r1	; 56
     7f8:	09 b6       	in	r0, 0x39	; 57
     7fa:	0f 92       	push	r0
     7fc:	19 be       	out	0x39, r1	; 57
     7fe:	0b b6       	in	r0, 0x3b	; 59
     800:	0f 92       	push	r0
     802:	1b be       	out	0x3b, r1	; 59
     804:	2f 93       	push	r18
     806:	3f 93       	push	r19
     808:	4f 93       	push	r20
     80a:	5f 93       	push	r21
     80c:	6f 93       	push	r22
     80e:	7f 93       	push	r23
     810:	8f 93       	push	r24
     812:	9f 93       	push	r25
     814:	af 93       	push	r26
     816:	bf 93       	push	r27
     818:	ef 93       	push	r30
     81a:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     81c:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     820:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     824:	e0 91 94 20 	lds	r30, 0x2094	; 0x802094 <adcb_callback>
     828:	f0 91 95 20 	lds	r31, 0x2095	; 0x802095 <adcb_callback+0x1>
     82c:	68 e0       	ldi	r22, 0x08	; 8
     82e:	80 e4       	ldi	r24, 0x40	; 64
     830:	92 e0       	ldi	r25, 0x02	; 2
     832:	19 95       	eicall
}
     834:	ff 91       	pop	r31
     836:	ef 91       	pop	r30
     838:	bf 91       	pop	r27
     83a:	af 91       	pop	r26
     83c:	9f 91       	pop	r25
     83e:	8f 91       	pop	r24
     840:	7f 91       	pop	r23
     842:	6f 91       	pop	r22
     844:	5f 91       	pop	r21
     846:	4f 91       	pop	r20
     848:	3f 91       	pop	r19
     84a:	2f 91       	pop	r18
     84c:	0f 90       	pop	r0
     84e:	0b be       	out	0x3b, r0	; 59
     850:	0f 90       	pop	r0
     852:	09 be       	out	0x39, r0	; 57
     854:	0f 90       	pop	r0
     856:	08 be       	out	0x38, r0	; 56
     858:	0f 90       	pop	r0
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	0f 90       	pop	r0
     85e:	1f 90       	pop	r1
     860:	18 95       	reti

00000862 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     862:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     864:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     866:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     868:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     86a:	60 83       	st	Z, r22
	ret                             // Return to caller
     86c:	08 95       	ret

0000086e <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     86e:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     872:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     874:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     876:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     87a:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     87c:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     880:	08 95       	ret

00000882 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     882:	1f 92       	push	r1
     884:	0f 92       	push	r0
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	0f 92       	push	r0
     88a:	11 24       	eor	r1, r1
     88c:	08 b6       	in	r0, 0x38	; 56
     88e:	0f 92       	push	r0
     890:	18 be       	out	0x38, r1	; 56
     892:	09 b6       	in	r0, 0x39	; 57
     894:	0f 92       	push	r0
     896:	19 be       	out	0x39, r1	; 57
     898:	0b b6       	in	r0, 0x3b	; 59
     89a:	0f 92       	push	r0
     89c:	1b be       	out	0x3b, r1	; 59
     89e:	2f 93       	push	r18
     8a0:	3f 93       	push	r19
     8a2:	4f 93       	push	r20
     8a4:	5f 93       	push	r21
     8a6:	6f 93       	push	r22
     8a8:	7f 93       	push	r23
     8aa:	8f 93       	push	r24
     8ac:	9f 93       	push	r25
     8ae:	af 93       	push	r26
     8b0:	bf 93       	push	r27
     8b2:	ef 93       	push	r30
     8b4:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     8b6:	e0 91 8c 20 	lds	r30, 0x208C	; 0x80208c <tc_tcc0_ovf_callback>
     8ba:	f0 91 8d 20 	lds	r31, 0x208D	; 0x80208d <tc_tcc0_ovf_callback+0x1>
     8be:	30 97       	sbiw	r30, 0x00	; 0
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     8c2:	19 95       	eicall
	}
}
     8c4:	ff 91       	pop	r31
     8c6:	ef 91       	pop	r30
     8c8:	bf 91       	pop	r27
     8ca:	af 91       	pop	r26
     8cc:	9f 91       	pop	r25
     8ce:	8f 91       	pop	r24
     8d0:	7f 91       	pop	r23
     8d2:	6f 91       	pop	r22
     8d4:	5f 91       	pop	r21
     8d6:	4f 91       	pop	r20
     8d8:	3f 91       	pop	r19
     8da:	2f 91       	pop	r18
     8dc:	0f 90       	pop	r0
     8de:	0b be       	out	0x3b, r0	; 59
     8e0:	0f 90       	pop	r0
     8e2:	09 be       	out	0x39, r0	; 57
     8e4:	0f 90       	pop	r0
     8e6:	08 be       	out	0x38, r0	; 56
     8e8:	0f 90       	pop	r0
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	0f 90       	pop	r0
     8ee:	1f 90       	pop	r1
     8f0:	18 95       	reti

000008f2 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     8f2:	1f 92       	push	r1
     8f4:	0f 92       	push	r0
     8f6:	0f b6       	in	r0, 0x3f	; 63
     8f8:	0f 92       	push	r0
     8fa:	11 24       	eor	r1, r1
     8fc:	08 b6       	in	r0, 0x38	; 56
     8fe:	0f 92       	push	r0
     900:	18 be       	out	0x38, r1	; 56
     902:	09 b6       	in	r0, 0x39	; 57
     904:	0f 92       	push	r0
     906:	19 be       	out	0x39, r1	; 57
     908:	0b b6       	in	r0, 0x3b	; 59
     90a:	0f 92       	push	r0
     90c:	1b be       	out	0x3b, r1	; 59
     90e:	2f 93       	push	r18
     910:	3f 93       	push	r19
     912:	4f 93       	push	r20
     914:	5f 93       	push	r21
     916:	6f 93       	push	r22
     918:	7f 93       	push	r23
     91a:	8f 93       	push	r24
     91c:	9f 93       	push	r25
     91e:	af 93       	push	r26
     920:	bf 93       	push	r27
     922:	ef 93       	push	r30
     924:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     926:	e0 91 8a 20 	lds	r30, 0x208A	; 0x80208a <tc_tcc0_err_callback>
     92a:	f0 91 8b 20 	lds	r31, 0x208B	; 0x80208b <tc_tcc0_err_callback+0x1>
     92e:	30 97       	sbiw	r30, 0x00	; 0
     930:	09 f0       	breq	.+2      	; 0x934 <__vector_15+0x42>
		tc_tcc0_err_callback();
     932:	19 95       	eicall
	}
}
     934:	ff 91       	pop	r31
     936:	ef 91       	pop	r30
     938:	bf 91       	pop	r27
     93a:	af 91       	pop	r26
     93c:	9f 91       	pop	r25
     93e:	8f 91       	pop	r24
     940:	7f 91       	pop	r23
     942:	6f 91       	pop	r22
     944:	5f 91       	pop	r21
     946:	4f 91       	pop	r20
     948:	3f 91       	pop	r19
     94a:	2f 91       	pop	r18
     94c:	0f 90       	pop	r0
     94e:	0b be       	out	0x3b, r0	; 59
     950:	0f 90       	pop	r0
     952:	09 be       	out	0x39, r0	; 57
     954:	0f 90       	pop	r0
     956:	08 be       	out	0x38, r0	; 56
     958:	0f 90       	pop	r0
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	0f 90       	pop	r0
     95e:	1f 90       	pop	r1
     960:	18 95       	reti

00000962 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     962:	1f 92       	push	r1
     964:	0f 92       	push	r0
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	0f 92       	push	r0
     96a:	11 24       	eor	r1, r1
     96c:	08 b6       	in	r0, 0x38	; 56
     96e:	0f 92       	push	r0
     970:	18 be       	out	0x38, r1	; 56
     972:	09 b6       	in	r0, 0x39	; 57
     974:	0f 92       	push	r0
     976:	19 be       	out	0x39, r1	; 57
     978:	0b b6       	in	r0, 0x3b	; 59
     97a:	0f 92       	push	r0
     97c:	1b be       	out	0x3b, r1	; 59
     97e:	2f 93       	push	r18
     980:	3f 93       	push	r19
     982:	4f 93       	push	r20
     984:	5f 93       	push	r21
     986:	6f 93       	push	r22
     988:	7f 93       	push	r23
     98a:	8f 93       	push	r24
     98c:	9f 93       	push	r25
     98e:	af 93       	push	r26
     990:	bf 93       	push	r27
     992:	ef 93       	push	r30
     994:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     996:	e0 91 88 20 	lds	r30, 0x2088	; 0x802088 <tc_tcc0_cca_callback>
     99a:	f0 91 89 20 	lds	r31, 0x2089	; 0x802089 <tc_tcc0_cca_callback+0x1>
     99e:	30 97       	sbiw	r30, 0x00	; 0
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     9a2:	19 95       	eicall
	}
}
     9a4:	ff 91       	pop	r31
     9a6:	ef 91       	pop	r30
     9a8:	bf 91       	pop	r27
     9aa:	af 91       	pop	r26
     9ac:	9f 91       	pop	r25
     9ae:	8f 91       	pop	r24
     9b0:	7f 91       	pop	r23
     9b2:	6f 91       	pop	r22
     9b4:	5f 91       	pop	r21
     9b6:	4f 91       	pop	r20
     9b8:	3f 91       	pop	r19
     9ba:	2f 91       	pop	r18
     9bc:	0f 90       	pop	r0
     9be:	0b be       	out	0x3b, r0	; 59
     9c0:	0f 90       	pop	r0
     9c2:	09 be       	out	0x39, r0	; 57
     9c4:	0f 90       	pop	r0
     9c6:	08 be       	out	0x38, r0	; 56
     9c8:	0f 90       	pop	r0
     9ca:	0f be       	out	0x3f, r0	; 63
     9cc:	0f 90       	pop	r0
     9ce:	1f 90       	pop	r1
     9d0:	18 95       	reti

000009d2 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     9d2:	1f 92       	push	r1
     9d4:	0f 92       	push	r0
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	0f 92       	push	r0
     9da:	11 24       	eor	r1, r1
     9dc:	08 b6       	in	r0, 0x38	; 56
     9de:	0f 92       	push	r0
     9e0:	18 be       	out	0x38, r1	; 56
     9e2:	09 b6       	in	r0, 0x39	; 57
     9e4:	0f 92       	push	r0
     9e6:	19 be       	out	0x39, r1	; 57
     9e8:	0b b6       	in	r0, 0x3b	; 59
     9ea:	0f 92       	push	r0
     9ec:	1b be       	out	0x3b, r1	; 59
     9ee:	2f 93       	push	r18
     9f0:	3f 93       	push	r19
     9f2:	4f 93       	push	r20
     9f4:	5f 93       	push	r21
     9f6:	6f 93       	push	r22
     9f8:	7f 93       	push	r23
     9fa:	8f 93       	push	r24
     9fc:	9f 93       	push	r25
     9fe:	af 93       	push	r26
     a00:	bf 93       	push	r27
     a02:	ef 93       	push	r30
     a04:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     a06:	e0 91 86 20 	lds	r30, 0x2086	; 0x802086 <tc_tcc0_ccb_callback>
     a0a:	f0 91 87 20 	lds	r31, 0x2087	; 0x802087 <tc_tcc0_ccb_callback+0x1>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	09 f0       	breq	.+2      	; 0xa14 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     a12:	19 95       	eicall
	}
}
     a14:	ff 91       	pop	r31
     a16:	ef 91       	pop	r30
     a18:	bf 91       	pop	r27
     a1a:	af 91       	pop	r26
     a1c:	9f 91       	pop	r25
     a1e:	8f 91       	pop	r24
     a20:	7f 91       	pop	r23
     a22:	6f 91       	pop	r22
     a24:	5f 91       	pop	r21
     a26:	4f 91       	pop	r20
     a28:	3f 91       	pop	r19
     a2a:	2f 91       	pop	r18
     a2c:	0f 90       	pop	r0
     a2e:	0b be       	out	0x3b, r0	; 59
     a30:	0f 90       	pop	r0
     a32:	09 be       	out	0x39, r0	; 57
     a34:	0f 90       	pop	r0
     a36:	08 be       	out	0x38, r0	; 56
     a38:	0f 90       	pop	r0
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	0f 90       	pop	r0
     a3e:	1f 90       	pop	r1
     a40:	18 95       	reti

00000a42 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     a42:	1f 92       	push	r1
     a44:	0f 92       	push	r0
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	0f 92       	push	r0
     a4a:	11 24       	eor	r1, r1
     a4c:	08 b6       	in	r0, 0x38	; 56
     a4e:	0f 92       	push	r0
     a50:	18 be       	out	0x38, r1	; 56
     a52:	09 b6       	in	r0, 0x39	; 57
     a54:	0f 92       	push	r0
     a56:	19 be       	out	0x39, r1	; 57
     a58:	0b b6       	in	r0, 0x3b	; 59
     a5a:	0f 92       	push	r0
     a5c:	1b be       	out	0x3b, r1	; 59
     a5e:	2f 93       	push	r18
     a60:	3f 93       	push	r19
     a62:	4f 93       	push	r20
     a64:	5f 93       	push	r21
     a66:	6f 93       	push	r22
     a68:	7f 93       	push	r23
     a6a:	8f 93       	push	r24
     a6c:	9f 93       	push	r25
     a6e:	af 93       	push	r26
     a70:	bf 93       	push	r27
     a72:	ef 93       	push	r30
     a74:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     a76:	e0 91 84 20 	lds	r30, 0x2084	; 0x802084 <tc_tcc0_ccc_callback>
     a7a:	f0 91 85 20 	lds	r31, 0x2085	; 0x802085 <tc_tcc0_ccc_callback+0x1>
     a7e:	30 97       	sbiw	r30, 0x00	; 0
     a80:	09 f0       	breq	.+2      	; 0xa84 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     a82:	19 95       	eicall
	}
}
     a84:	ff 91       	pop	r31
     a86:	ef 91       	pop	r30
     a88:	bf 91       	pop	r27
     a8a:	af 91       	pop	r26
     a8c:	9f 91       	pop	r25
     a8e:	8f 91       	pop	r24
     a90:	7f 91       	pop	r23
     a92:	6f 91       	pop	r22
     a94:	5f 91       	pop	r21
     a96:	4f 91       	pop	r20
     a98:	3f 91       	pop	r19
     a9a:	2f 91       	pop	r18
     a9c:	0f 90       	pop	r0
     a9e:	0b be       	out	0x3b, r0	; 59
     aa0:	0f 90       	pop	r0
     aa2:	09 be       	out	0x39, r0	; 57
     aa4:	0f 90       	pop	r0
     aa6:	08 be       	out	0x38, r0	; 56
     aa8:	0f 90       	pop	r0
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	0f 90       	pop	r0
     aae:	1f 90       	pop	r1
     ab0:	18 95       	reti

00000ab2 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     ab2:	1f 92       	push	r1
     ab4:	0f 92       	push	r0
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	0f 92       	push	r0
     aba:	11 24       	eor	r1, r1
     abc:	08 b6       	in	r0, 0x38	; 56
     abe:	0f 92       	push	r0
     ac0:	18 be       	out	0x38, r1	; 56
     ac2:	09 b6       	in	r0, 0x39	; 57
     ac4:	0f 92       	push	r0
     ac6:	19 be       	out	0x39, r1	; 57
     ac8:	0b b6       	in	r0, 0x3b	; 59
     aca:	0f 92       	push	r0
     acc:	1b be       	out	0x3b, r1	; 59
     ace:	2f 93       	push	r18
     ad0:	3f 93       	push	r19
     ad2:	4f 93       	push	r20
     ad4:	5f 93       	push	r21
     ad6:	6f 93       	push	r22
     ad8:	7f 93       	push	r23
     ada:	8f 93       	push	r24
     adc:	9f 93       	push	r25
     ade:	af 93       	push	r26
     ae0:	bf 93       	push	r27
     ae2:	ef 93       	push	r30
     ae4:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     ae6:	e0 91 82 20 	lds	r30, 0x2082	; 0x802082 <tc_tcc0_ccd_callback>
     aea:	f0 91 83 20 	lds	r31, 0x2083	; 0x802083 <tc_tcc0_ccd_callback+0x1>
     aee:	30 97       	sbiw	r30, 0x00	; 0
     af0:	09 f0       	breq	.+2      	; 0xaf4 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     af2:	19 95       	eicall
	}
}
     af4:	ff 91       	pop	r31
     af6:	ef 91       	pop	r30
     af8:	bf 91       	pop	r27
     afa:	af 91       	pop	r26
     afc:	9f 91       	pop	r25
     afe:	8f 91       	pop	r24
     b00:	7f 91       	pop	r23
     b02:	6f 91       	pop	r22
     b04:	5f 91       	pop	r21
     b06:	4f 91       	pop	r20
     b08:	3f 91       	pop	r19
     b0a:	2f 91       	pop	r18
     b0c:	0f 90       	pop	r0
     b0e:	0b be       	out	0x3b, r0	; 59
     b10:	0f 90       	pop	r0
     b12:	09 be       	out	0x39, r0	; 57
     b14:	0f 90       	pop	r0
     b16:	08 be       	out	0x38, r0	; 56
     b18:	0f 90       	pop	r0
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	0f 90       	pop	r0
     b1e:	1f 90       	pop	r1
     b20:	18 95       	reti

00000b22 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     b22:	1f 92       	push	r1
     b24:	0f 92       	push	r0
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	0f 92       	push	r0
     b2a:	11 24       	eor	r1, r1
     b2c:	08 b6       	in	r0, 0x38	; 56
     b2e:	0f 92       	push	r0
     b30:	18 be       	out	0x38, r1	; 56
     b32:	09 b6       	in	r0, 0x39	; 57
     b34:	0f 92       	push	r0
     b36:	19 be       	out	0x39, r1	; 57
     b38:	0b b6       	in	r0, 0x3b	; 59
     b3a:	0f 92       	push	r0
     b3c:	1b be       	out	0x3b, r1	; 59
     b3e:	2f 93       	push	r18
     b40:	3f 93       	push	r19
     b42:	4f 93       	push	r20
     b44:	5f 93       	push	r21
     b46:	6f 93       	push	r22
     b48:	7f 93       	push	r23
     b4a:	8f 93       	push	r24
     b4c:	9f 93       	push	r25
     b4e:	af 93       	push	r26
     b50:	bf 93       	push	r27
     b52:	ef 93       	push	r30
     b54:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     b56:	e0 91 80 20 	lds	r30, 0x2080	; 0x802080 <tc_tcc1_ovf_callback>
     b5a:	f0 91 81 20 	lds	r31, 0x2081	; 0x802081 <tc_tcc1_ovf_callback+0x1>
     b5e:	30 97       	sbiw	r30, 0x00	; 0
     b60:	09 f0       	breq	.+2      	; 0xb64 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     b62:	19 95       	eicall
	}
}
     b64:	ff 91       	pop	r31
     b66:	ef 91       	pop	r30
     b68:	bf 91       	pop	r27
     b6a:	af 91       	pop	r26
     b6c:	9f 91       	pop	r25
     b6e:	8f 91       	pop	r24
     b70:	7f 91       	pop	r23
     b72:	6f 91       	pop	r22
     b74:	5f 91       	pop	r21
     b76:	4f 91       	pop	r20
     b78:	3f 91       	pop	r19
     b7a:	2f 91       	pop	r18
     b7c:	0f 90       	pop	r0
     b7e:	0b be       	out	0x3b, r0	; 59
     b80:	0f 90       	pop	r0
     b82:	09 be       	out	0x39, r0	; 57
     b84:	0f 90       	pop	r0
     b86:	08 be       	out	0x38, r0	; 56
     b88:	0f 90       	pop	r0
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	0f 90       	pop	r0
     b8e:	1f 90       	pop	r1
     b90:	18 95       	reti

00000b92 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     b92:	1f 92       	push	r1
     b94:	0f 92       	push	r0
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	0f 92       	push	r0
     b9a:	11 24       	eor	r1, r1
     b9c:	08 b6       	in	r0, 0x38	; 56
     b9e:	0f 92       	push	r0
     ba0:	18 be       	out	0x38, r1	; 56
     ba2:	09 b6       	in	r0, 0x39	; 57
     ba4:	0f 92       	push	r0
     ba6:	19 be       	out	0x39, r1	; 57
     ba8:	0b b6       	in	r0, 0x3b	; 59
     baa:	0f 92       	push	r0
     bac:	1b be       	out	0x3b, r1	; 59
     bae:	2f 93       	push	r18
     bb0:	3f 93       	push	r19
     bb2:	4f 93       	push	r20
     bb4:	5f 93       	push	r21
     bb6:	6f 93       	push	r22
     bb8:	7f 93       	push	r23
     bba:	8f 93       	push	r24
     bbc:	9f 93       	push	r25
     bbe:	af 93       	push	r26
     bc0:	bf 93       	push	r27
     bc2:	ef 93       	push	r30
     bc4:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     bc6:	e0 91 7e 20 	lds	r30, 0x207E	; 0x80207e <tc_tcc1_err_callback>
     bca:	f0 91 7f 20 	lds	r31, 0x207F	; 0x80207f <tc_tcc1_err_callback+0x1>
     bce:	30 97       	sbiw	r30, 0x00	; 0
     bd0:	09 f0       	breq	.+2      	; 0xbd4 <__vector_21+0x42>
		tc_tcc1_err_callback();
     bd2:	19 95       	eicall
	}
}
     bd4:	ff 91       	pop	r31
     bd6:	ef 91       	pop	r30
     bd8:	bf 91       	pop	r27
     bda:	af 91       	pop	r26
     bdc:	9f 91       	pop	r25
     bde:	8f 91       	pop	r24
     be0:	7f 91       	pop	r23
     be2:	6f 91       	pop	r22
     be4:	5f 91       	pop	r21
     be6:	4f 91       	pop	r20
     be8:	3f 91       	pop	r19
     bea:	2f 91       	pop	r18
     bec:	0f 90       	pop	r0
     bee:	0b be       	out	0x3b, r0	; 59
     bf0:	0f 90       	pop	r0
     bf2:	09 be       	out	0x39, r0	; 57
     bf4:	0f 90       	pop	r0
     bf6:	08 be       	out	0x38, r0	; 56
     bf8:	0f 90       	pop	r0
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	0f 90       	pop	r0
     bfe:	1f 90       	pop	r1
     c00:	18 95       	reti

00000c02 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	08 b6       	in	r0, 0x38	; 56
     c0e:	0f 92       	push	r0
     c10:	18 be       	out	0x38, r1	; 56
     c12:	09 b6       	in	r0, 0x39	; 57
     c14:	0f 92       	push	r0
     c16:	19 be       	out	0x39, r1	; 57
     c18:	0b b6       	in	r0, 0x3b	; 59
     c1a:	0f 92       	push	r0
     c1c:	1b be       	out	0x3b, r1	; 59
     c1e:	2f 93       	push	r18
     c20:	3f 93       	push	r19
     c22:	4f 93       	push	r20
     c24:	5f 93       	push	r21
     c26:	6f 93       	push	r22
     c28:	7f 93       	push	r23
     c2a:	8f 93       	push	r24
     c2c:	9f 93       	push	r25
     c2e:	af 93       	push	r26
     c30:	bf 93       	push	r27
     c32:	ef 93       	push	r30
     c34:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     c36:	e0 91 7c 20 	lds	r30, 0x207C	; 0x80207c <tc_tcc1_cca_callback>
     c3a:	f0 91 7d 20 	lds	r31, 0x207D	; 0x80207d <tc_tcc1_cca_callback+0x1>
     c3e:	30 97       	sbiw	r30, 0x00	; 0
     c40:	09 f0       	breq	.+2      	; 0xc44 <__vector_22+0x42>
		tc_tcc1_cca_callback();
     c42:	19 95       	eicall
	}
}
     c44:	ff 91       	pop	r31
     c46:	ef 91       	pop	r30
     c48:	bf 91       	pop	r27
     c4a:	af 91       	pop	r26
     c4c:	9f 91       	pop	r25
     c4e:	8f 91       	pop	r24
     c50:	7f 91       	pop	r23
     c52:	6f 91       	pop	r22
     c54:	5f 91       	pop	r21
     c56:	4f 91       	pop	r20
     c58:	3f 91       	pop	r19
     c5a:	2f 91       	pop	r18
     c5c:	0f 90       	pop	r0
     c5e:	0b be       	out	0x3b, r0	; 59
     c60:	0f 90       	pop	r0
     c62:	09 be       	out	0x39, r0	; 57
     c64:	0f 90       	pop	r0
     c66:	08 be       	out	0x38, r0	; 56
     c68:	0f 90       	pop	r0
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	0f 90       	pop	r0
     c6e:	1f 90       	pop	r1
     c70:	18 95       	reti

00000c72 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     c72:	1f 92       	push	r1
     c74:	0f 92       	push	r0
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	0f 92       	push	r0
     c7a:	11 24       	eor	r1, r1
     c7c:	08 b6       	in	r0, 0x38	; 56
     c7e:	0f 92       	push	r0
     c80:	18 be       	out	0x38, r1	; 56
     c82:	09 b6       	in	r0, 0x39	; 57
     c84:	0f 92       	push	r0
     c86:	19 be       	out	0x39, r1	; 57
     c88:	0b b6       	in	r0, 0x3b	; 59
     c8a:	0f 92       	push	r0
     c8c:	1b be       	out	0x3b, r1	; 59
     c8e:	2f 93       	push	r18
     c90:	3f 93       	push	r19
     c92:	4f 93       	push	r20
     c94:	5f 93       	push	r21
     c96:	6f 93       	push	r22
     c98:	7f 93       	push	r23
     c9a:	8f 93       	push	r24
     c9c:	9f 93       	push	r25
     c9e:	af 93       	push	r26
     ca0:	bf 93       	push	r27
     ca2:	ef 93       	push	r30
     ca4:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     ca6:	e0 91 7a 20 	lds	r30, 0x207A	; 0x80207a <tc_tcc1_ccb_callback>
     caa:	f0 91 7b 20 	lds	r31, 0x207B	; 0x80207b <tc_tcc1_ccb_callback+0x1>
     cae:	30 97       	sbiw	r30, 0x00	; 0
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     cb2:	19 95       	eicall
	}
}
     cb4:	ff 91       	pop	r31
     cb6:	ef 91       	pop	r30
     cb8:	bf 91       	pop	r27
     cba:	af 91       	pop	r26
     cbc:	9f 91       	pop	r25
     cbe:	8f 91       	pop	r24
     cc0:	7f 91       	pop	r23
     cc2:	6f 91       	pop	r22
     cc4:	5f 91       	pop	r21
     cc6:	4f 91       	pop	r20
     cc8:	3f 91       	pop	r19
     cca:	2f 91       	pop	r18
     ccc:	0f 90       	pop	r0
     cce:	0b be       	out	0x3b, r0	; 59
     cd0:	0f 90       	pop	r0
     cd2:	09 be       	out	0x39, r0	; 57
     cd4:	0f 90       	pop	r0
     cd6:	08 be       	out	0x38, r0	; 56
     cd8:	0f 90       	pop	r0
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	0f 90       	pop	r0
     cde:	1f 90       	pop	r1
     ce0:	18 95       	reti

00000ce2 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     ce2:	1f 92       	push	r1
     ce4:	0f 92       	push	r0
     ce6:	0f b6       	in	r0, 0x3f	; 63
     ce8:	0f 92       	push	r0
     cea:	11 24       	eor	r1, r1
     cec:	08 b6       	in	r0, 0x38	; 56
     cee:	0f 92       	push	r0
     cf0:	18 be       	out	0x38, r1	; 56
     cf2:	09 b6       	in	r0, 0x39	; 57
     cf4:	0f 92       	push	r0
     cf6:	19 be       	out	0x39, r1	; 57
     cf8:	0b b6       	in	r0, 0x3b	; 59
     cfa:	0f 92       	push	r0
     cfc:	1b be       	out	0x3b, r1	; 59
     cfe:	2f 93       	push	r18
     d00:	3f 93       	push	r19
     d02:	4f 93       	push	r20
     d04:	5f 93       	push	r21
     d06:	6f 93       	push	r22
     d08:	7f 93       	push	r23
     d0a:	8f 93       	push	r24
     d0c:	9f 93       	push	r25
     d0e:	af 93       	push	r26
     d10:	bf 93       	push	r27
     d12:	ef 93       	push	r30
     d14:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     d16:	e0 91 78 20 	lds	r30, 0x2078	; 0x802078 <tc_tcd0_ovf_callback>
     d1a:	f0 91 79 20 	lds	r31, 0x2079	; 0x802079 <tc_tcd0_ovf_callback+0x1>
     d1e:	30 97       	sbiw	r30, 0x00	; 0
     d20:	09 f0       	breq	.+2      	; 0xd24 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     d22:	19 95       	eicall
	}
}
     d24:	ff 91       	pop	r31
     d26:	ef 91       	pop	r30
     d28:	bf 91       	pop	r27
     d2a:	af 91       	pop	r26
     d2c:	9f 91       	pop	r25
     d2e:	8f 91       	pop	r24
     d30:	7f 91       	pop	r23
     d32:	6f 91       	pop	r22
     d34:	5f 91       	pop	r21
     d36:	4f 91       	pop	r20
     d38:	3f 91       	pop	r19
     d3a:	2f 91       	pop	r18
     d3c:	0f 90       	pop	r0
     d3e:	0b be       	out	0x3b, r0	; 59
     d40:	0f 90       	pop	r0
     d42:	09 be       	out	0x39, r0	; 57
     d44:	0f 90       	pop	r0
     d46:	08 be       	out	0x38, r0	; 56
     d48:	0f 90       	pop	r0
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	0f 90       	pop	r0
     d4e:	1f 90       	pop	r1
     d50:	18 95       	reti

00000d52 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     d52:	1f 92       	push	r1
     d54:	0f 92       	push	r0
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	0f 92       	push	r0
     d5a:	11 24       	eor	r1, r1
     d5c:	08 b6       	in	r0, 0x38	; 56
     d5e:	0f 92       	push	r0
     d60:	18 be       	out	0x38, r1	; 56
     d62:	09 b6       	in	r0, 0x39	; 57
     d64:	0f 92       	push	r0
     d66:	19 be       	out	0x39, r1	; 57
     d68:	0b b6       	in	r0, 0x3b	; 59
     d6a:	0f 92       	push	r0
     d6c:	1b be       	out	0x3b, r1	; 59
     d6e:	2f 93       	push	r18
     d70:	3f 93       	push	r19
     d72:	4f 93       	push	r20
     d74:	5f 93       	push	r21
     d76:	6f 93       	push	r22
     d78:	7f 93       	push	r23
     d7a:	8f 93       	push	r24
     d7c:	9f 93       	push	r25
     d7e:	af 93       	push	r26
     d80:	bf 93       	push	r27
     d82:	ef 93       	push	r30
     d84:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     d86:	e0 91 76 20 	lds	r30, 0x2076	; 0x802076 <tc_tcd0_err_callback>
     d8a:	f0 91 77 20 	lds	r31, 0x2077	; 0x802077 <tc_tcd0_err_callback+0x1>
     d8e:	30 97       	sbiw	r30, 0x00	; 0
     d90:	09 f0       	breq	.+2      	; 0xd94 <__vector_78+0x42>
		tc_tcd0_err_callback();
     d92:	19 95       	eicall
	}
}
     d94:	ff 91       	pop	r31
     d96:	ef 91       	pop	r30
     d98:	bf 91       	pop	r27
     d9a:	af 91       	pop	r26
     d9c:	9f 91       	pop	r25
     d9e:	8f 91       	pop	r24
     da0:	7f 91       	pop	r23
     da2:	6f 91       	pop	r22
     da4:	5f 91       	pop	r21
     da6:	4f 91       	pop	r20
     da8:	3f 91       	pop	r19
     daa:	2f 91       	pop	r18
     dac:	0f 90       	pop	r0
     dae:	0b be       	out	0x3b, r0	; 59
     db0:	0f 90       	pop	r0
     db2:	09 be       	out	0x39, r0	; 57
     db4:	0f 90       	pop	r0
     db6:	08 be       	out	0x38, r0	; 56
     db8:	0f 90       	pop	r0
     dba:	0f be       	out	0x3f, r0	; 63
     dbc:	0f 90       	pop	r0
     dbe:	1f 90       	pop	r1
     dc0:	18 95       	reti

00000dc2 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     dc2:	1f 92       	push	r1
     dc4:	0f 92       	push	r0
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	0f 92       	push	r0
     dca:	11 24       	eor	r1, r1
     dcc:	08 b6       	in	r0, 0x38	; 56
     dce:	0f 92       	push	r0
     dd0:	18 be       	out	0x38, r1	; 56
     dd2:	09 b6       	in	r0, 0x39	; 57
     dd4:	0f 92       	push	r0
     dd6:	19 be       	out	0x39, r1	; 57
     dd8:	0b b6       	in	r0, 0x3b	; 59
     dda:	0f 92       	push	r0
     ddc:	1b be       	out	0x3b, r1	; 59
     dde:	2f 93       	push	r18
     de0:	3f 93       	push	r19
     de2:	4f 93       	push	r20
     de4:	5f 93       	push	r21
     de6:	6f 93       	push	r22
     de8:	7f 93       	push	r23
     dea:	8f 93       	push	r24
     dec:	9f 93       	push	r25
     dee:	af 93       	push	r26
     df0:	bf 93       	push	r27
     df2:	ef 93       	push	r30
     df4:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     df6:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <tc_tcd0_cca_callback>
     dfa:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <tc_tcd0_cca_callback+0x1>
     dfe:	30 97       	sbiw	r30, 0x00	; 0
     e00:	09 f0       	breq	.+2      	; 0xe04 <__vector_79+0x42>
		tc_tcd0_cca_callback();
     e02:	19 95       	eicall
	}
}
     e04:	ff 91       	pop	r31
     e06:	ef 91       	pop	r30
     e08:	bf 91       	pop	r27
     e0a:	af 91       	pop	r26
     e0c:	9f 91       	pop	r25
     e0e:	8f 91       	pop	r24
     e10:	7f 91       	pop	r23
     e12:	6f 91       	pop	r22
     e14:	5f 91       	pop	r21
     e16:	4f 91       	pop	r20
     e18:	3f 91       	pop	r19
     e1a:	2f 91       	pop	r18
     e1c:	0f 90       	pop	r0
     e1e:	0b be       	out	0x3b, r0	; 59
     e20:	0f 90       	pop	r0
     e22:	09 be       	out	0x39, r0	; 57
     e24:	0f 90       	pop	r0
     e26:	08 be       	out	0x38, r0	; 56
     e28:	0f 90       	pop	r0
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	0f 90       	pop	r0
     e2e:	1f 90       	pop	r1
     e30:	18 95       	reti

00000e32 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     e32:	1f 92       	push	r1
     e34:	0f 92       	push	r0
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	0f 92       	push	r0
     e3a:	11 24       	eor	r1, r1
     e3c:	08 b6       	in	r0, 0x38	; 56
     e3e:	0f 92       	push	r0
     e40:	18 be       	out	0x38, r1	; 56
     e42:	09 b6       	in	r0, 0x39	; 57
     e44:	0f 92       	push	r0
     e46:	19 be       	out	0x39, r1	; 57
     e48:	0b b6       	in	r0, 0x3b	; 59
     e4a:	0f 92       	push	r0
     e4c:	1b be       	out	0x3b, r1	; 59
     e4e:	2f 93       	push	r18
     e50:	3f 93       	push	r19
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     e66:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <tc_tcd0_ccb_callback>
     e6a:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <tc_tcd0_ccb_callback+0x1>
     e6e:	30 97       	sbiw	r30, 0x00	; 0
     e70:	09 f0       	breq	.+2      	; 0xe74 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     e72:	19 95       	eicall
	}
}
     e74:	ff 91       	pop	r31
     e76:	ef 91       	pop	r30
     e78:	bf 91       	pop	r27
     e7a:	af 91       	pop	r26
     e7c:	9f 91       	pop	r25
     e7e:	8f 91       	pop	r24
     e80:	7f 91       	pop	r23
     e82:	6f 91       	pop	r22
     e84:	5f 91       	pop	r21
     e86:	4f 91       	pop	r20
     e88:	3f 91       	pop	r19
     e8a:	2f 91       	pop	r18
     e8c:	0f 90       	pop	r0
     e8e:	0b be       	out	0x3b, r0	; 59
     e90:	0f 90       	pop	r0
     e92:	09 be       	out	0x39, r0	; 57
     e94:	0f 90       	pop	r0
     e96:	08 be       	out	0x38, r0	; 56
     e98:	0f 90       	pop	r0
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	0f 90       	pop	r0
     e9e:	1f 90       	pop	r1
     ea0:	18 95       	reti

00000ea2 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     ea2:	1f 92       	push	r1
     ea4:	0f 92       	push	r0
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	08 b6       	in	r0, 0x38	; 56
     eae:	0f 92       	push	r0
     eb0:	18 be       	out	0x38, r1	; 56
     eb2:	09 b6       	in	r0, 0x39	; 57
     eb4:	0f 92       	push	r0
     eb6:	19 be       	out	0x39, r1	; 57
     eb8:	0b b6       	in	r0, 0x3b	; 59
     eba:	0f 92       	push	r0
     ebc:	1b be       	out	0x3b, r1	; 59
     ebe:	2f 93       	push	r18
     ec0:	3f 93       	push	r19
     ec2:	4f 93       	push	r20
     ec4:	5f 93       	push	r21
     ec6:	6f 93       	push	r22
     ec8:	7f 93       	push	r23
     eca:	8f 93       	push	r24
     ecc:	9f 93       	push	r25
     ece:	af 93       	push	r26
     ed0:	bf 93       	push	r27
     ed2:	ef 93       	push	r30
     ed4:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     ed6:	e0 91 70 20 	lds	r30, 0x2070	; 0x802070 <tc_tcd0_ccc_callback>
     eda:	f0 91 71 20 	lds	r31, 0x2071	; 0x802071 <tc_tcd0_ccc_callback+0x1>
     ede:	30 97       	sbiw	r30, 0x00	; 0
     ee0:	09 f0       	breq	.+2      	; 0xee4 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     ee2:	19 95       	eicall
	}
}
     ee4:	ff 91       	pop	r31
     ee6:	ef 91       	pop	r30
     ee8:	bf 91       	pop	r27
     eea:	af 91       	pop	r26
     eec:	9f 91       	pop	r25
     eee:	8f 91       	pop	r24
     ef0:	7f 91       	pop	r23
     ef2:	6f 91       	pop	r22
     ef4:	5f 91       	pop	r21
     ef6:	4f 91       	pop	r20
     ef8:	3f 91       	pop	r19
     efa:	2f 91       	pop	r18
     efc:	0f 90       	pop	r0
     efe:	0b be       	out	0x3b, r0	; 59
     f00:	0f 90       	pop	r0
     f02:	09 be       	out	0x39, r0	; 57
     f04:	0f 90       	pop	r0
     f06:	08 be       	out	0x38, r0	; 56
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	0f 90       	pop	r0
     f0e:	1f 90       	pop	r1
     f10:	18 95       	reti

00000f12 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	08 b6       	in	r0, 0x38	; 56
     f1e:	0f 92       	push	r0
     f20:	18 be       	out	0x38, r1	; 56
     f22:	09 b6       	in	r0, 0x39	; 57
     f24:	0f 92       	push	r0
     f26:	19 be       	out	0x39, r1	; 57
     f28:	0b b6       	in	r0, 0x3b	; 59
     f2a:	0f 92       	push	r0
     f2c:	1b be       	out	0x3b, r1	; 59
     f2e:	2f 93       	push	r18
     f30:	3f 93       	push	r19
     f32:	4f 93       	push	r20
     f34:	5f 93       	push	r21
     f36:	6f 93       	push	r22
     f38:	7f 93       	push	r23
     f3a:	8f 93       	push	r24
     f3c:	9f 93       	push	r25
     f3e:	af 93       	push	r26
     f40:	bf 93       	push	r27
     f42:	ef 93       	push	r30
     f44:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     f46:	e0 91 6e 20 	lds	r30, 0x206E	; 0x80206e <tc_tcd0_ccd_callback>
     f4a:	f0 91 6f 20 	lds	r31, 0x206F	; 0x80206f <tc_tcd0_ccd_callback+0x1>
     f4e:	30 97       	sbiw	r30, 0x00	; 0
     f50:	09 f0       	breq	.+2      	; 0xf54 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     f52:	19 95       	eicall
	}
}
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0b be       	out	0x3b, r0	; 59
     f70:	0f 90       	pop	r0
     f72:	09 be       	out	0x39, r0	; 57
     f74:	0f 90       	pop	r0
     f76:	08 be       	out	0x38, r0	; 56
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     f82:	1f 92       	push	r1
     f84:	0f 92       	push	r0
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	0f 92       	push	r0
     f8a:	11 24       	eor	r1, r1
     f8c:	08 b6       	in	r0, 0x38	; 56
     f8e:	0f 92       	push	r0
     f90:	18 be       	out	0x38, r1	; 56
     f92:	09 b6       	in	r0, 0x39	; 57
     f94:	0f 92       	push	r0
     f96:	19 be       	out	0x39, r1	; 57
     f98:	0b b6       	in	r0, 0x3b	; 59
     f9a:	0f 92       	push	r0
     f9c:	1b be       	out	0x3b, r1	; 59
     f9e:	2f 93       	push	r18
     fa0:	3f 93       	push	r19
     fa2:	4f 93       	push	r20
     fa4:	5f 93       	push	r21
     fa6:	6f 93       	push	r22
     fa8:	7f 93       	push	r23
     faa:	8f 93       	push	r24
     fac:	9f 93       	push	r25
     fae:	af 93       	push	r26
     fb0:	bf 93       	push	r27
     fb2:	ef 93       	push	r30
     fb4:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     fb6:	e0 91 6c 20 	lds	r30, 0x206C	; 0x80206c <tc_tcd1_ovf_callback>
     fba:	f0 91 6d 20 	lds	r31, 0x206D	; 0x80206d <tc_tcd1_ovf_callback+0x1>
     fbe:	30 97       	sbiw	r30, 0x00	; 0
     fc0:	09 f0       	breq	.+2      	; 0xfc4 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
     fc2:	19 95       	eicall
	}
}
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	bf 91       	pop	r27
     fca:	af 91       	pop	r26
     fcc:	9f 91       	pop	r25
     fce:	8f 91       	pop	r24
     fd0:	7f 91       	pop	r23
     fd2:	6f 91       	pop	r22
     fd4:	5f 91       	pop	r21
     fd6:	4f 91       	pop	r20
     fd8:	3f 91       	pop	r19
     fda:	2f 91       	pop	r18
     fdc:	0f 90       	pop	r0
     fde:	0b be       	out	0x3b, r0	; 59
     fe0:	0f 90       	pop	r0
     fe2:	09 be       	out	0x39, r0	; 57
     fe4:	0f 90       	pop	r0
     fe6:	08 be       	out	0x38, r0	; 56
     fe8:	0f 90       	pop	r0
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	0f 90       	pop	r0
     fee:	1f 90       	pop	r1
     ff0:	18 95       	reti

00000ff2 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
     ff2:	1f 92       	push	r1
     ff4:	0f 92       	push	r0
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	0f 92       	push	r0
     ffa:	11 24       	eor	r1, r1
     ffc:	08 b6       	in	r0, 0x38	; 56
     ffe:	0f 92       	push	r0
    1000:	18 be       	out	0x38, r1	; 56
    1002:	09 b6       	in	r0, 0x39	; 57
    1004:	0f 92       	push	r0
    1006:	19 be       	out	0x39, r1	; 57
    1008:	0b b6       	in	r0, 0x3b	; 59
    100a:	0f 92       	push	r0
    100c:	1b be       	out	0x3b, r1	; 59
    100e:	2f 93       	push	r18
    1010:	3f 93       	push	r19
    1012:	4f 93       	push	r20
    1014:	5f 93       	push	r21
    1016:	6f 93       	push	r22
    1018:	7f 93       	push	r23
    101a:	8f 93       	push	r24
    101c:	9f 93       	push	r25
    101e:	af 93       	push	r26
    1020:	bf 93       	push	r27
    1022:	ef 93       	push	r30
    1024:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    1026:	e0 91 6a 20 	lds	r30, 0x206A	; 0x80206a <tc_tcd1_err_callback>
    102a:	f0 91 6b 20 	lds	r31, 0x206B	; 0x80206b <tc_tcd1_err_callback+0x1>
    102e:	30 97       	sbiw	r30, 0x00	; 0
    1030:	09 f0       	breq	.+2      	; 0x1034 <__vector_84+0x42>
		tc_tcd1_err_callback();
    1032:	19 95       	eicall
	}
}
    1034:	ff 91       	pop	r31
    1036:	ef 91       	pop	r30
    1038:	bf 91       	pop	r27
    103a:	af 91       	pop	r26
    103c:	9f 91       	pop	r25
    103e:	8f 91       	pop	r24
    1040:	7f 91       	pop	r23
    1042:	6f 91       	pop	r22
    1044:	5f 91       	pop	r21
    1046:	4f 91       	pop	r20
    1048:	3f 91       	pop	r19
    104a:	2f 91       	pop	r18
    104c:	0f 90       	pop	r0
    104e:	0b be       	out	0x3b, r0	; 59
    1050:	0f 90       	pop	r0
    1052:	09 be       	out	0x39, r0	; 57
    1054:	0f 90       	pop	r0
    1056:	08 be       	out	0x38, r0	; 56
    1058:	0f 90       	pop	r0
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	0f 90       	pop	r0
    105e:	1f 90       	pop	r1
    1060:	18 95       	reti

00001062 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1062:	1f 92       	push	r1
    1064:	0f 92       	push	r0
    1066:	0f b6       	in	r0, 0x3f	; 63
    1068:	0f 92       	push	r0
    106a:	11 24       	eor	r1, r1
    106c:	08 b6       	in	r0, 0x38	; 56
    106e:	0f 92       	push	r0
    1070:	18 be       	out	0x38, r1	; 56
    1072:	09 b6       	in	r0, 0x39	; 57
    1074:	0f 92       	push	r0
    1076:	19 be       	out	0x39, r1	; 57
    1078:	0b b6       	in	r0, 0x3b	; 59
    107a:	0f 92       	push	r0
    107c:	1b be       	out	0x3b, r1	; 59
    107e:	2f 93       	push	r18
    1080:	3f 93       	push	r19
    1082:	4f 93       	push	r20
    1084:	5f 93       	push	r21
    1086:	6f 93       	push	r22
    1088:	7f 93       	push	r23
    108a:	8f 93       	push	r24
    108c:	9f 93       	push	r25
    108e:	af 93       	push	r26
    1090:	bf 93       	push	r27
    1092:	ef 93       	push	r30
    1094:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1096:	e0 91 68 20 	lds	r30, 0x2068	; 0x802068 <tc_tcd1_cca_callback>
    109a:	f0 91 69 20 	lds	r31, 0x2069	; 0x802069 <tc_tcd1_cca_callback+0x1>
    109e:	30 97       	sbiw	r30, 0x00	; 0
    10a0:	09 f0       	breq	.+2      	; 0x10a4 <__vector_85+0x42>
		tc_tcd1_cca_callback();
    10a2:	19 95       	eicall
	}
}
    10a4:	ff 91       	pop	r31
    10a6:	ef 91       	pop	r30
    10a8:	bf 91       	pop	r27
    10aa:	af 91       	pop	r26
    10ac:	9f 91       	pop	r25
    10ae:	8f 91       	pop	r24
    10b0:	7f 91       	pop	r23
    10b2:	6f 91       	pop	r22
    10b4:	5f 91       	pop	r21
    10b6:	4f 91       	pop	r20
    10b8:	3f 91       	pop	r19
    10ba:	2f 91       	pop	r18
    10bc:	0f 90       	pop	r0
    10be:	0b be       	out	0x3b, r0	; 59
    10c0:	0f 90       	pop	r0
    10c2:	09 be       	out	0x39, r0	; 57
    10c4:	0f 90       	pop	r0
    10c6:	08 be       	out	0x38, r0	; 56
    10c8:	0f 90       	pop	r0
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	0f 90       	pop	r0
    10ce:	1f 90       	pop	r1
    10d0:	18 95       	reti

000010d2 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    10d2:	1f 92       	push	r1
    10d4:	0f 92       	push	r0
    10d6:	0f b6       	in	r0, 0x3f	; 63
    10d8:	0f 92       	push	r0
    10da:	11 24       	eor	r1, r1
    10dc:	08 b6       	in	r0, 0x38	; 56
    10de:	0f 92       	push	r0
    10e0:	18 be       	out	0x38, r1	; 56
    10e2:	09 b6       	in	r0, 0x39	; 57
    10e4:	0f 92       	push	r0
    10e6:	19 be       	out	0x39, r1	; 57
    10e8:	0b b6       	in	r0, 0x3b	; 59
    10ea:	0f 92       	push	r0
    10ec:	1b be       	out	0x3b, r1	; 59
    10ee:	2f 93       	push	r18
    10f0:	3f 93       	push	r19
    10f2:	4f 93       	push	r20
    10f4:	5f 93       	push	r21
    10f6:	6f 93       	push	r22
    10f8:	7f 93       	push	r23
    10fa:	8f 93       	push	r24
    10fc:	9f 93       	push	r25
    10fe:	af 93       	push	r26
    1100:	bf 93       	push	r27
    1102:	ef 93       	push	r30
    1104:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1106:	e0 91 66 20 	lds	r30, 0x2066	; 0x802066 <tc_tcd1_ccb_callback>
    110a:	f0 91 67 20 	lds	r31, 0x2067	; 0x802067 <tc_tcd1_ccb_callback+0x1>
    110e:	30 97       	sbiw	r30, 0x00	; 0
    1110:	09 f0       	breq	.+2      	; 0x1114 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    1112:	19 95       	eicall
	}
}
    1114:	ff 91       	pop	r31
    1116:	ef 91       	pop	r30
    1118:	bf 91       	pop	r27
    111a:	af 91       	pop	r26
    111c:	9f 91       	pop	r25
    111e:	8f 91       	pop	r24
    1120:	7f 91       	pop	r23
    1122:	6f 91       	pop	r22
    1124:	5f 91       	pop	r21
    1126:	4f 91       	pop	r20
    1128:	3f 91       	pop	r19
    112a:	2f 91       	pop	r18
    112c:	0f 90       	pop	r0
    112e:	0b be       	out	0x3b, r0	; 59
    1130:	0f 90       	pop	r0
    1132:	09 be       	out	0x39, r0	; 57
    1134:	0f 90       	pop	r0
    1136:	08 be       	out	0x38, r0	; 56
    1138:	0f 90       	pop	r0
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	0f 90       	pop	r0
    113e:	1f 90       	pop	r1
    1140:	18 95       	reti

00001142 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    1142:	1f 92       	push	r1
    1144:	0f 92       	push	r0
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	0f 92       	push	r0
    114a:	11 24       	eor	r1, r1
    114c:	08 b6       	in	r0, 0x38	; 56
    114e:	0f 92       	push	r0
    1150:	18 be       	out	0x38, r1	; 56
    1152:	09 b6       	in	r0, 0x39	; 57
    1154:	0f 92       	push	r0
    1156:	19 be       	out	0x39, r1	; 57
    1158:	0b b6       	in	r0, 0x3b	; 59
    115a:	0f 92       	push	r0
    115c:	1b be       	out	0x3b, r1	; 59
    115e:	2f 93       	push	r18
    1160:	3f 93       	push	r19
    1162:	4f 93       	push	r20
    1164:	5f 93       	push	r21
    1166:	6f 93       	push	r22
    1168:	7f 93       	push	r23
    116a:	8f 93       	push	r24
    116c:	9f 93       	push	r25
    116e:	af 93       	push	r26
    1170:	bf 93       	push	r27
    1172:	ef 93       	push	r30
    1174:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1176:	e0 91 64 20 	lds	r30, 0x2064	; 0x802064 <tc_tce0_ovf_callback>
    117a:	f0 91 65 20 	lds	r31, 0x2065	; 0x802065 <tc_tce0_ovf_callback+0x1>
    117e:	30 97       	sbiw	r30, 0x00	; 0
    1180:	09 f0       	breq	.+2      	; 0x1184 <__vector_47+0x42>
		tc_tce0_ovf_callback();
    1182:	19 95       	eicall
	}
}
    1184:	ff 91       	pop	r31
    1186:	ef 91       	pop	r30
    1188:	bf 91       	pop	r27
    118a:	af 91       	pop	r26
    118c:	9f 91       	pop	r25
    118e:	8f 91       	pop	r24
    1190:	7f 91       	pop	r23
    1192:	6f 91       	pop	r22
    1194:	5f 91       	pop	r21
    1196:	4f 91       	pop	r20
    1198:	3f 91       	pop	r19
    119a:	2f 91       	pop	r18
    119c:	0f 90       	pop	r0
    119e:	0b be       	out	0x3b, r0	; 59
    11a0:	0f 90       	pop	r0
    11a2:	09 be       	out	0x39, r0	; 57
    11a4:	0f 90       	pop	r0
    11a6:	08 be       	out	0x38, r0	; 56
    11a8:	0f 90       	pop	r0
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	0f 90       	pop	r0
    11ae:	1f 90       	pop	r1
    11b0:	18 95       	reti

000011b2 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    11b2:	1f 92       	push	r1
    11b4:	0f 92       	push	r0
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	0f 92       	push	r0
    11ba:	11 24       	eor	r1, r1
    11bc:	08 b6       	in	r0, 0x38	; 56
    11be:	0f 92       	push	r0
    11c0:	18 be       	out	0x38, r1	; 56
    11c2:	09 b6       	in	r0, 0x39	; 57
    11c4:	0f 92       	push	r0
    11c6:	19 be       	out	0x39, r1	; 57
    11c8:	0b b6       	in	r0, 0x3b	; 59
    11ca:	0f 92       	push	r0
    11cc:	1b be       	out	0x3b, r1	; 59
    11ce:	2f 93       	push	r18
    11d0:	3f 93       	push	r19
    11d2:	4f 93       	push	r20
    11d4:	5f 93       	push	r21
    11d6:	6f 93       	push	r22
    11d8:	7f 93       	push	r23
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	af 93       	push	r26
    11e0:	bf 93       	push	r27
    11e2:	ef 93       	push	r30
    11e4:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    11e6:	e0 91 62 20 	lds	r30, 0x2062	; 0x802062 <tc_tce0_err_callback>
    11ea:	f0 91 63 20 	lds	r31, 0x2063	; 0x802063 <tc_tce0_err_callback+0x1>
    11ee:	30 97       	sbiw	r30, 0x00	; 0
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <__vector_48+0x42>
		tc_tce0_err_callback();
    11f2:	19 95       	eicall
	}
}
    11f4:	ff 91       	pop	r31
    11f6:	ef 91       	pop	r30
    11f8:	bf 91       	pop	r27
    11fa:	af 91       	pop	r26
    11fc:	9f 91       	pop	r25
    11fe:	8f 91       	pop	r24
    1200:	7f 91       	pop	r23
    1202:	6f 91       	pop	r22
    1204:	5f 91       	pop	r21
    1206:	4f 91       	pop	r20
    1208:	3f 91       	pop	r19
    120a:	2f 91       	pop	r18
    120c:	0f 90       	pop	r0
    120e:	0b be       	out	0x3b, r0	; 59
    1210:	0f 90       	pop	r0
    1212:	09 be       	out	0x39, r0	; 57
    1214:	0f 90       	pop	r0
    1216:	08 be       	out	0x38, r0	; 56
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	0f 90       	pop	r0
    121e:	1f 90       	pop	r1
    1220:	18 95       	reti

00001222 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1222:	1f 92       	push	r1
    1224:	0f 92       	push	r0
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	0f 92       	push	r0
    122a:	11 24       	eor	r1, r1
    122c:	08 b6       	in	r0, 0x38	; 56
    122e:	0f 92       	push	r0
    1230:	18 be       	out	0x38, r1	; 56
    1232:	09 b6       	in	r0, 0x39	; 57
    1234:	0f 92       	push	r0
    1236:	19 be       	out	0x39, r1	; 57
    1238:	0b b6       	in	r0, 0x3b	; 59
    123a:	0f 92       	push	r0
    123c:	1b be       	out	0x3b, r1	; 59
    123e:	2f 93       	push	r18
    1240:	3f 93       	push	r19
    1242:	4f 93       	push	r20
    1244:	5f 93       	push	r21
    1246:	6f 93       	push	r22
    1248:	7f 93       	push	r23
    124a:	8f 93       	push	r24
    124c:	9f 93       	push	r25
    124e:	af 93       	push	r26
    1250:	bf 93       	push	r27
    1252:	ef 93       	push	r30
    1254:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    1256:	e0 91 60 20 	lds	r30, 0x2060	; 0x802060 <tc_tce0_cca_callback>
    125a:	f0 91 61 20 	lds	r31, 0x2061	; 0x802061 <tc_tce0_cca_callback+0x1>
    125e:	30 97       	sbiw	r30, 0x00	; 0
    1260:	09 f0       	breq	.+2      	; 0x1264 <__vector_49+0x42>
		tc_tce0_cca_callback();
    1262:	19 95       	eicall
	}
}
    1264:	ff 91       	pop	r31
    1266:	ef 91       	pop	r30
    1268:	bf 91       	pop	r27
    126a:	af 91       	pop	r26
    126c:	9f 91       	pop	r25
    126e:	8f 91       	pop	r24
    1270:	7f 91       	pop	r23
    1272:	6f 91       	pop	r22
    1274:	5f 91       	pop	r21
    1276:	4f 91       	pop	r20
    1278:	3f 91       	pop	r19
    127a:	2f 91       	pop	r18
    127c:	0f 90       	pop	r0
    127e:	0b be       	out	0x3b, r0	; 59
    1280:	0f 90       	pop	r0
    1282:	09 be       	out	0x39, r0	; 57
    1284:	0f 90       	pop	r0
    1286:	08 be       	out	0x38, r0	; 56
    1288:	0f 90       	pop	r0
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	0f 90       	pop	r0
    128e:	1f 90       	pop	r1
    1290:	18 95       	reti

00001292 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1292:	1f 92       	push	r1
    1294:	0f 92       	push	r0
    1296:	0f b6       	in	r0, 0x3f	; 63
    1298:	0f 92       	push	r0
    129a:	11 24       	eor	r1, r1
    129c:	08 b6       	in	r0, 0x38	; 56
    129e:	0f 92       	push	r0
    12a0:	18 be       	out	0x38, r1	; 56
    12a2:	09 b6       	in	r0, 0x39	; 57
    12a4:	0f 92       	push	r0
    12a6:	19 be       	out	0x39, r1	; 57
    12a8:	0b b6       	in	r0, 0x3b	; 59
    12aa:	0f 92       	push	r0
    12ac:	1b be       	out	0x3b, r1	; 59
    12ae:	2f 93       	push	r18
    12b0:	3f 93       	push	r19
    12b2:	4f 93       	push	r20
    12b4:	5f 93       	push	r21
    12b6:	6f 93       	push	r22
    12b8:	7f 93       	push	r23
    12ba:	8f 93       	push	r24
    12bc:	9f 93       	push	r25
    12be:	af 93       	push	r26
    12c0:	bf 93       	push	r27
    12c2:	ef 93       	push	r30
    12c4:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    12c6:	e0 91 5e 20 	lds	r30, 0x205E	; 0x80205e <tc_tce0_ccb_callback>
    12ca:	f0 91 5f 20 	lds	r31, 0x205F	; 0x80205f <tc_tce0_ccb_callback+0x1>
    12ce:	30 97       	sbiw	r30, 0x00	; 0
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <__vector_50+0x42>
		tc_tce0_ccb_callback();
    12d2:	19 95       	eicall
	}
}
    12d4:	ff 91       	pop	r31
    12d6:	ef 91       	pop	r30
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	7f 91       	pop	r23
    12e2:	6f 91       	pop	r22
    12e4:	5f 91       	pop	r21
    12e6:	4f 91       	pop	r20
    12e8:	3f 91       	pop	r19
    12ea:	2f 91       	pop	r18
    12ec:	0f 90       	pop	r0
    12ee:	0b be       	out	0x3b, r0	; 59
    12f0:	0f 90       	pop	r0
    12f2:	09 be       	out	0x39, r0	; 57
    12f4:	0f 90       	pop	r0
    12f6:	08 be       	out	0x38, r0	; 56
    12f8:	0f 90       	pop	r0
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	0f 90       	pop	r0
    12fe:	1f 90       	pop	r1
    1300:	18 95       	reti

00001302 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1302:	1f 92       	push	r1
    1304:	0f 92       	push	r0
    1306:	0f b6       	in	r0, 0x3f	; 63
    1308:	0f 92       	push	r0
    130a:	11 24       	eor	r1, r1
    130c:	08 b6       	in	r0, 0x38	; 56
    130e:	0f 92       	push	r0
    1310:	18 be       	out	0x38, r1	; 56
    1312:	09 b6       	in	r0, 0x39	; 57
    1314:	0f 92       	push	r0
    1316:	19 be       	out	0x39, r1	; 57
    1318:	0b b6       	in	r0, 0x3b	; 59
    131a:	0f 92       	push	r0
    131c:	1b be       	out	0x3b, r1	; 59
    131e:	2f 93       	push	r18
    1320:	3f 93       	push	r19
    1322:	4f 93       	push	r20
    1324:	5f 93       	push	r21
    1326:	6f 93       	push	r22
    1328:	7f 93       	push	r23
    132a:	8f 93       	push	r24
    132c:	9f 93       	push	r25
    132e:	af 93       	push	r26
    1330:	bf 93       	push	r27
    1332:	ef 93       	push	r30
    1334:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1336:	e0 91 5c 20 	lds	r30, 0x205C	; 0x80205c <tc_tce0_ccc_callback>
    133a:	f0 91 5d 20 	lds	r31, 0x205D	; 0x80205d <tc_tce0_ccc_callback+0x1>
    133e:	30 97       	sbiw	r30, 0x00	; 0
    1340:	09 f0       	breq	.+2      	; 0x1344 <__vector_51+0x42>
		tc_tce0_ccc_callback();
    1342:	19 95       	eicall
	}
}
    1344:	ff 91       	pop	r31
    1346:	ef 91       	pop	r30
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	0f 90       	pop	r0
    135e:	0b be       	out	0x3b, r0	; 59
    1360:	0f 90       	pop	r0
    1362:	09 be       	out	0x39, r0	; 57
    1364:	0f 90       	pop	r0
    1366:	08 be       	out	0x38, r0	; 56
    1368:	0f 90       	pop	r0
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	0f 90       	pop	r0
    136e:	1f 90       	pop	r1
    1370:	18 95       	reti

00001372 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1372:	1f 92       	push	r1
    1374:	0f 92       	push	r0
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	0f 92       	push	r0
    137a:	11 24       	eor	r1, r1
    137c:	08 b6       	in	r0, 0x38	; 56
    137e:	0f 92       	push	r0
    1380:	18 be       	out	0x38, r1	; 56
    1382:	09 b6       	in	r0, 0x39	; 57
    1384:	0f 92       	push	r0
    1386:	19 be       	out	0x39, r1	; 57
    1388:	0b b6       	in	r0, 0x3b	; 59
    138a:	0f 92       	push	r0
    138c:	1b be       	out	0x3b, r1	; 59
    138e:	2f 93       	push	r18
    1390:	3f 93       	push	r19
    1392:	4f 93       	push	r20
    1394:	5f 93       	push	r21
    1396:	6f 93       	push	r22
    1398:	7f 93       	push	r23
    139a:	8f 93       	push	r24
    139c:	9f 93       	push	r25
    139e:	af 93       	push	r26
    13a0:	bf 93       	push	r27
    13a2:	ef 93       	push	r30
    13a4:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    13a6:	e0 91 5a 20 	lds	r30, 0x205A	; 0x80205a <tc_tce0_ccd_callback>
    13aa:	f0 91 5b 20 	lds	r31, 0x205B	; 0x80205b <tc_tce0_ccd_callback+0x1>
    13ae:	30 97       	sbiw	r30, 0x00	; 0
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <__vector_52+0x42>
		tc_tce0_ccd_callback();
    13b2:	19 95       	eicall
	}
}
    13b4:	ff 91       	pop	r31
    13b6:	ef 91       	pop	r30
    13b8:	bf 91       	pop	r27
    13ba:	af 91       	pop	r26
    13bc:	9f 91       	pop	r25
    13be:	8f 91       	pop	r24
    13c0:	7f 91       	pop	r23
    13c2:	6f 91       	pop	r22
    13c4:	5f 91       	pop	r21
    13c6:	4f 91       	pop	r20
    13c8:	3f 91       	pop	r19
    13ca:	2f 91       	pop	r18
    13cc:	0f 90       	pop	r0
    13ce:	0b be       	out	0x3b, r0	; 59
    13d0:	0f 90       	pop	r0
    13d2:	09 be       	out	0x39, r0	; 57
    13d4:	0f 90       	pop	r0
    13d6:	08 be       	out	0x38, r0	; 56
    13d8:	0f 90       	pop	r0
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	0f 90       	pop	r0
    13de:	1f 90       	pop	r1
    13e0:	18 95       	reti

000013e2 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    13e2:	1f 92       	push	r1
    13e4:	0f 92       	push	r0
    13e6:	0f b6       	in	r0, 0x3f	; 63
    13e8:	0f 92       	push	r0
    13ea:	11 24       	eor	r1, r1
    13ec:	08 b6       	in	r0, 0x38	; 56
    13ee:	0f 92       	push	r0
    13f0:	18 be       	out	0x38, r1	; 56
    13f2:	09 b6       	in	r0, 0x39	; 57
    13f4:	0f 92       	push	r0
    13f6:	19 be       	out	0x39, r1	; 57
    13f8:	0b b6       	in	r0, 0x3b	; 59
    13fa:	0f 92       	push	r0
    13fc:	1b be       	out	0x3b, r1	; 59
    13fe:	2f 93       	push	r18
    1400:	3f 93       	push	r19
    1402:	4f 93       	push	r20
    1404:	5f 93       	push	r21
    1406:	6f 93       	push	r22
    1408:	7f 93       	push	r23
    140a:	8f 93       	push	r24
    140c:	9f 93       	push	r25
    140e:	af 93       	push	r26
    1410:	bf 93       	push	r27
    1412:	ef 93       	push	r30
    1414:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    1416:	e0 91 58 20 	lds	r30, 0x2058	; 0x802058 <tc_tce1_ovf_callback>
    141a:	f0 91 59 20 	lds	r31, 0x2059	; 0x802059 <tc_tce1_ovf_callback+0x1>
    141e:	30 97       	sbiw	r30, 0x00	; 0
    1420:	09 f0       	breq	.+2      	; 0x1424 <__vector_53+0x42>
		tc_tce1_ovf_callback();
    1422:	19 95       	eicall
	}
}
    1424:	ff 91       	pop	r31
    1426:	ef 91       	pop	r30
    1428:	bf 91       	pop	r27
    142a:	af 91       	pop	r26
    142c:	9f 91       	pop	r25
    142e:	8f 91       	pop	r24
    1430:	7f 91       	pop	r23
    1432:	6f 91       	pop	r22
    1434:	5f 91       	pop	r21
    1436:	4f 91       	pop	r20
    1438:	3f 91       	pop	r19
    143a:	2f 91       	pop	r18
    143c:	0f 90       	pop	r0
    143e:	0b be       	out	0x3b, r0	; 59
    1440:	0f 90       	pop	r0
    1442:	09 be       	out	0x39, r0	; 57
    1444:	0f 90       	pop	r0
    1446:	08 be       	out	0x38, r0	; 56
    1448:	0f 90       	pop	r0
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	0f 90       	pop	r0
    144e:	1f 90       	pop	r1
    1450:	18 95       	reti

00001452 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1452:	1f 92       	push	r1
    1454:	0f 92       	push	r0
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	0f 92       	push	r0
    145a:	11 24       	eor	r1, r1
    145c:	08 b6       	in	r0, 0x38	; 56
    145e:	0f 92       	push	r0
    1460:	18 be       	out	0x38, r1	; 56
    1462:	09 b6       	in	r0, 0x39	; 57
    1464:	0f 92       	push	r0
    1466:	19 be       	out	0x39, r1	; 57
    1468:	0b b6       	in	r0, 0x3b	; 59
    146a:	0f 92       	push	r0
    146c:	1b be       	out	0x3b, r1	; 59
    146e:	2f 93       	push	r18
    1470:	3f 93       	push	r19
    1472:	4f 93       	push	r20
    1474:	5f 93       	push	r21
    1476:	6f 93       	push	r22
    1478:	7f 93       	push	r23
    147a:	8f 93       	push	r24
    147c:	9f 93       	push	r25
    147e:	af 93       	push	r26
    1480:	bf 93       	push	r27
    1482:	ef 93       	push	r30
    1484:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1486:	e0 91 56 20 	lds	r30, 0x2056	; 0x802056 <tc_tce1_err_callback>
    148a:	f0 91 57 20 	lds	r31, 0x2057	; 0x802057 <tc_tce1_err_callback+0x1>
    148e:	30 97       	sbiw	r30, 0x00	; 0
    1490:	09 f0       	breq	.+2      	; 0x1494 <__vector_54+0x42>
		tc_tce1_err_callback();
    1492:	19 95       	eicall
	}
}
    1494:	ff 91       	pop	r31
    1496:	ef 91       	pop	r30
    1498:	bf 91       	pop	r27
    149a:	af 91       	pop	r26
    149c:	9f 91       	pop	r25
    149e:	8f 91       	pop	r24
    14a0:	7f 91       	pop	r23
    14a2:	6f 91       	pop	r22
    14a4:	5f 91       	pop	r21
    14a6:	4f 91       	pop	r20
    14a8:	3f 91       	pop	r19
    14aa:	2f 91       	pop	r18
    14ac:	0f 90       	pop	r0
    14ae:	0b be       	out	0x3b, r0	; 59
    14b0:	0f 90       	pop	r0
    14b2:	09 be       	out	0x39, r0	; 57
    14b4:	0f 90       	pop	r0
    14b6:	08 be       	out	0x38, r0	; 56
    14b8:	0f 90       	pop	r0
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	0f 90       	pop	r0
    14be:	1f 90       	pop	r1
    14c0:	18 95       	reti

000014c2 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    14c2:	1f 92       	push	r1
    14c4:	0f 92       	push	r0
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	0f 92       	push	r0
    14ca:	11 24       	eor	r1, r1
    14cc:	08 b6       	in	r0, 0x38	; 56
    14ce:	0f 92       	push	r0
    14d0:	18 be       	out	0x38, r1	; 56
    14d2:	09 b6       	in	r0, 0x39	; 57
    14d4:	0f 92       	push	r0
    14d6:	19 be       	out	0x39, r1	; 57
    14d8:	0b b6       	in	r0, 0x3b	; 59
    14da:	0f 92       	push	r0
    14dc:	1b be       	out	0x3b, r1	; 59
    14de:	2f 93       	push	r18
    14e0:	3f 93       	push	r19
    14e2:	4f 93       	push	r20
    14e4:	5f 93       	push	r21
    14e6:	6f 93       	push	r22
    14e8:	7f 93       	push	r23
    14ea:	8f 93       	push	r24
    14ec:	9f 93       	push	r25
    14ee:	af 93       	push	r26
    14f0:	bf 93       	push	r27
    14f2:	ef 93       	push	r30
    14f4:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    14f6:	e0 91 54 20 	lds	r30, 0x2054	; 0x802054 <tc_tce1_cca_callback>
    14fa:	f0 91 55 20 	lds	r31, 0x2055	; 0x802055 <tc_tce1_cca_callback+0x1>
    14fe:	30 97       	sbiw	r30, 0x00	; 0
    1500:	09 f0       	breq	.+2      	; 0x1504 <__vector_55+0x42>
		tc_tce1_cca_callback();
    1502:	19 95       	eicall
	}
}
    1504:	ff 91       	pop	r31
    1506:	ef 91       	pop	r30
    1508:	bf 91       	pop	r27
    150a:	af 91       	pop	r26
    150c:	9f 91       	pop	r25
    150e:	8f 91       	pop	r24
    1510:	7f 91       	pop	r23
    1512:	6f 91       	pop	r22
    1514:	5f 91       	pop	r21
    1516:	4f 91       	pop	r20
    1518:	3f 91       	pop	r19
    151a:	2f 91       	pop	r18
    151c:	0f 90       	pop	r0
    151e:	0b be       	out	0x3b, r0	; 59
    1520:	0f 90       	pop	r0
    1522:	09 be       	out	0x39, r0	; 57
    1524:	0f 90       	pop	r0
    1526:	08 be       	out	0x38, r0	; 56
    1528:	0f 90       	pop	r0
    152a:	0f be       	out	0x3f, r0	; 63
    152c:	0f 90       	pop	r0
    152e:	1f 90       	pop	r1
    1530:	18 95       	reti

00001532 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1532:	1f 92       	push	r1
    1534:	0f 92       	push	r0
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	0f 92       	push	r0
    153a:	11 24       	eor	r1, r1
    153c:	08 b6       	in	r0, 0x38	; 56
    153e:	0f 92       	push	r0
    1540:	18 be       	out	0x38, r1	; 56
    1542:	09 b6       	in	r0, 0x39	; 57
    1544:	0f 92       	push	r0
    1546:	19 be       	out	0x39, r1	; 57
    1548:	0b b6       	in	r0, 0x3b	; 59
    154a:	0f 92       	push	r0
    154c:	1b be       	out	0x3b, r1	; 59
    154e:	2f 93       	push	r18
    1550:	3f 93       	push	r19
    1552:	4f 93       	push	r20
    1554:	5f 93       	push	r21
    1556:	6f 93       	push	r22
    1558:	7f 93       	push	r23
    155a:	8f 93       	push	r24
    155c:	9f 93       	push	r25
    155e:	af 93       	push	r26
    1560:	bf 93       	push	r27
    1562:	ef 93       	push	r30
    1564:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    1566:	e0 91 52 20 	lds	r30, 0x2052	; 0x802052 <tc_tce1_ccb_callback>
    156a:	f0 91 53 20 	lds	r31, 0x2053	; 0x802053 <tc_tce1_ccb_callback+0x1>
    156e:	30 97       	sbiw	r30, 0x00	; 0
    1570:	09 f0       	breq	.+2      	; 0x1574 <__vector_56+0x42>
		tc_tce1_ccb_callback();
    1572:	19 95       	eicall
	}
}
    1574:	ff 91       	pop	r31
    1576:	ef 91       	pop	r30
    1578:	bf 91       	pop	r27
    157a:	af 91       	pop	r26
    157c:	9f 91       	pop	r25
    157e:	8f 91       	pop	r24
    1580:	7f 91       	pop	r23
    1582:	6f 91       	pop	r22
    1584:	5f 91       	pop	r21
    1586:	4f 91       	pop	r20
    1588:	3f 91       	pop	r19
    158a:	2f 91       	pop	r18
    158c:	0f 90       	pop	r0
    158e:	0b be       	out	0x3b, r0	; 59
    1590:	0f 90       	pop	r0
    1592:	09 be       	out	0x39, r0	; 57
    1594:	0f 90       	pop	r0
    1596:	08 be       	out	0x38, r0	; 56
    1598:	0f 90       	pop	r0
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	0f 90       	pop	r0
    159e:	1f 90       	pop	r1
    15a0:	18 95       	reti

000015a2 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    15a2:	1f 92       	push	r1
    15a4:	0f 92       	push	r0
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	0f 92       	push	r0
    15aa:	11 24       	eor	r1, r1
    15ac:	08 b6       	in	r0, 0x38	; 56
    15ae:	0f 92       	push	r0
    15b0:	18 be       	out	0x38, r1	; 56
    15b2:	09 b6       	in	r0, 0x39	; 57
    15b4:	0f 92       	push	r0
    15b6:	19 be       	out	0x39, r1	; 57
    15b8:	0b b6       	in	r0, 0x3b	; 59
    15ba:	0f 92       	push	r0
    15bc:	1b be       	out	0x3b, r1	; 59
    15be:	2f 93       	push	r18
    15c0:	3f 93       	push	r19
    15c2:	4f 93       	push	r20
    15c4:	5f 93       	push	r21
    15c6:	6f 93       	push	r22
    15c8:	7f 93       	push	r23
    15ca:	8f 93       	push	r24
    15cc:	9f 93       	push	r25
    15ce:	af 93       	push	r26
    15d0:	bf 93       	push	r27
    15d2:	ef 93       	push	r30
    15d4:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    15d6:	e0 91 50 20 	lds	r30, 0x2050	; 0x802050 <tc_tcf0_ovf_callback>
    15da:	f0 91 51 20 	lds	r31, 0x2051	; 0x802051 <tc_tcf0_ovf_callback+0x1>
    15de:	30 97       	sbiw	r30, 0x00	; 0
    15e0:	09 f0       	breq	.+2      	; 0x15e4 <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    15e2:	19 95       	eicall
	}
}
    15e4:	ff 91       	pop	r31
    15e6:	ef 91       	pop	r30
    15e8:	bf 91       	pop	r27
    15ea:	af 91       	pop	r26
    15ec:	9f 91       	pop	r25
    15ee:	8f 91       	pop	r24
    15f0:	7f 91       	pop	r23
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	0f 90       	pop	r0
    15fe:	0b be       	out	0x3b, r0	; 59
    1600:	0f 90       	pop	r0
    1602:	09 be       	out	0x39, r0	; 57
    1604:	0f 90       	pop	r0
    1606:	08 be       	out	0x38, r0	; 56
    1608:	0f 90       	pop	r0
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	0f 90       	pop	r0
    160e:	1f 90       	pop	r1
    1610:	18 95       	reti

00001612 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    1612:	1f 92       	push	r1
    1614:	0f 92       	push	r0
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	0f 92       	push	r0
    161a:	11 24       	eor	r1, r1
    161c:	08 b6       	in	r0, 0x38	; 56
    161e:	0f 92       	push	r0
    1620:	18 be       	out	0x38, r1	; 56
    1622:	09 b6       	in	r0, 0x39	; 57
    1624:	0f 92       	push	r0
    1626:	19 be       	out	0x39, r1	; 57
    1628:	0b b6       	in	r0, 0x3b	; 59
    162a:	0f 92       	push	r0
    162c:	1b be       	out	0x3b, r1	; 59
    162e:	2f 93       	push	r18
    1630:	3f 93       	push	r19
    1632:	4f 93       	push	r20
    1634:	5f 93       	push	r21
    1636:	6f 93       	push	r22
    1638:	7f 93       	push	r23
    163a:	8f 93       	push	r24
    163c:	9f 93       	push	r25
    163e:	af 93       	push	r26
    1640:	bf 93       	push	r27
    1642:	ef 93       	push	r30
    1644:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    1646:	e0 91 4e 20 	lds	r30, 0x204E	; 0x80204e <tc_tcf0_err_callback>
    164a:	f0 91 4f 20 	lds	r31, 0x204F	; 0x80204f <tc_tcf0_err_callback+0x1>
    164e:	30 97       	sbiw	r30, 0x00	; 0
    1650:	09 f0       	breq	.+2      	; 0x1654 <__vector_109+0x42>
		tc_tcf0_err_callback();
    1652:	19 95       	eicall
	}
}
    1654:	ff 91       	pop	r31
    1656:	ef 91       	pop	r30
    1658:	bf 91       	pop	r27
    165a:	af 91       	pop	r26
    165c:	9f 91       	pop	r25
    165e:	8f 91       	pop	r24
    1660:	7f 91       	pop	r23
    1662:	6f 91       	pop	r22
    1664:	5f 91       	pop	r21
    1666:	4f 91       	pop	r20
    1668:	3f 91       	pop	r19
    166a:	2f 91       	pop	r18
    166c:	0f 90       	pop	r0
    166e:	0b be       	out	0x3b, r0	; 59
    1670:	0f 90       	pop	r0
    1672:	09 be       	out	0x39, r0	; 57
    1674:	0f 90       	pop	r0
    1676:	08 be       	out	0x38, r0	; 56
    1678:	0f 90       	pop	r0
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	0f 90       	pop	r0
    167e:	1f 90       	pop	r1
    1680:	18 95       	reti

00001682 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1682:	1f 92       	push	r1
    1684:	0f 92       	push	r0
    1686:	0f b6       	in	r0, 0x3f	; 63
    1688:	0f 92       	push	r0
    168a:	11 24       	eor	r1, r1
    168c:	08 b6       	in	r0, 0x38	; 56
    168e:	0f 92       	push	r0
    1690:	18 be       	out	0x38, r1	; 56
    1692:	09 b6       	in	r0, 0x39	; 57
    1694:	0f 92       	push	r0
    1696:	19 be       	out	0x39, r1	; 57
    1698:	0b b6       	in	r0, 0x3b	; 59
    169a:	0f 92       	push	r0
    169c:	1b be       	out	0x3b, r1	; 59
    169e:	2f 93       	push	r18
    16a0:	3f 93       	push	r19
    16a2:	4f 93       	push	r20
    16a4:	5f 93       	push	r21
    16a6:	6f 93       	push	r22
    16a8:	7f 93       	push	r23
    16aa:	8f 93       	push	r24
    16ac:	9f 93       	push	r25
    16ae:	af 93       	push	r26
    16b0:	bf 93       	push	r27
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    16b6:	e0 91 4c 20 	lds	r30, 0x204C	; 0x80204c <tc_tcf0_cca_callback>
    16ba:	f0 91 4d 20 	lds	r31, 0x204D	; 0x80204d <tc_tcf0_cca_callback+0x1>
    16be:	30 97       	sbiw	r30, 0x00	; 0
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <__vector_110+0x42>
		tc_tcf0_cca_callback();
    16c2:	19 95       	eicall
	}
}
    16c4:	ff 91       	pop	r31
    16c6:	ef 91       	pop	r30
    16c8:	bf 91       	pop	r27
    16ca:	af 91       	pop	r26
    16cc:	9f 91       	pop	r25
    16ce:	8f 91       	pop	r24
    16d0:	7f 91       	pop	r23
    16d2:	6f 91       	pop	r22
    16d4:	5f 91       	pop	r21
    16d6:	4f 91       	pop	r20
    16d8:	3f 91       	pop	r19
    16da:	2f 91       	pop	r18
    16dc:	0f 90       	pop	r0
    16de:	0b be       	out	0x3b, r0	; 59
    16e0:	0f 90       	pop	r0
    16e2:	09 be       	out	0x39, r0	; 57
    16e4:	0f 90       	pop	r0
    16e6:	08 be       	out	0x38, r0	; 56
    16e8:	0f 90       	pop	r0
    16ea:	0f be       	out	0x3f, r0	; 63
    16ec:	0f 90       	pop	r0
    16ee:	1f 90       	pop	r1
    16f0:	18 95       	reti

000016f2 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    16f2:	1f 92       	push	r1
    16f4:	0f 92       	push	r0
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	0f 92       	push	r0
    16fa:	11 24       	eor	r1, r1
    16fc:	08 b6       	in	r0, 0x38	; 56
    16fe:	0f 92       	push	r0
    1700:	18 be       	out	0x38, r1	; 56
    1702:	09 b6       	in	r0, 0x39	; 57
    1704:	0f 92       	push	r0
    1706:	19 be       	out	0x39, r1	; 57
    1708:	0b b6       	in	r0, 0x3b	; 59
    170a:	0f 92       	push	r0
    170c:	1b be       	out	0x3b, r1	; 59
    170e:	2f 93       	push	r18
    1710:	3f 93       	push	r19
    1712:	4f 93       	push	r20
    1714:	5f 93       	push	r21
    1716:	6f 93       	push	r22
    1718:	7f 93       	push	r23
    171a:	8f 93       	push	r24
    171c:	9f 93       	push	r25
    171e:	af 93       	push	r26
    1720:	bf 93       	push	r27
    1722:	ef 93       	push	r30
    1724:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1726:	e0 91 4a 20 	lds	r30, 0x204A	; 0x80204a <tc_tcf0_ccb_callback>
    172a:	f0 91 4b 20 	lds	r31, 0x204B	; 0x80204b <tc_tcf0_ccb_callback+0x1>
    172e:	30 97       	sbiw	r30, 0x00	; 0
    1730:	09 f0       	breq	.+2      	; 0x1734 <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    1732:	19 95       	eicall
	}
}
    1734:	ff 91       	pop	r31
    1736:	ef 91       	pop	r30
    1738:	bf 91       	pop	r27
    173a:	af 91       	pop	r26
    173c:	9f 91       	pop	r25
    173e:	8f 91       	pop	r24
    1740:	7f 91       	pop	r23
    1742:	6f 91       	pop	r22
    1744:	5f 91       	pop	r21
    1746:	4f 91       	pop	r20
    1748:	3f 91       	pop	r19
    174a:	2f 91       	pop	r18
    174c:	0f 90       	pop	r0
    174e:	0b be       	out	0x3b, r0	; 59
    1750:	0f 90       	pop	r0
    1752:	09 be       	out	0x39, r0	; 57
    1754:	0f 90       	pop	r0
    1756:	08 be       	out	0x38, r0	; 56
    1758:	0f 90       	pop	r0
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	0f 90       	pop	r0
    175e:	1f 90       	pop	r1
    1760:	18 95       	reti

00001762 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1762:	1f 92       	push	r1
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	0f 92       	push	r0
    176a:	11 24       	eor	r1, r1
    176c:	08 b6       	in	r0, 0x38	; 56
    176e:	0f 92       	push	r0
    1770:	18 be       	out	0x38, r1	; 56
    1772:	09 b6       	in	r0, 0x39	; 57
    1774:	0f 92       	push	r0
    1776:	19 be       	out	0x39, r1	; 57
    1778:	0b b6       	in	r0, 0x3b	; 59
    177a:	0f 92       	push	r0
    177c:	1b be       	out	0x3b, r1	; 59
    177e:	2f 93       	push	r18
    1780:	3f 93       	push	r19
    1782:	4f 93       	push	r20
    1784:	5f 93       	push	r21
    1786:	6f 93       	push	r22
    1788:	7f 93       	push	r23
    178a:	8f 93       	push	r24
    178c:	9f 93       	push	r25
    178e:	af 93       	push	r26
    1790:	bf 93       	push	r27
    1792:	ef 93       	push	r30
    1794:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1796:	e0 91 48 20 	lds	r30, 0x2048	; 0x802048 <tc_tcf0_ccc_callback>
    179a:	f0 91 49 20 	lds	r31, 0x2049	; 0x802049 <tc_tcf0_ccc_callback+0x1>
    179e:	30 97       	sbiw	r30, 0x00	; 0
    17a0:	09 f0       	breq	.+2      	; 0x17a4 <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    17a2:	19 95       	eicall
	}
}
    17a4:	ff 91       	pop	r31
    17a6:	ef 91       	pop	r30
    17a8:	bf 91       	pop	r27
    17aa:	af 91       	pop	r26
    17ac:	9f 91       	pop	r25
    17ae:	8f 91       	pop	r24
    17b0:	7f 91       	pop	r23
    17b2:	6f 91       	pop	r22
    17b4:	5f 91       	pop	r21
    17b6:	4f 91       	pop	r20
    17b8:	3f 91       	pop	r19
    17ba:	2f 91       	pop	r18
    17bc:	0f 90       	pop	r0
    17be:	0b be       	out	0x3b, r0	; 59
    17c0:	0f 90       	pop	r0
    17c2:	09 be       	out	0x39, r0	; 57
    17c4:	0f 90       	pop	r0
    17c6:	08 be       	out	0x38, r0	; 56
    17c8:	0f 90       	pop	r0
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	0f 90       	pop	r0
    17ce:	1f 90       	pop	r1
    17d0:	18 95       	reti

000017d2 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    17d2:	1f 92       	push	r1
    17d4:	0f 92       	push	r0
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	0f 92       	push	r0
    17da:	11 24       	eor	r1, r1
    17dc:	08 b6       	in	r0, 0x38	; 56
    17de:	0f 92       	push	r0
    17e0:	18 be       	out	0x38, r1	; 56
    17e2:	09 b6       	in	r0, 0x39	; 57
    17e4:	0f 92       	push	r0
    17e6:	19 be       	out	0x39, r1	; 57
    17e8:	0b b6       	in	r0, 0x3b	; 59
    17ea:	0f 92       	push	r0
    17ec:	1b be       	out	0x3b, r1	; 59
    17ee:	2f 93       	push	r18
    17f0:	3f 93       	push	r19
    17f2:	4f 93       	push	r20
    17f4:	5f 93       	push	r21
    17f6:	6f 93       	push	r22
    17f8:	7f 93       	push	r23
    17fa:	8f 93       	push	r24
    17fc:	9f 93       	push	r25
    17fe:	af 93       	push	r26
    1800:	bf 93       	push	r27
    1802:	ef 93       	push	r30
    1804:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1806:	e0 91 46 20 	lds	r30, 0x2046	; 0x802046 <tc_tcf0_ccd_callback>
    180a:	f0 91 47 20 	lds	r31, 0x2047	; 0x802047 <tc_tcf0_ccd_callback+0x1>
    180e:	30 97       	sbiw	r30, 0x00	; 0
    1810:	09 f0       	breq	.+2      	; 0x1814 <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    1812:	19 95       	eicall
	}
}
    1814:	ff 91       	pop	r31
    1816:	ef 91       	pop	r30
    1818:	bf 91       	pop	r27
    181a:	af 91       	pop	r26
    181c:	9f 91       	pop	r25
    181e:	8f 91       	pop	r24
    1820:	7f 91       	pop	r23
    1822:	6f 91       	pop	r22
    1824:	5f 91       	pop	r21
    1826:	4f 91       	pop	r20
    1828:	3f 91       	pop	r19
    182a:	2f 91       	pop	r18
    182c:	0f 90       	pop	r0
    182e:	0b be       	out	0x3b, r0	; 59
    1830:	0f 90       	pop	r0
    1832:	09 be       	out	0x39, r0	; 57
    1834:	0f 90       	pop	r0
    1836:	08 be       	out	0x38, r0	; 56
    1838:	0f 90       	pop	r0
    183a:	0f be       	out	0x3f, r0	; 63
    183c:	0f 90       	pop	r0
    183e:	1f 90       	pop	r1
    1840:	18 95       	reti

00001842 <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    1842:	1f 92       	push	r1
    1844:	0f 92       	push	r0
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	0f 92       	push	r0
    184a:	11 24       	eor	r1, r1
    184c:	08 b6       	in	r0, 0x38	; 56
    184e:	0f 92       	push	r0
    1850:	18 be       	out	0x38, r1	; 56
    1852:	09 b6       	in	r0, 0x39	; 57
    1854:	0f 92       	push	r0
    1856:	19 be       	out	0x39, r1	; 57
    1858:	0b b6       	in	r0, 0x3b	; 59
    185a:	0f 92       	push	r0
    185c:	1b be       	out	0x3b, r1	; 59
    185e:	2f 93       	push	r18
    1860:	3f 93       	push	r19
    1862:	4f 93       	push	r20
    1864:	5f 93       	push	r21
    1866:	6f 93       	push	r22
    1868:	7f 93       	push	r23
    186a:	8f 93       	push	r24
    186c:	9f 93       	push	r25
    186e:	af 93       	push	r26
    1870:	bf 93       	push	r27
    1872:	ef 93       	push	r30
    1874:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    1876:	e0 91 44 20 	lds	r30, 0x2044	; 0x802044 <tc_tcf1_ovf_callback>
    187a:	f0 91 45 20 	lds	r31, 0x2045	; 0x802045 <tc_tcf1_ovf_callback+0x1>
    187e:	30 97       	sbiw	r30, 0x00	; 0
    1880:	09 f0       	breq	.+2      	; 0x1884 <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    1882:	19 95       	eicall
	}
}
    1884:	ff 91       	pop	r31
    1886:	ef 91       	pop	r30
    1888:	bf 91       	pop	r27
    188a:	af 91       	pop	r26
    188c:	9f 91       	pop	r25
    188e:	8f 91       	pop	r24
    1890:	7f 91       	pop	r23
    1892:	6f 91       	pop	r22
    1894:	5f 91       	pop	r21
    1896:	4f 91       	pop	r20
    1898:	3f 91       	pop	r19
    189a:	2f 91       	pop	r18
    189c:	0f 90       	pop	r0
    189e:	0b be       	out	0x3b, r0	; 59
    18a0:	0f 90       	pop	r0
    18a2:	09 be       	out	0x39, r0	; 57
    18a4:	0f 90       	pop	r0
    18a6:	08 be       	out	0x38, r0	; 56
    18a8:	0f 90       	pop	r0
    18aa:	0f be       	out	0x3f, r0	; 63
    18ac:	0f 90       	pop	r0
    18ae:	1f 90       	pop	r1
    18b0:	18 95       	reti

000018b2 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    18b2:	1f 92       	push	r1
    18b4:	0f 92       	push	r0
    18b6:	0f b6       	in	r0, 0x3f	; 63
    18b8:	0f 92       	push	r0
    18ba:	11 24       	eor	r1, r1
    18bc:	08 b6       	in	r0, 0x38	; 56
    18be:	0f 92       	push	r0
    18c0:	18 be       	out	0x38, r1	; 56
    18c2:	09 b6       	in	r0, 0x39	; 57
    18c4:	0f 92       	push	r0
    18c6:	19 be       	out	0x39, r1	; 57
    18c8:	0b b6       	in	r0, 0x3b	; 59
    18ca:	0f 92       	push	r0
    18cc:	1b be       	out	0x3b, r1	; 59
    18ce:	2f 93       	push	r18
    18d0:	3f 93       	push	r19
    18d2:	4f 93       	push	r20
    18d4:	5f 93       	push	r21
    18d6:	6f 93       	push	r22
    18d8:	7f 93       	push	r23
    18da:	8f 93       	push	r24
    18dc:	9f 93       	push	r25
    18de:	af 93       	push	r26
    18e0:	bf 93       	push	r27
    18e2:	ef 93       	push	r30
    18e4:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    18e6:	e0 91 42 20 	lds	r30, 0x2042	; 0x802042 <tc_tcf1_err_callback>
    18ea:	f0 91 43 20 	lds	r31, 0x2043	; 0x802043 <tc_tcf1_err_callback+0x1>
    18ee:	30 97       	sbiw	r30, 0x00	; 0
    18f0:	09 f0       	breq	.+2      	; 0x18f4 <__vector_115+0x42>
		tc_tcf1_err_callback();
    18f2:	19 95       	eicall
	}
}
    18f4:	ff 91       	pop	r31
    18f6:	ef 91       	pop	r30
    18f8:	bf 91       	pop	r27
    18fa:	af 91       	pop	r26
    18fc:	9f 91       	pop	r25
    18fe:	8f 91       	pop	r24
    1900:	7f 91       	pop	r23
    1902:	6f 91       	pop	r22
    1904:	5f 91       	pop	r21
    1906:	4f 91       	pop	r20
    1908:	3f 91       	pop	r19
    190a:	2f 91       	pop	r18
    190c:	0f 90       	pop	r0
    190e:	0b be       	out	0x3b, r0	; 59
    1910:	0f 90       	pop	r0
    1912:	09 be       	out	0x39, r0	; 57
    1914:	0f 90       	pop	r0
    1916:	08 be       	out	0x38, r0	; 56
    1918:	0f 90       	pop	r0
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	0f 90       	pop	r0
    191e:	1f 90       	pop	r1
    1920:	18 95       	reti

00001922 <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1922:	1f 92       	push	r1
    1924:	0f 92       	push	r0
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	0f 92       	push	r0
    192a:	11 24       	eor	r1, r1
    192c:	08 b6       	in	r0, 0x38	; 56
    192e:	0f 92       	push	r0
    1930:	18 be       	out	0x38, r1	; 56
    1932:	09 b6       	in	r0, 0x39	; 57
    1934:	0f 92       	push	r0
    1936:	19 be       	out	0x39, r1	; 57
    1938:	0b b6       	in	r0, 0x3b	; 59
    193a:	0f 92       	push	r0
    193c:	1b be       	out	0x3b, r1	; 59
    193e:	2f 93       	push	r18
    1940:	3f 93       	push	r19
    1942:	4f 93       	push	r20
    1944:	5f 93       	push	r21
    1946:	6f 93       	push	r22
    1948:	7f 93       	push	r23
    194a:	8f 93       	push	r24
    194c:	9f 93       	push	r25
    194e:	af 93       	push	r26
    1950:	bf 93       	push	r27
    1952:	ef 93       	push	r30
    1954:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1956:	e0 91 40 20 	lds	r30, 0x2040	; 0x802040 <tc_tcf1_cca_callback>
    195a:	f0 91 41 20 	lds	r31, 0x2041	; 0x802041 <tc_tcf1_cca_callback+0x1>
    195e:	30 97       	sbiw	r30, 0x00	; 0
    1960:	09 f0       	breq	.+2      	; 0x1964 <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1962:	19 95       	eicall
	}
}
    1964:	ff 91       	pop	r31
    1966:	ef 91       	pop	r30
    1968:	bf 91       	pop	r27
    196a:	af 91       	pop	r26
    196c:	9f 91       	pop	r25
    196e:	8f 91       	pop	r24
    1970:	7f 91       	pop	r23
    1972:	6f 91       	pop	r22
    1974:	5f 91       	pop	r21
    1976:	4f 91       	pop	r20
    1978:	3f 91       	pop	r19
    197a:	2f 91       	pop	r18
    197c:	0f 90       	pop	r0
    197e:	0b be       	out	0x3b, r0	; 59
    1980:	0f 90       	pop	r0
    1982:	09 be       	out	0x39, r0	; 57
    1984:	0f 90       	pop	r0
    1986:	08 be       	out	0x38, r0	; 56
    1988:	0f 90       	pop	r0
    198a:	0f be       	out	0x3f, r0	; 63
    198c:	0f 90       	pop	r0
    198e:	1f 90       	pop	r1
    1990:	18 95       	reti

00001992 <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1992:	1f 92       	push	r1
    1994:	0f 92       	push	r0
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	0f 92       	push	r0
    199a:	11 24       	eor	r1, r1
    199c:	08 b6       	in	r0, 0x38	; 56
    199e:	0f 92       	push	r0
    19a0:	18 be       	out	0x38, r1	; 56
    19a2:	09 b6       	in	r0, 0x39	; 57
    19a4:	0f 92       	push	r0
    19a6:	19 be       	out	0x39, r1	; 57
    19a8:	0b b6       	in	r0, 0x3b	; 59
    19aa:	0f 92       	push	r0
    19ac:	1b be       	out	0x3b, r1	; 59
    19ae:	2f 93       	push	r18
    19b0:	3f 93       	push	r19
    19b2:	4f 93       	push	r20
    19b4:	5f 93       	push	r21
    19b6:	6f 93       	push	r22
    19b8:	7f 93       	push	r23
    19ba:	8f 93       	push	r24
    19bc:	9f 93       	push	r25
    19be:	af 93       	push	r26
    19c0:	bf 93       	push	r27
    19c2:	ef 93       	push	r30
    19c4:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    19c6:	e0 91 3e 20 	lds	r30, 0x203E	; 0x80203e <__data_end>
    19ca:	f0 91 3f 20 	lds	r31, 0x203F	; 0x80203f <__data_end+0x1>
    19ce:	30 97       	sbiw	r30, 0x00	; 0
    19d0:	09 f0       	breq	.+2      	; 0x19d4 <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    19d2:	19 95       	eicall
	}
}
    19d4:	ff 91       	pop	r31
    19d6:	ef 91       	pop	r30
    19d8:	bf 91       	pop	r27
    19da:	af 91       	pop	r26
    19dc:	9f 91       	pop	r25
    19de:	8f 91       	pop	r24
    19e0:	7f 91       	pop	r23
    19e2:	6f 91       	pop	r22
    19e4:	5f 91       	pop	r21
    19e6:	4f 91       	pop	r20
    19e8:	3f 91       	pop	r19
    19ea:	2f 91       	pop	r18
    19ec:	0f 90       	pop	r0
    19ee:	0b be       	out	0x3b, r0	; 59
    19f0:	0f 90       	pop	r0
    19f2:	09 be       	out	0x39, r0	; 57
    19f4:	0f 90       	pop	r0
    19f6:	08 be       	out	0x38, r0	; 56
    19f8:	0f 90       	pop	r0
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	0f 90       	pop	r0
    19fe:	1f 90       	pop	r1
    1a00:	18 95       	reti

00001a02 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1a02:	fc 01       	movw	r30, r24
    1a04:	91 81       	ldd	r25, Z+1	; 0x01
    1a06:	95 ff       	sbrs	r25, 5
    1a08:	fd cf       	rjmp	.-6      	; 0x1a04 <usart_putchar+0x2>
    1a0a:	60 83       	st	Z, r22
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	08 95       	ret

00001a12 <usart_getchar>:
    1a12:	fc 01       	movw	r30, r24
    1a14:	91 81       	ldd	r25, Z+1	; 0x01
    1a16:	99 23       	and	r25, r25
    1a18:	ec f7       	brge	.-6      	; 0x1a14 <usart_getchar+0x2>
    1a1a:	80 81       	ld	r24, Z
    1a1c:	08 95       	ret

00001a1e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1a1e:	4f 92       	push	r4
    1a20:	5f 92       	push	r5
    1a22:	6f 92       	push	r6
    1a24:	7f 92       	push	r7
    1a26:	8f 92       	push	r8
    1a28:	9f 92       	push	r9
    1a2a:	af 92       	push	r10
    1a2c:	bf 92       	push	r11
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	cf 93       	push	r28
    1a38:	7c 01       	movw	r14, r24
    1a3a:	4a 01       	movw	r8, r20
    1a3c:	5b 01       	movw	r10, r22
    1a3e:	28 01       	movw	r4, r16
    1a40:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1a42:	fc 01       	movw	r30, r24
    1a44:	84 81       	ldd	r24, Z+4	; 0x04
    1a46:	82 ff       	sbrs	r24, 2
    1a48:	16 c0       	rjmp	.+44     	; 0x1a76 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1a4a:	d9 01       	movw	r26, r18
    1a4c:	c8 01       	movw	r24, r16
    1a4e:	68 94       	set
    1a50:	12 f8       	bld	r1, 2
    1a52:	b6 95       	lsr	r27
    1a54:	a7 95       	ror	r26
    1a56:	97 95       	ror	r25
    1a58:	87 95       	ror	r24
    1a5a:	16 94       	lsr	r1
    1a5c:	d1 f7       	brne	.-12     	; 0x1a52 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1a5e:	b9 01       	movw	r22, r18
    1a60:	a8 01       	movw	r20, r16
    1a62:	03 2e       	mov	r0, r19
    1a64:	36 e1       	ldi	r19, 0x16	; 22
    1a66:	76 95       	lsr	r23
    1a68:	67 95       	ror	r22
    1a6a:	57 95       	ror	r21
    1a6c:	47 95       	ror	r20
    1a6e:	3a 95       	dec	r19
    1a70:	d1 f7       	brne	.-12     	; 0x1a66 <usart_set_baudrate+0x48>
    1a72:	30 2d       	mov	r19, r0
    1a74:	15 c0       	rjmp	.+42     	; 0x1aa0 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1a76:	d9 01       	movw	r26, r18
    1a78:	c8 01       	movw	r24, r16
    1a7a:	68 94       	set
    1a7c:	13 f8       	bld	r1, 3
    1a7e:	b6 95       	lsr	r27
    1a80:	a7 95       	ror	r26
    1a82:	97 95       	ror	r25
    1a84:	87 95       	ror	r24
    1a86:	16 94       	lsr	r1
    1a88:	d1 f7       	brne	.-12     	; 0x1a7e <usart_set_baudrate+0x60>
		min_rate /= 2;
    1a8a:	b9 01       	movw	r22, r18
    1a8c:	a8 01       	movw	r20, r16
    1a8e:	03 2e       	mov	r0, r19
    1a90:	37 e1       	ldi	r19, 0x17	; 23
    1a92:	76 95       	lsr	r23
    1a94:	67 95       	ror	r22
    1a96:	57 95       	ror	r21
    1a98:	47 95       	ror	r20
    1a9a:	3a 95       	dec	r19
    1a9c:	d1 f7       	brne	.-12     	; 0x1a92 <usart_set_baudrate+0x74>
    1a9e:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1aa0:	88 15       	cp	r24, r8
    1aa2:	99 05       	cpc	r25, r9
    1aa4:	aa 05       	cpc	r26, r10
    1aa6:	bb 05       	cpc	r27, r11
    1aa8:	08 f4       	brcc	.+2      	; 0x1aac <usart_set_baudrate+0x8e>
    1aaa:	a6 c0       	rjmp	.+332    	; 0x1bf8 <usart_set_baudrate+0x1da>
    1aac:	84 16       	cp	r8, r20
    1aae:	95 06       	cpc	r9, r21
    1ab0:	a6 06       	cpc	r10, r22
    1ab2:	b7 06       	cpc	r11, r23
    1ab4:	08 f4       	brcc	.+2      	; 0x1ab8 <usart_set_baudrate+0x9a>
    1ab6:	a2 c0       	rjmp	.+324    	; 0x1bfc <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1ab8:	f7 01       	movw	r30, r14
    1aba:	84 81       	ldd	r24, Z+4	; 0x04
    1abc:	82 fd       	sbrc	r24, 2
    1abe:	04 c0       	rjmp	.+8      	; 0x1ac8 <usart_set_baudrate+0xaa>
		baud *= 2;
    1ac0:	88 0c       	add	r8, r8
    1ac2:	99 1c       	adc	r9, r9
    1ac4:	aa 1c       	adc	r10, r10
    1ac6:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1ac8:	c3 01       	movw	r24, r6
    1aca:	b2 01       	movw	r22, r4
    1acc:	a5 01       	movw	r20, r10
    1ace:	94 01       	movw	r18, r8
    1ad0:	0e 94 2f 1b 	call	0x365e	; 0x365e <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1ad4:	2f 3f       	cpi	r18, 0xFF	; 255
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	41 05       	cpc	r20, r1
    1ada:	51 05       	cpc	r21, r1
    1adc:	08 f4       	brcc	.+2      	; 0x1ae0 <usart_set_baudrate+0xc2>
    1ade:	90 c0       	rjmp	.+288    	; 0x1c00 <usart_set_baudrate+0x1e2>
    1ae0:	8f ef       	ldi	r24, 0xFF	; 255
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	a0 e0       	ldi	r26, 0x00	; 0
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	c9 ef       	ldi	r28, 0xF9	; 249
    1aea:	05 c0       	rjmp	.+10     	; 0x1af6 <usart_set_baudrate+0xd8>
    1aec:	28 17       	cp	r18, r24
    1aee:	39 07       	cpc	r19, r25
    1af0:	4a 07       	cpc	r20, r26
    1af2:	5b 07       	cpc	r21, r27
    1af4:	58 f0       	brcs	.+22     	; 0x1b0c <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	aa 1f       	adc	r26, r26
    1afc:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1afe:	cd 3f       	cpi	r28, 0xFD	; 253
    1b00:	0c f4       	brge	.+2      	; 0x1b04 <usart_set_baudrate+0xe6>
			limit |= 1;
    1b02:	81 60       	ori	r24, 0x01	; 1
    1b04:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1b06:	c7 30       	cpi	r28, 0x07	; 7
    1b08:	89 f7       	brne	.-30     	; 0x1aec <usart_set_baudrate+0xce>
    1b0a:	4f c0       	rjmp	.+158    	; 0x1baa <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1b0c:	cc 23       	and	r28, r28
    1b0e:	0c f0       	brlt	.+2      	; 0x1b12 <usart_set_baudrate+0xf4>
    1b10:	4c c0       	rjmp	.+152    	; 0x1baa <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1b12:	d5 01       	movw	r26, r10
    1b14:	c4 01       	movw	r24, r8
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	aa 1f       	adc	r26, r26
    1b1c:	bb 1f       	adc	r27, r27
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	aa 1f       	adc	r26, r26
    1b24:	bb 1f       	adc	r27, r27
    1b26:	88 0f       	add	r24, r24
    1b28:	99 1f       	adc	r25, r25
    1b2a:	aa 1f       	adc	r26, r26
    1b2c:	bb 1f       	adc	r27, r27
    1b2e:	48 1a       	sub	r4, r24
    1b30:	59 0a       	sbc	r5, r25
    1b32:	6a 0a       	sbc	r6, r26
    1b34:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1b36:	ce 3f       	cpi	r28, 0xFE	; 254
    1b38:	f4 f4       	brge	.+60     	; 0x1b76 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1b3a:	8d ef       	ldi	r24, 0xFD	; 253
    1b3c:	9f ef       	ldi	r25, 0xFF	; 255
    1b3e:	8c 1b       	sub	r24, r28
    1b40:	91 09       	sbc	r25, r1
    1b42:	c7 fd       	sbrc	r28, 7
    1b44:	93 95       	inc	r25
    1b46:	04 c0       	rjmp	.+8      	; 0x1b50 <usart_set_baudrate+0x132>
    1b48:	44 0c       	add	r4, r4
    1b4a:	55 1c       	adc	r5, r5
    1b4c:	66 1c       	adc	r6, r6
    1b4e:	77 1c       	adc	r7, r7
    1b50:	8a 95       	dec	r24
    1b52:	d2 f7       	brpl	.-12     	; 0x1b48 <usart_set_baudrate+0x12a>
    1b54:	d5 01       	movw	r26, r10
    1b56:	c4 01       	movw	r24, r8
    1b58:	b6 95       	lsr	r27
    1b5a:	a7 95       	ror	r26
    1b5c:	97 95       	ror	r25
    1b5e:	87 95       	ror	r24
    1b60:	bc 01       	movw	r22, r24
    1b62:	cd 01       	movw	r24, r26
    1b64:	64 0d       	add	r22, r4
    1b66:	75 1d       	adc	r23, r5
    1b68:	86 1d       	adc	r24, r6
    1b6a:	97 1d       	adc	r25, r7
    1b6c:	a5 01       	movw	r20, r10
    1b6e:	94 01       	movw	r18, r8
    1b70:	0e 94 2f 1b 	call	0x365e	; 0x365e <__udivmodsi4>
    1b74:	37 c0       	rjmp	.+110    	; 0x1be4 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    1b76:	83 e0       	ldi	r24, 0x03	; 3
    1b78:	8c 0f       	add	r24, r28
    1b7a:	a5 01       	movw	r20, r10
    1b7c:	94 01       	movw	r18, r8
    1b7e:	04 c0       	rjmp	.+8      	; 0x1b88 <usart_set_baudrate+0x16a>
    1b80:	22 0f       	add	r18, r18
    1b82:	33 1f       	adc	r19, r19
    1b84:	44 1f       	adc	r20, r20
    1b86:	55 1f       	adc	r21, r21
    1b88:	8a 95       	dec	r24
    1b8a:	d2 f7       	brpl	.-12     	; 0x1b80 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    1b8c:	da 01       	movw	r26, r20
    1b8e:	c9 01       	movw	r24, r18
    1b90:	b6 95       	lsr	r27
    1b92:	a7 95       	ror	r26
    1b94:	97 95       	ror	r25
    1b96:	87 95       	ror	r24
    1b98:	bc 01       	movw	r22, r24
    1b9a:	cd 01       	movw	r24, r26
    1b9c:	64 0d       	add	r22, r4
    1b9e:	75 1d       	adc	r23, r5
    1ba0:	86 1d       	adc	r24, r6
    1ba2:	97 1d       	adc	r25, r7
    1ba4:	0e 94 2f 1b 	call	0x365e	; 0x365e <__udivmodsi4>
    1ba8:	1d c0       	rjmp	.+58     	; 0x1be4 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1baa:	83 e0       	ldi	r24, 0x03	; 3
    1bac:	8c 0f       	add	r24, r28
    1bae:	a5 01       	movw	r20, r10
    1bb0:	94 01       	movw	r18, r8
    1bb2:	04 c0       	rjmp	.+8      	; 0x1bbc <usart_set_baudrate+0x19e>
    1bb4:	22 0f       	add	r18, r18
    1bb6:	33 1f       	adc	r19, r19
    1bb8:	44 1f       	adc	r20, r20
    1bba:	55 1f       	adc	r21, r21
    1bbc:	8a 95       	dec	r24
    1bbe:	d2 f7       	brpl	.-12     	; 0x1bb4 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    1bc0:	da 01       	movw	r26, r20
    1bc2:	c9 01       	movw	r24, r18
    1bc4:	b6 95       	lsr	r27
    1bc6:	a7 95       	ror	r26
    1bc8:	97 95       	ror	r25
    1bca:	87 95       	ror	r24
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	64 0d       	add	r22, r4
    1bd2:	75 1d       	adc	r23, r5
    1bd4:	86 1d       	adc	r24, r6
    1bd6:	97 1d       	adc	r25, r7
    1bd8:	0e 94 2f 1b 	call	0x365e	; 0x365e <__udivmodsi4>
    1bdc:	21 50       	subi	r18, 0x01	; 1
    1bde:	31 09       	sbc	r19, r1
    1be0:	41 09       	sbc	r20, r1
    1be2:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1be4:	83 2f       	mov	r24, r19
    1be6:	8f 70       	andi	r24, 0x0F	; 15
    1be8:	c2 95       	swap	r28
    1bea:	c0 7f       	andi	r28, 0xF0	; 240
    1bec:	c8 2b       	or	r28, r24
    1bee:	f7 01       	movw	r30, r14
    1bf0:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1bf2:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	18 c0       	rjmp	.+48     	; 0x1c28 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
    1bfa:	16 c0       	rjmp	.+44     	; 0x1c28 <usart_set_baudrate+0x20a>
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	14 c0       	rjmp	.+40     	; 0x1c28 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1c00:	d5 01       	movw	r26, r10
    1c02:	c4 01       	movw	r24, r8
    1c04:	88 0f       	add	r24, r24
    1c06:	99 1f       	adc	r25, r25
    1c08:	aa 1f       	adc	r26, r26
    1c0a:	bb 1f       	adc	r27, r27
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	aa 1f       	adc	r26, r26
    1c12:	bb 1f       	adc	r27, r27
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	aa 1f       	adc	r26, r26
    1c1a:	bb 1f       	adc	r27, r27
    1c1c:	48 1a       	sub	r4, r24
    1c1e:	59 0a       	sbc	r5, r25
    1c20:	6a 0a       	sbc	r6, r26
    1c22:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1c24:	c9 ef       	ldi	r28, 0xF9	; 249
    1c26:	89 cf       	rjmp	.-238    	; 0x1b3a <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1c28:	cf 91       	pop	r28
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	bf 90       	pop	r11
    1c34:	af 90       	pop	r10
    1c36:	9f 90       	pop	r9
    1c38:	8f 90       	pop	r8
    1c3a:	7f 90       	pop	r7
    1c3c:	6f 90       	pop	r6
    1c3e:	5f 90       	pop	r5
    1c40:	4f 90       	pop	r4
    1c42:	08 95       	ret

00001c44 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1c44:	0f 93       	push	r16
    1c46:	1f 93       	push	r17
    1c48:	cf 93       	push	r28
    1c4a:	df 93       	push	r29
    1c4c:	ec 01       	movw	r28, r24
    1c4e:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <usart_init_rs232+0x12>
    1c54:	5d c1       	rjmp	.+698    	; 0x1f10 <usart_init_rs232+0x2cc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1c56:	80 3c       	cpi	r24, 0xC0	; 192
    1c58:	91 05       	cpc	r25, r1
    1c5a:	29 f4       	brne	.+10     	; 0x1c66 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1c5c:	60 e1       	ldi	r22, 0x10	; 16
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1c64:	55 c1       	rjmp	.+682    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1c66:	c0 34       	cpi	r28, 0x40	; 64
    1c68:	84 e0       	ldi	r24, 0x04	; 4
    1c6a:	d8 07       	cpc	r29, r24
    1c6c:	29 f4       	brne	.+10     	; 0x1c78 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1c6e:	68 e0       	ldi	r22, 0x08	; 8
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1c76:	4c c1       	rjmp	.+664    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1c78:	c1 15       	cp	r28, r1
    1c7a:	e4 e0       	ldi	r30, 0x04	; 4
    1c7c:	de 07       	cpc	r29, r30
    1c7e:	29 f4       	brne	.+10     	; 0x1c8a <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1c80:	64 e0       	ldi	r22, 0x04	; 4
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1c88:	43 c1       	rjmp	.+646    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1c8a:	c0 38       	cpi	r28, 0x80	; 128
    1c8c:	f1 e0       	ldi	r31, 0x01	; 1
    1c8e:	df 07       	cpc	r29, r31
    1c90:	29 f4       	brne	.+10     	; 0x1c9c <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1c92:	62 e0       	ldi	r22, 0x02	; 2
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1c9a:	3a c1       	rjmp	.+628    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1c9c:	c1 15       	cp	r28, r1
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	d8 07       	cpc	r29, r24
    1ca2:	29 f4       	brne	.+10     	; 0x1cae <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1ca4:	61 e0       	ldi	r22, 0x01	; 1
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1cac:	31 c1       	rjmp	.+610    	; 0x1f10 <usart_init_rs232+0x2cc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1cae:	c0 38       	cpi	r28, 0x80	; 128
    1cb0:	e3 e0       	ldi	r30, 0x03	; 3
    1cb2:	de 07       	cpc	r29, r30
    1cb4:	29 f4       	brne	.+10     	; 0x1cc0 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1cbe:	28 c1       	rjmp	.+592    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1cc0:	c0 39       	cpi	r28, 0x90	; 144
    1cc2:	f3 e0       	ldi	r31, 0x03	; 3
    1cc4:	df 07       	cpc	r29, r31
    1cc6:	29 f4       	brne	.+10     	; 0x1cd2 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1cc8:	61 e0       	ldi	r22, 0x01	; 1
    1cca:	82 e0       	ldi	r24, 0x02	; 2
    1ccc:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1cd0:	1f c1       	rjmp	.+574    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1cd2:	c1 15       	cp	r28, r1
    1cd4:	82 e0       	ldi	r24, 0x02	; 2
    1cd6:	d8 07       	cpc	r29, r24
    1cd8:	29 f4       	brne	.+10     	; 0x1ce4 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1cda:	62 e0       	ldi	r22, 0x02	; 2
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1ce2:	16 c1       	rjmp	.+556    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1ce4:	c0 34       	cpi	r28, 0x40	; 64
    1ce6:	e2 e0       	ldi	r30, 0x02	; 2
    1ce8:	de 07       	cpc	r29, r30
    1cea:	29 f4       	brne	.+10     	; 0x1cf6 <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1cec:	62 e0       	ldi	r22, 0x02	; 2
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1cf4:	0d c1       	rjmp	.+538    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1cf6:	c1 15       	cp	r28, r1
    1cf8:	f3 e0       	ldi	r31, 0x03	; 3
    1cfa:	df 07       	cpc	r29, r31
    1cfc:	29 f4       	brne	.+10     	; 0x1d08 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1cfe:	64 e0       	ldi	r22, 0x04	; 4
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d06:	04 c1       	rjmp	.+520    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1d08:	c0 32       	cpi	r28, 0x20	; 32
    1d0a:	83 e0       	ldi	r24, 0x03	; 3
    1d0c:	d8 07       	cpc	r29, r24
    1d0e:	29 f4       	brne	.+10     	; 0x1d1a <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1d10:	64 e0       	ldi	r22, 0x04	; 4
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d18:	fb c0       	rjmp	.+502    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1d1a:	c1 15       	cp	r28, r1
    1d1c:	e8 e0       	ldi	r30, 0x08	; 8
    1d1e:	de 07       	cpc	r29, r30
    1d20:	29 f4       	brne	.+10     	; 0x1d2c <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1d22:	61 e0       	ldi	r22, 0x01	; 1
    1d24:	83 e0       	ldi	r24, 0x03	; 3
    1d26:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d2a:	f2 c0       	rjmp	.+484    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1d2c:	c1 15       	cp	r28, r1
    1d2e:	f9 e0       	ldi	r31, 0x09	; 9
    1d30:	df 07       	cpc	r29, r31
    1d32:	29 f4       	brne	.+10     	; 0x1d3e <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1d34:	61 e0       	ldi	r22, 0x01	; 1
    1d36:	84 e0       	ldi	r24, 0x04	; 4
    1d38:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d3c:	e9 c0       	rjmp	.+466    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1d3e:	c1 15       	cp	r28, r1
    1d40:	8a e0       	ldi	r24, 0x0A	; 10
    1d42:	d8 07       	cpc	r29, r24
    1d44:	29 f4       	brne	.+10     	; 0x1d50 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1d46:	61 e0       	ldi	r22, 0x01	; 1
    1d48:	85 e0       	ldi	r24, 0x05	; 5
    1d4a:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d4e:	e0 c0       	rjmp	.+448    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1d50:	c1 15       	cp	r28, r1
    1d52:	eb e0       	ldi	r30, 0x0B	; 11
    1d54:	de 07       	cpc	r29, r30
    1d56:	29 f4       	brne	.+10     	; 0x1d62 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1d58:	61 e0       	ldi	r22, 0x01	; 1
    1d5a:	86 e0       	ldi	r24, 0x06	; 6
    1d5c:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d60:	d7 c0       	rjmp	.+430    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1d62:	c0 34       	cpi	r28, 0x40	; 64
    1d64:	f8 e0       	ldi	r31, 0x08	; 8
    1d66:	df 07       	cpc	r29, r31
    1d68:	29 f4       	brne	.+10     	; 0x1d74 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1d6a:	62 e0       	ldi	r22, 0x02	; 2
    1d6c:	83 e0       	ldi	r24, 0x03	; 3
    1d6e:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d72:	ce c0       	rjmp	.+412    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1d74:	c0 34       	cpi	r28, 0x40	; 64
    1d76:	89 e0       	ldi	r24, 0x09	; 9
    1d78:	d8 07       	cpc	r29, r24
    1d7a:	29 f4       	brne	.+10     	; 0x1d86 <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1d7c:	62 e0       	ldi	r22, 0x02	; 2
    1d7e:	84 e0       	ldi	r24, 0x04	; 4
    1d80:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d84:	c5 c0       	rjmp	.+394    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1d86:	c0 34       	cpi	r28, 0x40	; 64
    1d88:	ea e0       	ldi	r30, 0x0A	; 10
    1d8a:	de 07       	cpc	r29, r30
    1d8c:	29 f4       	brne	.+10     	; 0x1d98 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1d8e:	62 e0       	ldi	r22, 0x02	; 2
    1d90:	85 e0       	ldi	r24, 0x05	; 5
    1d92:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1d96:	bc c0       	rjmp	.+376    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1d98:	c0 34       	cpi	r28, 0x40	; 64
    1d9a:	fb e0       	ldi	r31, 0x0B	; 11
    1d9c:	df 07       	cpc	r29, r31
    1d9e:	29 f4       	brne	.+10     	; 0x1daa <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1da0:	62 e0       	ldi	r22, 0x02	; 2
    1da2:	86 e0       	ldi	r24, 0x06	; 6
    1da4:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1da8:	b3 c0       	rjmp	.+358    	; 0x1f10 <usart_init_rs232+0x2cc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1daa:	c0 39       	cpi	r28, 0x90	; 144
    1dac:	88 e0       	ldi	r24, 0x08	; 8
    1dae:	d8 07       	cpc	r29, r24
    1db0:	29 f4       	brne	.+10     	; 0x1dbc <usart_init_rs232+0x178>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1db2:	64 e0       	ldi	r22, 0x04	; 4
    1db4:	83 e0       	ldi	r24, 0x03	; 3
    1db6:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1dba:	aa c0       	rjmp	.+340    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1dbc:	c0 39       	cpi	r28, 0x90	; 144
    1dbe:	e9 e0       	ldi	r30, 0x09	; 9
    1dc0:	de 07       	cpc	r29, r30
    1dc2:	29 f4       	brne	.+10     	; 0x1dce <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1dc4:	64 e0       	ldi	r22, 0x04	; 4
    1dc6:	84 e0       	ldi	r24, 0x04	; 4
    1dc8:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1dcc:	a1 c0       	rjmp	.+322    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1dce:	c0 39       	cpi	r28, 0x90	; 144
    1dd0:	fa e0       	ldi	r31, 0x0A	; 10
    1dd2:	df 07       	cpc	r29, r31
    1dd4:	29 f4       	brne	.+10     	; 0x1de0 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1dd6:	64 e0       	ldi	r22, 0x04	; 4
    1dd8:	85 e0       	ldi	r24, 0x05	; 5
    1dda:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1dde:	98 c0       	rjmp	.+304    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1de0:	c0 39       	cpi	r28, 0x90	; 144
    1de2:	8b e0       	ldi	r24, 0x0B	; 11
    1de4:	d8 07       	cpc	r29, r24
    1de6:	29 f4       	brne	.+10     	; 0x1df2 <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1de8:	64 e0       	ldi	r22, 0x04	; 4
    1dea:	86 e0       	ldi	r24, 0x06	; 6
    1dec:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1df0:	8f c0       	rjmp	.+286    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1df2:	c0 3c       	cpi	r28, 0xC0	; 192
    1df4:	e8 e0       	ldi	r30, 0x08	; 8
    1df6:	de 07       	cpc	r29, r30
    1df8:	29 f4       	brne	.+10     	; 0x1e04 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1dfa:	68 e0       	ldi	r22, 0x08	; 8
    1dfc:	83 e0       	ldi	r24, 0x03	; 3
    1dfe:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e02:	86 c0       	rjmp	.+268    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1e04:	c0 3c       	cpi	r28, 0xC0	; 192
    1e06:	f9 e0       	ldi	r31, 0x09	; 9
    1e08:	df 07       	cpc	r29, r31
    1e0a:	29 f4       	brne	.+10     	; 0x1e16 <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1e0c:	68 e0       	ldi	r22, 0x08	; 8
    1e0e:	84 e0       	ldi	r24, 0x04	; 4
    1e10:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e14:	7d c0       	rjmp	.+250    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1e16:	c0 3c       	cpi	r28, 0xC0	; 192
    1e18:	8a e0       	ldi	r24, 0x0A	; 10
    1e1a:	d8 07       	cpc	r29, r24
    1e1c:	29 f4       	brne	.+10     	; 0x1e28 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1e1e:	68 e0       	ldi	r22, 0x08	; 8
    1e20:	85 e0       	ldi	r24, 0x05	; 5
    1e22:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e26:	74 c0       	rjmp	.+232    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1e28:	c0 3c       	cpi	r28, 0xC0	; 192
    1e2a:	eb e0       	ldi	r30, 0x0B	; 11
    1e2c:	de 07       	cpc	r29, r30
    1e2e:	29 f4       	brne	.+10     	; 0x1e3a <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1e30:	68 e0       	ldi	r22, 0x08	; 8
    1e32:	86 e0       	ldi	r24, 0x06	; 6
    1e34:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e38:	6b c0       	rjmp	.+214    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1e3a:	c0 3a       	cpi	r28, 0xA0	; 160
    1e3c:	f8 e0       	ldi	r31, 0x08	; 8
    1e3e:	df 07       	cpc	r29, r31
    1e40:	29 f4       	brne	.+10     	; 0x1e4c <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1e42:	60 e1       	ldi	r22, 0x10	; 16
    1e44:	83 e0       	ldi	r24, 0x03	; 3
    1e46:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e4a:	62 c0       	rjmp	.+196    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1e4c:	c0 3a       	cpi	r28, 0xA0	; 160
    1e4e:	89 e0       	ldi	r24, 0x09	; 9
    1e50:	d8 07       	cpc	r29, r24
    1e52:	29 f4       	brne	.+10     	; 0x1e5e <usart_init_rs232+0x21a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1e54:	60 e1       	ldi	r22, 0x10	; 16
    1e56:	84 e0       	ldi	r24, 0x04	; 4
    1e58:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e5c:	59 c0       	rjmp	.+178    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1e5e:	c0 3a       	cpi	r28, 0xA0	; 160
    1e60:	ea e0       	ldi	r30, 0x0A	; 10
    1e62:	de 07       	cpc	r29, r30
    1e64:	29 f4       	brne	.+10     	; 0x1e70 <usart_init_rs232+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1e66:	60 e1       	ldi	r22, 0x10	; 16
    1e68:	85 e0       	ldi	r24, 0x05	; 5
    1e6a:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e6e:	50 c0       	rjmp	.+160    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1e70:	c0 3a       	cpi	r28, 0xA0	; 160
    1e72:	fb e0       	ldi	r31, 0x0B	; 11
    1e74:	df 07       	cpc	r29, r31
    1e76:	29 f4       	brne	.+10     	; 0x1e82 <usart_init_rs232+0x23e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1e78:	60 e1       	ldi	r22, 0x10	; 16
    1e7a:	86 e0       	ldi	r24, 0x06	; 6
    1e7c:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e80:	47 c0       	rjmp	.+142    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1e82:	c0 3b       	cpi	r28, 0xB0	; 176
    1e84:	88 e0       	ldi	r24, 0x08	; 8
    1e86:	d8 07       	cpc	r29, r24
    1e88:	29 f4       	brne	.+10     	; 0x1e94 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1e8a:	60 e2       	ldi	r22, 0x20	; 32
    1e8c:	83 e0       	ldi	r24, 0x03	; 3
    1e8e:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1e92:	3e c0       	rjmp	.+124    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1e94:	c0 3b       	cpi	r28, 0xB0	; 176
    1e96:	e9 e0       	ldi	r30, 0x09	; 9
    1e98:	de 07       	cpc	r29, r30
    1e9a:	29 f4       	brne	.+10     	; 0x1ea6 <usart_init_rs232+0x262>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1e9c:	60 e2       	ldi	r22, 0x20	; 32
    1e9e:	84 e0       	ldi	r24, 0x04	; 4
    1ea0:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1ea4:	35 c0       	rjmp	.+106    	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1ea6:	c0 3b       	cpi	r28, 0xB0	; 176
    1ea8:	fa e0       	ldi	r31, 0x0A	; 10
    1eaa:	df 07       	cpc	r29, r31
    1eac:	29 f4       	brne	.+10     	; 0x1eb8 <usart_init_rs232+0x274>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1eae:	60 e2       	ldi	r22, 0x20	; 32
    1eb0:	85 e0       	ldi	r24, 0x05	; 5
    1eb2:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1eb6:	2c c0       	rjmp	.+88     	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1eb8:	c0 3b       	cpi	r28, 0xB0	; 176
    1eba:	8b e0       	ldi	r24, 0x0B	; 11
    1ebc:	d8 07       	cpc	r29, r24
    1ebe:	29 f4       	brne	.+10     	; 0x1eca <usart_init_rs232+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1ec0:	60 e2       	ldi	r22, 0x20	; 32
    1ec2:	86 e0       	ldi	r24, 0x06	; 6
    1ec4:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1ec8:	23 c0       	rjmp	.+70     	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1eca:	c0 38       	cpi	r28, 0x80	; 128
    1ecc:	e4 e0       	ldi	r30, 0x04	; 4
    1ece:	de 07       	cpc	r29, r30
    1ed0:	29 f4       	brne	.+10     	; 0x1edc <usart_init_rs232+0x298>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1ed2:	60 e4       	ldi	r22, 0x40	; 64
    1ed4:	83 e0       	ldi	r24, 0x03	; 3
    1ed6:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1eda:	1a c0       	rjmp	.+52     	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1edc:	c0 39       	cpi	r28, 0x90	; 144
    1ede:	f4 e0       	ldi	r31, 0x04	; 4
    1ee0:	df 07       	cpc	r29, r31
    1ee2:	29 f4       	brne	.+10     	; 0x1eee <usart_init_rs232+0x2aa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1ee4:	60 e4       	ldi	r22, 0x40	; 64
    1ee6:	84 e0       	ldi	r24, 0x04	; 4
    1ee8:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1eec:	11 c0       	rjmp	.+34     	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1eee:	c0 3a       	cpi	r28, 0xA0	; 160
    1ef0:	84 e0       	ldi	r24, 0x04	; 4
    1ef2:	d8 07       	cpc	r29, r24
    1ef4:	29 f4       	brne	.+10     	; 0x1f00 <usart_init_rs232+0x2bc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1ef6:	60 e4       	ldi	r22, 0x40	; 64
    1ef8:	85 e0       	ldi	r24, 0x05	; 5
    1efa:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    1efe:	08 c0       	rjmp	.+16     	; 0x1f10 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1f00:	c0 3b       	cpi	r28, 0xB0	; 176
    1f02:	e4 e0       	ldi	r30, 0x04	; 4
    1f04:	de 07       	cpc	r29, r30
    1f06:	21 f4       	brne	.+8      	; 0x1f10 <usart_init_rs232+0x2cc>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1f08:	60 e4       	ldi	r22, 0x40	; 64
    1f0a:	86 e0       	ldi	r24, 0x06	; 6
    1f0c:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	8f 73       	andi	r24, 0x3F	; 63
    1f14:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1f16:	f8 01       	movw	r30, r16
    1f18:	95 81       	ldd	r25, Z+5	; 0x05
    1f1a:	84 81       	ldd	r24, Z+4	; 0x04
    1f1c:	89 2b       	or	r24, r25
    1f1e:	96 81       	ldd	r25, Z+6	; 0x06
    1f20:	91 11       	cpse	r25, r1
    1f22:	98 e0       	ldi	r25, 0x08	; 8
    1f24:	89 2b       	or	r24, r25
    1f26:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1f28:	f8 01       	movw	r30, r16
    1f2a:	40 81       	ld	r20, Z
    1f2c:	51 81       	ldd	r21, Z+1	; 0x01
    1f2e:	62 81       	ldd	r22, Z+2	; 0x02
    1f30:	73 81       	ldd	r23, Z+3	; 0x03
    1f32:	00 e0       	ldi	r16, 0x00	; 0
    1f34:	18 e4       	ldi	r17, 0x48	; 72
    1f36:	28 ee       	ldi	r18, 0xE8	; 232
    1f38:	31 e0       	ldi	r19, 0x01	; 1
    1f3a:	ce 01       	movw	r24, r28
    1f3c:	70 dd       	rcall	.-1312   	; 0x1a1e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	98 60       	ori	r25, 0x08	; 8
    1f42:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1f44:	9c 81       	ldd	r25, Y+4	; 0x04
    1f46:	90 61       	ori	r25, 0x10	; 16
    1f48:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	1f 91       	pop	r17
    1f50:	0f 91       	pop	r16
    1f52:	08 95       	ret

00001f54 <Get_altitude>:
#include "pressure.h"
#include <math.h>

extern int32_t TEMP;

float Get_altitude(uint32_t initial, uint32_t pressure){
    1f54:	4f 92       	push	r4
    1f56:	5f 92       	push	r5
    1f58:	6f 92       	push	r6
    1f5a:	7f 92       	push	r7
    1f5c:	8f 92       	push	r8
    1f5e:	9f 92       	push	r9
    1f60:	af 92       	push	r10
    1f62:	bf 92       	push	r11
    1f64:	cf 92       	push	r12
    1f66:	df 92       	push	r13
    1f68:	ef 92       	push	r14
    1f6a:	ff 92       	push	r15
    1f6c:	4b 01       	movw	r8, r22
    1f6e:	5c 01       	movw	r10, r24
	//printf("pressure = %lu \n", pressure);
	//printf("temperature = %i \n", (uint16_t) TEMP/100);
	float altitude = (((287.058 * (((float)(TEMP/100)+273.15)/9.8))*log((float)initial/get_pressure())*3.28));
    1f70:	60 91 98 20 	lds	r22, 0x2098	; 0x802098 <TEMP>
    1f74:	70 91 99 20 	lds	r23, 0x2099	; 0x802099 <TEMP+0x1>
    1f78:	80 91 9a 20 	lds	r24, 0x209A	; 0x80209a <TEMP+0x2>
    1f7c:	90 91 9b 20 	lds	r25, 0x209B	; 0x80209b <TEMP+0x3>
    1f80:	24 e6       	ldi	r18, 0x64	; 100
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e0       	ldi	r20, 0x00	; 0
    1f86:	50 e0       	ldi	r21, 0x00	; 0
    1f88:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__divmodsi4>
    1f8c:	ca 01       	movw	r24, r20
    1f8e:	b9 01       	movw	r22, r18
    1f90:	7c d6       	rcall	.+3320   	; 0x2c8a <__floatsisf>
    1f92:	23 e3       	ldi	r18, 0x33	; 51
    1f94:	33 e9       	ldi	r19, 0x93	; 147
    1f96:	48 e8       	ldi	r20, 0x88	; 136
    1f98:	53 e4       	ldi	r21, 0x43	; 67
    1f9a:	78 d5       	rcall	.+2800   	; 0x2a8c <__addsf3>
    1f9c:	2d ec       	ldi	r18, 0xCD	; 205
    1f9e:	3c ec       	ldi	r19, 0xCC	; 204
    1fa0:	4c e1       	ldi	r20, 0x1C	; 28
    1fa2:	51 e4       	ldi	r21, 0x41	; 65
    1fa4:	d7 d5       	rcall	.+2990   	; 0x2b54 <__divsf3>
    1fa6:	2d e6       	ldi	r18, 0x6D	; 109
    1fa8:	37 e8       	ldi	r19, 0x87	; 135
    1faa:	4f e8       	ldi	r20, 0x8F	; 143
    1fac:	53 e4       	ldi	r21, 0x43	; 67
    1fae:	3e d7       	rcall	.+3708   	; 0x2e2c <__mulsf3>
    1fb0:	6b 01       	movw	r12, r22
    1fb2:	7c 01       	movw	r14, r24
    1fb4:	f9 d0       	rcall	.+498    	; 0x21a8 <get_pressure>
    1fb6:	2b 01       	movw	r4, r22
    1fb8:	3c 01       	movw	r6, r24
    1fba:	c5 01       	movw	r24, r10
    1fbc:	b4 01       	movw	r22, r8
    1fbe:	63 d6       	rcall	.+3270   	; 0x2c86 <__floatunsisf>
    1fc0:	4b 01       	movw	r8, r22
    1fc2:	5c 01       	movw	r10, r24
    1fc4:	c3 01       	movw	r24, r6
    1fc6:	b2 01       	movw	r22, r4
    1fc8:	5e d6       	rcall	.+3260   	; 0x2c86 <__floatunsisf>
    1fca:	9b 01       	movw	r18, r22
    1fcc:	ac 01       	movw	r20, r24
    1fce:	c5 01       	movw	r24, r10
    1fd0:	b4 01       	movw	r22, r8
    1fd2:	c0 d5       	rcall	.+2944   	; 0x2b54 <__divsf3>
    1fd4:	eb d6       	rcall	.+3542   	; 0x2dac <log>
    1fd6:	9b 01       	movw	r18, r22
    1fd8:	ac 01       	movw	r20, r24
    1fda:	c7 01       	movw	r24, r14
    1fdc:	b6 01       	movw	r22, r12
    1fde:	26 d7       	rcall	.+3660   	; 0x2e2c <__mulsf3>
    1fe0:	25 e8       	ldi	r18, 0x85	; 133
    1fe2:	3b ee       	ldi	r19, 0xEB	; 235
    1fe4:	41 e5       	ldi	r20, 0x51	; 81
    1fe6:	50 e4       	ldi	r21, 0x40	; 64
    1fe8:	21 d7       	rcall	.+3650   	; 0x2e2c <__mulsf3>
    1fea:	6b 01       	movw	r12, r22
	printf("altitude = %i \n", (int16_t)altitude);
    1fec:	7c 01       	movw	r14, r24
    1fee:	1a d6       	rcall	.+3124   	; 0x2c24 <__fixsfsi>
    1ff0:	7f 93       	push	r23
    1ff2:	6f 93       	push	r22
    1ff4:	8d e0       	ldi	r24, 0x0D	; 13
    1ff6:	90 e2       	ldi	r25, 0x20	; 32
    1ff8:	9f 93       	push	r25
    1ffa:	8f 93       	push	r24
    1ffc:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <printf>
	return altitude;
    2000:	0f 90       	pop	r0
    2002:	0f 90       	pop	r0
    2004:	0f 90       	pop	r0
    2006:	0f 90       	pop	r0
}
    2008:	c7 01       	movw	r24, r14
    200a:	b6 01       	movw	r22, r12
    200c:	ff 90       	pop	r15
    200e:	ef 90       	pop	r14
    2010:	df 90       	pop	r13
    2012:	cf 90       	pop	r12
    2014:	bf 90       	pop	r11
    2016:	af 90       	pop	r10
    2018:	9f 90       	pop	r9
    201a:	8f 90       	pop	r8
    201c:	7f 90       	pop	r7
    201e:	6f 90       	pop	r6
    2020:	5f 90       	pop	r5
    2022:	4f 90       	pop	r4
    2024:	08 95       	ret

00002026 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2026:	04 c0       	rjmp	.+8      	; 0x2030 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2028:	61 50       	subi	r22, 0x01	; 1
    202a:	71 09       	sbc	r23, r1
    202c:	81 09       	sbc	r24, r1
    202e:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2030:	61 15       	cp	r22, r1
    2032:	71 05       	cpc	r23, r1
    2034:	81 05       	cpc	r24, r1
    2036:	91 05       	cpc	r25, r1
    2038:	b9 f7       	brne	.-18     	; 0x2028 <__portable_avr_delay_cycles+0x2>
    203a:	08 95       	ret

0000203c <SPI_init>:
uint16_t c5;
uint16_t c6;


void SPI_init(void){
	PORTC.DIRSET = 0b10110000;
    203c:	e0 e4       	ldi	r30, 0x40	; 64
    203e:	f6 e0       	ldi	r31, 0x06	; 6
    2040:	80 eb       	ldi	r24, 0xB0	; 176
    2042:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = 0b01000000;
    2044:	90 e4       	ldi	r25, 0x40	; 64
    2046:	92 83       	std	Z+2, r25	; 0x02
	PORTC.OUTSET = 0b10110000;
    2048:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0b01010011;
    204a:	83 e5       	ldi	r24, 0x53	; 83
    204c:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    2050:	08 95       	ret

00002052 <SPI_write>:
}

void SPI_write(uint8_t data){
	SPIC.DATA = data;
    2052:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
    2056:	e0 ec       	ldi	r30, 0xC0	; 192
    2058:	f8 e0       	ldi	r31, 0x08	; 8
    205a:	82 81       	ldd	r24, Z+2	; 0x02
    205c:	88 23       	and	r24, r24
    205e:	ec f7       	brge	.-6      	; 0x205a <SPI_write+0x8>
}
    2060:	08 95       	ret

00002062 <spi_read>:

uint8_t spi_read (void){
	SPI_write(0xFF);
    2062:	8f ef       	ldi	r24, 0xFF	; 255
    2064:	f6 df       	rcall	.-20     	; 0x2052 <SPI_write>
	return SPIC.DATA;
    2066:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    206a:	08 95       	ret

0000206c <prom_read>:
	//printf("c5: %u \n", c5);
	c6 = prom_read(0xAC);
	//printf("c6: %u \n", c6);
}

uint16_t prom_read(uint8_t command){
    206c:	ff 92       	push	r15
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
	uint16_t data;
	PORTC.OUTCLR = 0b00010000;
    2076:	00 e4       	ldi	r16, 0x40	; 64
    2078:	16 e0       	ldi	r17, 0x06	; 6
    207a:	68 94       	set
    207c:	ff 24       	eor	r15, r15
    207e:	f4 f8       	bld	r15, 4
    2080:	f8 01       	movw	r30, r16
	SPI_write(command);
	data = ((uint16_t)spi_read())<<8;	//Bitshifting
    2082:	f6 82       	std	Z+6, r15	; 0x06
    2084:	e6 df       	rcall	.-52     	; 0x2052 <SPI_write>
    2086:	ed df       	rcall	.-38     	; 0x2062 <spi_read>
    2088:	c8 2f       	mov	r28, r24
    208a:	d0 e0       	ldi	r29, 0x00	; 0
	data += spi_read();
    208c:	dc 2f       	mov	r29, r28
    208e:	cc 27       	eor	r28, r28
    2090:	e8 df       	rcall	.-48     	; 0x2062 <spi_read>
    2092:	c8 0f       	add	r28, r24
	PORTC.OUTSET = 0b00010000;
    2094:	d1 1d       	adc	r29, r1
    2096:	f8 01       	movw	r30, r16
	delay_ms(1);
    2098:	f5 82       	std	Z+5, r15	; 0x05
    209a:	66 ed       	ldi	r22, 0xD6	; 214
    209c:	74 e1       	ldi	r23, 0x14	; 20
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	90 e0       	ldi	r25, 0x00	; 0
	//printf("data: %lu \n", data);
	return data;
}
    20a2:	c1 df       	rcall	.-126    	; 0x2026 <__portable_avr_delay_cycles>
    20a4:	ce 01       	movw	r24, r28
    20a6:	df 91       	pop	r29
    20a8:	cf 91       	pop	r28
    20aa:	1f 91       	pop	r17
    20ac:	0f 91       	pop	r16
    20ae:	ff 90       	pop	r15
    20b0:	08 95       	ret

000020b2 <ms5607_init>:
uint8_t spi_read (void){
	SPI_write(0xFF);
	return SPIC.DATA;
}

void ms5607_init(void){
    20b2:	1f 93       	push	r17
    20b4:	cf 93       	push	r28
    20b6:	df 93       	push	r29
	PORTC.OUTCLR = 0b00010000;
    20b8:	c0 e4       	ldi	r28, 0x40	; 64
    20ba:	d6 e0       	ldi	r29, 0x06	; 6
    20bc:	10 e1       	ldi	r17, 0x10	; 16
    20be:	1e 83       	std	Y+6, r17	; 0x06
	SPI_write(0x1E);
    20c0:	8e e1       	ldi	r24, 0x1E	; 30
    20c2:	c7 df       	rcall	.-114    	; 0x2052 <SPI_write>
	PORTC.OUTSET = 0b00010000;
    20c4:	1d 83       	std	Y+5, r17	; 0x05
	delay_ms(10);
    20c6:	66 e5       	ldi	r22, 0x56	; 86
    20c8:	70 ed       	ldi	r23, 0xD0	; 208
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
	c1 = prom_read(0xA2);
    20ce:	ab df       	rcall	.-170    	; 0x2026 <__portable_avr_delay_cycles>
    20d0:	82 ea       	ldi	r24, 0xA2	; 162
    20d2:	cc df       	rcall	.-104    	; 0x206c <prom_read>
    20d4:	80 93 a4 20 	sts	0x20A4, r24	; 0x8020a4 <c1>
    20d8:	90 93 a5 20 	sts	0x20A5, r25	; 0x8020a5 <c1+0x1>
	//printf("c1: %u \n", c1);
	c2 = prom_read(0xA4);
    20dc:	84 ea       	ldi	r24, 0xA4	; 164
    20de:	c6 df       	rcall	.-116    	; 0x206c <prom_read>
    20e0:	80 93 a0 20 	sts	0x20A0, r24	; 0x8020a0 <c2>
    20e4:	90 93 a1 20 	sts	0x20A1, r25	; 0x8020a1 <c2+0x1>
	//printf("c2: %u \n", c2);
	c3 = prom_read(0xA6);
    20e8:	86 ea       	ldi	r24, 0xA6	; 166
    20ea:	c0 df       	rcall	.-128    	; 0x206c <prom_read>
    20ec:	80 93 a6 20 	sts	0x20A6, r24	; 0x8020a6 <c3>
    20f0:	90 93 a7 20 	sts	0x20A7, r25	; 0x8020a7 <c3+0x1>
	//printf("c3: %u \n", c3);
	c4 = prom_read(0xA8);
    20f4:	88 ea       	ldi	r24, 0xA8	; 168
    20f6:	ba df       	rcall	.-140    	; 0x206c <prom_read>
    20f8:	80 93 9e 20 	sts	0x209E, r24	; 0x80209e <c4>
    20fc:	90 93 9f 20 	sts	0x209F, r25	; 0x80209f <c4+0x1>
	//printf("c4: %u \n", c4);
	c5 = prom_read(0xAA);
    2100:	8a ea       	ldi	r24, 0xAA	; 170
    2102:	b4 df       	rcall	.-152    	; 0x206c <prom_read>
    2104:	80 93 a2 20 	sts	0x20A2, r24	; 0x8020a2 <c5>
    2108:	90 93 a3 20 	sts	0x20A3, r25	; 0x8020a3 <c5+0x1>
	//printf("c5: %u \n", c5);
	c6 = prom_read(0xAC);
    210c:	8c ea       	ldi	r24, 0xAC	; 172
    210e:	ae df       	rcall	.-164    	; 0x206c <prom_read>
    2110:	80 93 9c 20 	sts	0x209C, r24	; 0x80209c <c6>
    2114:	90 93 9d 20 	sts	0x209D, r25	; 0x80209d <c6+0x1>
	//printf("c6: %u \n", c6);
}
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	1f 91       	pop	r17
    211e:	08 95       	ret

00002120 <data_read>:
	delay_ms(1);
	//printf("data: %lu \n", data);
	return data;
}

uint32_t data_read(uint8_t command){
    2120:	8f 92       	push	r8
    2122:	9f 92       	push	r9
    2124:	af 92       	push	r10
    2126:	bf 92       	push	r11
    2128:	cf 92       	push	r12
    212a:	df 92       	push	r13
    212c:	ef 92       	push	r14
    212e:	ff 92       	push	r15
    2130:	1f 93       	push	r17
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
	uint32_t data;
	PORTC.OUTCLR = 0b00010000;
    2136:	c0 e4       	ldi	r28, 0x40	; 64
    2138:	d6 e0       	ldi	r29, 0x06	; 6
    213a:	10 e1       	ldi	r17, 0x10	; 16
	SPI_write(command);
    213c:	1e 83       	std	Y+6, r17	; 0x06
	PORTC.OUTSET = 0b00010000;
    213e:	89 df       	rcall	.-238    	; 0x2052 <SPI_write>
	delay_ms(9);
    2140:	1d 83       	std	Y+5, r17	; 0x05
    2142:	61 e8       	ldi	r22, 0x81	; 129
    2144:	7b eb       	ldi	r23, 0xBB	; 187
    2146:	80 e0       	ldi	r24, 0x00	; 0
	PORTC.OUTCLR = 0b00010000;
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	6d df       	rcall	.-294    	; 0x2026 <__portable_avr_delay_cycles>
    214c:	1e 83       	std	Y+6, r17	; 0x06
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	80 df       	rcall	.-256    	; 0x2052 <SPI_write>
    2152:	87 df       	rcall	.-242    	; 0x2062 <spi_read>
    2154:	c8 2e       	mov	r12, r24
    2156:	d1 2c       	mov	r13, r1
    2158:	e1 2c       	mov	r14, r1
    215a:	f1 2c       	mov	r15, r1
    215c:	56 01       	movw	r10, r12
    215e:	99 24       	eor	r9, r9
    2160:	88 24       	eor	r8, r8
    2162:	7f df       	rcall	.-258    	; 0x2062 <spi_read>
    2164:	c8 2e       	mov	r12, r24
    2166:	d1 2c       	mov	r13, r1
    2168:	e1 2c       	mov	r14, r1
    216a:	f1 2c       	mov	r15, r1
    216c:	fe 2c       	mov	r15, r14
    216e:	ed 2c       	mov	r14, r13
    2170:	dc 2c       	mov	r13, r12
    2172:	cc 24       	eor	r12, r12
    2174:	c8 0c       	add	r12, r8
    2176:	d9 1c       	adc	r13, r9
    2178:	ea 1c       	adc	r14, r10
    217a:	fb 1c       	adc	r15, r11
    217c:	72 df       	rcall	.-284    	; 0x2062 <spi_read>
    217e:	1d 83       	std	Y+5, r17	; 0x05
    2180:	a7 01       	movw	r20, r14
    2182:	96 01       	movw	r18, r12
    2184:	28 0f       	add	r18, r24
    2186:	31 1d       	adc	r19, r1
    2188:	41 1d       	adc	r20, r1
    218a:	51 1d       	adc	r21, r1
    218c:	ca 01       	movw	r24, r20
    218e:	b9 01       	movw	r22, r18
    2190:	df 91       	pop	r29
    2192:	cf 91       	pop	r28
    2194:	1f 91       	pop	r17
    2196:	ff 90       	pop	r15
    2198:	ef 90       	pop	r14
    219a:	df 90       	pop	r13
    219c:	cf 90       	pop	r12
    219e:	bf 90       	pop	r11
    21a0:	af 90       	pop	r10
    21a2:	9f 90       	pop	r9
    21a4:	8f 90       	pop	r8
    21a6:	08 95       	ret

000021a8 <get_pressure>:
    21a8:	2f 92       	push	r2
    21aa:	3f 92       	push	r3
    21ac:	4f 92       	push	r4
    21ae:	5f 92       	push	r5
    21b0:	6f 92       	push	r6
    21b2:	7f 92       	push	r7
    21b4:	8f 92       	push	r8
    21b6:	9f 92       	push	r9
    21b8:	af 92       	push	r10
    21ba:	bf 92       	push	r11
    21bc:	cf 92       	push	r12
    21be:	df 92       	push	r13
    21c0:	ef 92       	push	r14
    21c2:	ff 92       	push	r15
    21c4:	0f 93       	push	r16
    21c6:	1f 93       	push	r17
    21c8:	cf 93       	push	r28
    21ca:	df 93       	push	r29
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	61 97       	sbiw	r28, 0x11	; 17
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	88 e4       	ldi	r24, 0x48	; 72
    21d8:	a3 df       	rcall	.-186    	; 0x2120 <data_read>
    21da:	6d 83       	std	Y+5, r22	; 0x05
    21dc:	7e 83       	std	Y+6, r23	; 0x06
    21de:	8f 83       	std	Y+7, r24	; 0x07
    21e0:	98 87       	std	Y+8, r25	; 0x08
    21e2:	88 e5       	ldi	r24, 0x58	; 88
    21e4:	9d df       	rcall	.-198    	; 0x2120 <data_read>
    21e6:	20 91 a2 20 	lds	r18, 0x20A2	; 0x8020a2 <c5>
    21ea:	30 91 a3 20 	lds	r19, 0x20A3	; 0x8020a3 <c5+0x1>
    21ee:	89 01       	movw	r16, r18
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	32 2f       	mov	r19, r18
    21f6:	21 2f       	mov	r18, r17
    21f8:	10 2f       	mov	r17, r16
    21fa:	00 27       	eor	r16, r16
    21fc:	6b 01       	movw	r12, r22
    21fe:	7c 01       	movw	r14, r24
    2200:	c0 1a       	sub	r12, r16
    2202:	d1 0a       	sbc	r13, r17
    2204:	e2 0a       	sbc	r14, r18
    2206:	f3 0a       	sbc	r15, r19
    2208:	c9 82       	std	Y+1, r12	; 0x01
    220a:	da 82       	std	Y+2, r13	; 0x02
    220c:	eb 82       	std	Y+3, r14	; 0x03
    220e:	fc 82       	std	Y+4, r15	; 0x04
    2210:	20 90 9c 20 	lds	r2, 0x209C	; 0x80209c <c6>
    2214:	30 90 9d 20 	lds	r3, 0x209D	; 0x80209d <c6+0x1>
    2218:	d7 01       	movw	r26, r14
    221a:	c6 01       	movw	r24, r12
    221c:	bb 0f       	add	r27, r27
    221e:	88 0b       	sbc	r24, r24
    2220:	98 2f       	mov	r25, r24
    2222:	dc 01       	movw	r26, r24
    2224:	a9 80       	ldd	r10, Y+1	; 0x01
    2226:	ba 80       	ldd	r11, Y+2	; 0x02
    2228:	cb 80       	ldd	r12, Y+3	; 0x03
    222a:	dc 80       	ldd	r13, Y+4	; 0x04
    222c:	e8 2e       	mov	r14, r24
    222e:	f8 2e       	mov	r15, r24
    2230:	08 2f       	mov	r16, r24
    2232:	18 2f       	mov	r17, r24
    2234:	22 2d       	mov	r18, r2
    2236:	33 2d       	mov	r19, r3
    2238:	40 e0       	ldi	r20, 0x00	; 0
    223a:	50 e0       	ldi	r21, 0x00	; 0
    223c:	60 e0       	ldi	r22, 0x00	; 0
    223e:	70 e0       	ldi	r23, 0x00	; 0
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__muldi3>
    2248:	89 8b       	std	Y+17, r24	; 0x11
    224a:	b2 2f       	mov	r27, r18
    224c:	f3 2f       	mov	r31, r19
    224e:	e4 2f       	mov	r30, r20
    2250:	95 2e       	mov	r9, r21
    2252:	86 2e       	mov	r8, r22
    2254:	77 2e       	mov	r7, r23
    2256:	a8 2e       	mov	r10, r24
    2258:	b9 2e       	mov	r11, r25
    225a:	a0 e0       	ldi	r26, 0x00	; 0
    225c:	0e 94 11 1c 	call	0x3822	; 0x3822 <__cmpdi2_s8>
    2260:	84 f4       	brge	.+32     	; 0x2282 <get_pressure+0xda>
    2262:	21 50       	subi	r18, 0x01	; 1
    2264:	31 09       	sbc	r19, r1
    2266:	40 48       	sbci	r20, 0x80	; 128
    2268:	5f 4f       	sbci	r21, 0xFF	; 255
    226a:	6f 4f       	sbci	r22, 0xFF	; 255
    226c:	7f 4f       	sbci	r23, 0xFF	; 255
    226e:	8f 4f       	sbci	r24, 0xFF	; 255
    2270:	9f 4f       	sbci	r25, 0xFF	; 255
    2272:	b2 2f       	mov	r27, r18
    2274:	f3 2f       	mov	r31, r19
    2276:	e4 2f       	mov	r30, r20
    2278:	95 2e       	mov	r9, r21
    227a:	86 2e       	mov	r8, r22
    227c:	77 2e       	mov	r7, r23
    227e:	a8 2e       	mov	r10, r24
    2280:	b9 2e       	mov	r11, r25
    2282:	2b 2f       	mov	r18, r27
    2284:	3f 2f       	mov	r19, r31
    2286:	4e 2f       	mov	r20, r30
    2288:	59 2d       	mov	r21, r9
    228a:	68 2d       	mov	r22, r8
    228c:	77 2d       	mov	r23, r7
    228e:	8a 2d       	mov	r24, r10
    2290:	9b 2d       	mov	r25, r11
    2292:	07 e1       	ldi	r16, 0x17	; 23
    2294:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <__ashrdi3>
    2298:	82 2e       	mov	r8, r18
    229a:	93 2e       	mov	r9, r19
    229c:	00 e3       	ldi	r16, 0x30	; 48
    229e:	80 1a       	sub	r8, r16
    22a0:	08 ef       	ldi	r16, 0xF8	; 248
    22a2:	90 0a       	sbc	r9, r16
    22a4:	09 2c       	mov	r0, r9
    22a6:	00 0c       	add	r0, r0
    22a8:	aa 08       	sbc	r10, r10
    22aa:	bb 08       	sbc	r11, r11
    22ac:	80 92 98 20 	sts	0x2098, r8	; 0x802098 <TEMP>
    22b0:	90 92 99 20 	sts	0x2099, r9	; 0x802099 <TEMP+0x1>
    22b4:	a0 92 9a 20 	sts	0x209A, r10	; 0x80209a <TEMP+0x2>
    22b8:	b0 92 9b 20 	sts	0x209B, r11	; 0x80209b <TEMP+0x3>
    22bc:	a0 91 a6 20 	lds	r26, 0x20A6	; 0x8020a6 <c3>
    22c0:	b0 91 a7 20 	lds	r27, 0x20A7	; 0x8020a7 <c3+0x1>
    22c4:	29 81       	ldd	r18, Y+1	; 0x01
    22c6:	3a 81       	ldd	r19, Y+2	; 0x02
    22c8:	4b 81       	ldd	r20, Y+3	; 0x03
    22ca:	5c 81       	ldd	r21, Y+4	; 0x04
    22cc:	0e 94 6d 1b 	call	0x36da	; 0x36da <__muluhisi3>
    22d0:	4b 01       	movw	r8, r22
    22d2:	5c 01       	movw	r10, r24
    22d4:	99 23       	and	r25, r25
    22d6:	2c f4       	brge	.+10     	; 0x22e2 <get_pressure+0x13a>
    22d8:	1f e7       	ldi	r17, 0x7F	; 127
    22da:	81 0e       	add	r8, r17
    22dc:	91 1c       	adc	r9, r1
    22de:	a1 1c       	adc	r10, r1
    22e0:	b1 1c       	adc	r11, r1
    22e2:	24 01       	movw	r4, r8
    22e4:	35 01       	movw	r6, r10
    22e6:	68 94       	set
    22e8:	16 f8       	bld	r1, 6
    22ea:	75 94       	asr	r7
    22ec:	67 94       	ror	r6
    22ee:	57 94       	ror	r5
    22f0:	47 94       	ror	r4
    22f2:	16 94       	lsr	r1
    22f4:	d1 f7       	brne	.-12     	; 0x22ea <get_pressure+0x142>
    22f6:	bb 0c       	add	r11, r11
    22f8:	88 08       	sbc	r8, r8
    22fa:	98 2c       	mov	r9, r8
    22fc:	54 01       	movw	r10, r8
    22fe:	80 91 a4 20 	lds	r24, 0x20A4	; 0x8020a4 <c1>
    2302:	90 91 a5 20 	lds	r25, 0x20A5	; 0x8020a5 <c1+0x1>
    2306:	6c 01       	movw	r12, r24
    2308:	e1 2c       	mov	r14, r1
    230a:	f1 2c       	mov	r15, r1
    230c:	00 e0       	ldi	r16, 0x00	; 0
    230e:	10 e0       	ldi	r17, 0x00	; 0
    2310:	98 01       	movw	r18, r16
    2312:	89 87       	std	Y+9, r24	; 0x09
    2314:	da 86       	std	Y+10, r13	; 0x0a
    2316:	eb 86       	std	Y+11, r14	; 0x0b
    2318:	fc 86       	std	Y+12, r15	; 0x0c
    231a:	0d 87       	std	Y+13, r16	; 0x0d
    231c:	1e 87       	std	Y+14, r17	; 0x0e
    231e:	2f 87       	std	Y+15, r18	; 0x0f
    2320:	38 8b       	std	Y+16, r19	; 0x10
    2322:	28 2f       	mov	r18, r24
    2324:	3d 2d       	mov	r19, r13
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	50 e0       	ldi	r21, 0x00	; 0
    232a:	60 e0       	ldi	r22, 0x00	; 0
    232c:	70 e0       	ldi	r23, 0x00	; 0
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	00 e1       	ldi	r16, 0x10	; 16
    2334:	0e 94 c8 1b 	call	0x3790	; 0x3790 <__ashldi3>
    2338:	f2 2f       	mov	r31, r18
    233a:	e3 2f       	mov	r30, r19
    233c:	c4 2e       	mov	r12, r20
    233e:	d5 2e       	mov	r13, r21
    2340:	e6 2e       	mov	r14, r22
    2342:	f7 2e       	mov	r15, r23
    2344:	08 2f       	mov	r16, r24
    2346:	19 2f       	mov	r17, r25
    2348:	24 2d       	mov	r18, r4
    234a:	35 2d       	mov	r19, r5
    234c:	46 2d       	mov	r20, r6
    234e:	57 2d       	mov	r21, r7
    2350:	68 2d       	mov	r22, r8
    2352:	78 2d       	mov	r23, r8
    2354:	88 2d       	mov	r24, r8
    2356:	98 2d       	mov	r25, r8
    2358:	af 2e       	mov	r10, r31
    235a:	be 2e       	mov	r11, r30
    235c:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__adddi3>
    2360:	ed 80       	ldd	r14, Y+5	; 0x05
    2362:	fe 80       	ldd	r15, Y+6	; 0x06
    2364:	0f 81       	ldd	r16, Y+7	; 0x07
    2366:	18 85       	ldd	r17, Y+8	; 0x08
    2368:	17 01       	movw	r2, r14
    236a:	28 01       	movw	r4, r16
    236c:	ae 2c       	mov	r10, r14
    236e:	b3 2c       	mov	r11, r3
    2370:	c4 2c       	mov	r12, r4
    2372:	d5 2c       	mov	r13, r5
    2374:	e1 2c       	mov	r14, r1
    2376:	f1 2c       	mov	r15, r1
    2378:	00 e0       	ldi	r16, 0x00	; 0
    237a:	10 e0       	ldi	r17, 0x00	; 0
    237c:	0e 94 77 1b 	call	0x36ee	; 0x36ee <__muldi3>
    2380:	12 2f       	mov	r17, r18
    2382:	39 87       	std	Y+9, r19	; 0x09
    2384:	4d 83       	std	Y+5, r20	; 0x05
    2386:	b5 2f       	mov	r27, r21
    2388:	f6 2f       	mov	r31, r22
    238a:	e7 2f       	mov	r30, r23
    238c:	78 2e       	mov	r7, r24
    238e:	89 2e       	mov	r8, r25
    2390:	a0 e0       	ldi	r26, 0x00	; 0
    2392:	0e 94 11 1c 	call	0x3822	; 0x3822 <__cmpdi2_s8>
    2396:	84 f4       	brge	.+32     	; 0x23b8 <get_pressure+0x210>
    2398:	21 50       	subi	r18, 0x01	; 1
    239a:	31 09       	sbc	r19, r1
    239c:	40 4e       	sbci	r20, 0xE0	; 224
    239e:	5f 4f       	sbci	r21, 0xFF	; 255
    23a0:	6f 4f       	sbci	r22, 0xFF	; 255
    23a2:	7f 4f       	sbci	r23, 0xFF	; 255
    23a4:	8f 4f       	sbci	r24, 0xFF	; 255
    23a6:	9f 4f       	sbci	r25, 0xFF	; 255
    23a8:	12 2f       	mov	r17, r18
    23aa:	39 87       	std	Y+9, r19	; 0x09
    23ac:	4d 83       	std	Y+5, r20	; 0x05
    23ae:	b5 2f       	mov	r27, r21
    23b0:	f6 2f       	mov	r31, r22
    23b2:	e7 2f       	mov	r30, r23
    23b4:	78 2e       	mov	r7, r24
    23b6:	89 2e       	mov	r8, r25
    23b8:	21 2f       	mov	r18, r17
    23ba:	39 85       	ldd	r19, Y+9	; 0x09
    23bc:	4d 81       	ldd	r20, Y+5	; 0x05
    23be:	5b 2f       	mov	r21, r27
    23c0:	6f 2f       	mov	r22, r31
    23c2:	7e 2f       	mov	r23, r30
    23c4:	87 2d       	mov	r24, r7
    23c6:	98 2d       	mov	r25, r8
    23c8:	05 e1       	ldi	r16, 0x15	; 21
    23ca:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <__ashrdi3>
    23ce:	52 2e       	mov	r5, r18
    23d0:	63 2e       	mov	r6, r19
    23d2:	74 2e       	mov	r7, r20
    23d4:	59 8b       	std	Y+17, r21	; 0x11
    23d6:	69 87       	std	Y+9, r22	; 0x09
    23d8:	f7 2f       	mov	r31, r23
    23da:	e8 2f       	mov	r30, r24
    23dc:	49 2e       	mov	r4, r25
    23de:	a0 91 9e 20 	lds	r26, 0x209E	; 0x80209e <c4>
    23e2:	b0 91 9f 20 	lds	r27, 0x209F	; 0x80209f <c4+0x1>
    23e6:	29 81       	ldd	r18, Y+1	; 0x01
    23e8:	3a 81       	ldd	r19, Y+2	; 0x02
    23ea:	4b 81       	ldd	r20, Y+3	; 0x03
    23ec:	5c 81       	ldd	r21, Y+4	; 0x04
    23ee:	0e 94 6d 1b 	call	0x36da	; 0x36da <__muluhisi3>
    23f2:	4b 01       	movw	r8, r22
    23f4:	5c 01       	movw	r10, r24
    23f6:	99 23       	and	r25, r25
    23f8:	2c f4       	brge	.+10     	; 0x2404 <get_pressure+0x25c>
    23fa:	0f e3       	ldi	r16, 0x3F	; 63
    23fc:	80 0e       	add	r8, r16
    23fe:	91 1c       	adc	r9, r1
    2400:	a1 1c       	adc	r10, r1
    2402:	b1 1c       	adc	r11, r1
    2404:	75 01       	movw	r14, r10
    2406:	64 01       	movw	r12, r8
    2408:	68 94       	set
    240a:	15 f8       	bld	r1, 5
    240c:	f5 94       	asr	r15
    240e:	e7 94       	ror	r14
    2410:	d7 94       	ror	r13
    2412:	c7 94       	ror	r12
    2414:	16 94       	lsr	r1
    2416:	d1 f7       	brne	.-12     	; 0x240c <get_pressure+0x264>
    2418:	bb 0c       	add	r11, r11
    241a:	88 08       	sbc	r8, r8
    241c:	98 2c       	mov	r9, r8
    241e:	54 01       	movw	r10, r8
    2420:	20 91 a0 20 	lds	r18, 0x20A0	; 0x8020a0 <c2>
    2424:	30 91 a1 20 	lds	r19, 0x20A1	; 0x8020a1 <c2+0x1>
    2428:	a9 01       	movw	r20, r18
    242a:	35 2f       	mov	r19, r21
    242c:	40 e0       	ldi	r20, 0x00	; 0
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	60 e0       	ldi	r22, 0x00	; 0
    2432:	70 e0       	ldi	r23, 0x00	; 0
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	01 e1       	ldi	r16, 0x11	; 17
    243a:	0e 94 c8 1b 	call	0x3790	; 0x3790 <__ashldi3>
    243e:	22 2e       	mov	r2, r18
    2440:	33 2e       	mov	r3, r19
    2442:	49 83       	std	Y+1, r20	; 0x01
    2444:	5d 83       	std	Y+5, r21	; 0x05
    2446:	b6 2f       	mov	r27, r22
    2448:	a7 2f       	mov	r26, r23
    244a:	08 2f       	mov	r16, r24
    244c:	19 2f       	mov	r17, r25
    244e:	2c 2d       	mov	r18, r12
    2450:	3d 2d       	mov	r19, r13
    2452:	4e 2d       	mov	r20, r14
    2454:	5f 2d       	mov	r21, r15
    2456:	68 2d       	mov	r22, r8
    2458:	78 2d       	mov	r23, r8
    245a:	88 2d       	mov	r24, r8
    245c:	98 2d       	mov	r25, r8
    245e:	a2 2c       	mov	r10, r2
    2460:	b3 2c       	mov	r11, r3
    2462:	c9 80       	ldd	r12, Y+1	; 0x01
    2464:	dd 80       	ldd	r13, Y+5	; 0x05
    2466:	eb 2e       	mov	r14, r27
    2468:	fa 2e       	mov	r15, r26
    246a:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__adddi3>
    246e:	a2 2e       	mov	r10, r18
    2470:	b3 2e       	mov	r11, r19
    2472:	c4 2e       	mov	r12, r20
    2474:	d5 2e       	mov	r13, r21
    2476:	e6 2e       	mov	r14, r22
    2478:	f7 2e       	mov	r15, r23
    247a:	08 2f       	mov	r16, r24
    247c:	19 2f       	mov	r17, r25
    247e:	25 2d       	mov	r18, r5
    2480:	36 2d       	mov	r19, r6
    2482:	47 2d       	mov	r20, r7
    2484:	59 89       	ldd	r21, Y+17	; 0x11
    2486:	69 85       	ldd	r22, Y+9	; 0x09
    2488:	7f 2f       	mov	r23, r31
    248a:	8e 2f       	mov	r24, r30
    248c:	94 2d       	mov	r25, r4
    248e:	0e 94 08 1c 	call	0x3810	; 0x3810 <__subdi3>
    2492:	12 2f       	mov	r17, r18
    2494:	3d 83       	std	Y+5, r19	; 0x05
    2496:	49 83       	std	Y+1, r20	; 0x01
    2498:	b5 2f       	mov	r27, r21
    249a:	f6 2f       	mov	r31, r22
    249c:	e7 2f       	mov	r30, r23
    249e:	78 2e       	mov	r7, r24
    24a0:	89 2e       	mov	r8, r25
    24a2:	a0 e0       	ldi	r26, 0x00	; 0
    24a4:	0e 94 11 1c 	call	0x3822	; 0x3822 <__cmpdi2_s8>
    24a8:	84 f4       	brge	.+32     	; 0x24ca <get_pressure+0x322>
    24aa:	21 50       	subi	r18, 0x01	; 1
    24ac:	30 48       	sbci	r19, 0x80	; 128
    24ae:	4f 4f       	sbci	r20, 0xFF	; 255
    24b0:	5f 4f       	sbci	r21, 0xFF	; 255
    24b2:	6f 4f       	sbci	r22, 0xFF	; 255
    24b4:	7f 4f       	sbci	r23, 0xFF	; 255
    24b6:	8f 4f       	sbci	r24, 0xFF	; 255
    24b8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ba:	12 2f       	mov	r17, r18
    24bc:	3d 83       	std	Y+5, r19	; 0x05
    24be:	49 83       	std	Y+1, r20	; 0x01
    24c0:	b5 2f       	mov	r27, r21
    24c2:	f6 2f       	mov	r31, r22
    24c4:	e7 2f       	mov	r30, r23
    24c6:	78 2e       	mov	r7, r24
    24c8:	89 2e       	mov	r8, r25
    24ca:	21 2f       	mov	r18, r17
    24cc:	3d 81       	ldd	r19, Y+5	; 0x05
    24ce:	49 81       	ldd	r20, Y+1	; 0x01
    24d0:	5b 2f       	mov	r21, r27
    24d2:	6f 2f       	mov	r22, r31
    24d4:	7e 2f       	mov	r23, r30
    24d6:	87 2d       	mov	r24, r7
    24d8:	98 2d       	mov	r25, r8
    24da:	0f e0       	ldi	r16, 0x0F	; 15
    24dc:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <__ashrdi3>
    24e0:	62 2f       	mov	r22, r18
    24e2:	73 2f       	mov	r23, r19
    24e4:	84 2f       	mov	r24, r20
    24e6:	95 2f       	mov	r25, r21
    24e8:	61 96       	adiw	r28, 0x11	; 17
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	de bf       	out	0x3e, r29	; 62
    24ee:	df 91       	pop	r29
    24f0:	cf 91       	pop	r28
    24f2:	1f 91       	pop	r17
    24f4:	0f 91       	pop	r16
    24f6:	ff 90       	pop	r15
    24f8:	ef 90       	pop	r14
    24fa:	df 90       	pop	r13
    24fc:	cf 90       	pop	r12
    24fe:	bf 90       	pop	r11
    2500:	af 90       	pop	r10
    2502:	9f 90       	pop	r9
    2504:	8f 90       	pop	r8
    2506:	7f 90       	pop	r7
    2508:	6f 90       	pop	r6
    250a:	5f 90       	pop	r5
    250c:	4f 90       	pop	r4
    250e:	3f 90       	pop	r3
    2510:	2f 90       	pop	r2
    2512:	08 95       	ret

00002514 <adc_init>:
#include <asf.h>
#include <math.h>
#include "thermistor.h"


void adc_init(void){	//This is for PA0
    2514:	ff 92       	push	r15
    2516:	0f 93       	push	r16
    2518:	1f 93       	push	r17
    251a:	cf 93       	push	r28
    251c:	df 93       	push	r29
	PORTA.DIRCLR = 0b00000001;
    251e:	e0 e0       	ldi	r30, 0x00	; 0
    2520:	f6 e0       	ldi	r31, 0x06	; 6
    2522:	68 94       	set
    2524:	ff 24       	eor	r15, r15
    2526:	f6 f8       	bld	r15, 6
    2528:	f2 82       	std	Z+2, r15	; 0x02
	PORTA.DIR = 0b11111110;
    252a:	8f eb       	ldi	r24, 0xBF	; 191
    252c:	80 83       	st	Z, r24
	ADCA.CTRLA = 0b00000001;
    252e:	c0 e0       	ldi	r28, 0x00	; 0
    2530:	d2 e0       	ldi	r29, 0x02	; 2
    2532:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000;
    2534:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000;
    2536:	80 e1       	ldi	r24, 0x10	; 16
    2538:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101;
    253a:	85 e0       	ldi	r24, 0x05	; 5
    253c:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    253e:	61 e2       	ldi	r22, 0x21	; 33
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	82 e0       	ldi	r24, 0x02	; 2
    2544:	0e 94 37 04 	call	0x86e	; 0x86e <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    2548:	08 2f       	mov	r16, r24
    254a:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    254c:	10 2f       	mov	r17, r16
    254e:	00 27       	eor	r16, r16
    2550:	60 e2       	ldi	r22, 0x20	; 32
    2552:	70 e0       	ldi	r23, 0x00	; 0
    2554:	82 e0       	ldi	r24, 0x02	; 2
    2556:	0e 94 37 04 	call	0x86e	; 0x86e <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    255a:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    255c:	0c 87       	std	Y+12, r16	; 0x0c
    255e:	1d 87       	std	Y+13, r17	; 0x0d
	
	ADCA.CH0.CTRL = 0b00000001;
    2560:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000000;
    2562:	19 a2       	std	Y+33, r1	; 0x21
}
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	1f 91       	pop	r17
    256a:	0f 91       	pop	r16
    256c:	ff 90       	pop	r15
    256e:	08 95       	ret

00002570 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
	*data = usart_getchar(usart);
    2574:	eb 01       	movw	r28, r22
    2576:	4d da       	rcall	.-2918   	; 0x1a12 <usart_getchar>
}
    2578:	88 83       	st	Y, r24
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	08 95       	ret

00002580 <usart_serial_putchar>:
 * \param c       Character to write.
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
    2580:	40 ca       	rjmp	.-2944   	; 0x1a02 <usart_putchar>
    2582:	08 95       	ret

00002584 <usart_init>:
    2584:	cf 93       	push	r28
    2586:	df 93       	push	r29
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	27 97       	sbiw	r28, 0x07	; 7
    258e:	cd bf       	out	0x3d, r28	; 61
    2590:	de bf       	out	0x3e, r29	; 62
    2592:	e0 e4       	ldi	r30, 0x40	; 64
    2594:	f6 e0       	ldi	r31, 0x06	; 6
    2596:	88 e0       	ldi	r24, 0x08	; 8
    2598:	81 83       	std	Z+1, r24	; 0x01
    259a:	85 83       	std	Z+5, r24	; 0x05
    259c:	80 ea       	ldi	r24, 0xA0	; 160
    259e:	98 e0       	ldi	r25, 0x08	; 8
    25a0:	80 93 92 20 	sts	0x2092, r24	; 0x802092 <stdio_base>
    25a4:	90 93 93 20 	sts	0x2093, r25	; 0x802093 <stdio_base+0x1>
    25a8:	80 ec       	ldi	r24, 0xC0	; 192
    25aa:	92 e1       	ldi	r25, 0x12	; 18
    25ac:	80 93 90 20 	sts	0x2090, r24	; 0x802090 <ptr_put>
    25b0:	90 93 91 20 	sts	0x2091, r25	; 0x802091 <ptr_put+0x1>
    25b4:	88 eb       	ldi	r24, 0xB8	; 184
    25b6:	92 e1       	ldi	r25, 0x12	; 18
    25b8:	80 93 8e 20 	sts	0x208E, r24	; 0x80208e <ptr_get>
    25bc:	90 93 8f 20 	sts	0x208F, r25	; 0x80208f <ptr_get+0x1>
    25c0:	e6 e0       	ldi	r30, 0x06	; 6
    25c2:	f0 e2       	ldi	r31, 0x20	; 32
    25c4:	84 81       	ldd	r24, Z+4	; 0x04
    25c6:	8d 83       	std	Y+5, r24	; 0x05
    25c8:	85 81       	ldd	r24, Z+5	; 0x05
    25ca:	8e 83       	std	Y+6, r24	; 0x06
    25cc:	86 81       	ldd	r24, Z+6	; 0x06
    25ce:	8f 83       	std	Y+7, r24	; 0x07
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	a2 81       	ldd	r26, Z+2	; 0x02
    25d6:	b3 81       	ldd	r27, Z+3	; 0x03
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	9a 83       	std	Y+2, r25	; 0x02
    25dc:	ab 83       	std	Y+3, r26	; 0x03
    25de:	bc 83       	std	Y+4, r27	; 0x04
    25e0:	60 e1       	ldi	r22, 0x10	; 16
    25e2:	83 e0       	ldi	r24, 0x03	; 3
    25e4:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    25e8:	be 01       	movw	r22, r28
    25ea:	6f 5f       	subi	r22, 0xFF	; 255
    25ec:	7f 4f       	sbci	r23, 0xFF	; 255
    25ee:	80 ea       	ldi	r24, 0xA0	; 160
    25f0:	98 e0       	ldi	r25, 0x08	; 8
    25f2:	28 db       	rcall	.-2480   	; 0x1c44 <usart_init_rs232>
    25f4:	6e e1       	ldi	r22, 0x1E	; 30
    25f6:	72 e0       	ldi	r23, 0x02	; 2
    25f8:	87 e3       	ldi	r24, 0x37	; 55
    25fa:	92 e0       	ldi	r25, 0x02	; 2
    25fc:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <fdevopen>
    2600:	27 96       	adiw	r28, 0x07	; 7
    2602:	cd bf       	out	0x3d, r28	; 61
    2604:	de bf       	out	0x3e, r29	; 62
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	08 95       	ret

0000260c <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    260c:	04 c0       	rjmp	.+8      	; 0x2616 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    260e:	61 50       	subi	r22, 0x01	; 1
    2610:	71 09       	sbc	r23, r1
    2612:	81 09       	sbc	r24, r1
    2614:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2616:	61 15       	cp	r22, r1
    2618:	71 05       	cpc	r23, r1
    261a:	81 05       	cpc	r24, r1
    261c:	91 05       	cpc	r25, r1
    261e:	b9 f7       	brne	.-18     	; 0x260e <__portable_avr_delay_cycles+0x2>
    2620:	08 95       	ret

00002622 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2622:	00 97       	sbiw	r24, 0x00	; 0
    2624:	09 f4       	brne	.+2      	; 0x2628 <sysclk_enable_peripheral_clock+0x6>
    2626:	5c c1       	rjmp	.+696    	; 0x28e0 <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    2628:	80 3c       	cpi	r24, 0xC0	; 192
    262a:	91 05       	cpc	r25, r1
    262c:	29 f4       	brne	.+10     	; 0x2638 <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    262e:	60 e1       	ldi	r22, 0x10	; 16
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2636:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    2638:	80 34       	cpi	r24, 0x40	; 64
    263a:	24 e0       	ldi	r18, 0x04	; 4
    263c:	92 07       	cpc	r25, r18
    263e:	29 f4       	brne	.+10     	; 0x264a <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    2640:	68 e0       	ldi	r22, 0x08	; 8
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2648:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    264a:	81 15       	cp	r24, r1
    264c:	24 e0       	ldi	r18, 0x04	; 4
    264e:	92 07       	cpc	r25, r18
    2650:	29 f4       	brne	.+10     	; 0x265c <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2652:	64 e0       	ldi	r22, 0x04	; 4
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    265a:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    265c:	80 38       	cpi	r24, 0x80	; 128
    265e:	21 e0       	ldi	r18, 0x01	; 1
    2660:	92 07       	cpc	r25, r18
    2662:	29 f4       	brne	.+10     	; 0x266e <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2664:	62 e0       	ldi	r22, 0x02	; 2
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    266c:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    266e:	81 15       	cp	r24, r1
    2670:	21 e0       	ldi	r18, 0x01	; 1
    2672:	92 07       	cpc	r25, r18
    2674:	29 f4       	brne	.+10     	; 0x2680 <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2676:	61 e0       	ldi	r22, 0x01	; 1
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    267e:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    2680:	80 38       	cpi	r24, 0x80	; 128
    2682:	23 e0       	ldi	r18, 0x03	; 3
    2684:	92 07       	cpc	r25, r18
    2686:	29 f4       	brne	.+10     	; 0x2692 <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2688:	61 e0       	ldi	r22, 0x01	; 1
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2690:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    2692:	80 39       	cpi	r24, 0x90	; 144
    2694:	23 e0       	ldi	r18, 0x03	; 3
    2696:	92 07       	cpc	r25, r18
    2698:	29 f4       	brne	.+10     	; 0x26a4 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    269a:	61 e0       	ldi	r22, 0x01	; 1
    269c:	82 e0       	ldi	r24, 0x02	; 2
    269e:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    26a2:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    26a4:	81 15       	cp	r24, r1
    26a6:	22 e0       	ldi	r18, 0x02	; 2
    26a8:	92 07       	cpc	r25, r18
    26aa:	29 f4       	brne	.+10     	; 0x26b6 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    26ac:	62 e0       	ldi	r22, 0x02	; 2
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    26b4:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    26b6:	80 34       	cpi	r24, 0x40	; 64
    26b8:	22 e0       	ldi	r18, 0x02	; 2
    26ba:	92 07       	cpc	r25, r18
    26bc:	29 f4       	brne	.+10     	; 0x26c8 <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    26be:	62 e0       	ldi	r22, 0x02	; 2
    26c0:	82 e0       	ldi	r24, 0x02	; 2
    26c2:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    26c6:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    26c8:	81 15       	cp	r24, r1
    26ca:	23 e0       	ldi	r18, 0x03	; 3
    26cc:	92 07       	cpc	r25, r18
    26ce:	29 f4       	brne	.+10     	; 0x26da <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    26d0:	64 e0       	ldi	r22, 0x04	; 4
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    26d8:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    26da:	80 32       	cpi	r24, 0x20	; 32
    26dc:	23 e0       	ldi	r18, 0x03	; 3
    26de:	92 07       	cpc	r25, r18
    26e0:	29 f4       	brne	.+10     	; 0x26ec <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    26e2:	64 e0       	ldi	r22, 0x04	; 4
    26e4:	82 e0       	ldi	r24, 0x02	; 2
    26e6:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    26ea:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    26ec:	81 15       	cp	r24, r1
    26ee:	28 e0       	ldi	r18, 0x08	; 8
    26f0:	92 07       	cpc	r25, r18
    26f2:	29 f4       	brne	.+10     	; 0x26fe <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    26f4:	61 e0       	ldi	r22, 0x01	; 1
    26f6:	83 e0       	ldi	r24, 0x03	; 3
    26f8:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    26fc:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    26fe:	81 15       	cp	r24, r1
    2700:	29 e0       	ldi	r18, 0x09	; 9
    2702:	92 07       	cpc	r25, r18
    2704:	29 f4       	brne	.+10     	; 0x2710 <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2706:	61 e0       	ldi	r22, 0x01	; 1
    2708:	84 e0       	ldi	r24, 0x04	; 4
    270a:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    270e:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    2710:	81 15       	cp	r24, r1
    2712:	2a e0       	ldi	r18, 0x0A	; 10
    2714:	92 07       	cpc	r25, r18
    2716:	29 f4       	brne	.+10     	; 0x2722 <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2718:	61 e0       	ldi	r22, 0x01	; 1
    271a:	85 e0       	ldi	r24, 0x05	; 5
    271c:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2720:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    2722:	81 15       	cp	r24, r1
    2724:	2b e0       	ldi	r18, 0x0B	; 11
    2726:	92 07       	cpc	r25, r18
    2728:	29 f4       	brne	.+10     	; 0x2734 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    272a:	61 e0       	ldi	r22, 0x01	; 1
    272c:	86 e0       	ldi	r24, 0x06	; 6
    272e:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2732:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    2734:	80 34       	cpi	r24, 0x40	; 64
    2736:	28 e0       	ldi	r18, 0x08	; 8
    2738:	92 07       	cpc	r25, r18
    273a:	29 f4       	brne	.+10     	; 0x2746 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    273c:	62 e0       	ldi	r22, 0x02	; 2
    273e:	83 e0       	ldi	r24, 0x03	; 3
    2740:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2744:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2746:	80 34       	cpi	r24, 0x40	; 64
    2748:	29 e0       	ldi	r18, 0x09	; 9
    274a:	92 07       	cpc	r25, r18
    274c:	29 f4       	brne	.+10     	; 0x2758 <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    274e:	62 e0       	ldi	r22, 0x02	; 2
    2750:	84 e0       	ldi	r24, 0x04	; 4
    2752:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2756:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2758:	80 34       	cpi	r24, 0x40	; 64
    275a:	2a e0       	ldi	r18, 0x0A	; 10
    275c:	92 07       	cpc	r25, r18
    275e:	29 f4       	brne	.+10     	; 0x276a <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2760:	62 e0       	ldi	r22, 0x02	; 2
    2762:	85 e0       	ldi	r24, 0x05	; 5
    2764:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2768:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    276a:	80 34       	cpi	r24, 0x40	; 64
    276c:	2b e0       	ldi	r18, 0x0B	; 11
    276e:	92 07       	cpc	r25, r18
    2770:	29 f4       	brne	.+10     	; 0x277c <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    2772:	62 e0       	ldi	r22, 0x02	; 2
    2774:	86 e0       	ldi	r24, 0x06	; 6
    2776:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    277a:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    277c:	80 39       	cpi	r24, 0x90	; 144
    277e:	28 e0       	ldi	r18, 0x08	; 8
    2780:	92 07       	cpc	r25, r18
    2782:	29 f4       	brne	.+10     	; 0x278e <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2784:	64 e0       	ldi	r22, 0x04	; 4
    2786:	83 e0       	ldi	r24, 0x03	; 3
    2788:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    278c:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    278e:	80 39       	cpi	r24, 0x90	; 144
    2790:	29 e0       	ldi	r18, 0x09	; 9
    2792:	92 07       	cpc	r25, r18
    2794:	29 f4       	brne	.+10     	; 0x27a0 <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2796:	64 e0       	ldi	r22, 0x04	; 4
    2798:	84 e0       	ldi	r24, 0x04	; 4
    279a:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    279e:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    27a0:	80 39       	cpi	r24, 0x90	; 144
    27a2:	2a e0       	ldi	r18, 0x0A	; 10
    27a4:	92 07       	cpc	r25, r18
    27a6:	29 f4       	brne	.+10     	; 0x27b2 <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    27a8:	64 e0       	ldi	r22, 0x04	; 4
    27aa:	85 e0       	ldi	r24, 0x05	; 5
    27ac:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    27b0:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    27b2:	80 39       	cpi	r24, 0x90	; 144
    27b4:	2b e0       	ldi	r18, 0x0B	; 11
    27b6:	92 07       	cpc	r25, r18
    27b8:	29 f4       	brne	.+10     	; 0x27c4 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    27ba:	64 e0       	ldi	r22, 0x04	; 4
    27bc:	86 e0       	ldi	r24, 0x06	; 6
    27be:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    27c2:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    27c4:	80 3c       	cpi	r24, 0xC0	; 192
    27c6:	28 e0       	ldi	r18, 0x08	; 8
    27c8:	92 07       	cpc	r25, r18
    27ca:	29 f4       	brne	.+10     	; 0x27d6 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    27cc:	68 e0       	ldi	r22, 0x08	; 8
    27ce:	83 e0       	ldi	r24, 0x03	; 3
    27d0:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    27d4:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    27d6:	80 3c       	cpi	r24, 0xC0	; 192
    27d8:	29 e0       	ldi	r18, 0x09	; 9
    27da:	92 07       	cpc	r25, r18
    27dc:	29 f4       	brne	.+10     	; 0x27e8 <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    27de:	68 e0       	ldi	r22, 0x08	; 8
    27e0:	84 e0       	ldi	r24, 0x04	; 4
    27e2:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    27e6:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    27e8:	80 3c       	cpi	r24, 0xC0	; 192
    27ea:	2a e0       	ldi	r18, 0x0A	; 10
    27ec:	92 07       	cpc	r25, r18
    27ee:	29 f4       	brne	.+10     	; 0x27fa <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    27f0:	68 e0       	ldi	r22, 0x08	; 8
    27f2:	85 e0       	ldi	r24, 0x05	; 5
    27f4:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    27f8:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    27fa:	80 3c       	cpi	r24, 0xC0	; 192
    27fc:	2b e0       	ldi	r18, 0x0B	; 11
    27fe:	92 07       	cpc	r25, r18
    2800:	29 f4       	brne	.+10     	; 0x280c <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    2802:	68 e0       	ldi	r22, 0x08	; 8
    2804:	86 e0       	ldi	r24, 0x06	; 6
    2806:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    280a:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    280c:	80 3a       	cpi	r24, 0xA0	; 160
    280e:	28 e0       	ldi	r18, 0x08	; 8
    2810:	92 07       	cpc	r25, r18
    2812:	29 f4       	brne	.+10     	; 0x281e <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2814:	60 e1       	ldi	r22, 0x10	; 16
    2816:	83 e0       	ldi	r24, 0x03	; 3
    2818:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    281c:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    281e:	80 3a       	cpi	r24, 0xA0	; 160
    2820:	29 e0       	ldi	r18, 0x09	; 9
    2822:	92 07       	cpc	r25, r18
    2824:	29 f4       	brne	.+10     	; 0x2830 <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2826:	60 e1       	ldi	r22, 0x10	; 16
    2828:	84 e0       	ldi	r24, 0x04	; 4
    282a:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    282e:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    2830:	80 3a       	cpi	r24, 0xA0	; 160
    2832:	2a e0       	ldi	r18, 0x0A	; 10
    2834:	92 07       	cpc	r25, r18
    2836:	29 f4       	brne	.+10     	; 0x2842 <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2838:	60 e1       	ldi	r22, 0x10	; 16
    283a:	85 e0       	ldi	r24, 0x05	; 5
    283c:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2840:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    2842:	80 3a       	cpi	r24, 0xA0	; 160
    2844:	2b e0       	ldi	r18, 0x0B	; 11
    2846:	92 07       	cpc	r25, r18
    2848:	29 f4       	brne	.+10     	; 0x2854 <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    284a:	60 e1       	ldi	r22, 0x10	; 16
    284c:	86 e0       	ldi	r24, 0x06	; 6
    284e:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2852:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    2854:	80 3b       	cpi	r24, 0xB0	; 176
    2856:	28 e0       	ldi	r18, 0x08	; 8
    2858:	92 07       	cpc	r25, r18
    285a:	29 f4       	brne	.+10     	; 0x2866 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    285c:	60 e2       	ldi	r22, 0x20	; 32
    285e:	83 e0       	ldi	r24, 0x03	; 3
    2860:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2864:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    2866:	80 3b       	cpi	r24, 0xB0	; 176
    2868:	29 e0       	ldi	r18, 0x09	; 9
    286a:	92 07       	cpc	r25, r18
    286c:	29 f4       	brne	.+10     	; 0x2878 <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    286e:	60 e2       	ldi	r22, 0x20	; 32
    2870:	84 e0       	ldi	r24, 0x04	; 4
    2872:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2876:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    2878:	80 3b       	cpi	r24, 0xB0	; 176
    287a:	2a e0       	ldi	r18, 0x0A	; 10
    287c:	92 07       	cpc	r25, r18
    287e:	29 f4       	brne	.+10     	; 0x288a <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    2880:	60 e2       	ldi	r22, 0x20	; 32
    2882:	85 e0       	ldi	r24, 0x05	; 5
    2884:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    2888:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    288a:	80 3b       	cpi	r24, 0xB0	; 176
    288c:	2b e0       	ldi	r18, 0x0B	; 11
    288e:	92 07       	cpc	r25, r18
    2890:	29 f4       	brne	.+10     	; 0x289c <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    2892:	60 e2       	ldi	r22, 0x20	; 32
    2894:	86 e0       	ldi	r24, 0x06	; 6
    2896:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    289a:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    289c:	80 38       	cpi	r24, 0x80	; 128
    289e:	24 e0       	ldi	r18, 0x04	; 4
    28a0:	92 07       	cpc	r25, r18
    28a2:	29 f4       	brne	.+10     	; 0x28ae <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    28a4:	60 e4       	ldi	r22, 0x40	; 64
    28a6:	83 e0       	ldi	r24, 0x03	; 3
    28a8:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    28ac:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    28ae:	80 39       	cpi	r24, 0x90	; 144
    28b0:	24 e0       	ldi	r18, 0x04	; 4
    28b2:	92 07       	cpc	r25, r18
    28b4:	29 f4       	brne	.+10     	; 0x28c0 <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    28b6:	60 e4       	ldi	r22, 0x40	; 64
    28b8:	84 e0       	ldi	r24, 0x04	; 4
    28ba:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    28be:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    28c0:	80 3a       	cpi	r24, 0xA0	; 160
    28c2:	24 e0       	ldi	r18, 0x04	; 4
    28c4:	92 07       	cpc	r25, r18
    28c6:	29 f4       	brne	.+10     	; 0x28d2 <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    28c8:	60 e4       	ldi	r22, 0x40	; 64
    28ca:	85 e0       	ldi	r24, 0x05	; 5
    28cc:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    28d0:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    28d2:	80 3b       	cpi	r24, 0xB0	; 176
    28d4:	94 40       	sbci	r25, 0x04	; 4
    28d6:	21 f4       	brne	.+8      	; 0x28e0 <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    28d8:	60 e4       	ldi	r22, 0x40	; 64
    28da:	86 e0       	ldi	r24, 0x06	; 6
    28dc:	0c 94 08 02 	jmp	0x410	; 0x410 <sysclk_enable_module>
    28e0:	08 95       	ret

000028e2 <main>:
    28e2:	cf 93       	push	r28
    28e4:	df 93       	push	r29
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <main+0x6>
    28e8:	1f 92       	push	r1
    28ea:	cd b7       	in	r28, 0x3d	; 61
    28ec:	de b7       	in	r29, 0x3e	; 62
    28ee:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <sysclk_init>
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	9b e0       	ldi	r25, 0x0B	; 11
    28f6:	95 de       	rcall	.-726    	; 0x2622 <sysclk_enable_peripheral_clock>
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	99 e0       	ldi	r25, 0x09	; 9
    28fc:	92 de       	rcall	.-732    	; 0x2622 <sysclk_enable_peripheral_clock>
    28fe:	64 e0       	ldi	r22, 0x04	; 4
    2900:	86 e0       	ldi	r24, 0x06	; 6
    2902:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    2906:	64 e0       	ldi	r22, 0x04	; 4
    2908:	84 e0       	ldi	r24, 0x04	; 4
    290a:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    290e:	68 e0       	ldi	r22, 0x08	; 8
    2910:	83 e0       	ldi	r24, 0x03	; 3
    2912:	0e 94 08 02 	call	0x410	; 0x410 <sysclk_enable_module>
    2916:	80 ea       	ldi	r24, 0xA0	; 160
    2918:	98 e0       	ldi	r25, 0x08	; 8
    291a:	83 de       	rcall	.-762    	; 0x2622 <sysclk_enable_peripheral_clock>
    291c:	33 de       	rcall	.-922    	; 0x2584 <usart_init>
    291e:	80 ec       	ldi	r24, 0xC0	; 192
    2920:	98 e0       	ldi	r25, 0x08	; 8
    2922:	7f de       	rcall	.-770    	; 0x2622 <sysclk_enable_peripheral_clock>
    2924:	8b db       	rcall	.-2282   	; 0x203c <SPI_init>
    2926:	c5 db       	rcall	.-2166   	; 0x20b2 <ms5607_init>
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	92 e0       	ldi	r25, 0x02	; 2
    292c:	7a de       	rcall	.-780    	; 0x2622 <sysclk_enable_peripheral_clock>
    292e:	f2 dd       	rcall	.-1052   	; 0x2514 <adc_init>
    2930:	3b dc       	rcall	.-1930   	; 0x21a8 <get_pressure>
    2932:	9b 01       	movw	r18, r22
    2934:	ac 01       	movw	r20, r24
    2936:	64 eb       	ldi	r22, 0xB4	; 180
    2938:	7b e8       	ldi	r23, 0x8B	; 139
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	0a db       	rcall	.-2540   	; 0x1f54 <Get_altitude>
    2940:	71 d1       	rcall	.+738    	; 0x2c24 <__fixsfsi>
    2942:	2b 01       	movw	r4, r22
    2944:	3c 01       	movw	r6, r24
    2946:	10 e0       	ldi	r17, 0x00	; 0
    2948:	c1 2c       	mov	r12, r1
    294a:	d1 2c       	mov	r13, r1
    294c:	76 01       	movw	r14, r12
    294e:	0f 2e       	mov	r0, r31
    2950:	21 2c       	mov	r2, r1
    2952:	f6 e0       	ldi	r31, 0x06	; 6
    2954:	3f 2e       	mov	r3, r31
    2956:	f0 2d       	mov	r31, r0
    2958:	05 e5       	ldi	r16, 0x55	; 85
    295a:	03 c0       	rjmp	.+6      	; 0x2962 <main+0x80>
    295c:	12 e0       	ldi	r17, 0x02	; 2
    295e:	01 c0       	rjmp	.+2      	; 0x2962 <main+0x80>
    2960:	12 e0       	ldi	r17, 0x02	; 2
    2962:	22 dc       	rcall	.-1980   	; 0x21a8 <get_pressure>
    2964:	9b 01       	movw	r18, r22
    2966:	ac 01       	movw	r20, r24
    2968:	64 eb       	ldi	r22, 0xB4	; 180
    296a:	7b e8       	ldi	r23, 0x8B	; 139
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	f1 da       	rcall	.-2590   	; 0x1f54 <Get_altitude>
    2972:	58 d1       	rcall	.+688    	; 0x2c24 <__fixsfsi>
    2974:	4b 01       	movw	r8, r22
    2976:	5c 01       	movw	r10, r24
    2978:	88 d1       	rcall	.+784    	; 0x2c8a <__floatsisf>
    297a:	26 e6       	ldi	r18, 0x66	; 102
    297c:	36 e6       	ldi	r19, 0x66	; 102
    297e:	46 e6       	ldi	r20, 0x66	; 102
    2980:	5f e3       	ldi	r21, 0x3F	; 63
    2982:	54 d2       	rcall	.+1192   	; 0x2e2c <__mulsf3>
    2984:	69 83       	std	Y+1, r22	; 0x01
    2986:	7a 83       	std	Y+2, r23	; 0x02
    2988:	8b 83       	std	Y+3, r24	; 0x03
    298a:	9c 83       	std	Y+4, r25	; 0x04
    298c:	c7 01       	movw	r24, r14
    298e:	b6 01       	movw	r22, r12
    2990:	7c d1       	rcall	.+760    	; 0x2c8a <__floatsisf>
    2992:	20 ed       	ldi	r18, 0xD0	; 208
    2994:	3c ec       	ldi	r19, 0xCC	; 204
    2996:	4c ec       	ldi	r20, 0xCC	; 204
    2998:	5d e3       	ldi	r21, 0x3D	; 61
    299a:	48 d2       	rcall	.+1168   	; 0x2e2c <__mulsf3>
    299c:	9b 01       	movw	r18, r22
    299e:	ac 01       	movw	r20, r24
    29a0:	69 81       	ldd	r22, Y+1	; 0x01
    29a2:	7a 81       	ldd	r23, Y+2	; 0x02
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	9c 81       	ldd	r25, Y+4	; 0x04
    29a8:	71 d0       	rcall	.+226    	; 0x2a8c <__addsf3>
    29aa:	3c d1       	rcall	.+632    	; 0x2c24 <__fixsfsi>
    29ac:	6b 01       	movw	r12, r22
    29ae:	7c 01       	movw	r14, r24
    29b0:	61 e8       	ldi	r22, 0x81	; 129
    29b2:	78 e3       	ldi	r23, 0x38	; 56
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	29 de       	rcall	.-942    	; 0x260c <__portable_avr_delay_cycles>
    29ba:	11 11       	cpse	r17, r1
    29bc:	1b c0       	rjmp	.+54     	; 0x29f4 <main+0x112>
    29be:	00 93 81 06 	sts	0x0681, r16	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    29c2:	00 93 85 06 	sts	0x0685, r16	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    29c6:	28 e0       	ldi	r18, 0x08	; 8
    29c8:	f1 01       	movw	r30, r2
    29ca:	24 83       	std	Z+4, r18	; 0x04
    29cc:	d7 01       	movw	r26, r14
    29ce:	c6 01       	movw	r24, r12
    29d0:	88 19       	sub	r24, r8
    29d2:	99 09       	sbc	r25, r9
    29d4:	aa 09       	sbc	r26, r10
    29d6:	bb 09       	sbc	r27, r11
    29d8:	0a f0       	brmi	.+2      	; 0x29dc <main+0xfa>
    29da:	c3 cf       	rjmp	.-122    	; 0x2962 <main+0x80>
    29dc:	d7 01       	movw	r26, r14
    29de:	c6 01       	movw	r24, r12
    29e0:	89 55       	subi	r24, 0x59	; 89
    29e2:	92 40       	sbci	r25, 0x02	; 2
    29e4:	a1 09       	sbc	r26, r1
    29e6:	b1 09       	sbc	r27, r1
    29e8:	87 3c       	cpi	r24, 0xC7	; 199
    29ea:	91 05       	cpc	r25, r1
    29ec:	a1 05       	cpc	r26, r1
    29ee:	b1 05       	cpc	r27, r1
    29f0:	d8 f1       	brcs	.+118    	; 0x2a68 <main+0x186>
    29f2:	b7 cf       	rjmp	.-146    	; 0x2962 <main+0x80>
    29f4:	11 30       	cpi	r17, 0x01	; 1
    29f6:	81 f4       	brne	.+32     	; 0x2a18 <main+0x136>
    29f8:	8d e1       	ldi	r24, 0x1D	; 29
    29fa:	90 e2       	ldi	r25, 0x20	; 32
    29fc:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <puts>
    2a00:	d7 01       	movw	r26, r14
    2a02:	c6 01       	movw	r24, r12
    2a04:	84 19       	sub	r24, r4
    2a06:	95 09       	sbc	r25, r5
    2a08:	a6 09       	sbc	r26, r6
    2a0a:	b7 09       	sbc	r27, r7
    2a0c:	8c 32       	cpi	r24, 0x2C	; 44
    2a0e:	91 40       	sbci	r25, 0x01	; 1
    2a10:	a1 05       	cpc	r26, r1
    2a12:	b1 05       	cpc	r27, r1
    2a14:	24 f0       	brlt	.+8      	; 0x2a1e <main+0x13c>
    2a16:	a5 cf       	rjmp	.-182    	; 0x2962 <main+0x80>
    2a18:	12 30       	cpi	r17, 0x02	; 2
    2a1a:	09 f0       	breq	.+2      	; 0x2a1e <main+0x13c>
    2a1c:	a2 cf       	rjmp	.-188    	; 0x2962 <main+0x80>
    2a1e:	8d e2       	ldi	r24, 0x2D	; 45
    2a20:	90 e2       	ldi	r25, 0x20	; 32
    2a22:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <puts>
    2a26:	d7 01       	movw	r26, r14
    2a28:	c6 01       	movw	r24, r12
    2a2a:	88 19       	sub	r24, r8
    2a2c:	99 09       	sbc	r25, r9
    2a2e:	aa 09       	sbc	r26, r10
    2a30:	bb 09       	sbc	r27, r11
    2a32:	18 16       	cp	r1, r24
    2a34:	19 06       	cpc	r1, r25
    2a36:	1a 06       	cpc	r1, r26
    2a38:	1b 06       	cpc	r1, r27
    2a3a:	0c f4       	brge	.+2      	; 0x2a3e <main+0x15c>
    2a3c:	8f cf       	rjmp	.-226    	; 0x295c <main+0x7a>
    2a3e:	84 18       	sub	r8, r4
    2a40:	95 08       	sbc	r9, r5
    2a42:	a6 08       	sbc	r10, r6
    2a44:	b7 08       	sbc	r11, r7
    2a46:	f4 e6       	ldi	r31, 0x64	; 100
    2a48:	8f 16       	cp	r8, r31
    2a4a:	91 04       	cpc	r9, r1
    2a4c:	a1 04       	cpc	r10, r1
    2a4e:	b1 04       	cpc	r11, r1
    2a50:	0c f0       	brlt	.+2      	; 0x2a54 <main+0x172>
    2a52:	86 cf       	rjmp	.-244    	; 0x2960 <main+0x7e>
    2a54:	28 e0       	ldi	r18, 0x08	; 8
    2a56:	f1 01       	movw	r30, r2
    2a58:	24 83       	std	Z+4, r18	; 0x04
    2a5a:	13 e0       	ldi	r17, 0x03	; 3
    2a5c:	82 cf       	rjmp	.-252    	; 0x2962 <main+0x80>
    2a5e:	8d e2       	ldi	r24, 0x2D	; 45
    2a60:	90 e2       	ldi	r25, 0x20	; 32
    2a62:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <puts>
    2a66:	eb cf       	rjmp	.-42     	; 0x2a3e <main+0x15c>
    2a68:	8d e1       	ldi	r24, 0x1D	; 29
    2a6a:	90 e2       	ldi	r25, 0x20	; 32
    2a6c:	0e 94 b3 1d 	call	0x3b66	; 0x3b66 <puts>
    2a70:	d7 01       	movw	r26, r14
    2a72:	c6 01       	movw	r24, r12
    2a74:	84 19       	sub	r24, r4
    2a76:	95 09       	sbc	r25, r5
    2a78:	a6 09       	sbc	r26, r6
    2a7a:	b7 09       	sbc	r27, r7
    2a7c:	8c 32       	cpi	r24, 0x2C	; 44
    2a7e:	91 40       	sbci	r25, 0x01	; 1
    2a80:	a1 05       	cpc	r26, r1
    2a82:	b1 05       	cpc	r27, r1
    2a84:	64 f3       	brlt	.-40     	; 0x2a5e <main+0x17c>
    2a86:	11 e0       	ldi	r17, 0x01	; 1
    2a88:	6c cf       	rjmp	.-296    	; 0x2962 <main+0x80>

00002a8a <__subsf3>:
    2a8a:	50 58       	subi	r21, 0x80	; 128

00002a8c <__addsf3>:
    2a8c:	bb 27       	eor	r27, r27
    2a8e:	aa 27       	eor	r26, r26
    2a90:	0e d0       	rcall	.+28     	; 0x2aae <__addsf3x>
    2a92:	4d c1       	rjmp	.+666    	; 0x2d2e <__fp_round>
    2a94:	3e d1       	rcall	.+636    	; 0x2d12 <__fp_pscA>
    2a96:	30 f0       	brcs	.+12     	; 0x2aa4 <__addsf3+0x18>
    2a98:	43 d1       	rcall	.+646    	; 0x2d20 <__fp_pscB>
    2a9a:	20 f0       	brcs	.+8      	; 0x2aa4 <__addsf3+0x18>
    2a9c:	31 f4       	brne	.+12     	; 0x2aaa <__addsf3+0x1e>
    2a9e:	9f 3f       	cpi	r25, 0xFF	; 255
    2aa0:	11 f4       	brne	.+4      	; 0x2aa6 <__addsf3+0x1a>
    2aa2:	1e f4       	brtc	.+6      	; 0x2aaa <__addsf3+0x1e>
    2aa4:	33 c1       	rjmp	.+614    	; 0x2d0c <__fp_nan>
    2aa6:	0e f4       	brtc	.+2      	; 0x2aaa <__addsf3+0x1e>
    2aa8:	e0 95       	com	r30
    2aaa:	e7 fb       	bst	r30, 7
    2aac:	29 c1       	rjmp	.+594    	; 0x2d00 <__fp_inf>

00002aae <__addsf3x>:
    2aae:	e9 2f       	mov	r30, r25
    2ab0:	4f d1       	rcall	.+670    	; 0x2d50 <__fp_split3>
    2ab2:	80 f3       	brcs	.-32     	; 0x2a94 <__addsf3+0x8>
    2ab4:	ba 17       	cp	r27, r26
    2ab6:	62 07       	cpc	r22, r18
    2ab8:	73 07       	cpc	r23, r19
    2aba:	84 07       	cpc	r24, r20
    2abc:	95 07       	cpc	r25, r21
    2abe:	18 f0       	brcs	.+6      	; 0x2ac6 <__addsf3x+0x18>
    2ac0:	71 f4       	brne	.+28     	; 0x2ade <__addsf3x+0x30>
    2ac2:	9e f5       	brtc	.+102    	; 0x2b2a <__addsf3x+0x7c>
    2ac4:	67 c1       	rjmp	.+718    	; 0x2d94 <__fp_zero>
    2ac6:	0e f4       	brtc	.+2      	; 0x2aca <__addsf3x+0x1c>
    2ac8:	e0 95       	com	r30
    2aca:	0b 2e       	mov	r0, r27
    2acc:	ba 2f       	mov	r27, r26
    2ace:	a0 2d       	mov	r26, r0
    2ad0:	0b 01       	movw	r0, r22
    2ad2:	b9 01       	movw	r22, r18
    2ad4:	90 01       	movw	r18, r0
    2ad6:	0c 01       	movw	r0, r24
    2ad8:	ca 01       	movw	r24, r20
    2ada:	a0 01       	movw	r20, r0
    2adc:	11 24       	eor	r1, r1
    2ade:	ff 27       	eor	r31, r31
    2ae0:	59 1b       	sub	r21, r25
    2ae2:	99 f0       	breq	.+38     	; 0x2b0a <__addsf3x+0x5c>
    2ae4:	59 3f       	cpi	r21, 0xF9	; 249
    2ae6:	50 f4       	brcc	.+20     	; 0x2afc <__addsf3x+0x4e>
    2ae8:	50 3e       	cpi	r21, 0xE0	; 224
    2aea:	68 f1       	brcs	.+90     	; 0x2b46 <__addsf3x+0x98>
    2aec:	1a 16       	cp	r1, r26
    2aee:	f0 40       	sbci	r31, 0x00	; 0
    2af0:	a2 2f       	mov	r26, r18
    2af2:	23 2f       	mov	r18, r19
    2af4:	34 2f       	mov	r19, r20
    2af6:	44 27       	eor	r20, r20
    2af8:	58 5f       	subi	r21, 0xF8	; 248
    2afa:	f3 cf       	rjmp	.-26     	; 0x2ae2 <__addsf3x+0x34>
    2afc:	46 95       	lsr	r20
    2afe:	37 95       	ror	r19
    2b00:	27 95       	ror	r18
    2b02:	a7 95       	ror	r26
    2b04:	f0 40       	sbci	r31, 0x00	; 0
    2b06:	53 95       	inc	r21
    2b08:	c9 f7       	brne	.-14     	; 0x2afc <__addsf3x+0x4e>
    2b0a:	7e f4       	brtc	.+30     	; 0x2b2a <__addsf3x+0x7c>
    2b0c:	1f 16       	cp	r1, r31
    2b0e:	ba 0b       	sbc	r27, r26
    2b10:	62 0b       	sbc	r22, r18
    2b12:	73 0b       	sbc	r23, r19
    2b14:	84 0b       	sbc	r24, r20
    2b16:	ba f0       	brmi	.+46     	; 0x2b46 <__addsf3x+0x98>
    2b18:	91 50       	subi	r25, 0x01	; 1
    2b1a:	a1 f0       	breq	.+40     	; 0x2b44 <__addsf3x+0x96>
    2b1c:	ff 0f       	add	r31, r31
    2b1e:	bb 1f       	adc	r27, r27
    2b20:	66 1f       	adc	r22, r22
    2b22:	77 1f       	adc	r23, r23
    2b24:	88 1f       	adc	r24, r24
    2b26:	c2 f7       	brpl	.-16     	; 0x2b18 <__addsf3x+0x6a>
    2b28:	0e c0       	rjmp	.+28     	; 0x2b46 <__addsf3x+0x98>
    2b2a:	ba 0f       	add	r27, r26
    2b2c:	62 1f       	adc	r22, r18
    2b2e:	73 1f       	adc	r23, r19
    2b30:	84 1f       	adc	r24, r20
    2b32:	48 f4       	brcc	.+18     	; 0x2b46 <__addsf3x+0x98>
    2b34:	87 95       	ror	r24
    2b36:	77 95       	ror	r23
    2b38:	67 95       	ror	r22
    2b3a:	b7 95       	ror	r27
    2b3c:	f7 95       	ror	r31
    2b3e:	9e 3f       	cpi	r25, 0xFE	; 254
    2b40:	08 f0       	brcs	.+2      	; 0x2b44 <__addsf3x+0x96>
    2b42:	b3 cf       	rjmp	.-154    	; 0x2aaa <__addsf3+0x1e>
    2b44:	93 95       	inc	r25
    2b46:	88 0f       	add	r24, r24
    2b48:	08 f0       	brcs	.+2      	; 0x2b4c <__addsf3x+0x9e>
    2b4a:	99 27       	eor	r25, r25
    2b4c:	ee 0f       	add	r30, r30
    2b4e:	97 95       	ror	r25
    2b50:	87 95       	ror	r24
    2b52:	08 95       	ret

00002b54 <__divsf3>:
    2b54:	0c d0       	rcall	.+24     	; 0x2b6e <__divsf3x>
    2b56:	eb c0       	rjmp	.+470    	; 0x2d2e <__fp_round>
    2b58:	e3 d0       	rcall	.+454    	; 0x2d20 <__fp_pscB>
    2b5a:	40 f0       	brcs	.+16     	; 0x2b6c <__divsf3+0x18>
    2b5c:	da d0       	rcall	.+436    	; 0x2d12 <__fp_pscA>
    2b5e:	30 f0       	brcs	.+12     	; 0x2b6c <__divsf3+0x18>
    2b60:	21 f4       	brne	.+8      	; 0x2b6a <__divsf3+0x16>
    2b62:	5f 3f       	cpi	r21, 0xFF	; 255
    2b64:	19 f0       	breq	.+6      	; 0x2b6c <__divsf3+0x18>
    2b66:	cc c0       	rjmp	.+408    	; 0x2d00 <__fp_inf>
    2b68:	51 11       	cpse	r21, r1
    2b6a:	15 c1       	rjmp	.+554    	; 0x2d96 <__fp_szero>
    2b6c:	cf c0       	rjmp	.+414    	; 0x2d0c <__fp_nan>

00002b6e <__divsf3x>:
    2b6e:	f0 d0       	rcall	.+480    	; 0x2d50 <__fp_split3>
    2b70:	98 f3       	brcs	.-26     	; 0x2b58 <__divsf3+0x4>

00002b72 <__divsf3_pse>:
    2b72:	99 23       	and	r25, r25
    2b74:	c9 f3       	breq	.-14     	; 0x2b68 <__divsf3+0x14>
    2b76:	55 23       	and	r21, r21
    2b78:	b1 f3       	breq	.-20     	; 0x2b66 <__divsf3+0x12>
    2b7a:	95 1b       	sub	r25, r21
    2b7c:	55 0b       	sbc	r21, r21
    2b7e:	bb 27       	eor	r27, r27
    2b80:	aa 27       	eor	r26, r26
    2b82:	62 17       	cp	r22, r18
    2b84:	73 07       	cpc	r23, r19
    2b86:	84 07       	cpc	r24, r20
    2b88:	38 f0       	brcs	.+14     	; 0x2b98 <__divsf3_pse+0x26>
    2b8a:	9f 5f       	subi	r25, 0xFF	; 255
    2b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2b8e:	22 0f       	add	r18, r18
    2b90:	33 1f       	adc	r19, r19
    2b92:	44 1f       	adc	r20, r20
    2b94:	aa 1f       	adc	r26, r26
    2b96:	a9 f3       	breq	.-22     	; 0x2b82 <__divsf3_pse+0x10>
    2b98:	33 d0       	rcall	.+102    	; 0x2c00 <__divsf3_pse+0x8e>
    2b9a:	0e 2e       	mov	r0, r30
    2b9c:	3a f0       	brmi	.+14     	; 0x2bac <__divsf3_pse+0x3a>
    2b9e:	e0 e8       	ldi	r30, 0x80	; 128
    2ba0:	30 d0       	rcall	.+96     	; 0x2c02 <__divsf3_pse+0x90>
    2ba2:	91 50       	subi	r25, 0x01	; 1
    2ba4:	50 40       	sbci	r21, 0x00	; 0
    2ba6:	e6 95       	lsr	r30
    2ba8:	00 1c       	adc	r0, r0
    2baa:	ca f7       	brpl	.-14     	; 0x2b9e <__divsf3_pse+0x2c>
    2bac:	29 d0       	rcall	.+82     	; 0x2c00 <__divsf3_pse+0x8e>
    2bae:	fe 2f       	mov	r31, r30
    2bb0:	27 d0       	rcall	.+78     	; 0x2c00 <__divsf3_pse+0x8e>
    2bb2:	66 0f       	add	r22, r22
    2bb4:	77 1f       	adc	r23, r23
    2bb6:	88 1f       	adc	r24, r24
    2bb8:	bb 1f       	adc	r27, r27
    2bba:	26 17       	cp	r18, r22
    2bbc:	37 07       	cpc	r19, r23
    2bbe:	48 07       	cpc	r20, r24
    2bc0:	ab 07       	cpc	r26, r27
    2bc2:	b0 e8       	ldi	r27, 0x80	; 128
    2bc4:	09 f0       	breq	.+2      	; 0x2bc8 <__divsf3_pse+0x56>
    2bc6:	bb 0b       	sbc	r27, r27
    2bc8:	80 2d       	mov	r24, r0
    2bca:	bf 01       	movw	r22, r30
    2bcc:	ff 27       	eor	r31, r31
    2bce:	93 58       	subi	r25, 0x83	; 131
    2bd0:	5f 4f       	sbci	r21, 0xFF	; 255
    2bd2:	2a f0       	brmi	.+10     	; 0x2bde <__divsf3_pse+0x6c>
    2bd4:	9e 3f       	cpi	r25, 0xFE	; 254
    2bd6:	51 05       	cpc	r21, r1
    2bd8:	68 f0       	brcs	.+26     	; 0x2bf4 <__divsf3_pse+0x82>
    2bda:	92 c0       	rjmp	.+292    	; 0x2d00 <__fp_inf>
    2bdc:	dc c0       	rjmp	.+440    	; 0x2d96 <__fp_szero>
    2bde:	5f 3f       	cpi	r21, 0xFF	; 255
    2be0:	ec f3       	brlt	.-6      	; 0x2bdc <__divsf3_pse+0x6a>
    2be2:	98 3e       	cpi	r25, 0xE8	; 232
    2be4:	dc f3       	brlt	.-10     	; 0x2bdc <__divsf3_pse+0x6a>
    2be6:	86 95       	lsr	r24
    2be8:	77 95       	ror	r23
    2bea:	67 95       	ror	r22
    2bec:	b7 95       	ror	r27
    2bee:	f7 95       	ror	r31
    2bf0:	9f 5f       	subi	r25, 0xFF	; 255
    2bf2:	c9 f7       	brne	.-14     	; 0x2be6 <__divsf3_pse+0x74>
    2bf4:	88 0f       	add	r24, r24
    2bf6:	91 1d       	adc	r25, r1
    2bf8:	96 95       	lsr	r25
    2bfa:	87 95       	ror	r24
    2bfc:	97 f9       	bld	r25, 7
    2bfe:	08 95       	ret
    2c00:	e1 e0       	ldi	r30, 0x01	; 1
    2c02:	66 0f       	add	r22, r22
    2c04:	77 1f       	adc	r23, r23
    2c06:	88 1f       	adc	r24, r24
    2c08:	bb 1f       	adc	r27, r27
    2c0a:	62 17       	cp	r22, r18
    2c0c:	73 07       	cpc	r23, r19
    2c0e:	84 07       	cpc	r24, r20
    2c10:	ba 07       	cpc	r27, r26
    2c12:	20 f0       	brcs	.+8      	; 0x2c1c <__divsf3_pse+0xaa>
    2c14:	62 1b       	sub	r22, r18
    2c16:	73 0b       	sbc	r23, r19
    2c18:	84 0b       	sbc	r24, r20
    2c1a:	ba 0b       	sbc	r27, r26
    2c1c:	ee 1f       	adc	r30, r30
    2c1e:	88 f7       	brcc	.-30     	; 0x2c02 <__divsf3_pse+0x90>
    2c20:	e0 95       	com	r30
    2c22:	08 95       	ret

00002c24 <__fixsfsi>:
    2c24:	04 d0       	rcall	.+8      	; 0x2c2e <__fixunssfsi>
    2c26:	68 94       	set
    2c28:	b1 11       	cpse	r27, r1
    2c2a:	b5 c0       	rjmp	.+362    	; 0x2d96 <__fp_szero>
    2c2c:	08 95       	ret

00002c2e <__fixunssfsi>:
    2c2e:	98 d0       	rcall	.+304    	; 0x2d60 <__fp_splitA>
    2c30:	88 f0       	brcs	.+34     	; 0x2c54 <__fixunssfsi+0x26>
    2c32:	9f 57       	subi	r25, 0x7F	; 127
    2c34:	90 f0       	brcs	.+36     	; 0x2c5a <__fixunssfsi+0x2c>
    2c36:	b9 2f       	mov	r27, r25
    2c38:	99 27       	eor	r25, r25
    2c3a:	b7 51       	subi	r27, 0x17	; 23
    2c3c:	a0 f0       	brcs	.+40     	; 0x2c66 <__fixunssfsi+0x38>
    2c3e:	d1 f0       	breq	.+52     	; 0x2c74 <__fixunssfsi+0x46>
    2c40:	66 0f       	add	r22, r22
    2c42:	77 1f       	adc	r23, r23
    2c44:	88 1f       	adc	r24, r24
    2c46:	99 1f       	adc	r25, r25
    2c48:	1a f0       	brmi	.+6      	; 0x2c50 <__fixunssfsi+0x22>
    2c4a:	ba 95       	dec	r27
    2c4c:	c9 f7       	brne	.-14     	; 0x2c40 <__fixunssfsi+0x12>
    2c4e:	12 c0       	rjmp	.+36     	; 0x2c74 <__fixunssfsi+0x46>
    2c50:	b1 30       	cpi	r27, 0x01	; 1
    2c52:	81 f0       	breq	.+32     	; 0x2c74 <__fixunssfsi+0x46>
    2c54:	9f d0       	rcall	.+318    	; 0x2d94 <__fp_zero>
    2c56:	b1 e0       	ldi	r27, 0x01	; 1
    2c58:	08 95       	ret
    2c5a:	9c c0       	rjmp	.+312    	; 0x2d94 <__fp_zero>
    2c5c:	67 2f       	mov	r22, r23
    2c5e:	78 2f       	mov	r23, r24
    2c60:	88 27       	eor	r24, r24
    2c62:	b8 5f       	subi	r27, 0xF8	; 248
    2c64:	39 f0       	breq	.+14     	; 0x2c74 <__fixunssfsi+0x46>
    2c66:	b9 3f       	cpi	r27, 0xF9	; 249
    2c68:	cc f3       	brlt	.-14     	; 0x2c5c <__fixunssfsi+0x2e>
    2c6a:	86 95       	lsr	r24
    2c6c:	77 95       	ror	r23
    2c6e:	67 95       	ror	r22
    2c70:	b3 95       	inc	r27
    2c72:	d9 f7       	brne	.-10     	; 0x2c6a <__fixunssfsi+0x3c>
    2c74:	3e f4       	brtc	.+14     	; 0x2c84 <__fixunssfsi+0x56>
    2c76:	90 95       	com	r25
    2c78:	80 95       	com	r24
    2c7a:	70 95       	com	r23
    2c7c:	61 95       	neg	r22
    2c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c80:	8f 4f       	sbci	r24, 0xFF	; 255
    2c82:	9f 4f       	sbci	r25, 0xFF	; 255
    2c84:	08 95       	ret

00002c86 <__floatunsisf>:
    2c86:	e8 94       	clt
    2c88:	09 c0       	rjmp	.+18     	; 0x2c9c <__floatsisf+0x12>

00002c8a <__floatsisf>:
    2c8a:	97 fb       	bst	r25, 7
    2c8c:	3e f4       	brtc	.+14     	; 0x2c9c <__floatsisf+0x12>
    2c8e:	90 95       	com	r25
    2c90:	80 95       	com	r24
    2c92:	70 95       	com	r23
    2c94:	61 95       	neg	r22
    2c96:	7f 4f       	sbci	r23, 0xFF	; 255
    2c98:	8f 4f       	sbci	r24, 0xFF	; 255
    2c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c9c:	99 23       	and	r25, r25
    2c9e:	a9 f0       	breq	.+42     	; 0x2cca <__floatsisf+0x40>
    2ca0:	f9 2f       	mov	r31, r25
    2ca2:	96 e9       	ldi	r25, 0x96	; 150
    2ca4:	bb 27       	eor	r27, r27
    2ca6:	93 95       	inc	r25
    2ca8:	f6 95       	lsr	r31
    2caa:	87 95       	ror	r24
    2cac:	77 95       	ror	r23
    2cae:	67 95       	ror	r22
    2cb0:	b7 95       	ror	r27
    2cb2:	f1 11       	cpse	r31, r1
    2cb4:	f8 cf       	rjmp	.-16     	; 0x2ca6 <__floatsisf+0x1c>
    2cb6:	fa f4       	brpl	.+62     	; 0x2cf6 <__floatsisf+0x6c>
    2cb8:	bb 0f       	add	r27, r27
    2cba:	11 f4       	brne	.+4      	; 0x2cc0 <__floatsisf+0x36>
    2cbc:	60 ff       	sbrs	r22, 0
    2cbe:	1b c0       	rjmp	.+54     	; 0x2cf6 <__floatsisf+0x6c>
    2cc0:	6f 5f       	subi	r22, 0xFF	; 255
    2cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2cc4:	8f 4f       	sbci	r24, 0xFF	; 255
    2cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc8:	16 c0       	rjmp	.+44     	; 0x2cf6 <__floatsisf+0x6c>
    2cca:	88 23       	and	r24, r24
    2ccc:	11 f0       	breq	.+4      	; 0x2cd2 <__floatsisf+0x48>
    2cce:	96 e9       	ldi	r25, 0x96	; 150
    2cd0:	11 c0       	rjmp	.+34     	; 0x2cf4 <__floatsisf+0x6a>
    2cd2:	77 23       	and	r23, r23
    2cd4:	21 f0       	breq	.+8      	; 0x2cde <__floatsisf+0x54>
    2cd6:	9e e8       	ldi	r25, 0x8E	; 142
    2cd8:	87 2f       	mov	r24, r23
    2cda:	76 2f       	mov	r23, r22
    2cdc:	05 c0       	rjmp	.+10     	; 0x2ce8 <__floatsisf+0x5e>
    2cde:	66 23       	and	r22, r22
    2ce0:	71 f0       	breq	.+28     	; 0x2cfe <__floatsisf+0x74>
    2ce2:	96 e8       	ldi	r25, 0x86	; 134
    2ce4:	86 2f       	mov	r24, r22
    2ce6:	70 e0       	ldi	r23, 0x00	; 0
    2ce8:	60 e0       	ldi	r22, 0x00	; 0
    2cea:	2a f0       	brmi	.+10     	; 0x2cf6 <__floatsisf+0x6c>
    2cec:	9a 95       	dec	r25
    2cee:	66 0f       	add	r22, r22
    2cf0:	77 1f       	adc	r23, r23
    2cf2:	88 1f       	adc	r24, r24
    2cf4:	da f7       	brpl	.-10     	; 0x2cec <__floatsisf+0x62>
    2cf6:	88 0f       	add	r24, r24
    2cf8:	96 95       	lsr	r25
    2cfa:	87 95       	ror	r24
    2cfc:	97 f9       	bld	r25, 7
    2cfe:	08 95       	ret

00002d00 <__fp_inf>:
    2d00:	97 f9       	bld	r25, 7
    2d02:	9f 67       	ori	r25, 0x7F	; 127
    2d04:	80 e8       	ldi	r24, 0x80	; 128
    2d06:	70 e0       	ldi	r23, 0x00	; 0
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	08 95       	ret

00002d0c <__fp_nan>:
    2d0c:	9f ef       	ldi	r25, 0xFF	; 255
    2d0e:	80 ec       	ldi	r24, 0xC0	; 192
    2d10:	08 95       	ret

00002d12 <__fp_pscA>:
    2d12:	00 24       	eor	r0, r0
    2d14:	0a 94       	dec	r0
    2d16:	16 16       	cp	r1, r22
    2d18:	17 06       	cpc	r1, r23
    2d1a:	18 06       	cpc	r1, r24
    2d1c:	09 06       	cpc	r0, r25
    2d1e:	08 95       	ret

00002d20 <__fp_pscB>:
    2d20:	00 24       	eor	r0, r0
    2d22:	0a 94       	dec	r0
    2d24:	12 16       	cp	r1, r18
    2d26:	13 06       	cpc	r1, r19
    2d28:	14 06       	cpc	r1, r20
    2d2a:	05 06       	cpc	r0, r21
    2d2c:	08 95       	ret

00002d2e <__fp_round>:
    2d2e:	09 2e       	mov	r0, r25
    2d30:	03 94       	inc	r0
    2d32:	00 0c       	add	r0, r0
    2d34:	11 f4       	brne	.+4      	; 0x2d3a <__fp_round+0xc>
    2d36:	88 23       	and	r24, r24
    2d38:	52 f0       	brmi	.+20     	; 0x2d4e <__fp_round+0x20>
    2d3a:	bb 0f       	add	r27, r27
    2d3c:	40 f4       	brcc	.+16     	; 0x2d4e <__fp_round+0x20>
    2d3e:	bf 2b       	or	r27, r31
    2d40:	11 f4       	brne	.+4      	; 0x2d46 <__fp_round+0x18>
    2d42:	60 ff       	sbrs	r22, 0
    2d44:	04 c0       	rjmp	.+8      	; 0x2d4e <__fp_round+0x20>
    2d46:	6f 5f       	subi	r22, 0xFF	; 255
    2d48:	7f 4f       	sbci	r23, 0xFF	; 255
    2d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4e:	08 95       	ret

00002d50 <__fp_split3>:
    2d50:	57 fd       	sbrc	r21, 7
    2d52:	90 58       	subi	r25, 0x80	; 128
    2d54:	44 0f       	add	r20, r20
    2d56:	55 1f       	adc	r21, r21
    2d58:	59 f0       	breq	.+22     	; 0x2d70 <__fp_splitA+0x10>
    2d5a:	5f 3f       	cpi	r21, 0xFF	; 255
    2d5c:	71 f0       	breq	.+28     	; 0x2d7a <__fp_splitA+0x1a>
    2d5e:	47 95       	ror	r20

00002d60 <__fp_splitA>:
    2d60:	88 0f       	add	r24, r24
    2d62:	97 fb       	bst	r25, 7
    2d64:	99 1f       	adc	r25, r25
    2d66:	61 f0       	breq	.+24     	; 0x2d80 <__fp_splitA+0x20>
    2d68:	9f 3f       	cpi	r25, 0xFF	; 255
    2d6a:	79 f0       	breq	.+30     	; 0x2d8a <__fp_splitA+0x2a>
    2d6c:	87 95       	ror	r24
    2d6e:	08 95       	ret
    2d70:	12 16       	cp	r1, r18
    2d72:	13 06       	cpc	r1, r19
    2d74:	14 06       	cpc	r1, r20
    2d76:	55 1f       	adc	r21, r21
    2d78:	f2 cf       	rjmp	.-28     	; 0x2d5e <__fp_split3+0xe>
    2d7a:	46 95       	lsr	r20
    2d7c:	f1 df       	rcall	.-30     	; 0x2d60 <__fp_splitA>
    2d7e:	08 c0       	rjmp	.+16     	; 0x2d90 <__fp_splitA+0x30>
    2d80:	16 16       	cp	r1, r22
    2d82:	17 06       	cpc	r1, r23
    2d84:	18 06       	cpc	r1, r24
    2d86:	99 1f       	adc	r25, r25
    2d88:	f1 cf       	rjmp	.-30     	; 0x2d6c <__fp_splitA+0xc>
    2d8a:	86 95       	lsr	r24
    2d8c:	71 05       	cpc	r23, r1
    2d8e:	61 05       	cpc	r22, r1
    2d90:	08 94       	sec
    2d92:	08 95       	ret

00002d94 <__fp_zero>:
    2d94:	e8 94       	clt

00002d96 <__fp_szero>:
    2d96:	bb 27       	eor	r27, r27
    2d98:	66 27       	eor	r22, r22
    2d9a:	77 27       	eor	r23, r23
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	97 f9       	bld	r25, 7
    2da0:	08 95       	ret
    2da2:	0e f0       	brts	.+2      	; 0x2da6 <__fp_szero+0x10>
    2da4:	a6 c0       	rjmp	.+332    	; 0x2ef2 <__fp_mpack>
    2da6:	b2 cf       	rjmp	.-156    	; 0x2d0c <__fp_nan>
    2da8:	68 94       	set
    2daa:	aa cf       	rjmp	.-172    	; 0x2d00 <__fp_inf>

00002dac <log>:
    2dac:	d9 df       	rcall	.-78     	; 0x2d60 <__fp_splitA>
    2dae:	c8 f3       	brcs	.-14     	; 0x2da2 <__fp_szero+0xc>
    2db0:	99 23       	and	r25, r25
    2db2:	d1 f3       	breq	.-12     	; 0x2da8 <__fp_szero+0x12>
    2db4:	c6 f3       	brts	.-16     	; 0x2da6 <__fp_szero+0x10>
    2db6:	df 93       	push	r29
    2db8:	cf 93       	push	r28
    2dba:	1f 93       	push	r17
    2dbc:	0f 93       	push	r16
    2dbe:	ff 92       	push	r15
    2dc0:	c9 2f       	mov	r28, r25
    2dc2:	dd 27       	eor	r29, r29
    2dc4:	88 23       	and	r24, r24
    2dc6:	2a f0       	brmi	.+10     	; 0x2dd2 <log+0x26>
    2dc8:	21 97       	sbiw	r28, 0x01	; 1
    2dca:	66 0f       	add	r22, r22
    2dcc:	77 1f       	adc	r23, r23
    2dce:	88 1f       	adc	r24, r24
    2dd0:	da f7       	brpl	.-10     	; 0x2dc8 <log+0x1c>
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	40 e8       	ldi	r20, 0x80	; 128
    2dd8:	5f eb       	ldi	r21, 0xBF	; 191
    2dda:	9f e3       	ldi	r25, 0x3F	; 63
    2ddc:	88 39       	cpi	r24, 0x98	; 152
    2dde:	20 f0       	brcs	.+8      	; 0x2de8 <log+0x3c>
    2de0:	80 3e       	cpi	r24, 0xE0	; 224
    2de2:	30 f0       	brcs	.+12     	; 0x2df0 <log+0x44>
    2de4:	21 96       	adiw	r28, 0x01	; 1
    2de6:	8f 77       	andi	r24, 0x7F	; 127
    2de8:	51 de       	rcall	.-862    	; 0x2a8c <__addsf3>
    2dea:	ec ef       	ldi	r30, 0xFC	; 252
    2dec:	f1 e0       	ldi	r31, 0x01	; 1
    2dee:	03 c0       	rjmp	.+6      	; 0x2df6 <log+0x4a>
    2df0:	4d de       	rcall	.-870    	; 0x2a8c <__addsf3>
    2df2:	e9 e2       	ldi	r30, 0x29	; 41
    2df4:	f2 e0       	ldi	r31, 0x02	; 2
    2df6:	8b d0       	rcall	.+278    	; 0x2f0e <__fp_powser>
    2df8:	8b 01       	movw	r16, r22
    2dfa:	be 01       	movw	r22, r28
    2dfc:	ec 01       	movw	r28, r24
    2dfe:	fb 2e       	mov	r15, r27
    2e00:	6f 57       	subi	r22, 0x7F	; 127
    2e02:	71 09       	sbc	r23, r1
    2e04:	75 95       	asr	r23
    2e06:	77 1f       	adc	r23, r23
    2e08:	88 0b       	sbc	r24, r24
    2e0a:	99 0b       	sbc	r25, r25
    2e0c:	3e df       	rcall	.-388    	; 0x2c8a <__floatsisf>
    2e0e:	28 e1       	ldi	r18, 0x18	; 24
    2e10:	32 e7       	ldi	r19, 0x72	; 114
    2e12:	41 e3       	ldi	r20, 0x31	; 49
    2e14:	5f e3       	ldi	r21, 0x3F	; 63
    2e16:	16 d0       	rcall	.+44     	; 0x2e44 <__mulsf3x>
    2e18:	af 2d       	mov	r26, r15
    2e1a:	98 01       	movw	r18, r16
    2e1c:	ae 01       	movw	r20, r28
    2e1e:	ff 90       	pop	r15
    2e20:	0f 91       	pop	r16
    2e22:	1f 91       	pop	r17
    2e24:	cf 91       	pop	r28
    2e26:	df 91       	pop	r29
    2e28:	42 de       	rcall	.-892    	; 0x2aae <__addsf3x>
    2e2a:	81 cf       	rjmp	.-254    	; 0x2d2e <__fp_round>

00002e2c <__mulsf3>:
    2e2c:	0b d0       	rcall	.+22     	; 0x2e44 <__mulsf3x>
    2e2e:	7f cf       	rjmp	.-258    	; 0x2d2e <__fp_round>
    2e30:	70 df       	rcall	.-288    	; 0x2d12 <__fp_pscA>
    2e32:	28 f0       	brcs	.+10     	; 0x2e3e <__mulsf3+0x12>
    2e34:	75 df       	rcall	.-278    	; 0x2d20 <__fp_pscB>
    2e36:	18 f0       	brcs	.+6      	; 0x2e3e <__mulsf3+0x12>
    2e38:	95 23       	and	r25, r21
    2e3a:	09 f0       	breq	.+2      	; 0x2e3e <__mulsf3+0x12>
    2e3c:	61 cf       	rjmp	.-318    	; 0x2d00 <__fp_inf>
    2e3e:	66 cf       	rjmp	.-308    	; 0x2d0c <__fp_nan>
    2e40:	11 24       	eor	r1, r1
    2e42:	a9 cf       	rjmp	.-174    	; 0x2d96 <__fp_szero>

00002e44 <__mulsf3x>:
    2e44:	85 df       	rcall	.-246    	; 0x2d50 <__fp_split3>
    2e46:	a0 f3       	brcs	.-24     	; 0x2e30 <__mulsf3+0x4>

00002e48 <__mulsf3_pse>:
    2e48:	95 9f       	mul	r25, r21
    2e4a:	d1 f3       	breq	.-12     	; 0x2e40 <__mulsf3+0x14>
    2e4c:	95 0f       	add	r25, r21
    2e4e:	50 e0       	ldi	r21, 0x00	; 0
    2e50:	55 1f       	adc	r21, r21
    2e52:	62 9f       	mul	r22, r18
    2e54:	f0 01       	movw	r30, r0
    2e56:	72 9f       	mul	r23, r18
    2e58:	bb 27       	eor	r27, r27
    2e5a:	f0 0d       	add	r31, r0
    2e5c:	b1 1d       	adc	r27, r1
    2e5e:	63 9f       	mul	r22, r19
    2e60:	aa 27       	eor	r26, r26
    2e62:	f0 0d       	add	r31, r0
    2e64:	b1 1d       	adc	r27, r1
    2e66:	aa 1f       	adc	r26, r26
    2e68:	64 9f       	mul	r22, r20
    2e6a:	66 27       	eor	r22, r22
    2e6c:	b0 0d       	add	r27, r0
    2e6e:	a1 1d       	adc	r26, r1
    2e70:	66 1f       	adc	r22, r22
    2e72:	82 9f       	mul	r24, r18
    2e74:	22 27       	eor	r18, r18
    2e76:	b0 0d       	add	r27, r0
    2e78:	a1 1d       	adc	r26, r1
    2e7a:	62 1f       	adc	r22, r18
    2e7c:	73 9f       	mul	r23, r19
    2e7e:	b0 0d       	add	r27, r0
    2e80:	a1 1d       	adc	r26, r1
    2e82:	62 1f       	adc	r22, r18
    2e84:	83 9f       	mul	r24, r19
    2e86:	a0 0d       	add	r26, r0
    2e88:	61 1d       	adc	r22, r1
    2e8a:	22 1f       	adc	r18, r18
    2e8c:	74 9f       	mul	r23, r20
    2e8e:	33 27       	eor	r19, r19
    2e90:	a0 0d       	add	r26, r0
    2e92:	61 1d       	adc	r22, r1
    2e94:	23 1f       	adc	r18, r19
    2e96:	84 9f       	mul	r24, r20
    2e98:	60 0d       	add	r22, r0
    2e9a:	21 1d       	adc	r18, r1
    2e9c:	82 2f       	mov	r24, r18
    2e9e:	76 2f       	mov	r23, r22
    2ea0:	6a 2f       	mov	r22, r26
    2ea2:	11 24       	eor	r1, r1
    2ea4:	9f 57       	subi	r25, 0x7F	; 127
    2ea6:	50 40       	sbci	r21, 0x00	; 0
    2ea8:	8a f0       	brmi	.+34     	; 0x2ecc <__mulsf3_pse+0x84>
    2eaa:	e1 f0       	breq	.+56     	; 0x2ee4 <__mulsf3_pse+0x9c>
    2eac:	88 23       	and	r24, r24
    2eae:	4a f0       	brmi	.+18     	; 0x2ec2 <__mulsf3_pse+0x7a>
    2eb0:	ee 0f       	add	r30, r30
    2eb2:	ff 1f       	adc	r31, r31
    2eb4:	bb 1f       	adc	r27, r27
    2eb6:	66 1f       	adc	r22, r22
    2eb8:	77 1f       	adc	r23, r23
    2eba:	88 1f       	adc	r24, r24
    2ebc:	91 50       	subi	r25, 0x01	; 1
    2ebe:	50 40       	sbci	r21, 0x00	; 0
    2ec0:	a9 f7       	brne	.-22     	; 0x2eac <__mulsf3_pse+0x64>
    2ec2:	9e 3f       	cpi	r25, 0xFE	; 254
    2ec4:	51 05       	cpc	r21, r1
    2ec6:	70 f0       	brcs	.+28     	; 0x2ee4 <__mulsf3_pse+0x9c>
    2ec8:	1b cf       	rjmp	.-458    	; 0x2d00 <__fp_inf>
    2eca:	65 cf       	rjmp	.-310    	; 0x2d96 <__fp_szero>
    2ecc:	5f 3f       	cpi	r21, 0xFF	; 255
    2ece:	ec f3       	brlt	.-6      	; 0x2eca <__mulsf3_pse+0x82>
    2ed0:	98 3e       	cpi	r25, 0xE8	; 232
    2ed2:	dc f3       	brlt	.-10     	; 0x2eca <__mulsf3_pse+0x82>
    2ed4:	86 95       	lsr	r24
    2ed6:	77 95       	ror	r23
    2ed8:	67 95       	ror	r22
    2eda:	b7 95       	ror	r27
    2edc:	f7 95       	ror	r31
    2ede:	e7 95       	ror	r30
    2ee0:	9f 5f       	subi	r25, 0xFF	; 255
    2ee2:	c1 f7       	brne	.-16     	; 0x2ed4 <__mulsf3_pse+0x8c>
    2ee4:	fe 2b       	or	r31, r30
    2ee6:	88 0f       	add	r24, r24
    2ee8:	91 1d       	adc	r25, r1
    2eea:	96 95       	lsr	r25
    2eec:	87 95       	ror	r24
    2eee:	97 f9       	bld	r25, 7
    2ef0:	08 95       	ret

00002ef2 <__fp_mpack>:
    2ef2:	9f 3f       	cpi	r25, 0xFF	; 255
    2ef4:	31 f0       	breq	.+12     	; 0x2f02 <__fp_mpack_finite+0xc>

00002ef6 <__fp_mpack_finite>:
    2ef6:	91 50       	subi	r25, 0x01	; 1
    2ef8:	20 f4       	brcc	.+8      	; 0x2f02 <__fp_mpack_finite+0xc>
    2efa:	87 95       	ror	r24
    2efc:	77 95       	ror	r23
    2efe:	67 95       	ror	r22
    2f00:	b7 95       	ror	r27
    2f02:	88 0f       	add	r24, r24
    2f04:	91 1d       	adc	r25, r1
    2f06:	96 95       	lsr	r25
    2f08:	87 95       	ror	r24
    2f0a:	97 f9       	bld	r25, 7
    2f0c:	08 95       	ret

00002f0e <__fp_powser>:
    2f0e:	df 93       	push	r29
    2f10:	cf 93       	push	r28
    2f12:	1f 93       	push	r17
    2f14:	0f 93       	push	r16
    2f16:	ff 92       	push	r15
    2f18:	ef 92       	push	r14
    2f1a:	df 92       	push	r13
    2f1c:	7b 01       	movw	r14, r22
    2f1e:	8c 01       	movw	r16, r24
    2f20:	68 94       	set
    2f22:	05 c0       	rjmp	.+10     	; 0x2f2e <__fp_powser+0x20>
    2f24:	da 2e       	mov	r13, r26
    2f26:	ef 01       	movw	r28, r30
    2f28:	8d df       	rcall	.-230    	; 0x2e44 <__mulsf3x>
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	e8 94       	clt
    2f2e:	a5 91       	lpm	r26, Z+
    2f30:	25 91       	lpm	r18, Z+
    2f32:	35 91       	lpm	r19, Z+
    2f34:	45 91       	lpm	r20, Z+
    2f36:	55 91       	lpm	r21, Z+
    2f38:	ae f3       	brts	.-22     	; 0x2f24 <__fp_powser+0x16>
    2f3a:	ef 01       	movw	r28, r30
    2f3c:	b8 dd       	rcall	.-1168   	; 0x2aae <__addsf3x>
    2f3e:	fe 01       	movw	r30, r28
    2f40:	97 01       	movw	r18, r14
    2f42:	a8 01       	movw	r20, r16
    2f44:	da 94       	dec	r13
    2f46:	79 f7       	brne	.-34     	; 0x2f26 <__fp_powser+0x18>
    2f48:	df 90       	pop	r13
    2f4a:	ef 90       	pop	r14
    2f4c:	ff 90       	pop	r15
    2f4e:	0f 91       	pop	r16
    2f50:	1f 91       	pop	r17
    2f52:	cf 91       	pop	r28
    2f54:	df 91       	pop	r29
    2f56:	08 95       	ret

00002f58 <vfprintf>:
    2f58:	2f 92       	push	r2
    2f5a:	3f 92       	push	r3
    2f5c:	4f 92       	push	r4
    2f5e:	5f 92       	push	r5
    2f60:	6f 92       	push	r6
    2f62:	7f 92       	push	r7
    2f64:	8f 92       	push	r8
    2f66:	9f 92       	push	r9
    2f68:	af 92       	push	r10
    2f6a:	bf 92       	push	r11
    2f6c:	cf 92       	push	r12
    2f6e:	df 92       	push	r13
    2f70:	ef 92       	push	r14
    2f72:	ff 92       	push	r15
    2f74:	0f 93       	push	r16
    2f76:	1f 93       	push	r17
    2f78:	cf 93       	push	r28
    2f7a:	df 93       	push	r29
    2f7c:	cd b7       	in	r28, 0x3d	; 61
    2f7e:	de b7       	in	r29, 0x3e	; 62
    2f80:	60 97       	sbiw	r28, 0x10	; 16
    2f82:	cd bf       	out	0x3d, r28	; 61
    2f84:	de bf       	out	0x3e, r29	; 62
    2f86:	7c 01       	movw	r14, r24
    2f88:	1b 01       	movw	r2, r22
    2f8a:	6a 01       	movw	r12, r20
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	16 82       	std	Z+6, r1	; 0x06
    2f90:	17 82       	std	Z+7, r1	; 0x07
    2f92:	83 81       	ldd	r24, Z+3	; 0x03
    2f94:	81 ff       	sbrs	r24, 1
    2f96:	2a c3       	rjmp	.+1620   	; 0x35ec <vfprintf+0x694>
    2f98:	9e 01       	movw	r18, r28
    2f9a:	2f 5f       	subi	r18, 0xFF	; 255
    2f9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f9e:	39 01       	movw	r6, r18
    2fa0:	f7 01       	movw	r30, r14
    2fa2:	93 81       	ldd	r25, Z+3	; 0x03
    2fa4:	f1 01       	movw	r30, r2
    2fa6:	93 fd       	sbrc	r25, 3
    2fa8:	85 91       	lpm	r24, Z+
    2faa:	93 ff       	sbrs	r25, 3
    2fac:	81 91       	ld	r24, Z+
    2fae:	1f 01       	movw	r2, r30
    2fb0:	88 23       	and	r24, r24
    2fb2:	09 f4       	brne	.+2      	; 0x2fb6 <vfprintf+0x5e>
    2fb4:	17 c3       	rjmp	.+1582   	; 0x35e4 <vfprintf+0x68c>
    2fb6:	85 32       	cpi	r24, 0x25	; 37
    2fb8:	39 f4       	brne	.+14     	; 0x2fc8 <vfprintf+0x70>
    2fba:	93 fd       	sbrc	r25, 3
    2fbc:	85 91       	lpm	r24, Z+
    2fbe:	93 ff       	sbrs	r25, 3
    2fc0:	81 91       	ld	r24, Z+
    2fc2:	1f 01       	movw	r2, r30
    2fc4:	85 32       	cpi	r24, 0x25	; 37
    2fc6:	31 f4       	brne	.+12     	; 0x2fd4 <vfprintf+0x7c>
    2fc8:	b7 01       	movw	r22, r14
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	7d d5       	rcall	.+2810   	; 0x3ac8 <fputc>
    2fce:	56 01       	movw	r10, r12
    2fd0:	65 01       	movw	r12, r10
    2fd2:	e6 cf       	rjmp	.-52     	; 0x2fa0 <vfprintf+0x48>
    2fd4:	10 e0       	ldi	r17, 0x00	; 0
    2fd6:	51 2c       	mov	r5, r1
    2fd8:	91 2c       	mov	r9, r1
    2fda:	ff e1       	ldi	r31, 0x1F	; 31
    2fdc:	f9 15       	cp	r31, r9
    2fde:	d8 f0       	brcs	.+54     	; 0x3016 <vfprintf+0xbe>
    2fe0:	8b 32       	cpi	r24, 0x2B	; 43
    2fe2:	79 f0       	breq	.+30     	; 0x3002 <vfprintf+0xaa>
    2fe4:	38 f4       	brcc	.+14     	; 0x2ff4 <vfprintf+0x9c>
    2fe6:	80 32       	cpi	r24, 0x20	; 32
    2fe8:	79 f0       	breq	.+30     	; 0x3008 <vfprintf+0xb0>
    2fea:	83 32       	cpi	r24, 0x23	; 35
    2fec:	a1 f4       	brne	.+40     	; 0x3016 <vfprintf+0xbe>
    2fee:	f9 2d       	mov	r31, r9
    2ff0:	f0 61       	ori	r31, 0x10	; 16
    2ff2:	2e c0       	rjmp	.+92     	; 0x3050 <vfprintf+0xf8>
    2ff4:	8d 32       	cpi	r24, 0x2D	; 45
    2ff6:	61 f0       	breq	.+24     	; 0x3010 <vfprintf+0xb8>
    2ff8:	80 33       	cpi	r24, 0x30	; 48
    2ffa:	69 f4       	brne	.+26     	; 0x3016 <vfprintf+0xbe>
    2ffc:	29 2d       	mov	r18, r9
    2ffe:	21 60       	ori	r18, 0x01	; 1
    3000:	2d c0       	rjmp	.+90     	; 0x305c <vfprintf+0x104>
    3002:	39 2d       	mov	r19, r9
    3004:	32 60       	ori	r19, 0x02	; 2
    3006:	93 2e       	mov	r9, r19
    3008:	89 2d       	mov	r24, r9
    300a:	84 60       	ori	r24, 0x04	; 4
    300c:	98 2e       	mov	r9, r24
    300e:	2a c0       	rjmp	.+84     	; 0x3064 <vfprintf+0x10c>
    3010:	e9 2d       	mov	r30, r9
    3012:	e8 60       	ori	r30, 0x08	; 8
    3014:	15 c0       	rjmp	.+42     	; 0x3040 <vfprintf+0xe8>
    3016:	97 fc       	sbrc	r9, 7
    3018:	2d c0       	rjmp	.+90     	; 0x3074 <vfprintf+0x11c>
    301a:	20 ed       	ldi	r18, 0xD0	; 208
    301c:	28 0f       	add	r18, r24
    301e:	2a 30       	cpi	r18, 0x0A	; 10
    3020:	88 f4       	brcc	.+34     	; 0x3044 <vfprintf+0xec>
    3022:	96 fe       	sbrs	r9, 6
    3024:	06 c0       	rjmp	.+12     	; 0x3032 <vfprintf+0xda>
    3026:	3a e0       	ldi	r19, 0x0A	; 10
    3028:	13 9f       	mul	r17, r19
    302a:	20 0d       	add	r18, r0
    302c:	11 24       	eor	r1, r1
    302e:	12 2f       	mov	r17, r18
    3030:	19 c0       	rjmp	.+50     	; 0x3064 <vfprintf+0x10c>
    3032:	8a e0       	ldi	r24, 0x0A	; 10
    3034:	58 9e       	mul	r5, r24
    3036:	20 0d       	add	r18, r0
    3038:	11 24       	eor	r1, r1
    303a:	52 2e       	mov	r5, r18
    303c:	e9 2d       	mov	r30, r9
    303e:	e0 62       	ori	r30, 0x20	; 32
    3040:	9e 2e       	mov	r9, r30
    3042:	10 c0       	rjmp	.+32     	; 0x3064 <vfprintf+0x10c>
    3044:	8e 32       	cpi	r24, 0x2E	; 46
    3046:	31 f4       	brne	.+12     	; 0x3054 <vfprintf+0xfc>
    3048:	96 fc       	sbrc	r9, 6
    304a:	cc c2       	rjmp	.+1432   	; 0x35e4 <vfprintf+0x68c>
    304c:	f9 2d       	mov	r31, r9
    304e:	f0 64       	ori	r31, 0x40	; 64
    3050:	9f 2e       	mov	r9, r31
    3052:	08 c0       	rjmp	.+16     	; 0x3064 <vfprintf+0x10c>
    3054:	8c 36       	cpi	r24, 0x6C	; 108
    3056:	21 f4       	brne	.+8      	; 0x3060 <vfprintf+0x108>
    3058:	29 2d       	mov	r18, r9
    305a:	20 68       	ori	r18, 0x80	; 128
    305c:	92 2e       	mov	r9, r18
    305e:	02 c0       	rjmp	.+4      	; 0x3064 <vfprintf+0x10c>
    3060:	88 36       	cpi	r24, 0x68	; 104
    3062:	41 f4       	brne	.+16     	; 0x3074 <vfprintf+0x11c>
    3064:	f1 01       	movw	r30, r2
    3066:	93 fd       	sbrc	r25, 3
    3068:	85 91       	lpm	r24, Z+
    306a:	93 ff       	sbrs	r25, 3
    306c:	81 91       	ld	r24, Z+
    306e:	1f 01       	movw	r2, r30
    3070:	81 11       	cpse	r24, r1
    3072:	b3 cf       	rjmp	.-154    	; 0x2fda <vfprintf+0x82>
    3074:	9b eb       	ldi	r25, 0xBB	; 187
    3076:	98 0f       	add	r25, r24
    3078:	93 30       	cpi	r25, 0x03	; 3
    307a:	20 f4       	brcc	.+8      	; 0x3084 <vfprintf+0x12c>
    307c:	99 2d       	mov	r25, r9
    307e:	90 61       	ori	r25, 0x10	; 16
    3080:	80 5e       	subi	r24, 0xE0	; 224
    3082:	07 c0       	rjmp	.+14     	; 0x3092 <vfprintf+0x13a>
    3084:	9b e9       	ldi	r25, 0x9B	; 155
    3086:	98 0f       	add	r25, r24
    3088:	93 30       	cpi	r25, 0x03	; 3
    308a:	08 f0       	brcs	.+2      	; 0x308e <vfprintf+0x136>
    308c:	59 c1       	rjmp	.+690    	; 0x3340 <vfprintf+0x3e8>
    308e:	99 2d       	mov	r25, r9
    3090:	9f 7e       	andi	r25, 0xEF	; 239
    3092:	96 ff       	sbrs	r25, 6
    3094:	16 e0       	ldi	r17, 0x06	; 6
    3096:	9f 73       	andi	r25, 0x3F	; 63
    3098:	99 2e       	mov	r9, r25
    309a:	85 36       	cpi	r24, 0x65	; 101
    309c:	19 f4       	brne	.+6      	; 0x30a4 <vfprintf+0x14c>
    309e:	90 64       	ori	r25, 0x40	; 64
    30a0:	99 2e       	mov	r9, r25
    30a2:	08 c0       	rjmp	.+16     	; 0x30b4 <vfprintf+0x15c>
    30a4:	86 36       	cpi	r24, 0x66	; 102
    30a6:	21 f4       	brne	.+8      	; 0x30b0 <vfprintf+0x158>
    30a8:	39 2f       	mov	r19, r25
    30aa:	30 68       	ori	r19, 0x80	; 128
    30ac:	93 2e       	mov	r9, r19
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <vfprintf+0x15c>
    30b0:	11 11       	cpse	r17, r1
    30b2:	11 50       	subi	r17, 0x01	; 1
    30b4:	97 fe       	sbrs	r9, 7
    30b6:	07 c0       	rjmp	.+14     	; 0x30c6 <vfprintf+0x16e>
    30b8:	1c 33       	cpi	r17, 0x3C	; 60
    30ba:	50 f4       	brcc	.+20     	; 0x30d0 <vfprintf+0x178>
    30bc:	44 24       	eor	r4, r4
    30be:	43 94       	inc	r4
    30c0:	41 0e       	add	r4, r17
    30c2:	27 e0       	ldi	r18, 0x07	; 7
    30c4:	0b c0       	rjmp	.+22     	; 0x30dc <vfprintf+0x184>
    30c6:	18 30       	cpi	r17, 0x08	; 8
    30c8:	38 f0       	brcs	.+14     	; 0x30d8 <vfprintf+0x180>
    30ca:	27 e0       	ldi	r18, 0x07	; 7
    30cc:	17 e0       	ldi	r17, 0x07	; 7
    30ce:	05 c0       	rjmp	.+10     	; 0x30da <vfprintf+0x182>
    30d0:	27 e0       	ldi	r18, 0x07	; 7
    30d2:	9c e3       	ldi	r25, 0x3C	; 60
    30d4:	49 2e       	mov	r4, r25
    30d6:	02 c0       	rjmp	.+4      	; 0x30dc <vfprintf+0x184>
    30d8:	21 2f       	mov	r18, r17
    30da:	41 2c       	mov	r4, r1
    30dc:	56 01       	movw	r10, r12
    30de:	84 e0       	ldi	r24, 0x04	; 4
    30e0:	a8 0e       	add	r10, r24
    30e2:	b1 1c       	adc	r11, r1
    30e4:	f6 01       	movw	r30, r12
    30e6:	60 81       	ld	r22, Z
    30e8:	71 81       	ldd	r23, Z+1	; 0x01
    30ea:	82 81       	ldd	r24, Z+2	; 0x02
    30ec:	93 81       	ldd	r25, Z+3	; 0x03
    30ee:	04 2d       	mov	r16, r4
    30f0:	a3 01       	movw	r20, r6
    30f2:	b2 d3       	rcall	.+1892   	; 0x3858 <__ftoa_engine>
    30f4:	6c 01       	movw	r12, r24
    30f6:	f9 81       	ldd	r31, Y+1	; 0x01
    30f8:	fc 87       	std	Y+12, r31	; 0x0c
    30fa:	f0 ff       	sbrs	r31, 0
    30fc:	02 c0       	rjmp	.+4      	; 0x3102 <vfprintf+0x1aa>
    30fe:	f3 ff       	sbrs	r31, 3
    3100:	06 c0       	rjmp	.+12     	; 0x310e <vfprintf+0x1b6>
    3102:	91 fc       	sbrc	r9, 1
    3104:	06 c0       	rjmp	.+12     	; 0x3112 <vfprintf+0x1ba>
    3106:	92 fe       	sbrs	r9, 2
    3108:	06 c0       	rjmp	.+12     	; 0x3116 <vfprintf+0x1be>
    310a:	00 e2       	ldi	r16, 0x20	; 32
    310c:	05 c0       	rjmp	.+10     	; 0x3118 <vfprintf+0x1c0>
    310e:	0d e2       	ldi	r16, 0x2D	; 45
    3110:	03 c0       	rjmp	.+6      	; 0x3118 <vfprintf+0x1c0>
    3112:	0b e2       	ldi	r16, 0x2B	; 43
    3114:	01 c0       	rjmp	.+2      	; 0x3118 <vfprintf+0x1c0>
    3116:	00 e0       	ldi	r16, 0x00	; 0
    3118:	8c 85       	ldd	r24, Y+12	; 0x0c
    311a:	8c 70       	andi	r24, 0x0C	; 12
    311c:	19 f0       	breq	.+6      	; 0x3124 <vfprintf+0x1cc>
    311e:	01 11       	cpse	r16, r1
    3120:	43 c2       	rjmp	.+1158   	; 0x35a8 <vfprintf+0x650>
    3122:	80 c2       	rjmp	.+1280   	; 0x3624 <vfprintf+0x6cc>
    3124:	97 fe       	sbrs	r9, 7
    3126:	10 c0       	rjmp	.+32     	; 0x3148 <vfprintf+0x1f0>
    3128:	4c 0c       	add	r4, r12
    312a:	fc 85       	ldd	r31, Y+12	; 0x0c
    312c:	f4 ff       	sbrs	r31, 4
    312e:	04 c0       	rjmp	.+8      	; 0x3138 <vfprintf+0x1e0>
    3130:	8a 81       	ldd	r24, Y+2	; 0x02
    3132:	81 33       	cpi	r24, 0x31	; 49
    3134:	09 f4       	brne	.+2      	; 0x3138 <vfprintf+0x1e0>
    3136:	4a 94       	dec	r4
    3138:	14 14       	cp	r1, r4
    313a:	74 f5       	brge	.+92     	; 0x3198 <vfprintf+0x240>
    313c:	28 e0       	ldi	r18, 0x08	; 8
    313e:	24 15       	cp	r18, r4
    3140:	78 f5       	brcc	.+94     	; 0x31a0 <vfprintf+0x248>
    3142:	88 e0       	ldi	r24, 0x08	; 8
    3144:	48 2e       	mov	r4, r24
    3146:	2c c0       	rjmp	.+88     	; 0x31a0 <vfprintf+0x248>
    3148:	96 fc       	sbrc	r9, 6
    314a:	2a c0       	rjmp	.+84     	; 0x31a0 <vfprintf+0x248>
    314c:	81 2f       	mov	r24, r17
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	8c 15       	cp	r24, r12
    3152:	9d 05       	cpc	r25, r13
    3154:	9c f0       	brlt	.+38     	; 0x317c <vfprintf+0x224>
    3156:	3c ef       	ldi	r19, 0xFC	; 252
    3158:	c3 16       	cp	r12, r19
    315a:	3f ef       	ldi	r19, 0xFF	; 255
    315c:	d3 06       	cpc	r13, r19
    315e:	74 f0       	brlt	.+28     	; 0x317c <vfprintf+0x224>
    3160:	89 2d       	mov	r24, r9
    3162:	80 68       	ori	r24, 0x80	; 128
    3164:	98 2e       	mov	r9, r24
    3166:	0a c0       	rjmp	.+20     	; 0x317c <vfprintf+0x224>
    3168:	e2 e0       	ldi	r30, 0x02	; 2
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	ec 0f       	add	r30, r28
    316e:	fd 1f       	adc	r31, r29
    3170:	e1 0f       	add	r30, r17
    3172:	f1 1d       	adc	r31, r1
    3174:	80 81       	ld	r24, Z
    3176:	80 33       	cpi	r24, 0x30	; 48
    3178:	19 f4       	brne	.+6      	; 0x3180 <vfprintf+0x228>
    317a:	11 50       	subi	r17, 0x01	; 1
    317c:	11 11       	cpse	r17, r1
    317e:	f4 cf       	rjmp	.-24     	; 0x3168 <vfprintf+0x210>
    3180:	97 fe       	sbrs	r9, 7
    3182:	0e c0       	rjmp	.+28     	; 0x31a0 <vfprintf+0x248>
    3184:	44 24       	eor	r4, r4
    3186:	43 94       	inc	r4
    3188:	41 0e       	add	r4, r17
    318a:	81 2f       	mov	r24, r17
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	c8 16       	cp	r12, r24
    3190:	d9 06       	cpc	r13, r25
    3192:	2c f4       	brge	.+10     	; 0x319e <vfprintf+0x246>
    3194:	1c 19       	sub	r17, r12
    3196:	04 c0       	rjmp	.+8      	; 0x31a0 <vfprintf+0x248>
    3198:	44 24       	eor	r4, r4
    319a:	43 94       	inc	r4
    319c:	01 c0       	rjmp	.+2      	; 0x31a0 <vfprintf+0x248>
    319e:	10 e0       	ldi	r17, 0x00	; 0
    31a0:	97 fe       	sbrs	r9, 7
    31a2:	06 c0       	rjmp	.+12     	; 0x31b0 <vfprintf+0x258>
    31a4:	1c 14       	cp	r1, r12
    31a6:	1d 04       	cpc	r1, r13
    31a8:	34 f4       	brge	.+12     	; 0x31b6 <vfprintf+0x25e>
    31aa:	c6 01       	movw	r24, r12
    31ac:	01 96       	adiw	r24, 0x01	; 1
    31ae:	05 c0       	rjmp	.+10     	; 0x31ba <vfprintf+0x262>
    31b0:	85 e0       	ldi	r24, 0x05	; 5
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	02 c0       	rjmp	.+4      	; 0x31ba <vfprintf+0x262>
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	01 11       	cpse	r16, r1
    31bc:	01 96       	adiw	r24, 0x01	; 1
    31be:	11 23       	and	r17, r17
    31c0:	31 f0       	breq	.+12     	; 0x31ce <vfprintf+0x276>
    31c2:	21 2f       	mov	r18, r17
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	2f 5f       	subi	r18, 0xFF	; 255
    31c8:	3f 4f       	sbci	r19, 0xFF	; 255
    31ca:	82 0f       	add	r24, r18
    31cc:	93 1f       	adc	r25, r19
    31ce:	25 2d       	mov	r18, r5
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	82 17       	cp	r24, r18
    31d4:	93 07       	cpc	r25, r19
    31d6:	14 f4       	brge	.+4      	; 0x31dc <vfprintf+0x284>
    31d8:	58 1a       	sub	r5, r24
    31da:	01 c0       	rjmp	.+2      	; 0x31de <vfprintf+0x286>
    31dc:	51 2c       	mov	r5, r1
    31de:	89 2d       	mov	r24, r9
    31e0:	89 70       	andi	r24, 0x09	; 9
    31e2:	41 f4       	brne	.+16     	; 0x31f4 <vfprintf+0x29c>
    31e4:	55 20       	and	r5, r5
    31e6:	31 f0       	breq	.+12     	; 0x31f4 <vfprintf+0x29c>
    31e8:	b7 01       	movw	r22, r14
    31ea:	80 e2       	ldi	r24, 0x20	; 32
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	6c d4       	rcall	.+2264   	; 0x3ac8 <fputc>
    31f0:	5a 94       	dec	r5
    31f2:	f8 cf       	rjmp	.-16     	; 0x31e4 <vfprintf+0x28c>
    31f4:	00 23       	and	r16, r16
    31f6:	21 f0       	breq	.+8      	; 0x3200 <vfprintf+0x2a8>
    31f8:	b7 01       	movw	r22, r14
    31fa:	80 2f       	mov	r24, r16
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	64 d4       	rcall	.+2248   	; 0x3ac8 <fputc>
    3200:	93 fc       	sbrc	r9, 3
    3202:	08 c0       	rjmp	.+16     	; 0x3214 <vfprintf+0x2bc>
    3204:	55 20       	and	r5, r5
    3206:	31 f0       	breq	.+12     	; 0x3214 <vfprintf+0x2bc>
    3208:	b7 01       	movw	r22, r14
    320a:	80 e3       	ldi	r24, 0x30	; 48
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	5c d4       	rcall	.+2232   	; 0x3ac8 <fputc>
    3210:	5a 94       	dec	r5
    3212:	f8 cf       	rjmp	.-16     	; 0x3204 <vfprintf+0x2ac>
    3214:	97 fe       	sbrs	r9, 7
    3216:	4a c0       	rjmp	.+148    	; 0x32ac <vfprintf+0x354>
    3218:	46 01       	movw	r8, r12
    321a:	d7 fe       	sbrs	r13, 7
    321c:	02 c0       	rjmp	.+4      	; 0x3222 <vfprintf+0x2ca>
    321e:	81 2c       	mov	r8, r1
    3220:	91 2c       	mov	r9, r1
    3222:	c6 01       	movw	r24, r12
    3224:	88 19       	sub	r24, r8
    3226:	99 09       	sbc	r25, r9
    3228:	f3 01       	movw	r30, r6
    322a:	e8 0f       	add	r30, r24
    322c:	f9 1f       	adc	r31, r25
    322e:	ed 87       	std	Y+13, r30	; 0x0d
    3230:	fe 87       	std	Y+14, r31	; 0x0e
    3232:	96 01       	movw	r18, r12
    3234:	24 19       	sub	r18, r4
    3236:	31 09       	sbc	r19, r1
    3238:	2f 87       	std	Y+15, r18	; 0x0f
    323a:	38 8b       	std	Y+16, r19	; 0x10
    323c:	01 2f       	mov	r16, r17
    323e:	10 e0       	ldi	r17, 0x00	; 0
    3240:	11 95       	neg	r17
    3242:	01 95       	neg	r16
    3244:	11 09       	sbc	r17, r1
    3246:	3f ef       	ldi	r19, 0xFF	; 255
    3248:	83 16       	cp	r8, r19
    324a:	93 06       	cpc	r9, r19
    324c:	21 f4       	brne	.+8      	; 0x3256 <vfprintf+0x2fe>
    324e:	b7 01       	movw	r22, r14
    3250:	8e e2       	ldi	r24, 0x2E	; 46
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	39 d4       	rcall	.+2162   	; 0x3ac8 <fputc>
    3256:	c8 14       	cp	r12, r8
    3258:	d9 04       	cpc	r13, r9
    325a:	4c f0       	brlt	.+18     	; 0x326e <vfprintf+0x316>
    325c:	8f 85       	ldd	r24, Y+15	; 0x0f
    325e:	98 89       	ldd	r25, Y+16	; 0x10
    3260:	88 15       	cp	r24, r8
    3262:	99 05       	cpc	r25, r9
    3264:	24 f4       	brge	.+8      	; 0x326e <vfprintf+0x316>
    3266:	ed 85       	ldd	r30, Y+13	; 0x0d
    3268:	fe 85       	ldd	r31, Y+14	; 0x0e
    326a:	81 81       	ldd	r24, Z+1	; 0x01
    326c:	01 c0       	rjmp	.+2      	; 0x3270 <vfprintf+0x318>
    326e:	80 e3       	ldi	r24, 0x30	; 48
    3270:	f1 e0       	ldi	r31, 0x01	; 1
    3272:	8f 1a       	sub	r8, r31
    3274:	91 08       	sbc	r9, r1
    3276:	2d 85       	ldd	r18, Y+13	; 0x0d
    3278:	3e 85       	ldd	r19, Y+14	; 0x0e
    327a:	2f 5f       	subi	r18, 0xFF	; 255
    327c:	3f 4f       	sbci	r19, 0xFF	; 255
    327e:	2d 87       	std	Y+13, r18	; 0x0d
    3280:	3e 87       	std	Y+14, r19	; 0x0e
    3282:	80 16       	cp	r8, r16
    3284:	91 06       	cpc	r9, r17
    3286:	24 f0       	brlt	.+8      	; 0x3290 <vfprintf+0x338>
    3288:	b7 01       	movw	r22, r14
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	1d d4       	rcall	.+2106   	; 0x3ac8 <fputc>
    328e:	db cf       	rjmp	.-74     	; 0x3246 <vfprintf+0x2ee>
    3290:	c8 14       	cp	r12, r8
    3292:	d9 04       	cpc	r13, r9
    3294:	41 f4       	brne	.+16     	; 0x32a6 <vfprintf+0x34e>
    3296:	9a 81       	ldd	r25, Y+2	; 0x02
    3298:	96 33       	cpi	r25, 0x36	; 54
    329a:	20 f4       	brcc	.+8      	; 0x32a4 <vfprintf+0x34c>
    329c:	95 33       	cpi	r25, 0x35	; 53
    329e:	19 f4       	brne	.+6      	; 0x32a6 <vfprintf+0x34e>
    32a0:	3c 85       	ldd	r19, Y+12	; 0x0c
    32a2:	34 ff       	sbrs	r19, 4
    32a4:	81 e3       	ldi	r24, 0x31	; 49
    32a6:	b7 01       	movw	r22, r14
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	48 c0       	rjmp	.+144    	; 0x333c <vfprintf+0x3e4>
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	81 33       	cpi	r24, 0x31	; 49
    32b0:	19 f0       	breq	.+6      	; 0x32b8 <vfprintf+0x360>
    32b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    32b4:	9f 7e       	andi	r25, 0xEF	; 239
    32b6:	9c 87       	std	Y+12, r25	; 0x0c
    32b8:	b7 01       	movw	r22, r14
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	05 d4       	rcall	.+2058   	; 0x3ac8 <fputc>
    32be:	11 11       	cpse	r17, r1
    32c0:	05 c0       	rjmp	.+10     	; 0x32cc <vfprintf+0x374>
    32c2:	94 fc       	sbrc	r9, 4
    32c4:	16 c0       	rjmp	.+44     	; 0x32f2 <vfprintf+0x39a>
    32c6:	85 e6       	ldi	r24, 0x65	; 101
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	15 c0       	rjmp	.+42     	; 0x32f6 <vfprintf+0x39e>
    32cc:	b7 01       	movw	r22, r14
    32ce:	8e e2       	ldi	r24, 0x2E	; 46
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	fa d3       	rcall	.+2036   	; 0x3ac8 <fputc>
    32d4:	1e 5f       	subi	r17, 0xFE	; 254
    32d6:	82 e0       	ldi	r24, 0x02	; 2
    32d8:	01 e0       	ldi	r16, 0x01	; 1
    32da:	08 0f       	add	r16, r24
    32dc:	f3 01       	movw	r30, r6
    32de:	e8 0f       	add	r30, r24
    32e0:	f1 1d       	adc	r31, r1
    32e2:	80 81       	ld	r24, Z
    32e4:	b7 01       	movw	r22, r14
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	ef d3       	rcall	.+2014   	; 0x3ac8 <fputc>
    32ea:	80 2f       	mov	r24, r16
    32ec:	01 13       	cpse	r16, r17
    32ee:	f4 cf       	rjmp	.-24     	; 0x32d8 <vfprintf+0x380>
    32f0:	e8 cf       	rjmp	.-48     	; 0x32c2 <vfprintf+0x36a>
    32f2:	85 e4       	ldi	r24, 0x45	; 69
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	b7 01       	movw	r22, r14
    32f8:	e7 d3       	rcall	.+1998   	; 0x3ac8 <fputc>
    32fa:	d7 fc       	sbrc	r13, 7
    32fc:	06 c0       	rjmp	.+12     	; 0x330a <vfprintf+0x3b2>
    32fe:	c1 14       	cp	r12, r1
    3300:	d1 04       	cpc	r13, r1
    3302:	41 f4       	brne	.+16     	; 0x3314 <vfprintf+0x3bc>
    3304:	ec 85       	ldd	r30, Y+12	; 0x0c
    3306:	e4 ff       	sbrs	r30, 4
    3308:	05 c0       	rjmp	.+10     	; 0x3314 <vfprintf+0x3bc>
    330a:	d1 94       	neg	r13
    330c:	c1 94       	neg	r12
    330e:	d1 08       	sbc	r13, r1
    3310:	8d e2       	ldi	r24, 0x2D	; 45
    3312:	01 c0       	rjmp	.+2      	; 0x3316 <vfprintf+0x3be>
    3314:	8b e2       	ldi	r24, 0x2B	; 43
    3316:	b7 01       	movw	r22, r14
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	d6 d3       	rcall	.+1964   	; 0x3ac8 <fputc>
    331c:	80 e3       	ldi	r24, 0x30	; 48
    331e:	2a e0       	ldi	r18, 0x0A	; 10
    3320:	c2 16       	cp	r12, r18
    3322:	d1 04       	cpc	r13, r1
    3324:	2c f0       	brlt	.+10     	; 0x3330 <vfprintf+0x3d8>
    3326:	8f 5f       	subi	r24, 0xFF	; 255
    3328:	fa e0       	ldi	r31, 0x0A	; 10
    332a:	cf 1a       	sub	r12, r31
    332c:	d1 08       	sbc	r13, r1
    332e:	f7 cf       	rjmp	.-18     	; 0x331e <vfprintf+0x3c6>
    3330:	b7 01       	movw	r22, r14
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	c9 d3       	rcall	.+1938   	; 0x3ac8 <fputc>
    3336:	b7 01       	movw	r22, r14
    3338:	c6 01       	movw	r24, r12
    333a:	c0 96       	adiw	r24, 0x30	; 48
    333c:	c5 d3       	rcall	.+1930   	; 0x3ac8 <fputc>
    333e:	49 c1       	rjmp	.+658    	; 0x35d2 <vfprintf+0x67a>
    3340:	83 36       	cpi	r24, 0x63	; 99
    3342:	31 f0       	breq	.+12     	; 0x3350 <vfprintf+0x3f8>
    3344:	83 37       	cpi	r24, 0x73	; 115
    3346:	79 f0       	breq	.+30     	; 0x3366 <vfprintf+0x40e>
    3348:	83 35       	cpi	r24, 0x53	; 83
    334a:	09 f0       	breq	.+2      	; 0x334e <vfprintf+0x3f6>
    334c:	52 c0       	rjmp	.+164    	; 0x33f2 <vfprintf+0x49a>
    334e:	1f c0       	rjmp	.+62     	; 0x338e <vfprintf+0x436>
    3350:	56 01       	movw	r10, r12
    3352:	32 e0       	ldi	r19, 0x02	; 2
    3354:	a3 0e       	add	r10, r19
    3356:	b1 1c       	adc	r11, r1
    3358:	f6 01       	movw	r30, r12
    335a:	80 81       	ld	r24, Z
    335c:	89 83       	std	Y+1, r24	; 0x01
    335e:	01 e0       	ldi	r16, 0x01	; 1
    3360:	10 e0       	ldi	r17, 0x00	; 0
    3362:	63 01       	movw	r12, r6
    3364:	11 c0       	rjmp	.+34     	; 0x3388 <vfprintf+0x430>
    3366:	56 01       	movw	r10, r12
    3368:	f2 e0       	ldi	r31, 0x02	; 2
    336a:	af 0e       	add	r10, r31
    336c:	b1 1c       	adc	r11, r1
    336e:	f6 01       	movw	r30, r12
    3370:	c0 80       	ld	r12, Z
    3372:	d1 80       	ldd	r13, Z+1	; 0x01
    3374:	96 fe       	sbrs	r9, 6
    3376:	03 c0       	rjmp	.+6      	; 0x337e <vfprintf+0x426>
    3378:	61 2f       	mov	r22, r17
    337a:	70 e0       	ldi	r23, 0x00	; 0
    337c:	02 c0       	rjmp	.+4      	; 0x3382 <vfprintf+0x42a>
    337e:	6f ef       	ldi	r22, 0xFF	; 255
    3380:	7f ef       	ldi	r23, 0xFF	; 255
    3382:	c6 01       	movw	r24, r12
    3384:	4c d3       	rcall	.+1688   	; 0x3a1e <strnlen>
    3386:	8c 01       	movw	r16, r24
    3388:	f9 2d       	mov	r31, r9
    338a:	ff 77       	andi	r31, 0x7F	; 127
    338c:	13 c0       	rjmp	.+38     	; 0x33b4 <vfprintf+0x45c>
    338e:	56 01       	movw	r10, r12
    3390:	22 e0       	ldi	r18, 0x02	; 2
    3392:	a2 0e       	add	r10, r18
    3394:	b1 1c       	adc	r11, r1
    3396:	f6 01       	movw	r30, r12
    3398:	c0 80       	ld	r12, Z
    339a:	d1 80       	ldd	r13, Z+1	; 0x01
    339c:	96 fe       	sbrs	r9, 6
    339e:	03 c0       	rjmp	.+6      	; 0x33a6 <vfprintf+0x44e>
    33a0:	61 2f       	mov	r22, r17
    33a2:	70 e0       	ldi	r23, 0x00	; 0
    33a4:	02 c0       	rjmp	.+4      	; 0x33aa <vfprintf+0x452>
    33a6:	6f ef       	ldi	r22, 0xFF	; 255
    33a8:	7f ef       	ldi	r23, 0xFF	; 255
    33aa:	c6 01       	movw	r24, r12
    33ac:	2d d3       	rcall	.+1626   	; 0x3a08 <strnlen_P>
    33ae:	8c 01       	movw	r16, r24
    33b0:	f9 2d       	mov	r31, r9
    33b2:	f0 68       	ori	r31, 0x80	; 128
    33b4:	9f 2e       	mov	r9, r31
    33b6:	f3 fd       	sbrc	r31, 3
    33b8:	18 c0       	rjmp	.+48     	; 0x33ea <vfprintf+0x492>
    33ba:	85 2d       	mov	r24, r5
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	08 17       	cp	r16, r24
    33c0:	19 07       	cpc	r17, r25
    33c2:	98 f4       	brcc	.+38     	; 0x33ea <vfprintf+0x492>
    33c4:	b7 01       	movw	r22, r14
    33c6:	80 e2       	ldi	r24, 0x20	; 32
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	7e d3       	rcall	.+1788   	; 0x3ac8 <fputc>
    33cc:	5a 94       	dec	r5
    33ce:	f5 cf       	rjmp	.-22     	; 0x33ba <vfprintf+0x462>
    33d0:	f6 01       	movw	r30, r12
    33d2:	97 fc       	sbrc	r9, 7
    33d4:	85 91       	lpm	r24, Z+
    33d6:	97 fe       	sbrs	r9, 7
    33d8:	81 91       	ld	r24, Z+
    33da:	6f 01       	movw	r12, r30
    33dc:	b7 01       	movw	r22, r14
    33de:	90 e0       	ldi	r25, 0x00	; 0
    33e0:	73 d3       	rcall	.+1766   	; 0x3ac8 <fputc>
    33e2:	51 10       	cpse	r5, r1
    33e4:	5a 94       	dec	r5
    33e6:	01 50       	subi	r16, 0x01	; 1
    33e8:	11 09       	sbc	r17, r1
    33ea:	01 15       	cp	r16, r1
    33ec:	11 05       	cpc	r17, r1
    33ee:	81 f7       	brne	.-32     	; 0x33d0 <vfprintf+0x478>
    33f0:	f0 c0       	rjmp	.+480    	; 0x35d2 <vfprintf+0x67a>
    33f2:	84 36       	cpi	r24, 0x64	; 100
    33f4:	11 f0       	breq	.+4      	; 0x33fa <vfprintf+0x4a2>
    33f6:	89 36       	cpi	r24, 0x69	; 105
    33f8:	59 f5       	brne	.+86     	; 0x3450 <vfprintf+0x4f8>
    33fa:	56 01       	movw	r10, r12
    33fc:	97 fe       	sbrs	r9, 7
    33fe:	09 c0       	rjmp	.+18     	; 0x3412 <vfprintf+0x4ba>
    3400:	24 e0       	ldi	r18, 0x04	; 4
    3402:	a2 0e       	add	r10, r18
    3404:	b1 1c       	adc	r11, r1
    3406:	f6 01       	movw	r30, r12
    3408:	60 81       	ld	r22, Z
    340a:	71 81       	ldd	r23, Z+1	; 0x01
    340c:	82 81       	ldd	r24, Z+2	; 0x02
    340e:	93 81       	ldd	r25, Z+3	; 0x03
    3410:	0a c0       	rjmp	.+20     	; 0x3426 <vfprintf+0x4ce>
    3412:	f2 e0       	ldi	r31, 0x02	; 2
    3414:	af 0e       	add	r10, r31
    3416:	b1 1c       	adc	r11, r1
    3418:	f6 01       	movw	r30, r12
    341a:	60 81       	ld	r22, Z
    341c:	71 81       	ldd	r23, Z+1	; 0x01
    341e:	07 2e       	mov	r0, r23
    3420:	00 0c       	add	r0, r0
    3422:	88 0b       	sbc	r24, r24
    3424:	99 0b       	sbc	r25, r25
    3426:	f9 2d       	mov	r31, r9
    3428:	ff 76       	andi	r31, 0x6F	; 111
    342a:	9f 2e       	mov	r9, r31
    342c:	97 ff       	sbrs	r25, 7
    342e:	09 c0       	rjmp	.+18     	; 0x3442 <vfprintf+0x4ea>
    3430:	90 95       	com	r25
    3432:	80 95       	com	r24
    3434:	70 95       	com	r23
    3436:	61 95       	neg	r22
    3438:	7f 4f       	sbci	r23, 0xFF	; 255
    343a:	8f 4f       	sbci	r24, 0xFF	; 255
    343c:	9f 4f       	sbci	r25, 0xFF	; 255
    343e:	f0 68       	ori	r31, 0x80	; 128
    3440:	9f 2e       	mov	r9, r31
    3442:	2a e0       	ldi	r18, 0x0A	; 10
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	a3 01       	movw	r20, r6
    3448:	be d3       	rcall	.+1916   	; 0x3bc6 <__ultoa_invert>
    344a:	c8 2e       	mov	r12, r24
    344c:	c6 18       	sub	r12, r6
    344e:	3e c0       	rjmp	.+124    	; 0x34cc <vfprintf+0x574>
    3450:	09 2d       	mov	r16, r9
    3452:	85 37       	cpi	r24, 0x75	; 117
    3454:	21 f4       	brne	.+8      	; 0x345e <vfprintf+0x506>
    3456:	0f 7e       	andi	r16, 0xEF	; 239
    3458:	2a e0       	ldi	r18, 0x0A	; 10
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	1d c0       	rjmp	.+58     	; 0x3498 <vfprintf+0x540>
    345e:	09 7f       	andi	r16, 0xF9	; 249
    3460:	8f 36       	cpi	r24, 0x6F	; 111
    3462:	91 f0       	breq	.+36     	; 0x3488 <vfprintf+0x530>
    3464:	18 f4       	brcc	.+6      	; 0x346c <vfprintf+0x514>
    3466:	88 35       	cpi	r24, 0x58	; 88
    3468:	59 f0       	breq	.+22     	; 0x3480 <vfprintf+0x528>
    346a:	bc c0       	rjmp	.+376    	; 0x35e4 <vfprintf+0x68c>
    346c:	80 37       	cpi	r24, 0x70	; 112
    346e:	19 f0       	breq	.+6      	; 0x3476 <vfprintf+0x51e>
    3470:	88 37       	cpi	r24, 0x78	; 120
    3472:	11 f0       	breq	.+4      	; 0x3478 <vfprintf+0x520>
    3474:	b7 c0       	rjmp	.+366    	; 0x35e4 <vfprintf+0x68c>
    3476:	00 61       	ori	r16, 0x10	; 16
    3478:	04 ff       	sbrs	r16, 4
    347a:	09 c0       	rjmp	.+18     	; 0x348e <vfprintf+0x536>
    347c:	04 60       	ori	r16, 0x04	; 4
    347e:	07 c0       	rjmp	.+14     	; 0x348e <vfprintf+0x536>
    3480:	94 fe       	sbrs	r9, 4
    3482:	08 c0       	rjmp	.+16     	; 0x3494 <vfprintf+0x53c>
    3484:	06 60       	ori	r16, 0x06	; 6
    3486:	06 c0       	rjmp	.+12     	; 0x3494 <vfprintf+0x53c>
    3488:	28 e0       	ldi	r18, 0x08	; 8
    348a:	30 e0       	ldi	r19, 0x00	; 0
    348c:	05 c0       	rjmp	.+10     	; 0x3498 <vfprintf+0x540>
    348e:	20 e1       	ldi	r18, 0x10	; 16
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	02 c0       	rjmp	.+4      	; 0x3498 <vfprintf+0x540>
    3494:	20 e1       	ldi	r18, 0x10	; 16
    3496:	32 e0       	ldi	r19, 0x02	; 2
    3498:	56 01       	movw	r10, r12
    349a:	07 ff       	sbrs	r16, 7
    349c:	09 c0       	rjmp	.+18     	; 0x34b0 <vfprintf+0x558>
    349e:	84 e0       	ldi	r24, 0x04	; 4
    34a0:	a8 0e       	add	r10, r24
    34a2:	b1 1c       	adc	r11, r1
    34a4:	f6 01       	movw	r30, r12
    34a6:	60 81       	ld	r22, Z
    34a8:	71 81       	ldd	r23, Z+1	; 0x01
    34aa:	82 81       	ldd	r24, Z+2	; 0x02
    34ac:	93 81       	ldd	r25, Z+3	; 0x03
    34ae:	08 c0       	rjmp	.+16     	; 0x34c0 <vfprintf+0x568>
    34b0:	f2 e0       	ldi	r31, 0x02	; 2
    34b2:	af 0e       	add	r10, r31
    34b4:	b1 1c       	adc	r11, r1
    34b6:	f6 01       	movw	r30, r12
    34b8:	60 81       	ld	r22, Z
    34ba:	71 81       	ldd	r23, Z+1	; 0x01
    34bc:	80 e0       	ldi	r24, 0x00	; 0
    34be:	90 e0       	ldi	r25, 0x00	; 0
    34c0:	a3 01       	movw	r20, r6
    34c2:	81 d3       	rcall	.+1794   	; 0x3bc6 <__ultoa_invert>
    34c4:	c8 2e       	mov	r12, r24
    34c6:	c6 18       	sub	r12, r6
    34c8:	0f 77       	andi	r16, 0x7F	; 127
    34ca:	90 2e       	mov	r9, r16
    34cc:	96 fe       	sbrs	r9, 6
    34ce:	0b c0       	rjmp	.+22     	; 0x34e6 <vfprintf+0x58e>
    34d0:	09 2d       	mov	r16, r9
    34d2:	0e 7f       	andi	r16, 0xFE	; 254
    34d4:	c1 16       	cp	r12, r17
    34d6:	50 f4       	brcc	.+20     	; 0x34ec <vfprintf+0x594>
    34d8:	94 fe       	sbrs	r9, 4
    34da:	0a c0       	rjmp	.+20     	; 0x34f0 <vfprintf+0x598>
    34dc:	92 fc       	sbrc	r9, 2
    34de:	08 c0       	rjmp	.+16     	; 0x34f0 <vfprintf+0x598>
    34e0:	09 2d       	mov	r16, r9
    34e2:	0e 7e       	andi	r16, 0xEE	; 238
    34e4:	05 c0       	rjmp	.+10     	; 0x34f0 <vfprintf+0x598>
    34e6:	dc 2c       	mov	r13, r12
    34e8:	09 2d       	mov	r16, r9
    34ea:	03 c0       	rjmp	.+6      	; 0x34f2 <vfprintf+0x59a>
    34ec:	dc 2c       	mov	r13, r12
    34ee:	01 c0       	rjmp	.+2      	; 0x34f2 <vfprintf+0x59a>
    34f0:	d1 2e       	mov	r13, r17
    34f2:	04 ff       	sbrs	r16, 4
    34f4:	0d c0       	rjmp	.+26     	; 0x3510 <vfprintf+0x5b8>
    34f6:	fe 01       	movw	r30, r28
    34f8:	ec 0d       	add	r30, r12
    34fa:	f1 1d       	adc	r31, r1
    34fc:	80 81       	ld	r24, Z
    34fe:	80 33       	cpi	r24, 0x30	; 48
    3500:	11 f4       	brne	.+4      	; 0x3506 <vfprintf+0x5ae>
    3502:	09 7e       	andi	r16, 0xE9	; 233
    3504:	09 c0       	rjmp	.+18     	; 0x3518 <vfprintf+0x5c0>
    3506:	02 ff       	sbrs	r16, 2
    3508:	06 c0       	rjmp	.+12     	; 0x3516 <vfprintf+0x5be>
    350a:	d3 94       	inc	r13
    350c:	d3 94       	inc	r13
    350e:	04 c0       	rjmp	.+8      	; 0x3518 <vfprintf+0x5c0>
    3510:	80 2f       	mov	r24, r16
    3512:	86 78       	andi	r24, 0x86	; 134
    3514:	09 f0       	breq	.+2      	; 0x3518 <vfprintf+0x5c0>
    3516:	d3 94       	inc	r13
    3518:	03 fd       	sbrc	r16, 3
    351a:	10 c0       	rjmp	.+32     	; 0x353c <vfprintf+0x5e4>
    351c:	00 ff       	sbrs	r16, 0
    351e:	06 c0       	rjmp	.+12     	; 0x352c <vfprintf+0x5d4>
    3520:	1c 2d       	mov	r17, r12
    3522:	d5 14       	cp	r13, r5
    3524:	78 f4       	brcc	.+30     	; 0x3544 <vfprintf+0x5ec>
    3526:	15 0d       	add	r17, r5
    3528:	1d 19       	sub	r17, r13
    352a:	0c c0       	rjmp	.+24     	; 0x3544 <vfprintf+0x5ec>
    352c:	d5 14       	cp	r13, r5
    352e:	50 f4       	brcc	.+20     	; 0x3544 <vfprintf+0x5ec>
    3530:	b7 01       	movw	r22, r14
    3532:	80 e2       	ldi	r24, 0x20	; 32
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	c8 d2       	rcall	.+1424   	; 0x3ac8 <fputc>
    3538:	d3 94       	inc	r13
    353a:	f8 cf       	rjmp	.-16     	; 0x352c <vfprintf+0x5d4>
    353c:	d5 14       	cp	r13, r5
    353e:	10 f4       	brcc	.+4      	; 0x3544 <vfprintf+0x5ec>
    3540:	5d 18       	sub	r5, r13
    3542:	01 c0       	rjmp	.+2      	; 0x3546 <vfprintf+0x5ee>
    3544:	51 2c       	mov	r5, r1
    3546:	04 ff       	sbrs	r16, 4
    3548:	0f c0       	rjmp	.+30     	; 0x3568 <vfprintf+0x610>
    354a:	b7 01       	movw	r22, r14
    354c:	80 e3       	ldi	r24, 0x30	; 48
    354e:	90 e0       	ldi	r25, 0x00	; 0
    3550:	bb d2       	rcall	.+1398   	; 0x3ac8 <fputc>
    3552:	02 ff       	sbrs	r16, 2
    3554:	16 c0       	rjmp	.+44     	; 0x3582 <vfprintf+0x62a>
    3556:	01 fd       	sbrc	r16, 1
    3558:	03 c0       	rjmp	.+6      	; 0x3560 <vfprintf+0x608>
    355a:	88 e7       	ldi	r24, 0x78	; 120
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	02 c0       	rjmp	.+4      	; 0x3564 <vfprintf+0x60c>
    3560:	88 e5       	ldi	r24, 0x58	; 88
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	b7 01       	movw	r22, r14
    3566:	0c c0       	rjmp	.+24     	; 0x3580 <vfprintf+0x628>
    3568:	80 2f       	mov	r24, r16
    356a:	86 78       	andi	r24, 0x86	; 134
    356c:	51 f0       	breq	.+20     	; 0x3582 <vfprintf+0x62a>
    356e:	01 ff       	sbrs	r16, 1
    3570:	02 c0       	rjmp	.+4      	; 0x3576 <vfprintf+0x61e>
    3572:	8b e2       	ldi	r24, 0x2B	; 43
    3574:	01 c0       	rjmp	.+2      	; 0x3578 <vfprintf+0x620>
    3576:	80 e2       	ldi	r24, 0x20	; 32
    3578:	07 fd       	sbrc	r16, 7
    357a:	8d e2       	ldi	r24, 0x2D	; 45
    357c:	b7 01       	movw	r22, r14
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	a3 d2       	rcall	.+1350   	; 0x3ac8 <fputc>
    3582:	c1 16       	cp	r12, r17
    3584:	30 f4       	brcc	.+12     	; 0x3592 <vfprintf+0x63a>
    3586:	b7 01       	movw	r22, r14
    3588:	80 e3       	ldi	r24, 0x30	; 48
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	9d d2       	rcall	.+1338   	; 0x3ac8 <fputc>
    358e:	11 50       	subi	r17, 0x01	; 1
    3590:	f8 cf       	rjmp	.-16     	; 0x3582 <vfprintf+0x62a>
    3592:	ca 94       	dec	r12
    3594:	f3 01       	movw	r30, r6
    3596:	ec 0d       	add	r30, r12
    3598:	f1 1d       	adc	r31, r1
    359a:	80 81       	ld	r24, Z
    359c:	b7 01       	movw	r22, r14
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	93 d2       	rcall	.+1318   	; 0x3ac8 <fputc>
    35a2:	c1 10       	cpse	r12, r1
    35a4:	f6 cf       	rjmp	.-20     	; 0x3592 <vfprintf+0x63a>
    35a6:	15 c0       	rjmp	.+42     	; 0x35d2 <vfprintf+0x67a>
    35a8:	f4 e0       	ldi	r31, 0x04	; 4
    35aa:	f5 15       	cp	r31, r5
    35ac:	50 f5       	brcc	.+84     	; 0x3602 <vfprintf+0x6aa>
    35ae:	84 e0       	ldi	r24, 0x04	; 4
    35b0:	58 1a       	sub	r5, r24
    35b2:	93 fe       	sbrs	r9, 3
    35b4:	1e c0       	rjmp	.+60     	; 0x35f2 <vfprintf+0x69a>
    35b6:	01 11       	cpse	r16, r1
    35b8:	25 c0       	rjmp	.+74     	; 0x3604 <vfprintf+0x6ac>
    35ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    35bc:	23 ff       	sbrs	r18, 3
    35be:	27 c0       	rjmp	.+78     	; 0x360e <vfprintf+0x6b6>
    35c0:	06 e5       	ldi	r16, 0x56	; 86
    35c2:	12 e0       	ldi	r17, 0x02	; 2
    35c4:	39 2d       	mov	r19, r9
    35c6:	30 71       	andi	r19, 0x10	; 16
    35c8:	93 2e       	mov	r9, r19
    35ca:	f8 01       	movw	r30, r16
    35cc:	84 91       	lpm	r24, Z
    35ce:	81 11       	cpse	r24, r1
    35d0:	21 c0       	rjmp	.+66     	; 0x3614 <vfprintf+0x6bc>
    35d2:	55 20       	and	r5, r5
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <vfprintf+0x680>
    35d6:	fc cc       	rjmp	.-1544   	; 0x2fd0 <vfprintf+0x78>
    35d8:	b7 01       	movw	r22, r14
    35da:	80 e2       	ldi	r24, 0x20	; 32
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	74 d2       	rcall	.+1256   	; 0x3ac8 <fputc>
    35e0:	5a 94       	dec	r5
    35e2:	f7 cf       	rjmp	.-18     	; 0x35d2 <vfprintf+0x67a>
    35e4:	f7 01       	movw	r30, r14
    35e6:	86 81       	ldd	r24, Z+6	; 0x06
    35e8:	97 81       	ldd	r25, Z+7	; 0x07
    35ea:	23 c0       	rjmp	.+70     	; 0x3632 <vfprintf+0x6da>
    35ec:	8f ef       	ldi	r24, 0xFF	; 255
    35ee:	9f ef       	ldi	r25, 0xFF	; 255
    35f0:	20 c0       	rjmp	.+64     	; 0x3632 <vfprintf+0x6da>
    35f2:	b7 01       	movw	r22, r14
    35f4:	80 e2       	ldi	r24, 0x20	; 32
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	67 d2       	rcall	.+1230   	; 0x3ac8 <fputc>
    35fa:	5a 94       	dec	r5
    35fc:	51 10       	cpse	r5, r1
    35fe:	f9 cf       	rjmp	.-14     	; 0x35f2 <vfprintf+0x69a>
    3600:	da cf       	rjmp	.-76     	; 0x35b6 <vfprintf+0x65e>
    3602:	51 2c       	mov	r5, r1
    3604:	b7 01       	movw	r22, r14
    3606:	80 2f       	mov	r24, r16
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	5e d2       	rcall	.+1212   	; 0x3ac8 <fputc>
    360c:	d6 cf       	rjmp	.-84     	; 0x35ba <vfprintf+0x662>
    360e:	0a e5       	ldi	r16, 0x5A	; 90
    3610:	12 e0       	ldi	r17, 0x02	; 2
    3612:	d8 cf       	rjmp	.-80     	; 0x35c4 <vfprintf+0x66c>
    3614:	91 10       	cpse	r9, r1
    3616:	80 52       	subi	r24, 0x20	; 32
    3618:	b7 01       	movw	r22, r14
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	55 d2       	rcall	.+1194   	; 0x3ac8 <fputc>
    361e:	0f 5f       	subi	r16, 0xFF	; 255
    3620:	1f 4f       	sbci	r17, 0xFF	; 255
    3622:	d3 cf       	rjmp	.-90     	; 0x35ca <vfprintf+0x672>
    3624:	23 e0       	ldi	r18, 0x03	; 3
    3626:	25 15       	cp	r18, r5
    3628:	10 f4       	brcc	.+4      	; 0x362e <vfprintf+0x6d6>
    362a:	83 e0       	ldi	r24, 0x03	; 3
    362c:	c1 cf       	rjmp	.-126    	; 0x35b0 <vfprintf+0x658>
    362e:	51 2c       	mov	r5, r1
    3630:	c4 cf       	rjmp	.-120    	; 0x35ba <vfprintf+0x662>
    3632:	60 96       	adiw	r28, 0x10	; 16
    3634:	cd bf       	out	0x3d, r28	; 61
    3636:	de bf       	out	0x3e, r29	; 62
    3638:	df 91       	pop	r29
    363a:	cf 91       	pop	r28
    363c:	1f 91       	pop	r17
    363e:	0f 91       	pop	r16
    3640:	ff 90       	pop	r15
    3642:	ef 90       	pop	r14
    3644:	df 90       	pop	r13
    3646:	cf 90       	pop	r12
    3648:	bf 90       	pop	r11
    364a:	af 90       	pop	r10
    364c:	9f 90       	pop	r9
    364e:	8f 90       	pop	r8
    3650:	7f 90       	pop	r7
    3652:	6f 90       	pop	r6
    3654:	5f 90       	pop	r5
    3656:	4f 90       	pop	r4
    3658:	3f 90       	pop	r3
    365a:	2f 90       	pop	r2
    365c:	08 95       	ret

0000365e <__udivmodsi4>:
    365e:	a1 e2       	ldi	r26, 0x21	; 33
    3660:	1a 2e       	mov	r1, r26
    3662:	aa 1b       	sub	r26, r26
    3664:	bb 1b       	sub	r27, r27
    3666:	fd 01       	movw	r30, r26
    3668:	0d c0       	rjmp	.+26     	; 0x3684 <__udivmodsi4_ep>

0000366a <__udivmodsi4_loop>:
    366a:	aa 1f       	adc	r26, r26
    366c:	bb 1f       	adc	r27, r27
    366e:	ee 1f       	adc	r30, r30
    3670:	ff 1f       	adc	r31, r31
    3672:	a2 17       	cp	r26, r18
    3674:	b3 07       	cpc	r27, r19
    3676:	e4 07       	cpc	r30, r20
    3678:	f5 07       	cpc	r31, r21
    367a:	20 f0       	brcs	.+8      	; 0x3684 <__udivmodsi4_ep>
    367c:	a2 1b       	sub	r26, r18
    367e:	b3 0b       	sbc	r27, r19
    3680:	e4 0b       	sbc	r30, r20
    3682:	f5 0b       	sbc	r31, r21

00003684 <__udivmodsi4_ep>:
    3684:	66 1f       	adc	r22, r22
    3686:	77 1f       	adc	r23, r23
    3688:	88 1f       	adc	r24, r24
    368a:	99 1f       	adc	r25, r25
    368c:	1a 94       	dec	r1
    368e:	69 f7       	brne	.-38     	; 0x366a <__udivmodsi4_loop>
    3690:	60 95       	com	r22
    3692:	70 95       	com	r23
    3694:	80 95       	com	r24
    3696:	90 95       	com	r25
    3698:	9b 01       	movw	r18, r22
    369a:	ac 01       	movw	r20, r24
    369c:	bd 01       	movw	r22, r26
    369e:	cf 01       	movw	r24, r30
    36a0:	08 95       	ret

000036a2 <__divmodsi4>:
    36a2:	05 2e       	mov	r0, r21
    36a4:	97 fb       	bst	r25, 7
    36a6:	16 f4       	brtc	.+4      	; 0x36ac <__divmodsi4+0xa>
    36a8:	00 94       	com	r0
    36aa:	0f d0       	rcall	.+30     	; 0x36ca <__negsi2>
    36ac:	57 fd       	sbrc	r21, 7
    36ae:	05 d0       	rcall	.+10     	; 0x36ba <__divmodsi4_neg2>
    36b0:	d6 df       	rcall	.-84     	; 0x365e <__udivmodsi4>
    36b2:	07 fc       	sbrc	r0, 7
    36b4:	02 d0       	rcall	.+4      	; 0x36ba <__divmodsi4_neg2>
    36b6:	46 f4       	brtc	.+16     	; 0x36c8 <__divmodsi4_exit>
    36b8:	08 c0       	rjmp	.+16     	; 0x36ca <__negsi2>

000036ba <__divmodsi4_neg2>:
    36ba:	50 95       	com	r21
    36bc:	40 95       	com	r20
    36be:	30 95       	com	r19
    36c0:	21 95       	neg	r18
    36c2:	3f 4f       	sbci	r19, 0xFF	; 255
    36c4:	4f 4f       	sbci	r20, 0xFF	; 255
    36c6:	5f 4f       	sbci	r21, 0xFF	; 255

000036c8 <__divmodsi4_exit>:
    36c8:	08 95       	ret

000036ca <__negsi2>:
    36ca:	90 95       	com	r25
    36cc:	80 95       	com	r24
    36ce:	70 95       	com	r23
    36d0:	61 95       	neg	r22
    36d2:	7f 4f       	sbci	r23, 0xFF	; 255
    36d4:	8f 4f       	sbci	r24, 0xFF	; 255
    36d6:	9f 4f       	sbci	r25, 0xFF	; 255
    36d8:	08 95       	ret

000036da <__muluhisi3>:
    36da:	af d0       	rcall	.+350    	; 0x383a <__umulhisi3>
    36dc:	a5 9f       	mul	r26, r21
    36de:	90 0d       	add	r25, r0
    36e0:	b4 9f       	mul	r27, r20
    36e2:	90 0d       	add	r25, r0
    36e4:	a4 9f       	mul	r26, r20
    36e6:	80 0d       	add	r24, r0
    36e8:	91 1d       	adc	r25, r1
    36ea:	11 24       	eor	r1, r1
    36ec:	08 95       	ret

000036ee <__muldi3>:
    36ee:	df 93       	push	r29
    36f0:	cf 93       	push	r28
    36f2:	1f 93       	push	r17
    36f4:	0f 93       	push	r16
    36f6:	9a 9d       	mul	r25, r10
    36f8:	f0 2d       	mov	r31, r0
    36fa:	21 9f       	mul	r18, r17
    36fc:	f0 0d       	add	r31, r0
    36fe:	8b 9d       	mul	r24, r11
    3700:	f0 0d       	add	r31, r0
    3702:	8a 9d       	mul	r24, r10
    3704:	e0 2d       	mov	r30, r0
    3706:	f1 0d       	add	r31, r1
    3708:	03 9f       	mul	r16, r19
    370a:	f0 0d       	add	r31, r0
    370c:	02 9f       	mul	r16, r18
    370e:	e0 0d       	add	r30, r0
    3710:	f1 1d       	adc	r31, r1
    3712:	4e 9d       	mul	r20, r14
    3714:	e0 0d       	add	r30, r0
    3716:	f1 1d       	adc	r31, r1
    3718:	5e 9d       	mul	r21, r14
    371a:	f0 0d       	add	r31, r0
    371c:	4f 9d       	mul	r20, r15
    371e:	f0 0d       	add	r31, r0
    3720:	7f 93       	push	r23
    3722:	6f 93       	push	r22
    3724:	bf 92       	push	r11
    3726:	af 92       	push	r10
    3728:	5f 93       	push	r21
    372a:	4f 93       	push	r20
    372c:	d5 01       	movw	r26, r10
    372e:	85 d0       	rcall	.+266    	; 0x383a <__umulhisi3>
    3730:	8b 01       	movw	r16, r22
    3732:	ac 01       	movw	r20, r24
    3734:	d7 01       	movw	r26, r14
    3736:	81 d0       	rcall	.+258    	; 0x383a <__umulhisi3>
    3738:	eb 01       	movw	r28, r22
    373a:	e8 0f       	add	r30, r24
    373c:	f9 1f       	adc	r31, r25
    373e:	d6 01       	movw	r26, r12
    3740:	1f d0       	rcall	.+62     	; 0x3780 <__muldi3_6>
    3742:	2f 91       	pop	r18
    3744:	3f 91       	pop	r19
    3746:	d6 01       	movw	r26, r12
    3748:	78 d0       	rcall	.+240    	; 0x383a <__umulhisi3>
    374a:	c6 0f       	add	r28, r22
    374c:	d7 1f       	adc	r29, r23
    374e:	e8 1f       	adc	r30, r24
    3750:	f9 1f       	adc	r31, r25
    3752:	af 91       	pop	r26
    3754:	bf 91       	pop	r27
    3756:	14 d0       	rcall	.+40     	; 0x3780 <__muldi3_6>
    3758:	2f 91       	pop	r18
    375a:	3f 91       	pop	r19
    375c:	6e d0       	rcall	.+220    	; 0x383a <__umulhisi3>
    375e:	c6 0f       	add	r28, r22
    3760:	d7 1f       	adc	r29, r23
    3762:	e8 1f       	adc	r30, r24
    3764:	f9 1f       	adc	r31, r25
    3766:	d6 01       	movw	r26, r12
    3768:	68 d0       	rcall	.+208    	; 0x383a <__umulhisi3>
    376a:	e6 0f       	add	r30, r22
    376c:	f7 1f       	adc	r31, r23
    376e:	98 01       	movw	r18, r16
    3770:	be 01       	movw	r22, r28
    3772:	cf 01       	movw	r24, r30
    3774:	11 24       	eor	r1, r1
    3776:	0f 91       	pop	r16
    3778:	1f 91       	pop	r17
    377a:	cf 91       	pop	r28
    377c:	df 91       	pop	r29
    377e:	08 95       	ret

00003780 <__muldi3_6>:
    3780:	5c d0       	rcall	.+184    	; 0x383a <__umulhisi3>
    3782:	46 0f       	add	r20, r22
    3784:	57 1f       	adc	r21, r23
    3786:	c8 1f       	adc	r28, r24
    3788:	d9 1f       	adc	r29, r25
    378a:	08 f4       	brcc	.+2      	; 0x378e <__muldi3_6+0xe>
    378c:	31 96       	adiw	r30, 0x01	; 1
    378e:	08 95       	ret

00003790 <__ashldi3>:
    3790:	0f 93       	push	r16
    3792:	08 30       	cpi	r16, 0x08	; 8
    3794:	90 f0       	brcs	.+36     	; 0x37ba <__ashldi3+0x2a>
    3796:	98 2f       	mov	r25, r24
    3798:	87 2f       	mov	r24, r23
    379a:	76 2f       	mov	r23, r22
    379c:	65 2f       	mov	r22, r21
    379e:	54 2f       	mov	r21, r20
    37a0:	43 2f       	mov	r20, r19
    37a2:	32 2f       	mov	r19, r18
    37a4:	22 27       	eor	r18, r18
    37a6:	08 50       	subi	r16, 0x08	; 8
    37a8:	f4 cf       	rjmp	.-24     	; 0x3792 <__ashldi3+0x2>
    37aa:	22 0f       	add	r18, r18
    37ac:	33 1f       	adc	r19, r19
    37ae:	44 1f       	adc	r20, r20
    37b0:	55 1f       	adc	r21, r21
    37b2:	66 1f       	adc	r22, r22
    37b4:	77 1f       	adc	r23, r23
    37b6:	88 1f       	adc	r24, r24
    37b8:	99 1f       	adc	r25, r25
    37ba:	0a 95       	dec	r16
    37bc:	b2 f7       	brpl	.-20     	; 0x37aa <__ashldi3+0x1a>
    37be:	0f 91       	pop	r16
    37c0:	08 95       	ret

000037c2 <__ashrdi3>:
    37c2:	97 fb       	bst	r25, 7
    37c4:	10 f8       	bld	r1, 0

000037c6 <__lshrdi3>:
    37c6:	16 94       	lsr	r1
    37c8:	00 08       	sbc	r0, r0
    37ca:	0f 93       	push	r16
    37cc:	08 30       	cpi	r16, 0x08	; 8
    37ce:	98 f0       	brcs	.+38     	; 0x37f6 <__lshrdi3+0x30>
    37d0:	08 50       	subi	r16, 0x08	; 8
    37d2:	23 2f       	mov	r18, r19
    37d4:	34 2f       	mov	r19, r20
    37d6:	45 2f       	mov	r20, r21
    37d8:	56 2f       	mov	r21, r22
    37da:	67 2f       	mov	r22, r23
    37dc:	78 2f       	mov	r23, r24
    37de:	89 2f       	mov	r24, r25
    37e0:	90 2d       	mov	r25, r0
    37e2:	f4 cf       	rjmp	.-24     	; 0x37cc <__lshrdi3+0x6>
    37e4:	05 94       	asr	r0
    37e6:	97 95       	ror	r25
    37e8:	87 95       	ror	r24
    37ea:	77 95       	ror	r23
    37ec:	67 95       	ror	r22
    37ee:	57 95       	ror	r21
    37f0:	47 95       	ror	r20
    37f2:	37 95       	ror	r19
    37f4:	27 95       	ror	r18
    37f6:	0a 95       	dec	r16
    37f8:	aa f7       	brpl	.-22     	; 0x37e4 <__lshrdi3+0x1e>
    37fa:	0f 91       	pop	r16
    37fc:	08 95       	ret

000037fe <__adddi3>:
    37fe:	2a 0d       	add	r18, r10
    3800:	3b 1d       	adc	r19, r11
    3802:	4c 1d       	adc	r20, r12
    3804:	5d 1d       	adc	r21, r13
    3806:	6e 1d       	adc	r22, r14
    3808:	7f 1d       	adc	r23, r15
    380a:	80 1f       	adc	r24, r16
    380c:	91 1f       	adc	r25, r17
    380e:	08 95       	ret

00003810 <__subdi3>:
    3810:	2a 19       	sub	r18, r10
    3812:	3b 09       	sbc	r19, r11
    3814:	4c 09       	sbc	r20, r12
    3816:	5d 09       	sbc	r21, r13
    3818:	6e 09       	sbc	r22, r14
    381a:	7f 09       	sbc	r23, r15
    381c:	80 0b       	sbc	r24, r16
    381e:	91 0b       	sbc	r25, r17
    3820:	08 95       	ret

00003822 <__cmpdi2_s8>:
    3822:	00 24       	eor	r0, r0
    3824:	a7 fd       	sbrc	r26, 7
    3826:	00 94       	com	r0
    3828:	2a 17       	cp	r18, r26
    382a:	30 05       	cpc	r19, r0
    382c:	40 05       	cpc	r20, r0
    382e:	50 05       	cpc	r21, r0
    3830:	60 05       	cpc	r22, r0
    3832:	70 05       	cpc	r23, r0
    3834:	80 05       	cpc	r24, r0
    3836:	90 05       	cpc	r25, r0
    3838:	08 95       	ret

0000383a <__umulhisi3>:
    383a:	a2 9f       	mul	r26, r18
    383c:	b0 01       	movw	r22, r0
    383e:	b3 9f       	mul	r27, r19
    3840:	c0 01       	movw	r24, r0
    3842:	a3 9f       	mul	r26, r19
    3844:	70 0d       	add	r23, r0
    3846:	81 1d       	adc	r24, r1
    3848:	11 24       	eor	r1, r1
    384a:	91 1d       	adc	r25, r1
    384c:	b2 9f       	mul	r27, r18
    384e:	70 0d       	add	r23, r0
    3850:	81 1d       	adc	r24, r1
    3852:	11 24       	eor	r1, r1
    3854:	91 1d       	adc	r25, r1
    3856:	08 95       	ret

00003858 <__ftoa_engine>:
    3858:	28 30       	cpi	r18, 0x08	; 8
    385a:	08 f0       	brcs	.+2      	; 0x385e <__ftoa_engine+0x6>
    385c:	27 e0       	ldi	r18, 0x07	; 7
    385e:	33 27       	eor	r19, r19
    3860:	da 01       	movw	r26, r20
    3862:	99 0f       	add	r25, r25
    3864:	31 1d       	adc	r19, r1
    3866:	87 fd       	sbrc	r24, 7
    3868:	91 60       	ori	r25, 0x01	; 1
    386a:	00 96       	adiw	r24, 0x00	; 0
    386c:	61 05       	cpc	r22, r1
    386e:	71 05       	cpc	r23, r1
    3870:	39 f4       	brne	.+14     	; 0x3880 <__ftoa_engine+0x28>
    3872:	32 60       	ori	r19, 0x02	; 2
    3874:	2e 5f       	subi	r18, 0xFE	; 254
    3876:	3d 93       	st	X+, r19
    3878:	30 e3       	ldi	r19, 0x30	; 48
    387a:	2a 95       	dec	r18
    387c:	e1 f7       	brne	.-8      	; 0x3876 <__ftoa_engine+0x1e>
    387e:	08 95       	ret
    3880:	9f 3f       	cpi	r25, 0xFF	; 255
    3882:	30 f0       	brcs	.+12     	; 0x3890 <__ftoa_engine+0x38>
    3884:	80 38       	cpi	r24, 0x80	; 128
    3886:	71 05       	cpc	r23, r1
    3888:	61 05       	cpc	r22, r1
    388a:	09 f0       	breq	.+2      	; 0x388e <__ftoa_engine+0x36>
    388c:	3c 5f       	subi	r19, 0xFC	; 252
    388e:	3c 5f       	subi	r19, 0xFC	; 252
    3890:	3d 93       	st	X+, r19
    3892:	91 30       	cpi	r25, 0x01	; 1
    3894:	08 f0       	brcs	.+2      	; 0x3898 <__ftoa_engine+0x40>
    3896:	80 68       	ori	r24, 0x80	; 128
    3898:	91 1d       	adc	r25, r1
    389a:	df 93       	push	r29
    389c:	cf 93       	push	r28
    389e:	1f 93       	push	r17
    38a0:	0f 93       	push	r16
    38a2:	ff 92       	push	r15
    38a4:	ef 92       	push	r14
    38a6:	19 2f       	mov	r17, r25
    38a8:	98 7f       	andi	r25, 0xF8	; 248
    38aa:	96 95       	lsr	r25
    38ac:	e9 2f       	mov	r30, r25
    38ae:	96 95       	lsr	r25
    38b0:	96 95       	lsr	r25
    38b2:	e9 0f       	add	r30, r25
    38b4:	ff 27       	eor	r31, r31
    38b6:	e8 54       	subi	r30, 0x48	; 72
    38b8:	fd 4f       	sbci	r31, 0xFD	; 253
    38ba:	99 27       	eor	r25, r25
    38bc:	33 27       	eor	r19, r19
    38be:	ee 24       	eor	r14, r14
    38c0:	ff 24       	eor	r15, r15
    38c2:	a7 01       	movw	r20, r14
    38c4:	e7 01       	movw	r28, r14
    38c6:	05 90       	lpm	r0, Z+
    38c8:	08 94       	sec
    38ca:	07 94       	ror	r0
    38cc:	28 f4       	brcc	.+10     	; 0x38d8 <__ftoa_engine+0x80>
    38ce:	36 0f       	add	r19, r22
    38d0:	e7 1e       	adc	r14, r23
    38d2:	f8 1e       	adc	r15, r24
    38d4:	49 1f       	adc	r20, r25
    38d6:	51 1d       	adc	r21, r1
    38d8:	66 0f       	add	r22, r22
    38da:	77 1f       	adc	r23, r23
    38dc:	88 1f       	adc	r24, r24
    38de:	99 1f       	adc	r25, r25
    38e0:	06 94       	lsr	r0
    38e2:	a1 f7       	brne	.-24     	; 0x38cc <__ftoa_engine+0x74>
    38e4:	05 90       	lpm	r0, Z+
    38e6:	07 94       	ror	r0
    38e8:	28 f4       	brcc	.+10     	; 0x38f4 <__ftoa_engine+0x9c>
    38ea:	e7 0e       	add	r14, r23
    38ec:	f8 1e       	adc	r15, r24
    38ee:	49 1f       	adc	r20, r25
    38f0:	56 1f       	adc	r21, r22
    38f2:	c1 1d       	adc	r28, r1
    38f4:	77 0f       	add	r23, r23
    38f6:	88 1f       	adc	r24, r24
    38f8:	99 1f       	adc	r25, r25
    38fa:	66 1f       	adc	r22, r22
    38fc:	06 94       	lsr	r0
    38fe:	a1 f7       	brne	.-24     	; 0x38e8 <__ftoa_engine+0x90>
    3900:	05 90       	lpm	r0, Z+
    3902:	07 94       	ror	r0
    3904:	28 f4       	brcc	.+10     	; 0x3910 <__ftoa_engine+0xb8>
    3906:	f8 0e       	add	r15, r24
    3908:	49 1f       	adc	r20, r25
    390a:	56 1f       	adc	r21, r22
    390c:	c7 1f       	adc	r28, r23
    390e:	d1 1d       	adc	r29, r1
    3910:	88 0f       	add	r24, r24
    3912:	99 1f       	adc	r25, r25
    3914:	66 1f       	adc	r22, r22
    3916:	77 1f       	adc	r23, r23
    3918:	06 94       	lsr	r0
    391a:	a1 f7       	brne	.-24     	; 0x3904 <__ftoa_engine+0xac>
    391c:	05 90       	lpm	r0, Z+
    391e:	07 94       	ror	r0
    3920:	20 f4       	brcc	.+8      	; 0x392a <__ftoa_engine+0xd2>
    3922:	49 0f       	add	r20, r25
    3924:	56 1f       	adc	r21, r22
    3926:	c7 1f       	adc	r28, r23
    3928:	d8 1f       	adc	r29, r24
    392a:	99 0f       	add	r25, r25
    392c:	66 1f       	adc	r22, r22
    392e:	77 1f       	adc	r23, r23
    3930:	88 1f       	adc	r24, r24
    3932:	06 94       	lsr	r0
    3934:	a9 f7       	brne	.-22     	; 0x3920 <__ftoa_engine+0xc8>
    3936:	84 91       	lpm	r24, Z
    3938:	10 95       	com	r17
    393a:	17 70       	andi	r17, 0x07	; 7
    393c:	41 f0       	breq	.+16     	; 0x394e <__ftoa_engine+0xf6>
    393e:	d6 95       	lsr	r29
    3940:	c7 95       	ror	r28
    3942:	57 95       	ror	r21
    3944:	47 95       	ror	r20
    3946:	f7 94       	ror	r15
    3948:	e7 94       	ror	r14
    394a:	1a 95       	dec	r17
    394c:	c1 f7       	brne	.-16     	; 0x393e <__ftoa_engine+0xe6>
    394e:	ee e5       	ldi	r30, 0x5E	; 94
    3950:	f2 e0       	ldi	r31, 0x02	; 2
    3952:	68 94       	set
    3954:	15 90       	lpm	r1, Z+
    3956:	15 91       	lpm	r17, Z+
    3958:	35 91       	lpm	r19, Z+
    395a:	65 91       	lpm	r22, Z+
    395c:	95 91       	lpm	r25, Z+
    395e:	05 90       	lpm	r0, Z+
    3960:	7f e2       	ldi	r23, 0x2F	; 47
    3962:	73 95       	inc	r23
    3964:	e1 18       	sub	r14, r1
    3966:	f1 0a       	sbc	r15, r17
    3968:	43 0b       	sbc	r20, r19
    396a:	56 0b       	sbc	r21, r22
    396c:	c9 0b       	sbc	r28, r25
    396e:	d0 09       	sbc	r29, r0
    3970:	c0 f7       	brcc	.-16     	; 0x3962 <__ftoa_engine+0x10a>
    3972:	e1 0c       	add	r14, r1
    3974:	f1 1e       	adc	r15, r17
    3976:	43 1f       	adc	r20, r19
    3978:	56 1f       	adc	r21, r22
    397a:	c9 1f       	adc	r28, r25
    397c:	d0 1d       	adc	r29, r0
    397e:	7e f4       	brtc	.+30     	; 0x399e <__ftoa_engine+0x146>
    3980:	70 33       	cpi	r23, 0x30	; 48
    3982:	11 f4       	brne	.+4      	; 0x3988 <__ftoa_engine+0x130>
    3984:	8a 95       	dec	r24
    3986:	e6 cf       	rjmp	.-52     	; 0x3954 <__ftoa_engine+0xfc>
    3988:	e8 94       	clt
    398a:	01 50       	subi	r16, 0x01	; 1
    398c:	30 f0       	brcs	.+12     	; 0x399a <__ftoa_engine+0x142>
    398e:	08 0f       	add	r16, r24
    3990:	0a f4       	brpl	.+2      	; 0x3994 <__ftoa_engine+0x13c>
    3992:	00 27       	eor	r16, r16
    3994:	02 17       	cp	r16, r18
    3996:	08 f4       	brcc	.+2      	; 0x399a <__ftoa_engine+0x142>
    3998:	20 2f       	mov	r18, r16
    399a:	23 95       	inc	r18
    399c:	02 2f       	mov	r16, r18
    399e:	7a 33       	cpi	r23, 0x3A	; 58
    39a0:	28 f0       	brcs	.+10     	; 0x39ac <__ftoa_engine+0x154>
    39a2:	79 e3       	ldi	r23, 0x39	; 57
    39a4:	7d 93       	st	X+, r23
    39a6:	2a 95       	dec	r18
    39a8:	e9 f7       	brne	.-6      	; 0x39a4 <__ftoa_engine+0x14c>
    39aa:	10 c0       	rjmp	.+32     	; 0x39cc <__ftoa_engine+0x174>
    39ac:	7d 93       	st	X+, r23
    39ae:	2a 95       	dec	r18
    39b0:	89 f6       	brne	.-94     	; 0x3954 <__ftoa_engine+0xfc>
    39b2:	06 94       	lsr	r0
    39b4:	97 95       	ror	r25
    39b6:	67 95       	ror	r22
    39b8:	37 95       	ror	r19
    39ba:	17 95       	ror	r17
    39bc:	17 94       	ror	r1
    39be:	e1 18       	sub	r14, r1
    39c0:	f1 0a       	sbc	r15, r17
    39c2:	43 0b       	sbc	r20, r19
    39c4:	56 0b       	sbc	r21, r22
    39c6:	c9 0b       	sbc	r28, r25
    39c8:	d0 09       	sbc	r29, r0
    39ca:	98 f0       	brcs	.+38     	; 0x39f2 <__ftoa_engine+0x19a>
    39cc:	23 95       	inc	r18
    39ce:	7e 91       	ld	r23, -X
    39d0:	73 95       	inc	r23
    39d2:	7a 33       	cpi	r23, 0x3A	; 58
    39d4:	08 f0       	brcs	.+2      	; 0x39d8 <__ftoa_engine+0x180>
    39d6:	70 e3       	ldi	r23, 0x30	; 48
    39d8:	7c 93       	st	X, r23
    39da:	20 13       	cpse	r18, r16
    39dc:	b8 f7       	brcc	.-18     	; 0x39cc <__ftoa_engine+0x174>
    39de:	7e 91       	ld	r23, -X
    39e0:	70 61       	ori	r23, 0x10	; 16
    39e2:	7d 93       	st	X+, r23
    39e4:	30 f0       	brcs	.+12     	; 0x39f2 <__ftoa_engine+0x19a>
    39e6:	83 95       	inc	r24
    39e8:	71 e3       	ldi	r23, 0x31	; 49
    39ea:	7d 93       	st	X+, r23
    39ec:	70 e3       	ldi	r23, 0x30	; 48
    39ee:	2a 95       	dec	r18
    39f0:	e1 f7       	brne	.-8      	; 0x39ea <__ftoa_engine+0x192>
    39f2:	11 24       	eor	r1, r1
    39f4:	ef 90       	pop	r14
    39f6:	ff 90       	pop	r15
    39f8:	0f 91       	pop	r16
    39fa:	1f 91       	pop	r17
    39fc:	cf 91       	pop	r28
    39fe:	df 91       	pop	r29
    3a00:	99 27       	eor	r25, r25
    3a02:	87 fd       	sbrc	r24, 7
    3a04:	90 95       	com	r25
    3a06:	08 95       	ret

00003a08 <strnlen_P>:
    3a08:	fc 01       	movw	r30, r24
    3a0a:	05 90       	lpm	r0, Z+
    3a0c:	61 50       	subi	r22, 0x01	; 1
    3a0e:	70 40       	sbci	r23, 0x00	; 0
    3a10:	01 10       	cpse	r0, r1
    3a12:	d8 f7       	brcc	.-10     	; 0x3a0a <strnlen_P+0x2>
    3a14:	80 95       	com	r24
    3a16:	90 95       	com	r25
    3a18:	8e 0f       	add	r24, r30
    3a1a:	9f 1f       	adc	r25, r31
    3a1c:	08 95       	ret

00003a1e <strnlen>:
    3a1e:	fc 01       	movw	r30, r24
    3a20:	61 50       	subi	r22, 0x01	; 1
    3a22:	70 40       	sbci	r23, 0x00	; 0
    3a24:	01 90       	ld	r0, Z+
    3a26:	01 10       	cpse	r0, r1
    3a28:	d8 f7       	brcc	.-10     	; 0x3a20 <strnlen+0x2>
    3a2a:	80 95       	com	r24
    3a2c:	90 95       	com	r25
    3a2e:	8e 0f       	add	r24, r30
    3a30:	9f 1f       	adc	r25, r31
    3a32:	08 95       	ret

00003a34 <fdevopen>:
    3a34:	0f 93       	push	r16
    3a36:	1f 93       	push	r17
    3a38:	cf 93       	push	r28
    3a3a:	df 93       	push	r29
    3a3c:	00 97       	sbiw	r24, 0x00	; 0
    3a3e:	31 f4       	brne	.+12     	; 0x3a4c <fdevopen+0x18>
    3a40:	61 15       	cp	r22, r1
    3a42:	71 05       	cpc	r23, r1
    3a44:	19 f4       	brne	.+6      	; 0x3a4c <fdevopen+0x18>
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	39 c0       	rjmp	.+114    	; 0x3abe <fdevopen+0x8a>
    3a4c:	8b 01       	movw	r16, r22
    3a4e:	ec 01       	movw	r28, r24
    3a50:	6e e0       	ldi	r22, 0x0E	; 14
    3a52:	70 e0       	ldi	r23, 0x00	; 0
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	14 d1       	rcall	.+552    	; 0x3c82 <calloc>
    3a5a:	fc 01       	movw	r30, r24
    3a5c:	89 2b       	or	r24, r25
    3a5e:	99 f3       	breq	.-26     	; 0x3a46 <fdevopen+0x12>
    3a60:	80 e8       	ldi	r24, 0x80	; 128
    3a62:	83 83       	std	Z+3, r24	; 0x03
    3a64:	01 15       	cp	r16, r1
    3a66:	11 05       	cpc	r17, r1
    3a68:	71 f0       	breq	.+28     	; 0x3a86 <fdevopen+0x52>
    3a6a:	02 87       	std	Z+10, r16	; 0x0a
    3a6c:	13 87       	std	Z+11, r17	; 0x0b
    3a6e:	81 e8       	ldi	r24, 0x81	; 129
    3a70:	83 83       	std	Z+3, r24	; 0x03
    3a72:	80 91 a8 20 	lds	r24, 0x20A8	; 0x8020a8 <__iob>
    3a76:	90 91 a9 20 	lds	r25, 0x20A9	; 0x8020a9 <__iob+0x1>
    3a7a:	89 2b       	or	r24, r25
    3a7c:	21 f4       	brne	.+8      	; 0x3a86 <fdevopen+0x52>
    3a7e:	e0 93 a8 20 	sts	0x20A8, r30	; 0x8020a8 <__iob>
    3a82:	f0 93 a9 20 	sts	0x20A9, r31	; 0x8020a9 <__iob+0x1>
    3a86:	20 97       	sbiw	r28, 0x00	; 0
    3a88:	c9 f0       	breq	.+50     	; 0x3abc <fdevopen+0x88>
    3a8a:	c0 87       	std	Z+8, r28	; 0x08
    3a8c:	d1 87       	std	Z+9, r29	; 0x09
    3a8e:	83 81       	ldd	r24, Z+3	; 0x03
    3a90:	82 60       	ori	r24, 0x02	; 2
    3a92:	83 83       	std	Z+3, r24	; 0x03
    3a94:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <__iob+0x2>
    3a98:	90 91 ab 20 	lds	r25, 0x20AB	; 0x8020ab <__iob+0x3>
    3a9c:	89 2b       	or	r24, r25
    3a9e:	71 f4       	brne	.+28     	; 0x3abc <fdevopen+0x88>
    3aa0:	e0 93 aa 20 	sts	0x20AA, r30	; 0x8020aa <__iob+0x2>
    3aa4:	f0 93 ab 20 	sts	0x20AB, r31	; 0x8020ab <__iob+0x3>
    3aa8:	80 91 ac 20 	lds	r24, 0x20AC	; 0x8020ac <__iob+0x4>
    3aac:	90 91 ad 20 	lds	r25, 0x20AD	; 0x8020ad <__iob+0x5>
    3ab0:	89 2b       	or	r24, r25
    3ab2:	21 f4       	brne	.+8      	; 0x3abc <fdevopen+0x88>
    3ab4:	e0 93 ac 20 	sts	0x20AC, r30	; 0x8020ac <__iob+0x4>
    3ab8:	f0 93 ad 20 	sts	0x20AD, r31	; 0x8020ad <__iob+0x5>
    3abc:	cf 01       	movw	r24, r30
    3abe:	df 91       	pop	r29
    3ac0:	cf 91       	pop	r28
    3ac2:	1f 91       	pop	r17
    3ac4:	0f 91       	pop	r16
    3ac6:	08 95       	ret

00003ac8 <fputc>:
    3ac8:	0f 93       	push	r16
    3aca:	1f 93       	push	r17
    3acc:	cf 93       	push	r28
    3ace:	df 93       	push	r29
    3ad0:	fb 01       	movw	r30, r22
    3ad2:	23 81       	ldd	r18, Z+3	; 0x03
    3ad4:	21 fd       	sbrc	r18, 1
    3ad6:	03 c0       	rjmp	.+6      	; 0x3ade <fputc+0x16>
    3ad8:	8f ef       	ldi	r24, 0xFF	; 255
    3ada:	9f ef       	ldi	r25, 0xFF	; 255
    3adc:	2c c0       	rjmp	.+88     	; 0x3b36 <fputc+0x6e>
    3ade:	22 ff       	sbrs	r18, 2
    3ae0:	16 c0       	rjmp	.+44     	; 0x3b0e <fputc+0x46>
    3ae2:	46 81       	ldd	r20, Z+6	; 0x06
    3ae4:	57 81       	ldd	r21, Z+7	; 0x07
    3ae6:	24 81       	ldd	r18, Z+4	; 0x04
    3ae8:	35 81       	ldd	r19, Z+5	; 0x05
    3aea:	42 17       	cp	r20, r18
    3aec:	53 07       	cpc	r21, r19
    3aee:	44 f4       	brge	.+16     	; 0x3b00 <fputc+0x38>
    3af0:	a0 81       	ld	r26, Z
    3af2:	b1 81       	ldd	r27, Z+1	; 0x01
    3af4:	9d 01       	movw	r18, r26
    3af6:	2f 5f       	subi	r18, 0xFF	; 255
    3af8:	3f 4f       	sbci	r19, 0xFF	; 255
    3afa:	20 83       	st	Z, r18
    3afc:	31 83       	std	Z+1, r19	; 0x01
    3afe:	8c 93       	st	X, r24
    3b00:	26 81       	ldd	r18, Z+6	; 0x06
    3b02:	37 81       	ldd	r19, Z+7	; 0x07
    3b04:	2f 5f       	subi	r18, 0xFF	; 255
    3b06:	3f 4f       	sbci	r19, 0xFF	; 255
    3b08:	26 83       	std	Z+6, r18	; 0x06
    3b0a:	37 83       	std	Z+7, r19	; 0x07
    3b0c:	14 c0       	rjmp	.+40     	; 0x3b36 <fputc+0x6e>
    3b0e:	8b 01       	movw	r16, r22
    3b10:	ec 01       	movw	r28, r24
    3b12:	fb 01       	movw	r30, r22
    3b14:	00 84       	ldd	r0, Z+8	; 0x08
    3b16:	f1 85       	ldd	r31, Z+9	; 0x09
    3b18:	e0 2d       	mov	r30, r0
    3b1a:	19 95       	eicall
    3b1c:	89 2b       	or	r24, r25
    3b1e:	e1 f6       	brne	.-72     	; 0x3ad8 <fputc+0x10>
    3b20:	d8 01       	movw	r26, r16
    3b22:	16 96       	adiw	r26, 0x06	; 6
    3b24:	8d 91       	ld	r24, X+
    3b26:	9c 91       	ld	r25, X
    3b28:	17 97       	sbiw	r26, 0x07	; 7
    3b2a:	01 96       	adiw	r24, 0x01	; 1
    3b2c:	16 96       	adiw	r26, 0x06	; 6
    3b2e:	8d 93       	st	X+, r24
    3b30:	9c 93       	st	X, r25
    3b32:	17 97       	sbiw	r26, 0x07	; 7
    3b34:	ce 01       	movw	r24, r28
    3b36:	df 91       	pop	r29
    3b38:	cf 91       	pop	r28
    3b3a:	1f 91       	pop	r17
    3b3c:	0f 91       	pop	r16
    3b3e:	08 95       	ret

00003b40 <printf>:
    3b40:	cf 93       	push	r28
    3b42:	df 93       	push	r29
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	ae 01       	movw	r20, r28
    3b4a:	4a 5f       	subi	r20, 0xFA	; 250
    3b4c:	5f 4f       	sbci	r21, 0xFF	; 255
    3b4e:	fa 01       	movw	r30, r20
    3b50:	61 91       	ld	r22, Z+
    3b52:	71 91       	ld	r23, Z+
    3b54:	af 01       	movw	r20, r30
    3b56:	80 91 aa 20 	lds	r24, 0x20AA	; 0x8020aa <__iob+0x2>
    3b5a:	90 91 ab 20 	lds	r25, 0x20AB	; 0x8020ab <__iob+0x3>
    3b5e:	fc d9       	rcall	.-3080   	; 0x2f58 <vfprintf>
    3b60:	df 91       	pop	r29
    3b62:	cf 91       	pop	r28
    3b64:	08 95       	ret

00003b66 <puts>:
    3b66:	0f 93       	push	r16
    3b68:	1f 93       	push	r17
    3b6a:	cf 93       	push	r28
    3b6c:	df 93       	push	r29
    3b6e:	e0 91 aa 20 	lds	r30, 0x20AA	; 0x8020aa <__iob+0x2>
    3b72:	f0 91 ab 20 	lds	r31, 0x20AB	; 0x8020ab <__iob+0x3>
    3b76:	23 81       	ldd	r18, Z+3	; 0x03
    3b78:	21 ff       	sbrs	r18, 1
    3b7a:	1b c0       	rjmp	.+54     	; 0x3bb2 <puts+0x4c>
    3b7c:	8c 01       	movw	r16, r24
    3b7e:	d0 e0       	ldi	r29, 0x00	; 0
    3b80:	c0 e0       	ldi	r28, 0x00	; 0
    3b82:	f8 01       	movw	r30, r16
    3b84:	81 91       	ld	r24, Z+
    3b86:	8f 01       	movw	r16, r30
    3b88:	60 91 aa 20 	lds	r22, 0x20AA	; 0x8020aa <__iob+0x2>
    3b8c:	70 91 ab 20 	lds	r23, 0x20AB	; 0x8020ab <__iob+0x3>
    3b90:	db 01       	movw	r26, r22
    3b92:	18 96       	adiw	r26, 0x08	; 8
    3b94:	ed 91       	ld	r30, X+
    3b96:	fc 91       	ld	r31, X
    3b98:	19 97       	sbiw	r26, 0x09	; 9
    3b9a:	88 23       	and	r24, r24
    3b9c:	31 f0       	breq	.+12     	; 0x3baa <puts+0x44>
    3b9e:	19 95       	eicall
    3ba0:	89 2b       	or	r24, r25
    3ba2:	79 f3       	breq	.-34     	; 0x3b82 <puts+0x1c>
    3ba4:	df ef       	ldi	r29, 0xFF	; 255
    3ba6:	cf ef       	ldi	r28, 0xFF	; 255
    3ba8:	ec cf       	rjmp	.-40     	; 0x3b82 <puts+0x1c>
    3baa:	8a e0       	ldi	r24, 0x0A	; 10
    3bac:	19 95       	eicall
    3bae:	89 2b       	or	r24, r25
    3bb0:	19 f0       	breq	.+6      	; 0x3bb8 <puts+0x52>
    3bb2:	8f ef       	ldi	r24, 0xFF	; 255
    3bb4:	9f ef       	ldi	r25, 0xFF	; 255
    3bb6:	02 c0       	rjmp	.+4      	; 0x3bbc <puts+0x56>
    3bb8:	8d 2f       	mov	r24, r29
    3bba:	9c 2f       	mov	r25, r28
    3bbc:	df 91       	pop	r29
    3bbe:	cf 91       	pop	r28
    3bc0:	1f 91       	pop	r17
    3bc2:	0f 91       	pop	r16
    3bc4:	08 95       	ret

00003bc6 <__ultoa_invert>:
    3bc6:	fa 01       	movw	r30, r20
    3bc8:	aa 27       	eor	r26, r26
    3bca:	28 30       	cpi	r18, 0x08	; 8
    3bcc:	51 f1       	breq	.+84     	; 0x3c22 <__ultoa_invert+0x5c>
    3bce:	20 31       	cpi	r18, 0x10	; 16
    3bd0:	81 f1       	breq	.+96     	; 0x3c32 <__ultoa_invert+0x6c>
    3bd2:	e8 94       	clt
    3bd4:	6f 93       	push	r22
    3bd6:	6e 7f       	andi	r22, 0xFE	; 254
    3bd8:	6e 5f       	subi	r22, 0xFE	; 254
    3bda:	7f 4f       	sbci	r23, 0xFF	; 255
    3bdc:	8f 4f       	sbci	r24, 0xFF	; 255
    3bde:	9f 4f       	sbci	r25, 0xFF	; 255
    3be0:	af 4f       	sbci	r26, 0xFF	; 255
    3be2:	b1 e0       	ldi	r27, 0x01	; 1
    3be4:	3e d0       	rcall	.+124    	; 0x3c62 <__ultoa_invert+0x9c>
    3be6:	b4 e0       	ldi	r27, 0x04	; 4
    3be8:	3c d0       	rcall	.+120    	; 0x3c62 <__ultoa_invert+0x9c>
    3bea:	67 0f       	add	r22, r23
    3bec:	78 1f       	adc	r23, r24
    3bee:	89 1f       	adc	r24, r25
    3bf0:	9a 1f       	adc	r25, r26
    3bf2:	a1 1d       	adc	r26, r1
    3bf4:	68 0f       	add	r22, r24
    3bf6:	79 1f       	adc	r23, r25
    3bf8:	8a 1f       	adc	r24, r26
    3bfa:	91 1d       	adc	r25, r1
    3bfc:	a1 1d       	adc	r26, r1
    3bfe:	6a 0f       	add	r22, r26
    3c00:	71 1d       	adc	r23, r1
    3c02:	81 1d       	adc	r24, r1
    3c04:	91 1d       	adc	r25, r1
    3c06:	a1 1d       	adc	r26, r1
    3c08:	20 d0       	rcall	.+64     	; 0x3c4a <__ultoa_invert+0x84>
    3c0a:	09 f4       	brne	.+2      	; 0x3c0e <__ultoa_invert+0x48>
    3c0c:	68 94       	set
    3c0e:	3f 91       	pop	r19
    3c10:	2a e0       	ldi	r18, 0x0A	; 10
    3c12:	26 9f       	mul	r18, r22
    3c14:	11 24       	eor	r1, r1
    3c16:	30 19       	sub	r19, r0
    3c18:	30 5d       	subi	r19, 0xD0	; 208
    3c1a:	31 93       	st	Z+, r19
    3c1c:	de f6       	brtc	.-74     	; 0x3bd4 <__ultoa_invert+0xe>
    3c1e:	cf 01       	movw	r24, r30
    3c20:	08 95       	ret
    3c22:	46 2f       	mov	r20, r22
    3c24:	47 70       	andi	r20, 0x07	; 7
    3c26:	40 5d       	subi	r20, 0xD0	; 208
    3c28:	41 93       	st	Z+, r20
    3c2a:	b3 e0       	ldi	r27, 0x03	; 3
    3c2c:	0f d0       	rcall	.+30     	; 0x3c4c <__ultoa_invert+0x86>
    3c2e:	c9 f7       	brne	.-14     	; 0x3c22 <__ultoa_invert+0x5c>
    3c30:	f6 cf       	rjmp	.-20     	; 0x3c1e <__ultoa_invert+0x58>
    3c32:	46 2f       	mov	r20, r22
    3c34:	4f 70       	andi	r20, 0x0F	; 15
    3c36:	40 5d       	subi	r20, 0xD0	; 208
    3c38:	4a 33       	cpi	r20, 0x3A	; 58
    3c3a:	18 f0       	brcs	.+6      	; 0x3c42 <__ultoa_invert+0x7c>
    3c3c:	49 5d       	subi	r20, 0xD9	; 217
    3c3e:	31 fd       	sbrc	r19, 1
    3c40:	40 52       	subi	r20, 0x20	; 32
    3c42:	41 93       	st	Z+, r20
    3c44:	02 d0       	rcall	.+4      	; 0x3c4a <__ultoa_invert+0x84>
    3c46:	a9 f7       	brne	.-22     	; 0x3c32 <__ultoa_invert+0x6c>
    3c48:	ea cf       	rjmp	.-44     	; 0x3c1e <__ultoa_invert+0x58>
    3c4a:	b4 e0       	ldi	r27, 0x04	; 4
    3c4c:	a6 95       	lsr	r26
    3c4e:	97 95       	ror	r25
    3c50:	87 95       	ror	r24
    3c52:	77 95       	ror	r23
    3c54:	67 95       	ror	r22
    3c56:	ba 95       	dec	r27
    3c58:	c9 f7       	brne	.-14     	; 0x3c4c <__ultoa_invert+0x86>
    3c5a:	00 97       	sbiw	r24, 0x00	; 0
    3c5c:	61 05       	cpc	r22, r1
    3c5e:	71 05       	cpc	r23, r1
    3c60:	08 95       	ret
    3c62:	9b 01       	movw	r18, r22
    3c64:	ac 01       	movw	r20, r24
    3c66:	0a 2e       	mov	r0, r26
    3c68:	06 94       	lsr	r0
    3c6a:	57 95       	ror	r21
    3c6c:	47 95       	ror	r20
    3c6e:	37 95       	ror	r19
    3c70:	27 95       	ror	r18
    3c72:	ba 95       	dec	r27
    3c74:	c9 f7       	brne	.-14     	; 0x3c68 <__ultoa_invert+0xa2>
    3c76:	62 0f       	add	r22, r18
    3c78:	73 1f       	adc	r23, r19
    3c7a:	84 1f       	adc	r24, r20
    3c7c:	95 1f       	adc	r25, r21
    3c7e:	a0 1d       	adc	r26, r0
    3c80:	08 95       	ret

00003c82 <calloc>:
    3c82:	0f 93       	push	r16
    3c84:	1f 93       	push	r17
    3c86:	cf 93       	push	r28
    3c88:	df 93       	push	r29
    3c8a:	86 9f       	mul	r24, r22
    3c8c:	80 01       	movw	r16, r0
    3c8e:	87 9f       	mul	r24, r23
    3c90:	10 0d       	add	r17, r0
    3c92:	96 9f       	mul	r25, r22
    3c94:	10 0d       	add	r17, r0
    3c96:	11 24       	eor	r1, r1
    3c98:	c8 01       	movw	r24, r16
    3c9a:	0d d0       	rcall	.+26     	; 0x3cb6 <malloc>
    3c9c:	ec 01       	movw	r28, r24
    3c9e:	00 97       	sbiw	r24, 0x00	; 0
    3ca0:	21 f0       	breq	.+8      	; 0x3caa <calloc+0x28>
    3ca2:	a8 01       	movw	r20, r16
    3ca4:	60 e0       	ldi	r22, 0x00	; 0
    3ca6:	70 e0       	ldi	r23, 0x00	; 0
    3ca8:	27 d1       	rcall	.+590    	; 0x3ef8 <memset>
    3caa:	ce 01       	movw	r24, r28
    3cac:	df 91       	pop	r29
    3cae:	cf 91       	pop	r28
    3cb0:	1f 91       	pop	r17
    3cb2:	0f 91       	pop	r16
    3cb4:	08 95       	ret

00003cb6 <malloc>:
    3cb6:	0f 93       	push	r16
    3cb8:	1f 93       	push	r17
    3cba:	cf 93       	push	r28
    3cbc:	df 93       	push	r29
    3cbe:	82 30       	cpi	r24, 0x02	; 2
    3cc0:	91 05       	cpc	r25, r1
    3cc2:	10 f4       	brcc	.+4      	; 0x3cc8 <malloc+0x12>
    3cc4:	82 e0       	ldi	r24, 0x02	; 2
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	e0 91 b0 20 	lds	r30, 0x20B0	; 0x8020b0 <__flp>
    3ccc:	f0 91 b1 20 	lds	r31, 0x20B1	; 0x8020b1 <__flp+0x1>
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	a0 e0       	ldi	r26, 0x00	; 0
    3cd6:	b0 e0       	ldi	r27, 0x00	; 0
    3cd8:	30 97       	sbiw	r30, 0x00	; 0
    3cda:	19 f1       	breq	.+70     	; 0x3d22 <malloc+0x6c>
    3cdc:	40 81       	ld	r20, Z
    3cde:	51 81       	ldd	r21, Z+1	; 0x01
    3ce0:	02 81       	ldd	r16, Z+2	; 0x02
    3ce2:	13 81       	ldd	r17, Z+3	; 0x03
    3ce4:	48 17       	cp	r20, r24
    3ce6:	59 07       	cpc	r21, r25
    3ce8:	c8 f0       	brcs	.+50     	; 0x3d1c <malloc+0x66>
    3cea:	84 17       	cp	r24, r20
    3cec:	95 07       	cpc	r25, r21
    3cee:	69 f4       	brne	.+26     	; 0x3d0a <malloc+0x54>
    3cf0:	10 97       	sbiw	r26, 0x00	; 0
    3cf2:	31 f0       	breq	.+12     	; 0x3d00 <malloc+0x4a>
    3cf4:	12 96       	adiw	r26, 0x02	; 2
    3cf6:	0c 93       	st	X, r16
    3cf8:	12 97       	sbiw	r26, 0x02	; 2
    3cfa:	13 96       	adiw	r26, 0x03	; 3
    3cfc:	1c 93       	st	X, r17
    3cfe:	27 c0       	rjmp	.+78     	; 0x3d4e <malloc+0x98>
    3d00:	00 93 b0 20 	sts	0x20B0, r16	; 0x8020b0 <__flp>
    3d04:	10 93 b1 20 	sts	0x20B1, r17	; 0x8020b1 <__flp+0x1>
    3d08:	22 c0       	rjmp	.+68     	; 0x3d4e <malloc+0x98>
    3d0a:	21 15       	cp	r18, r1
    3d0c:	31 05       	cpc	r19, r1
    3d0e:	19 f0       	breq	.+6      	; 0x3d16 <malloc+0x60>
    3d10:	42 17       	cp	r20, r18
    3d12:	53 07       	cpc	r21, r19
    3d14:	18 f4       	brcc	.+6      	; 0x3d1c <malloc+0x66>
    3d16:	9a 01       	movw	r18, r20
    3d18:	bd 01       	movw	r22, r26
    3d1a:	ef 01       	movw	r28, r30
    3d1c:	df 01       	movw	r26, r30
    3d1e:	f8 01       	movw	r30, r16
    3d20:	db cf       	rjmp	.-74     	; 0x3cd8 <malloc+0x22>
    3d22:	21 15       	cp	r18, r1
    3d24:	31 05       	cpc	r19, r1
    3d26:	f9 f0       	breq	.+62     	; 0x3d66 <malloc+0xb0>
    3d28:	28 1b       	sub	r18, r24
    3d2a:	39 0b       	sbc	r19, r25
    3d2c:	24 30       	cpi	r18, 0x04	; 4
    3d2e:	31 05       	cpc	r19, r1
    3d30:	80 f4       	brcc	.+32     	; 0x3d52 <malloc+0x9c>
    3d32:	8a 81       	ldd	r24, Y+2	; 0x02
    3d34:	9b 81       	ldd	r25, Y+3	; 0x03
    3d36:	61 15       	cp	r22, r1
    3d38:	71 05       	cpc	r23, r1
    3d3a:	21 f0       	breq	.+8      	; 0x3d44 <malloc+0x8e>
    3d3c:	fb 01       	movw	r30, r22
    3d3e:	82 83       	std	Z+2, r24	; 0x02
    3d40:	93 83       	std	Z+3, r25	; 0x03
    3d42:	04 c0       	rjmp	.+8      	; 0x3d4c <malloc+0x96>
    3d44:	80 93 b0 20 	sts	0x20B0, r24	; 0x8020b0 <__flp>
    3d48:	90 93 b1 20 	sts	0x20B1, r25	; 0x8020b1 <__flp+0x1>
    3d4c:	fe 01       	movw	r30, r28
    3d4e:	32 96       	adiw	r30, 0x02	; 2
    3d50:	44 c0       	rjmp	.+136    	; 0x3dda <malloc+0x124>
    3d52:	fe 01       	movw	r30, r28
    3d54:	e2 0f       	add	r30, r18
    3d56:	f3 1f       	adc	r31, r19
    3d58:	81 93       	st	Z+, r24
    3d5a:	91 93       	st	Z+, r25
    3d5c:	22 50       	subi	r18, 0x02	; 2
    3d5e:	31 09       	sbc	r19, r1
    3d60:	28 83       	st	Y, r18
    3d62:	39 83       	std	Y+1, r19	; 0x01
    3d64:	3a c0       	rjmp	.+116    	; 0x3dda <malloc+0x124>
    3d66:	20 91 ae 20 	lds	r18, 0x20AE	; 0x8020ae <__brkval>
    3d6a:	30 91 af 20 	lds	r19, 0x20AF	; 0x8020af <__brkval+0x1>
    3d6e:	23 2b       	or	r18, r19
    3d70:	41 f4       	brne	.+16     	; 0x3d82 <malloc+0xcc>
    3d72:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    3d76:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    3d7a:	20 93 ae 20 	sts	0x20AE, r18	; 0x8020ae <__brkval>
    3d7e:	30 93 af 20 	sts	0x20AF, r19	; 0x8020af <__brkval+0x1>
    3d82:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    3d86:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    3d8a:	21 15       	cp	r18, r1
    3d8c:	31 05       	cpc	r19, r1
    3d8e:	41 f4       	brne	.+16     	; 0x3da0 <malloc+0xea>
    3d90:	2d b7       	in	r18, 0x3d	; 61
    3d92:	3e b7       	in	r19, 0x3e	; 62
    3d94:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    3d98:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    3d9c:	24 1b       	sub	r18, r20
    3d9e:	35 0b       	sbc	r19, r21
    3da0:	e0 91 ae 20 	lds	r30, 0x20AE	; 0x8020ae <__brkval>
    3da4:	f0 91 af 20 	lds	r31, 0x20AF	; 0x8020af <__brkval+0x1>
    3da8:	e2 17       	cp	r30, r18
    3daa:	f3 07       	cpc	r31, r19
    3dac:	a0 f4       	brcc	.+40     	; 0x3dd6 <malloc+0x120>
    3dae:	2e 1b       	sub	r18, r30
    3db0:	3f 0b       	sbc	r19, r31
    3db2:	28 17       	cp	r18, r24
    3db4:	39 07       	cpc	r19, r25
    3db6:	78 f0       	brcs	.+30     	; 0x3dd6 <malloc+0x120>
    3db8:	ac 01       	movw	r20, r24
    3dba:	4e 5f       	subi	r20, 0xFE	; 254
    3dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    3dbe:	24 17       	cp	r18, r20
    3dc0:	35 07       	cpc	r19, r21
    3dc2:	48 f0       	brcs	.+18     	; 0x3dd6 <malloc+0x120>
    3dc4:	4e 0f       	add	r20, r30
    3dc6:	5f 1f       	adc	r21, r31
    3dc8:	40 93 ae 20 	sts	0x20AE, r20	; 0x8020ae <__brkval>
    3dcc:	50 93 af 20 	sts	0x20AF, r21	; 0x8020af <__brkval+0x1>
    3dd0:	81 93       	st	Z+, r24
    3dd2:	91 93       	st	Z+, r25
    3dd4:	02 c0       	rjmp	.+4      	; 0x3dda <malloc+0x124>
    3dd6:	e0 e0       	ldi	r30, 0x00	; 0
    3dd8:	f0 e0       	ldi	r31, 0x00	; 0
    3dda:	cf 01       	movw	r24, r30
    3ddc:	df 91       	pop	r29
    3dde:	cf 91       	pop	r28
    3de0:	1f 91       	pop	r17
    3de2:	0f 91       	pop	r16
    3de4:	08 95       	ret

00003de6 <free>:
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	00 97       	sbiw	r24, 0x00	; 0
    3dec:	09 f4       	brne	.+2      	; 0x3df0 <free+0xa>
    3dee:	81 c0       	rjmp	.+258    	; 0x3ef2 <free+0x10c>
    3df0:	fc 01       	movw	r30, r24
    3df2:	32 97       	sbiw	r30, 0x02	; 2
    3df4:	12 82       	std	Z+2, r1	; 0x02
    3df6:	13 82       	std	Z+3, r1	; 0x03
    3df8:	a0 91 b0 20 	lds	r26, 0x20B0	; 0x8020b0 <__flp>
    3dfc:	b0 91 b1 20 	lds	r27, 0x20B1	; 0x8020b1 <__flp+0x1>
    3e00:	10 97       	sbiw	r26, 0x00	; 0
    3e02:	81 f4       	brne	.+32     	; 0x3e24 <free+0x3e>
    3e04:	20 81       	ld	r18, Z
    3e06:	31 81       	ldd	r19, Z+1	; 0x01
    3e08:	82 0f       	add	r24, r18
    3e0a:	93 1f       	adc	r25, r19
    3e0c:	20 91 ae 20 	lds	r18, 0x20AE	; 0x8020ae <__brkval>
    3e10:	30 91 af 20 	lds	r19, 0x20AF	; 0x8020af <__brkval+0x1>
    3e14:	28 17       	cp	r18, r24
    3e16:	39 07       	cpc	r19, r25
    3e18:	51 f5       	brne	.+84     	; 0x3e6e <free+0x88>
    3e1a:	e0 93 ae 20 	sts	0x20AE, r30	; 0x8020ae <__brkval>
    3e1e:	f0 93 af 20 	sts	0x20AF, r31	; 0x8020af <__brkval+0x1>
    3e22:	67 c0       	rjmp	.+206    	; 0x3ef2 <free+0x10c>
    3e24:	ed 01       	movw	r28, r26
    3e26:	20 e0       	ldi	r18, 0x00	; 0
    3e28:	30 e0       	ldi	r19, 0x00	; 0
    3e2a:	ce 17       	cp	r28, r30
    3e2c:	df 07       	cpc	r29, r31
    3e2e:	40 f4       	brcc	.+16     	; 0x3e40 <free+0x5a>
    3e30:	4a 81       	ldd	r20, Y+2	; 0x02
    3e32:	5b 81       	ldd	r21, Y+3	; 0x03
    3e34:	9e 01       	movw	r18, r28
    3e36:	41 15       	cp	r20, r1
    3e38:	51 05       	cpc	r21, r1
    3e3a:	f1 f0       	breq	.+60     	; 0x3e78 <free+0x92>
    3e3c:	ea 01       	movw	r28, r20
    3e3e:	f5 cf       	rjmp	.-22     	; 0x3e2a <free+0x44>
    3e40:	c2 83       	std	Z+2, r28	; 0x02
    3e42:	d3 83       	std	Z+3, r29	; 0x03
    3e44:	40 81       	ld	r20, Z
    3e46:	51 81       	ldd	r21, Z+1	; 0x01
    3e48:	84 0f       	add	r24, r20
    3e4a:	95 1f       	adc	r25, r21
    3e4c:	c8 17       	cp	r28, r24
    3e4e:	d9 07       	cpc	r29, r25
    3e50:	59 f4       	brne	.+22     	; 0x3e68 <free+0x82>
    3e52:	88 81       	ld	r24, Y
    3e54:	99 81       	ldd	r25, Y+1	; 0x01
    3e56:	84 0f       	add	r24, r20
    3e58:	95 1f       	adc	r25, r21
    3e5a:	02 96       	adiw	r24, 0x02	; 2
    3e5c:	80 83       	st	Z, r24
    3e5e:	91 83       	std	Z+1, r25	; 0x01
    3e60:	8a 81       	ldd	r24, Y+2	; 0x02
    3e62:	9b 81       	ldd	r25, Y+3	; 0x03
    3e64:	82 83       	std	Z+2, r24	; 0x02
    3e66:	93 83       	std	Z+3, r25	; 0x03
    3e68:	21 15       	cp	r18, r1
    3e6a:	31 05       	cpc	r19, r1
    3e6c:	29 f4       	brne	.+10     	; 0x3e78 <free+0x92>
    3e6e:	e0 93 b0 20 	sts	0x20B0, r30	; 0x8020b0 <__flp>
    3e72:	f0 93 b1 20 	sts	0x20B1, r31	; 0x8020b1 <__flp+0x1>
    3e76:	3d c0       	rjmp	.+122    	; 0x3ef2 <free+0x10c>
    3e78:	e9 01       	movw	r28, r18
    3e7a:	ea 83       	std	Y+2, r30	; 0x02
    3e7c:	fb 83       	std	Y+3, r31	; 0x03
    3e7e:	49 91       	ld	r20, Y+
    3e80:	59 91       	ld	r21, Y+
    3e82:	c4 0f       	add	r28, r20
    3e84:	d5 1f       	adc	r29, r21
    3e86:	ec 17       	cp	r30, r28
    3e88:	fd 07       	cpc	r31, r29
    3e8a:	61 f4       	brne	.+24     	; 0x3ea4 <free+0xbe>
    3e8c:	80 81       	ld	r24, Z
    3e8e:	91 81       	ldd	r25, Z+1	; 0x01
    3e90:	84 0f       	add	r24, r20
    3e92:	95 1f       	adc	r25, r21
    3e94:	02 96       	adiw	r24, 0x02	; 2
    3e96:	e9 01       	movw	r28, r18
    3e98:	88 83       	st	Y, r24
    3e9a:	99 83       	std	Y+1, r25	; 0x01
    3e9c:	82 81       	ldd	r24, Z+2	; 0x02
    3e9e:	93 81       	ldd	r25, Z+3	; 0x03
    3ea0:	8a 83       	std	Y+2, r24	; 0x02
    3ea2:	9b 83       	std	Y+3, r25	; 0x03
    3ea4:	e0 e0       	ldi	r30, 0x00	; 0
    3ea6:	f0 e0       	ldi	r31, 0x00	; 0
    3ea8:	12 96       	adiw	r26, 0x02	; 2
    3eaa:	8d 91       	ld	r24, X+
    3eac:	9c 91       	ld	r25, X
    3eae:	13 97       	sbiw	r26, 0x03	; 3
    3eb0:	00 97       	sbiw	r24, 0x00	; 0
    3eb2:	19 f0       	breq	.+6      	; 0x3eba <free+0xd4>
    3eb4:	fd 01       	movw	r30, r26
    3eb6:	dc 01       	movw	r26, r24
    3eb8:	f7 cf       	rjmp	.-18     	; 0x3ea8 <free+0xc2>
    3eba:	8d 91       	ld	r24, X+
    3ebc:	9c 91       	ld	r25, X
    3ebe:	11 97       	sbiw	r26, 0x01	; 1
    3ec0:	9d 01       	movw	r18, r26
    3ec2:	2e 5f       	subi	r18, 0xFE	; 254
    3ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec6:	82 0f       	add	r24, r18
    3ec8:	93 1f       	adc	r25, r19
    3eca:	20 91 ae 20 	lds	r18, 0x20AE	; 0x8020ae <__brkval>
    3ece:	30 91 af 20 	lds	r19, 0x20AF	; 0x8020af <__brkval+0x1>
    3ed2:	28 17       	cp	r18, r24
    3ed4:	39 07       	cpc	r19, r25
    3ed6:	69 f4       	brne	.+26     	; 0x3ef2 <free+0x10c>
    3ed8:	30 97       	sbiw	r30, 0x00	; 0
    3eda:	29 f4       	brne	.+10     	; 0x3ee6 <free+0x100>
    3edc:	10 92 b0 20 	sts	0x20B0, r1	; 0x8020b0 <__flp>
    3ee0:	10 92 b1 20 	sts	0x20B1, r1	; 0x8020b1 <__flp+0x1>
    3ee4:	02 c0       	rjmp	.+4      	; 0x3eea <free+0x104>
    3ee6:	12 82       	std	Z+2, r1	; 0x02
    3ee8:	13 82       	std	Z+3, r1	; 0x03
    3eea:	a0 93 ae 20 	sts	0x20AE, r26	; 0x8020ae <__brkval>
    3eee:	b0 93 af 20 	sts	0x20AF, r27	; 0x8020af <__brkval+0x1>
    3ef2:	df 91       	pop	r29
    3ef4:	cf 91       	pop	r28
    3ef6:	08 95       	ret

00003ef8 <memset>:
    3ef8:	dc 01       	movw	r26, r24
    3efa:	01 c0       	rjmp	.+2      	; 0x3efe <memset+0x6>
    3efc:	6d 93       	st	X+, r22
    3efe:	41 50       	subi	r20, 0x01	; 1
    3f00:	50 40       	sbci	r21, 0x00	; 0
    3f02:	e0 f7       	brcc	.-8      	; 0x3efc <memset+0x4>
    3f04:	08 95       	ret

00003f06 <_exit>:
    3f06:	f8 94       	cli

00003f08 <__stop_program>:
    3f08:	ff cf       	rjmp	.-2      	; 0x3f08 <__stop_program>
