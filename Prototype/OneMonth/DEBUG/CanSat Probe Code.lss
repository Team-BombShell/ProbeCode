
CanSat Probe Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000066  00802000  000047ac  00004840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000085  00802066  00802066  000048a6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000048a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004904  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005a0  00000000  00000000  00004948  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011602  00000000  00000000  00004ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005e52  00000000  00000000  000164ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00008f84  00000000  00000000  0001c33c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d5c  00000000  00000000  000252c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00034b08  00000000  00000000  0002701c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000673c  00000000  00000000  0005bb24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000518  00000000  00000000  00062260  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c3fc  00000000  00000000  00062778  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bf c1       	rjmp	.+894    	; 0x380 <__ctors_end>
       2:	00 00       	nop
       4:	e3 c1       	rjmp	.+966    	; 0x3cc <__bad_interrupt>
       6:	00 00       	nop
       8:	e1 c1       	rjmp	.+962    	; 0x3cc <__bad_interrupt>
       a:	00 00       	nop
       c:	df c1       	rjmp	.+958    	; 0x3cc <__bad_interrupt>
       e:	00 00       	nop
      10:	dd c1       	rjmp	.+954    	; 0x3cc <__bad_interrupt>
      12:	00 00       	nop
      14:	db c1       	rjmp	.+950    	; 0x3cc <__bad_interrupt>
      16:	00 00       	nop
      18:	d9 c1       	rjmp	.+946    	; 0x3cc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d7 c1       	rjmp	.+942    	; 0x3cc <__bad_interrupt>
      1e:	00 00       	nop
      20:	d5 c1       	rjmp	.+938    	; 0x3cc <__bad_interrupt>
      22:	00 00       	nop
      24:	d3 c1       	rjmp	.+934    	; 0x3cc <__bad_interrupt>
      26:	00 00       	nop
      28:	d1 c1       	rjmp	.+930    	; 0x3cc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cf c1       	rjmp	.+926    	; 0x3cc <__bad_interrupt>
      2e:	00 00       	nop
      30:	cd c1       	rjmp	.+922    	; 0x3cc <__bad_interrupt>
      32:	00 00       	nop
      34:	63 c2       	rjmp	.+1222   	; 0x4fc <__vector_13>
      36:	00 00       	nop
      38:	97 c5       	rjmp	.+2862   	; 0xb68 <__vector_14>
      3a:	00 00       	nop
      3c:	cd c5       	rjmp	.+2970   	; 0xbd8 <__vector_15>
      3e:	00 00       	nop
      40:	03 c6       	rjmp	.+3078   	; 0xc48 <__vector_16>
      42:	00 00       	nop
      44:	39 c6       	rjmp	.+3186   	; 0xcb8 <__vector_17>
      46:	00 00       	nop
      48:	6f c6       	rjmp	.+3294   	; 0xd28 <__vector_18>
      4a:	00 00       	nop
      4c:	a5 c6       	rjmp	.+3402   	; 0xd98 <__vector_19>
      4e:	00 00       	nop
      50:	db c6       	rjmp	.+3510   	; 0xe08 <__vector_20>
      52:	00 00       	nop
      54:	11 c7       	rjmp	.+3618   	; 0xe78 <__vector_21>
      56:	00 00       	nop
      58:	47 c7       	rjmp	.+3726   	; 0xee8 <__vector_22>
      5a:	00 00       	nop
      5c:	7d c7       	rjmp	.+3834   	; 0xf58 <__vector_23>
      5e:	00 00       	nop
      60:	b5 c1       	rjmp	.+874    	; 0x3cc <__bad_interrupt>
      62:	00 00       	nop
      64:	b3 c1       	rjmp	.+870    	; 0x3cc <__bad_interrupt>
      66:	00 00       	nop
      68:	b1 c1       	rjmp	.+866    	; 0x3cc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	af c1       	rjmp	.+862    	; 0x3cc <__bad_interrupt>
      6e:	00 00       	nop
      70:	ad c1       	rjmp	.+858    	; 0x3cc <__bad_interrupt>
      72:	00 00       	nop
      74:	ab c1       	rjmp	.+854    	; 0x3cc <__bad_interrupt>
      76:	00 00       	nop
      78:	a9 c1       	rjmp	.+850    	; 0x3cc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a7 c1       	rjmp	.+846    	; 0x3cc <__bad_interrupt>
      7e:	00 00       	nop
      80:	a5 c1       	rjmp	.+842    	; 0x3cc <__bad_interrupt>
      82:	00 00       	nop
      84:	a3 c1       	rjmp	.+838    	; 0x3cc <__bad_interrupt>
      86:	00 00       	nop
      88:	a1 c1       	rjmp	.+834    	; 0x3cc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9f c1       	rjmp	.+830    	; 0x3cc <__bad_interrupt>
      8e:	00 00       	nop
      90:	9d c1       	rjmp	.+826    	; 0x3cc <__bad_interrupt>
      92:	00 00       	nop
      94:	9b c1       	rjmp	.+822    	; 0x3cc <__bad_interrupt>
      96:	00 00       	nop
      98:	99 c1       	rjmp	.+818    	; 0x3cc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	61 c4       	rjmp	.+2242   	; 0x960 <__vector_39>
      9e:	00 00       	nop
      a0:	9c c4       	rjmp	.+2360   	; 0x9da <__vector_40>
      a2:	00 00       	nop
      a4:	d7 c4       	rjmp	.+2478   	; 0xa54 <__vector_41>
      a6:	00 00       	nop
      a8:	12 c5       	rjmp	.+2596   	; 0xace <__vector_42>
      aa:	00 00       	nop
      ac:	0c 94 84 11 	jmp	0x2308	; 0x2308 <__vector_43>
      b0:	8d c1       	rjmp	.+794    	; 0x3cc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	8b c1       	rjmp	.+790    	; 0x3cc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	85 c2       	rjmp	.+1290   	; 0x5c4 <__vector_46>
      ba:	00 00       	nop
      bc:	0c 94 14 0a 	jmp	0x1428	; 0x1428 <__vector_47>
      c0:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__vector_48>
      c4:	0c 94 84 0a 	jmp	0x1508	; 0x1508 <__vector_49>
      c8:	0c 94 bc 0a 	jmp	0x1578	; 0x1578 <__vector_50>
      cc:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__vector_51>
      d0:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__vector_52>
      d4:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__vector_53>
      d8:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <__vector_54>
      dc:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__vector_55>
      e0:	0c 94 0c 0c 	jmp	0x1818	; 0x1818 <__vector_56>
      e4:	73 c1       	rjmp	.+742    	; 0x3cc <__bad_interrupt>
      e6:	00 00       	nop
      e8:	71 c1       	rjmp	.+738    	; 0x3cc <__bad_interrupt>
      ea:	00 00       	nop
      ec:	6f c1       	rjmp	.+734    	; 0x3cc <__bad_interrupt>
      ee:	00 00       	nop
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <__bad_interrupt>
      f2:	00 00       	nop
      f4:	6b c1       	rjmp	.+726    	; 0x3cc <__bad_interrupt>
      f6:	00 00       	nop
      f8:	69 c1       	rjmp	.+722    	; 0x3cc <__bad_interrupt>
      fa:	00 00       	nop
      fc:	67 c1       	rjmp	.+718    	; 0x3cc <__bad_interrupt>
      fe:	00 00       	nop
     100:	65 c1       	rjmp	.+714    	; 0x3cc <__bad_interrupt>
     102:	00 00       	nop
     104:	63 c1       	rjmp	.+710    	; 0x3cc <__bad_interrupt>
     106:	00 00       	nop
     108:	61 c1       	rjmp	.+706    	; 0x3cc <__bad_interrupt>
     10a:	00 00       	nop
     10c:	5f c1       	rjmp	.+702    	; 0x3cc <__bad_interrupt>
     10e:	00 00       	nop
     110:	5d c1       	rjmp	.+698    	; 0x3cc <__bad_interrupt>
     112:	00 00       	nop
     114:	5b c1       	rjmp	.+694    	; 0x3cc <__bad_interrupt>
     116:	00 00       	nop
     118:	59 c1       	rjmp	.+690    	; 0x3cc <__bad_interrupt>
     11a:	00 00       	nop
     11c:	2d c3       	rjmp	.+1626   	; 0x778 <__vector_71>
     11e:	00 00       	nop
     120:	68 c3       	rjmp	.+1744   	; 0x7f2 <__vector_72>
     122:	00 00       	nop
     124:	a3 c3       	rjmp	.+1862   	; 0x86c <__vector_73>
     126:	00 00       	nop
     128:	de c3       	rjmp	.+1980   	; 0x8e6 <__vector_74>
     12a:	00 00       	nop
     12c:	4f c1       	rjmp	.+670    	; 0x3cc <__bad_interrupt>
     12e:	00 00       	nop
     130:	17 c2       	rjmp	.+1070   	; 0x560 <__vector_76>
     132:	00 00       	nop
     134:	49 c7       	rjmp	.+3730   	; 0xfc8 <__vector_77>
     136:	00 00       	nop
     138:	7f c7       	rjmp	.+3838   	; 0x1038 <__vector_78>
     13a:	00 00       	nop
     13c:	b5 c7       	rjmp	.+3946   	; 0x10a8 <__vector_79>
     13e:	00 00       	nop
     140:	eb c7       	rjmp	.+4054   	; 0x1118 <__vector_80>
     142:	00 00       	nop
     144:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__vector_81>
     148:	0c 94 fc 08 	jmp	0x11f8	; 0x11f8 <__vector_82>
     14c:	0c 94 34 09 	jmp	0x1268	; 0x1268 <__vector_83>
     150:	0c 94 6c 09 	jmp	0x12d8	; 0x12d8 <__vector_84>
     154:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__vector_85>
     158:	0c 94 dc 09 	jmp	0x13b8	; 0x13b8 <__vector_86>
     15c:	37 c1       	rjmp	.+622    	; 0x3cc <__bad_interrupt>
     15e:	00 00       	nop
     160:	35 c1       	rjmp	.+618    	; 0x3cc <__bad_interrupt>
     162:	00 00       	nop
     164:	33 c1       	rjmp	.+614    	; 0x3cc <__bad_interrupt>
     166:	00 00       	nop
     168:	31 c1       	rjmp	.+610    	; 0x3cc <__bad_interrupt>
     16a:	00 00       	nop
     16c:	2f c1       	rjmp	.+606    	; 0x3cc <__bad_interrupt>
     16e:	00 00       	nop
     170:	2d c1       	rjmp	.+602    	; 0x3cc <__bad_interrupt>
     172:	00 00       	nop
     174:	2b c1       	rjmp	.+598    	; 0x3cc <__bad_interrupt>
     176:	00 00       	nop
     178:	29 c1       	rjmp	.+594    	; 0x3cc <__bad_interrupt>
     17a:	00 00       	nop
     17c:	27 c1       	rjmp	.+590    	; 0x3cc <__bad_interrupt>
     17e:	00 00       	nop
     180:	25 c1       	rjmp	.+586    	; 0x3cc <__bad_interrupt>
     182:	00 00       	nop
     184:	23 c1       	rjmp	.+582    	; 0x3cc <__bad_interrupt>
     186:	00 00       	nop
     188:	21 c1       	rjmp	.+578    	; 0x3cc <__bad_interrupt>
     18a:	00 00       	nop
     18c:	1f c1       	rjmp	.+574    	; 0x3cc <__bad_interrupt>
     18e:	00 00       	nop
     190:	1d c1       	rjmp	.+570    	; 0x3cc <__bad_interrupt>
     192:	00 00       	nop
     194:	1b c1       	rjmp	.+566    	; 0x3cc <__bad_interrupt>
     196:	00 00       	nop
     198:	19 c1       	rjmp	.+562    	; 0x3cc <__bad_interrupt>
     19a:	00 00       	nop
     19c:	17 c1       	rjmp	.+558    	; 0x3cc <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	15 c1       	rjmp	.+554    	; 0x3cc <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	13 c1       	rjmp	.+550    	; 0x3cc <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	11 c1       	rjmp	.+546    	; 0x3cc <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	3d c2       	rjmp	.+1146   	; 0x628 <__vector_107>
     1ae:	00 00       	nop
     1b0:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__vector_108>
     1b4:	0c 94 7c 0c 	jmp	0x18f8	; 0x18f8 <__vector_109>
     1b8:	0c 94 b4 0c 	jmp	0x1968	; 0x1968 <__vector_110>
     1bc:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__vector_111>
     1c0:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__vector_112>
     1c4:	0c 94 5c 0d 	jmp	0x1ab8	; 0x1ab8 <__vector_113>
     1c8:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <__vector_114>
     1cc:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__vector_115>
     1d0:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <__vector_116>
     1d4:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__vector_117>
     1d8:	f9 c0       	rjmp	.+498    	; 0x3cc <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	f7 c0       	rjmp	.+494    	; 0x3cc <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	f5 c0       	rjmp	.+490    	; 0x3cc <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	f3 c0       	rjmp	.+486    	; 0x3cc <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	f1 c0       	rjmp	.+482    	; 0x3cc <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	ef c0       	rjmp	.+478    	; 0x3cc <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	ed c0       	rjmp	.+474    	; 0x3cc <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	eb c0       	rjmp	.+470    	; 0x3cc <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	e9 c0       	rjmp	.+466    	; 0x3cc <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 00       	.word	0x0008	; ????
     1fe:	00 00       	nop
     200:	be 92       	st	-X, r11
     202:	24 49       	sbci	r18, 0x94	; 148
     204:	12 3e       	cpi	r17, 0xE2	; 226
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	be cd       	rjmp	.-1156   	; 0xfffffd88 <__eeprom_end+0xff7efd88>
     20c:	cc cc       	rjmp	.-1640   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     20e:	4c 3e       	cpi	r20, 0xEC	; 236
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	be ab       	std	Y+54, r27	; 0x36
     216:	aa aa       	std	Y+50, r10	; 0x32
     218:	aa 3e       	cpi	r26, 0xEA	; 234
     21a:	00 00       	nop
     21c:	00 00       	nop
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	00 00       	nop
     226:	00 00       	nop
     228:	00 08       	sbc	r0, r0
     22a:	41 78       	andi	r20, 0x81	; 129
     22c:	d3 bb       	out	0x13, r29	; 19
     22e:	43 87       	std	Z+11, r20	; 0x0b
     230:	d1 13       	cpse	r29, r17
     232:	3d 19       	sub	r19, r13
     234:	0e 3c       	cpi	r16, 0xCE	; 206
     236:	c3 bd       	out	0x23, r28	; 35
     238:	42 82       	std	Z+2, r4	; 0x02
     23a:	ad 2b       	or	r26, r29
     23c:	3e 68       	ori	r19, 0x8E	; 142
     23e:	ec 82       	std	Y+4, r14	; 0x04
     240:	76 be       	out	0x36, r7	; 54
     242:	d9 8f       	std	Y+25, r29	; 0x19
     244:	e1 a9       	ldd	r30, Z+49	; 0x31
     246:	3e 4c       	sbci	r19, 0xCE	; 206
     248:	80 ef       	ldi	r24, 0xF0	; 240
     24a:	ff be       	out	0x3f, r15	; 63
     24c:	01 c4       	rjmp	.+2050   	; 0xa50 <__vector_40+0x76>
     24e:	ff 7f       	andi	r31, 0xFF	; 255
     250:	3f 00       	.word	0x003f	; ????
     252:	00 00       	nop
     254:	00 00       	nop
     256:	07 63       	ori	r16, 0x37	; 55
     258:	42 36       	cpi	r20, 0x62	; 98
     25a:	b7 9b       	sbis	0x16, 7	; 22
     25c:	d8 a7       	std	Y+40, r29	; 0x28
     25e:	1a 39       	cpi	r17, 0x9A	; 154
     260:	68 56       	subi	r22, 0x68	; 104
     262:	18 ae       	std	Y+56, r1	; 0x38
     264:	ba ab       	std	Y+50, r27	; 0x32
     266:	55 8c       	ldd	r5, Z+29	; 0x1d
     268:	1d 3c       	cpi	r17, 0xCD	; 205
     26a:	b7 cc       	rjmp	.-1682   	; 0xfffffbda <__eeprom_end+0xff7efbda>
     26c:	57 63       	ori	r21, 0x37	; 55
     26e:	bd 6d       	ori	r27, 0xDD	; 221
     270:	ed fd       	.word	0xfded	; ????
     272:	75 3e       	cpi	r23, 0xE5	; 229
     274:	f6 17       	cp	r31, r22
     276:	72 31       	cpi	r23, 0x12	; 18
     278:	bf 00       	.word	0x00bf	; ????
     27a:	00 00       	nop
     27c:	80 3f       	cpi	r24, 0xF0	; 240

0000027e <__trampolines_end>:
     27e:	6e 61       	ori	r22, 0x1E	; 30
     280:	6e 00       	.word	0x006e	; ????

00000282 <__c.2332>:
     282:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     292:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2a2:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2b2:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2c2:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2d2:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2e2:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2f2:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     302:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     312:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     322:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     332:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     342:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     352:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     362:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     372:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000380 <__ctors_end>:
     380:	11 24       	eor	r1, r1
     382:	1f be       	out	0x3f, r1	; 63
     384:	cf ef       	ldi	r28, 0xFF	; 255
     386:	cd bf       	out	0x3d, r28	; 61
     388:	df e3       	ldi	r29, 0x3F	; 63
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	00 e0       	ldi	r16, 0x00	; 0
     38e:	0c bf       	out	0x3c, r16	; 60
     390:	18 be       	out	0x38, r1	; 56
     392:	19 be       	out	0x39, r1	; 57
     394:	1a be       	out	0x3a, r1	; 58
     396:	1b be       	out	0x3b, r1	; 59

00000398 <__do_copy_data>:
     398:	10 e2       	ldi	r17, 0x20	; 32
     39a:	a0 e0       	ldi	r26, 0x00	; 0
     39c:	b0 e2       	ldi	r27, 0x20	; 32
     39e:	ec ea       	ldi	r30, 0xAC	; 172
     3a0:	f7 e4       	ldi	r31, 0x47	; 71
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	0b bf       	out	0x3b, r16	; 59
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <__do_copy_data+0x14>
     3a8:	07 90       	elpm	r0, Z+
     3aa:	0d 92       	st	X+, r0
     3ac:	a6 36       	cpi	r26, 0x66	; 102
     3ae:	b1 07       	cpc	r27, r17
     3b0:	d9 f7       	brne	.-10     	; 0x3a8 <__do_copy_data+0x10>
     3b2:	1b be       	out	0x3b, r1	; 59

000003b4 <__do_clear_bss>:
     3b4:	20 e2       	ldi	r18, 0x20	; 32
     3b6:	a6 e6       	ldi	r26, 0x66	; 102
     3b8:	b0 e2       	ldi	r27, 0x20	; 32
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <.do_clear_bss_start>

000003bc <.do_clear_bss_loop>:
     3bc:	1d 92       	st	X+, r1

000003be <.do_clear_bss_start>:
     3be:	ab 3e       	cpi	r26, 0xEB	; 235
     3c0:	b2 07       	cpc	r27, r18
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <.do_clear_bss_loop>
     3c4:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <main>
     3c8:	0c 94 d4 23 	jmp	0x47a8	; 0x47a8 <_exit>

000003cc <__bad_interrupt>:
     3cc:	19 ce       	rjmp	.-974    	; 0x0 <__vectors>

000003ce <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     3d2:	e0 91 66 20 	lds	r30, 0x2066	; 0x802066 <__data_end>
     3d6:	f0 91 67 20 	lds	r31, 0x2067	; 0x802067 <__data_end+0x1>
     3da:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     3dc:	83 ff       	sbrs	r24, 3
     3de:	08 c0       	rjmp	.+16     	; 0x3f0 <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     3e0:	88 60       	ori	r24, 0x08	; 8
     3e2:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     3e4:	83 e0       	ldi	r24, 0x03	; 3
     3e6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     3e8:	86 ef       	ldi	r24, 0xF6	; 246
     3ea:	80 93 70 20 	sts	0x2070, r24	; 0x802070 <__data_end+0xa>
     3ee:	83 c0       	rjmp	.+262    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     3f0:	98 2f       	mov	r25, r24
     3f2:	94 71       	andi	r25, 0x14	; 20
     3f4:	31 f0       	breq	.+12     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     3f6:	83 e0       	ldi	r24, 0x03	; 3
     3f8:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     3fa:	8f ef       	ldi	r24, 0xFF	; 255
     3fc:	80 93 70 20 	sts	0x2070, r24	; 0x802070 <__data_end+0xa>
     400:	7a c0       	rjmp	.+244    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     402:	86 ff       	sbrs	r24, 6
     404:	43 c0       	rjmp	.+134    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     406:	c6 e6       	ldi	r28, 0x66	; 102
     408:	d0 e2       	ldi	r29, 0x20	; 32
     40a:	aa 81       	ldd	r26, Y+2	; 0x02
     40c:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     40e:	8c 81       	ldd	r24, Y+4	; 0x04
     410:	9d 81       	ldd	r25, Y+5	; 0x05
     412:	14 96       	adiw	r26, 0x04	; 4
     414:	2d 91       	ld	r18, X+
     416:	3c 91       	ld	r19, X
     418:	15 97       	sbiw	r26, 0x05	; 5
     41a:	82 17       	cp	r24, r18
     41c:	93 07       	cpc	r25, r19
     41e:	6c f4       	brge	.+26     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     420:	9c 01       	movw	r18, r24
     422:	2f 5f       	subi	r18, 0xFF	; 255
     424:	3f 4f       	sbci	r19, 0xFF	; 255
     426:	20 93 6a 20 	sts	0x206A, r18	; 0x80206a <__data_end+0x4>
     42a:	30 93 6b 20 	sts	0x206B, r19	; 0x80206b <__data_end+0x5>
     42e:	a8 0f       	add	r26, r24
     430:	b9 1f       	adc	r27, r25
     432:	11 96       	adiw	r26, 0x01	; 1
     434:	8c 91       	ld	r24, X
     436:	87 83       	std	Z+7, r24	; 0x07
     438:	5e c0       	rjmp	.+188    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>

	} else if (transfer.data_count < pkg->length) {
     43a:	80 91 6c 20 	lds	r24, 0x206C	; 0x80206c <__data_end+0x6>
     43e:	90 91 6d 20 	lds	r25, 0x206D	; 0x80206d <__data_end+0x7>
     442:	18 96       	adiw	r26, 0x08	; 8
     444:	2d 91       	ld	r18, X+
     446:	3c 91       	ld	r19, X
     448:	19 97       	sbiw	r26, 0x09	; 9
     44a:	82 17       	cp	r24, r18
     44c:	93 07       	cpc	r25, r19
     44e:	c8 f4       	brcc	.+50     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>

		if (transfer.read) {
     450:	20 91 6e 20 	lds	r18, 0x206E	; 0x80206e <__data_end+0x8>
     454:	22 23       	and	r18, r18
     456:	21 f0       	breq	.+8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     458:	86 81       	ldd	r24, Z+6	; 0x06
     45a:	81 60       	ori	r24, 0x01	; 1
     45c:	86 83       	std	Z+6, r24	; 0x06
     45e:	4b c0       	rjmp	.+150    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>

		} else {
			const uint8_t * const data = pkg->buffer;
     460:	16 96       	adiw	r26, 0x06	; 6
     462:	2d 91       	ld	r18, X+
     464:	3c 91       	ld	r19, X
     466:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     468:	ac 01       	movw	r20, r24
     46a:	4f 5f       	subi	r20, 0xFF	; 255
     46c:	5f 4f       	sbci	r21, 0xFF	; 255
     46e:	40 93 6c 20 	sts	0x206C, r20	; 0x80206c <__data_end+0x6>
     472:	50 93 6d 20 	sts	0x206D, r21	; 0x80206d <__data_end+0x7>
     476:	d9 01       	movw	r26, r18
     478:	a8 0f       	add	r26, r24
     47a:	b9 1f       	adc	r27, r25
     47c:	8c 91       	ld	r24, X
     47e:	87 83       	std	Z+7, r24	; 0x07
     480:	3a c0       	rjmp	.+116    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     482:	83 e0       	ldi	r24, 0x03	; 3
     484:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     486:	10 92 70 20 	sts	0x2070, r1	; 0x802070 <__data_end+0xa>
     48a:	35 c0       	rjmp	.+106    	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     48c:	88 23       	and	r24, r24
     48e:	84 f5       	brge	.+96     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     490:	a6 e6       	ldi	r26, 0x66	; 102
     492:	b0 e2       	ldi	r27, 0x20	; 32
     494:	12 96       	adiw	r26, 0x02	; 2
     496:	cd 91       	ld	r28, X+
     498:	dc 91       	ld	r29, X
     49a:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     49c:	16 96       	adiw	r26, 0x06	; 6
     49e:	8d 91       	ld	r24, X+
     4a0:	9c 91       	ld	r25, X
     4a2:	17 97       	sbiw	r26, 0x07	; 7
     4a4:	28 85       	ldd	r18, Y+8	; 0x08
     4a6:	39 85       	ldd	r19, Y+9	; 0x09
     4a8:	82 17       	cp	r24, r18
     4aa:	93 07       	cpc	r25, r19
     4ac:	d8 f4       	brcc	.+54     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>

		uint8_t * const data = pkg->buffer;
     4ae:	6e 81       	ldd	r22, Y+6	; 0x06
     4b0:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     4b2:	9c 01       	movw	r18, r24
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	20 93 6c 20 	sts	0x206C, r18	; 0x80206c <__data_end+0x6>
     4bc:	30 93 6d 20 	sts	0x206D, r19	; 0x80206d <__data_end+0x7>
     4c0:	47 81       	ldd	r20, Z+7	; 0x07
     4c2:	db 01       	movw	r26, r22
     4c4:	a8 0f       	add	r26, r24
     4c6:	b9 1f       	adc	r27, r25
     4c8:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     4ca:	88 85       	ldd	r24, Y+8	; 0x08
     4cc:	99 85       	ldd	r25, Y+9	; 0x09
     4ce:	28 17       	cp	r18, r24
     4d0:	39 07       	cpc	r19, r25
     4d2:	18 f4       	brcc	.+6      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	83 83       	std	Z+3, r24	; 0x03
     4d8:	0e c0       	rjmp	.+28     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     4da:	87 e0       	ldi	r24, 0x07	; 7
     4dc:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     4de:	10 92 70 20 	sts	0x2070, r1	; 0x802070 <__data_end+0xa>
     4e2:	09 c0       	rjmp	.+18     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     4e4:	83 e0       	ldi	r24, 0x03	; 3
     4e6:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     4e8:	89 ef       	ldi	r24, 0xF9	; 249
     4ea:	80 93 70 20 	sts	0x2070, r24	; 0x802070 <__data_end+0xa>
     4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     4f0:	8b ef       	ldi	r24, 0xFB	; 251
     4f2:	80 93 70 20 	sts	0x2070, r24	; 0x802070 <__data_end+0xa>
	}
}
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     4fc:	1f 92       	push	r1
     4fe:	0f 92       	push	r0
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	0f 92       	push	r0
     504:	11 24       	eor	r1, r1
     506:	08 b6       	in	r0, 0x38	; 56
     508:	0f 92       	push	r0
     50a:	18 be       	out	0x38, r1	; 56
     50c:	09 b6       	in	r0, 0x39	; 57
     50e:	0f 92       	push	r0
     510:	19 be       	out	0x39, r1	; 57
     512:	0b b6       	in	r0, 0x3b	; 59
     514:	0f 92       	push	r0
     516:	1b be       	out	0x3b, r1	; 59
     518:	2f 93       	push	r18
     51a:	3f 93       	push	r19
     51c:	4f 93       	push	r20
     51e:	5f 93       	push	r21
     520:	6f 93       	push	r22
     522:	7f 93       	push	r23
     524:	8f 93       	push	r24
     526:	9f 93       	push	r25
     528:	af 93       	push	r26
     52a:	bf 93       	push	r27
     52c:	ef 93       	push	r30
     52e:	ff 93       	push	r31
     530:	4e df       	rcall	.-356    	; 0x3ce <twim_interrupt_handler>
     532:	ff 91       	pop	r31
     534:	ef 91       	pop	r30
     536:	bf 91       	pop	r27
     538:	af 91       	pop	r26
     53a:	9f 91       	pop	r25
     53c:	8f 91       	pop	r24
     53e:	7f 91       	pop	r23
     540:	6f 91       	pop	r22
     542:	5f 91       	pop	r21
     544:	4f 91       	pop	r20
     546:	3f 91       	pop	r19
     548:	2f 91       	pop	r18
     54a:	0f 90       	pop	r0
     54c:	0b be       	out	0x3b, r0	; 59
     54e:	0f 90       	pop	r0
     550:	09 be       	out	0x39, r0	; 57
     552:	0f 90       	pop	r0
     554:	08 be       	out	0x38, r0	; 56
     556:	0f 90       	pop	r0
     558:	0f be       	out	0x3f, r0	; 63
     55a:	0f 90       	pop	r0
     55c:	1f 90       	pop	r1
     55e:	18 95       	reti

00000560 <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	08 b6       	in	r0, 0x38	; 56
     56c:	0f 92       	push	r0
     56e:	18 be       	out	0x38, r1	; 56
     570:	09 b6       	in	r0, 0x39	; 57
     572:	0f 92       	push	r0
     574:	19 be       	out	0x39, r1	; 57
     576:	0b b6       	in	r0, 0x3b	; 59
     578:	0f 92       	push	r0
     57a:	1b be       	out	0x3b, r1	; 59
     57c:	2f 93       	push	r18
     57e:	3f 93       	push	r19
     580:	4f 93       	push	r20
     582:	5f 93       	push	r21
     584:	6f 93       	push	r22
     586:	7f 93       	push	r23
     588:	8f 93       	push	r24
     58a:	9f 93       	push	r25
     58c:	af 93       	push	r26
     58e:	bf 93       	push	r27
     590:	ef 93       	push	r30
     592:	ff 93       	push	r31
     594:	1c df       	rcall	.-456    	; 0x3ce <twim_interrupt_handler>
     596:	ff 91       	pop	r31
     598:	ef 91       	pop	r30
     59a:	bf 91       	pop	r27
     59c:	af 91       	pop	r26
     59e:	9f 91       	pop	r25
     5a0:	8f 91       	pop	r24
     5a2:	7f 91       	pop	r23
     5a4:	6f 91       	pop	r22
     5a6:	5f 91       	pop	r21
     5a8:	4f 91       	pop	r20
     5aa:	3f 91       	pop	r19
     5ac:	2f 91       	pop	r18
     5ae:	0f 90       	pop	r0
     5b0:	0b be       	out	0x3b, r0	; 59
     5b2:	0f 90       	pop	r0
     5b4:	09 be       	out	0x39, r0	; 57
     5b6:	0f 90       	pop	r0
     5b8:	08 be       	out	0x38, r0	; 56
     5ba:	0f 90       	pop	r0
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	0f 90       	pop	r0
     5c0:	1f 90       	pop	r1
     5c2:	18 95       	reti

000005c4 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     5c4:	1f 92       	push	r1
     5c6:	0f 92       	push	r0
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	0f 92       	push	r0
     5cc:	11 24       	eor	r1, r1
     5ce:	08 b6       	in	r0, 0x38	; 56
     5d0:	0f 92       	push	r0
     5d2:	18 be       	out	0x38, r1	; 56
     5d4:	09 b6       	in	r0, 0x39	; 57
     5d6:	0f 92       	push	r0
     5d8:	19 be       	out	0x39, r1	; 57
     5da:	0b b6       	in	r0, 0x3b	; 59
     5dc:	0f 92       	push	r0
     5de:	1b be       	out	0x3b, r1	; 59
     5e0:	2f 93       	push	r18
     5e2:	3f 93       	push	r19
     5e4:	4f 93       	push	r20
     5e6:	5f 93       	push	r21
     5e8:	6f 93       	push	r22
     5ea:	7f 93       	push	r23
     5ec:	8f 93       	push	r24
     5ee:	9f 93       	push	r25
     5f0:	af 93       	push	r26
     5f2:	bf 93       	push	r27
     5f4:	ef 93       	push	r30
     5f6:	ff 93       	push	r31
     5f8:	ea de       	rcall	.-556    	; 0x3ce <twim_interrupt_handler>
     5fa:	ff 91       	pop	r31
     5fc:	ef 91       	pop	r30
     5fe:	bf 91       	pop	r27
     600:	af 91       	pop	r26
     602:	9f 91       	pop	r25
     604:	8f 91       	pop	r24
     606:	7f 91       	pop	r23
     608:	6f 91       	pop	r22
     60a:	5f 91       	pop	r21
     60c:	4f 91       	pop	r20
     60e:	3f 91       	pop	r19
     610:	2f 91       	pop	r18
     612:	0f 90       	pop	r0
     614:	0b be       	out	0x3b, r0	; 59
     616:	0f 90       	pop	r0
     618:	09 be       	out	0x39, r0	; 57
     61a:	0f 90       	pop	r0
     61c:	08 be       	out	0x38, r0	; 56
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	0f 90       	pop	r0
     624:	1f 90       	pop	r1
     626:	18 95       	reti

00000628 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     628:	1f 92       	push	r1
     62a:	0f 92       	push	r0
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	0f 92       	push	r0
     630:	11 24       	eor	r1, r1
     632:	08 b6       	in	r0, 0x38	; 56
     634:	0f 92       	push	r0
     636:	18 be       	out	0x38, r1	; 56
     638:	09 b6       	in	r0, 0x39	; 57
     63a:	0f 92       	push	r0
     63c:	19 be       	out	0x39, r1	; 57
     63e:	0b b6       	in	r0, 0x3b	; 59
     640:	0f 92       	push	r0
     642:	1b be       	out	0x3b, r1	; 59
     644:	2f 93       	push	r18
     646:	3f 93       	push	r19
     648:	4f 93       	push	r20
     64a:	5f 93       	push	r21
     64c:	6f 93       	push	r22
     64e:	7f 93       	push	r23
     650:	8f 93       	push	r24
     652:	9f 93       	push	r25
     654:	af 93       	push	r26
     656:	bf 93       	push	r27
     658:	ef 93       	push	r30
     65a:	ff 93       	push	r31
     65c:	b8 de       	rcall	.-656    	; 0x3ce <twim_interrupt_handler>
     65e:	ff 91       	pop	r31
     660:	ef 91       	pop	r30
     662:	bf 91       	pop	r27
     664:	af 91       	pop	r26
     666:	9f 91       	pop	r25
     668:	8f 91       	pop	r24
     66a:	7f 91       	pop	r23
     66c:	6f 91       	pop	r22
     66e:	5f 91       	pop	r21
     670:	4f 91       	pop	r20
     672:	3f 91       	pop	r19
     674:	2f 91       	pop	r18
     676:	0f 90       	pop	r0
     678:	0b be       	out	0x3b, r0	; 59
     67a:	0f 90       	pop	r0
     67c:	09 be       	out	0x39, r0	; 57
     67e:	0f 90       	pop	r0
     680:	08 be       	out	0x38, r0	; 56
     682:	0f 90       	pop	r0
     684:	0f be       	out	0x3f, r0	; 63
     686:	0f 90       	pop	r0
     688:	1f 90       	pop	r1
     68a:	18 95       	reti

0000068c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	1f 92       	push	r1
     692:	1f 92       	push	r1
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     698:	8f ef       	ldi	r24, 0xFF	; 255
     69a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     69e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     6a2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     6a6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     6aa:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     6ae:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     6b2:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     6b6:	8f b7       	in	r24, 0x3f	; 63
     6b8:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     6ba:	f8 94       	cli
	return flags;
     6bc:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     6be:	e0 e5       	ldi	r30, 0x50	; 80
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	80 81       	ld	r24, Z
     6c4:	82 60       	ori	r24, 0x02	; 2
     6c6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     6c8:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     6ca:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     6cc:	81 ff       	sbrs	r24, 1
     6ce:	fd cf       	rjmp	.-6      	; 0x6ca <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     6d0:	61 e0       	ldi	r22, 0x01	; 1
     6d2:	80 e4       	ldi	r24, 0x40	; 64
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	38 d2       	rcall	.+1136   	; 0xb48 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     6d8:	8f b7       	in	r24, 0x3f	; 63
     6da:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     6dc:	f8 94       	cli
	return flags;
     6de:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     6e0:	e0 e5       	ldi	r30, 0x50	; 80
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	8e 7f       	andi	r24, 0xFE	; 254
     6e8:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     6ea:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	1f 92       	push	r1
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     700:	9f b7       	in	r25, 0x3f	; 63
     702:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     704:	f8 94       	cli
	return flags;
     706:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     708:	e8 2f       	mov	r30, r24
     70a:	f0 e0       	ldi	r31, 0x00	; 0
     70c:	e0 59       	subi	r30, 0x90	; 144
     70e:	ff 4f       	sbci	r31, 0xFF	; 255
     710:	60 95       	com	r22
     712:	80 81       	ld	r24, Z
     714:	68 23       	and	r22, r24
     716:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     718:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     71a:	0f 90       	pop	r0
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     722:	cf 93       	push	r28
     724:	df 93       	push	r29
     726:	1f 92       	push	r1
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     72c:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <stdio_base>
     730:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <stdio_base+0x1>
     734:	e0 91 c7 20 	lds	r30, 0x20C7	; 0x8020c7 <ptr_get>
     738:	f0 91 c8 20 	lds	r31, 0x20C8	; 0x8020c8 <ptr_get+0x1>
     73c:	be 01       	movw	r22, r28
     73e:	6f 5f       	subi	r22, 0xFF	; 255
     740:	7f 4f       	sbci	r23, 0xFF	; 255
     742:	19 95       	eicall
	return c;
     744:	89 81       	ldd	r24, Y+1	; 0x01
}
     746:	08 2e       	mov	r0, r24
     748:	00 0c       	add	r0, r0
     74a:	99 0b       	sbc	r25, r25
     74c:	0f 90       	pop	r0
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     754:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     756:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <stdio_base>
     75a:	90 91 cc 20 	lds	r25, 0x20CC	; 0x8020cc <stdio_base+0x1>
     75e:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <ptr_put>
     762:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <ptr_put+0x1>
     766:	19 95       	eicall
     768:	99 23       	and	r25, r25
     76a:	1c f0       	brlt	.+6      	; 0x772 <_write+0x1e>
		return -1;
	}
	return 1;
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     772:	8f ef       	ldi	r24, 0xFF	; 255
     774:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     776:	08 95       	ret

00000778 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     778:	1f 92       	push	r1
     77a:	0f 92       	push	r0
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	0f 92       	push	r0
     780:	11 24       	eor	r1, r1
     782:	08 b6       	in	r0, 0x38	; 56
     784:	0f 92       	push	r0
     786:	18 be       	out	0x38, r1	; 56
     788:	09 b6       	in	r0, 0x39	; 57
     78a:	0f 92       	push	r0
     78c:	19 be       	out	0x39, r1	; 57
     78e:	0b b6       	in	r0, 0x3b	; 59
     790:	0f 92       	push	r0
     792:	1b be       	out	0x3b, r1	; 59
     794:	2f 93       	push	r18
     796:	3f 93       	push	r19
     798:	4f 93       	push	r20
     79a:	5f 93       	push	r21
     79c:	6f 93       	push	r22
     79e:	7f 93       	push	r23
     7a0:	8f 93       	push	r24
     7a2:	9f 93       	push	r25
     7a4:	af 93       	push	r26
     7a6:	bf 93       	push	r27
     7a8:	ef 93       	push	r30
     7aa:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     7ac:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     7b0:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     7b4:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <adca_callback>
     7b8:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <adca_callback+0x1>
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	19 95       	eicall
}
     7c4:	ff 91       	pop	r31
     7c6:	ef 91       	pop	r30
     7c8:	bf 91       	pop	r27
     7ca:	af 91       	pop	r26
     7cc:	9f 91       	pop	r25
     7ce:	8f 91       	pop	r24
     7d0:	7f 91       	pop	r23
     7d2:	6f 91       	pop	r22
     7d4:	5f 91       	pop	r21
     7d6:	4f 91       	pop	r20
     7d8:	3f 91       	pop	r19
     7da:	2f 91       	pop	r18
     7dc:	0f 90       	pop	r0
     7de:	0b be       	out	0x3b, r0	; 59
     7e0:	0f 90       	pop	r0
     7e2:	09 be       	out	0x39, r0	; 57
     7e4:	0f 90       	pop	r0
     7e6:	08 be       	out	0x38, r0	; 56
     7e8:	0f 90       	pop	r0
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	0f 90       	pop	r0
     7ee:	1f 90       	pop	r1
     7f0:	18 95       	reti

000007f2 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     7f2:	1f 92       	push	r1
     7f4:	0f 92       	push	r0
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	0f 92       	push	r0
     7fa:	11 24       	eor	r1, r1
     7fc:	08 b6       	in	r0, 0x38	; 56
     7fe:	0f 92       	push	r0
     800:	18 be       	out	0x38, r1	; 56
     802:	09 b6       	in	r0, 0x39	; 57
     804:	0f 92       	push	r0
     806:	19 be       	out	0x39, r1	; 57
     808:	0b b6       	in	r0, 0x3b	; 59
     80a:	0f 92       	push	r0
     80c:	1b be       	out	0x3b, r1	; 59
     80e:	2f 93       	push	r18
     810:	3f 93       	push	r19
     812:	4f 93       	push	r20
     814:	5f 93       	push	r21
     816:	6f 93       	push	r22
     818:	7f 93       	push	r23
     81a:	8f 93       	push	r24
     81c:	9f 93       	push	r25
     81e:	af 93       	push	r26
     820:	bf 93       	push	r27
     822:	ef 93       	push	r30
     824:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     826:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     82a:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     82e:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <adca_callback>
     832:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <adca_callback+0x1>
     836:	62 e0       	ldi	r22, 0x02	; 2
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	92 e0       	ldi	r25, 0x02	; 2
     83c:	19 95       	eicall
}
     83e:	ff 91       	pop	r31
     840:	ef 91       	pop	r30
     842:	bf 91       	pop	r27
     844:	af 91       	pop	r26
     846:	9f 91       	pop	r25
     848:	8f 91       	pop	r24
     84a:	7f 91       	pop	r23
     84c:	6f 91       	pop	r22
     84e:	5f 91       	pop	r21
     850:	4f 91       	pop	r20
     852:	3f 91       	pop	r19
     854:	2f 91       	pop	r18
     856:	0f 90       	pop	r0
     858:	0b be       	out	0x3b, r0	; 59
     85a:	0f 90       	pop	r0
     85c:	09 be       	out	0x39, r0	; 57
     85e:	0f 90       	pop	r0
     860:	08 be       	out	0x38, r0	; 56
     862:	0f 90       	pop	r0
     864:	0f be       	out	0x3f, r0	; 63
     866:	0f 90       	pop	r0
     868:	1f 90       	pop	r1
     86a:	18 95       	reti

0000086c <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	08 b6       	in	r0, 0x38	; 56
     878:	0f 92       	push	r0
     87a:	18 be       	out	0x38, r1	; 56
     87c:	09 b6       	in	r0, 0x39	; 57
     87e:	0f 92       	push	r0
     880:	19 be       	out	0x39, r1	; 57
     882:	0b b6       	in	r0, 0x3b	; 59
     884:	0f 92       	push	r0
     886:	1b be       	out	0x3b, r1	; 59
     888:	2f 93       	push	r18
     88a:	3f 93       	push	r19
     88c:	4f 93       	push	r20
     88e:	5f 93       	push	r21
     890:	6f 93       	push	r22
     892:	7f 93       	push	r23
     894:	8f 93       	push	r24
     896:	9f 93       	push	r25
     898:	af 93       	push	r26
     89a:	bf 93       	push	r27
     89c:	ef 93       	push	r30
     89e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     8a0:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     8a4:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     8a8:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <adca_callback>
     8ac:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <adca_callback+0x1>
     8b0:	64 e0       	ldi	r22, 0x04	; 4
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	92 e0       	ldi	r25, 0x02	; 2
     8b6:	19 95       	eicall
}
     8b8:	ff 91       	pop	r31
     8ba:	ef 91       	pop	r30
     8bc:	bf 91       	pop	r27
     8be:	af 91       	pop	r26
     8c0:	9f 91       	pop	r25
     8c2:	8f 91       	pop	r24
     8c4:	7f 91       	pop	r23
     8c6:	6f 91       	pop	r22
     8c8:	5f 91       	pop	r21
     8ca:	4f 91       	pop	r20
     8cc:	3f 91       	pop	r19
     8ce:	2f 91       	pop	r18
     8d0:	0f 90       	pop	r0
     8d2:	0b be       	out	0x3b, r0	; 59
     8d4:	0f 90       	pop	r0
     8d6:	09 be       	out	0x39, r0	; 57
     8d8:	0f 90       	pop	r0
     8da:	08 be       	out	0x38, r0	; 56
     8dc:	0f 90       	pop	r0
     8de:	0f be       	out	0x3f, r0	; 63
     8e0:	0f 90       	pop	r0
     8e2:	1f 90       	pop	r1
     8e4:	18 95       	reti

000008e6 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     8e6:	1f 92       	push	r1
     8e8:	0f 92       	push	r0
     8ea:	0f b6       	in	r0, 0x3f	; 63
     8ec:	0f 92       	push	r0
     8ee:	11 24       	eor	r1, r1
     8f0:	08 b6       	in	r0, 0x38	; 56
     8f2:	0f 92       	push	r0
     8f4:	18 be       	out	0x38, r1	; 56
     8f6:	09 b6       	in	r0, 0x39	; 57
     8f8:	0f 92       	push	r0
     8fa:	19 be       	out	0x39, r1	; 57
     8fc:	0b b6       	in	r0, 0x3b	; 59
     8fe:	0f 92       	push	r0
     900:	1b be       	out	0x3b, r1	; 59
     902:	2f 93       	push	r18
     904:	3f 93       	push	r19
     906:	4f 93       	push	r20
     908:	5f 93       	push	r21
     90a:	6f 93       	push	r22
     90c:	7f 93       	push	r23
     90e:	8f 93       	push	r24
     910:	9f 93       	push	r25
     912:	af 93       	push	r26
     914:	bf 93       	push	r27
     916:	ef 93       	push	r30
     918:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     91a:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     91e:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     922:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <adca_callback>
     926:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <adca_callback+0x1>
     92a:	68 e0       	ldi	r22, 0x08	; 8
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	92 e0       	ldi	r25, 0x02	; 2
     930:	19 95       	eicall
}
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	bf 91       	pop	r27
     938:	af 91       	pop	r26
     93a:	9f 91       	pop	r25
     93c:	8f 91       	pop	r24
     93e:	7f 91       	pop	r23
     940:	6f 91       	pop	r22
     942:	5f 91       	pop	r21
     944:	4f 91       	pop	r20
     946:	3f 91       	pop	r19
     948:	2f 91       	pop	r18
     94a:	0f 90       	pop	r0
     94c:	0b be       	out	0x3b, r0	; 59
     94e:	0f 90       	pop	r0
     950:	09 be       	out	0x39, r0	; 57
     952:	0f 90       	pop	r0
     954:	08 be       	out	0x38, r0	; 56
     956:	0f 90       	pop	r0
     958:	0f be       	out	0x3f, r0	; 63
     95a:	0f 90       	pop	r0
     95c:	1f 90       	pop	r1
     95e:	18 95       	reti

00000960 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     960:	1f 92       	push	r1
     962:	0f 92       	push	r0
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	0f 92       	push	r0
     968:	11 24       	eor	r1, r1
     96a:	08 b6       	in	r0, 0x38	; 56
     96c:	0f 92       	push	r0
     96e:	18 be       	out	0x38, r1	; 56
     970:	09 b6       	in	r0, 0x39	; 57
     972:	0f 92       	push	r0
     974:	19 be       	out	0x39, r1	; 57
     976:	0b b6       	in	r0, 0x3b	; 59
     978:	0f 92       	push	r0
     97a:	1b be       	out	0x3b, r1	; 59
     97c:	2f 93       	push	r18
     97e:	3f 93       	push	r19
     980:	4f 93       	push	r20
     982:	5f 93       	push	r21
     984:	6f 93       	push	r22
     986:	7f 93       	push	r23
     988:	8f 93       	push	r24
     98a:	9f 93       	push	r25
     98c:	af 93       	push	r26
     98e:	bf 93       	push	r27
     990:	ef 93       	push	r30
     992:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     994:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     998:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     99c:	e0 91 cd 20 	lds	r30, 0x20CD	; 0x8020cd <adcb_callback>
     9a0:	f0 91 ce 20 	lds	r31, 0x20CE	; 0x8020ce <adcb_callback+0x1>
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	80 e4       	ldi	r24, 0x40	; 64
     9a8:	92 e0       	ldi	r25, 0x02	; 2
     9aa:	19 95       	eicall
}
     9ac:	ff 91       	pop	r31
     9ae:	ef 91       	pop	r30
     9b0:	bf 91       	pop	r27
     9b2:	af 91       	pop	r26
     9b4:	9f 91       	pop	r25
     9b6:	8f 91       	pop	r24
     9b8:	7f 91       	pop	r23
     9ba:	6f 91       	pop	r22
     9bc:	5f 91       	pop	r21
     9be:	4f 91       	pop	r20
     9c0:	3f 91       	pop	r19
     9c2:	2f 91       	pop	r18
     9c4:	0f 90       	pop	r0
     9c6:	0b be       	out	0x3b, r0	; 59
     9c8:	0f 90       	pop	r0
     9ca:	09 be       	out	0x39, r0	; 57
     9cc:	0f 90       	pop	r0
     9ce:	08 be       	out	0x38, r0	; 56
     9d0:	0f 90       	pop	r0
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	0f 90       	pop	r0
     9d6:	1f 90       	pop	r1
     9d8:	18 95       	reti

000009da <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     9da:	1f 92       	push	r1
     9dc:	0f 92       	push	r0
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	0f 92       	push	r0
     9e2:	11 24       	eor	r1, r1
     9e4:	08 b6       	in	r0, 0x38	; 56
     9e6:	0f 92       	push	r0
     9e8:	18 be       	out	0x38, r1	; 56
     9ea:	09 b6       	in	r0, 0x39	; 57
     9ec:	0f 92       	push	r0
     9ee:	19 be       	out	0x39, r1	; 57
     9f0:	0b b6       	in	r0, 0x3b	; 59
     9f2:	0f 92       	push	r0
     9f4:	1b be       	out	0x3b, r1	; 59
     9f6:	2f 93       	push	r18
     9f8:	3f 93       	push	r19
     9fa:	4f 93       	push	r20
     9fc:	5f 93       	push	r21
     9fe:	6f 93       	push	r22
     a00:	7f 93       	push	r23
     a02:	8f 93       	push	r24
     a04:	9f 93       	push	r25
     a06:	af 93       	push	r26
     a08:	bf 93       	push	r27
     a0a:	ef 93       	push	r30
     a0c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     a0e:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     a12:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     a16:	e0 91 cd 20 	lds	r30, 0x20CD	; 0x8020cd <adcb_callback>
     a1a:	f0 91 ce 20 	lds	r31, 0x20CE	; 0x8020ce <adcb_callback+0x1>
     a1e:	62 e0       	ldi	r22, 0x02	; 2
     a20:	80 e4       	ldi	r24, 0x40	; 64
     a22:	92 e0       	ldi	r25, 0x02	; 2
     a24:	19 95       	eicall
}
     a26:	ff 91       	pop	r31
     a28:	ef 91       	pop	r30
     a2a:	bf 91       	pop	r27
     a2c:	af 91       	pop	r26
     a2e:	9f 91       	pop	r25
     a30:	8f 91       	pop	r24
     a32:	7f 91       	pop	r23
     a34:	6f 91       	pop	r22
     a36:	5f 91       	pop	r21
     a38:	4f 91       	pop	r20
     a3a:	3f 91       	pop	r19
     a3c:	2f 91       	pop	r18
     a3e:	0f 90       	pop	r0
     a40:	0b be       	out	0x3b, r0	; 59
     a42:	0f 90       	pop	r0
     a44:	09 be       	out	0x39, r0	; 57
     a46:	0f 90       	pop	r0
     a48:	08 be       	out	0x38, r0	; 56
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     a54:	1f 92       	push	r1
     a56:	0f 92       	push	r0
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	0f 92       	push	r0
     a5c:	11 24       	eor	r1, r1
     a5e:	08 b6       	in	r0, 0x38	; 56
     a60:	0f 92       	push	r0
     a62:	18 be       	out	0x38, r1	; 56
     a64:	09 b6       	in	r0, 0x39	; 57
     a66:	0f 92       	push	r0
     a68:	19 be       	out	0x39, r1	; 57
     a6a:	0b b6       	in	r0, 0x3b	; 59
     a6c:	0f 92       	push	r0
     a6e:	1b be       	out	0x3b, r1	; 59
     a70:	2f 93       	push	r18
     a72:	3f 93       	push	r19
     a74:	4f 93       	push	r20
     a76:	5f 93       	push	r21
     a78:	6f 93       	push	r22
     a7a:	7f 93       	push	r23
     a7c:	8f 93       	push	r24
     a7e:	9f 93       	push	r25
     a80:	af 93       	push	r26
     a82:	bf 93       	push	r27
     a84:	ef 93       	push	r30
     a86:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     a88:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     a8c:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     a90:	e0 91 cd 20 	lds	r30, 0x20CD	; 0x8020cd <adcb_callback>
     a94:	f0 91 ce 20 	lds	r31, 0x20CE	; 0x8020ce <adcb_callback+0x1>
     a98:	64 e0       	ldi	r22, 0x04	; 4
     a9a:	80 e4       	ldi	r24, 0x40	; 64
     a9c:	92 e0       	ldi	r25, 0x02	; 2
     a9e:	19 95       	eicall
}
     aa0:	ff 91       	pop	r31
     aa2:	ef 91       	pop	r30
     aa4:	bf 91       	pop	r27
     aa6:	af 91       	pop	r26
     aa8:	9f 91       	pop	r25
     aaa:	8f 91       	pop	r24
     aac:	7f 91       	pop	r23
     aae:	6f 91       	pop	r22
     ab0:	5f 91       	pop	r21
     ab2:	4f 91       	pop	r20
     ab4:	3f 91       	pop	r19
     ab6:	2f 91       	pop	r18
     ab8:	0f 90       	pop	r0
     aba:	0b be       	out	0x3b, r0	; 59
     abc:	0f 90       	pop	r0
     abe:	09 be       	out	0x39, r0	; 57
     ac0:	0f 90       	pop	r0
     ac2:	08 be       	out	0x38, r0	; 56
     ac4:	0f 90       	pop	r0
     ac6:	0f be       	out	0x3f, r0	; 63
     ac8:	0f 90       	pop	r0
     aca:	1f 90       	pop	r1
     acc:	18 95       	reti

00000ace <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     ace:	1f 92       	push	r1
     ad0:	0f 92       	push	r0
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	0f 92       	push	r0
     ad6:	11 24       	eor	r1, r1
     ad8:	08 b6       	in	r0, 0x38	; 56
     ada:	0f 92       	push	r0
     adc:	18 be       	out	0x38, r1	; 56
     ade:	09 b6       	in	r0, 0x39	; 57
     ae0:	0f 92       	push	r0
     ae2:	19 be       	out	0x39, r1	; 57
     ae4:	0b b6       	in	r0, 0x3b	; 59
     ae6:	0f 92       	push	r0
     ae8:	1b be       	out	0x3b, r1	; 59
     aea:	2f 93       	push	r18
     aec:	3f 93       	push	r19
     aee:	4f 93       	push	r20
     af0:	5f 93       	push	r21
     af2:	6f 93       	push	r22
     af4:	7f 93       	push	r23
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	ef 93       	push	r30
     b00:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     b02:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     b06:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     b0a:	e0 91 cd 20 	lds	r30, 0x20CD	; 0x8020cd <adcb_callback>
     b0e:	f0 91 ce 20 	lds	r31, 0x20CE	; 0x8020ce <adcb_callback+0x1>
     b12:	68 e0       	ldi	r22, 0x08	; 8
     b14:	80 e4       	ldi	r24, 0x40	; 64
     b16:	92 e0       	ldi	r25, 0x02	; 2
     b18:	19 95       	eicall
}
     b1a:	ff 91       	pop	r31
     b1c:	ef 91       	pop	r30
     b1e:	bf 91       	pop	r27
     b20:	af 91       	pop	r26
     b22:	9f 91       	pop	r25
     b24:	8f 91       	pop	r24
     b26:	7f 91       	pop	r23
     b28:	6f 91       	pop	r22
     b2a:	5f 91       	pop	r21
     b2c:	4f 91       	pop	r20
     b2e:	3f 91       	pop	r19
     b30:	2f 91       	pop	r18
     b32:	0f 90       	pop	r0
     b34:	0b be       	out	0x3b, r0	; 59
     b36:	0f 90       	pop	r0
     b38:	09 be       	out	0x39, r0	; 57
     b3a:	0f 90       	pop	r0
     b3c:	08 be       	out	0x38, r0	; 56
     b3e:	0f 90       	pop	r0
     b40:	0f be       	out	0x3f, r0	; 63
     b42:	0f 90       	pop	r0
     b44:	1f 90       	pop	r1
     b46:	18 95       	reti

00000b48 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     b48:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     b4a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     b4c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     b4e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     b50:	60 83       	st	Z, r22
	ret                             // Return to caller
     b52:	08 95       	ret

00000b54 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     b54:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     b58:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     b5a:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     b5c:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     b60:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     b62:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     b66:	08 95       	ret

00000b68 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     b68:	1f 92       	push	r1
     b6a:	0f 92       	push	r0
     b6c:	0f b6       	in	r0, 0x3f	; 63
     b6e:	0f 92       	push	r0
     b70:	11 24       	eor	r1, r1
     b72:	08 b6       	in	r0, 0x38	; 56
     b74:	0f 92       	push	r0
     b76:	18 be       	out	0x38, r1	; 56
     b78:	09 b6       	in	r0, 0x39	; 57
     b7a:	0f 92       	push	r0
     b7c:	19 be       	out	0x39, r1	; 57
     b7e:	0b b6       	in	r0, 0x3b	; 59
     b80:	0f 92       	push	r0
     b82:	1b be       	out	0x3b, r1	; 59
     b84:	2f 93       	push	r18
     b86:	3f 93       	push	r19
     b88:	4f 93       	push	r20
     b8a:	5f 93       	push	r21
     b8c:	6f 93       	push	r22
     b8e:	7f 93       	push	r23
     b90:	8f 93       	push	r24
     b92:	9f 93       	push	r25
     b94:	af 93       	push	r26
     b96:	bf 93       	push	r27
     b98:	ef 93       	push	r30
     b9a:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     b9c:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <tc_tcc0_ovf_callback>
     ba0:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <tc_tcc0_ovf_callback+0x1>
     ba4:	30 97       	sbiw	r30, 0x00	; 0
     ba6:	09 f0       	breq	.+2      	; 0xbaa <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     ba8:	19 95       	eicall
	}
}
     baa:	ff 91       	pop	r31
     bac:	ef 91       	pop	r30
     bae:	bf 91       	pop	r27
     bb0:	af 91       	pop	r26
     bb2:	9f 91       	pop	r25
     bb4:	8f 91       	pop	r24
     bb6:	7f 91       	pop	r23
     bb8:	6f 91       	pop	r22
     bba:	5f 91       	pop	r21
     bbc:	4f 91       	pop	r20
     bbe:	3f 91       	pop	r19
     bc0:	2f 91       	pop	r18
     bc2:	0f 90       	pop	r0
     bc4:	0b be       	out	0x3b, r0	; 59
     bc6:	0f 90       	pop	r0
     bc8:	09 be       	out	0x39, r0	; 57
     bca:	0f 90       	pop	r0
     bcc:	08 be       	out	0x38, r0	; 56
     bce:	0f 90       	pop	r0
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	0f 90       	pop	r0
     bd4:	1f 90       	pop	r1
     bd6:	18 95       	reti

00000bd8 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     bd8:	1f 92       	push	r1
     bda:	0f 92       	push	r0
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	0f 92       	push	r0
     be0:	11 24       	eor	r1, r1
     be2:	08 b6       	in	r0, 0x38	; 56
     be4:	0f 92       	push	r0
     be6:	18 be       	out	0x38, r1	; 56
     be8:	09 b6       	in	r0, 0x39	; 57
     bea:	0f 92       	push	r0
     bec:	19 be       	out	0x39, r1	; 57
     bee:	0b b6       	in	r0, 0x3b	; 59
     bf0:	0f 92       	push	r0
     bf2:	1b be       	out	0x3b, r1	; 59
     bf4:	2f 93       	push	r18
     bf6:	3f 93       	push	r19
     bf8:	4f 93       	push	r20
     bfa:	5f 93       	push	r21
     bfc:	6f 93       	push	r22
     bfe:	7f 93       	push	r23
     c00:	8f 93       	push	r24
     c02:	9f 93       	push	r25
     c04:	af 93       	push	r26
     c06:	bf 93       	push	r27
     c08:	ef 93       	push	r30
     c0a:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     c0c:	e0 91 bd 20 	lds	r30, 0x20BD	; 0x8020bd <tc_tcc0_err_callback>
     c10:	f0 91 be 20 	lds	r31, 0x20BE	; 0x8020be <tc_tcc0_err_callback+0x1>
     c14:	30 97       	sbiw	r30, 0x00	; 0
     c16:	09 f0       	breq	.+2      	; 0xc1a <__vector_15+0x42>
		tc_tcc0_err_callback();
     c18:	19 95       	eicall
	}
}
     c1a:	ff 91       	pop	r31
     c1c:	ef 91       	pop	r30
     c1e:	bf 91       	pop	r27
     c20:	af 91       	pop	r26
     c22:	9f 91       	pop	r25
     c24:	8f 91       	pop	r24
     c26:	7f 91       	pop	r23
     c28:	6f 91       	pop	r22
     c2a:	5f 91       	pop	r21
     c2c:	4f 91       	pop	r20
     c2e:	3f 91       	pop	r19
     c30:	2f 91       	pop	r18
     c32:	0f 90       	pop	r0
     c34:	0b be       	out	0x3b, r0	; 59
     c36:	0f 90       	pop	r0
     c38:	09 be       	out	0x39, r0	; 57
     c3a:	0f 90       	pop	r0
     c3c:	08 be       	out	0x38, r0	; 56
     c3e:	0f 90       	pop	r0
     c40:	0f be       	out	0x3f, r0	; 63
     c42:	0f 90       	pop	r0
     c44:	1f 90       	pop	r1
     c46:	18 95       	reti

00000c48 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     c48:	1f 92       	push	r1
     c4a:	0f 92       	push	r0
     c4c:	0f b6       	in	r0, 0x3f	; 63
     c4e:	0f 92       	push	r0
     c50:	11 24       	eor	r1, r1
     c52:	08 b6       	in	r0, 0x38	; 56
     c54:	0f 92       	push	r0
     c56:	18 be       	out	0x38, r1	; 56
     c58:	09 b6       	in	r0, 0x39	; 57
     c5a:	0f 92       	push	r0
     c5c:	19 be       	out	0x39, r1	; 57
     c5e:	0b b6       	in	r0, 0x3b	; 59
     c60:	0f 92       	push	r0
     c62:	1b be       	out	0x3b, r1	; 59
     c64:	2f 93       	push	r18
     c66:	3f 93       	push	r19
     c68:	4f 93       	push	r20
     c6a:	5f 93       	push	r21
     c6c:	6f 93       	push	r22
     c6e:	7f 93       	push	r23
     c70:	8f 93       	push	r24
     c72:	9f 93       	push	r25
     c74:	af 93       	push	r26
     c76:	bf 93       	push	r27
     c78:	ef 93       	push	r30
     c7a:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     c7c:	e0 91 bb 20 	lds	r30, 0x20BB	; 0x8020bb <tc_tcc0_cca_callback>
     c80:	f0 91 bc 20 	lds	r31, 0x20BC	; 0x8020bc <tc_tcc0_cca_callback+0x1>
     c84:	30 97       	sbiw	r30, 0x00	; 0
     c86:	09 f0       	breq	.+2      	; 0xc8a <__vector_16+0x42>
		tc_tcc0_cca_callback();
     c88:	19 95       	eicall
	}
}
     c8a:	ff 91       	pop	r31
     c8c:	ef 91       	pop	r30
     c8e:	bf 91       	pop	r27
     c90:	af 91       	pop	r26
     c92:	9f 91       	pop	r25
     c94:	8f 91       	pop	r24
     c96:	7f 91       	pop	r23
     c98:	6f 91       	pop	r22
     c9a:	5f 91       	pop	r21
     c9c:	4f 91       	pop	r20
     c9e:	3f 91       	pop	r19
     ca0:	2f 91       	pop	r18
     ca2:	0f 90       	pop	r0
     ca4:	0b be       	out	0x3b, r0	; 59
     ca6:	0f 90       	pop	r0
     ca8:	09 be       	out	0x39, r0	; 57
     caa:	0f 90       	pop	r0
     cac:	08 be       	out	0x38, r0	; 56
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	0f 90       	pop	r0
     cb4:	1f 90       	pop	r1
     cb6:	18 95       	reti

00000cb8 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     cb8:	1f 92       	push	r1
     cba:	0f 92       	push	r0
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	0f 92       	push	r0
     cc0:	11 24       	eor	r1, r1
     cc2:	08 b6       	in	r0, 0x38	; 56
     cc4:	0f 92       	push	r0
     cc6:	18 be       	out	0x38, r1	; 56
     cc8:	09 b6       	in	r0, 0x39	; 57
     cca:	0f 92       	push	r0
     ccc:	19 be       	out	0x39, r1	; 57
     cce:	0b b6       	in	r0, 0x3b	; 59
     cd0:	0f 92       	push	r0
     cd2:	1b be       	out	0x3b, r1	; 59
     cd4:	2f 93       	push	r18
     cd6:	3f 93       	push	r19
     cd8:	4f 93       	push	r20
     cda:	5f 93       	push	r21
     cdc:	6f 93       	push	r22
     cde:	7f 93       	push	r23
     ce0:	8f 93       	push	r24
     ce2:	9f 93       	push	r25
     ce4:	af 93       	push	r26
     ce6:	bf 93       	push	r27
     ce8:	ef 93       	push	r30
     cea:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     cec:	e0 91 b9 20 	lds	r30, 0x20B9	; 0x8020b9 <tc_tcc0_ccb_callback>
     cf0:	f0 91 ba 20 	lds	r31, 0x20BA	; 0x8020ba <tc_tcc0_ccb_callback+0x1>
     cf4:	30 97       	sbiw	r30, 0x00	; 0
     cf6:	09 f0       	breq	.+2      	; 0xcfa <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     cf8:	19 95       	eicall
	}
}
     cfa:	ff 91       	pop	r31
     cfc:	ef 91       	pop	r30
     cfe:	bf 91       	pop	r27
     d00:	af 91       	pop	r26
     d02:	9f 91       	pop	r25
     d04:	8f 91       	pop	r24
     d06:	7f 91       	pop	r23
     d08:	6f 91       	pop	r22
     d0a:	5f 91       	pop	r21
     d0c:	4f 91       	pop	r20
     d0e:	3f 91       	pop	r19
     d10:	2f 91       	pop	r18
     d12:	0f 90       	pop	r0
     d14:	0b be       	out	0x3b, r0	; 59
     d16:	0f 90       	pop	r0
     d18:	09 be       	out	0x39, r0	; 57
     d1a:	0f 90       	pop	r0
     d1c:	08 be       	out	0x38, r0	; 56
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1
     d32:	08 b6       	in	r0, 0x38	; 56
     d34:	0f 92       	push	r0
     d36:	18 be       	out	0x38, r1	; 56
     d38:	09 b6       	in	r0, 0x39	; 57
     d3a:	0f 92       	push	r0
     d3c:	19 be       	out	0x39, r1	; 57
     d3e:	0b b6       	in	r0, 0x3b	; 59
     d40:	0f 92       	push	r0
     d42:	1b be       	out	0x3b, r1	; 59
     d44:	2f 93       	push	r18
     d46:	3f 93       	push	r19
     d48:	4f 93       	push	r20
     d4a:	5f 93       	push	r21
     d4c:	6f 93       	push	r22
     d4e:	7f 93       	push	r23
     d50:	8f 93       	push	r24
     d52:	9f 93       	push	r25
     d54:	af 93       	push	r26
     d56:	bf 93       	push	r27
     d58:	ef 93       	push	r30
     d5a:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     d5c:	e0 91 b7 20 	lds	r30, 0x20B7	; 0x8020b7 <tc_tcc0_ccc_callback>
     d60:	f0 91 b8 20 	lds	r31, 0x20B8	; 0x8020b8 <tc_tcc0_ccc_callback+0x1>
     d64:	30 97       	sbiw	r30, 0x00	; 0
     d66:	09 f0       	breq	.+2      	; 0xd6a <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     d68:	19 95       	eicall
	}
}
     d6a:	ff 91       	pop	r31
     d6c:	ef 91       	pop	r30
     d6e:	bf 91       	pop	r27
     d70:	af 91       	pop	r26
     d72:	9f 91       	pop	r25
     d74:	8f 91       	pop	r24
     d76:	7f 91       	pop	r23
     d78:	6f 91       	pop	r22
     d7a:	5f 91       	pop	r21
     d7c:	4f 91       	pop	r20
     d7e:	3f 91       	pop	r19
     d80:	2f 91       	pop	r18
     d82:	0f 90       	pop	r0
     d84:	0b be       	out	0x3b, r0	; 59
     d86:	0f 90       	pop	r0
     d88:	09 be       	out	0x39, r0	; 57
     d8a:	0f 90       	pop	r0
     d8c:	08 be       	out	0x38, r0	; 56
     d8e:	0f 90       	pop	r0
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	0f 90       	pop	r0
     d94:	1f 90       	pop	r1
     d96:	18 95       	reti

00000d98 <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     d98:	1f 92       	push	r1
     d9a:	0f 92       	push	r0
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	0f 92       	push	r0
     da0:	11 24       	eor	r1, r1
     da2:	08 b6       	in	r0, 0x38	; 56
     da4:	0f 92       	push	r0
     da6:	18 be       	out	0x38, r1	; 56
     da8:	09 b6       	in	r0, 0x39	; 57
     daa:	0f 92       	push	r0
     dac:	19 be       	out	0x39, r1	; 57
     dae:	0b b6       	in	r0, 0x3b	; 59
     db0:	0f 92       	push	r0
     db2:	1b be       	out	0x3b, r1	; 59
     db4:	2f 93       	push	r18
     db6:	3f 93       	push	r19
     db8:	4f 93       	push	r20
     dba:	5f 93       	push	r21
     dbc:	6f 93       	push	r22
     dbe:	7f 93       	push	r23
     dc0:	8f 93       	push	r24
     dc2:	9f 93       	push	r25
     dc4:	af 93       	push	r26
     dc6:	bf 93       	push	r27
     dc8:	ef 93       	push	r30
     dca:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     dcc:	e0 91 b5 20 	lds	r30, 0x20B5	; 0x8020b5 <tc_tcc0_ccd_callback>
     dd0:	f0 91 b6 20 	lds	r31, 0x20B6	; 0x8020b6 <tc_tcc0_ccd_callback+0x1>
     dd4:	30 97       	sbiw	r30, 0x00	; 0
     dd6:	09 f0       	breq	.+2      	; 0xdda <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     dd8:	19 95       	eicall
	}
}
     dda:	ff 91       	pop	r31
     ddc:	ef 91       	pop	r30
     dde:	bf 91       	pop	r27
     de0:	af 91       	pop	r26
     de2:	9f 91       	pop	r25
     de4:	8f 91       	pop	r24
     de6:	7f 91       	pop	r23
     de8:	6f 91       	pop	r22
     dea:	5f 91       	pop	r21
     dec:	4f 91       	pop	r20
     dee:	3f 91       	pop	r19
     df0:	2f 91       	pop	r18
     df2:	0f 90       	pop	r0
     df4:	0b be       	out	0x3b, r0	; 59
     df6:	0f 90       	pop	r0
     df8:	09 be       	out	0x39, r0	; 57
     dfa:	0f 90       	pop	r0
     dfc:	08 be       	out	0x38, r0	; 56
     dfe:	0f 90       	pop	r0
     e00:	0f be       	out	0x3f, r0	; 63
     e02:	0f 90       	pop	r0
     e04:	1f 90       	pop	r1
     e06:	18 95       	reti

00000e08 <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     e08:	1f 92       	push	r1
     e0a:	0f 92       	push	r0
     e0c:	0f b6       	in	r0, 0x3f	; 63
     e0e:	0f 92       	push	r0
     e10:	11 24       	eor	r1, r1
     e12:	08 b6       	in	r0, 0x38	; 56
     e14:	0f 92       	push	r0
     e16:	18 be       	out	0x38, r1	; 56
     e18:	09 b6       	in	r0, 0x39	; 57
     e1a:	0f 92       	push	r0
     e1c:	19 be       	out	0x39, r1	; 57
     e1e:	0b b6       	in	r0, 0x3b	; 59
     e20:	0f 92       	push	r0
     e22:	1b be       	out	0x3b, r1	; 59
     e24:	2f 93       	push	r18
     e26:	3f 93       	push	r19
     e28:	4f 93       	push	r20
     e2a:	5f 93       	push	r21
     e2c:	6f 93       	push	r22
     e2e:	7f 93       	push	r23
     e30:	8f 93       	push	r24
     e32:	9f 93       	push	r25
     e34:	af 93       	push	r26
     e36:	bf 93       	push	r27
     e38:	ef 93       	push	r30
     e3a:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     e3c:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <tc_tcc1_ovf_callback>
     e40:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <tc_tcc1_ovf_callback+0x1>
     e44:	30 97       	sbiw	r30, 0x00	; 0
     e46:	09 f0       	breq	.+2      	; 0xe4a <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     e48:	19 95       	eicall
	}
}
     e4a:	ff 91       	pop	r31
     e4c:	ef 91       	pop	r30
     e4e:	bf 91       	pop	r27
     e50:	af 91       	pop	r26
     e52:	9f 91       	pop	r25
     e54:	8f 91       	pop	r24
     e56:	7f 91       	pop	r23
     e58:	6f 91       	pop	r22
     e5a:	5f 91       	pop	r21
     e5c:	4f 91       	pop	r20
     e5e:	3f 91       	pop	r19
     e60:	2f 91       	pop	r18
     e62:	0f 90       	pop	r0
     e64:	0b be       	out	0x3b, r0	; 59
     e66:	0f 90       	pop	r0
     e68:	09 be       	out	0x39, r0	; 57
     e6a:	0f 90       	pop	r0
     e6c:	08 be       	out	0x38, r0	; 56
     e6e:	0f 90       	pop	r0
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	0f 90       	pop	r0
     e74:	1f 90       	pop	r1
     e76:	18 95       	reti

00000e78 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     e78:	1f 92       	push	r1
     e7a:	0f 92       	push	r0
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	0f 92       	push	r0
     e80:	11 24       	eor	r1, r1
     e82:	08 b6       	in	r0, 0x38	; 56
     e84:	0f 92       	push	r0
     e86:	18 be       	out	0x38, r1	; 56
     e88:	09 b6       	in	r0, 0x39	; 57
     e8a:	0f 92       	push	r0
     e8c:	19 be       	out	0x39, r1	; 57
     e8e:	0b b6       	in	r0, 0x3b	; 59
     e90:	0f 92       	push	r0
     e92:	1b be       	out	0x3b, r1	; 59
     e94:	2f 93       	push	r18
     e96:	3f 93       	push	r19
     e98:	4f 93       	push	r20
     e9a:	5f 93       	push	r21
     e9c:	6f 93       	push	r22
     e9e:	7f 93       	push	r23
     ea0:	8f 93       	push	r24
     ea2:	9f 93       	push	r25
     ea4:	af 93       	push	r26
     ea6:	bf 93       	push	r27
     ea8:	ef 93       	push	r30
     eaa:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     eac:	e0 91 b1 20 	lds	r30, 0x20B1	; 0x8020b1 <tc_tcc1_err_callback>
     eb0:	f0 91 b2 20 	lds	r31, 0x20B2	; 0x8020b2 <tc_tcc1_err_callback+0x1>
     eb4:	30 97       	sbiw	r30, 0x00	; 0
     eb6:	09 f0       	breq	.+2      	; 0xeba <__vector_21+0x42>
		tc_tcc1_err_callback();
     eb8:	19 95       	eicall
	}
}
     eba:	ff 91       	pop	r31
     ebc:	ef 91       	pop	r30
     ebe:	bf 91       	pop	r27
     ec0:	af 91       	pop	r26
     ec2:	9f 91       	pop	r25
     ec4:	8f 91       	pop	r24
     ec6:	7f 91       	pop	r23
     ec8:	6f 91       	pop	r22
     eca:	5f 91       	pop	r21
     ecc:	4f 91       	pop	r20
     ece:	3f 91       	pop	r19
     ed0:	2f 91       	pop	r18
     ed2:	0f 90       	pop	r0
     ed4:	0b be       	out	0x3b, r0	; 59
     ed6:	0f 90       	pop	r0
     ed8:	09 be       	out	0x39, r0	; 57
     eda:	0f 90       	pop	r0
     edc:	08 be       	out	0x38, r0	; 56
     ede:	0f 90       	pop	r0
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	0f 90       	pop	r0
     ee4:	1f 90       	pop	r1
     ee6:	18 95       	reti

00000ee8 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     ee8:	1f 92       	push	r1
     eea:	0f 92       	push	r0
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	0f 92       	push	r0
     ef0:	11 24       	eor	r1, r1
     ef2:	08 b6       	in	r0, 0x38	; 56
     ef4:	0f 92       	push	r0
     ef6:	18 be       	out	0x38, r1	; 56
     ef8:	09 b6       	in	r0, 0x39	; 57
     efa:	0f 92       	push	r0
     efc:	19 be       	out	0x39, r1	; 57
     efe:	0b b6       	in	r0, 0x3b	; 59
     f00:	0f 92       	push	r0
     f02:	1b be       	out	0x3b, r1	; 59
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     f1c:	e0 91 af 20 	lds	r30, 0x20AF	; 0x8020af <tc_tcc1_cca_callback>
     f20:	f0 91 b0 20 	lds	r31, 0x20B0	; 0x8020b0 <tc_tcc1_cca_callback+0x1>
     f24:	30 97       	sbiw	r30, 0x00	; 0
     f26:	09 f0       	breq	.+2      	; 0xf2a <__vector_22+0x42>
		tc_tcc1_cca_callback();
     f28:	19 95       	eicall
	}
}
     f2a:	ff 91       	pop	r31
     f2c:	ef 91       	pop	r30
     f2e:	bf 91       	pop	r27
     f30:	af 91       	pop	r26
     f32:	9f 91       	pop	r25
     f34:	8f 91       	pop	r24
     f36:	7f 91       	pop	r23
     f38:	6f 91       	pop	r22
     f3a:	5f 91       	pop	r21
     f3c:	4f 91       	pop	r20
     f3e:	3f 91       	pop	r19
     f40:	2f 91       	pop	r18
     f42:	0f 90       	pop	r0
     f44:	0b be       	out	0x3b, r0	; 59
     f46:	0f 90       	pop	r0
     f48:	09 be       	out	0x39, r0	; 57
     f4a:	0f 90       	pop	r0
     f4c:	08 be       	out	0x38, r0	; 56
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	0f 90       	pop	r0
     f54:	1f 90       	pop	r1
     f56:	18 95       	reti

00000f58 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     f58:	1f 92       	push	r1
     f5a:	0f 92       	push	r0
     f5c:	0f b6       	in	r0, 0x3f	; 63
     f5e:	0f 92       	push	r0
     f60:	11 24       	eor	r1, r1
     f62:	08 b6       	in	r0, 0x38	; 56
     f64:	0f 92       	push	r0
     f66:	18 be       	out	0x38, r1	; 56
     f68:	09 b6       	in	r0, 0x39	; 57
     f6a:	0f 92       	push	r0
     f6c:	19 be       	out	0x39, r1	; 57
     f6e:	0b b6       	in	r0, 0x3b	; 59
     f70:	0f 92       	push	r0
     f72:	1b be       	out	0x3b, r1	; 59
     f74:	2f 93       	push	r18
     f76:	3f 93       	push	r19
     f78:	4f 93       	push	r20
     f7a:	5f 93       	push	r21
     f7c:	6f 93       	push	r22
     f7e:	7f 93       	push	r23
     f80:	8f 93       	push	r24
     f82:	9f 93       	push	r25
     f84:	af 93       	push	r26
     f86:	bf 93       	push	r27
     f88:	ef 93       	push	r30
     f8a:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     f8c:	e0 91 ad 20 	lds	r30, 0x20AD	; 0x8020ad <tc_tcc1_ccb_callback>
     f90:	f0 91 ae 20 	lds	r31, 0x20AE	; 0x8020ae <tc_tcc1_ccb_callback+0x1>
     f94:	30 97       	sbiw	r30, 0x00	; 0
     f96:	09 f0       	breq	.+2      	; 0xf9a <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     f98:	19 95       	eicall
	}
}
     f9a:	ff 91       	pop	r31
     f9c:	ef 91       	pop	r30
     f9e:	bf 91       	pop	r27
     fa0:	af 91       	pop	r26
     fa2:	9f 91       	pop	r25
     fa4:	8f 91       	pop	r24
     fa6:	7f 91       	pop	r23
     fa8:	6f 91       	pop	r22
     faa:	5f 91       	pop	r21
     fac:	4f 91       	pop	r20
     fae:	3f 91       	pop	r19
     fb0:	2f 91       	pop	r18
     fb2:	0f 90       	pop	r0
     fb4:	0b be       	out	0x3b, r0	; 59
     fb6:	0f 90       	pop	r0
     fb8:	09 be       	out	0x39, r0	; 57
     fba:	0f 90       	pop	r0
     fbc:	08 be       	out	0x38, r0	; 56
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	0f 90       	pop	r0
     fc4:	1f 90       	pop	r1
     fc6:	18 95       	reti

00000fc8 <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	08 b6       	in	r0, 0x38	; 56
     fd4:	0f 92       	push	r0
     fd6:	18 be       	out	0x38, r1	; 56
     fd8:	09 b6       	in	r0, 0x39	; 57
     fda:	0f 92       	push	r0
     fdc:	19 be       	out	0x39, r1	; 57
     fde:	0b b6       	in	r0, 0x3b	; 59
     fe0:	0f 92       	push	r0
     fe2:	1b be       	out	0x3b, r1	; 59
     fe4:	2f 93       	push	r18
     fe6:	3f 93       	push	r19
     fe8:	4f 93       	push	r20
     fea:	5f 93       	push	r21
     fec:	6f 93       	push	r22
     fee:	7f 93       	push	r23
     ff0:	8f 93       	push	r24
     ff2:	9f 93       	push	r25
     ff4:	af 93       	push	r26
     ff6:	bf 93       	push	r27
     ff8:	ef 93       	push	r30
     ffa:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     ffc:	e0 91 ab 20 	lds	r30, 0x20AB	; 0x8020ab <tc_tcd0_ovf_callback>
    1000:	f0 91 ac 20 	lds	r31, 0x20AC	; 0x8020ac <tc_tcd0_ovf_callback+0x1>
    1004:	30 97       	sbiw	r30, 0x00	; 0
    1006:	09 f0       	breq	.+2      	; 0x100a <__vector_77+0x42>
		tc_tcd0_ovf_callback();
    1008:	19 95       	eicall
	}
}
    100a:	ff 91       	pop	r31
    100c:	ef 91       	pop	r30
    100e:	bf 91       	pop	r27
    1010:	af 91       	pop	r26
    1012:	9f 91       	pop	r25
    1014:	8f 91       	pop	r24
    1016:	7f 91       	pop	r23
    1018:	6f 91       	pop	r22
    101a:	5f 91       	pop	r21
    101c:	4f 91       	pop	r20
    101e:	3f 91       	pop	r19
    1020:	2f 91       	pop	r18
    1022:	0f 90       	pop	r0
    1024:	0b be       	out	0x3b, r0	; 59
    1026:	0f 90       	pop	r0
    1028:	09 be       	out	0x39, r0	; 57
    102a:	0f 90       	pop	r0
    102c:	08 be       	out	0x38, r0	; 56
    102e:	0f 90       	pop	r0
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	0f 90       	pop	r0
    1034:	1f 90       	pop	r1
    1036:	18 95       	reti

00001038 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    1038:	1f 92       	push	r1
    103a:	0f 92       	push	r0
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	0f 92       	push	r0
    1040:	11 24       	eor	r1, r1
    1042:	08 b6       	in	r0, 0x38	; 56
    1044:	0f 92       	push	r0
    1046:	18 be       	out	0x38, r1	; 56
    1048:	09 b6       	in	r0, 0x39	; 57
    104a:	0f 92       	push	r0
    104c:	19 be       	out	0x39, r1	; 57
    104e:	0b b6       	in	r0, 0x3b	; 59
    1050:	0f 92       	push	r0
    1052:	1b be       	out	0x3b, r1	; 59
    1054:	2f 93       	push	r18
    1056:	3f 93       	push	r19
    1058:	4f 93       	push	r20
    105a:	5f 93       	push	r21
    105c:	6f 93       	push	r22
    105e:	7f 93       	push	r23
    1060:	8f 93       	push	r24
    1062:	9f 93       	push	r25
    1064:	af 93       	push	r26
    1066:	bf 93       	push	r27
    1068:	ef 93       	push	r30
    106a:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    106c:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <tc_tcd0_err_callback>
    1070:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <tc_tcd0_err_callback+0x1>
    1074:	30 97       	sbiw	r30, 0x00	; 0
    1076:	09 f0       	breq	.+2      	; 0x107a <__vector_78+0x42>
		tc_tcd0_err_callback();
    1078:	19 95       	eicall
	}
}
    107a:	ff 91       	pop	r31
    107c:	ef 91       	pop	r30
    107e:	bf 91       	pop	r27
    1080:	af 91       	pop	r26
    1082:	9f 91       	pop	r25
    1084:	8f 91       	pop	r24
    1086:	7f 91       	pop	r23
    1088:	6f 91       	pop	r22
    108a:	5f 91       	pop	r21
    108c:	4f 91       	pop	r20
    108e:	3f 91       	pop	r19
    1090:	2f 91       	pop	r18
    1092:	0f 90       	pop	r0
    1094:	0b be       	out	0x3b, r0	; 59
    1096:	0f 90       	pop	r0
    1098:	09 be       	out	0x39, r0	; 57
    109a:	0f 90       	pop	r0
    109c:	08 be       	out	0x38, r0	; 56
    109e:	0f 90       	pop	r0
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	0f 90       	pop	r0
    10a4:	1f 90       	pop	r1
    10a6:	18 95       	reti

000010a8 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    10a8:	1f 92       	push	r1
    10aa:	0f 92       	push	r0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
    10b2:	08 b6       	in	r0, 0x38	; 56
    10b4:	0f 92       	push	r0
    10b6:	18 be       	out	0x38, r1	; 56
    10b8:	09 b6       	in	r0, 0x39	; 57
    10ba:	0f 92       	push	r0
    10bc:	19 be       	out	0x39, r1	; 57
    10be:	0b b6       	in	r0, 0x3b	; 59
    10c0:	0f 92       	push	r0
    10c2:	1b be       	out	0x3b, r1	; 59
    10c4:	2f 93       	push	r18
    10c6:	3f 93       	push	r19
    10c8:	4f 93       	push	r20
    10ca:	5f 93       	push	r21
    10cc:	6f 93       	push	r22
    10ce:	7f 93       	push	r23
    10d0:	8f 93       	push	r24
    10d2:	9f 93       	push	r25
    10d4:	af 93       	push	r26
    10d6:	bf 93       	push	r27
    10d8:	ef 93       	push	r30
    10da:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    10dc:	e0 91 a7 20 	lds	r30, 0x20A7	; 0x8020a7 <tc_tcd0_cca_callback>
    10e0:	f0 91 a8 20 	lds	r31, 0x20A8	; 0x8020a8 <tc_tcd0_cca_callback+0x1>
    10e4:	30 97       	sbiw	r30, 0x00	; 0
    10e6:	09 f0       	breq	.+2      	; 0x10ea <__vector_79+0x42>
		tc_tcd0_cca_callback();
    10e8:	19 95       	eicall
	}
}
    10ea:	ff 91       	pop	r31
    10ec:	ef 91       	pop	r30
    10ee:	bf 91       	pop	r27
    10f0:	af 91       	pop	r26
    10f2:	9f 91       	pop	r25
    10f4:	8f 91       	pop	r24
    10f6:	7f 91       	pop	r23
    10f8:	6f 91       	pop	r22
    10fa:	5f 91       	pop	r21
    10fc:	4f 91       	pop	r20
    10fe:	3f 91       	pop	r19
    1100:	2f 91       	pop	r18
    1102:	0f 90       	pop	r0
    1104:	0b be       	out	0x3b, r0	; 59
    1106:	0f 90       	pop	r0
    1108:	09 be       	out	0x39, r0	; 57
    110a:	0f 90       	pop	r0
    110c:	08 be       	out	0x38, r0	; 56
    110e:	0f 90       	pop	r0
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	0f 90       	pop	r0
    1114:	1f 90       	pop	r1
    1116:	18 95       	reti

00001118 <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    1118:	1f 92       	push	r1
    111a:	0f 92       	push	r0
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	0f 92       	push	r0
    1120:	11 24       	eor	r1, r1
    1122:	08 b6       	in	r0, 0x38	; 56
    1124:	0f 92       	push	r0
    1126:	18 be       	out	0x38, r1	; 56
    1128:	09 b6       	in	r0, 0x39	; 57
    112a:	0f 92       	push	r0
    112c:	19 be       	out	0x39, r1	; 57
    112e:	0b b6       	in	r0, 0x3b	; 59
    1130:	0f 92       	push	r0
    1132:	1b be       	out	0x3b, r1	; 59
    1134:	2f 93       	push	r18
    1136:	3f 93       	push	r19
    1138:	4f 93       	push	r20
    113a:	5f 93       	push	r21
    113c:	6f 93       	push	r22
    113e:	7f 93       	push	r23
    1140:	8f 93       	push	r24
    1142:	9f 93       	push	r25
    1144:	af 93       	push	r26
    1146:	bf 93       	push	r27
    1148:	ef 93       	push	r30
    114a:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    114c:	e0 91 a5 20 	lds	r30, 0x20A5	; 0x8020a5 <tc_tcd0_ccb_callback>
    1150:	f0 91 a6 20 	lds	r31, 0x20A6	; 0x8020a6 <tc_tcd0_ccb_callback+0x1>
    1154:	30 97       	sbiw	r30, 0x00	; 0
    1156:	09 f0       	breq	.+2      	; 0x115a <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    1158:	19 95       	eicall
	}
}
    115a:	ff 91       	pop	r31
    115c:	ef 91       	pop	r30
    115e:	bf 91       	pop	r27
    1160:	af 91       	pop	r26
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	7f 91       	pop	r23
    1168:	6f 91       	pop	r22
    116a:	5f 91       	pop	r21
    116c:	4f 91       	pop	r20
    116e:	3f 91       	pop	r19
    1170:	2f 91       	pop	r18
    1172:	0f 90       	pop	r0
    1174:	0b be       	out	0x3b, r0	; 59
    1176:	0f 90       	pop	r0
    1178:	09 be       	out	0x39, r0	; 57
    117a:	0f 90       	pop	r0
    117c:	08 be       	out	0x38, r0	; 56
    117e:	0f 90       	pop	r0
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	0f 90       	pop	r0
    1184:	1f 90       	pop	r1
    1186:	18 95       	reti

00001188 <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    1188:	1f 92       	push	r1
    118a:	0f 92       	push	r0
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	0f 92       	push	r0
    1190:	11 24       	eor	r1, r1
    1192:	08 b6       	in	r0, 0x38	; 56
    1194:	0f 92       	push	r0
    1196:	18 be       	out	0x38, r1	; 56
    1198:	09 b6       	in	r0, 0x39	; 57
    119a:	0f 92       	push	r0
    119c:	19 be       	out	0x39, r1	; 57
    119e:	0b b6       	in	r0, 0x3b	; 59
    11a0:	0f 92       	push	r0
    11a2:	1b be       	out	0x3b, r1	; 59
    11a4:	2f 93       	push	r18
    11a6:	3f 93       	push	r19
    11a8:	4f 93       	push	r20
    11aa:	5f 93       	push	r21
    11ac:	6f 93       	push	r22
    11ae:	7f 93       	push	r23
    11b0:	8f 93       	push	r24
    11b2:	9f 93       	push	r25
    11b4:	af 93       	push	r26
    11b6:	bf 93       	push	r27
    11b8:	ef 93       	push	r30
    11ba:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    11bc:	e0 91 a3 20 	lds	r30, 0x20A3	; 0x8020a3 <tc_tcd0_ccc_callback>
    11c0:	f0 91 a4 20 	lds	r31, 0x20A4	; 0x8020a4 <tc_tcd0_ccc_callback+0x1>
    11c4:	30 97       	sbiw	r30, 0x00	; 0
    11c6:	09 f0       	breq	.+2      	; 0x11ca <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    11c8:	19 95       	eicall
	}
}
    11ca:	ff 91       	pop	r31
    11cc:	ef 91       	pop	r30
    11ce:	bf 91       	pop	r27
    11d0:	af 91       	pop	r26
    11d2:	9f 91       	pop	r25
    11d4:	8f 91       	pop	r24
    11d6:	7f 91       	pop	r23
    11d8:	6f 91       	pop	r22
    11da:	5f 91       	pop	r21
    11dc:	4f 91       	pop	r20
    11de:	3f 91       	pop	r19
    11e0:	2f 91       	pop	r18
    11e2:	0f 90       	pop	r0
    11e4:	0b be       	out	0x3b, r0	; 59
    11e6:	0f 90       	pop	r0
    11e8:	09 be       	out	0x39, r0	; 57
    11ea:	0f 90       	pop	r0
    11ec:	08 be       	out	0x38, r0	; 56
    11ee:	0f 90       	pop	r0
    11f0:	0f be       	out	0x3f, r0	; 63
    11f2:	0f 90       	pop	r0
    11f4:	1f 90       	pop	r1
    11f6:	18 95       	reti

000011f8 <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    11f8:	1f 92       	push	r1
    11fa:	0f 92       	push	r0
    11fc:	0f b6       	in	r0, 0x3f	; 63
    11fe:	0f 92       	push	r0
    1200:	11 24       	eor	r1, r1
    1202:	08 b6       	in	r0, 0x38	; 56
    1204:	0f 92       	push	r0
    1206:	18 be       	out	0x38, r1	; 56
    1208:	09 b6       	in	r0, 0x39	; 57
    120a:	0f 92       	push	r0
    120c:	19 be       	out	0x39, r1	; 57
    120e:	0b b6       	in	r0, 0x3b	; 59
    1210:	0f 92       	push	r0
    1212:	1b be       	out	0x3b, r1	; 59
    1214:	2f 93       	push	r18
    1216:	3f 93       	push	r19
    1218:	4f 93       	push	r20
    121a:	5f 93       	push	r21
    121c:	6f 93       	push	r22
    121e:	7f 93       	push	r23
    1220:	8f 93       	push	r24
    1222:	9f 93       	push	r25
    1224:	af 93       	push	r26
    1226:	bf 93       	push	r27
    1228:	ef 93       	push	r30
    122a:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    122c:	e0 91 a1 20 	lds	r30, 0x20A1	; 0x8020a1 <tc_tcd0_ccd_callback>
    1230:	f0 91 a2 20 	lds	r31, 0x20A2	; 0x8020a2 <tc_tcd0_ccd_callback+0x1>
    1234:	30 97       	sbiw	r30, 0x00	; 0
    1236:	09 f0       	breq	.+2      	; 0x123a <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    1238:	19 95       	eicall
	}
}
    123a:	ff 91       	pop	r31
    123c:	ef 91       	pop	r30
    123e:	bf 91       	pop	r27
    1240:	af 91       	pop	r26
    1242:	9f 91       	pop	r25
    1244:	8f 91       	pop	r24
    1246:	7f 91       	pop	r23
    1248:	6f 91       	pop	r22
    124a:	5f 91       	pop	r21
    124c:	4f 91       	pop	r20
    124e:	3f 91       	pop	r19
    1250:	2f 91       	pop	r18
    1252:	0f 90       	pop	r0
    1254:	0b be       	out	0x3b, r0	; 59
    1256:	0f 90       	pop	r0
    1258:	09 be       	out	0x39, r0	; 57
    125a:	0f 90       	pop	r0
    125c:	08 be       	out	0x38, r0	; 56
    125e:	0f 90       	pop	r0
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	0f 90       	pop	r0
    1264:	1f 90       	pop	r1
    1266:	18 95       	reti

00001268 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1268:	1f 92       	push	r1
    126a:	0f 92       	push	r0
    126c:	0f b6       	in	r0, 0x3f	; 63
    126e:	0f 92       	push	r0
    1270:	11 24       	eor	r1, r1
    1272:	08 b6       	in	r0, 0x38	; 56
    1274:	0f 92       	push	r0
    1276:	18 be       	out	0x38, r1	; 56
    1278:	09 b6       	in	r0, 0x39	; 57
    127a:	0f 92       	push	r0
    127c:	19 be       	out	0x39, r1	; 57
    127e:	0b b6       	in	r0, 0x3b	; 59
    1280:	0f 92       	push	r0
    1282:	1b be       	out	0x3b, r1	; 59
    1284:	2f 93       	push	r18
    1286:	3f 93       	push	r19
    1288:	4f 93       	push	r20
    128a:	5f 93       	push	r21
    128c:	6f 93       	push	r22
    128e:	7f 93       	push	r23
    1290:	8f 93       	push	r24
    1292:	9f 93       	push	r25
    1294:	af 93       	push	r26
    1296:	bf 93       	push	r27
    1298:	ef 93       	push	r30
    129a:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    129c:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <tc_tcd1_ovf_callback>
    12a0:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <tc_tcd1_ovf_callback+0x1>
    12a4:	30 97       	sbiw	r30, 0x00	; 0
    12a6:	09 f0       	breq	.+2      	; 0x12aa <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    12a8:	19 95       	eicall
	}
}
    12aa:	ff 91       	pop	r31
    12ac:	ef 91       	pop	r30
    12ae:	bf 91       	pop	r27
    12b0:	af 91       	pop	r26
    12b2:	9f 91       	pop	r25
    12b4:	8f 91       	pop	r24
    12b6:	7f 91       	pop	r23
    12b8:	6f 91       	pop	r22
    12ba:	5f 91       	pop	r21
    12bc:	4f 91       	pop	r20
    12be:	3f 91       	pop	r19
    12c0:	2f 91       	pop	r18
    12c2:	0f 90       	pop	r0
    12c4:	0b be       	out	0x3b, r0	; 59
    12c6:	0f 90       	pop	r0
    12c8:	09 be       	out	0x39, r0	; 57
    12ca:	0f 90       	pop	r0
    12cc:	08 be       	out	0x38, r0	; 56
    12ce:	0f 90       	pop	r0
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	0f 90       	pop	r0
    12d4:	1f 90       	pop	r1
    12d6:	18 95       	reti

000012d8 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    12d8:	1f 92       	push	r1
    12da:	0f 92       	push	r0
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	0f 92       	push	r0
    12e0:	11 24       	eor	r1, r1
    12e2:	08 b6       	in	r0, 0x38	; 56
    12e4:	0f 92       	push	r0
    12e6:	18 be       	out	0x38, r1	; 56
    12e8:	09 b6       	in	r0, 0x39	; 57
    12ea:	0f 92       	push	r0
    12ec:	19 be       	out	0x39, r1	; 57
    12ee:	0b b6       	in	r0, 0x3b	; 59
    12f0:	0f 92       	push	r0
    12f2:	1b be       	out	0x3b, r1	; 59
    12f4:	2f 93       	push	r18
    12f6:	3f 93       	push	r19
    12f8:	4f 93       	push	r20
    12fa:	5f 93       	push	r21
    12fc:	6f 93       	push	r22
    12fe:	7f 93       	push	r23
    1300:	8f 93       	push	r24
    1302:	9f 93       	push	r25
    1304:	af 93       	push	r26
    1306:	bf 93       	push	r27
    1308:	ef 93       	push	r30
    130a:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    130c:	e0 91 9d 20 	lds	r30, 0x209D	; 0x80209d <tc_tcd1_err_callback>
    1310:	f0 91 9e 20 	lds	r31, 0x209E	; 0x80209e <tc_tcd1_err_callback+0x1>
    1314:	30 97       	sbiw	r30, 0x00	; 0
    1316:	09 f0       	breq	.+2      	; 0x131a <__vector_84+0x42>
		tc_tcd1_err_callback();
    1318:	19 95       	eicall
	}
}
    131a:	ff 91       	pop	r31
    131c:	ef 91       	pop	r30
    131e:	bf 91       	pop	r27
    1320:	af 91       	pop	r26
    1322:	9f 91       	pop	r25
    1324:	8f 91       	pop	r24
    1326:	7f 91       	pop	r23
    1328:	6f 91       	pop	r22
    132a:	5f 91       	pop	r21
    132c:	4f 91       	pop	r20
    132e:	3f 91       	pop	r19
    1330:	2f 91       	pop	r18
    1332:	0f 90       	pop	r0
    1334:	0b be       	out	0x3b, r0	; 59
    1336:	0f 90       	pop	r0
    1338:	09 be       	out	0x39, r0	; 57
    133a:	0f 90       	pop	r0
    133c:	08 be       	out	0x38, r0	; 56
    133e:	0f 90       	pop	r0
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	0f 90       	pop	r0
    1344:	1f 90       	pop	r1
    1346:	18 95       	reti

00001348 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	0f 92       	push	r0
    1350:	11 24       	eor	r1, r1
    1352:	08 b6       	in	r0, 0x38	; 56
    1354:	0f 92       	push	r0
    1356:	18 be       	out	0x38, r1	; 56
    1358:	09 b6       	in	r0, 0x39	; 57
    135a:	0f 92       	push	r0
    135c:	19 be       	out	0x39, r1	; 57
    135e:	0b b6       	in	r0, 0x3b	; 59
    1360:	0f 92       	push	r0
    1362:	1b be       	out	0x3b, r1	; 59
    1364:	2f 93       	push	r18
    1366:	3f 93       	push	r19
    1368:	4f 93       	push	r20
    136a:	5f 93       	push	r21
    136c:	6f 93       	push	r22
    136e:	7f 93       	push	r23
    1370:	8f 93       	push	r24
    1372:	9f 93       	push	r25
    1374:	af 93       	push	r26
    1376:	bf 93       	push	r27
    1378:	ef 93       	push	r30
    137a:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    137c:	e0 91 9b 20 	lds	r30, 0x209B	; 0x80209b <tc_tcd1_cca_callback>
    1380:	f0 91 9c 20 	lds	r31, 0x209C	; 0x80209c <tc_tcd1_cca_callback+0x1>
    1384:	30 97       	sbiw	r30, 0x00	; 0
    1386:	09 f0       	breq	.+2      	; 0x138a <__vector_85+0x42>
		tc_tcd1_cca_callback();
    1388:	19 95       	eicall
	}
}
    138a:	ff 91       	pop	r31
    138c:	ef 91       	pop	r30
    138e:	bf 91       	pop	r27
    1390:	af 91       	pop	r26
    1392:	9f 91       	pop	r25
    1394:	8f 91       	pop	r24
    1396:	7f 91       	pop	r23
    1398:	6f 91       	pop	r22
    139a:	5f 91       	pop	r21
    139c:	4f 91       	pop	r20
    139e:	3f 91       	pop	r19
    13a0:	2f 91       	pop	r18
    13a2:	0f 90       	pop	r0
    13a4:	0b be       	out	0x3b, r0	; 59
    13a6:	0f 90       	pop	r0
    13a8:	09 be       	out	0x39, r0	; 57
    13aa:	0f 90       	pop	r0
    13ac:	08 be       	out	0x38, r0	; 56
    13ae:	0f 90       	pop	r0
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	0f 90       	pop	r0
    13b4:	1f 90       	pop	r1
    13b6:	18 95       	reti

000013b8 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    13b8:	1f 92       	push	r1
    13ba:	0f 92       	push	r0
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	0f 92       	push	r0
    13c0:	11 24       	eor	r1, r1
    13c2:	08 b6       	in	r0, 0x38	; 56
    13c4:	0f 92       	push	r0
    13c6:	18 be       	out	0x38, r1	; 56
    13c8:	09 b6       	in	r0, 0x39	; 57
    13ca:	0f 92       	push	r0
    13cc:	19 be       	out	0x39, r1	; 57
    13ce:	0b b6       	in	r0, 0x3b	; 59
    13d0:	0f 92       	push	r0
    13d2:	1b be       	out	0x3b, r1	; 59
    13d4:	2f 93       	push	r18
    13d6:	3f 93       	push	r19
    13d8:	4f 93       	push	r20
    13da:	5f 93       	push	r21
    13dc:	6f 93       	push	r22
    13de:	7f 93       	push	r23
    13e0:	8f 93       	push	r24
    13e2:	9f 93       	push	r25
    13e4:	af 93       	push	r26
    13e6:	bf 93       	push	r27
    13e8:	ef 93       	push	r30
    13ea:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    13ec:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <tc_tcd1_ccb_callback>
    13f0:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <tc_tcd1_ccb_callback+0x1>
    13f4:	30 97       	sbiw	r30, 0x00	; 0
    13f6:	09 f0       	breq	.+2      	; 0x13fa <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    13f8:	19 95       	eicall
	}
}
    13fa:	ff 91       	pop	r31
    13fc:	ef 91       	pop	r30
    13fe:	bf 91       	pop	r27
    1400:	af 91       	pop	r26
    1402:	9f 91       	pop	r25
    1404:	8f 91       	pop	r24
    1406:	7f 91       	pop	r23
    1408:	6f 91       	pop	r22
    140a:	5f 91       	pop	r21
    140c:	4f 91       	pop	r20
    140e:	3f 91       	pop	r19
    1410:	2f 91       	pop	r18
    1412:	0f 90       	pop	r0
    1414:	0b be       	out	0x3b, r0	; 59
    1416:	0f 90       	pop	r0
    1418:	09 be       	out	0x39, r0	; 57
    141a:	0f 90       	pop	r0
    141c:	08 be       	out	0x38, r0	; 56
    141e:	0f 90       	pop	r0
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	0f 90       	pop	r0
    1424:	1f 90       	pop	r1
    1426:	18 95       	reti

00001428 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    1428:	1f 92       	push	r1
    142a:	0f 92       	push	r0
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	0f 92       	push	r0
    1430:	11 24       	eor	r1, r1
    1432:	08 b6       	in	r0, 0x38	; 56
    1434:	0f 92       	push	r0
    1436:	18 be       	out	0x38, r1	; 56
    1438:	09 b6       	in	r0, 0x39	; 57
    143a:	0f 92       	push	r0
    143c:	19 be       	out	0x39, r1	; 57
    143e:	0b b6       	in	r0, 0x3b	; 59
    1440:	0f 92       	push	r0
    1442:	1b be       	out	0x3b, r1	; 59
    1444:	2f 93       	push	r18
    1446:	3f 93       	push	r19
    1448:	4f 93       	push	r20
    144a:	5f 93       	push	r21
    144c:	6f 93       	push	r22
    144e:	7f 93       	push	r23
    1450:	8f 93       	push	r24
    1452:	9f 93       	push	r25
    1454:	af 93       	push	r26
    1456:	bf 93       	push	r27
    1458:	ef 93       	push	r30
    145a:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    145c:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <tc_tce0_ovf_callback>
    1460:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <tc_tce0_ovf_callback+0x1>
    1464:	30 97       	sbiw	r30, 0x00	; 0
    1466:	09 f0       	breq	.+2      	; 0x146a <__vector_47+0x42>
		tc_tce0_ovf_callback();
    1468:	19 95       	eicall
	}
}
    146a:	ff 91       	pop	r31
    146c:	ef 91       	pop	r30
    146e:	bf 91       	pop	r27
    1470:	af 91       	pop	r26
    1472:	9f 91       	pop	r25
    1474:	8f 91       	pop	r24
    1476:	7f 91       	pop	r23
    1478:	6f 91       	pop	r22
    147a:	5f 91       	pop	r21
    147c:	4f 91       	pop	r20
    147e:	3f 91       	pop	r19
    1480:	2f 91       	pop	r18
    1482:	0f 90       	pop	r0
    1484:	0b be       	out	0x3b, r0	; 59
    1486:	0f 90       	pop	r0
    1488:	09 be       	out	0x39, r0	; 57
    148a:	0f 90       	pop	r0
    148c:	08 be       	out	0x38, r0	; 56
    148e:	0f 90       	pop	r0
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	0f 90       	pop	r0
    1494:	1f 90       	pop	r1
    1496:	18 95       	reti

00001498 <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1
    14a2:	08 b6       	in	r0, 0x38	; 56
    14a4:	0f 92       	push	r0
    14a6:	18 be       	out	0x38, r1	; 56
    14a8:	09 b6       	in	r0, 0x39	; 57
    14aa:	0f 92       	push	r0
    14ac:	19 be       	out	0x39, r1	; 57
    14ae:	0b b6       	in	r0, 0x3b	; 59
    14b0:	0f 92       	push	r0
    14b2:	1b be       	out	0x3b, r1	; 59
    14b4:	2f 93       	push	r18
    14b6:	3f 93       	push	r19
    14b8:	4f 93       	push	r20
    14ba:	5f 93       	push	r21
    14bc:	6f 93       	push	r22
    14be:	7f 93       	push	r23
    14c0:	8f 93       	push	r24
    14c2:	9f 93       	push	r25
    14c4:	af 93       	push	r26
    14c6:	bf 93       	push	r27
    14c8:	ef 93       	push	r30
    14ca:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    14cc:	e0 91 95 20 	lds	r30, 0x2095	; 0x802095 <tc_tce0_err_callback>
    14d0:	f0 91 96 20 	lds	r31, 0x2096	; 0x802096 <tc_tce0_err_callback+0x1>
    14d4:	30 97       	sbiw	r30, 0x00	; 0
    14d6:	09 f0       	breq	.+2      	; 0x14da <__vector_48+0x42>
		tc_tce0_err_callback();
    14d8:	19 95       	eicall
	}
}
    14da:	ff 91       	pop	r31
    14dc:	ef 91       	pop	r30
    14de:	bf 91       	pop	r27
    14e0:	af 91       	pop	r26
    14e2:	9f 91       	pop	r25
    14e4:	8f 91       	pop	r24
    14e6:	7f 91       	pop	r23
    14e8:	6f 91       	pop	r22
    14ea:	5f 91       	pop	r21
    14ec:	4f 91       	pop	r20
    14ee:	3f 91       	pop	r19
    14f0:	2f 91       	pop	r18
    14f2:	0f 90       	pop	r0
    14f4:	0b be       	out	0x3b, r0	; 59
    14f6:	0f 90       	pop	r0
    14f8:	09 be       	out	0x39, r0	; 57
    14fa:	0f 90       	pop	r0
    14fc:	08 be       	out	0x38, r0	; 56
    14fe:	0f 90       	pop	r0
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	0f 90       	pop	r0
    1504:	1f 90       	pop	r1
    1506:	18 95       	reti

00001508 <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    1508:	1f 92       	push	r1
    150a:	0f 92       	push	r0
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	0f 92       	push	r0
    1510:	11 24       	eor	r1, r1
    1512:	08 b6       	in	r0, 0x38	; 56
    1514:	0f 92       	push	r0
    1516:	18 be       	out	0x38, r1	; 56
    1518:	09 b6       	in	r0, 0x39	; 57
    151a:	0f 92       	push	r0
    151c:	19 be       	out	0x39, r1	; 57
    151e:	0b b6       	in	r0, 0x3b	; 59
    1520:	0f 92       	push	r0
    1522:	1b be       	out	0x3b, r1	; 59
    1524:	2f 93       	push	r18
    1526:	3f 93       	push	r19
    1528:	4f 93       	push	r20
    152a:	5f 93       	push	r21
    152c:	6f 93       	push	r22
    152e:	7f 93       	push	r23
    1530:	8f 93       	push	r24
    1532:	9f 93       	push	r25
    1534:	af 93       	push	r26
    1536:	bf 93       	push	r27
    1538:	ef 93       	push	r30
    153a:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    153c:	e0 91 93 20 	lds	r30, 0x2093	; 0x802093 <tc_tce0_cca_callback>
    1540:	f0 91 94 20 	lds	r31, 0x2094	; 0x802094 <tc_tce0_cca_callback+0x1>
    1544:	30 97       	sbiw	r30, 0x00	; 0
    1546:	09 f0       	breq	.+2      	; 0x154a <__vector_49+0x42>
		tc_tce0_cca_callback();
    1548:	19 95       	eicall
	}
}
    154a:	ff 91       	pop	r31
    154c:	ef 91       	pop	r30
    154e:	bf 91       	pop	r27
    1550:	af 91       	pop	r26
    1552:	9f 91       	pop	r25
    1554:	8f 91       	pop	r24
    1556:	7f 91       	pop	r23
    1558:	6f 91       	pop	r22
    155a:	5f 91       	pop	r21
    155c:	4f 91       	pop	r20
    155e:	3f 91       	pop	r19
    1560:	2f 91       	pop	r18
    1562:	0f 90       	pop	r0
    1564:	0b be       	out	0x3b, r0	; 59
    1566:	0f 90       	pop	r0
    1568:	09 be       	out	0x39, r0	; 57
    156a:	0f 90       	pop	r0
    156c:	08 be       	out	0x38, r0	; 56
    156e:	0f 90       	pop	r0
    1570:	0f be       	out	0x3f, r0	; 63
    1572:	0f 90       	pop	r0
    1574:	1f 90       	pop	r1
    1576:	18 95       	reti

00001578 <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    1578:	1f 92       	push	r1
    157a:	0f 92       	push	r0
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	0f 92       	push	r0
    1580:	11 24       	eor	r1, r1
    1582:	08 b6       	in	r0, 0x38	; 56
    1584:	0f 92       	push	r0
    1586:	18 be       	out	0x38, r1	; 56
    1588:	09 b6       	in	r0, 0x39	; 57
    158a:	0f 92       	push	r0
    158c:	19 be       	out	0x39, r1	; 57
    158e:	0b b6       	in	r0, 0x3b	; 59
    1590:	0f 92       	push	r0
    1592:	1b be       	out	0x3b, r1	; 59
    1594:	2f 93       	push	r18
    1596:	3f 93       	push	r19
    1598:	4f 93       	push	r20
    159a:	5f 93       	push	r21
    159c:	6f 93       	push	r22
    159e:	7f 93       	push	r23
    15a0:	8f 93       	push	r24
    15a2:	9f 93       	push	r25
    15a4:	af 93       	push	r26
    15a6:	bf 93       	push	r27
    15a8:	ef 93       	push	r30
    15aa:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    15ac:	e0 91 91 20 	lds	r30, 0x2091	; 0x802091 <tc_tce0_ccb_callback>
    15b0:	f0 91 92 20 	lds	r31, 0x2092	; 0x802092 <tc_tce0_ccb_callback+0x1>
    15b4:	30 97       	sbiw	r30, 0x00	; 0
    15b6:	09 f0       	breq	.+2      	; 0x15ba <__vector_50+0x42>
		tc_tce0_ccb_callback();
    15b8:	19 95       	eicall
	}
}
    15ba:	ff 91       	pop	r31
    15bc:	ef 91       	pop	r30
    15be:	bf 91       	pop	r27
    15c0:	af 91       	pop	r26
    15c2:	9f 91       	pop	r25
    15c4:	8f 91       	pop	r24
    15c6:	7f 91       	pop	r23
    15c8:	6f 91       	pop	r22
    15ca:	5f 91       	pop	r21
    15cc:	4f 91       	pop	r20
    15ce:	3f 91       	pop	r19
    15d0:	2f 91       	pop	r18
    15d2:	0f 90       	pop	r0
    15d4:	0b be       	out	0x3b, r0	; 59
    15d6:	0f 90       	pop	r0
    15d8:	09 be       	out	0x39, r0	; 57
    15da:	0f 90       	pop	r0
    15dc:	08 be       	out	0x38, r0	; 56
    15de:	0f 90       	pop	r0
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	0f 90       	pop	r0
    15e4:	1f 90       	pop	r1
    15e6:	18 95       	reti

000015e8 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    15e8:	1f 92       	push	r1
    15ea:	0f 92       	push	r0
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	0f 92       	push	r0
    15f0:	11 24       	eor	r1, r1
    15f2:	08 b6       	in	r0, 0x38	; 56
    15f4:	0f 92       	push	r0
    15f6:	18 be       	out	0x38, r1	; 56
    15f8:	09 b6       	in	r0, 0x39	; 57
    15fa:	0f 92       	push	r0
    15fc:	19 be       	out	0x39, r1	; 57
    15fe:	0b b6       	in	r0, 0x3b	; 59
    1600:	0f 92       	push	r0
    1602:	1b be       	out	0x3b, r1	; 59
    1604:	2f 93       	push	r18
    1606:	3f 93       	push	r19
    1608:	4f 93       	push	r20
    160a:	5f 93       	push	r21
    160c:	6f 93       	push	r22
    160e:	7f 93       	push	r23
    1610:	8f 93       	push	r24
    1612:	9f 93       	push	r25
    1614:	af 93       	push	r26
    1616:	bf 93       	push	r27
    1618:	ef 93       	push	r30
    161a:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    161c:	e0 91 8f 20 	lds	r30, 0x208F	; 0x80208f <tc_tce0_ccc_callback>
    1620:	f0 91 90 20 	lds	r31, 0x2090	; 0x802090 <tc_tce0_ccc_callback+0x1>
    1624:	30 97       	sbiw	r30, 0x00	; 0
    1626:	09 f0       	breq	.+2      	; 0x162a <__vector_51+0x42>
		tc_tce0_ccc_callback();
    1628:	19 95       	eicall
	}
}
    162a:	ff 91       	pop	r31
    162c:	ef 91       	pop	r30
    162e:	bf 91       	pop	r27
    1630:	af 91       	pop	r26
    1632:	9f 91       	pop	r25
    1634:	8f 91       	pop	r24
    1636:	7f 91       	pop	r23
    1638:	6f 91       	pop	r22
    163a:	5f 91       	pop	r21
    163c:	4f 91       	pop	r20
    163e:	3f 91       	pop	r19
    1640:	2f 91       	pop	r18
    1642:	0f 90       	pop	r0
    1644:	0b be       	out	0x3b, r0	; 59
    1646:	0f 90       	pop	r0
    1648:	09 be       	out	0x39, r0	; 57
    164a:	0f 90       	pop	r0
    164c:	08 be       	out	0x38, r0	; 56
    164e:	0f 90       	pop	r0
    1650:	0f be       	out	0x3f, r0	; 63
    1652:	0f 90       	pop	r0
    1654:	1f 90       	pop	r1
    1656:	18 95       	reti

00001658 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1658:	1f 92       	push	r1
    165a:	0f 92       	push	r0
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	0f 92       	push	r0
    1660:	11 24       	eor	r1, r1
    1662:	08 b6       	in	r0, 0x38	; 56
    1664:	0f 92       	push	r0
    1666:	18 be       	out	0x38, r1	; 56
    1668:	09 b6       	in	r0, 0x39	; 57
    166a:	0f 92       	push	r0
    166c:	19 be       	out	0x39, r1	; 57
    166e:	0b b6       	in	r0, 0x3b	; 59
    1670:	0f 92       	push	r0
    1672:	1b be       	out	0x3b, r1	; 59
    1674:	2f 93       	push	r18
    1676:	3f 93       	push	r19
    1678:	4f 93       	push	r20
    167a:	5f 93       	push	r21
    167c:	6f 93       	push	r22
    167e:	7f 93       	push	r23
    1680:	8f 93       	push	r24
    1682:	9f 93       	push	r25
    1684:	af 93       	push	r26
    1686:	bf 93       	push	r27
    1688:	ef 93       	push	r30
    168a:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    168c:	e0 91 8d 20 	lds	r30, 0x208D	; 0x80208d <tc_tce0_ccd_callback>
    1690:	f0 91 8e 20 	lds	r31, 0x208E	; 0x80208e <tc_tce0_ccd_callback+0x1>
    1694:	30 97       	sbiw	r30, 0x00	; 0
    1696:	09 f0       	breq	.+2      	; 0x169a <__vector_52+0x42>
		tc_tce0_ccd_callback();
    1698:	19 95       	eicall
	}
}
    169a:	ff 91       	pop	r31
    169c:	ef 91       	pop	r30
    169e:	bf 91       	pop	r27
    16a0:	af 91       	pop	r26
    16a2:	9f 91       	pop	r25
    16a4:	8f 91       	pop	r24
    16a6:	7f 91       	pop	r23
    16a8:	6f 91       	pop	r22
    16aa:	5f 91       	pop	r21
    16ac:	4f 91       	pop	r20
    16ae:	3f 91       	pop	r19
    16b0:	2f 91       	pop	r18
    16b2:	0f 90       	pop	r0
    16b4:	0b be       	out	0x3b, r0	; 59
    16b6:	0f 90       	pop	r0
    16b8:	09 be       	out	0x39, r0	; 57
    16ba:	0f 90       	pop	r0
    16bc:	08 be       	out	0x38, r0	; 56
    16be:	0f 90       	pop	r0
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	0f 90       	pop	r0
    16c4:	1f 90       	pop	r1
    16c6:	18 95       	reti

000016c8 <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    16c8:	1f 92       	push	r1
    16ca:	0f 92       	push	r0
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	0f 92       	push	r0
    16d0:	11 24       	eor	r1, r1
    16d2:	08 b6       	in	r0, 0x38	; 56
    16d4:	0f 92       	push	r0
    16d6:	18 be       	out	0x38, r1	; 56
    16d8:	09 b6       	in	r0, 0x39	; 57
    16da:	0f 92       	push	r0
    16dc:	19 be       	out	0x39, r1	; 57
    16de:	0b b6       	in	r0, 0x3b	; 59
    16e0:	0f 92       	push	r0
    16e2:	1b be       	out	0x3b, r1	; 59
    16e4:	2f 93       	push	r18
    16e6:	3f 93       	push	r19
    16e8:	4f 93       	push	r20
    16ea:	5f 93       	push	r21
    16ec:	6f 93       	push	r22
    16ee:	7f 93       	push	r23
    16f0:	8f 93       	push	r24
    16f2:	9f 93       	push	r25
    16f4:	af 93       	push	r26
    16f6:	bf 93       	push	r27
    16f8:	ef 93       	push	r30
    16fa:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    16fc:	e0 91 8b 20 	lds	r30, 0x208B	; 0x80208b <tc_tce1_ovf_callback>
    1700:	f0 91 8c 20 	lds	r31, 0x208C	; 0x80208c <tc_tce1_ovf_callback+0x1>
    1704:	30 97       	sbiw	r30, 0x00	; 0
    1706:	09 f0       	breq	.+2      	; 0x170a <__vector_53+0x42>
		tc_tce1_ovf_callback();
    1708:	19 95       	eicall
	}
}
    170a:	ff 91       	pop	r31
    170c:	ef 91       	pop	r30
    170e:	bf 91       	pop	r27
    1710:	af 91       	pop	r26
    1712:	9f 91       	pop	r25
    1714:	8f 91       	pop	r24
    1716:	7f 91       	pop	r23
    1718:	6f 91       	pop	r22
    171a:	5f 91       	pop	r21
    171c:	4f 91       	pop	r20
    171e:	3f 91       	pop	r19
    1720:	2f 91       	pop	r18
    1722:	0f 90       	pop	r0
    1724:	0b be       	out	0x3b, r0	; 59
    1726:	0f 90       	pop	r0
    1728:	09 be       	out	0x39, r0	; 57
    172a:	0f 90       	pop	r0
    172c:	08 be       	out	0x38, r0	; 56
    172e:	0f 90       	pop	r0
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	0f 90       	pop	r0
    1734:	1f 90       	pop	r1
    1736:	18 95       	reti

00001738 <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    1738:	1f 92       	push	r1
    173a:	0f 92       	push	r0
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	0f 92       	push	r0
    1740:	11 24       	eor	r1, r1
    1742:	08 b6       	in	r0, 0x38	; 56
    1744:	0f 92       	push	r0
    1746:	18 be       	out	0x38, r1	; 56
    1748:	09 b6       	in	r0, 0x39	; 57
    174a:	0f 92       	push	r0
    174c:	19 be       	out	0x39, r1	; 57
    174e:	0b b6       	in	r0, 0x3b	; 59
    1750:	0f 92       	push	r0
    1752:	1b be       	out	0x3b, r1	; 59
    1754:	2f 93       	push	r18
    1756:	3f 93       	push	r19
    1758:	4f 93       	push	r20
    175a:	5f 93       	push	r21
    175c:	6f 93       	push	r22
    175e:	7f 93       	push	r23
    1760:	8f 93       	push	r24
    1762:	9f 93       	push	r25
    1764:	af 93       	push	r26
    1766:	bf 93       	push	r27
    1768:	ef 93       	push	r30
    176a:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    176c:	e0 91 89 20 	lds	r30, 0x2089	; 0x802089 <tc_tce1_err_callback>
    1770:	f0 91 8a 20 	lds	r31, 0x208A	; 0x80208a <tc_tce1_err_callback+0x1>
    1774:	30 97       	sbiw	r30, 0x00	; 0
    1776:	09 f0       	breq	.+2      	; 0x177a <__vector_54+0x42>
		tc_tce1_err_callback();
    1778:	19 95       	eicall
	}
}
    177a:	ff 91       	pop	r31
    177c:	ef 91       	pop	r30
    177e:	bf 91       	pop	r27
    1780:	af 91       	pop	r26
    1782:	9f 91       	pop	r25
    1784:	8f 91       	pop	r24
    1786:	7f 91       	pop	r23
    1788:	6f 91       	pop	r22
    178a:	5f 91       	pop	r21
    178c:	4f 91       	pop	r20
    178e:	3f 91       	pop	r19
    1790:	2f 91       	pop	r18
    1792:	0f 90       	pop	r0
    1794:	0b be       	out	0x3b, r0	; 59
    1796:	0f 90       	pop	r0
    1798:	09 be       	out	0x39, r0	; 57
    179a:	0f 90       	pop	r0
    179c:	08 be       	out	0x38, r0	; 56
    179e:	0f 90       	pop	r0
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	0f 90       	pop	r0
    17a4:	1f 90       	pop	r1
    17a6:	18 95       	reti

000017a8 <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    17a8:	1f 92       	push	r1
    17aa:	0f 92       	push	r0
    17ac:	0f b6       	in	r0, 0x3f	; 63
    17ae:	0f 92       	push	r0
    17b0:	11 24       	eor	r1, r1
    17b2:	08 b6       	in	r0, 0x38	; 56
    17b4:	0f 92       	push	r0
    17b6:	18 be       	out	0x38, r1	; 56
    17b8:	09 b6       	in	r0, 0x39	; 57
    17ba:	0f 92       	push	r0
    17bc:	19 be       	out	0x39, r1	; 57
    17be:	0b b6       	in	r0, 0x3b	; 59
    17c0:	0f 92       	push	r0
    17c2:	1b be       	out	0x3b, r1	; 59
    17c4:	2f 93       	push	r18
    17c6:	3f 93       	push	r19
    17c8:	4f 93       	push	r20
    17ca:	5f 93       	push	r21
    17cc:	6f 93       	push	r22
    17ce:	7f 93       	push	r23
    17d0:	8f 93       	push	r24
    17d2:	9f 93       	push	r25
    17d4:	af 93       	push	r26
    17d6:	bf 93       	push	r27
    17d8:	ef 93       	push	r30
    17da:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    17dc:	e0 91 87 20 	lds	r30, 0x2087	; 0x802087 <tc_tce1_cca_callback>
    17e0:	f0 91 88 20 	lds	r31, 0x2088	; 0x802088 <tc_tce1_cca_callback+0x1>
    17e4:	30 97       	sbiw	r30, 0x00	; 0
    17e6:	09 f0       	breq	.+2      	; 0x17ea <__vector_55+0x42>
		tc_tce1_cca_callback();
    17e8:	19 95       	eicall
	}
}
    17ea:	ff 91       	pop	r31
    17ec:	ef 91       	pop	r30
    17ee:	bf 91       	pop	r27
    17f0:	af 91       	pop	r26
    17f2:	9f 91       	pop	r25
    17f4:	8f 91       	pop	r24
    17f6:	7f 91       	pop	r23
    17f8:	6f 91       	pop	r22
    17fa:	5f 91       	pop	r21
    17fc:	4f 91       	pop	r20
    17fe:	3f 91       	pop	r19
    1800:	2f 91       	pop	r18
    1802:	0f 90       	pop	r0
    1804:	0b be       	out	0x3b, r0	; 59
    1806:	0f 90       	pop	r0
    1808:	09 be       	out	0x39, r0	; 57
    180a:	0f 90       	pop	r0
    180c:	08 be       	out	0x38, r0	; 56
    180e:	0f 90       	pop	r0
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	0f 90       	pop	r0
    1814:	1f 90       	pop	r1
    1816:	18 95       	reti

00001818 <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    1818:	1f 92       	push	r1
    181a:	0f 92       	push	r0
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	0f 92       	push	r0
    1820:	11 24       	eor	r1, r1
    1822:	08 b6       	in	r0, 0x38	; 56
    1824:	0f 92       	push	r0
    1826:	18 be       	out	0x38, r1	; 56
    1828:	09 b6       	in	r0, 0x39	; 57
    182a:	0f 92       	push	r0
    182c:	19 be       	out	0x39, r1	; 57
    182e:	0b b6       	in	r0, 0x3b	; 59
    1830:	0f 92       	push	r0
    1832:	1b be       	out	0x3b, r1	; 59
    1834:	2f 93       	push	r18
    1836:	3f 93       	push	r19
    1838:	4f 93       	push	r20
    183a:	5f 93       	push	r21
    183c:	6f 93       	push	r22
    183e:	7f 93       	push	r23
    1840:	8f 93       	push	r24
    1842:	9f 93       	push	r25
    1844:	af 93       	push	r26
    1846:	bf 93       	push	r27
    1848:	ef 93       	push	r30
    184a:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    184c:	e0 91 85 20 	lds	r30, 0x2085	; 0x802085 <tc_tce1_ccb_callback>
    1850:	f0 91 86 20 	lds	r31, 0x2086	; 0x802086 <tc_tce1_ccb_callback+0x1>
    1854:	30 97       	sbiw	r30, 0x00	; 0
    1856:	09 f0       	breq	.+2      	; 0x185a <__vector_56+0x42>
		tc_tce1_ccb_callback();
    1858:	19 95       	eicall
	}
}
    185a:	ff 91       	pop	r31
    185c:	ef 91       	pop	r30
    185e:	bf 91       	pop	r27
    1860:	af 91       	pop	r26
    1862:	9f 91       	pop	r25
    1864:	8f 91       	pop	r24
    1866:	7f 91       	pop	r23
    1868:	6f 91       	pop	r22
    186a:	5f 91       	pop	r21
    186c:	4f 91       	pop	r20
    186e:	3f 91       	pop	r19
    1870:	2f 91       	pop	r18
    1872:	0f 90       	pop	r0
    1874:	0b be       	out	0x3b, r0	; 59
    1876:	0f 90       	pop	r0
    1878:	09 be       	out	0x39, r0	; 57
    187a:	0f 90       	pop	r0
    187c:	08 be       	out	0x38, r0	; 56
    187e:	0f 90       	pop	r0
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	0f 90       	pop	r0
    1884:	1f 90       	pop	r1
    1886:	18 95       	reti

00001888 <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    1888:	1f 92       	push	r1
    188a:	0f 92       	push	r0
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	0f 92       	push	r0
    1890:	11 24       	eor	r1, r1
    1892:	08 b6       	in	r0, 0x38	; 56
    1894:	0f 92       	push	r0
    1896:	18 be       	out	0x38, r1	; 56
    1898:	09 b6       	in	r0, 0x39	; 57
    189a:	0f 92       	push	r0
    189c:	19 be       	out	0x39, r1	; 57
    189e:	0b b6       	in	r0, 0x3b	; 59
    18a0:	0f 92       	push	r0
    18a2:	1b be       	out	0x3b, r1	; 59
    18a4:	2f 93       	push	r18
    18a6:	3f 93       	push	r19
    18a8:	4f 93       	push	r20
    18aa:	5f 93       	push	r21
    18ac:	6f 93       	push	r22
    18ae:	7f 93       	push	r23
    18b0:	8f 93       	push	r24
    18b2:	9f 93       	push	r25
    18b4:	af 93       	push	r26
    18b6:	bf 93       	push	r27
    18b8:	ef 93       	push	r30
    18ba:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    18bc:	e0 91 83 20 	lds	r30, 0x2083	; 0x802083 <tc_tcf0_ovf_callback>
    18c0:	f0 91 84 20 	lds	r31, 0x2084	; 0x802084 <tc_tcf0_ovf_callback+0x1>
    18c4:	30 97       	sbiw	r30, 0x00	; 0
    18c6:	09 f0       	breq	.+2      	; 0x18ca <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    18c8:	19 95       	eicall
	}
}
    18ca:	ff 91       	pop	r31
    18cc:	ef 91       	pop	r30
    18ce:	bf 91       	pop	r27
    18d0:	af 91       	pop	r26
    18d2:	9f 91       	pop	r25
    18d4:	8f 91       	pop	r24
    18d6:	7f 91       	pop	r23
    18d8:	6f 91       	pop	r22
    18da:	5f 91       	pop	r21
    18dc:	4f 91       	pop	r20
    18de:	3f 91       	pop	r19
    18e0:	2f 91       	pop	r18
    18e2:	0f 90       	pop	r0
    18e4:	0b be       	out	0x3b, r0	; 59
    18e6:	0f 90       	pop	r0
    18e8:	09 be       	out	0x39, r0	; 57
    18ea:	0f 90       	pop	r0
    18ec:	08 be       	out	0x38, r0	; 56
    18ee:	0f 90       	pop	r0
    18f0:	0f be       	out	0x3f, r0	; 63
    18f2:	0f 90       	pop	r0
    18f4:	1f 90       	pop	r1
    18f6:	18 95       	reti

000018f8 <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    18f8:	1f 92       	push	r1
    18fa:	0f 92       	push	r0
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	0f 92       	push	r0
    1900:	11 24       	eor	r1, r1
    1902:	08 b6       	in	r0, 0x38	; 56
    1904:	0f 92       	push	r0
    1906:	18 be       	out	0x38, r1	; 56
    1908:	09 b6       	in	r0, 0x39	; 57
    190a:	0f 92       	push	r0
    190c:	19 be       	out	0x39, r1	; 57
    190e:	0b b6       	in	r0, 0x3b	; 59
    1910:	0f 92       	push	r0
    1912:	1b be       	out	0x3b, r1	; 59
    1914:	2f 93       	push	r18
    1916:	3f 93       	push	r19
    1918:	4f 93       	push	r20
    191a:	5f 93       	push	r21
    191c:	6f 93       	push	r22
    191e:	7f 93       	push	r23
    1920:	8f 93       	push	r24
    1922:	9f 93       	push	r25
    1924:	af 93       	push	r26
    1926:	bf 93       	push	r27
    1928:	ef 93       	push	r30
    192a:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    192c:	e0 91 81 20 	lds	r30, 0x2081	; 0x802081 <tc_tcf0_err_callback>
    1930:	f0 91 82 20 	lds	r31, 0x2082	; 0x802082 <tc_tcf0_err_callback+0x1>
    1934:	30 97       	sbiw	r30, 0x00	; 0
    1936:	09 f0       	breq	.+2      	; 0x193a <__vector_109+0x42>
		tc_tcf0_err_callback();
    1938:	19 95       	eicall
	}
}
    193a:	ff 91       	pop	r31
    193c:	ef 91       	pop	r30
    193e:	bf 91       	pop	r27
    1940:	af 91       	pop	r26
    1942:	9f 91       	pop	r25
    1944:	8f 91       	pop	r24
    1946:	7f 91       	pop	r23
    1948:	6f 91       	pop	r22
    194a:	5f 91       	pop	r21
    194c:	4f 91       	pop	r20
    194e:	3f 91       	pop	r19
    1950:	2f 91       	pop	r18
    1952:	0f 90       	pop	r0
    1954:	0b be       	out	0x3b, r0	; 59
    1956:	0f 90       	pop	r0
    1958:	09 be       	out	0x39, r0	; 57
    195a:	0f 90       	pop	r0
    195c:	08 be       	out	0x38, r0	; 56
    195e:	0f 90       	pop	r0
    1960:	0f be       	out	0x3f, r0	; 63
    1962:	0f 90       	pop	r0
    1964:	1f 90       	pop	r1
    1966:	18 95       	reti

00001968 <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1968:	1f 92       	push	r1
    196a:	0f 92       	push	r0
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	0f 92       	push	r0
    1970:	11 24       	eor	r1, r1
    1972:	08 b6       	in	r0, 0x38	; 56
    1974:	0f 92       	push	r0
    1976:	18 be       	out	0x38, r1	; 56
    1978:	09 b6       	in	r0, 0x39	; 57
    197a:	0f 92       	push	r0
    197c:	19 be       	out	0x39, r1	; 57
    197e:	0b b6       	in	r0, 0x3b	; 59
    1980:	0f 92       	push	r0
    1982:	1b be       	out	0x3b, r1	; 59
    1984:	2f 93       	push	r18
    1986:	3f 93       	push	r19
    1988:	4f 93       	push	r20
    198a:	5f 93       	push	r21
    198c:	6f 93       	push	r22
    198e:	7f 93       	push	r23
    1990:	8f 93       	push	r24
    1992:	9f 93       	push	r25
    1994:	af 93       	push	r26
    1996:	bf 93       	push	r27
    1998:	ef 93       	push	r30
    199a:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    199c:	e0 91 7f 20 	lds	r30, 0x207F	; 0x80207f <tc_tcf0_cca_callback>
    19a0:	f0 91 80 20 	lds	r31, 0x2080	; 0x802080 <tc_tcf0_cca_callback+0x1>
    19a4:	30 97       	sbiw	r30, 0x00	; 0
    19a6:	09 f0       	breq	.+2      	; 0x19aa <__vector_110+0x42>
		tc_tcf0_cca_callback();
    19a8:	19 95       	eicall
	}
}
    19aa:	ff 91       	pop	r31
    19ac:	ef 91       	pop	r30
    19ae:	bf 91       	pop	r27
    19b0:	af 91       	pop	r26
    19b2:	9f 91       	pop	r25
    19b4:	8f 91       	pop	r24
    19b6:	7f 91       	pop	r23
    19b8:	6f 91       	pop	r22
    19ba:	5f 91       	pop	r21
    19bc:	4f 91       	pop	r20
    19be:	3f 91       	pop	r19
    19c0:	2f 91       	pop	r18
    19c2:	0f 90       	pop	r0
    19c4:	0b be       	out	0x3b, r0	; 59
    19c6:	0f 90       	pop	r0
    19c8:	09 be       	out	0x39, r0	; 57
    19ca:	0f 90       	pop	r0
    19cc:	08 be       	out	0x38, r0	; 56
    19ce:	0f 90       	pop	r0
    19d0:	0f be       	out	0x3f, r0	; 63
    19d2:	0f 90       	pop	r0
    19d4:	1f 90       	pop	r1
    19d6:	18 95       	reti

000019d8 <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    19d8:	1f 92       	push	r1
    19da:	0f 92       	push	r0
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	0f 92       	push	r0
    19e0:	11 24       	eor	r1, r1
    19e2:	08 b6       	in	r0, 0x38	; 56
    19e4:	0f 92       	push	r0
    19e6:	18 be       	out	0x38, r1	; 56
    19e8:	09 b6       	in	r0, 0x39	; 57
    19ea:	0f 92       	push	r0
    19ec:	19 be       	out	0x39, r1	; 57
    19ee:	0b b6       	in	r0, 0x3b	; 59
    19f0:	0f 92       	push	r0
    19f2:	1b be       	out	0x3b, r1	; 59
    19f4:	2f 93       	push	r18
    19f6:	3f 93       	push	r19
    19f8:	4f 93       	push	r20
    19fa:	5f 93       	push	r21
    19fc:	6f 93       	push	r22
    19fe:	7f 93       	push	r23
    1a00:	8f 93       	push	r24
    1a02:	9f 93       	push	r25
    1a04:	af 93       	push	r26
    1a06:	bf 93       	push	r27
    1a08:	ef 93       	push	r30
    1a0a:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1a0c:	e0 91 7d 20 	lds	r30, 0x207D	; 0x80207d <tc_tcf0_ccb_callback>
    1a10:	f0 91 7e 20 	lds	r31, 0x207E	; 0x80207e <tc_tcf0_ccb_callback+0x1>
    1a14:	30 97       	sbiw	r30, 0x00	; 0
    1a16:	09 f0       	breq	.+2      	; 0x1a1a <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    1a18:	19 95       	eicall
	}
}
    1a1a:	ff 91       	pop	r31
    1a1c:	ef 91       	pop	r30
    1a1e:	bf 91       	pop	r27
    1a20:	af 91       	pop	r26
    1a22:	9f 91       	pop	r25
    1a24:	8f 91       	pop	r24
    1a26:	7f 91       	pop	r23
    1a28:	6f 91       	pop	r22
    1a2a:	5f 91       	pop	r21
    1a2c:	4f 91       	pop	r20
    1a2e:	3f 91       	pop	r19
    1a30:	2f 91       	pop	r18
    1a32:	0f 90       	pop	r0
    1a34:	0b be       	out	0x3b, r0	; 59
    1a36:	0f 90       	pop	r0
    1a38:	09 be       	out	0x39, r0	; 57
    1a3a:	0f 90       	pop	r0
    1a3c:	08 be       	out	0x38, r0	; 56
    1a3e:	0f 90       	pop	r0
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	0f 90       	pop	r0
    1a44:	1f 90       	pop	r1
    1a46:	18 95       	reti

00001a48 <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1a48:	1f 92       	push	r1
    1a4a:	0f 92       	push	r0
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	0f 92       	push	r0
    1a50:	11 24       	eor	r1, r1
    1a52:	08 b6       	in	r0, 0x38	; 56
    1a54:	0f 92       	push	r0
    1a56:	18 be       	out	0x38, r1	; 56
    1a58:	09 b6       	in	r0, 0x39	; 57
    1a5a:	0f 92       	push	r0
    1a5c:	19 be       	out	0x39, r1	; 57
    1a5e:	0b b6       	in	r0, 0x3b	; 59
    1a60:	0f 92       	push	r0
    1a62:	1b be       	out	0x3b, r1	; 59
    1a64:	2f 93       	push	r18
    1a66:	3f 93       	push	r19
    1a68:	4f 93       	push	r20
    1a6a:	5f 93       	push	r21
    1a6c:	6f 93       	push	r22
    1a6e:	7f 93       	push	r23
    1a70:	8f 93       	push	r24
    1a72:	9f 93       	push	r25
    1a74:	af 93       	push	r26
    1a76:	bf 93       	push	r27
    1a78:	ef 93       	push	r30
    1a7a:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1a7c:	e0 91 7b 20 	lds	r30, 0x207B	; 0x80207b <tc_tcf0_ccc_callback>
    1a80:	f0 91 7c 20 	lds	r31, 0x207C	; 0x80207c <tc_tcf0_ccc_callback+0x1>
    1a84:	30 97       	sbiw	r30, 0x00	; 0
    1a86:	09 f0       	breq	.+2      	; 0x1a8a <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    1a88:	19 95       	eicall
	}
}
    1a8a:	ff 91       	pop	r31
    1a8c:	ef 91       	pop	r30
    1a8e:	bf 91       	pop	r27
    1a90:	af 91       	pop	r26
    1a92:	9f 91       	pop	r25
    1a94:	8f 91       	pop	r24
    1a96:	7f 91       	pop	r23
    1a98:	6f 91       	pop	r22
    1a9a:	5f 91       	pop	r21
    1a9c:	4f 91       	pop	r20
    1a9e:	3f 91       	pop	r19
    1aa0:	2f 91       	pop	r18
    1aa2:	0f 90       	pop	r0
    1aa4:	0b be       	out	0x3b, r0	; 59
    1aa6:	0f 90       	pop	r0
    1aa8:	09 be       	out	0x39, r0	; 57
    1aaa:	0f 90       	pop	r0
    1aac:	08 be       	out	0x38, r0	; 56
    1aae:	0f 90       	pop	r0
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	0f 90       	pop	r0
    1ab4:	1f 90       	pop	r1
    1ab6:	18 95       	reti

00001ab8 <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1ab8:	1f 92       	push	r1
    1aba:	0f 92       	push	r0
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	0f 92       	push	r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	08 b6       	in	r0, 0x38	; 56
    1ac4:	0f 92       	push	r0
    1ac6:	18 be       	out	0x38, r1	; 56
    1ac8:	09 b6       	in	r0, 0x39	; 57
    1aca:	0f 92       	push	r0
    1acc:	19 be       	out	0x39, r1	; 57
    1ace:	0b b6       	in	r0, 0x3b	; 59
    1ad0:	0f 92       	push	r0
    1ad2:	1b be       	out	0x3b, r1	; 59
    1ad4:	2f 93       	push	r18
    1ad6:	3f 93       	push	r19
    1ad8:	4f 93       	push	r20
    1ada:	5f 93       	push	r21
    1adc:	6f 93       	push	r22
    1ade:	7f 93       	push	r23
    1ae0:	8f 93       	push	r24
    1ae2:	9f 93       	push	r25
    1ae4:	af 93       	push	r26
    1ae6:	bf 93       	push	r27
    1ae8:	ef 93       	push	r30
    1aea:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1aec:	e0 91 79 20 	lds	r30, 0x2079	; 0x802079 <tc_tcf0_ccd_callback>
    1af0:	f0 91 7a 20 	lds	r31, 0x207A	; 0x80207a <tc_tcf0_ccd_callback+0x1>
    1af4:	30 97       	sbiw	r30, 0x00	; 0
    1af6:	09 f0       	breq	.+2      	; 0x1afa <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    1af8:	19 95       	eicall
	}
}
    1afa:	ff 91       	pop	r31
    1afc:	ef 91       	pop	r30
    1afe:	bf 91       	pop	r27
    1b00:	af 91       	pop	r26
    1b02:	9f 91       	pop	r25
    1b04:	8f 91       	pop	r24
    1b06:	7f 91       	pop	r23
    1b08:	6f 91       	pop	r22
    1b0a:	5f 91       	pop	r21
    1b0c:	4f 91       	pop	r20
    1b0e:	3f 91       	pop	r19
    1b10:	2f 91       	pop	r18
    1b12:	0f 90       	pop	r0
    1b14:	0b be       	out	0x3b, r0	; 59
    1b16:	0f 90       	pop	r0
    1b18:	09 be       	out	0x39, r0	; 57
    1b1a:	0f 90       	pop	r0
    1b1c:	08 be       	out	0x38, r0	; 56
    1b1e:	0f 90       	pop	r0
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	0f 90       	pop	r0
    1b24:	1f 90       	pop	r1
    1b26:	18 95       	reti

00001b28 <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    1b28:	1f 92       	push	r1
    1b2a:	0f 92       	push	r0
    1b2c:	0f b6       	in	r0, 0x3f	; 63
    1b2e:	0f 92       	push	r0
    1b30:	11 24       	eor	r1, r1
    1b32:	08 b6       	in	r0, 0x38	; 56
    1b34:	0f 92       	push	r0
    1b36:	18 be       	out	0x38, r1	; 56
    1b38:	09 b6       	in	r0, 0x39	; 57
    1b3a:	0f 92       	push	r0
    1b3c:	19 be       	out	0x39, r1	; 57
    1b3e:	0b b6       	in	r0, 0x3b	; 59
    1b40:	0f 92       	push	r0
    1b42:	1b be       	out	0x3b, r1	; 59
    1b44:	2f 93       	push	r18
    1b46:	3f 93       	push	r19
    1b48:	4f 93       	push	r20
    1b4a:	5f 93       	push	r21
    1b4c:	6f 93       	push	r22
    1b4e:	7f 93       	push	r23
    1b50:	8f 93       	push	r24
    1b52:	9f 93       	push	r25
    1b54:	af 93       	push	r26
    1b56:	bf 93       	push	r27
    1b58:	ef 93       	push	r30
    1b5a:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    1b5c:	e0 91 77 20 	lds	r30, 0x2077	; 0x802077 <tc_tcf1_ovf_callback>
    1b60:	f0 91 78 20 	lds	r31, 0x2078	; 0x802078 <tc_tcf1_ovf_callback+0x1>
    1b64:	30 97       	sbiw	r30, 0x00	; 0
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    1b68:	19 95       	eicall
	}
}
    1b6a:	ff 91       	pop	r31
    1b6c:	ef 91       	pop	r30
    1b6e:	bf 91       	pop	r27
    1b70:	af 91       	pop	r26
    1b72:	9f 91       	pop	r25
    1b74:	8f 91       	pop	r24
    1b76:	7f 91       	pop	r23
    1b78:	6f 91       	pop	r22
    1b7a:	5f 91       	pop	r21
    1b7c:	4f 91       	pop	r20
    1b7e:	3f 91       	pop	r19
    1b80:	2f 91       	pop	r18
    1b82:	0f 90       	pop	r0
    1b84:	0b be       	out	0x3b, r0	; 59
    1b86:	0f 90       	pop	r0
    1b88:	09 be       	out	0x39, r0	; 57
    1b8a:	0f 90       	pop	r0
    1b8c:	08 be       	out	0x38, r0	; 56
    1b8e:	0f 90       	pop	r0
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	0f 90       	pop	r0
    1b94:	1f 90       	pop	r1
    1b96:	18 95       	reti

00001b98 <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    1b98:	1f 92       	push	r1
    1b9a:	0f 92       	push	r0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	0f 92       	push	r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	08 b6       	in	r0, 0x38	; 56
    1ba4:	0f 92       	push	r0
    1ba6:	18 be       	out	0x38, r1	; 56
    1ba8:	09 b6       	in	r0, 0x39	; 57
    1baa:	0f 92       	push	r0
    1bac:	19 be       	out	0x39, r1	; 57
    1bae:	0b b6       	in	r0, 0x3b	; 59
    1bb0:	0f 92       	push	r0
    1bb2:	1b be       	out	0x3b, r1	; 59
    1bb4:	2f 93       	push	r18
    1bb6:	3f 93       	push	r19
    1bb8:	4f 93       	push	r20
    1bba:	5f 93       	push	r21
    1bbc:	6f 93       	push	r22
    1bbe:	7f 93       	push	r23
    1bc0:	8f 93       	push	r24
    1bc2:	9f 93       	push	r25
    1bc4:	af 93       	push	r26
    1bc6:	bf 93       	push	r27
    1bc8:	ef 93       	push	r30
    1bca:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    1bcc:	e0 91 75 20 	lds	r30, 0x2075	; 0x802075 <tc_tcf1_err_callback>
    1bd0:	f0 91 76 20 	lds	r31, 0x2076	; 0x802076 <tc_tcf1_err_callback+0x1>
    1bd4:	30 97       	sbiw	r30, 0x00	; 0
    1bd6:	09 f0       	breq	.+2      	; 0x1bda <__vector_115+0x42>
		tc_tcf1_err_callback();
    1bd8:	19 95       	eicall
	}
}
    1bda:	ff 91       	pop	r31
    1bdc:	ef 91       	pop	r30
    1bde:	bf 91       	pop	r27
    1be0:	af 91       	pop	r26
    1be2:	9f 91       	pop	r25
    1be4:	8f 91       	pop	r24
    1be6:	7f 91       	pop	r23
    1be8:	6f 91       	pop	r22
    1bea:	5f 91       	pop	r21
    1bec:	4f 91       	pop	r20
    1bee:	3f 91       	pop	r19
    1bf0:	2f 91       	pop	r18
    1bf2:	0f 90       	pop	r0
    1bf4:	0b be       	out	0x3b, r0	; 59
    1bf6:	0f 90       	pop	r0
    1bf8:	09 be       	out	0x39, r0	; 57
    1bfa:	0f 90       	pop	r0
    1bfc:	08 be       	out	0x38, r0	; 56
    1bfe:	0f 90       	pop	r0
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	0f 90       	pop	r0
    1c04:	1f 90       	pop	r1
    1c06:	18 95       	reti

00001c08 <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1c08:	1f 92       	push	r1
    1c0a:	0f 92       	push	r0
    1c0c:	0f b6       	in	r0, 0x3f	; 63
    1c0e:	0f 92       	push	r0
    1c10:	11 24       	eor	r1, r1
    1c12:	08 b6       	in	r0, 0x38	; 56
    1c14:	0f 92       	push	r0
    1c16:	18 be       	out	0x38, r1	; 56
    1c18:	09 b6       	in	r0, 0x39	; 57
    1c1a:	0f 92       	push	r0
    1c1c:	19 be       	out	0x39, r1	; 57
    1c1e:	0b b6       	in	r0, 0x3b	; 59
    1c20:	0f 92       	push	r0
    1c22:	1b be       	out	0x3b, r1	; 59
    1c24:	2f 93       	push	r18
    1c26:	3f 93       	push	r19
    1c28:	4f 93       	push	r20
    1c2a:	5f 93       	push	r21
    1c2c:	6f 93       	push	r22
    1c2e:	7f 93       	push	r23
    1c30:	8f 93       	push	r24
    1c32:	9f 93       	push	r25
    1c34:	af 93       	push	r26
    1c36:	bf 93       	push	r27
    1c38:	ef 93       	push	r30
    1c3a:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1c3c:	e0 91 73 20 	lds	r30, 0x2073	; 0x802073 <tc_tcf1_cca_callback>
    1c40:	f0 91 74 20 	lds	r31, 0x2074	; 0x802074 <tc_tcf1_cca_callback+0x1>
    1c44:	30 97       	sbiw	r30, 0x00	; 0
    1c46:	09 f0       	breq	.+2      	; 0x1c4a <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1c48:	19 95       	eicall
	}
}
    1c4a:	ff 91       	pop	r31
    1c4c:	ef 91       	pop	r30
    1c4e:	bf 91       	pop	r27
    1c50:	af 91       	pop	r26
    1c52:	9f 91       	pop	r25
    1c54:	8f 91       	pop	r24
    1c56:	7f 91       	pop	r23
    1c58:	6f 91       	pop	r22
    1c5a:	5f 91       	pop	r21
    1c5c:	4f 91       	pop	r20
    1c5e:	3f 91       	pop	r19
    1c60:	2f 91       	pop	r18
    1c62:	0f 90       	pop	r0
    1c64:	0b be       	out	0x3b, r0	; 59
    1c66:	0f 90       	pop	r0
    1c68:	09 be       	out	0x39, r0	; 57
    1c6a:	0f 90       	pop	r0
    1c6c:	08 be       	out	0x38, r0	; 56
    1c6e:	0f 90       	pop	r0
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	0f 90       	pop	r0
    1c74:	1f 90       	pop	r1
    1c76:	18 95       	reti

00001c78 <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1c78:	1f 92       	push	r1
    1c7a:	0f 92       	push	r0
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	0f 92       	push	r0
    1c80:	11 24       	eor	r1, r1
    1c82:	08 b6       	in	r0, 0x38	; 56
    1c84:	0f 92       	push	r0
    1c86:	18 be       	out	0x38, r1	; 56
    1c88:	09 b6       	in	r0, 0x39	; 57
    1c8a:	0f 92       	push	r0
    1c8c:	19 be       	out	0x39, r1	; 57
    1c8e:	0b b6       	in	r0, 0x3b	; 59
    1c90:	0f 92       	push	r0
    1c92:	1b be       	out	0x3b, r1	; 59
    1c94:	2f 93       	push	r18
    1c96:	3f 93       	push	r19
    1c98:	4f 93       	push	r20
    1c9a:	5f 93       	push	r21
    1c9c:	6f 93       	push	r22
    1c9e:	7f 93       	push	r23
    1ca0:	8f 93       	push	r24
    1ca2:	9f 93       	push	r25
    1ca4:	af 93       	push	r26
    1ca6:	bf 93       	push	r27
    1ca8:	ef 93       	push	r30
    1caa:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    1cac:	e0 91 71 20 	lds	r30, 0x2071	; 0x802071 <tc_tcf1_ccb_callback>
    1cb0:	f0 91 72 20 	lds	r31, 0x2072	; 0x802072 <tc_tcf1_ccb_callback+0x1>
    1cb4:	30 97       	sbiw	r30, 0x00	; 0
    1cb6:	09 f0       	breq	.+2      	; 0x1cba <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    1cb8:	19 95       	eicall
	}
}
    1cba:	ff 91       	pop	r31
    1cbc:	ef 91       	pop	r30
    1cbe:	bf 91       	pop	r27
    1cc0:	af 91       	pop	r26
    1cc2:	9f 91       	pop	r25
    1cc4:	8f 91       	pop	r24
    1cc6:	7f 91       	pop	r23
    1cc8:	6f 91       	pop	r22
    1cca:	5f 91       	pop	r21
    1ccc:	4f 91       	pop	r20
    1cce:	3f 91       	pop	r19
    1cd0:	2f 91       	pop	r18
    1cd2:	0f 90       	pop	r0
    1cd4:	0b be       	out	0x3b, r0	; 59
    1cd6:	0f 90       	pop	r0
    1cd8:	09 be       	out	0x39, r0	; 57
    1cda:	0f 90       	pop	r0
    1cdc:	08 be       	out	0x38, r0	; 56
    1cde:	0f 90       	pop	r0
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	0f 90       	pop	r0
    1ce4:	1f 90       	pop	r1
    1ce6:	18 95       	reti

00001ce8 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1ce8:	fc 01       	movw	r30, r24
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
    1cec:	95 ff       	sbrs	r25, 5
    1cee:	fd cf       	rjmp	.-6      	; 0x1cea <usart_putchar+0x2>
    1cf0:	60 83       	st	Z, r22
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	08 95       	ret

00001cf8 <usart_getchar>:
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	91 81       	ldd	r25, Z+1	; 0x01
    1cfc:	99 23       	and	r25, r25
    1cfe:	ec f7       	brge	.-6      	; 0x1cfa <usart_getchar+0x2>
    1d00:	80 81       	ld	r24, Z
    1d02:	08 95       	ret

00001d04 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1d04:	4f 92       	push	r4
    1d06:	5f 92       	push	r5
    1d08:	6f 92       	push	r6
    1d0a:	7f 92       	push	r7
    1d0c:	8f 92       	push	r8
    1d0e:	9f 92       	push	r9
    1d10:	af 92       	push	r10
    1d12:	bf 92       	push	r11
    1d14:	ef 92       	push	r14
    1d16:	ff 92       	push	r15
    1d18:	0f 93       	push	r16
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	7c 01       	movw	r14, r24
    1d20:	4a 01       	movw	r8, r20
    1d22:	5b 01       	movw	r10, r22
    1d24:	28 01       	movw	r4, r16
    1d26:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1d28:	fc 01       	movw	r30, r24
    1d2a:	84 81       	ldd	r24, Z+4	; 0x04
    1d2c:	82 ff       	sbrs	r24, 2
    1d2e:	16 c0       	rjmp	.+44     	; 0x1d5c <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1d30:	d9 01       	movw	r26, r18
    1d32:	c8 01       	movw	r24, r16
    1d34:	68 94       	set
    1d36:	12 f8       	bld	r1, 2
    1d38:	b6 95       	lsr	r27
    1d3a:	a7 95       	ror	r26
    1d3c:	97 95       	ror	r25
    1d3e:	87 95       	ror	r24
    1d40:	16 94       	lsr	r1
    1d42:	d1 f7       	brne	.-12     	; 0x1d38 <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1d44:	b9 01       	movw	r22, r18
    1d46:	a8 01       	movw	r20, r16
    1d48:	03 2e       	mov	r0, r19
    1d4a:	36 e1       	ldi	r19, 0x16	; 22
    1d4c:	76 95       	lsr	r23
    1d4e:	67 95       	ror	r22
    1d50:	57 95       	ror	r21
    1d52:	47 95       	ror	r20
    1d54:	3a 95       	dec	r19
    1d56:	d1 f7       	brne	.-12     	; 0x1d4c <usart_set_baudrate+0x48>
    1d58:	30 2d       	mov	r19, r0
    1d5a:	15 c0       	rjmp	.+42     	; 0x1d86 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1d5c:	d9 01       	movw	r26, r18
    1d5e:	c8 01       	movw	r24, r16
    1d60:	68 94       	set
    1d62:	13 f8       	bld	r1, 3
    1d64:	b6 95       	lsr	r27
    1d66:	a7 95       	ror	r26
    1d68:	97 95       	ror	r25
    1d6a:	87 95       	ror	r24
    1d6c:	16 94       	lsr	r1
    1d6e:	d1 f7       	brne	.-12     	; 0x1d64 <usart_set_baudrate+0x60>
		min_rate /= 2;
    1d70:	b9 01       	movw	r22, r18
    1d72:	a8 01       	movw	r20, r16
    1d74:	03 2e       	mov	r0, r19
    1d76:	37 e1       	ldi	r19, 0x17	; 23
    1d78:	76 95       	lsr	r23
    1d7a:	67 95       	ror	r22
    1d7c:	57 95       	ror	r21
    1d7e:	47 95       	ror	r20
    1d80:	3a 95       	dec	r19
    1d82:	d1 f7       	brne	.-12     	; 0x1d78 <usart_set_baudrate+0x74>
    1d84:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1d86:	88 15       	cp	r24, r8
    1d88:	99 05       	cpc	r25, r9
    1d8a:	aa 05       	cpc	r26, r10
    1d8c:	bb 05       	cpc	r27, r11
    1d8e:	08 f4       	brcc	.+2      	; 0x1d92 <usart_set_baudrate+0x8e>
    1d90:	a6 c0       	rjmp	.+332    	; 0x1ede <usart_set_baudrate+0x1da>
    1d92:	84 16       	cp	r8, r20
    1d94:	95 06       	cpc	r9, r21
    1d96:	a6 06       	cpc	r10, r22
    1d98:	b7 06       	cpc	r11, r23
    1d9a:	08 f4       	brcc	.+2      	; 0x1d9e <usart_set_baudrate+0x9a>
    1d9c:	a2 c0       	rjmp	.+324    	; 0x1ee2 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1d9e:	f7 01       	movw	r30, r14
    1da0:	84 81       	ldd	r24, Z+4	; 0x04
    1da2:	82 fd       	sbrc	r24, 2
    1da4:	04 c0       	rjmp	.+8      	; 0x1dae <usart_set_baudrate+0xaa>
		baud *= 2;
    1da6:	88 0c       	add	r8, r8
    1da8:	99 1c       	adc	r9, r9
    1daa:	aa 1c       	adc	r10, r10
    1dac:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1dae:	c3 01       	movw	r24, r6
    1db0:	b2 01       	movw	r22, r4
    1db2:	a5 01       	movw	r20, r10
    1db4:	94 01       	movw	r18, r8
    1db6:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1dba:	2f 3f       	cpi	r18, 0xFF	; 255
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	41 05       	cpc	r20, r1
    1dc0:	51 05       	cpc	r21, r1
    1dc2:	08 f4       	brcc	.+2      	; 0x1dc6 <usart_set_baudrate+0xc2>
    1dc4:	90 c0       	rjmp	.+288    	; 0x1ee6 <usart_set_baudrate+0x1e2>
    1dc6:	8f ef       	ldi	r24, 0xFF	; 255
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	a0 e0       	ldi	r26, 0x00	; 0
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	c9 ef       	ldi	r28, 0xF9	; 249
    1dd0:	05 c0       	rjmp	.+10     	; 0x1ddc <usart_set_baudrate+0xd8>
    1dd2:	28 17       	cp	r18, r24
    1dd4:	39 07       	cpc	r19, r25
    1dd6:	4a 07       	cpc	r20, r26
    1dd8:	5b 07       	cpc	r21, r27
    1dda:	58 f0       	brcs	.+22     	; 0x1df2 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    1ddc:	88 0f       	add	r24, r24
    1dde:	99 1f       	adc	r25, r25
    1de0:	aa 1f       	adc	r26, r26
    1de2:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1de4:	cd 3f       	cpi	r28, 0xFD	; 253
    1de6:	0c f4       	brge	.+2      	; 0x1dea <usart_set_baudrate+0xe6>
			limit |= 1;
    1de8:	81 60       	ori	r24, 0x01	; 1
    1dea:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1dec:	c7 30       	cpi	r28, 0x07	; 7
    1dee:	89 f7       	brne	.-30     	; 0x1dd2 <usart_set_baudrate+0xce>
    1df0:	4f c0       	rjmp	.+158    	; 0x1e90 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1df2:	cc 23       	and	r28, r28
    1df4:	0c f0       	brlt	.+2      	; 0x1df8 <usart_set_baudrate+0xf4>
    1df6:	4c c0       	rjmp	.+152    	; 0x1e90 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1df8:	d5 01       	movw	r26, r10
    1dfa:	c4 01       	movw	r24, r8
    1dfc:	88 0f       	add	r24, r24
    1dfe:	99 1f       	adc	r25, r25
    1e00:	aa 1f       	adc	r26, r26
    1e02:	bb 1f       	adc	r27, r27
    1e04:	88 0f       	add	r24, r24
    1e06:	99 1f       	adc	r25, r25
    1e08:	aa 1f       	adc	r26, r26
    1e0a:	bb 1f       	adc	r27, r27
    1e0c:	88 0f       	add	r24, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	aa 1f       	adc	r26, r26
    1e12:	bb 1f       	adc	r27, r27
    1e14:	48 1a       	sub	r4, r24
    1e16:	59 0a       	sbc	r5, r25
    1e18:	6a 0a       	sbc	r6, r26
    1e1a:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1e1c:	ce 3f       	cpi	r28, 0xFE	; 254
    1e1e:	f4 f4       	brge	.+60     	; 0x1e5c <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1e20:	8d ef       	ldi	r24, 0xFD	; 253
    1e22:	9f ef       	ldi	r25, 0xFF	; 255
    1e24:	8c 1b       	sub	r24, r28
    1e26:	91 09       	sbc	r25, r1
    1e28:	c7 fd       	sbrc	r28, 7
    1e2a:	93 95       	inc	r25
    1e2c:	04 c0       	rjmp	.+8      	; 0x1e36 <usart_set_baudrate+0x132>
    1e2e:	44 0c       	add	r4, r4
    1e30:	55 1c       	adc	r5, r5
    1e32:	66 1c       	adc	r6, r6
    1e34:	77 1c       	adc	r7, r7
    1e36:	8a 95       	dec	r24
    1e38:	d2 f7       	brpl	.-12     	; 0x1e2e <usart_set_baudrate+0x12a>
    1e3a:	d5 01       	movw	r26, r10
    1e3c:	c4 01       	movw	r24, r8
    1e3e:	b6 95       	lsr	r27
    1e40:	a7 95       	ror	r26
    1e42:	97 95       	ror	r25
    1e44:	87 95       	ror	r24
    1e46:	bc 01       	movw	r22, r24
    1e48:	cd 01       	movw	r24, r26
    1e4a:	64 0d       	add	r22, r4
    1e4c:	75 1d       	adc	r23, r5
    1e4e:	86 1d       	adc	r24, r6
    1e50:	97 1d       	adc	r25, r7
    1e52:	a5 01       	movw	r20, r10
    1e54:	94 01       	movw	r18, r8
    1e56:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    1e5a:	37 c0       	rjmp	.+110    	; 0x1eca <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    1e5c:	83 e0       	ldi	r24, 0x03	; 3
    1e5e:	8c 0f       	add	r24, r28
    1e60:	a5 01       	movw	r20, r10
    1e62:	94 01       	movw	r18, r8
    1e64:	04 c0       	rjmp	.+8      	; 0x1e6e <usart_set_baudrate+0x16a>
    1e66:	22 0f       	add	r18, r18
    1e68:	33 1f       	adc	r19, r19
    1e6a:	44 1f       	adc	r20, r20
    1e6c:	55 1f       	adc	r21, r21
    1e6e:	8a 95       	dec	r24
    1e70:	d2 f7       	brpl	.-12     	; 0x1e66 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    1e72:	da 01       	movw	r26, r20
    1e74:	c9 01       	movw	r24, r18
    1e76:	b6 95       	lsr	r27
    1e78:	a7 95       	ror	r26
    1e7a:	97 95       	ror	r25
    1e7c:	87 95       	ror	r24
    1e7e:	bc 01       	movw	r22, r24
    1e80:	cd 01       	movw	r24, r26
    1e82:	64 0d       	add	r22, r4
    1e84:	75 1d       	adc	r23, r5
    1e86:	86 1d       	adc	r24, r6
    1e88:	97 1d       	adc	r25, r7
    1e8a:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    1e8e:	1d c0       	rjmp	.+58     	; 0x1eca <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1e90:	83 e0       	ldi	r24, 0x03	; 3
    1e92:	8c 0f       	add	r24, r28
    1e94:	a5 01       	movw	r20, r10
    1e96:	94 01       	movw	r18, r8
    1e98:	04 c0       	rjmp	.+8      	; 0x1ea2 <usart_set_baudrate+0x19e>
    1e9a:	22 0f       	add	r18, r18
    1e9c:	33 1f       	adc	r19, r19
    1e9e:	44 1f       	adc	r20, r20
    1ea0:	55 1f       	adc	r21, r21
    1ea2:	8a 95       	dec	r24
    1ea4:	d2 f7       	brpl	.-12     	; 0x1e9a <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    1ea6:	da 01       	movw	r26, r20
    1ea8:	c9 01       	movw	r24, r18
    1eaa:	b6 95       	lsr	r27
    1eac:	a7 95       	ror	r26
    1eae:	97 95       	ror	r25
    1eb0:	87 95       	ror	r24
    1eb2:	bc 01       	movw	r22, r24
    1eb4:	cd 01       	movw	r24, r26
    1eb6:	64 0d       	add	r22, r4
    1eb8:	75 1d       	adc	r23, r5
    1eba:	86 1d       	adc	r24, r6
    1ebc:	97 1d       	adc	r25, r7
    1ebe:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    1ec2:	21 50       	subi	r18, 0x01	; 1
    1ec4:	31 09       	sbc	r19, r1
    1ec6:	41 09       	sbc	r20, r1
    1ec8:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1eca:	83 2f       	mov	r24, r19
    1ecc:	8f 70       	andi	r24, 0x0F	; 15
    1ece:	c2 95       	swap	r28
    1ed0:	c0 7f       	andi	r28, 0xF0	; 240
    1ed2:	c8 2b       	or	r28, r24
    1ed4:	f7 01       	movw	r30, r14
    1ed6:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1ed8:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	18 c0       	rjmp	.+48     	; 0x1f0e <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	16 c0       	rjmp	.+44     	; 0x1f0e <usart_set_baudrate+0x20a>
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	14 c0       	rjmp	.+40     	; 0x1f0e <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1ee6:	d5 01       	movw	r26, r10
    1ee8:	c4 01       	movw	r24, r8
    1eea:	88 0f       	add	r24, r24
    1eec:	99 1f       	adc	r25, r25
    1eee:	aa 1f       	adc	r26, r26
    1ef0:	bb 1f       	adc	r27, r27
    1ef2:	88 0f       	add	r24, r24
    1ef4:	99 1f       	adc	r25, r25
    1ef6:	aa 1f       	adc	r26, r26
    1ef8:	bb 1f       	adc	r27, r27
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	aa 1f       	adc	r26, r26
    1f00:	bb 1f       	adc	r27, r27
    1f02:	48 1a       	sub	r4, r24
    1f04:	59 0a       	sbc	r5, r25
    1f06:	6a 0a       	sbc	r6, r26
    1f08:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1f0a:	c9 ef       	ldi	r28, 0xF9	; 249
    1f0c:	89 cf       	rjmp	.-238    	; 0x1e20 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1f0e:	cf 91       	pop	r28
    1f10:	1f 91       	pop	r17
    1f12:	0f 91       	pop	r16
    1f14:	ff 90       	pop	r15
    1f16:	ef 90       	pop	r14
    1f18:	bf 90       	pop	r11
    1f1a:	af 90       	pop	r10
    1f1c:	9f 90       	pop	r9
    1f1e:	8f 90       	pop	r8
    1f20:	7f 90       	pop	r7
    1f22:	6f 90       	pop	r6
    1f24:	5f 90       	pop	r5
    1f26:	4f 90       	pop	r4
    1f28:	08 95       	ret

00001f2a <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1f2a:	0f 93       	push	r16
    1f2c:	1f 93       	push	r17
    1f2e:	cf 93       	push	r28
    1f30:	df 93       	push	r29
    1f32:	ec 01       	movw	r28, r24
    1f34:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <usart_init_rs232+0x12>
    1f3a:	5d c1       	rjmp	.+698    	; 0x21f6 <usart_init_rs232+0x2cc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1f3c:	80 3c       	cpi	r24, 0xC0	; 192
    1f3e:	91 05       	cpc	r25, r1
    1f40:	29 f4       	brne	.+10     	; 0x1f4c <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1f42:	60 e1       	ldi	r22, 0x10	; 16
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    1f4a:	55 c1       	rjmp	.+682    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1f4c:	c0 34       	cpi	r28, 0x40	; 64
    1f4e:	84 e0       	ldi	r24, 0x04	; 4
    1f50:	d8 07       	cpc	r29, r24
    1f52:	29 f4       	brne	.+10     	; 0x1f5e <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1f54:	68 e0       	ldi	r22, 0x08	; 8
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    1f5c:	4c c1       	rjmp	.+664    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1f5e:	c1 15       	cp	r28, r1
    1f60:	e4 e0       	ldi	r30, 0x04	; 4
    1f62:	de 07       	cpc	r29, r30
    1f64:	29 f4       	brne	.+10     	; 0x1f70 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1f66:	64 e0       	ldi	r22, 0x04	; 4
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    1f6e:	43 c1       	rjmp	.+646    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1f70:	c0 38       	cpi	r28, 0x80	; 128
    1f72:	f1 e0       	ldi	r31, 0x01	; 1
    1f74:	df 07       	cpc	r29, r31
    1f76:	29 f4       	brne	.+10     	; 0x1f82 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1f78:	62 e0       	ldi	r22, 0x02	; 2
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    1f80:	3a c1       	rjmp	.+628    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1f82:	c1 15       	cp	r28, r1
    1f84:	81 e0       	ldi	r24, 0x01	; 1
    1f86:	d8 07       	cpc	r29, r24
    1f88:	29 f4       	brne	.+10     	; 0x1f94 <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1f8a:	61 e0       	ldi	r22, 0x01	; 1
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    1f92:	31 c1       	rjmp	.+610    	; 0x21f6 <usart_init_rs232+0x2cc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1f94:	c0 38       	cpi	r28, 0x80	; 128
    1f96:	e3 e0       	ldi	r30, 0x03	; 3
    1f98:	de 07       	cpc	r29, r30
    1f9a:	29 f4       	brne	.+10     	; 0x1fa6 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1f9c:	61 e0       	ldi	r22, 0x01	; 1
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    1fa4:	28 c1       	rjmp	.+592    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1fa6:	c0 39       	cpi	r28, 0x90	; 144
    1fa8:	f3 e0       	ldi	r31, 0x03	; 3
    1faa:	df 07       	cpc	r29, r31
    1fac:	29 f4       	brne	.+10     	; 0x1fb8 <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1fae:	61 e0       	ldi	r22, 0x01	; 1
    1fb0:	82 e0       	ldi	r24, 0x02	; 2
    1fb2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    1fb6:	1f c1       	rjmp	.+574    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1fb8:	c1 15       	cp	r28, r1
    1fba:	82 e0       	ldi	r24, 0x02	; 2
    1fbc:	d8 07       	cpc	r29, r24
    1fbe:	29 f4       	brne	.+10     	; 0x1fca <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1fc0:	62 e0       	ldi	r22, 0x02	; 2
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    1fc8:	16 c1       	rjmp	.+556    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1fca:	c0 34       	cpi	r28, 0x40	; 64
    1fcc:	e2 e0       	ldi	r30, 0x02	; 2
    1fce:	de 07       	cpc	r29, r30
    1fd0:	29 f4       	brne	.+10     	; 0x1fdc <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1fd2:	62 e0       	ldi	r22, 0x02	; 2
    1fd4:	82 e0       	ldi	r24, 0x02	; 2
    1fd6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    1fda:	0d c1       	rjmp	.+538    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1fdc:	c1 15       	cp	r28, r1
    1fde:	f3 e0       	ldi	r31, 0x03	; 3
    1fe0:	df 07       	cpc	r29, r31
    1fe2:	29 f4       	brne	.+10     	; 0x1fee <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1fe4:	64 e0       	ldi	r22, 0x04	; 4
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    1fec:	04 c1       	rjmp	.+520    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1fee:	c0 32       	cpi	r28, 0x20	; 32
    1ff0:	83 e0       	ldi	r24, 0x03	; 3
    1ff2:	d8 07       	cpc	r29, r24
    1ff4:	29 f4       	brne	.+10     	; 0x2000 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1ff6:	64 e0       	ldi	r22, 0x04	; 4
    1ff8:	82 e0       	ldi	r24, 0x02	; 2
    1ffa:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    1ffe:	fb c0       	rjmp	.+502    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    2000:	c1 15       	cp	r28, r1
    2002:	e8 e0       	ldi	r30, 0x08	; 8
    2004:	de 07       	cpc	r29, r30
    2006:	29 f4       	brne	.+10     	; 0x2012 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2008:	61 e0       	ldi	r22, 0x01	; 1
    200a:	83 e0       	ldi	r24, 0x03	; 3
    200c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    2010:	f2 c0       	rjmp	.+484    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    2012:	c1 15       	cp	r28, r1
    2014:	f9 e0       	ldi	r31, 0x09	; 9
    2016:	df 07       	cpc	r29, r31
    2018:	29 f4       	brne	.+10     	; 0x2024 <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    201a:	61 e0       	ldi	r22, 0x01	; 1
    201c:	84 e0       	ldi	r24, 0x04	; 4
    201e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    2022:	e9 c0       	rjmp	.+466    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    2024:	c1 15       	cp	r28, r1
    2026:	8a e0       	ldi	r24, 0x0A	; 10
    2028:	d8 07       	cpc	r29, r24
    202a:	29 f4       	brne	.+10     	; 0x2036 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    202c:	61 e0       	ldi	r22, 0x01	; 1
    202e:	85 e0       	ldi	r24, 0x05	; 5
    2030:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    2034:	e0 c0       	rjmp	.+448    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    2036:	c1 15       	cp	r28, r1
    2038:	eb e0       	ldi	r30, 0x0B	; 11
    203a:	de 07       	cpc	r29, r30
    203c:	29 f4       	brne	.+10     	; 0x2048 <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    203e:	61 e0       	ldi	r22, 0x01	; 1
    2040:	86 e0       	ldi	r24, 0x06	; 6
    2042:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    2046:	d7 c0       	rjmp	.+430    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    2048:	c0 34       	cpi	r28, 0x40	; 64
    204a:	f8 e0       	ldi	r31, 0x08	; 8
    204c:	df 07       	cpc	r29, r31
    204e:	29 f4       	brne	.+10     	; 0x205a <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2050:	62 e0       	ldi	r22, 0x02	; 2
    2052:	83 e0       	ldi	r24, 0x03	; 3
    2054:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    2058:	ce c0       	rjmp	.+412    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    205a:	c0 34       	cpi	r28, 0x40	; 64
    205c:	89 e0       	ldi	r24, 0x09	; 9
    205e:	d8 07       	cpc	r29, r24
    2060:	29 f4       	brne	.+10     	; 0x206c <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2062:	62 e0       	ldi	r22, 0x02	; 2
    2064:	84 e0       	ldi	r24, 0x04	; 4
    2066:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    206a:	c5 c0       	rjmp	.+394    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    206c:	c0 34       	cpi	r28, 0x40	; 64
    206e:	ea e0       	ldi	r30, 0x0A	; 10
    2070:	de 07       	cpc	r29, r30
    2072:	29 f4       	brne	.+10     	; 0x207e <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2074:	62 e0       	ldi	r22, 0x02	; 2
    2076:	85 e0       	ldi	r24, 0x05	; 5
    2078:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    207c:	bc c0       	rjmp	.+376    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    207e:	c0 34       	cpi	r28, 0x40	; 64
    2080:	fb e0       	ldi	r31, 0x0B	; 11
    2082:	df 07       	cpc	r29, r31
    2084:	29 f4       	brne	.+10     	; 0x2090 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    2086:	62 e0       	ldi	r22, 0x02	; 2
    2088:	86 e0       	ldi	r24, 0x06	; 6
    208a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    208e:	b3 c0       	rjmp	.+358    	; 0x21f6 <usart_init_rs232+0x2cc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2090:	c0 39       	cpi	r28, 0x90	; 144
    2092:	88 e0       	ldi	r24, 0x08	; 8
    2094:	d8 07       	cpc	r29, r24
    2096:	29 f4       	brne	.+10     	; 0x20a2 <usart_init_rs232+0x178>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2098:	64 e0       	ldi	r22, 0x04	; 4
    209a:	83 e0       	ldi	r24, 0x03	; 3
    209c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    20a0:	aa c0       	rjmp	.+340    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    20a2:	c0 39       	cpi	r28, 0x90	; 144
    20a4:	e9 e0       	ldi	r30, 0x09	; 9
    20a6:	de 07       	cpc	r29, r30
    20a8:	29 f4       	brne	.+10     	; 0x20b4 <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    20aa:	64 e0       	ldi	r22, 0x04	; 4
    20ac:	84 e0       	ldi	r24, 0x04	; 4
    20ae:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    20b2:	a1 c0       	rjmp	.+322    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    20b4:	c0 39       	cpi	r28, 0x90	; 144
    20b6:	fa e0       	ldi	r31, 0x0A	; 10
    20b8:	df 07       	cpc	r29, r31
    20ba:	29 f4       	brne	.+10     	; 0x20c6 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    20bc:	64 e0       	ldi	r22, 0x04	; 4
    20be:	85 e0       	ldi	r24, 0x05	; 5
    20c0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    20c4:	98 c0       	rjmp	.+304    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    20c6:	c0 39       	cpi	r28, 0x90	; 144
    20c8:	8b e0       	ldi	r24, 0x0B	; 11
    20ca:	d8 07       	cpc	r29, r24
    20cc:	29 f4       	brne	.+10     	; 0x20d8 <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    20ce:	64 e0       	ldi	r22, 0x04	; 4
    20d0:	86 e0       	ldi	r24, 0x06	; 6
    20d2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    20d6:	8f c0       	rjmp	.+286    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    20d8:	c0 3c       	cpi	r28, 0xC0	; 192
    20da:	e8 e0       	ldi	r30, 0x08	; 8
    20dc:	de 07       	cpc	r29, r30
    20de:	29 f4       	brne	.+10     	; 0x20ea <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    20e0:	68 e0       	ldi	r22, 0x08	; 8
    20e2:	83 e0       	ldi	r24, 0x03	; 3
    20e4:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    20e8:	86 c0       	rjmp	.+268    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    20ea:	c0 3c       	cpi	r28, 0xC0	; 192
    20ec:	f9 e0       	ldi	r31, 0x09	; 9
    20ee:	df 07       	cpc	r29, r31
    20f0:	29 f4       	brne	.+10     	; 0x20fc <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    20f2:	68 e0       	ldi	r22, 0x08	; 8
    20f4:	84 e0       	ldi	r24, 0x04	; 4
    20f6:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    20fa:	7d c0       	rjmp	.+250    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    20fc:	c0 3c       	cpi	r28, 0xC0	; 192
    20fe:	8a e0       	ldi	r24, 0x0A	; 10
    2100:	d8 07       	cpc	r29, r24
    2102:	29 f4       	brne	.+10     	; 0x210e <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    2104:	68 e0       	ldi	r22, 0x08	; 8
    2106:	85 e0       	ldi	r24, 0x05	; 5
    2108:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    210c:	74 c0       	rjmp	.+232    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    210e:	c0 3c       	cpi	r28, 0xC0	; 192
    2110:	eb e0       	ldi	r30, 0x0B	; 11
    2112:	de 07       	cpc	r29, r30
    2114:	29 f4       	brne	.+10     	; 0x2120 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    2116:	68 e0       	ldi	r22, 0x08	; 8
    2118:	86 e0       	ldi	r24, 0x06	; 6
    211a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    211e:	6b c0       	rjmp	.+214    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2120:	c0 3a       	cpi	r28, 0xA0	; 160
    2122:	f8 e0       	ldi	r31, 0x08	; 8
    2124:	df 07       	cpc	r29, r31
    2126:	29 f4       	brne	.+10     	; 0x2132 <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2128:	60 e1       	ldi	r22, 0x10	; 16
    212a:	83 e0       	ldi	r24, 0x03	; 3
    212c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    2130:	62 c0       	rjmp	.+196    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2132:	c0 3a       	cpi	r28, 0xA0	; 160
    2134:	89 e0       	ldi	r24, 0x09	; 9
    2136:	d8 07       	cpc	r29, r24
    2138:	29 f4       	brne	.+10     	; 0x2144 <usart_init_rs232+0x21a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    213a:	60 e1       	ldi	r22, 0x10	; 16
    213c:	84 e0       	ldi	r24, 0x04	; 4
    213e:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    2142:	59 c0       	rjmp	.+178    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    2144:	c0 3a       	cpi	r28, 0xA0	; 160
    2146:	ea e0       	ldi	r30, 0x0A	; 10
    2148:	de 07       	cpc	r29, r30
    214a:	29 f4       	brne	.+10     	; 0x2156 <usart_init_rs232+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    214c:	60 e1       	ldi	r22, 0x10	; 16
    214e:	85 e0       	ldi	r24, 0x05	; 5
    2150:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    2154:	50 c0       	rjmp	.+160    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    2156:	c0 3a       	cpi	r28, 0xA0	; 160
    2158:	fb e0       	ldi	r31, 0x0B	; 11
    215a:	df 07       	cpc	r29, r31
    215c:	29 f4       	brne	.+10     	; 0x2168 <usart_init_rs232+0x23e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    215e:	60 e1       	ldi	r22, 0x10	; 16
    2160:	86 e0       	ldi	r24, 0x06	; 6
    2162:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    2166:	47 c0       	rjmp	.+142    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    2168:	c0 3b       	cpi	r28, 0xB0	; 176
    216a:	88 e0       	ldi	r24, 0x08	; 8
    216c:	d8 07       	cpc	r29, r24
    216e:	29 f4       	brne	.+10     	; 0x217a <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    2170:	60 e2       	ldi	r22, 0x20	; 32
    2172:	83 e0       	ldi	r24, 0x03	; 3
    2174:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    2178:	3e c0       	rjmp	.+124    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    217a:	c0 3b       	cpi	r28, 0xB0	; 176
    217c:	e9 e0       	ldi	r30, 0x09	; 9
    217e:	de 07       	cpc	r29, r30
    2180:	29 f4       	brne	.+10     	; 0x218c <usart_init_rs232+0x262>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    2182:	60 e2       	ldi	r22, 0x20	; 32
    2184:	84 e0       	ldi	r24, 0x04	; 4
    2186:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    218a:	35 c0       	rjmp	.+106    	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    218c:	c0 3b       	cpi	r28, 0xB0	; 176
    218e:	fa e0       	ldi	r31, 0x0A	; 10
    2190:	df 07       	cpc	r29, r31
    2192:	29 f4       	brne	.+10     	; 0x219e <usart_init_rs232+0x274>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    2194:	60 e2       	ldi	r22, 0x20	; 32
    2196:	85 e0       	ldi	r24, 0x05	; 5
    2198:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    219c:	2c c0       	rjmp	.+88     	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    219e:	c0 3b       	cpi	r28, 0xB0	; 176
    21a0:	8b e0       	ldi	r24, 0x0B	; 11
    21a2:	d8 07       	cpc	r29, r24
    21a4:	29 f4       	brne	.+10     	; 0x21b0 <usart_init_rs232+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    21a6:	60 e2       	ldi	r22, 0x20	; 32
    21a8:	86 e0       	ldi	r24, 0x06	; 6
    21aa:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    21ae:	23 c0       	rjmp	.+70     	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    21b0:	c0 38       	cpi	r28, 0x80	; 128
    21b2:	e4 e0       	ldi	r30, 0x04	; 4
    21b4:	de 07       	cpc	r29, r30
    21b6:	29 f4       	brne	.+10     	; 0x21c2 <usart_init_rs232+0x298>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    21b8:	60 e4       	ldi	r22, 0x40	; 64
    21ba:	83 e0       	ldi	r24, 0x03	; 3
    21bc:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    21c0:	1a c0       	rjmp	.+52     	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    21c2:	c0 39       	cpi	r28, 0x90	; 144
    21c4:	f4 e0       	ldi	r31, 0x04	; 4
    21c6:	df 07       	cpc	r29, r31
    21c8:	29 f4       	brne	.+10     	; 0x21d4 <usart_init_rs232+0x2aa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    21ca:	60 e4       	ldi	r22, 0x40	; 64
    21cc:	84 e0       	ldi	r24, 0x04	; 4
    21ce:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    21d2:	11 c0       	rjmp	.+34     	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    21d4:	c0 3a       	cpi	r28, 0xA0	; 160
    21d6:	84 e0       	ldi	r24, 0x04	; 4
    21d8:	d8 07       	cpc	r29, r24
    21da:	29 f4       	brne	.+10     	; 0x21e6 <usart_init_rs232+0x2bc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    21dc:	60 e4       	ldi	r22, 0x40	; 64
    21de:	85 e0       	ldi	r24, 0x05	; 5
    21e0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    21e4:	08 c0       	rjmp	.+16     	; 0x21f6 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    21e6:	c0 3b       	cpi	r28, 0xB0	; 176
    21e8:	e4 e0       	ldi	r30, 0x04	; 4
    21ea:	de 07       	cpc	r29, r30
    21ec:	21 f4       	brne	.+8      	; 0x21f6 <usart_init_rs232+0x2cc>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    21ee:	60 e4       	ldi	r22, 0x40	; 64
    21f0:	86 e0       	ldi	r24, 0x06	; 6
    21f2:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    21f6:	8d 81       	ldd	r24, Y+5	; 0x05
    21f8:	8f 73       	andi	r24, 0x3F	; 63
    21fa:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    21fc:	f8 01       	movw	r30, r16
    21fe:	95 81       	ldd	r25, Z+5	; 0x05
    2200:	84 81       	ldd	r24, Z+4	; 0x04
    2202:	89 2b       	or	r24, r25
    2204:	96 81       	ldd	r25, Z+6	; 0x06
    2206:	91 11       	cpse	r25, r1
    2208:	98 e0       	ldi	r25, 0x08	; 8
    220a:	89 2b       	or	r24, r25
    220c:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    220e:	f8 01       	movw	r30, r16
    2210:	40 81       	ld	r20, Z
    2212:	51 81       	ldd	r21, Z+1	; 0x01
    2214:	62 81       	ldd	r22, Z+2	; 0x02
    2216:	73 81       	ldd	r23, Z+3	; 0x03
    2218:	00 e0       	ldi	r16, 0x00	; 0
    221a:	18 e4       	ldi	r17, 0x48	; 72
    221c:	28 ee       	ldi	r18, 0xE8	; 232
    221e:	31 e0       	ldi	r19, 0x01	; 1
    2220:	ce 01       	movw	r24, r28
    2222:	70 dd       	rcall	.-1312   	; 0x1d04 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    2224:	9c 81       	ldd	r25, Y+4	; 0x04
    2226:	98 60       	ori	r25, 0x08	; 8
    2228:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	90 61       	ori	r25, 0x10	; 16
    222e:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    2230:	df 91       	pop	r29
    2232:	cf 91       	pop	r28
    2234:	1f 91       	pop	r17
    2236:	0f 91       	pop	r16
    2238:	08 95       	ret

0000223a <Get_altitude>:
	//printf("altitude = %f \n", (float)altitude);
	return altitude;
}*/

//Old, working function. Uses TEMP from pressure sensor calculations. May as well use
float Get_altitude(uint32_t initial, uint32_t pressure){
    223a:	4f 92       	push	r4
    223c:	5f 92       	push	r5
    223e:	6f 92       	push	r6
    2240:	7f 92       	push	r7
    2242:	8f 92       	push	r8
    2244:	9f 92       	push	r9
    2246:	af 92       	push	r10
    2248:	bf 92       	push	r11
    224a:	cf 92       	push	r12
    224c:	df 92       	push	r13
    224e:	ef 92       	push	r14
    2250:	ff 92       	push	r15
    2252:	29 01       	movw	r4, r18
    2254:	3a 01       	movw	r6, r20
	//printf("Initial Pressure = %lu\n", initial);
	//printf("pressure = %lu \n", pressure);
	//printf("temperature = %li \n", TEMP/100);
	//float altitude = (((287.058 * (((float)(TEMP)/100)+273.15)/9.8))*log((float)initial/get_pressure())*3.28);	Not this one, this one's bad
	float altitude = (pow(((initial/100)/(pressure/100)),(1/5.257))-1)*((TEMP/100)+273.15)/.0065; //This is now right, just gotta use the thermistor
    2256:	0f 2e       	mov	r0, r31
    2258:	f4 e6       	ldi	r31, 0x64	; 100
    225a:	cf 2e       	mov	r12, r31
    225c:	d1 2c       	mov	r13, r1
    225e:	e1 2c       	mov	r14, r1
    2260:	f1 2c       	mov	r15, r1
    2262:	f0 2d       	mov	r31, r0
    2264:	a7 01       	movw	r20, r14
    2266:	96 01       	movw	r18, r12
    2268:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    226c:	49 01       	movw	r8, r18
    226e:	5a 01       	movw	r10, r20
    2270:	c3 01       	movw	r24, r6
    2272:	b2 01       	movw	r22, r4
    2274:	a7 01       	movw	r20, r14
    2276:	96 01       	movw	r18, r12
    2278:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    227c:	c5 01       	movw	r24, r10
    227e:	b4 01       	movw	r22, r8
    2280:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__udivmodsi4>
    2284:	ca 01       	movw	r24, r20
    2286:	b9 01       	movw	r22, r18
    2288:	0e 94 85 19 	call	0x330a	; 0x330a <__floatunsisf>
    228c:	24 eb       	ldi	r18, 0xB4	; 180
    228e:	39 ec       	ldi	r19, 0xC9	; 201
    2290:	42 e4       	ldi	r20, 0x42	; 66
    2292:	5e e3       	ldi	r21, 0x3E	; 62
    2294:	0e 94 bb 1a 	call	0x3576	; 0x3576 <pow>
    2298:	4b 01       	movw	r8, r22
    229a:	5c 01       	movw	r10, r24
	//printf("altitude = %f \n", (float)altitude);
	return altitude;
    229c:	60 91 d1 20 	lds	r22, 0x20D1	; 0x8020d1 <TEMP>
    22a0:	70 91 d2 20 	lds	r23, 0x20D2	; 0x8020d2 <TEMP+0x1>
    22a4:	80 91 d3 20 	lds	r24, 0x20D3	; 0x8020d3 <TEMP+0x2>
    22a8:	90 91 d4 20 	lds	r25, 0x20D4	; 0x8020d4 <TEMP+0x3>
    22ac:	a7 01       	movw	r20, r14
    22ae:	96 01       	movw	r18, r12
    22b0:	0e 94 80 1f 	call	0x3f00	; 0x3f00 <__divmodsi4>
    22b4:	ca 01       	movw	r24, r20
    22b6:	b9 01       	movw	r22, r18
    22b8:	0e 94 87 19 	call	0x330e	; 0x330e <__floatsisf>
    22bc:	23 e3       	ldi	r18, 0x33	; 51
    22be:	33 e9       	ldi	r19, 0x93	; 147
    22c0:	48 e8       	ldi	r20, 0x88	; 136
    22c2:	53 e4       	ldi	r21, 0x43	; 67
    22c4:	25 d7       	rcall	.+3658   	; 0x3110 <__addsf3>
    22c6:	6b 01       	movw	r12, r22
    22c8:	7c 01       	movw	r14, r24
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 e8       	ldi	r20, 0x80	; 128
    22d0:	5f e3       	ldi	r21, 0x3F	; 63
    22d2:	c5 01       	movw	r24, r10
    22d4:	b4 01       	movw	r22, r8
    22d6:	1b d7       	rcall	.+3638   	; 0x310e <__subsf3>
    22d8:	9b 01       	movw	r18, r22
    22da:	ac 01       	movw	r20, r24
    22dc:	c7 01       	movw	r24, r14
    22de:	b6 01       	movw	r22, r12
    22e0:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <__mulsf3>
    22e4:	24 ef       	ldi	r18, 0xF4	; 244
    22e6:	3d ef       	ldi	r19, 0xFD	; 253
    22e8:	44 ed       	ldi	r20, 0xD4	; 212
    22ea:	5b e3       	ldi	r21, 0x3B	; 59
    22ec:	75 d7       	rcall	.+3818   	; 0x31d8 <__divsf3>
}
    22ee:	ff 90       	pop	r15
    22f0:	ef 90       	pop	r14
    22f2:	df 90       	pop	r13
    22f4:	cf 90       	pop	r12
    22f6:	bf 90       	pop	r11
    22f8:	af 90       	pop	r10
    22fa:	9f 90       	pop	r9
    22fc:	8f 90       	pop	r8
    22fe:	7f 90       	pop	r7
    2300:	6f 90       	pop	r6
    2302:	5f 90       	pop	r5
    2304:	4f 90       	pop	r4
    2306:	08 95       	ret

00002308 <__vector_43>:
		return 0;
	}
}

ISR(MPU9250_INT_vect)
{
    2308:	1f 92       	push	r1
    230a:	0f 92       	push	r0
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	0f 92       	push	r0
    2310:	11 24       	eor	r1, r1
    2312:	08 b6       	in	r0, 0x38	; 56
    2314:	0f 92       	push	r0
    2316:	18 be       	out	0x38, r1	; 56
    2318:	09 b6       	in	r0, 0x39	; 57
    231a:	0f 92       	push	r0
    231c:	19 be       	out	0x39, r1	; 57
    231e:	8f 93       	push	r24
    2320:	9f 93       	push	r25
    2322:	af 93       	push	r26
    2324:	bf 93       	push	r27
	data_rdy_flag = 1;
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <data_rdy_flag>
	timerflag = 1;
    232c:	80 93 c5 20 	sts	0x20C5, r24	; 0x8020c5 <timerflag>
	time++;
    2330:	80 91 c1 20 	lds	r24, 0x20C1	; 0x8020c1 <time>
    2334:	90 91 c2 20 	lds	r25, 0x20C2	; 0x8020c2 <time+0x1>
    2338:	a0 91 c3 20 	lds	r26, 0x20C3	; 0x8020c3 <time+0x2>
    233c:	b0 91 c4 20 	lds	r27, 0x20C4	; 0x8020c4 <time+0x3>
    2340:	01 96       	adiw	r24, 0x01	; 1
    2342:	a1 1d       	adc	r26, r1
    2344:	b1 1d       	adc	r27, r1
    2346:	80 93 c1 20 	sts	0x20C1, r24	; 0x8020c1 <time>
    234a:	90 93 c2 20 	sts	0x20C2, r25	; 0x8020c2 <time+0x1>
    234e:	a0 93 c3 20 	sts	0x20C3, r26	; 0x8020c3 <time+0x2>
    2352:	b0 93 c4 20 	sts	0x20C4, r27	; 0x8020c4 <time+0x3>
}
    2356:	bf 91       	pop	r27
    2358:	af 91       	pop	r26
    235a:	9f 91       	pop	r25
    235c:	8f 91       	pop	r24
    235e:	0f 90       	pop	r0
    2360:	09 be       	out	0x39, r0	; 57
    2362:	0f 90       	pop	r0
    2364:	08 be       	out	0x38, r0	; 56
    2366:	0f 90       	pop	r0
    2368:	0f be       	out	0x3f, r0	; 63
    236a:	0f 90       	pop	r0
    236c:	1f 90       	pop	r1
    236e:	18 95       	reti

00002370 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2370:	04 c0       	rjmp	.+8      	; 0x237a <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2372:	61 50       	subi	r22, 0x01	; 1
    2374:	71 09       	sbc	r23, r1
    2376:	81 09       	sbc	r24, r1
    2378:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    237a:	61 15       	cp	r22, r1
    237c:	71 05       	cpc	r23, r1
    237e:	81 05       	cpc	r24, r1
    2380:	91 05       	cpc	r25, r1
    2382:	b9 f7       	brne	.-18     	; 0x2372 <__portable_avr_delay_cycles+0x2>
    2384:	08 95       	ret

00002386 <SPI_init>:
uint16_t c5;
uint16_t c6;


void SPI_init(void){
	PORTC.DIRSET = 0b10110000;
    2386:	e0 e4       	ldi	r30, 0x40	; 64
    2388:	f6 e0       	ldi	r31, 0x06	; 6
    238a:	80 eb       	ldi	r24, 0xB0	; 176
    238c:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = 0b01000000;
    238e:	90 e4       	ldi	r25, 0x40	; 64
    2390:	92 83       	std	Z+2, r25	; 0x02
	PORTC.OUTSET = 0b10110000;
    2392:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0b01010011;
    2394:	83 e5       	ldi	r24, 0x53	; 83
    2396:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    239a:	08 95       	ret

0000239c <SPI_write>:
}

void SPI_write(uint8_t data){
	SPIC.DATA = data;
    239c:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
    23a0:	e0 ec       	ldi	r30, 0xC0	; 192
    23a2:	f8 e0       	ldi	r31, 0x08	; 8
    23a4:	82 81       	ldd	r24, Z+2	; 0x02
    23a6:	88 23       	and	r24, r24
    23a8:	ec f7       	brge	.-6      	; 0x23a4 <SPI_write+0x8>
}
    23aa:	08 95       	ret

000023ac <spi_read>:

uint8_t spi_read (void){
	SPI_write(0xFF);
    23ac:	8f ef       	ldi	r24, 0xFF	; 255
    23ae:	f6 df       	rcall	.-20     	; 0x239c <SPI_write>
	return SPIC.DATA;
    23b0:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    23b4:	08 95       	ret

000023b6 <prom_read>:
	//printf("c5: %u \n", c5);
	c6 = prom_read(0xAC);
	//printf("c6: %u \n", c6);
}

uint16_t prom_read(uint8_t command){
    23b6:	ff 92       	push	r15
    23b8:	0f 93       	push	r16
    23ba:	1f 93       	push	r17
    23bc:	cf 93       	push	r28
    23be:	df 93       	push	r29
	uint16_t data;
	PORTC.OUTCLR = 0b00010000;
    23c0:	00 e4       	ldi	r16, 0x40	; 64
    23c2:	16 e0       	ldi	r17, 0x06	; 6
    23c4:	68 94       	set
    23c6:	ff 24       	eor	r15, r15
    23c8:	f4 f8       	bld	r15, 4
    23ca:	f8 01       	movw	r30, r16
	SPI_write(command);
	data = ((uint16_t)spi_read())<<8;	//Bitshifting
    23cc:	f6 82       	std	Z+6, r15	; 0x06
    23ce:	e6 df       	rcall	.-52     	; 0x239c <SPI_write>
    23d0:	ed df       	rcall	.-38     	; 0x23ac <spi_read>
    23d2:	c8 2f       	mov	r28, r24
    23d4:	d0 e0       	ldi	r29, 0x00	; 0
	data += spi_read();
    23d6:	dc 2f       	mov	r29, r28
    23d8:	cc 27       	eor	r28, r28
    23da:	e8 df       	rcall	.-48     	; 0x23ac <spi_read>
    23dc:	c8 0f       	add	r28, r24
	PORTC.OUTSET = 0b00010000;
    23de:	d1 1d       	adc	r29, r1
    23e0:	f8 01       	movw	r30, r16
	delay_ms(1);
    23e2:	f5 82       	std	Z+5, r15	; 0x05
    23e4:	66 ed       	ldi	r22, 0xD6	; 214
    23e6:	74 e1       	ldi	r23, 0x14	; 20
    23e8:	80 e0       	ldi	r24, 0x00	; 0
    23ea:	90 e0       	ldi	r25, 0x00	; 0
	//printf("data: %lu \n", data);
	return data;
}
    23ec:	c1 df       	rcall	.-126    	; 0x2370 <__portable_avr_delay_cycles>
    23ee:	ce 01       	movw	r24, r28
    23f0:	df 91       	pop	r29
    23f2:	cf 91       	pop	r28
    23f4:	1f 91       	pop	r17
    23f6:	0f 91       	pop	r16
    23f8:	ff 90       	pop	r15
    23fa:	08 95       	ret

000023fc <ms5607_init>:
uint8_t spi_read (void){
	SPI_write(0xFF);
	return SPIC.DATA;
}

void ms5607_init(void){
    23fc:	1f 93       	push	r17
    23fe:	cf 93       	push	r28
    2400:	df 93       	push	r29
	PORTC.OUTCLR = 0b00010000;
    2402:	c0 e4       	ldi	r28, 0x40	; 64
    2404:	d6 e0       	ldi	r29, 0x06	; 6
    2406:	10 e1       	ldi	r17, 0x10	; 16
    2408:	1e 83       	std	Y+6, r17	; 0x06
	SPI_write(0x1E);
    240a:	8e e1       	ldi	r24, 0x1E	; 30
    240c:	c7 df       	rcall	.-114    	; 0x239c <SPI_write>
	PORTC.OUTSET = 0b00010000;
    240e:	1d 83       	std	Y+5, r17	; 0x05
	delay_ms(10);
    2410:	66 e5       	ldi	r22, 0x56	; 86
    2412:	70 ed       	ldi	r23, 0xD0	; 208
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
	c1 = prom_read(0xA2);
    2418:	ab df       	rcall	.-170    	; 0x2370 <__portable_avr_delay_cycles>
    241a:	82 ea       	ldi	r24, 0xA2	; 162
    241c:	cc df       	rcall	.-104    	; 0x23b6 <prom_read>
    241e:	80 93 dd 20 	sts	0x20DD, r24	; 0x8020dd <c1>
    2422:	90 93 de 20 	sts	0x20DE, r25	; 0x8020de <c1+0x1>
	//printf("c1: %u \n", c1);
	c2 = prom_read(0xA4);
    2426:	84 ea       	ldi	r24, 0xA4	; 164
    2428:	c6 df       	rcall	.-116    	; 0x23b6 <prom_read>
    242a:	80 93 d9 20 	sts	0x20D9, r24	; 0x8020d9 <c2>
    242e:	90 93 da 20 	sts	0x20DA, r25	; 0x8020da <c2+0x1>
	//printf("c2: %u \n", c2);
	c3 = prom_read(0xA6);
    2432:	86 ea       	ldi	r24, 0xA6	; 166
    2434:	c0 df       	rcall	.-128    	; 0x23b6 <prom_read>
    2436:	80 93 df 20 	sts	0x20DF, r24	; 0x8020df <c3>
    243a:	90 93 e0 20 	sts	0x20E0, r25	; 0x8020e0 <c3+0x1>
	//printf("c3: %u \n", c3);
	c4 = prom_read(0xA8);
    243e:	88 ea       	ldi	r24, 0xA8	; 168
    2440:	ba df       	rcall	.-140    	; 0x23b6 <prom_read>
    2442:	80 93 d7 20 	sts	0x20D7, r24	; 0x8020d7 <c4>
    2446:	90 93 d8 20 	sts	0x20D8, r25	; 0x8020d8 <c4+0x1>
	//printf("c4: %u \n", c4);
	c5 = prom_read(0xAA);
    244a:	8a ea       	ldi	r24, 0xAA	; 170
    244c:	b4 df       	rcall	.-152    	; 0x23b6 <prom_read>
    244e:	80 93 db 20 	sts	0x20DB, r24	; 0x8020db <c5>
    2452:	90 93 dc 20 	sts	0x20DC, r25	; 0x8020dc <c5+0x1>
	//printf("c5: %u \n", c5);
	c6 = prom_read(0xAC);
    2456:	8c ea       	ldi	r24, 0xAC	; 172
    2458:	ae df       	rcall	.-164    	; 0x23b6 <prom_read>
    245a:	80 93 d5 20 	sts	0x20D5, r24	; 0x8020d5 <c6>
    245e:	90 93 d6 20 	sts	0x20D6, r25	; 0x8020d6 <c6+0x1>
	//printf("c6: %u \n", c6);
}
    2462:	df 91       	pop	r29
    2464:	cf 91       	pop	r28
    2466:	1f 91       	pop	r17
    2468:	08 95       	ret

0000246a <data_read>:
	delay_ms(1);
	//printf("data: %lu \n", data);
	return data;
}

uint32_t data_read(uint8_t command){
    246a:	8f 92       	push	r8
    246c:	9f 92       	push	r9
    246e:	af 92       	push	r10
    2470:	bf 92       	push	r11
    2472:	cf 92       	push	r12
    2474:	df 92       	push	r13
    2476:	ef 92       	push	r14
    2478:	ff 92       	push	r15
    247a:	1f 93       	push	r17
    247c:	cf 93       	push	r28
    247e:	df 93       	push	r29
	uint32_t data;
	PORTC.OUTCLR = 0b00010000;
    2480:	c0 e4       	ldi	r28, 0x40	; 64
    2482:	d6 e0       	ldi	r29, 0x06	; 6
    2484:	10 e1       	ldi	r17, 0x10	; 16
	SPI_write(command);
    2486:	1e 83       	std	Y+6, r17	; 0x06
	PORTC.OUTSET = 0b00010000;
    2488:	89 df       	rcall	.-238    	; 0x239c <SPI_write>
	delay_ms(9);
    248a:	1d 83       	std	Y+5, r17	; 0x05
    248c:	61 e8       	ldi	r22, 0x81	; 129
    248e:	7b eb       	ldi	r23, 0xBB	; 187
    2490:	80 e0       	ldi	r24, 0x00	; 0
	PORTC.OUTCLR = 0b00010000;
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	6d df       	rcall	.-294    	; 0x2370 <__portable_avr_delay_cycles>
    2496:	1e 83       	std	Y+6, r17	; 0x06
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	80 df       	rcall	.-256    	; 0x239c <SPI_write>
    249c:	87 df       	rcall	.-242    	; 0x23ac <spi_read>
    249e:	c8 2e       	mov	r12, r24
    24a0:	d1 2c       	mov	r13, r1
    24a2:	e1 2c       	mov	r14, r1
    24a4:	f1 2c       	mov	r15, r1
    24a6:	56 01       	movw	r10, r12
    24a8:	99 24       	eor	r9, r9
    24aa:	88 24       	eor	r8, r8
    24ac:	7f df       	rcall	.-258    	; 0x23ac <spi_read>
    24ae:	c8 2e       	mov	r12, r24
    24b0:	d1 2c       	mov	r13, r1
    24b2:	e1 2c       	mov	r14, r1
    24b4:	f1 2c       	mov	r15, r1
    24b6:	fe 2c       	mov	r15, r14
    24b8:	ed 2c       	mov	r14, r13
    24ba:	dc 2c       	mov	r13, r12
    24bc:	cc 24       	eor	r12, r12
    24be:	c8 0c       	add	r12, r8
    24c0:	d9 1c       	adc	r13, r9
    24c2:	ea 1c       	adc	r14, r10
    24c4:	fb 1c       	adc	r15, r11
    24c6:	72 df       	rcall	.-284    	; 0x23ac <spi_read>
    24c8:	1d 83       	std	Y+5, r17	; 0x05
    24ca:	a7 01       	movw	r20, r14
    24cc:	96 01       	movw	r18, r12
    24ce:	28 0f       	add	r18, r24
    24d0:	31 1d       	adc	r19, r1
    24d2:	41 1d       	adc	r20, r1
    24d4:	51 1d       	adc	r21, r1
    24d6:	ca 01       	movw	r24, r20
    24d8:	b9 01       	movw	r22, r18
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	1f 91       	pop	r17
    24e0:	ff 90       	pop	r15
    24e2:	ef 90       	pop	r14
    24e4:	df 90       	pop	r13
    24e6:	cf 90       	pop	r12
    24e8:	bf 90       	pop	r11
    24ea:	af 90       	pop	r10
    24ec:	9f 90       	pop	r9
    24ee:	8f 90       	pop	r8
    24f0:	08 95       	ret

000024f2 <get_pressure>:
    24f2:	2f 92       	push	r2
    24f4:	3f 92       	push	r3
    24f6:	4f 92       	push	r4
    24f8:	5f 92       	push	r5
    24fa:	6f 92       	push	r6
    24fc:	7f 92       	push	r7
    24fe:	8f 92       	push	r8
    2500:	9f 92       	push	r9
    2502:	af 92       	push	r10
    2504:	bf 92       	push	r11
    2506:	cf 92       	push	r12
    2508:	df 92       	push	r13
    250a:	ef 92       	push	r14
    250c:	ff 92       	push	r15
    250e:	0f 93       	push	r16
    2510:	1f 93       	push	r17
    2512:	cf 93       	push	r28
    2514:	df 93       	push	r29
    2516:	cd b7       	in	r28, 0x3d	; 61
    2518:	de b7       	in	r29, 0x3e	; 62
    251a:	61 97       	sbiw	r28, 0x11	; 17
    251c:	cd bf       	out	0x3d, r28	; 61
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	88 e4       	ldi	r24, 0x48	; 72
    2522:	a3 df       	rcall	.-186    	; 0x246a <data_read>
    2524:	6d 83       	std	Y+5, r22	; 0x05
    2526:	7e 83       	std	Y+6, r23	; 0x06
    2528:	8f 83       	std	Y+7, r24	; 0x07
    252a:	98 87       	std	Y+8, r25	; 0x08
    252c:	88 e5       	ldi	r24, 0x58	; 88
    252e:	9d df       	rcall	.-198    	; 0x246a <data_read>
    2530:	20 91 db 20 	lds	r18, 0x20DB	; 0x8020db <c5>
    2534:	30 91 dc 20 	lds	r19, 0x20DC	; 0x8020dc <c5+0x1>
    2538:	89 01       	movw	r16, r18
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	32 2f       	mov	r19, r18
    2540:	21 2f       	mov	r18, r17
    2542:	10 2f       	mov	r17, r16
    2544:	00 27       	eor	r16, r16
    2546:	6b 01       	movw	r12, r22
    2548:	7c 01       	movw	r14, r24
    254a:	c0 1a       	sub	r12, r16
    254c:	d1 0a       	sbc	r13, r17
    254e:	e2 0a       	sbc	r14, r18
    2550:	f3 0a       	sbc	r15, r19
    2552:	c9 82       	std	Y+1, r12	; 0x01
    2554:	da 82       	std	Y+2, r13	; 0x02
    2556:	eb 82       	std	Y+3, r14	; 0x03
    2558:	fc 82       	std	Y+4, r15	; 0x04
    255a:	20 90 d5 20 	lds	r2, 0x20D5	; 0x8020d5 <c6>
    255e:	30 90 d6 20 	lds	r3, 0x20D6	; 0x8020d6 <c6+0x1>
    2562:	d7 01       	movw	r26, r14
    2564:	c6 01       	movw	r24, r12
    2566:	bb 0f       	add	r27, r27
    2568:	88 0b       	sbc	r24, r24
    256a:	98 2f       	mov	r25, r24
    256c:	dc 01       	movw	r26, r24
    256e:	a9 80       	ldd	r10, Y+1	; 0x01
    2570:	ba 80       	ldd	r11, Y+2	; 0x02
    2572:	cb 80       	ldd	r12, Y+3	; 0x03
    2574:	dc 80       	ldd	r13, Y+4	; 0x04
    2576:	e8 2e       	mov	r14, r24
    2578:	f8 2e       	mov	r15, r24
    257a:	08 2f       	mov	r16, r24
    257c:	18 2f       	mov	r17, r24
    257e:	22 2d       	mov	r18, r2
    2580:	33 2d       	mov	r19, r3
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	50 e0       	ldi	r21, 0x00	; 0
    2586:	60 e0       	ldi	r22, 0x00	; 0
    2588:	70 e0       	ldi	r23, 0x00	; 0
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <__muldi3>
    2592:	89 8b       	std	Y+17, r24	; 0x11
    2594:	b2 2f       	mov	r27, r18
    2596:	f3 2f       	mov	r31, r19
    2598:	e4 2f       	mov	r30, r20
    259a:	95 2e       	mov	r9, r21
    259c:	86 2e       	mov	r8, r22
    259e:	77 2e       	mov	r7, r23
    25a0:	a8 2e       	mov	r10, r24
    25a2:	b9 2e       	mov	r11, r25
    25a4:	a0 e0       	ldi	r26, 0x00	; 0
    25a6:	0e 94 40 20 	call	0x4080	; 0x4080 <__cmpdi2_s8>
    25aa:	84 f4       	brge	.+32     	; 0x25cc <get_pressure+0xda>
    25ac:	21 50       	subi	r18, 0x01	; 1
    25ae:	31 09       	sbc	r19, r1
    25b0:	40 48       	sbci	r20, 0x80	; 128
    25b2:	5f 4f       	sbci	r21, 0xFF	; 255
    25b4:	6f 4f       	sbci	r22, 0xFF	; 255
    25b6:	7f 4f       	sbci	r23, 0xFF	; 255
    25b8:	8f 4f       	sbci	r24, 0xFF	; 255
    25ba:	9f 4f       	sbci	r25, 0xFF	; 255
    25bc:	b2 2f       	mov	r27, r18
    25be:	f3 2f       	mov	r31, r19
    25c0:	e4 2f       	mov	r30, r20
    25c2:	95 2e       	mov	r9, r21
    25c4:	86 2e       	mov	r8, r22
    25c6:	77 2e       	mov	r7, r23
    25c8:	a8 2e       	mov	r10, r24
    25ca:	b9 2e       	mov	r11, r25
    25cc:	2b 2f       	mov	r18, r27
    25ce:	3f 2f       	mov	r19, r31
    25d0:	4e 2f       	mov	r20, r30
    25d2:	59 2d       	mov	r21, r9
    25d4:	68 2d       	mov	r22, r8
    25d6:	77 2d       	mov	r23, r7
    25d8:	8a 2d       	mov	r24, r10
    25da:	9b 2d       	mov	r25, r11
    25dc:	07 e1       	ldi	r16, 0x17	; 23
    25de:	0e 94 10 20 	call	0x4020	; 0x4020 <__ashrdi3>
    25e2:	82 2e       	mov	r8, r18
    25e4:	93 2e       	mov	r9, r19
    25e6:	00 e3       	ldi	r16, 0x30	; 48
    25e8:	80 1a       	sub	r8, r16
    25ea:	08 ef       	ldi	r16, 0xF8	; 248
    25ec:	90 0a       	sbc	r9, r16
    25ee:	09 2c       	mov	r0, r9
    25f0:	00 0c       	add	r0, r0
    25f2:	aa 08       	sbc	r10, r10
    25f4:	bb 08       	sbc	r11, r11
    25f6:	80 92 d1 20 	sts	0x20D1, r8	; 0x8020d1 <TEMP>
    25fa:	90 92 d2 20 	sts	0x20D2, r9	; 0x8020d2 <TEMP+0x1>
    25fe:	a0 92 d3 20 	sts	0x20D3, r10	; 0x8020d3 <TEMP+0x2>
    2602:	b0 92 d4 20 	sts	0x20D4, r11	; 0x8020d4 <TEMP+0x3>
    2606:	a0 91 df 20 	lds	r26, 0x20DF	; 0x8020df <c3>
    260a:	b0 91 e0 20 	lds	r27, 0x20E0	; 0x8020e0 <c3+0x1>
    260e:	29 81       	ldd	r18, Y+1	; 0x01
    2610:	3a 81       	ldd	r19, Y+2	; 0x02
    2612:	4b 81       	ldd	r20, Y+3	; 0x03
    2614:	5c 81       	ldd	r21, Y+4	; 0x04
    2616:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <__muluhisi3>
    261a:	4b 01       	movw	r8, r22
    261c:	5c 01       	movw	r10, r24
    261e:	99 23       	and	r25, r25
    2620:	2c f4       	brge	.+10     	; 0x262c <get_pressure+0x13a>
    2622:	1f e7       	ldi	r17, 0x7F	; 127
    2624:	81 0e       	add	r8, r17
    2626:	91 1c       	adc	r9, r1
    2628:	a1 1c       	adc	r10, r1
    262a:	b1 1c       	adc	r11, r1
    262c:	24 01       	movw	r4, r8
    262e:	35 01       	movw	r6, r10
    2630:	68 94       	set
    2632:	16 f8       	bld	r1, 6
    2634:	75 94       	asr	r7
    2636:	67 94       	ror	r6
    2638:	57 94       	ror	r5
    263a:	47 94       	ror	r4
    263c:	16 94       	lsr	r1
    263e:	d1 f7       	brne	.-12     	; 0x2634 <get_pressure+0x142>
    2640:	bb 0c       	add	r11, r11
    2642:	88 08       	sbc	r8, r8
    2644:	98 2c       	mov	r9, r8
    2646:	54 01       	movw	r10, r8
    2648:	80 91 dd 20 	lds	r24, 0x20DD	; 0x8020dd <c1>
    264c:	90 91 de 20 	lds	r25, 0x20DE	; 0x8020de <c1+0x1>
    2650:	6c 01       	movw	r12, r24
    2652:	e1 2c       	mov	r14, r1
    2654:	f1 2c       	mov	r15, r1
    2656:	00 e0       	ldi	r16, 0x00	; 0
    2658:	10 e0       	ldi	r17, 0x00	; 0
    265a:	98 01       	movw	r18, r16
    265c:	89 87       	std	Y+9, r24	; 0x09
    265e:	da 86       	std	Y+10, r13	; 0x0a
    2660:	eb 86       	std	Y+11, r14	; 0x0b
    2662:	fc 86       	std	Y+12, r15	; 0x0c
    2664:	0d 87       	std	Y+13, r16	; 0x0d
    2666:	1e 87       	std	Y+14, r17	; 0x0e
    2668:	2f 87       	std	Y+15, r18	; 0x0f
    266a:	38 8b       	std	Y+16, r19	; 0x10
    266c:	28 2f       	mov	r18, r24
    266e:	3d 2d       	mov	r19, r13
    2670:	40 e0       	ldi	r20, 0x00	; 0
    2672:	50 e0       	ldi	r21, 0x00	; 0
    2674:	60 e0       	ldi	r22, 0x00	; 0
    2676:	70 e0       	ldi	r23, 0x00	; 0
    2678:	80 e0       	ldi	r24, 0x00	; 0
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	00 e1       	ldi	r16, 0x10	; 16
    267e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__ashldi3>
    2682:	f2 2f       	mov	r31, r18
    2684:	e3 2f       	mov	r30, r19
    2686:	c4 2e       	mov	r12, r20
    2688:	d5 2e       	mov	r13, r21
    268a:	e6 2e       	mov	r14, r22
    268c:	f7 2e       	mov	r15, r23
    268e:	08 2f       	mov	r16, r24
    2690:	19 2f       	mov	r17, r25
    2692:	24 2d       	mov	r18, r4
    2694:	35 2d       	mov	r19, r5
    2696:	46 2d       	mov	r20, r6
    2698:	57 2d       	mov	r21, r7
    269a:	68 2d       	mov	r22, r8
    269c:	78 2d       	mov	r23, r8
    269e:	88 2d       	mov	r24, r8
    26a0:	98 2d       	mov	r25, r8
    26a2:	af 2e       	mov	r10, r31
    26a4:	be 2e       	mov	r11, r30
    26a6:	0e 94 2e 20 	call	0x405c	; 0x405c <__adddi3>
    26aa:	ed 80       	ldd	r14, Y+5	; 0x05
    26ac:	fe 80       	ldd	r15, Y+6	; 0x06
    26ae:	0f 81       	ldd	r16, Y+7	; 0x07
    26b0:	18 85       	ldd	r17, Y+8	; 0x08
    26b2:	17 01       	movw	r2, r14
    26b4:	28 01       	movw	r4, r16
    26b6:	ae 2c       	mov	r10, r14
    26b8:	b3 2c       	mov	r11, r3
    26ba:	c4 2c       	mov	r12, r4
    26bc:	d5 2c       	mov	r13, r5
    26be:	e1 2c       	mov	r14, r1
    26c0:	f1 2c       	mov	r15, r1
    26c2:	00 e0       	ldi	r16, 0x00	; 0
    26c4:	10 e0       	ldi	r17, 0x00	; 0
    26c6:	0e 94 a6 1f 	call	0x3f4c	; 0x3f4c <__muldi3>
    26ca:	12 2f       	mov	r17, r18
    26cc:	39 87       	std	Y+9, r19	; 0x09
    26ce:	4d 83       	std	Y+5, r20	; 0x05
    26d0:	b5 2f       	mov	r27, r21
    26d2:	f6 2f       	mov	r31, r22
    26d4:	e7 2f       	mov	r30, r23
    26d6:	78 2e       	mov	r7, r24
    26d8:	89 2e       	mov	r8, r25
    26da:	a0 e0       	ldi	r26, 0x00	; 0
    26dc:	0e 94 40 20 	call	0x4080	; 0x4080 <__cmpdi2_s8>
    26e0:	84 f4       	brge	.+32     	; 0x2702 <get_pressure+0x210>
    26e2:	21 50       	subi	r18, 0x01	; 1
    26e4:	31 09       	sbc	r19, r1
    26e6:	40 4e       	sbci	r20, 0xE0	; 224
    26e8:	5f 4f       	sbci	r21, 0xFF	; 255
    26ea:	6f 4f       	sbci	r22, 0xFF	; 255
    26ec:	7f 4f       	sbci	r23, 0xFF	; 255
    26ee:	8f 4f       	sbci	r24, 0xFF	; 255
    26f0:	9f 4f       	sbci	r25, 0xFF	; 255
    26f2:	12 2f       	mov	r17, r18
    26f4:	39 87       	std	Y+9, r19	; 0x09
    26f6:	4d 83       	std	Y+5, r20	; 0x05
    26f8:	b5 2f       	mov	r27, r21
    26fa:	f6 2f       	mov	r31, r22
    26fc:	e7 2f       	mov	r30, r23
    26fe:	78 2e       	mov	r7, r24
    2700:	89 2e       	mov	r8, r25
    2702:	21 2f       	mov	r18, r17
    2704:	39 85       	ldd	r19, Y+9	; 0x09
    2706:	4d 81       	ldd	r20, Y+5	; 0x05
    2708:	5b 2f       	mov	r21, r27
    270a:	6f 2f       	mov	r22, r31
    270c:	7e 2f       	mov	r23, r30
    270e:	87 2d       	mov	r24, r7
    2710:	98 2d       	mov	r25, r8
    2712:	05 e1       	ldi	r16, 0x15	; 21
    2714:	0e 94 10 20 	call	0x4020	; 0x4020 <__ashrdi3>
    2718:	52 2e       	mov	r5, r18
    271a:	63 2e       	mov	r6, r19
    271c:	74 2e       	mov	r7, r20
    271e:	59 8b       	std	Y+17, r21	; 0x11
    2720:	69 87       	std	Y+9, r22	; 0x09
    2722:	f7 2f       	mov	r31, r23
    2724:	e8 2f       	mov	r30, r24
    2726:	49 2e       	mov	r4, r25
    2728:	a0 91 d7 20 	lds	r26, 0x20D7	; 0x8020d7 <c4>
    272c:	b0 91 d8 20 	lds	r27, 0x20D8	; 0x8020d8 <c4+0x1>
    2730:	29 81       	ldd	r18, Y+1	; 0x01
    2732:	3a 81       	ldd	r19, Y+2	; 0x02
    2734:	4b 81       	ldd	r20, Y+3	; 0x03
    2736:	5c 81       	ldd	r21, Y+4	; 0x04
    2738:	0e 94 9c 1f 	call	0x3f38	; 0x3f38 <__muluhisi3>
    273c:	4b 01       	movw	r8, r22
    273e:	5c 01       	movw	r10, r24
    2740:	99 23       	and	r25, r25
    2742:	2c f4       	brge	.+10     	; 0x274e <get_pressure+0x25c>
    2744:	0f e3       	ldi	r16, 0x3F	; 63
    2746:	80 0e       	add	r8, r16
    2748:	91 1c       	adc	r9, r1
    274a:	a1 1c       	adc	r10, r1
    274c:	b1 1c       	adc	r11, r1
    274e:	75 01       	movw	r14, r10
    2750:	64 01       	movw	r12, r8
    2752:	68 94       	set
    2754:	15 f8       	bld	r1, 5
    2756:	f5 94       	asr	r15
    2758:	e7 94       	ror	r14
    275a:	d7 94       	ror	r13
    275c:	c7 94       	ror	r12
    275e:	16 94       	lsr	r1
    2760:	d1 f7       	brne	.-12     	; 0x2756 <get_pressure+0x264>
    2762:	bb 0c       	add	r11, r11
    2764:	88 08       	sbc	r8, r8
    2766:	98 2c       	mov	r9, r8
    2768:	54 01       	movw	r10, r8
    276a:	20 91 d9 20 	lds	r18, 0x20D9	; 0x8020d9 <c2>
    276e:	30 91 da 20 	lds	r19, 0x20DA	; 0x8020da <c2+0x1>
    2772:	a9 01       	movw	r20, r18
    2774:	35 2f       	mov	r19, r21
    2776:	40 e0       	ldi	r20, 0x00	; 0
    2778:	50 e0       	ldi	r21, 0x00	; 0
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	70 e0       	ldi	r23, 0x00	; 0
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	01 e1       	ldi	r16, 0x11	; 17
    2784:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <__ashldi3>
    2788:	22 2e       	mov	r2, r18
    278a:	33 2e       	mov	r3, r19
    278c:	49 83       	std	Y+1, r20	; 0x01
    278e:	5d 83       	std	Y+5, r21	; 0x05
    2790:	b6 2f       	mov	r27, r22
    2792:	a7 2f       	mov	r26, r23
    2794:	08 2f       	mov	r16, r24
    2796:	19 2f       	mov	r17, r25
    2798:	2c 2d       	mov	r18, r12
    279a:	3d 2d       	mov	r19, r13
    279c:	4e 2d       	mov	r20, r14
    279e:	5f 2d       	mov	r21, r15
    27a0:	68 2d       	mov	r22, r8
    27a2:	78 2d       	mov	r23, r8
    27a4:	88 2d       	mov	r24, r8
    27a6:	98 2d       	mov	r25, r8
    27a8:	a2 2c       	mov	r10, r2
    27aa:	b3 2c       	mov	r11, r3
    27ac:	c9 80       	ldd	r12, Y+1	; 0x01
    27ae:	dd 80       	ldd	r13, Y+5	; 0x05
    27b0:	eb 2e       	mov	r14, r27
    27b2:	fa 2e       	mov	r15, r26
    27b4:	0e 94 2e 20 	call	0x405c	; 0x405c <__adddi3>
    27b8:	a2 2e       	mov	r10, r18
    27ba:	b3 2e       	mov	r11, r19
    27bc:	c4 2e       	mov	r12, r20
    27be:	d5 2e       	mov	r13, r21
    27c0:	e6 2e       	mov	r14, r22
    27c2:	f7 2e       	mov	r15, r23
    27c4:	08 2f       	mov	r16, r24
    27c6:	19 2f       	mov	r17, r25
    27c8:	25 2d       	mov	r18, r5
    27ca:	36 2d       	mov	r19, r6
    27cc:	47 2d       	mov	r20, r7
    27ce:	59 89       	ldd	r21, Y+17	; 0x11
    27d0:	69 85       	ldd	r22, Y+9	; 0x09
    27d2:	7f 2f       	mov	r23, r31
    27d4:	8e 2f       	mov	r24, r30
    27d6:	94 2d       	mov	r25, r4
    27d8:	0e 94 37 20 	call	0x406e	; 0x406e <__subdi3>
    27dc:	12 2f       	mov	r17, r18
    27de:	3d 83       	std	Y+5, r19	; 0x05
    27e0:	49 83       	std	Y+1, r20	; 0x01
    27e2:	b5 2f       	mov	r27, r21
    27e4:	f6 2f       	mov	r31, r22
    27e6:	e7 2f       	mov	r30, r23
    27e8:	78 2e       	mov	r7, r24
    27ea:	89 2e       	mov	r8, r25
    27ec:	a0 e0       	ldi	r26, 0x00	; 0
    27ee:	0e 94 40 20 	call	0x4080	; 0x4080 <__cmpdi2_s8>
    27f2:	84 f4       	brge	.+32     	; 0x2814 <get_pressure+0x322>
    27f4:	21 50       	subi	r18, 0x01	; 1
    27f6:	30 48       	sbci	r19, 0x80	; 128
    27f8:	4f 4f       	sbci	r20, 0xFF	; 255
    27fa:	5f 4f       	sbci	r21, 0xFF	; 255
    27fc:	6f 4f       	sbci	r22, 0xFF	; 255
    27fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2800:	8f 4f       	sbci	r24, 0xFF	; 255
    2802:	9f 4f       	sbci	r25, 0xFF	; 255
    2804:	12 2f       	mov	r17, r18
    2806:	3d 83       	std	Y+5, r19	; 0x05
    2808:	49 83       	std	Y+1, r20	; 0x01
    280a:	b5 2f       	mov	r27, r21
    280c:	f6 2f       	mov	r31, r22
    280e:	e7 2f       	mov	r30, r23
    2810:	78 2e       	mov	r7, r24
    2812:	89 2e       	mov	r8, r25
    2814:	21 2f       	mov	r18, r17
    2816:	3d 81       	ldd	r19, Y+5	; 0x05
    2818:	49 81       	ldd	r20, Y+1	; 0x01
    281a:	5b 2f       	mov	r21, r27
    281c:	6f 2f       	mov	r22, r31
    281e:	7e 2f       	mov	r23, r30
    2820:	87 2d       	mov	r24, r7
    2822:	98 2d       	mov	r25, r8
    2824:	0f e0       	ldi	r16, 0x0F	; 15
    2826:	0e 94 10 20 	call	0x4020	; 0x4020 <__ashrdi3>
    282a:	62 2f       	mov	r22, r18
    282c:	73 2f       	mov	r23, r19
    282e:	84 2f       	mov	r24, r20
    2830:	95 2f       	mov	r25, r21
    2832:	61 96       	adiw	r28, 0x11	; 17
    2834:	cd bf       	out	0x3d, r28	; 61
    2836:	de bf       	out	0x3e, r29	; 62
    2838:	df 91       	pop	r29
    283a:	cf 91       	pop	r28
    283c:	1f 91       	pop	r17
    283e:	0f 91       	pop	r16
    2840:	ff 90       	pop	r15
    2842:	ef 90       	pop	r14
    2844:	df 90       	pop	r13
    2846:	cf 90       	pop	r12
    2848:	bf 90       	pop	r11
    284a:	af 90       	pop	r10
    284c:	9f 90       	pop	r9
    284e:	8f 90       	pop	r8
    2850:	7f 90       	pop	r7
    2852:	6f 90       	pop	r6
    2854:	5f 90       	pop	r5
    2856:	4f 90       	pop	r4
    2858:	3f 90       	pop	r3
    285a:	2f 90       	pop	r2
    285c:	08 95       	ret

0000285e <adc_init>:
#include <asf.h>
#include <math.h>
#include "thermistor.h"


void adc_init(void){	//This is for PA6... mostly
    285e:	ff 92       	push	r15
    2860:	0f 93       	push	r16
    2862:	1f 93       	push	r17
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
	PORTA.DIRCLR = 0b01000000;
    2868:	e0 e0       	ldi	r30, 0x00	; 0
    286a:	f6 e0       	ldi	r31, 0x06	; 6
    286c:	68 94       	set
    286e:	ff 24       	eor	r15, r15
    2870:	f6 f8       	bld	r15, 6
    2872:	f2 82       	std	Z+2, r15	; 0x02
	PORTA.DIR = 0b10111111;
    2874:	8f eb       	ldi	r24, 0xBF	; 191
    2876:	80 83       	st	Z, r24
	ADCA.CTRLA = 0b01000000;
    2878:	c0 e0       	ldi	r28, 0x00	; 0
    287a:	d2 e0       	ldi	r29, 0x02	; 2
    287c:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000;
    287e:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000;
    2880:	80 e1       	ldi	r24, 0x10	; 16
    2882:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101;
    2884:	85 e0       	ldi	r24, 0x05	; 5
    2886:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    2888:	61 e2       	ldi	r22, 0x21	; 33
    288a:	70 e0       	ldi	r23, 0x00	; 0
    288c:	82 e0       	ldi	r24, 0x02	; 2
    288e:	0e 94 aa 05 	call	0xb54	; 0xb54 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    2892:	08 2f       	mov	r16, r24
    2894:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    2896:	10 2f       	mov	r17, r16
    2898:	00 27       	eor	r16, r16
    289a:	60 e2       	ldi	r22, 0x20	; 32
    289c:	70 e0       	ldi	r23, 0x00	; 0
    289e:	82 e0       	ldi	r24, 0x02	; 2
    28a0:	0e 94 aa 05 	call	0xb54	; 0xb54 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    28a4:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    28a6:	0c 87       	std	Y+12, r16	; 0x0c
    28a8:	1d 87       	std	Y+13, r17	; 0x0d
	
	ADCA.CH0.CTRL = 0b01000000;
    28aa:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000000;
    28ac:	19 a2       	std	Y+33, r1	; 0x21
}
    28ae:	df 91       	pop	r29
    28b0:	cf 91       	pop	r28
    28b2:	1f 91       	pop	r17
    28b4:	0f 91       	pop	r16
    28b6:	ff 90       	pop	r15
    28b8:	08 95       	ret

000028ba <getVoltage>:


float getVoltage(void){
	ADCA.CH0.CTRL  |= 0b10000000;
    28ba:	e0 e0       	ldi	r30, 0x00	; 0
    28bc:	f2 e0       	ldi	r31, 0x02	; 2
    28be:	80 a1       	ldd	r24, Z+32	; 0x20
    28c0:	80 68       	ori	r24, 0x80	; 128
    28c2:	80 a3       	std	Z+32, r24	; 0x20
	//printf("one");
	//while(ADCA.CH0.INTFLAGS == 0);
	//printf("two");
	ADCA.CH0.INTFLAGS = 0;
    28c4:	13 a2       	std	Z+35, r1	; 0x23
	//printf("three");
	uint16_t adcReading = ADCA.CH0.RES;
    28c6:	64 a1       	ldd	r22, Z+36	; 0x24
    28c8:	75 a1       	ldd	r23, Z+37	; 0x25
	//printf("ADC reading = %u\n", adcReading);
	float voltage = 0.0004899 * (float)(adcReading) - 0.0856326;	//We have to find these numbers by applying differing voltage, printing ADC readings, and solve equation
	//printf("voltage: %f \n", voltage);
	return voltage;
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	1d d5       	rcall	.+2618   	; 0x330a <__floatunsisf>
    28d0:	22 ea       	ldi	r18, 0xA2	; 162
    28d2:	3c e6       	ldi	r19, 0x6C	; 108
    28d4:	40 e0       	ldi	r20, 0x00	; 0
    28d6:	5a e3       	ldi	r21, 0x3A	; 58
    28d8:	eb d5       	rcall	.+3030   	; 0x34b0 <__mulsf3>
    28da:	25 e2       	ldi	r18, 0x25	; 37
    28dc:	30 e6       	ldi	r19, 0x60	; 96
    28de:	4f ea       	ldi	r20, 0xAF	; 175
    28e0:	5d e3       	ldi	r21, 0x3D	; 61
	
}
    28e2:	15 c4       	rjmp	.+2090   	; 0x310e <__subsf3>

000028e4 <getTemperature>:
	uint16_t voltage = getVoltage();
	uint16_t current = (voltage/10000);
	return current;
}
*/
float getTemperature(void){
    28e4:	8f 92       	push	r8
    28e6:	9f 92       	push	r9
    28e8:	af 92       	push	r10
    28ea:	bf 92       	push	r11
    28ec:	cf 92       	push	r12
    28ee:	df 92       	push	r13
    28f0:	ef 92       	push	r14
    28f2:	ff 92       	push	r15
    28f4:	0f 93       	push	r16
    28f6:	1f 93       	push	r17
    28f8:	cf 93       	push	r28
	float voltage = getVoltage();
    28fa:	df 93       	push	r29
    28fc:	de df       	rcall	.-68     	; 0x28ba <getVoltage>
    28fe:	6b 01       	movw	r12, r22
	//uint16_t current = getCurrent();
	//uint16_t resistance = voltage/current;
	float resistance = (voltage*10000)/(voltage-3.3);
    2900:	7c 01       	movw	r14, r24
    2902:	20 e0       	ldi	r18, 0x00	; 0
    2904:	30 e4       	ldi	r19, 0x40	; 64
    2906:	4c e1       	ldi	r20, 0x1C	; 28
    2908:	56 e4       	ldi	r21, 0x46	; 70
    290a:	d2 d5       	rcall	.+2980   	; 0x34b0 <__mulsf3>
    290c:	4b 01       	movw	r8, r22
    290e:	5c 01       	movw	r10, r24
    2910:	23 e3       	ldi	r18, 0x33	; 51
    2912:	33 e3       	ldi	r19, 0x33	; 51
    2914:	43 e5       	ldi	r20, 0x53	; 83
    2916:	50 e4       	ldi	r21, 0x40	; 64
    2918:	c7 01       	movw	r24, r14
    291a:	b6 01       	movw	r22, r12
    291c:	f8 d3       	rcall	.+2032   	; 0x310e <__subsf3>
    291e:	9b 01       	movw	r18, r22
    2920:	ac 01       	movw	r20, r24
    2922:	c5 01       	movw	r24, r10
    2924:	b4 01       	movw	r22, r8
    2926:	58 d4       	rcall	.+2224   	; 0x31d8 <__divsf3>
    2928:	06 2f       	mov	r16, r22
    292a:	17 2f       	mov	r17, r23
    292c:	d8 2f       	mov	r29, r24
	printf("resistance = %f \n", resistance);
    292e:	c9 2f       	mov	r28, r25
    2930:	9f 93       	push	r25
    2932:	8f 93       	push	r24
    2934:	7f 93       	push	r23
    2936:	6f 93       	push	r22
    2938:	84 e1       	ldi	r24, 0x14	; 20
    293a:	90 e2       	ldi	r25, 0x20	; 32
    293c:	9f 93       	push	r25
    293e:	8f 93       	push	r24
    2940:	0e 94 cf 21 	call	0x439e	; 0x439e <printf>
	uint32_t temperature = 3977.0/(log(resistance/(10000.0*pow(2.71828,(-3977.0/298.15)))));
    2944:	2b e5       	ldi	r18, 0x5B	; 91
    2946:	30 ef       	ldi	r19, 0xF0	; 240
    2948:	43 e8       	ldi	r20, 0x83	; 131
    294a:	5c e3       	ldi	r21, 0x3C	; 60
    294c:	60 2f       	mov	r22, r16
    294e:	71 2f       	mov	r23, r17
    2950:	8d 2f       	mov	r24, r29
    2952:	9c 2f       	mov	r25, r28
	//float temperature = pow((.003351016+.0002569850*log(resistance/10000)+.000002620131*pow(log(resistance/10000),2)),-1);
	return temperature;
    2954:	41 d4       	rcall	.+2178   	; 0x31d8 <__divsf3>
    2956:	6c d5       	rcall	.+2776   	; 0x3430 <log>
    2958:	9b 01       	movw	r18, r22
    295a:	ac 01       	movw	r20, r24
    295c:	60 e0       	ldi	r22, 0x00	; 0
    295e:	70 e9       	ldi	r23, 0x90	; 144
    2960:	88 e7       	ldi	r24, 0x78	; 120
    2962:	95 e4       	ldi	r25, 0x45	; 69
    2964:	39 d4       	rcall	.+2162   	; 0x31d8 <__divsf3>
    2966:	a5 d4       	rcall	.+2378   	; 0x32b2 <__fixunssfsi>
    2968:	d0 d4       	rcall	.+2464   	; 0x330a <__floatunsisf>
    296a:	0f 90       	pop	r0
    296c:	0f 90       	pop	r0
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
	
	
	
    2972:	0f 90       	pop	r0
    2974:	0f 90       	pop	r0
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	1f 91       	pop	r17
    297c:	0f 91       	pop	r16
    297e:	ff 90       	pop	r15
    2980:	ef 90       	pop	r14
    2982:	df 90       	pop	r13
    2984:	cf 90       	pop	r12
    2986:	bf 90       	pop	r11
    2988:	af 90       	pop	r10
    298a:	9f 90       	pop	r9
    298c:	8f 90       	pop	r8
    298e:	08 95       	ret

00002990 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    2990:	cf 93       	push	r28
    2992:	df 93       	push	r29
	*data = usart_getchar(usart);
    2994:	eb 01       	movw	r28, r22
    2996:	b0 d9       	rcall	.-3232   	; 0x1cf8 <usart_getchar>
}
    2998:	88 83       	st	Y, r24
    299a:	df 91       	pop	r29
    299c:	cf 91       	pop	r28
    299e:	08 95       	ret

000029a0 <usart_serial_putchar>:
 * \param c       Character to write.
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
    29a0:	a3 c9       	rjmp	.-3258   	; 0x1ce8 <usart_putchar>
    29a2:	08 95       	ret

000029a4 <usart_init>:
    29a4:	ef 92       	push	r14
    29a6:	ff 92       	push	r15
    29a8:	0f 93       	push	r16
    29aa:	1f 93       	push	r17
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	27 97       	sbiw	r28, 0x07	; 7
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	e0 e4       	ldi	r30, 0x40	; 64
    29bc:	f6 e0       	ldi	r31, 0x06	; 6
    29be:	88 e0       	ldi	r24, 0x08	; 8
    29c0:	81 83       	std	Z+1, r24	; 0x01
    29c2:	85 83       	std	Z+5, r24	; 0x05
    29c4:	e0 e6       	ldi	r30, 0x60	; 96
    29c6:	f6 e0       	ldi	r31, 0x06	; 6
    29c8:	81 83       	std	Z+1, r24	; 0x01
    29ca:	85 83       	std	Z+5, r24	; 0x05
    29cc:	80 ea       	ldi	r24, 0xA0	; 160
    29ce:	98 e0       	ldi	r25, 0x08	; 8
    29d0:	80 93 cb 20 	sts	0x20CB, r24	; 0x8020cb <stdio_base>
    29d4:	90 93 cc 20 	sts	0x20CC, r25	; 0x8020cc <stdio_base+0x1>
    29d8:	0f 2e       	mov	r0, r31
    29da:	f0 ed       	ldi	r31, 0xD0	; 208
    29dc:	ef 2e       	mov	r14, r31
    29de:	f4 e1       	ldi	r31, 0x14	; 20
    29e0:	ff 2e       	mov	r15, r31
    29e2:	f0 2d       	mov	r31, r0
    29e4:	e0 92 c9 20 	sts	0x20C9, r14	; 0x8020c9 <ptr_put>
    29e8:	f0 92 ca 20 	sts	0x20CA, r15	; 0x8020ca <ptr_put+0x1>
    29ec:	08 ec       	ldi	r16, 0xC8	; 200
    29ee:	14 e1       	ldi	r17, 0x14	; 20
    29f0:	00 93 c7 20 	sts	0x20C7, r16	; 0x8020c7 <ptr_get>
    29f4:	10 93 c8 20 	sts	0x20C8, r17	; 0x8020c8 <ptr_get+0x1>
    29f8:	ed e0       	ldi	r30, 0x0D	; 13
    29fa:	f0 e2       	ldi	r31, 0x20	; 32
    29fc:	84 81       	ldd	r24, Z+4	; 0x04
    29fe:	8d 83       	std	Y+5, r24	; 0x05
    2a00:	85 81       	ldd	r24, Z+5	; 0x05
    2a02:	8e 83       	std	Y+6, r24	; 0x06
    2a04:	86 81       	ldd	r24, Z+6	; 0x06
    2a06:	8f 83       	std	Y+7, r24	; 0x07
    2a08:	80 81       	ld	r24, Z
    2a0a:	91 81       	ldd	r25, Z+1	; 0x01
    2a0c:	a2 81       	ldd	r26, Z+2	; 0x02
    2a0e:	b3 81       	ldd	r27, Z+3	; 0x03
    2a10:	89 83       	std	Y+1, r24	; 0x01
    2a12:	9a 83       	std	Y+2, r25	; 0x02
    2a14:	ab 83       	std	Y+3, r26	; 0x03
    2a16:	bc 83       	std	Y+4, r27	; 0x04
    2a18:	60 e1       	ldi	r22, 0x10	; 16
    2a1a:	83 e0       	ldi	r24, 0x03	; 3
    2a1c:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    2a20:	be 01       	movw	r22, r28
    2a22:	6f 5f       	subi	r22, 0xFF	; 255
    2a24:	7f 4f       	sbci	r23, 0xFF	; 255
    2a26:	80 ea       	ldi	r24, 0xA0	; 160
    2a28:	98 e0       	ldi	r25, 0x08	; 8
    2a2a:	7f da       	rcall	.-2818   	; 0x1f2a <usart_init_rs232>
    2a2c:	61 e9       	ldi	r22, 0x91	; 145
    2a2e:	73 e0       	ldi	r23, 0x03	; 3
    2a30:	8a ea       	ldi	r24, 0xAA	; 170
    2a32:	93 e0       	ldi	r25, 0x03	; 3
    2a34:	0e 94 49 21 	call	0x4292	; 0x4292 <fdevopen>
    2a38:	80 ea       	ldi	r24, 0xA0	; 160
    2a3a:	99 e0       	ldi	r25, 0x09	; 9
    2a3c:	80 93 cb 20 	sts	0x20CB, r24	; 0x8020cb <stdio_base>
    2a40:	90 93 cc 20 	sts	0x20CC, r25	; 0x8020cc <stdio_base+0x1>
    2a44:	e0 92 c9 20 	sts	0x20C9, r14	; 0x8020c9 <ptr_put>
    2a48:	f0 92 ca 20 	sts	0x20CA, r15	; 0x8020ca <ptr_put+0x1>
    2a4c:	00 93 c7 20 	sts	0x20C7, r16	; 0x8020c7 <ptr_get>
    2a50:	10 93 c8 20 	sts	0x20C8, r17	; 0x8020c8 <ptr_get+0x1>
    2a54:	e6 e0       	ldi	r30, 0x06	; 6
    2a56:	f0 e2       	ldi	r31, 0x20	; 32
    2a58:	84 81       	ldd	r24, Z+4	; 0x04
    2a5a:	8d 83       	std	Y+5, r24	; 0x05
    2a5c:	85 81       	ldd	r24, Z+5	; 0x05
    2a5e:	8e 83       	std	Y+6, r24	; 0x06
    2a60:	86 81       	ldd	r24, Z+6	; 0x06
    2a62:	8f 83       	std	Y+7, r24	; 0x07
    2a64:	80 81       	ld	r24, Z
    2a66:	91 81       	ldd	r25, Z+1	; 0x01
    2a68:	a2 81       	ldd	r26, Z+2	; 0x02
    2a6a:	b3 81       	ldd	r27, Z+3	; 0x03
    2a6c:	89 83       	std	Y+1, r24	; 0x01
    2a6e:	9a 83       	std	Y+2, r25	; 0x02
    2a70:	ab 83       	std	Y+3, r26	; 0x03
    2a72:	bc 83       	std	Y+4, r27	; 0x04
    2a74:	60 e1       	ldi	r22, 0x10	; 16
    2a76:	84 e0       	ldi	r24, 0x04	; 4
    2a78:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    2a7c:	be 01       	movw	r22, r28
    2a7e:	6f 5f       	subi	r22, 0xFF	; 255
    2a80:	7f 4f       	sbci	r23, 0xFF	; 255
    2a82:	80 ea       	ldi	r24, 0xA0	; 160
    2a84:	99 e0       	ldi	r25, 0x09	; 9
    2a86:	51 da       	rcall	.-2910   	; 0x1f2a <usart_init_rs232>
    2a88:	61 e9       	ldi	r22, 0x91	; 145
    2a8a:	73 e0       	ldi	r23, 0x03	; 3
    2a8c:	8a ea       	ldi	r24, 0xAA	; 170
    2a8e:	93 e0       	ldi	r25, 0x03	; 3
    2a90:	0e 94 49 21 	call	0x4292	; 0x4292 <fdevopen>
    2a94:	27 96       	adiw	r28, 0x07	; 7
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	de bf       	out	0x3e, r29	; 62
    2a9a:	df 91       	pop	r29
    2a9c:	cf 91       	pop	r28
    2a9e:	1f 91       	pop	r17
    2aa0:	0f 91       	pop	r16
    2aa2:	ff 90       	pop	r15
    2aa4:	ef 90       	pop	r14
    2aa6:	08 95       	ret

00002aa8 <usart_tx>:
    2aa8:	cf 92       	push	r12
    2aaa:	df 92       	push	r13
    2aac:	ef 92       	push	r14
    2aae:	ff 92       	push	r15
    2ab0:	0f 93       	push	r16
    2ab2:	1f 93       	push	r17
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	da 95       	dec	r29
    2abe:	cd bf       	out	0x3d, r28	; 61
    2ac0:	de bf       	out	0x3e, r29	; 62
    2ac2:	c4 5f       	subi	r28, 0xF4	; 244
    2ac4:	de 4f       	sbci	r29, 0xFE	; 254
    2ac6:	e8 80       	ld	r14, Y
    2ac8:	f9 80       	ldd	r15, Y+1	; 0x01
    2aca:	cc 50       	subi	r28, 0x0C	; 12
    2acc:	d1 40       	sbci	r29, 0x01	; 1
    2ace:	ae 01       	movw	r20, r28
    2ad0:	40 5f       	subi	r20, 0xF0	; 240
    2ad2:	5e 4f       	sbci	r21, 0xFE	; 254
    2ad4:	c2 5f       	subi	r28, 0xF2	; 242
    2ad6:	de 4f       	sbci	r29, 0xFE	; 254
    2ad8:	68 81       	ld	r22, Y
    2ada:	79 81       	ldd	r23, Y+1	; 0x01
    2adc:	ce 50       	subi	r28, 0x0E	; 14
    2ade:	d1 40       	sbci	r29, 0x01	; 1
    2ae0:	ce 01       	movw	r24, r28
    2ae2:	01 96       	adiw	r24, 0x01	; 1
    2ae4:	0e 94 12 22 	call	0x4424	; 0x4424 <vsprintf>
    2ae8:	8e 01       	movw	r16, r28
    2aea:	0f 5f       	subi	r16, 0xFF	; 255
    2aec:	1f 4f       	sbci	r17, 0xFF	; 255
    2aee:	6e 01       	movw	r12, r28
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	c8 0e       	add	r12, r24
    2af4:	d8 1e       	adc	r13, r24
    2af6:	f8 01       	movw	r30, r16
    2af8:	61 91       	ld	r22, Z+
    2afa:	8f 01       	movw	r16, r30
    2afc:	c7 01       	movw	r24, r14
    2afe:	f4 d8       	rcall	.-3608   	; 0x1ce8 <usart_putchar>
    2b00:	0c 15       	cp	r16, r12
    2b02:	1d 05       	cpc	r17, r13
    2b04:	c1 f7       	brne	.-16     	; 0x2af6 <usart_tx+0x4e>
    2b06:	d3 95       	inc	r29
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	df 91       	pop	r29
    2b0e:	cf 91       	pop	r28
    2b10:	1f 91       	pop	r17
    2b12:	0f 91       	pop	r16
    2b14:	ff 90       	pop	r15
    2b16:	ef 90       	pop	r14
    2b18:	df 90       	pop	r13
    2b1a:	cf 90       	pop	r12
    2b1c:	08 95       	ret

00002b1e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2b1e:	04 c0       	rjmp	.+8      	; 0x2b28 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2b20:	61 50       	subi	r22, 0x01	; 1
    2b22:	71 09       	sbc	r23, r1
    2b24:	81 09       	sbc	r24, r1
    2b26:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2b28:	61 15       	cp	r22, r1
    2b2a:	71 05       	cpc	r23, r1
    2b2c:	81 05       	cpc	r24, r1
    2b2e:	91 05       	cpc	r25, r1
    2b30:	b9 f7       	brne	.-18     	; 0x2b20 <__portable_avr_delay_cycles+0x2>
    2b32:	08 95       	ret

00002b34 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2b34:	00 97       	sbiw	r24, 0x00	; 0
    2b36:	09 f4       	brne	.+2      	; 0x2b3a <sysclk_enable_peripheral_clock+0x6>
    2b38:	5c c1       	rjmp	.+696    	; 0x2df2 <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    2b3a:	80 3c       	cpi	r24, 0xC0	; 192
    2b3c:	91 05       	cpc	r25, r1
    2b3e:	29 f4       	brne	.+10     	; 0x2b4a <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    2b40:	60 e1       	ldi	r22, 0x10	; 16
    2b42:	80 e0       	ldi	r24, 0x00	; 0
    2b44:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2b48:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    2b4a:	80 34       	cpi	r24, 0x40	; 64
    2b4c:	24 e0       	ldi	r18, 0x04	; 4
    2b4e:	92 07       	cpc	r25, r18
    2b50:	29 f4       	brne	.+10     	; 0x2b5c <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    2b52:	68 e0       	ldi	r22, 0x08	; 8
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2b5a:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    2b5c:	81 15       	cp	r24, r1
    2b5e:	24 e0       	ldi	r18, 0x04	; 4
    2b60:	92 07       	cpc	r25, r18
    2b62:	29 f4       	brne	.+10     	; 0x2b6e <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2b64:	64 e0       	ldi	r22, 0x04	; 4
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2b6c:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2b6e:	80 38       	cpi	r24, 0x80	; 128
    2b70:	21 e0       	ldi	r18, 0x01	; 1
    2b72:	92 07       	cpc	r25, r18
    2b74:	29 f4       	brne	.+10     	; 0x2b80 <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2b76:	62 e0       	ldi	r22, 0x02	; 2
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2b7e:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    2b80:	81 15       	cp	r24, r1
    2b82:	21 e0       	ldi	r18, 0x01	; 1
    2b84:	92 07       	cpc	r25, r18
    2b86:	29 f4       	brne	.+10     	; 0x2b92 <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2b88:	61 e0       	ldi	r22, 0x01	; 1
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2b90:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    2b92:	80 38       	cpi	r24, 0x80	; 128
    2b94:	23 e0       	ldi	r18, 0x03	; 3
    2b96:	92 07       	cpc	r25, r18
    2b98:	29 f4       	brne	.+10     	; 0x2ba4 <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2b9a:	61 e0       	ldi	r22, 0x01	; 1
    2b9c:	81 e0       	ldi	r24, 0x01	; 1
    2b9e:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2ba2:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    2ba4:	80 39       	cpi	r24, 0x90	; 144
    2ba6:	23 e0       	ldi	r18, 0x03	; 3
    2ba8:	92 07       	cpc	r25, r18
    2baa:	29 f4       	brne	.+10     	; 0x2bb6 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2bac:	61 e0       	ldi	r22, 0x01	; 1
    2bae:	82 e0       	ldi	r24, 0x02	; 2
    2bb0:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2bb4:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    2bb6:	81 15       	cp	r24, r1
    2bb8:	22 e0       	ldi	r18, 0x02	; 2
    2bba:	92 07       	cpc	r25, r18
    2bbc:	29 f4       	brne	.+10     	; 0x2bc8 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2bbe:	62 e0       	ldi	r22, 0x02	; 2
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2bc6:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    2bc8:	80 34       	cpi	r24, 0x40	; 64
    2bca:	22 e0       	ldi	r18, 0x02	; 2
    2bcc:	92 07       	cpc	r25, r18
    2bce:	29 f4       	brne	.+10     	; 0x2bda <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2bd0:	62 e0       	ldi	r22, 0x02	; 2
    2bd2:	82 e0       	ldi	r24, 0x02	; 2
    2bd4:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2bd8:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    2bda:	81 15       	cp	r24, r1
    2bdc:	23 e0       	ldi	r18, 0x03	; 3
    2bde:	92 07       	cpc	r25, r18
    2be0:	29 f4       	brne	.+10     	; 0x2bec <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    2be2:	64 e0       	ldi	r22, 0x04	; 4
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2bea:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    2bec:	80 32       	cpi	r24, 0x20	; 32
    2bee:	23 e0       	ldi	r18, 0x03	; 3
    2bf0:	92 07       	cpc	r25, r18
    2bf2:	29 f4       	brne	.+10     	; 0x2bfe <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    2bf4:	64 e0       	ldi	r22, 0x04	; 4
    2bf6:	82 e0       	ldi	r24, 0x02	; 2
    2bf8:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2bfc:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    2bfe:	81 15       	cp	r24, r1
    2c00:	28 e0       	ldi	r18, 0x08	; 8
    2c02:	92 07       	cpc	r25, r18
    2c04:	29 f4       	brne	.+10     	; 0x2c10 <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    2c06:	61 e0       	ldi	r22, 0x01	; 1
    2c08:	83 e0       	ldi	r24, 0x03	; 3
    2c0a:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2c0e:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    2c10:	81 15       	cp	r24, r1
    2c12:	29 e0       	ldi	r18, 0x09	; 9
    2c14:	92 07       	cpc	r25, r18
    2c16:	29 f4       	brne	.+10     	; 0x2c22 <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    2c18:	61 e0       	ldi	r22, 0x01	; 1
    2c1a:	84 e0       	ldi	r24, 0x04	; 4
    2c1c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2c20:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    2c22:	81 15       	cp	r24, r1
    2c24:	2a e0       	ldi	r18, 0x0A	; 10
    2c26:	92 07       	cpc	r25, r18
    2c28:	29 f4       	brne	.+10     	; 0x2c34 <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    2c2a:	61 e0       	ldi	r22, 0x01	; 1
    2c2c:	85 e0       	ldi	r24, 0x05	; 5
    2c2e:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2c32:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    2c34:	81 15       	cp	r24, r1
    2c36:	2b e0       	ldi	r18, 0x0B	; 11
    2c38:	92 07       	cpc	r25, r18
    2c3a:	29 f4       	brne	.+10     	; 0x2c46 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    2c3c:	61 e0       	ldi	r22, 0x01	; 1
    2c3e:	86 e0       	ldi	r24, 0x06	; 6
    2c40:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2c44:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    2c46:	80 34       	cpi	r24, 0x40	; 64
    2c48:	28 e0       	ldi	r18, 0x08	; 8
    2c4a:	92 07       	cpc	r25, r18
    2c4c:	29 f4       	brne	.+10     	; 0x2c58 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2c4e:	62 e0       	ldi	r22, 0x02	; 2
    2c50:	83 e0       	ldi	r24, 0x03	; 3
    2c52:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2c56:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2c58:	80 34       	cpi	r24, 0x40	; 64
    2c5a:	29 e0       	ldi	r18, 0x09	; 9
    2c5c:	92 07       	cpc	r25, r18
    2c5e:	29 f4       	brne	.+10     	; 0x2c6a <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2c60:	62 e0       	ldi	r22, 0x02	; 2
    2c62:	84 e0       	ldi	r24, 0x04	; 4
    2c64:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2c68:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2c6a:	80 34       	cpi	r24, 0x40	; 64
    2c6c:	2a e0       	ldi	r18, 0x0A	; 10
    2c6e:	92 07       	cpc	r25, r18
    2c70:	29 f4       	brne	.+10     	; 0x2c7c <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2c72:	62 e0       	ldi	r22, 0x02	; 2
    2c74:	85 e0       	ldi	r24, 0x05	; 5
    2c76:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2c7a:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    2c7c:	80 34       	cpi	r24, 0x40	; 64
    2c7e:	2b e0       	ldi	r18, 0x0B	; 11
    2c80:	92 07       	cpc	r25, r18
    2c82:	29 f4       	brne	.+10     	; 0x2c8e <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    2c84:	62 e0       	ldi	r22, 0x02	; 2
    2c86:	86 e0       	ldi	r24, 0x06	; 6
    2c88:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2c8c:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2c8e:	80 39       	cpi	r24, 0x90	; 144
    2c90:	28 e0       	ldi	r18, 0x08	; 8
    2c92:	92 07       	cpc	r25, r18
    2c94:	29 f4       	brne	.+10     	; 0x2ca0 <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2c96:	64 e0       	ldi	r22, 0x04	; 4
    2c98:	83 e0       	ldi	r24, 0x03	; 3
    2c9a:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2c9e:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2ca0:	80 39       	cpi	r24, 0x90	; 144
    2ca2:	29 e0       	ldi	r18, 0x09	; 9
    2ca4:	92 07       	cpc	r25, r18
    2ca6:	29 f4       	brne	.+10     	; 0x2cb2 <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2ca8:	64 e0       	ldi	r22, 0x04	; 4
    2caa:	84 e0       	ldi	r24, 0x04	; 4
    2cac:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2cb0:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    2cb2:	80 39       	cpi	r24, 0x90	; 144
    2cb4:	2a e0       	ldi	r18, 0x0A	; 10
    2cb6:	92 07       	cpc	r25, r18
    2cb8:	29 f4       	brne	.+10     	; 0x2cc4 <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2cba:	64 e0       	ldi	r22, 0x04	; 4
    2cbc:	85 e0       	ldi	r24, 0x05	; 5
    2cbe:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2cc2:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    2cc4:	80 39       	cpi	r24, 0x90	; 144
    2cc6:	2b e0       	ldi	r18, 0x0B	; 11
    2cc8:	92 07       	cpc	r25, r18
    2cca:	29 f4       	brne	.+10     	; 0x2cd6 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2ccc:	64 e0       	ldi	r22, 0x04	; 4
    2cce:	86 e0       	ldi	r24, 0x06	; 6
    2cd0:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2cd4:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    2cd6:	80 3c       	cpi	r24, 0xC0	; 192
    2cd8:	28 e0       	ldi	r18, 0x08	; 8
    2cda:	92 07       	cpc	r25, r18
    2cdc:	29 f4       	brne	.+10     	; 0x2ce8 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2cde:	68 e0       	ldi	r22, 0x08	; 8
    2ce0:	83 e0       	ldi	r24, 0x03	; 3
    2ce2:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2ce6:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    2ce8:	80 3c       	cpi	r24, 0xC0	; 192
    2cea:	29 e0       	ldi	r18, 0x09	; 9
    2cec:	92 07       	cpc	r25, r18
    2cee:	29 f4       	brne	.+10     	; 0x2cfa <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    2cf0:	68 e0       	ldi	r22, 0x08	; 8
    2cf2:	84 e0       	ldi	r24, 0x04	; 4
    2cf4:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2cf8:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    2cfa:	80 3c       	cpi	r24, 0xC0	; 192
    2cfc:	2a e0       	ldi	r18, 0x0A	; 10
    2cfe:	92 07       	cpc	r25, r18
    2d00:	29 f4       	brne	.+10     	; 0x2d0c <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    2d02:	68 e0       	ldi	r22, 0x08	; 8
    2d04:	85 e0       	ldi	r24, 0x05	; 5
    2d06:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2d0a:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    2d0c:	80 3c       	cpi	r24, 0xC0	; 192
    2d0e:	2b e0       	ldi	r18, 0x0B	; 11
    2d10:	92 07       	cpc	r25, r18
    2d12:	29 f4       	brne	.+10     	; 0x2d1e <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    2d14:	68 e0       	ldi	r22, 0x08	; 8
    2d16:	86 e0       	ldi	r24, 0x06	; 6
    2d18:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2d1c:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2d1e:	80 3a       	cpi	r24, 0xA0	; 160
    2d20:	28 e0       	ldi	r18, 0x08	; 8
    2d22:	92 07       	cpc	r25, r18
    2d24:	29 f4       	brne	.+10     	; 0x2d30 <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2d26:	60 e1       	ldi	r22, 0x10	; 16
    2d28:	83 e0       	ldi	r24, 0x03	; 3
    2d2a:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2d2e:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2d30:	80 3a       	cpi	r24, 0xA0	; 160
    2d32:	29 e0       	ldi	r18, 0x09	; 9
    2d34:	92 07       	cpc	r25, r18
    2d36:	29 f4       	brne	.+10     	; 0x2d42 <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    2d38:	60 e1       	ldi	r22, 0x10	; 16
    2d3a:	84 e0       	ldi	r24, 0x04	; 4
    2d3c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2d40:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    2d42:	80 3a       	cpi	r24, 0xA0	; 160
    2d44:	2a e0       	ldi	r18, 0x0A	; 10
    2d46:	92 07       	cpc	r25, r18
    2d48:	29 f4       	brne	.+10     	; 0x2d54 <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    2d4a:	60 e1       	ldi	r22, 0x10	; 16
    2d4c:	85 e0       	ldi	r24, 0x05	; 5
    2d4e:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2d52:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    2d54:	80 3a       	cpi	r24, 0xA0	; 160
    2d56:	2b e0       	ldi	r18, 0x0B	; 11
    2d58:	92 07       	cpc	r25, r18
    2d5a:	29 f4       	brne	.+10     	; 0x2d66 <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    2d5c:	60 e1       	ldi	r22, 0x10	; 16
    2d5e:	86 e0       	ldi	r24, 0x06	; 6
    2d60:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2d64:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    2d66:	80 3b       	cpi	r24, 0xB0	; 176
    2d68:	28 e0       	ldi	r18, 0x08	; 8
    2d6a:	92 07       	cpc	r25, r18
    2d6c:	29 f4       	brne	.+10     	; 0x2d78 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    2d6e:	60 e2       	ldi	r22, 0x20	; 32
    2d70:	83 e0       	ldi	r24, 0x03	; 3
    2d72:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2d76:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    2d78:	80 3b       	cpi	r24, 0xB0	; 176
    2d7a:	29 e0       	ldi	r18, 0x09	; 9
    2d7c:	92 07       	cpc	r25, r18
    2d7e:	29 f4       	brne	.+10     	; 0x2d8a <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    2d80:	60 e2       	ldi	r22, 0x20	; 32
    2d82:	84 e0       	ldi	r24, 0x04	; 4
    2d84:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2d88:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    2d8a:	80 3b       	cpi	r24, 0xB0	; 176
    2d8c:	2a e0       	ldi	r18, 0x0A	; 10
    2d8e:	92 07       	cpc	r25, r18
    2d90:	29 f4       	brne	.+10     	; 0x2d9c <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    2d92:	60 e2       	ldi	r22, 0x20	; 32
    2d94:	85 e0       	ldi	r24, 0x05	; 5
    2d96:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2d9a:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    2d9c:	80 3b       	cpi	r24, 0xB0	; 176
    2d9e:	2b e0       	ldi	r18, 0x0B	; 11
    2da0:	92 07       	cpc	r25, r18
    2da2:	29 f4       	brne	.+10     	; 0x2dae <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    2da4:	60 e2       	ldi	r22, 0x20	; 32
    2da6:	86 e0       	ldi	r24, 0x06	; 6
    2da8:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2dac:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    2dae:	80 38       	cpi	r24, 0x80	; 128
    2db0:	24 e0       	ldi	r18, 0x04	; 4
    2db2:	92 07       	cpc	r25, r18
    2db4:	29 f4       	brne	.+10     	; 0x2dc0 <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2db6:	60 e4       	ldi	r22, 0x40	; 64
    2db8:	83 e0       	ldi	r24, 0x03	; 3
    2dba:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2dbe:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    2dc0:	80 39       	cpi	r24, 0x90	; 144
    2dc2:	24 e0       	ldi	r18, 0x04	; 4
    2dc4:	92 07       	cpc	r25, r18
    2dc6:	29 f4       	brne	.+10     	; 0x2dd2 <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    2dc8:	60 e4       	ldi	r22, 0x40	; 64
    2dca:	84 e0       	ldi	r24, 0x04	; 4
    2dcc:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2dd0:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    2dd2:	80 3a       	cpi	r24, 0xA0	; 160
    2dd4:	24 e0       	ldi	r18, 0x04	; 4
    2dd6:	92 07       	cpc	r25, r18
    2dd8:	29 f4       	brne	.+10     	; 0x2de4 <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2dda:	60 e4       	ldi	r22, 0x40	; 64
    2ddc:	85 e0       	ldi	r24, 0x05	; 5
    2dde:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2de2:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    2de4:	80 3b       	cpi	r24, 0xB0	; 176
    2de6:	94 40       	sbci	r25, 0x04	; 4
    2de8:	21 f4       	brne	.+8      	; 0x2df2 <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    2dea:	60 e4       	ldi	r22, 0x40	; 64
    2dec:	86 e0       	ldi	r24, 0x06	; 6
    2dee:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <sysclk_enable_module>
    2df2:	08 95       	ret

00002df4 <main>:
    2df4:	cf 93       	push	r28
    2df6:	df 93       	push	r29
    2df8:	cd b7       	in	r28, 0x3d	; 61
    2dfa:	de b7       	in	r29, 0x3e	; 62
    2dfc:	cc 54       	subi	r28, 0x4C	; 76
    2dfe:	d1 09       	sbc	r29, r1
    2e00:	cd bf       	out	0x3d, r28	; 61
    2e02:	de bf       	out	0x3e, r29	; 62
    2e04:	0e 94 46 03 	call	0x68c	; 0x68c <sysclk_init>
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	9b e0       	ldi	r25, 0x0B	; 11
    2e0c:	93 de       	rcall	.-730    	; 0x2b34 <sysclk_enable_peripheral_clock>
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	99 e0       	ldi	r25, 0x09	; 9
    2e12:	90 de       	rcall	.-736    	; 0x2b34 <sysclk_enable_peripheral_clock>
    2e14:	64 e0       	ldi	r22, 0x04	; 4
    2e16:	86 e0       	ldi	r24, 0x06	; 6
    2e18:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    2e1c:	64 e0       	ldi	r22, 0x04	; 4
    2e1e:	84 e0       	ldi	r24, 0x04	; 4
    2e20:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    2e24:	68 e0       	ldi	r22, 0x08	; 8
    2e26:	83 e0       	ldi	r24, 0x03	; 3
    2e28:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <sysclk_enable_module>
    2e2c:	80 ea       	ldi	r24, 0xA0	; 160
    2e2e:	98 e0       	ldi	r25, 0x08	; 8
    2e30:	81 de       	rcall	.-766    	; 0x2b34 <sysclk_enable_peripheral_clock>
    2e32:	b8 dd       	rcall	.-1168   	; 0x29a4 <usart_init>
    2e34:	80 ec       	ldi	r24, 0xC0	; 192
    2e36:	98 e0       	ldi	r25, 0x08	; 8
    2e38:	7d de       	rcall	.-774    	; 0x2b34 <sysclk_enable_peripheral_clock>
    2e3a:	a5 da       	rcall	.-2742   	; 0x2386 <SPI_init>
    2e3c:	df da       	rcall	.-2626   	; 0x23fc <ms5607_init>
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	92 e0       	ldi	r25, 0x02	; 2
    2e42:	78 de       	rcall	.-784    	; 0x2b34 <sysclk_enable_peripheral_clock>
    2e44:	0c dd       	rcall	.-1512   	; 0x285e <adc_init>
    2e46:	55 db       	rcall	.-2390   	; 0x24f2 <get_pressure>
    2e48:	2d 96       	adiw	r28, 0x0d	; 13
    2e4a:	6c af       	std	Y+60, r22	; 0x3c
    2e4c:	7d af       	std	Y+61, r23	; 0x3d
    2e4e:	8e af       	std	Y+62, r24	; 0x3e
    2e50:	9f af       	std	Y+63, r25	; 0x3f
    2e52:	2d 97       	sbiw	r28, 0x0d	; 13
    2e54:	86 e2       	ldi	r24, 0x26	; 38
    2e56:	90 e2       	ldi	r25, 0x20	; 32
    2e58:	0e 94 e2 21 	call	0x43c4	; 0x43c4 <puts>
    2e5c:	88 e3       	ldi	r24, 0x38	; 56
    2e5e:	90 e2       	ldi	r25, 0x20	; 32
    2e60:	0e 94 e2 21 	call	0x43c4	; 0x43c4 <puts>
    2e64:	00 e0       	ldi	r16, 0x00	; 0
    2e66:	41 2c       	mov	r4, r1
    2e68:	51 2c       	mov	r5, r1
    2e6a:	32 01       	movw	r6, r4
    2e6c:	9e 01       	movw	r18, r28
    2e6e:	2f 5f       	subi	r18, 0xFF	; 255
    2e70:	3f 4f       	sbci	r19, 0xFF	; 255
    2e72:	69 01       	movw	r12, r18
    2e74:	0f 2e       	mov	r0, r31
    2e76:	f9 e0       	ldi	r31, 0x09	; 9
    2e78:	2f 2e       	mov	r2, r31
    2e7a:	f0 2d       	mov	r31, r0
    2e7c:	0f 2e       	mov	r0, r31
    2e7e:	f0 e8       	ldi	r31, 0x80	; 128
    2e80:	ef 2e       	mov	r14, r31
    2e82:	f6 e0       	ldi	r31, 0x06	; 6
    2e84:	ff 2e       	mov	r15, r31
    2e86:	f0 2d       	mov	r31, r0
    2e88:	0f 2e       	mov	r0, r31
    2e8a:	f5 e5       	ldi	r31, 0x55	; 85
    2e8c:	3f 2e       	mov	r3, r31
    2e8e:	f0 2d       	mov	r31, r0
    2e90:	30 db       	rcall	.-2464   	; 0x24f2 <get_pressure>
    2e92:	25 96       	adiw	r28, 0x05	; 5
    2e94:	6c af       	std	Y+60, r22	; 0x3c
    2e96:	7d af       	std	Y+61, r23	; 0x3d
    2e98:	8e af       	std	Y+62, r24	; 0x3e
    2e9a:	9f af       	std	Y+63, r25	; 0x3f
    2e9c:	25 97       	sbiw	r28, 0x05	; 5
    2e9e:	22 dd       	rcall	.-1468   	; 0x28e4 <getTemperature>
    2ea0:	25 96       	adiw	r28, 0x05	; 5
    2ea2:	2c ad       	ldd	r18, Y+60	; 0x3c
    2ea4:	3d ad       	ldd	r19, Y+61	; 0x3d
    2ea6:	4e ad       	ldd	r20, Y+62	; 0x3e
    2ea8:	5f ad       	ldd	r21, Y+63	; 0x3f
    2eaa:	25 97       	sbiw	r28, 0x05	; 5
    2eac:	2d 96       	adiw	r28, 0x0d	; 13
    2eae:	6c ad       	ldd	r22, Y+60	; 0x3c
    2eb0:	7d ad       	ldd	r23, Y+61	; 0x3d
    2eb2:	8e ad       	ldd	r24, Y+62	; 0x3e
    2eb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2eb6:	2d 97       	sbiw	r28, 0x0d	; 13
    2eb8:	c0 d9       	rcall	.-3200   	; 0x223a <Get_altitude>
    2eba:	f6 d1       	rcall	.+1004   	; 0x32a8 <__fixsfsi>
    2ebc:	29 96       	adiw	r28, 0x09	; 9
    2ebe:	6c af       	std	Y+60, r22	; 0x3c
    2ec0:	7d af       	std	Y+61, r23	; 0x3d
    2ec2:	8e af       	std	Y+62, r24	; 0x3e
    2ec4:	9f af       	std	Y+63, r25	; 0x3f
    2ec6:	29 97       	sbiw	r28, 0x09	; 9
    2ec8:	22 d2       	rcall	.+1092   	; 0x330e <__floatsisf>
    2eca:	4b 01       	movw	r8, r22
    2ecc:	5c 01       	movw	r10, r24
    2ece:	c3 01       	movw	r24, r6
    2ed0:	b2 01       	movw	r22, r4
    2ed2:	1d d2       	rcall	.+1082   	; 0x330e <__floatsisf>
    2ed4:	20 ed       	ldi	r18, 0xD0	; 208
    2ed6:	3c ec       	ldi	r19, 0xCC	; 204
    2ed8:	4c ec       	ldi	r20, 0xCC	; 204
    2eda:	5d e3       	ldi	r21, 0x3D	; 61
    2edc:	e9 d2       	rcall	.+1490   	; 0x34b0 <__mulsf3>
    2ede:	2b 01       	movw	r4, r22
    2ee0:	3c 01       	movw	r6, r24
    2ee2:	26 e6       	ldi	r18, 0x66	; 102
    2ee4:	36 e6       	ldi	r19, 0x66	; 102
    2ee6:	46 e6       	ldi	r20, 0x66	; 102
    2ee8:	5f e3       	ldi	r21, 0x3F	; 63
    2eea:	c5 01       	movw	r24, r10
    2eec:	b4 01       	movw	r22, r8
    2eee:	e0 d2       	rcall	.+1472   	; 0x34b0 <__mulsf3>
    2ef0:	9b 01       	movw	r18, r22
    2ef2:	ac 01       	movw	r20, r24
    2ef4:	c3 01       	movw	r24, r6
    2ef6:	b2 01       	movw	r22, r4
    2ef8:	0b d1       	rcall	.+534    	; 0x3110 <__addsf3>
    2efa:	d6 d1       	rcall	.+940    	; 0x32a8 <__fixsfsi>
    2efc:	2b 01       	movw	r4, r22
    2efe:	3c 01       	movw	r6, r24
    2f00:	61 2f       	mov	r22, r17
    2f02:	70 e0       	ldi	r23, 0x00	; 0
    2f04:	80 e0       	ldi	r24, 0x00	; 0
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	02 d2       	rcall	.+1028   	; 0x330e <__floatsisf>
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e8       	ldi	r20, 0x80	; 128
    2f10:	5e e3       	ldi	r21, 0x3E	; 62
    2f12:	fe d0       	rcall	.+508    	; 0x3110 <__addsf3>
    2f14:	ce d1       	rcall	.+924    	; 0x32b2 <__fixunssfsi>
    2f16:	16 2f       	mov	r17, r22
    2f18:	61 e8       	ldi	r22, 0x81	; 129
    2f1a:	78 e3       	ldi	r23, 0x38	; 56
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	fe dd       	rcall	.-1028   	; 0x2b1e <__portable_avr_delay_cycles>
    2f22:	80 e0       	ldi	r24, 0x00	; 0
    2f24:	90 e1       	ldi	r25, 0x10	; 16
    2f26:	a2 ea       	ldi	r26, 0xA2	; 162
    2f28:	b5 e4       	ldi	r27, 0x45	; 69
    2f2a:	89 83       	std	Y+1, r24	; 0x01
    2f2c:	9a 83       	std	Y+2, r25	; 0x02
    2f2e:	ab 83       	std	Y+3, r26	; 0x03
    2f30:	bc 83       	std	Y+4, r27	; 0x04
    2f32:	61 2f       	mov	r22, r17
    2f34:	70 e0       	ldi	r23, 0x00	; 0
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	e7 d1       	rcall	.+974    	; 0x330a <__floatunsisf>
    2f3c:	6d 83       	std	Y+5, r22	; 0x05
    2f3e:	7e 83       	std	Y+6, r23	; 0x06
    2f40:	8f 83       	std	Y+7, r24	; 0x07
    2f42:	98 87       	std	Y+8, r25	; 0x08
    2f44:	60 e0       	ldi	r22, 0x00	; 0
    2f46:	70 e0       	ldi	r23, 0x00	; 0
    2f48:	cb 01       	movw	r24, r22
    2f4a:	df d1       	rcall	.+958    	; 0x330a <__floatunsisf>
    2f4c:	69 87       	std	Y+9, r22	; 0x09
    2f4e:	7a 87       	std	Y+10, r23	; 0x0a
    2f50:	8b 87       	std	Y+11, r24	; 0x0b
    2f52:	9c 87       	std	Y+12, r25	; 0x0c
    2f54:	8d 86       	std	Y+13, r8	; 0x0d
    2f56:	9e 86       	std	Y+14, r9	; 0x0e
    2f58:	af 86       	std	Y+15, r10	; 0x0f
    2f5a:	b8 8a       	std	Y+16, r11	; 0x10
    2f5c:	25 96       	adiw	r28, 0x05	; 5
    2f5e:	6c ad       	ldd	r22, Y+60	; 0x3c
    2f60:	7d ad       	ldd	r23, Y+61	; 0x3d
    2f62:	8e ad       	ldd	r24, Y+62	; 0x3e
    2f64:	9f ad       	ldd	r25, Y+63	; 0x3f
    2f66:	25 97       	sbiw	r28, 0x05	; 5
    2f68:	d0 d1       	rcall	.+928    	; 0x330a <__floatunsisf>
    2f6a:	69 8b       	std	Y+17, r22	; 0x11
    2f6c:	7a 8b       	std	Y+18, r23	; 0x12
    2f6e:	8b 8b       	std	Y+19, r24	; 0x13
    2f70:	9c 8b       	std	Y+20, r25	; 0x14
    2f72:	60 91 d1 20 	lds	r22, 0x20D1	; 0x8020d1 <TEMP>
    2f76:	70 91 d2 20 	lds	r23, 0x20D2	; 0x8020d2 <TEMP+0x1>
    2f7a:	80 91 d3 20 	lds	r24, 0x20D3	; 0x8020d3 <TEMP+0x2>
    2f7e:	90 91 d4 20 	lds	r25, 0x20D4	; 0x8020d4 <TEMP+0x3>
    2f82:	c5 d1       	rcall	.+906    	; 0x330e <__floatsisf>
    2f84:	6d 8b       	std	Y+21, r22	; 0x15
    2f86:	7e 8b       	std	Y+22, r23	; 0x16
    2f88:	8f 8b       	std	Y+23, r24	; 0x17
    2f8a:	98 8f       	std	Y+24, r25	; 0x18
    2f8c:	19 8e       	std	Y+25, r1	; 0x19
    2f8e:	1a 8e       	std	Y+26, r1	; 0x1a
    2f90:	1b 8e       	std	Y+27, r1	; 0x1b
    2f92:	1c 8e       	std	Y+28, r1	; 0x1c
    2f94:	60 e0       	ldi	r22, 0x00	; 0
    2f96:	70 e0       	ldi	r23, 0x00	; 0
    2f98:	cb 01       	movw	r24, r22
    2f9a:	b7 d1       	rcall	.+878    	; 0x330a <__floatunsisf>
    2f9c:	6d 8f       	std	Y+29, r22	; 0x1d
    2f9e:	7e 8f       	std	Y+30, r23	; 0x1e
    2fa0:	8f 8f       	std	Y+31, r24	; 0x1f
    2fa2:	98 a3       	std	Y+32, r25	; 0x20
    2fa4:	60 e0       	ldi	r22, 0x00	; 0
    2fa6:	70 e0       	ldi	r23, 0x00	; 0
    2fa8:	cb 01       	movw	r24, r22
    2faa:	af d1       	rcall	.+862    	; 0x330a <__floatunsisf>
    2fac:	69 a3       	std	Y+33, r22	; 0x21
    2fae:	7a a3       	std	Y+34, r23	; 0x22
    2fb0:	8b a3       	std	Y+35, r24	; 0x23
    2fb2:	9c a3       	std	Y+36, r25	; 0x24
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	cb 01       	movw	r24, r22
    2fba:	a7 d1       	rcall	.+846    	; 0x330a <__floatunsisf>
    2fbc:	6d a3       	std	Y+37, r22	; 0x25
    2fbe:	7e a3       	std	Y+38, r23	; 0x26
    2fc0:	8f a3       	std	Y+39, r24	; 0x27
    2fc2:	98 a7       	std	Y+40, r25	; 0x28
    2fc4:	60 e0       	ldi	r22, 0x00	; 0
    2fc6:	70 e0       	ldi	r23, 0x00	; 0
    2fc8:	cb 01       	movw	r24, r22
    2fca:	9f d1       	rcall	.+830    	; 0x330a <__floatunsisf>
    2fcc:	69 a7       	std	Y+41, r22	; 0x29
    2fce:	7a a7       	std	Y+42, r23	; 0x2a
    2fd0:	8b a7       	std	Y+43, r24	; 0x2b
    2fd2:	9c a7       	std	Y+44, r25	; 0x2c
    2fd4:	60 e0       	ldi	r22, 0x00	; 0
    2fd6:	70 e0       	ldi	r23, 0x00	; 0
    2fd8:	cb 01       	movw	r24, r22
    2fda:	97 d1       	rcall	.+814    	; 0x330a <__floatunsisf>
    2fdc:	6d a7       	std	Y+45, r22	; 0x2d
    2fde:	7e a7       	std	Y+46, r23	; 0x2e
    2fe0:	8f a7       	std	Y+47, r24	; 0x2f
    2fe2:	98 ab       	std	Y+48, r25	; 0x30
    2fe4:	19 aa       	std	Y+49, r1	; 0x31
    2fe6:	1a aa       	std	Y+50, r1	; 0x32
    2fe8:	1b aa       	std	Y+51, r1	; 0x33
    2fea:	1c aa       	std	Y+52, r1	; 0x34
    2fec:	1d aa       	std	Y+53, r1	; 0x35
    2fee:	1e aa       	std	Y+54, r1	; 0x36
    2ff0:	1f aa       	std	Y+55, r1	; 0x37
    2ff2:	18 ae       	std	Y+56, r1	; 0x38
    2ff4:	19 ae       	std	Y+57, r1	; 0x39
    2ff6:	1a ae       	std	Y+58, r1	; 0x3a
    2ff8:	1b ae       	std	Y+59, r1	; 0x3b
    2ffa:	1c ae       	std	Y+60, r1	; 0x3c
    2ffc:	60 2f       	mov	r22, r16
    2ffe:	70 e0       	ldi	r23, 0x00	; 0
    3000:	80 e0       	ldi	r24, 0x00	; 0
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	82 d1       	rcall	.+772    	; 0x330a <__floatunsisf>
    3006:	21 96       	adiw	r28, 0x01	; 1
    3008:	6c af       	std	Y+60, r22	; 0x3c
    300a:	7d af       	std	Y+61, r23	; 0x3d
    300c:	8e af       	std	Y+62, r24	; 0x3e
    300e:	9f af       	std	Y+63, r25	; 0x3f
    3010:	21 97       	sbiw	r28, 0x01	; 1
    3012:	df 92       	push	r13
    3014:	cf 92       	push	r12
    3016:	2f 92       	push	r2
    3018:	90 ea       	ldi	r25, 0xA0	; 160
    301a:	9f 93       	push	r25
    301c:	45 dd       	rcall	.-1398   	; 0x2aa8 <usart_tx>
    301e:	d7 01       	movw	r26, r14
    3020:	11 96       	adiw	r26, 0x01	; 1
    3022:	3c 92       	st	X, r3
    3024:	11 97       	sbiw	r26, 0x01	; 1
    3026:	15 96       	adiw	r26, 0x05	; 5
    3028:	3c 92       	st	X, r3
    302a:	15 97       	sbiw	r26, 0x05	; 5
    302c:	0f 90       	pop	r0
    302e:	0f 90       	pop	r0
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	01 11       	cpse	r16, r1
    3036:	2a c0       	rjmp	.+84     	; 0x308c <main+0x298>
    3038:	11 96       	adiw	r26, 0x01	; 1
    303a:	3c 92       	st	X, r3
    303c:	11 97       	sbiw	r26, 0x01	; 1
    303e:	15 96       	adiw	r26, 0x05	; 5
    3040:	3c 92       	st	X, r3
    3042:	b8 e0       	ldi	r27, 0x08	; 8
    3044:	b0 93 04 06 	sts	0x0604, r27	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    3048:	d3 01       	movw	r26, r6
    304a:	c2 01       	movw	r24, r4
    304c:	29 96       	adiw	r28, 0x09	; 9
    304e:	2c ad       	ldd	r18, Y+60	; 0x3c
    3050:	3d ad       	ldd	r19, Y+61	; 0x3d
    3052:	4e ad       	ldd	r20, Y+62	; 0x3e
    3054:	5f ad       	ldd	r21, Y+63	; 0x3f
    3056:	29 97       	sbiw	r28, 0x09	; 9
    3058:	82 1b       	sub	r24, r18
    305a:	93 0b       	sbc	r25, r19
    305c:	a4 0b       	sbc	r26, r20
    305e:	b5 0b       	sbc	r27, r21
    3060:	0a f0       	brmi	.+2      	; 0x3064 <main+0x270>
    3062:	16 cf       	rjmp	.-468    	; 0x2e90 <main+0x9c>
    3064:	d3 01       	movw	r26, r6
    3066:	c2 01       	movw	r24, r4
    3068:	89 55       	subi	r24, 0x59	; 89
    306a:	92 40       	sbci	r25, 0x02	; 2
    306c:	a1 09       	sbc	r26, r1
    306e:	b1 09       	sbc	r27, r1
    3070:	87 3c       	cpi	r24, 0xC7	; 199
    3072:	91 05       	cpc	r25, r1
    3074:	a1 05       	cpc	r26, r1
    3076:	b1 05       	cpc	r27, r1
    3078:	08 f0       	brcs	.+2      	; 0x307c <main+0x288>
    307a:	0a cf       	rjmp	.-492    	; 0x2e90 <main+0x9c>
    307c:	81 e0       	ldi	r24, 0x01	; 1
    307e:	d7 01       	movw	r26, r14
    3080:	11 96       	adiw	r26, 0x01	; 1
    3082:	8c 93       	st	X, r24
    3084:	11 97       	sbiw	r26, 0x01	; 1
    3086:	15 96       	adiw	r26, 0x05	; 5
    3088:	8c 93       	st	X, r24
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <main+0x29c>
    308c:	01 30       	cpi	r16, 0x01	; 1
    308e:	a9 f4       	brne	.+42     	; 0x30ba <main+0x2c6>
    3090:	86 e4       	ldi	r24, 0x46	; 70
    3092:	90 e2       	ldi	r25, 0x20	; 32
    3094:	0e 94 e2 21 	call	0x43c4	; 0x43c4 <puts>
    3098:	bc e2       	ldi	r27, 0x2C	; 44
    309a:	4b 16       	cp	r4, r27
    309c:	b1 e0       	ldi	r27, 0x01	; 1
    309e:	5b 06       	cpc	r5, r27
    30a0:	61 04       	cpc	r6, r1
    30a2:	71 04       	cpc	r7, r1
    30a4:	74 f5       	brge	.+92     	; 0x3102 <main+0x30e>
    30a6:	82 e0       	ldi	r24, 0x02	; 2
    30a8:	f7 01       	movw	r30, r14
    30aa:	81 83       	std	Z+1, r24	; 0x01
    30ac:	85 83       	std	Z+5, r24	; 0x05
    30ae:	f0 e8       	ldi	r31, 0x80	; 128
    30b0:	f0 93 01 06 	sts	0x0601, r31	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    30b4:	f0 93 05 06 	sts	0x0605, r31	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    30b8:	03 c0       	rjmp	.+6      	; 0x30c0 <main+0x2cc>
    30ba:	02 30       	cpi	r16, 0x02	; 2
    30bc:	09 f0       	breq	.+2      	; 0x30c0 <main+0x2cc>
    30be:	e8 ce       	rjmp	.-560    	; 0x2e90 <main+0x9c>
    30c0:	86 e5       	ldi	r24, 0x56	; 86
    30c2:	90 e2       	ldi	r25, 0x20	; 32
    30c4:	0e 94 e2 21 	call	0x43c4	; 0x43c4 <puts>
    30c8:	d3 01       	movw	r26, r6
    30ca:	c2 01       	movw	r24, r4
    30cc:	29 96       	adiw	r28, 0x09	; 9
    30ce:	2c ad       	ldd	r18, Y+60	; 0x3c
    30d0:	3d ad       	ldd	r19, Y+61	; 0x3d
    30d2:	4e ad       	ldd	r20, Y+62	; 0x3e
    30d4:	5f ad       	ldd	r21, Y+63	; 0x3f
    30d6:	29 97       	sbiw	r28, 0x09	; 9
    30d8:	82 1b       	sub	r24, r18
    30da:	93 0b       	sbc	r25, r19
    30dc:	a4 0b       	sbc	r26, r20
    30de:	b5 0b       	sbc	r27, r21
    30e0:	18 16       	cp	r1, r24
    30e2:	19 06       	cpc	r1, r25
    30e4:	1a 06       	cpc	r1, r26
    30e6:	1b 06       	cpc	r1, r27
    30e8:	74 f0       	brlt	.+28     	; 0x3106 <main+0x312>
    30ea:	24 36       	cpi	r18, 0x64	; 100
    30ec:	31 05       	cpc	r19, r1
    30ee:	41 05       	cpc	r20, r1
    30f0:	51 05       	cpc	r21, r1
    30f2:	5c f4       	brge	.+22     	; 0x310a <main+0x316>
    30f4:	38 e0       	ldi	r19, 0x08	; 8
    30f6:	30 93 01 06 	sts	0x0601, r19	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    30fa:	30 93 05 06 	sts	0x0605, r19	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    30fe:	03 e0       	ldi	r16, 0x03	; 3
    3100:	c7 ce       	rjmp	.-626    	; 0x2e90 <main+0x9c>
    3102:	01 e0       	ldi	r16, 0x01	; 1
    3104:	c5 ce       	rjmp	.-630    	; 0x2e90 <main+0x9c>
    3106:	02 e0       	ldi	r16, 0x02	; 2
    3108:	c3 ce       	rjmp	.-634    	; 0x2e90 <main+0x9c>
    310a:	02 e0       	ldi	r16, 0x02	; 2
    310c:	c1 ce       	rjmp	.-638    	; 0x2e90 <main+0x9c>

0000310e <__subsf3>:
    310e:	50 58       	subi	r21, 0x80	; 128

00003110 <__addsf3>:
    3110:	bb 27       	eor	r27, r27
    3112:	aa 27       	eor	r26, r26
    3114:	0e d0       	rcall	.+28     	; 0x3132 <__addsf3x>
    3116:	4d c1       	rjmp	.+666    	; 0x33b2 <__fp_round>
    3118:	3e d1       	rcall	.+636    	; 0x3396 <__fp_pscA>
    311a:	30 f0       	brcs	.+12     	; 0x3128 <__addsf3+0x18>
    311c:	43 d1       	rcall	.+646    	; 0x33a4 <__fp_pscB>
    311e:	20 f0       	brcs	.+8      	; 0x3128 <__addsf3+0x18>
    3120:	31 f4       	brne	.+12     	; 0x312e <__addsf3+0x1e>
    3122:	9f 3f       	cpi	r25, 0xFF	; 255
    3124:	11 f4       	brne	.+4      	; 0x312a <__addsf3+0x1a>
    3126:	1e f4       	brtc	.+6      	; 0x312e <__addsf3+0x1e>
    3128:	33 c1       	rjmp	.+614    	; 0x3390 <__fp_nan>
    312a:	0e f4       	brtc	.+2      	; 0x312e <__addsf3+0x1e>
    312c:	e0 95       	com	r30
    312e:	e7 fb       	bst	r30, 7
    3130:	29 c1       	rjmp	.+594    	; 0x3384 <__fp_inf>

00003132 <__addsf3x>:
    3132:	e9 2f       	mov	r30, r25
    3134:	4f d1       	rcall	.+670    	; 0x33d4 <__fp_split3>
    3136:	80 f3       	brcs	.-32     	; 0x3118 <__addsf3+0x8>
    3138:	ba 17       	cp	r27, r26
    313a:	62 07       	cpc	r22, r18
    313c:	73 07       	cpc	r23, r19
    313e:	84 07       	cpc	r24, r20
    3140:	95 07       	cpc	r25, r21
    3142:	18 f0       	brcs	.+6      	; 0x314a <__addsf3x+0x18>
    3144:	71 f4       	brne	.+28     	; 0x3162 <__addsf3x+0x30>
    3146:	9e f5       	brtc	.+102    	; 0x31ae <__addsf3x+0x7c>
    3148:	67 c1       	rjmp	.+718    	; 0x3418 <__fp_zero>
    314a:	0e f4       	brtc	.+2      	; 0x314e <__addsf3x+0x1c>
    314c:	e0 95       	com	r30
    314e:	0b 2e       	mov	r0, r27
    3150:	ba 2f       	mov	r27, r26
    3152:	a0 2d       	mov	r26, r0
    3154:	0b 01       	movw	r0, r22
    3156:	b9 01       	movw	r22, r18
    3158:	90 01       	movw	r18, r0
    315a:	0c 01       	movw	r0, r24
    315c:	ca 01       	movw	r24, r20
    315e:	a0 01       	movw	r20, r0
    3160:	11 24       	eor	r1, r1
    3162:	ff 27       	eor	r31, r31
    3164:	59 1b       	sub	r21, r25
    3166:	99 f0       	breq	.+38     	; 0x318e <__addsf3x+0x5c>
    3168:	59 3f       	cpi	r21, 0xF9	; 249
    316a:	50 f4       	brcc	.+20     	; 0x3180 <__addsf3x+0x4e>
    316c:	50 3e       	cpi	r21, 0xE0	; 224
    316e:	68 f1       	brcs	.+90     	; 0x31ca <__addsf3x+0x98>
    3170:	1a 16       	cp	r1, r26
    3172:	f0 40       	sbci	r31, 0x00	; 0
    3174:	a2 2f       	mov	r26, r18
    3176:	23 2f       	mov	r18, r19
    3178:	34 2f       	mov	r19, r20
    317a:	44 27       	eor	r20, r20
    317c:	58 5f       	subi	r21, 0xF8	; 248
    317e:	f3 cf       	rjmp	.-26     	; 0x3166 <__addsf3x+0x34>
    3180:	46 95       	lsr	r20
    3182:	37 95       	ror	r19
    3184:	27 95       	ror	r18
    3186:	a7 95       	ror	r26
    3188:	f0 40       	sbci	r31, 0x00	; 0
    318a:	53 95       	inc	r21
    318c:	c9 f7       	brne	.-14     	; 0x3180 <__addsf3x+0x4e>
    318e:	7e f4       	brtc	.+30     	; 0x31ae <__addsf3x+0x7c>
    3190:	1f 16       	cp	r1, r31
    3192:	ba 0b       	sbc	r27, r26
    3194:	62 0b       	sbc	r22, r18
    3196:	73 0b       	sbc	r23, r19
    3198:	84 0b       	sbc	r24, r20
    319a:	ba f0       	brmi	.+46     	; 0x31ca <__addsf3x+0x98>
    319c:	91 50       	subi	r25, 0x01	; 1
    319e:	a1 f0       	breq	.+40     	; 0x31c8 <__addsf3x+0x96>
    31a0:	ff 0f       	add	r31, r31
    31a2:	bb 1f       	adc	r27, r27
    31a4:	66 1f       	adc	r22, r22
    31a6:	77 1f       	adc	r23, r23
    31a8:	88 1f       	adc	r24, r24
    31aa:	c2 f7       	brpl	.-16     	; 0x319c <__addsf3x+0x6a>
    31ac:	0e c0       	rjmp	.+28     	; 0x31ca <__addsf3x+0x98>
    31ae:	ba 0f       	add	r27, r26
    31b0:	62 1f       	adc	r22, r18
    31b2:	73 1f       	adc	r23, r19
    31b4:	84 1f       	adc	r24, r20
    31b6:	48 f4       	brcc	.+18     	; 0x31ca <__addsf3x+0x98>
    31b8:	87 95       	ror	r24
    31ba:	77 95       	ror	r23
    31bc:	67 95       	ror	r22
    31be:	b7 95       	ror	r27
    31c0:	f7 95       	ror	r31
    31c2:	9e 3f       	cpi	r25, 0xFE	; 254
    31c4:	08 f0       	brcs	.+2      	; 0x31c8 <__addsf3x+0x96>
    31c6:	b3 cf       	rjmp	.-154    	; 0x312e <__addsf3+0x1e>
    31c8:	93 95       	inc	r25
    31ca:	88 0f       	add	r24, r24
    31cc:	08 f0       	brcs	.+2      	; 0x31d0 <__addsf3x+0x9e>
    31ce:	99 27       	eor	r25, r25
    31d0:	ee 0f       	add	r30, r30
    31d2:	97 95       	ror	r25
    31d4:	87 95       	ror	r24
    31d6:	08 95       	ret

000031d8 <__divsf3>:
    31d8:	0c d0       	rcall	.+24     	; 0x31f2 <__divsf3x>
    31da:	eb c0       	rjmp	.+470    	; 0x33b2 <__fp_round>
    31dc:	e3 d0       	rcall	.+454    	; 0x33a4 <__fp_pscB>
    31de:	40 f0       	brcs	.+16     	; 0x31f0 <__divsf3+0x18>
    31e0:	da d0       	rcall	.+436    	; 0x3396 <__fp_pscA>
    31e2:	30 f0       	brcs	.+12     	; 0x31f0 <__divsf3+0x18>
    31e4:	21 f4       	brne	.+8      	; 0x31ee <__divsf3+0x16>
    31e6:	5f 3f       	cpi	r21, 0xFF	; 255
    31e8:	19 f0       	breq	.+6      	; 0x31f0 <__divsf3+0x18>
    31ea:	cc c0       	rjmp	.+408    	; 0x3384 <__fp_inf>
    31ec:	51 11       	cpse	r21, r1
    31ee:	15 c1       	rjmp	.+554    	; 0x341a <__fp_szero>
    31f0:	cf c0       	rjmp	.+414    	; 0x3390 <__fp_nan>

000031f2 <__divsf3x>:
    31f2:	f0 d0       	rcall	.+480    	; 0x33d4 <__fp_split3>
    31f4:	98 f3       	brcs	.-26     	; 0x31dc <__divsf3+0x4>

000031f6 <__divsf3_pse>:
    31f6:	99 23       	and	r25, r25
    31f8:	c9 f3       	breq	.-14     	; 0x31ec <__divsf3+0x14>
    31fa:	55 23       	and	r21, r21
    31fc:	b1 f3       	breq	.-20     	; 0x31ea <__divsf3+0x12>
    31fe:	95 1b       	sub	r25, r21
    3200:	55 0b       	sbc	r21, r21
    3202:	bb 27       	eor	r27, r27
    3204:	aa 27       	eor	r26, r26
    3206:	62 17       	cp	r22, r18
    3208:	73 07       	cpc	r23, r19
    320a:	84 07       	cpc	r24, r20
    320c:	38 f0       	brcs	.+14     	; 0x321c <__divsf3_pse+0x26>
    320e:	9f 5f       	subi	r25, 0xFF	; 255
    3210:	5f 4f       	sbci	r21, 0xFF	; 255
    3212:	22 0f       	add	r18, r18
    3214:	33 1f       	adc	r19, r19
    3216:	44 1f       	adc	r20, r20
    3218:	aa 1f       	adc	r26, r26
    321a:	a9 f3       	breq	.-22     	; 0x3206 <__divsf3_pse+0x10>
    321c:	33 d0       	rcall	.+102    	; 0x3284 <__divsf3_pse+0x8e>
    321e:	0e 2e       	mov	r0, r30
    3220:	3a f0       	brmi	.+14     	; 0x3230 <__divsf3_pse+0x3a>
    3222:	e0 e8       	ldi	r30, 0x80	; 128
    3224:	30 d0       	rcall	.+96     	; 0x3286 <__divsf3_pse+0x90>
    3226:	91 50       	subi	r25, 0x01	; 1
    3228:	50 40       	sbci	r21, 0x00	; 0
    322a:	e6 95       	lsr	r30
    322c:	00 1c       	adc	r0, r0
    322e:	ca f7       	brpl	.-14     	; 0x3222 <__divsf3_pse+0x2c>
    3230:	29 d0       	rcall	.+82     	; 0x3284 <__divsf3_pse+0x8e>
    3232:	fe 2f       	mov	r31, r30
    3234:	27 d0       	rcall	.+78     	; 0x3284 <__divsf3_pse+0x8e>
    3236:	66 0f       	add	r22, r22
    3238:	77 1f       	adc	r23, r23
    323a:	88 1f       	adc	r24, r24
    323c:	bb 1f       	adc	r27, r27
    323e:	26 17       	cp	r18, r22
    3240:	37 07       	cpc	r19, r23
    3242:	48 07       	cpc	r20, r24
    3244:	ab 07       	cpc	r26, r27
    3246:	b0 e8       	ldi	r27, 0x80	; 128
    3248:	09 f0       	breq	.+2      	; 0x324c <__divsf3_pse+0x56>
    324a:	bb 0b       	sbc	r27, r27
    324c:	80 2d       	mov	r24, r0
    324e:	bf 01       	movw	r22, r30
    3250:	ff 27       	eor	r31, r31
    3252:	93 58       	subi	r25, 0x83	; 131
    3254:	5f 4f       	sbci	r21, 0xFF	; 255
    3256:	2a f0       	brmi	.+10     	; 0x3262 <__divsf3_pse+0x6c>
    3258:	9e 3f       	cpi	r25, 0xFE	; 254
    325a:	51 05       	cpc	r21, r1
    325c:	68 f0       	brcs	.+26     	; 0x3278 <__divsf3_pse+0x82>
    325e:	92 c0       	rjmp	.+292    	; 0x3384 <__fp_inf>
    3260:	dc c0       	rjmp	.+440    	; 0x341a <__fp_szero>
    3262:	5f 3f       	cpi	r21, 0xFF	; 255
    3264:	ec f3       	brlt	.-6      	; 0x3260 <__divsf3_pse+0x6a>
    3266:	98 3e       	cpi	r25, 0xE8	; 232
    3268:	dc f3       	brlt	.-10     	; 0x3260 <__divsf3_pse+0x6a>
    326a:	86 95       	lsr	r24
    326c:	77 95       	ror	r23
    326e:	67 95       	ror	r22
    3270:	b7 95       	ror	r27
    3272:	f7 95       	ror	r31
    3274:	9f 5f       	subi	r25, 0xFF	; 255
    3276:	c9 f7       	brne	.-14     	; 0x326a <__divsf3_pse+0x74>
    3278:	88 0f       	add	r24, r24
    327a:	91 1d       	adc	r25, r1
    327c:	96 95       	lsr	r25
    327e:	87 95       	ror	r24
    3280:	97 f9       	bld	r25, 7
    3282:	08 95       	ret
    3284:	e1 e0       	ldi	r30, 0x01	; 1
    3286:	66 0f       	add	r22, r22
    3288:	77 1f       	adc	r23, r23
    328a:	88 1f       	adc	r24, r24
    328c:	bb 1f       	adc	r27, r27
    328e:	62 17       	cp	r22, r18
    3290:	73 07       	cpc	r23, r19
    3292:	84 07       	cpc	r24, r20
    3294:	ba 07       	cpc	r27, r26
    3296:	20 f0       	brcs	.+8      	; 0x32a0 <__divsf3_pse+0xaa>
    3298:	62 1b       	sub	r22, r18
    329a:	73 0b       	sbc	r23, r19
    329c:	84 0b       	sbc	r24, r20
    329e:	ba 0b       	sbc	r27, r26
    32a0:	ee 1f       	adc	r30, r30
    32a2:	88 f7       	brcc	.-30     	; 0x3286 <__divsf3_pse+0x90>
    32a4:	e0 95       	com	r30
    32a6:	08 95       	ret

000032a8 <__fixsfsi>:
    32a8:	04 d0       	rcall	.+8      	; 0x32b2 <__fixunssfsi>
    32aa:	68 94       	set
    32ac:	b1 11       	cpse	r27, r1
    32ae:	b5 c0       	rjmp	.+362    	; 0x341a <__fp_szero>
    32b0:	08 95       	ret

000032b2 <__fixunssfsi>:
    32b2:	98 d0       	rcall	.+304    	; 0x33e4 <__fp_splitA>
    32b4:	88 f0       	brcs	.+34     	; 0x32d8 <__fixunssfsi+0x26>
    32b6:	9f 57       	subi	r25, 0x7F	; 127
    32b8:	90 f0       	brcs	.+36     	; 0x32de <__fixunssfsi+0x2c>
    32ba:	b9 2f       	mov	r27, r25
    32bc:	99 27       	eor	r25, r25
    32be:	b7 51       	subi	r27, 0x17	; 23
    32c0:	a0 f0       	brcs	.+40     	; 0x32ea <__fixunssfsi+0x38>
    32c2:	d1 f0       	breq	.+52     	; 0x32f8 <__fixunssfsi+0x46>
    32c4:	66 0f       	add	r22, r22
    32c6:	77 1f       	adc	r23, r23
    32c8:	88 1f       	adc	r24, r24
    32ca:	99 1f       	adc	r25, r25
    32cc:	1a f0       	brmi	.+6      	; 0x32d4 <__fixunssfsi+0x22>
    32ce:	ba 95       	dec	r27
    32d0:	c9 f7       	brne	.-14     	; 0x32c4 <__fixunssfsi+0x12>
    32d2:	12 c0       	rjmp	.+36     	; 0x32f8 <__fixunssfsi+0x46>
    32d4:	b1 30       	cpi	r27, 0x01	; 1
    32d6:	81 f0       	breq	.+32     	; 0x32f8 <__fixunssfsi+0x46>
    32d8:	9f d0       	rcall	.+318    	; 0x3418 <__fp_zero>
    32da:	b1 e0       	ldi	r27, 0x01	; 1
    32dc:	08 95       	ret
    32de:	9c c0       	rjmp	.+312    	; 0x3418 <__fp_zero>
    32e0:	67 2f       	mov	r22, r23
    32e2:	78 2f       	mov	r23, r24
    32e4:	88 27       	eor	r24, r24
    32e6:	b8 5f       	subi	r27, 0xF8	; 248
    32e8:	39 f0       	breq	.+14     	; 0x32f8 <__fixunssfsi+0x46>
    32ea:	b9 3f       	cpi	r27, 0xF9	; 249
    32ec:	cc f3       	brlt	.-14     	; 0x32e0 <__fixunssfsi+0x2e>
    32ee:	86 95       	lsr	r24
    32f0:	77 95       	ror	r23
    32f2:	67 95       	ror	r22
    32f4:	b3 95       	inc	r27
    32f6:	d9 f7       	brne	.-10     	; 0x32ee <__fixunssfsi+0x3c>
    32f8:	3e f4       	brtc	.+14     	; 0x3308 <__fixunssfsi+0x56>
    32fa:	90 95       	com	r25
    32fc:	80 95       	com	r24
    32fe:	70 95       	com	r23
    3300:	61 95       	neg	r22
    3302:	7f 4f       	sbci	r23, 0xFF	; 255
    3304:	8f 4f       	sbci	r24, 0xFF	; 255
    3306:	9f 4f       	sbci	r25, 0xFF	; 255
    3308:	08 95       	ret

0000330a <__floatunsisf>:
    330a:	e8 94       	clt
    330c:	09 c0       	rjmp	.+18     	; 0x3320 <__floatsisf+0x12>

0000330e <__floatsisf>:
    330e:	97 fb       	bst	r25, 7
    3310:	3e f4       	brtc	.+14     	; 0x3320 <__floatsisf+0x12>
    3312:	90 95       	com	r25
    3314:	80 95       	com	r24
    3316:	70 95       	com	r23
    3318:	61 95       	neg	r22
    331a:	7f 4f       	sbci	r23, 0xFF	; 255
    331c:	8f 4f       	sbci	r24, 0xFF	; 255
    331e:	9f 4f       	sbci	r25, 0xFF	; 255
    3320:	99 23       	and	r25, r25
    3322:	a9 f0       	breq	.+42     	; 0x334e <__floatsisf+0x40>
    3324:	f9 2f       	mov	r31, r25
    3326:	96 e9       	ldi	r25, 0x96	; 150
    3328:	bb 27       	eor	r27, r27
    332a:	93 95       	inc	r25
    332c:	f6 95       	lsr	r31
    332e:	87 95       	ror	r24
    3330:	77 95       	ror	r23
    3332:	67 95       	ror	r22
    3334:	b7 95       	ror	r27
    3336:	f1 11       	cpse	r31, r1
    3338:	f8 cf       	rjmp	.-16     	; 0x332a <__floatsisf+0x1c>
    333a:	fa f4       	brpl	.+62     	; 0x337a <__floatsisf+0x6c>
    333c:	bb 0f       	add	r27, r27
    333e:	11 f4       	brne	.+4      	; 0x3344 <__floatsisf+0x36>
    3340:	60 ff       	sbrs	r22, 0
    3342:	1b c0       	rjmp	.+54     	; 0x337a <__floatsisf+0x6c>
    3344:	6f 5f       	subi	r22, 0xFF	; 255
    3346:	7f 4f       	sbci	r23, 0xFF	; 255
    3348:	8f 4f       	sbci	r24, 0xFF	; 255
    334a:	9f 4f       	sbci	r25, 0xFF	; 255
    334c:	16 c0       	rjmp	.+44     	; 0x337a <__floatsisf+0x6c>
    334e:	88 23       	and	r24, r24
    3350:	11 f0       	breq	.+4      	; 0x3356 <__floatsisf+0x48>
    3352:	96 e9       	ldi	r25, 0x96	; 150
    3354:	11 c0       	rjmp	.+34     	; 0x3378 <__floatsisf+0x6a>
    3356:	77 23       	and	r23, r23
    3358:	21 f0       	breq	.+8      	; 0x3362 <__floatsisf+0x54>
    335a:	9e e8       	ldi	r25, 0x8E	; 142
    335c:	87 2f       	mov	r24, r23
    335e:	76 2f       	mov	r23, r22
    3360:	05 c0       	rjmp	.+10     	; 0x336c <__floatsisf+0x5e>
    3362:	66 23       	and	r22, r22
    3364:	71 f0       	breq	.+28     	; 0x3382 <__floatsisf+0x74>
    3366:	96 e8       	ldi	r25, 0x86	; 134
    3368:	86 2f       	mov	r24, r22
    336a:	70 e0       	ldi	r23, 0x00	; 0
    336c:	60 e0       	ldi	r22, 0x00	; 0
    336e:	2a f0       	brmi	.+10     	; 0x337a <__floatsisf+0x6c>
    3370:	9a 95       	dec	r25
    3372:	66 0f       	add	r22, r22
    3374:	77 1f       	adc	r23, r23
    3376:	88 1f       	adc	r24, r24
    3378:	da f7       	brpl	.-10     	; 0x3370 <__floatsisf+0x62>
    337a:	88 0f       	add	r24, r24
    337c:	96 95       	lsr	r25
    337e:	87 95       	ror	r24
    3380:	97 f9       	bld	r25, 7
    3382:	08 95       	ret

00003384 <__fp_inf>:
    3384:	97 f9       	bld	r25, 7
    3386:	9f 67       	ori	r25, 0x7F	; 127
    3388:	80 e8       	ldi	r24, 0x80	; 128
    338a:	70 e0       	ldi	r23, 0x00	; 0
    338c:	60 e0       	ldi	r22, 0x00	; 0
    338e:	08 95       	ret

00003390 <__fp_nan>:
    3390:	9f ef       	ldi	r25, 0xFF	; 255
    3392:	80 ec       	ldi	r24, 0xC0	; 192
    3394:	08 95       	ret

00003396 <__fp_pscA>:
    3396:	00 24       	eor	r0, r0
    3398:	0a 94       	dec	r0
    339a:	16 16       	cp	r1, r22
    339c:	17 06       	cpc	r1, r23
    339e:	18 06       	cpc	r1, r24
    33a0:	09 06       	cpc	r0, r25
    33a2:	08 95       	ret

000033a4 <__fp_pscB>:
    33a4:	00 24       	eor	r0, r0
    33a6:	0a 94       	dec	r0
    33a8:	12 16       	cp	r1, r18
    33aa:	13 06       	cpc	r1, r19
    33ac:	14 06       	cpc	r1, r20
    33ae:	05 06       	cpc	r0, r21
    33b0:	08 95       	ret

000033b2 <__fp_round>:
    33b2:	09 2e       	mov	r0, r25
    33b4:	03 94       	inc	r0
    33b6:	00 0c       	add	r0, r0
    33b8:	11 f4       	brne	.+4      	; 0x33be <__fp_round+0xc>
    33ba:	88 23       	and	r24, r24
    33bc:	52 f0       	brmi	.+20     	; 0x33d2 <__fp_round+0x20>
    33be:	bb 0f       	add	r27, r27
    33c0:	40 f4       	brcc	.+16     	; 0x33d2 <__fp_round+0x20>
    33c2:	bf 2b       	or	r27, r31
    33c4:	11 f4       	brne	.+4      	; 0x33ca <__fp_round+0x18>
    33c6:	60 ff       	sbrs	r22, 0
    33c8:	04 c0       	rjmp	.+8      	; 0x33d2 <__fp_round+0x20>
    33ca:	6f 5f       	subi	r22, 0xFF	; 255
    33cc:	7f 4f       	sbci	r23, 0xFF	; 255
    33ce:	8f 4f       	sbci	r24, 0xFF	; 255
    33d0:	9f 4f       	sbci	r25, 0xFF	; 255
    33d2:	08 95       	ret

000033d4 <__fp_split3>:
    33d4:	57 fd       	sbrc	r21, 7
    33d6:	90 58       	subi	r25, 0x80	; 128
    33d8:	44 0f       	add	r20, r20
    33da:	55 1f       	adc	r21, r21
    33dc:	59 f0       	breq	.+22     	; 0x33f4 <__fp_splitA+0x10>
    33de:	5f 3f       	cpi	r21, 0xFF	; 255
    33e0:	71 f0       	breq	.+28     	; 0x33fe <__fp_splitA+0x1a>
    33e2:	47 95       	ror	r20

000033e4 <__fp_splitA>:
    33e4:	88 0f       	add	r24, r24
    33e6:	97 fb       	bst	r25, 7
    33e8:	99 1f       	adc	r25, r25
    33ea:	61 f0       	breq	.+24     	; 0x3404 <__fp_splitA+0x20>
    33ec:	9f 3f       	cpi	r25, 0xFF	; 255
    33ee:	79 f0       	breq	.+30     	; 0x340e <__fp_splitA+0x2a>
    33f0:	87 95       	ror	r24
    33f2:	08 95       	ret
    33f4:	12 16       	cp	r1, r18
    33f6:	13 06       	cpc	r1, r19
    33f8:	14 06       	cpc	r1, r20
    33fa:	55 1f       	adc	r21, r21
    33fc:	f2 cf       	rjmp	.-28     	; 0x33e2 <__fp_split3+0xe>
    33fe:	46 95       	lsr	r20
    3400:	f1 df       	rcall	.-30     	; 0x33e4 <__fp_splitA>
    3402:	08 c0       	rjmp	.+16     	; 0x3414 <__fp_splitA+0x30>
    3404:	16 16       	cp	r1, r22
    3406:	17 06       	cpc	r1, r23
    3408:	18 06       	cpc	r1, r24
    340a:	99 1f       	adc	r25, r25
    340c:	f1 cf       	rjmp	.-30     	; 0x33f0 <__fp_splitA+0xc>
    340e:	86 95       	lsr	r24
    3410:	71 05       	cpc	r23, r1
    3412:	61 05       	cpc	r22, r1
    3414:	08 94       	sec
    3416:	08 95       	ret

00003418 <__fp_zero>:
    3418:	e8 94       	clt

0000341a <__fp_szero>:
    341a:	bb 27       	eor	r27, r27
    341c:	66 27       	eor	r22, r22
    341e:	77 27       	eor	r23, r23
    3420:	cb 01       	movw	r24, r22
    3422:	97 f9       	bld	r25, 7
    3424:	08 95       	ret
    3426:	0e f0       	brts	.+2      	; 0x342a <__fp_szero+0x10>
    3428:	23 c1       	rjmp	.+582    	; 0x3670 <__fp_mpack>
    342a:	b2 cf       	rjmp	.-156    	; 0x3390 <__fp_nan>
    342c:	68 94       	set
    342e:	aa cf       	rjmp	.-172    	; 0x3384 <__fp_inf>

00003430 <log>:
    3430:	d9 df       	rcall	.-78     	; 0x33e4 <__fp_splitA>
    3432:	c8 f3       	brcs	.-14     	; 0x3426 <__fp_szero+0xc>
    3434:	99 23       	and	r25, r25
    3436:	d1 f3       	breq	.-12     	; 0x342c <__fp_szero+0x12>
    3438:	c6 f3       	brts	.-16     	; 0x342a <__fp_szero+0x10>
    343a:	df 93       	push	r29
    343c:	cf 93       	push	r28
    343e:	1f 93       	push	r17
    3440:	0f 93       	push	r16
    3442:	ff 92       	push	r15
    3444:	c9 2f       	mov	r28, r25
    3446:	dd 27       	eor	r29, r29
    3448:	88 23       	and	r24, r24
    344a:	2a f0       	brmi	.+10     	; 0x3456 <log+0x26>
    344c:	21 97       	sbiw	r28, 0x01	; 1
    344e:	66 0f       	add	r22, r22
    3450:	77 1f       	adc	r23, r23
    3452:	88 1f       	adc	r24, r24
    3454:	da f7       	brpl	.-10     	; 0x344c <log+0x1c>
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	30 e0       	ldi	r19, 0x00	; 0
    345a:	40 e8       	ldi	r20, 0x80	; 128
    345c:	5f eb       	ldi	r21, 0xBF	; 191
    345e:	9f e3       	ldi	r25, 0x3F	; 63
    3460:	88 39       	cpi	r24, 0x98	; 152
    3462:	20 f0       	brcs	.+8      	; 0x346c <log+0x3c>
    3464:	80 3e       	cpi	r24, 0xE0	; 224
    3466:	30 f0       	brcs	.+12     	; 0x3474 <log+0x44>
    3468:	21 96       	adiw	r28, 0x01	; 1
    346a:	8f 77       	andi	r24, 0x7F	; 127
    346c:	51 de       	rcall	.-862    	; 0x3110 <__addsf3>
    346e:	ec ef       	ldi	r30, 0xFC	; 252
    3470:	f1 e0       	ldi	r31, 0x01	; 1
    3472:	03 c0       	rjmp	.+6      	; 0x347a <log+0x4a>
    3474:	4d de       	rcall	.-870    	; 0x3110 <__addsf3>
    3476:	e9 e2       	ldi	r30, 0x29	; 41
    3478:	f2 e0       	ldi	r31, 0x02	; 2
    347a:	08 d1       	rcall	.+528    	; 0x368c <__fp_powser>
    347c:	8b 01       	movw	r16, r22
    347e:	be 01       	movw	r22, r28
    3480:	ec 01       	movw	r28, r24
    3482:	fb 2e       	mov	r15, r27
    3484:	6f 57       	subi	r22, 0x7F	; 127
    3486:	71 09       	sbc	r23, r1
    3488:	75 95       	asr	r23
    348a:	77 1f       	adc	r23, r23
    348c:	88 0b       	sbc	r24, r24
    348e:	99 0b       	sbc	r25, r25
    3490:	3e df       	rcall	.-388    	; 0x330e <__floatsisf>
    3492:	28 e1       	ldi	r18, 0x18	; 24
    3494:	32 e7       	ldi	r19, 0x72	; 114
    3496:	41 e3       	ldi	r20, 0x31	; 49
    3498:	5f e3       	ldi	r21, 0x3F	; 63
    349a:	16 d0       	rcall	.+44     	; 0x34c8 <__mulsf3x>
    349c:	af 2d       	mov	r26, r15
    349e:	98 01       	movw	r18, r16
    34a0:	ae 01       	movw	r20, r28
    34a2:	ff 90       	pop	r15
    34a4:	0f 91       	pop	r16
    34a6:	1f 91       	pop	r17
    34a8:	cf 91       	pop	r28
    34aa:	df 91       	pop	r29
    34ac:	42 de       	rcall	.-892    	; 0x3132 <__addsf3x>
    34ae:	81 cf       	rjmp	.-254    	; 0x33b2 <__fp_round>

000034b0 <__mulsf3>:
    34b0:	0b d0       	rcall	.+22     	; 0x34c8 <__mulsf3x>
    34b2:	7f cf       	rjmp	.-258    	; 0x33b2 <__fp_round>
    34b4:	70 df       	rcall	.-288    	; 0x3396 <__fp_pscA>
    34b6:	28 f0       	brcs	.+10     	; 0x34c2 <__mulsf3+0x12>
    34b8:	75 df       	rcall	.-278    	; 0x33a4 <__fp_pscB>
    34ba:	18 f0       	brcs	.+6      	; 0x34c2 <__mulsf3+0x12>
    34bc:	95 23       	and	r25, r21
    34be:	09 f0       	breq	.+2      	; 0x34c2 <__mulsf3+0x12>
    34c0:	61 cf       	rjmp	.-318    	; 0x3384 <__fp_inf>
    34c2:	66 cf       	rjmp	.-308    	; 0x3390 <__fp_nan>
    34c4:	11 24       	eor	r1, r1
    34c6:	a9 cf       	rjmp	.-174    	; 0x341a <__fp_szero>

000034c8 <__mulsf3x>:
    34c8:	85 df       	rcall	.-246    	; 0x33d4 <__fp_split3>
    34ca:	a0 f3       	brcs	.-24     	; 0x34b4 <__mulsf3+0x4>

000034cc <__mulsf3_pse>:
    34cc:	95 9f       	mul	r25, r21
    34ce:	d1 f3       	breq	.-12     	; 0x34c4 <__mulsf3+0x14>
    34d0:	95 0f       	add	r25, r21
    34d2:	50 e0       	ldi	r21, 0x00	; 0
    34d4:	55 1f       	adc	r21, r21
    34d6:	62 9f       	mul	r22, r18
    34d8:	f0 01       	movw	r30, r0
    34da:	72 9f       	mul	r23, r18
    34dc:	bb 27       	eor	r27, r27
    34de:	f0 0d       	add	r31, r0
    34e0:	b1 1d       	adc	r27, r1
    34e2:	63 9f       	mul	r22, r19
    34e4:	aa 27       	eor	r26, r26
    34e6:	f0 0d       	add	r31, r0
    34e8:	b1 1d       	adc	r27, r1
    34ea:	aa 1f       	adc	r26, r26
    34ec:	64 9f       	mul	r22, r20
    34ee:	66 27       	eor	r22, r22
    34f0:	b0 0d       	add	r27, r0
    34f2:	a1 1d       	adc	r26, r1
    34f4:	66 1f       	adc	r22, r22
    34f6:	82 9f       	mul	r24, r18
    34f8:	22 27       	eor	r18, r18
    34fa:	b0 0d       	add	r27, r0
    34fc:	a1 1d       	adc	r26, r1
    34fe:	62 1f       	adc	r22, r18
    3500:	73 9f       	mul	r23, r19
    3502:	b0 0d       	add	r27, r0
    3504:	a1 1d       	adc	r26, r1
    3506:	62 1f       	adc	r22, r18
    3508:	83 9f       	mul	r24, r19
    350a:	a0 0d       	add	r26, r0
    350c:	61 1d       	adc	r22, r1
    350e:	22 1f       	adc	r18, r18
    3510:	74 9f       	mul	r23, r20
    3512:	33 27       	eor	r19, r19
    3514:	a0 0d       	add	r26, r0
    3516:	61 1d       	adc	r22, r1
    3518:	23 1f       	adc	r18, r19
    351a:	84 9f       	mul	r24, r20
    351c:	60 0d       	add	r22, r0
    351e:	21 1d       	adc	r18, r1
    3520:	82 2f       	mov	r24, r18
    3522:	76 2f       	mov	r23, r22
    3524:	6a 2f       	mov	r22, r26
    3526:	11 24       	eor	r1, r1
    3528:	9f 57       	subi	r25, 0x7F	; 127
    352a:	50 40       	sbci	r21, 0x00	; 0
    352c:	8a f0       	brmi	.+34     	; 0x3550 <__mulsf3_pse+0x84>
    352e:	e1 f0       	breq	.+56     	; 0x3568 <__mulsf3_pse+0x9c>
    3530:	88 23       	and	r24, r24
    3532:	4a f0       	brmi	.+18     	; 0x3546 <__mulsf3_pse+0x7a>
    3534:	ee 0f       	add	r30, r30
    3536:	ff 1f       	adc	r31, r31
    3538:	bb 1f       	adc	r27, r27
    353a:	66 1f       	adc	r22, r22
    353c:	77 1f       	adc	r23, r23
    353e:	88 1f       	adc	r24, r24
    3540:	91 50       	subi	r25, 0x01	; 1
    3542:	50 40       	sbci	r21, 0x00	; 0
    3544:	a9 f7       	brne	.-22     	; 0x3530 <__mulsf3_pse+0x64>
    3546:	9e 3f       	cpi	r25, 0xFE	; 254
    3548:	51 05       	cpc	r21, r1
    354a:	70 f0       	brcs	.+28     	; 0x3568 <__mulsf3_pse+0x9c>
    354c:	1b cf       	rjmp	.-458    	; 0x3384 <__fp_inf>
    354e:	65 cf       	rjmp	.-310    	; 0x341a <__fp_szero>
    3550:	5f 3f       	cpi	r21, 0xFF	; 255
    3552:	ec f3       	brlt	.-6      	; 0x354e <__mulsf3_pse+0x82>
    3554:	98 3e       	cpi	r25, 0xE8	; 232
    3556:	dc f3       	brlt	.-10     	; 0x354e <__mulsf3_pse+0x82>
    3558:	86 95       	lsr	r24
    355a:	77 95       	ror	r23
    355c:	67 95       	ror	r22
    355e:	b7 95       	ror	r27
    3560:	f7 95       	ror	r31
    3562:	e7 95       	ror	r30
    3564:	9f 5f       	subi	r25, 0xFF	; 255
    3566:	c1 f7       	brne	.-16     	; 0x3558 <__mulsf3_pse+0x8c>
    3568:	fe 2b       	or	r31, r30
    356a:	88 0f       	add	r24, r24
    356c:	91 1d       	adc	r25, r1
    356e:	96 95       	lsr	r25
    3570:	87 95       	ror	r24
    3572:	97 f9       	bld	r25, 7
    3574:	08 95       	ret

00003576 <pow>:
    3576:	fa 01       	movw	r30, r20
    3578:	ee 0f       	add	r30, r30
    357a:	ff 1f       	adc	r31, r31
    357c:	30 96       	adiw	r30, 0x00	; 0
    357e:	21 05       	cpc	r18, r1
    3580:	31 05       	cpc	r19, r1
    3582:	99 f1       	breq	.+102    	; 0x35ea <pow+0x74>
    3584:	61 15       	cp	r22, r1
    3586:	71 05       	cpc	r23, r1
    3588:	61 f4       	brne	.+24     	; 0x35a2 <pow+0x2c>
    358a:	80 38       	cpi	r24, 0x80	; 128
    358c:	bf e3       	ldi	r27, 0x3F	; 63
    358e:	9b 07       	cpc	r25, r27
    3590:	49 f1       	breq	.+82     	; 0x35e4 <pow+0x6e>
    3592:	68 94       	set
    3594:	90 38       	cpi	r25, 0x80	; 128
    3596:	81 05       	cpc	r24, r1
    3598:	61 f0       	breq	.+24     	; 0x35b2 <pow+0x3c>
    359a:	80 38       	cpi	r24, 0x80	; 128
    359c:	bf ef       	ldi	r27, 0xFF	; 255
    359e:	9b 07       	cpc	r25, r27
    35a0:	41 f0       	breq	.+16     	; 0x35b2 <pow+0x3c>
    35a2:	99 23       	and	r25, r25
    35a4:	42 f5       	brpl	.+80     	; 0x35f6 <pow+0x80>
    35a6:	ff 3f       	cpi	r31, 0xFF	; 255
    35a8:	e1 05       	cpc	r30, r1
    35aa:	31 05       	cpc	r19, r1
    35ac:	21 05       	cpc	r18, r1
    35ae:	11 f1       	breq	.+68     	; 0x35f4 <pow+0x7e>
    35b0:	e8 94       	clt
    35b2:	08 94       	sec
    35b4:	e7 95       	ror	r30
    35b6:	d9 01       	movw	r26, r18
    35b8:	aa 23       	and	r26, r26
    35ba:	29 f4       	brne	.+10     	; 0x35c6 <pow+0x50>
    35bc:	ab 2f       	mov	r26, r27
    35be:	be 2f       	mov	r27, r30
    35c0:	f8 5f       	subi	r31, 0xF8	; 248
    35c2:	d0 f3       	brcs	.-12     	; 0x35b8 <pow+0x42>
    35c4:	10 c0       	rjmp	.+32     	; 0x35e6 <pow+0x70>
    35c6:	ff 5f       	subi	r31, 0xFF	; 255
    35c8:	70 f4       	brcc	.+28     	; 0x35e6 <pow+0x70>
    35ca:	a6 95       	lsr	r26
    35cc:	e0 f7       	brcc	.-8      	; 0x35c6 <pow+0x50>
    35ce:	f7 39       	cpi	r31, 0x97	; 151
    35d0:	50 f0       	brcs	.+20     	; 0x35e6 <pow+0x70>
    35d2:	19 f0       	breq	.+6      	; 0x35da <pow+0x64>
    35d4:	ff 3a       	cpi	r31, 0xAF	; 175
    35d6:	38 f4       	brcc	.+14     	; 0x35e6 <pow+0x70>
    35d8:	9f 77       	andi	r25, 0x7F	; 127
    35da:	9f 93       	push	r25
    35dc:	0c d0       	rcall	.+24     	; 0x35f6 <pow+0x80>
    35de:	0f 90       	pop	r0
    35e0:	07 fc       	sbrc	r0, 7
    35e2:	90 58       	subi	r25, 0x80	; 128
    35e4:	08 95       	ret
    35e6:	3e f0       	brts	.+14     	; 0x35f6 <pow+0x80>
    35e8:	d3 ce       	rjmp	.-602    	; 0x3390 <__fp_nan>
    35ea:	60 e0       	ldi	r22, 0x00	; 0
    35ec:	70 e0       	ldi	r23, 0x00	; 0
    35ee:	80 e8       	ldi	r24, 0x80	; 128
    35f0:	9f e3       	ldi	r25, 0x3F	; 63
    35f2:	08 95       	ret
    35f4:	4f e7       	ldi	r20, 0x7F	; 127
    35f6:	9f 77       	andi	r25, 0x7F	; 127
    35f8:	5f 93       	push	r21
    35fa:	4f 93       	push	r20
    35fc:	3f 93       	push	r19
    35fe:	2f 93       	push	r18
    3600:	17 df       	rcall	.-466    	; 0x3430 <log>
    3602:	2f 91       	pop	r18
    3604:	3f 91       	pop	r19
    3606:	4f 91       	pop	r20
    3608:	5f 91       	pop	r21
    360a:	52 df       	rcall	.-348    	; 0x34b0 <__mulsf3>
    360c:	05 c0       	rjmp	.+10     	; 0x3618 <exp>
    360e:	19 f4       	brne	.+6      	; 0x3616 <pow+0xa0>
    3610:	0e f0       	brts	.+2      	; 0x3614 <pow+0x9e>
    3612:	b8 ce       	rjmp	.-656    	; 0x3384 <__fp_inf>
    3614:	01 cf       	rjmp	.-510    	; 0x3418 <__fp_zero>
    3616:	bc ce       	rjmp	.-648    	; 0x3390 <__fp_nan>

00003618 <exp>:
    3618:	e5 de       	rcall	.-566    	; 0x33e4 <__fp_splitA>
    361a:	c8 f3       	brcs	.-14     	; 0x360e <pow+0x98>
    361c:	96 38       	cpi	r25, 0x86	; 134
    361e:	c0 f7       	brcc	.-16     	; 0x3610 <pow+0x9a>
    3620:	07 f8       	bld	r0, 7
    3622:	0f 92       	push	r0
    3624:	e8 94       	clt
    3626:	2b e3       	ldi	r18, 0x3B	; 59
    3628:	3a ea       	ldi	r19, 0xAA	; 170
    362a:	48 eb       	ldi	r20, 0xB8	; 184
    362c:	5f e7       	ldi	r21, 0x7F	; 127
    362e:	4e df       	rcall	.-356    	; 0x34cc <__mulsf3_pse>
    3630:	0f 92       	push	r0
    3632:	0f 92       	push	r0
    3634:	0f 92       	push	r0
    3636:	4d b7       	in	r20, 0x3d	; 61
    3638:	5e b7       	in	r21, 0x3e	; 62
    363a:	0f 92       	push	r0
    363c:	89 d0       	rcall	.+274    	; 0x3750 <modf>
    363e:	e6 e5       	ldi	r30, 0x56	; 86
    3640:	f2 e0       	ldi	r31, 0x02	; 2
    3642:	24 d0       	rcall	.+72     	; 0x368c <__fp_powser>
    3644:	4f 91       	pop	r20
    3646:	5f 91       	pop	r21
    3648:	ef 91       	pop	r30
    364a:	ff 91       	pop	r31
    364c:	e5 95       	asr	r30
    364e:	ee 1f       	adc	r30, r30
    3650:	ff 1f       	adc	r31, r31
    3652:	49 f0       	breq	.+18     	; 0x3666 <exp+0x4e>
    3654:	fe 57       	subi	r31, 0x7E	; 126
    3656:	e0 68       	ori	r30, 0x80	; 128
    3658:	44 27       	eor	r20, r20
    365a:	ee 0f       	add	r30, r30
    365c:	44 1f       	adc	r20, r20
    365e:	fa 95       	dec	r31
    3660:	e1 f7       	brne	.-8      	; 0x365a <exp+0x42>
    3662:	41 95       	neg	r20
    3664:	55 0b       	sbc	r21, r21
    3666:	40 d0       	rcall	.+128    	; 0x36e8 <ldexp>
    3668:	0f 90       	pop	r0
    366a:	07 fe       	sbrs	r0, 7
    366c:	34 c0       	rjmp	.+104    	; 0x36d6 <inverse>
    366e:	08 95       	ret

00003670 <__fp_mpack>:
    3670:	9f 3f       	cpi	r25, 0xFF	; 255
    3672:	31 f0       	breq	.+12     	; 0x3680 <__fp_mpack_finite+0xc>

00003674 <__fp_mpack_finite>:
    3674:	91 50       	subi	r25, 0x01	; 1
    3676:	20 f4       	brcc	.+8      	; 0x3680 <__fp_mpack_finite+0xc>
    3678:	87 95       	ror	r24
    367a:	77 95       	ror	r23
    367c:	67 95       	ror	r22
    367e:	b7 95       	ror	r27
    3680:	88 0f       	add	r24, r24
    3682:	91 1d       	adc	r25, r1
    3684:	96 95       	lsr	r25
    3686:	87 95       	ror	r24
    3688:	97 f9       	bld	r25, 7
    368a:	08 95       	ret

0000368c <__fp_powser>:
    368c:	df 93       	push	r29
    368e:	cf 93       	push	r28
    3690:	1f 93       	push	r17
    3692:	0f 93       	push	r16
    3694:	ff 92       	push	r15
    3696:	ef 92       	push	r14
    3698:	df 92       	push	r13
    369a:	7b 01       	movw	r14, r22
    369c:	8c 01       	movw	r16, r24
    369e:	68 94       	set
    36a0:	05 c0       	rjmp	.+10     	; 0x36ac <__fp_powser+0x20>
    36a2:	da 2e       	mov	r13, r26
    36a4:	ef 01       	movw	r28, r30
    36a6:	10 df       	rcall	.-480    	; 0x34c8 <__mulsf3x>
    36a8:	fe 01       	movw	r30, r28
    36aa:	e8 94       	clt
    36ac:	a5 91       	lpm	r26, Z+
    36ae:	25 91       	lpm	r18, Z+
    36b0:	35 91       	lpm	r19, Z+
    36b2:	45 91       	lpm	r20, Z+
    36b4:	55 91       	lpm	r21, Z+
    36b6:	ae f3       	brts	.-22     	; 0x36a2 <__fp_powser+0x16>
    36b8:	ef 01       	movw	r28, r30
    36ba:	3b dd       	rcall	.-1418   	; 0x3132 <__addsf3x>
    36bc:	fe 01       	movw	r30, r28
    36be:	97 01       	movw	r18, r14
    36c0:	a8 01       	movw	r20, r16
    36c2:	da 94       	dec	r13
    36c4:	79 f7       	brne	.-34     	; 0x36a4 <__fp_powser+0x18>
    36c6:	df 90       	pop	r13
    36c8:	ef 90       	pop	r14
    36ca:	ff 90       	pop	r15
    36cc:	0f 91       	pop	r16
    36ce:	1f 91       	pop	r17
    36d0:	cf 91       	pop	r28
    36d2:	df 91       	pop	r29
    36d4:	08 95       	ret

000036d6 <inverse>:
    36d6:	9b 01       	movw	r18, r22
    36d8:	ac 01       	movw	r20, r24
    36da:	60 e0       	ldi	r22, 0x00	; 0
    36dc:	70 e0       	ldi	r23, 0x00	; 0
    36de:	80 e8       	ldi	r24, 0x80	; 128
    36e0:	9f e3       	ldi	r25, 0x3F	; 63
    36e2:	7a cd       	rjmp	.-1292   	; 0x31d8 <__divsf3>
    36e4:	4f ce       	rjmp	.-866    	; 0x3384 <__fp_inf>
    36e6:	c4 cf       	rjmp	.-120    	; 0x3670 <__fp_mpack>

000036e8 <ldexp>:
    36e8:	7d de       	rcall	.-774    	; 0x33e4 <__fp_splitA>
    36ea:	e8 f3       	brcs	.-6      	; 0x36e6 <inverse+0x10>
    36ec:	99 23       	and	r25, r25
    36ee:	d9 f3       	breq	.-10     	; 0x36e6 <inverse+0x10>
    36f0:	94 0f       	add	r25, r20
    36f2:	51 1d       	adc	r21, r1
    36f4:	bb f3       	brvs	.-18     	; 0x36e4 <inverse+0xe>
    36f6:	91 50       	subi	r25, 0x01	; 1
    36f8:	50 40       	sbci	r21, 0x00	; 0
    36fa:	94 f0       	brlt	.+36     	; 0x3720 <ldexp+0x38>
    36fc:	59 f0       	breq	.+22     	; 0x3714 <ldexp+0x2c>
    36fe:	88 23       	and	r24, r24
    3700:	32 f0       	brmi	.+12     	; 0x370e <ldexp+0x26>
    3702:	66 0f       	add	r22, r22
    3704:	77 1f       	adc	r23, r23
    3706:	88 1f       	adc	r24, r24
    3708:	91 50       	subi	r25, 0x01	; 1
    370a:	50 40       	sbci	r21, 0x00	; 0
    370c:	c1 f7       	brne	.-16     	; 0x36fe <ldexp+0x16>
    370e:	9e 3f       	cpi	r25, 0xFE	; 254
    3710:	51 05       	cpc	r21, r1
    3712:	44 f7       	brge	.-48     	; 0x36e4 <inverse+0xe>
    3714:	88 0f       	add	r24, r24
    3716:	91 1d       	adc	r25, r1
    3718:	96 95       	lsr	r25
    371a:	87 95       	ror	r24
    371c:	97 f9       	bld	r25, 7
    371e:	08 95       	ret
    3720:	5f 3f       	cpi	r21, 0xFF	; 255
    3722:	ac f0       	brlt	.+42     	; 0x374e <ldexp+0x66>
    3724:	98 3e       	cpi	r25, 0xE8	; 232
    3726:	9c f0       	brlt	.+38     	; 0x374e <ldexp+0x66>
    3728:	bb 27       	eor	r27, r27
    372a:	86 95       	lsr	r24
    372c:	77 95       	ror	r23
    372e:	67 95       	ror	r22
    3730:	b7 95       	ror	r27
    3732:	08 f4       	brcc	.+2      	; 0x3736 <ldexp+0x4e>
    3734:	b1 60       	ori	r27, 0x01	; 1
    3736:	93 95       	inc	r25
    3738:	c1 f7       	brne	.-16     	; 0x372a <ldexp+0x42>
    373a:	bb 0f       	add	r27, r27
    373c:	58 f7       	brcc	.-42     	; 0x3714 <ldexp+0x2c>
    373e:	11 f4       	brne	.+4      	; 0x3744 <ldexp+0x5c>
    3740:	60 ff       	sbrs	r22, 0
    3742:	e8 cf       	rjmp	.-48     	; 0x3714 <ldexp+0x2c>
    3744:	6f 5f       	subi	r22, 0xFF	; 255
    3746:	7f 4f       	sbci	r23, 0xFF	; 255
    3748:	8f 4f       	sbci	r24, 0xFF	; 255
    374a:	9f 4f       	sbci	r25, 0xFF	; 255
    374c:	e3 cf       	rjmp	.-58     	; 0x3714 <ldexp+0x2c>
    374e:	65 ce       	rjmp	.-822    	; 0x341a <__fp_szero>

00003750 <modf>:
    3750:	fa 01       	movw	r30, r20
    3752:	dc 01       	movw	r26, r24
    3754:	aa 0f       	add	r26, r26
    3756:	bb 1f       	adc	r27, r27
    3758:	9b 01       	movw	r18, r22
    375a:	ac 01       	movw	r20, r24
    375c:	bf 57       	subi	r27, 0x7F	; 127
    375e:	28 f4       	brcc	.+10     	; 0x376a <modf+0x1a>
    3760:	22 27       	eor	r18, r18
    3762:	33 27       	eor	r19, r19
    3764:	44 27       	eor	r20, r20
    3766:	50 78       	andi	r21, 0x80	; 128
    3768:	1f c0       	rjmp	.+62     	; 0x37a8 <modf+0x58>
    376a:	b7 51       	subi	r27, 0x17	; 23
    376c:	88 f4       	brcc	.+34     	; 0x3790 <modf+0x40>
    376e:	ab 2f       	mov	r26, r27
    3770:	00 24       	eor	r0, r0
    3772:	46 95       	lsr	r20
    3774:	37 95       	ror	r19
    3776:	27 95       	ror	r18
    3778:	01 1c       	adc	r0, r1
    377a:	a3 95       	inc	r26
    377c:	d2 f3       	brmi	.-12     	; 0x3772 <modf+0x22>
    377e:	00 20       	and	r0, r0
    3780:	69 f0       	breq	.+26     	; 0x379c <modf+0x4c>
    3782:	22 0f       	add	r18, r18
    3784:	33 1f       	adc	r19, r19
    3786:	44 1f       	adc	r20, r20
    3788:	b3 95       	inc	r27
    378a:	da f3       	brmi	.-10     	; 0x3782 <modf+0x32>
    378c:	0d d0       	rcall	.+26     	; 0x37a8 <modf+0x58>
    378e:	bf cc       	rjmp	.-1666   	; 0x310e <__subsf3>
    3790:	61 30       	cpi	r22, 0x01	; 1
    3792:	71 05       	cpc	r23, r1
    3794:	a0 e8       	ldi	r26, 0x80	; 128
    3796:	8a 07       	cpc	r24, r26
    3798:	b9 46       	sbci	r27, 0x69	; 105
    379a:	30 f4       	brcc	.+12     	; 0x37a8 <modf+0x58>
    379c:	9b 01       	movw	r18, r22
    379e:	ac 01       	movw	r20, r24
    37a0:	66 27       	eor	r22, r22
    37a2:	77 27       	eor	r23, r23
    37a4:	88 27       	eor	r24, r24
    37a6:	90 78       	andi	r25, 0x80	; 128
    37a8:	30 96       	adiw	r30, 0x00	; 0
    37aa:	21 f0       	breq	.+8      	; 0x37b4 <modf+0x64>
    37ac:	20 83       	st	Z, r18
    37ae:	31 83       	std	Z+1, r19	; 0x01
    37b0:	42 83       	std	Z+2, r20	; 0x02
    37b2:	53 83       	std	Z+3, r21	; 0x03
    37b4:	08 95       	ret

000037b6 <vfprintf>:
    37b6:	2f 92       	push	r2
    37b8:	3f 92       	push	r3
    37ba:	4f 92       	push	r4
    37bc:	5f 92       	push	r5
    37be:	6f 92       	push	r6
    37c0:	7f 92       	push	r7
    37c2:	8f 92       	push	r8
    37c4:	9f 92       	push	r9
    37c6:	af 92       	push	r10
    37c8:	bf 92       	push	r11
    37ca:	cf 92       	push	r12
    37cc:	df 92       	push	r13
    37ce:	ef 92       	push	r14
    37d0:	ff 92       	push	r15
    37d2:	0f 93       	push	r16
    37d4:	1f 93       	push	r17
    37d6:	cf 93       	push	r28
    37d8:	df 93       	push	r29
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
    37de:	60 97       	sbiw	r28, 0x10	; 16
    37e0:	cd bf       	out	0x3d, r28	; 61
    37e2:	de bf       	out	0x3e, r29	; 62
    37e4:	7c 01       	movw	r14, r24
    37e6:	1b 01       	movw	r2, r22
    37e8:	6a 01       	movw	r12, r20
    37ea:	fc 01       	movw	r30, r24
    37ec:	16 82       	std	Z+6, r1	; 0x06
    37ee:	17 82       	std	Z+7, r1	; 0x07
    37f0:	83 81       	ldd	r24, Z+3	; 0x03
    37f2:	81 ff       	sbrs	r24, 1
    37f4:	2a c3       	rjmp	.+1620   	; 0x3e4a <vfprintf+0x694>
    37f6:	9e 01       	movw	r18, r28
    37f8:	2f 5f       	subi	r18, 0xFF	; 255
    37fa:	3f 4f       	sbci	r19, 0xFF	; 255
    37fc:	39 01       	movw	r6, r18
    37fe:	f7 01       	movw	r30, r14
    3800:	93 81       	ldd	r25, Z+3	; 0x03
    3802:	f1 01       	movw	r30, r2
    3804:	93 fd       	sbrc	r25, 3
    3806:	85 91       	lpm	r24, Z+
    3808:	93 ff       	sbrs	r25, 3
    380a:	81 91       	ld	r24, Z+
    380c:	1f 01       	movw	r2, r30
    380e:	88 23       	and	r24, r24
    3810:	09 f4       	brne	.+2      	; 0x3814 <vfprintf+0x5e>
    3812:	17 c3       	rjmp	.+1582   	; 0x3e42 <vfprintf+0x68c>
    3814:	85 32       	cpi	r24, 0x25	; 37
    3816:	39 f4       	brne	.+14     	; 0x3826 <vfprintf+0x70>
    3818:	93 fd       	sbrc	r25, 3
    381a:	85 91       	lpm	r24, Z+
    381c:	93 ff       	sbrs	r25, 3
    381e:	81 91       	ld	r24, Z+
    3820:	1f 01       	movw	r2, r30
    3822:	85 32       	cpi	r24, 0x25	; 37
    3824:	31 f4       	brne	.+12     	; 0x3832 <vfprintf+0x7c>
    3826:	b7 01       	movw	r22, r14
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	7d d5       	rcall	.+2810   	; 0x4326 <fputc>
    382c:	56 01       	movw	r10, r12
    382e:	65 01       	movw	r12, r10
    3830:	e6 cf       	rjmp	.-52     	; 0x37fe <vfprintf+0x48>
    3832:	10 e0       	ldi	r17, 0x00	; 0
    3834:	51 2c       	mov	r5, r1
    3836:	91 2c       	mov	r9, r1
    3838:	ff e1       	ldi	r31, 0x1F	; 31
    383a:	f9 15       	cp	r31, r9
    383c:	d8 f0       	brcs	.+54     	; 0x3874 <vfprintf+0xbe>
    383e:	8b 32       	cpi	r24, 0x2B	; 43
    3840:	79 f0       	breq	.+30     	; 0x3860 <vfprintf+0xaa>
    3842:	38 f4       	brcc	.+14     	; 0x3852 <vfprintf+0x9c>
    3844:	80 32       	cpi	r24, 0x20	; 32
    3846:	79 f0       	breq	.+30     	; 0x3866 <vfprintf+0xb0>
    3848:	83 32       	cpi	r24, 0x23	; 35
    384a:	a1 f4       	brne	.+40     	; 0x3874 <vfprintf+0xbe>
    384c:	f9 2d       	mov	r31, r9
    384e:	f0 61       	ori	r31, 0x10	; 16
    3850:	2e c0       	rjmp	.+92     	; 0x38ae <vfprintf+0xf8>
    3852:	8d 32       	cpi	r24, 0x2D	; 45
    3854:	61 f0       	breq	.+24     	; 0x386e <vfprintf+0xb8>
    3856:	80 33       	cpi	r24, 0x30	; 48
    3858:	69 f4       	brne	.+26     	; 0x3874 <vfprintf+0xbe>
    385a:	29 2d       	mov	r18, r9
    385c:	21 60       	ori	r18, 0x01	; 1
    385e:	2d c0       	rjmp	.+90     	; 0x38ba <vfprintf+0x104>
    3860:	39 2d       	mov	r19, r9
    3862:	32 60       	ori	r19, 0x02	; 2
    3864:	93 2e       	mov	r9, r19
    3866:	89 2d       	mov	r24, r9
    3868:	84 60       	ori	r24, 0x04	; 4
    386a:	98 2e       	mov	r9, r24
    386c:	2a c0       	rjmp	.+84     	; 0x38c2 <vfprintf+0x10c>
    386e:	e9 2d       	mov	r30, r9
    3870:	e8 60       	ori	r30, 0x08	; 8
    3872:	15 c0       	rjmp	.+42     	; 0x389e <vfprintf+0xe8>
    3874:	97 fc       	sbrc	r9, 7
    3876:	2d c0       	rjmp	.+90     	; 0x38d2 <vfprintf+0x11c>
    3878:	20 ed       	ldi	r18, 0xD0	; 208
    387a:	28 0f       	add	r18, r24
    387c:	2a 30       	cpi	r18, 0x0A	; 10
    387e:	88 f4       	brcc	.+34     	; 0x38a2 <vfprintf+0xec>
    3880:	96 fe       	sbrs	r9, 6
    3882:	06 c0       	rjmp	.+12     	; 0x3890 <vfprintf+0xda>
    3884:	3a e0       	ldi	r19, 0x0A	; 10
    3886:	13 9f       	mul	r17, r19
    3888:	20 0d       	add	r18, r0
    388a:	11 24       	eor	r1, r1
    388c:	12 2f       	mov	r17, r18
    388e:	19 c0       	rjmp	.+50     	; 0x38c2 <vfprintf+0x10c>
    3890:	8a e0       	ldi	r24, 0x0A	; 10
    3892:	58 9e       	mul	r5, r24
    3894:	20 0d       	add	r18, r0
    3896:	11 24       	eor	r1, r1
    3898:	52 2e       	mov	r5, r18
    389a:	e9 2d       	mov	r30, r9
    389c:	e0 62       	ori	r30, 0x20	; 32
    389e:	9e 2e       	mov	r9, r30
    38a0:	10 c0       	rjmp	.+32     	; 0x38c2 <vfprintf+0x10c>
    38a2:	8e 32       	cpi	r24, 0x2E	; 46
    38a4:	31 f4       	brne	.+12     	; 0x38b2 <vfprintf+0xfc>
    38a6:	96 fc       	sbrc	r9, 6
    38a8:	cc c2       	rjmp	.+1432   	; 0x3e42 <vfprintf+0x68c>
    38aa:	f9 2d       	mov	r31, r9
    38ac:	f0 64       	ori	r31, 0x40	; 64
    38ae:	9f 2e       	mov	r9, r31
    38b0:	08 c0       	rjmp	.+16     	; 0x38c2 <vfprintf+0x10c>
    38b2:	8c 36       	cpi	r24, 0x6C	; 108
    38b4:	21 f4       	brne	.+8      	; 0x38be <vfprintf+0x108>
    38b6:	29 2d       	mov	r18, r9
    38b8:	20 68       	ori	r18, 0x80	; 128
    38ba:	92 2e       	mov	r9, r18
    38bc:	02 c0       	rjmp	.+4      	; 0x38c2 <vfprintf+0x10c>
    38be:	88 36       	cpi	r24, 0x68	; 104
    38c0:	41 f4       	brne	.+16     	; 0x38d2 <vfprintf+0x11c>
    38c2:	f1 01       	movw	r30, r2
    38c4:	93 fd       	sbrc	r25, 3
    38c6:	85 91       	lpm	r24, Z+
    38c8:	93 ff       	sbrs	r25, 3
    38ca:	81 91       	ld	r24, Z+
    38cc:	1f 01       	movw	r2, r30
    38ce:	81 11       	cpse	r24, r1
    38d0:	b3 cf       	rjmp	.-154    	; 0x3838 <vfprintf+0x82>
    38d2:	9b eb       	ldi	r25, 0xBB	; 187
    38d4:	98 0f       	add	r25, r24
    38d6:	93 30       	cpi	r25, 0x03	; 3
    38d8:	20 f4       	brcc	.+8      	; 0x38e2 <vfprintf+0x12c>
    38da:	99 2d       	mov	r25, r9
    38dc:	90 61       	ori	r25, 0x10	; 16
    38de:	80 5e       	subi	r24, 0xE0	; 224
    38e0:	07 c0       	rjmp	.+14     	; 0x38f0 <vfprintf+0x13a>
    38e2:	9b e9       	ldi	r25, 0x9B	; 155
    38e4:	98 0f       	add	r25, r24
    38e6:	93 30       	cpi	r25, 0x03	; 3
    38e8:	08 f0       	brcs	.+2      	; 0x38ec <vfprintf+0x136>
    38ea:	59 c1       	rjmp	.+690    	; 0x3b9e <vfprintf+0x3e8>
    38ec:	99 2d       	mov	r25, r9
    38ee:	9f 7e       	andi	r25, 0xEF	; 239
    38f0:	96 ff       	sbrs	r25, 6
    38f2:	16 e0       	ldi	r17, 0x06	; 6
    38f4:	9f 73       	andi	r25, 0x3F	; 63
    38f6:	99 2e       	mov	r9, r25
    38f8:	85 36       	cpi	r24, 0x65	; 101
    38fa:	19 f4       	brne	.+6      	; 0x3902 <vfprintf+0x14c>
    38fc:	90 64       	ori	r25, 0x40	; 64
    38fe:	99 2e       	mov	r9, r25
    3900:	08 c0       	rjmp	.+16     	; 0x3912 <vfprintf+0x15c>
    3902:	86 36       	cpi	r24, 0x66	; 102
    3904:	21 f4       	brne	.+8      	; 0x390e <vfprintf+0x158>
    3906:	39 2f       	mov	r19, r25
    3908:	30 68       	ori	r19, 0x80	; 128
    390a:	93 2e       	mov	r9, r19
    390c:	02 c0       	rjmp	.+4      	; 0x3912 <vfprintf+0x15c>
    390e:	11 11       	cpse	r17, r1
    3910:	11 50       	subi	r17, 0x01	; 1
    3912:	97 fe       	sbrs	r9, 7
    3914:	07 c0       	rjmp	.+14     	; 0x3924 <vfprintf+0x16e>
    3916:	1c 33       	cpi	r17, 0x3C	; 60
    3918:	50 f4       	brcc	.+20     	; 0x392e <vfprintf+0x178>
    391a:	44 24       	eor	r4, r4
    391c:	43 94       	inc	r4
    391e:	41 0e       	add	r4, r17
    3920:	27 e0       	ldi	r18, 0x07	; 7
    3922:	0b c0       	rjmp	.+22     	; 0x393a <vfprintf+0x184>
    3924:	18 30       	cpi	r17, 0x08	; 8
    3926:	38 f0       	brcs	.+14     	; 0x3936 <vfprintf+0x180>
    3928:	27 e0       	ldi	r18, 0x07	; 7
    392a:	17 e0       	ldi	r17, 0x07	; 7
    392c:	05 c0       	rjmp	.+10     	; 0x3938 <vfprintf+0x182>
    392e:	27 e0       	ldi	r18, 0x07	; 7
    3930:	9c e3       	ldi	r25, 0x3C	; 60
    3932:	49 2e       	mov	r4, r25
    3934:	02 c0       	rjmp	.+4      	; 0x393a <vfprintf+0x184>
    3936:	21 2f       	mov	r18, r17
    3938:	41 2c       	mov	r4, r1
    393a:	56 01       	movw	r10, r12
    393c:	84 e0       	ldi	r24, 0x04	; 4
    393e:	a8 0e       	add	r10, r24
    3940:	b1 1c       	adc	r11, r1
    3942:	f6 01       	movw	r30, r12
    3944:	60 81       	ld	r22, Z
    3946:	71 81       	ldd	r23, Z+1	; 0x01
    3948:	82 81       	ldd	r24, Z+2	; 0x02
    394a:	93 81       	ldd	r25, Z+3	; 0x03
    394c:	04 2d       	mov	r16, r4
    394e:	a3 01       	movw	r20, r6
    3950:	b2 d3       	rcall	.+1892   	; 0x40b6 <__ftoa_engine>
    3952:	6c 01       	movw	r12, r24
    3954:	f9 81       	ldd	r31, Y+1	; 0x01
    3956:	fc 87       	std	Y+12, r31	; 0x0c
    3958:	f0 ff       	sbrs	r31, 0
    395a:	02 c0       	rjmp	.+4      	; 0x3960 <vfprintf+0x1aa>
    395c:	f3 ff       	sbrs	r31, 3
    395e:	06 c0       	rjmp	.+12     	; 0x396c <vfprintf+0x1b6>
    3960:	91 fc       	sbrc	r9, 1
    3962:	06 c0       	rjmp	.+12     	; 0x3970 <vfprintf+0x1ba>
    3964:	92 fe       	sbrs	r9, 2
    3966:	06 c0       	rjmp	.+12     	; 0x3974 <vfprintf+0x1be>
    3968:	00 e2       	ldi	r16, 0x20	; 32
    396a:	05 c0       	rjmp	.+10     	; 0x3976 <vfprintf+0x1c0>
    396c:	0d e2       	ldi	r16, 0x2D	; 45
    396e:	03 c0       	rjmp	.+6      	; 0x3976 <vfprintf+0x1c0>
    3970:	0b e2       	ldi	r16, 0x2B	; 43
    3972:	01 c0       	rjmp	.+2      	; 0x3976 <vfprintf+0x1c0>
    3974:	00 e0       	ldi	r16, 0x00	; 0
    3976:	8c 85       	ldd	r24, Y+12	; 0x0c
    3978:	8c 70       	andi	r24, 0x0C	; 12
    397a:	19 f0       	breq	.+6      	; 0x3982 <vfprintf+0x1cc>
    397c:	01 11       	cpse	r16, r1
    397e:	43 c2       	rjmp	.+1158   	; 0x3e06 <vfprintf+0x650>
    3980:	80 c2       	rjmp	.+1280   	; 0x3e82 <vfprintf+0x6cc>
    3982:	97 fe       	sbrs	r9, 7
    3984:	10 c0       	rjmp	.+32     	; 0x39a6 <vfprintf+0x1f0>
    3986:	4c 0c       	add	r4, r12
    3988:	fc 85       	ldd	r31, Y+12	; 0x0c
    398a:	f4 ff       	sbrs	r31, 4
    398c:	04 c0       	rjmp	.+8      	; 0x3996 <vfprintf+0x1e0>
    398e:	8a 81       	ldd	r24, Y+2	; 0x02
    3990:	81 33       	cpi	r24, 0x31	; 49
    3992:	09 f4       	brne	.+2      	; 0x3996 <vfprintf+0x1e0>
    3994:	4a 94       	dec	r4
    3996:	14 14       	cp	r1, r4
    3998:	74 f5       	brge	.+92     	; 0x39f6 <vfprintf+0x240>
    399a:	28 e0       	ldi	r18, 0x08	; 8
    399c:	24 15       	cp	r18, r4
    399e:	78 f5       	brcc	.+94     	; 0x39fe <vfprintf+0x248>
    39a0:	88 e0       	ldi	r24, 0x08	; 8
    39a2:	48 2e       	mov	r4, r24
    39a4:	2c c0       	rjmp	.+88     	; 0x39fe <vfprintf+0x248>
    39a6:	96 fc       	sbrc	r9, 6
    39a8:	2a c0       	rjmp	.+84     	; 0x39fe <vfprintf+0x248>
    39aa:	81 2f       	mov	r24, r17
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	8c 15       	cp	r24, r12
    39b0:	9d 05       	cpc	r25, r13
    39b2:	9c f0       	brlt	.+38     	; 0x39da <vfprintf+0x224>
    39b4:	3c ef       	ldi	r19, 0xFC	; 252
    39b6:	c3 16       	cp	r12, r19
    39b8:	3f ef       	ldi	r19, 0xFF	; 255
    39ba:	d3 06       	cpc	r13, r19
    39bc:	74 f0       	brlt	.+28     	; 0x39da <vfprintf+0x224>
    39be:	89 2d       	mov	r24, r9
    39c0:	80 68       	ori	r24, 0x80	; 128
    39c2:	98 2e       	mov	r9, r24
    39c4:	0a c0       	rjmp	.+20     	; 0x39da <vfprintf+0x224>
    39c6:	e2 e0       	ldi	r30, 0x02	; 2
    39c8:	f0 e0       	ldi	r31, 0x00	; 0
    39ca:	ec 0f       	add	r30, r28
    39cc:	fd 1f       	adc	r31, r29
    39ce:	e1 0f       	add	r30, r17
    39d0:	f1 1d       	adc	r31, r1
    39d2:	80 81       	ld	r24, Z
    39d4:	80 33       	cpi	r24, 0x30	; 48
    39d6:	19 f4       	brne	.+6      	; 0x39de <vfprintf+0x228>
    39d8:	11 50       	subi	r17, 0x01	; 1
    39da:	11 11       	cpse	r17, r1
    39dc:	f4 cf       	rjmp	.-24     	; 0x39c6 <vfprintf+0x210>
    39de:	97 fe       	sbrs	r9, 7
    39e0:	0e c0       	rjmp	.+28     	; 0x39fe <vfprintf+0x248>
    39e2:	44 24       	eor	r4, r4
    39e4:	43 94       	inc	r4
    39e6:	41 0e       	add	r4, r17
    39e8:	81 2f       	mov	r24, r17
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	c8 16       	cp	r12, r24
    39ee:	d9 06       	cpc	r13, r25
    39f0:	2c f4       	brge	.+10     	; 0x39fc <vfprintf+0x246>
    39f2:	1c 19       	sub	r17, r12
    39f4:	04 c0       	rjmp	.+8      	; 0x39fe <vfprintf+0x248>
    39f6:	44 24       	eor	r4, r4
    39f8:	43 94       	inc	r4
    39fa:	01 c0       	rjmp	.+2      	; 0x39fe <vfprintf+0x248>
    39fc:	10 e0       	ldi	r17, 0x00	; 0
    39fe:	97 fe       	sbrs	r9, 7
    3a00:	06 c0       	rjmp	.+12     	; 0x3a0e <vfprintf+0x258>
    3a02:	1c 14       	cp	r1, r12
    3a04:	1d 04       	cpc	r1, r13
    3a06:	34 f4       	brge	.+12     	; 0x3a14 <vfprintf+0x25e>
    3a08:	c6 01       	movw	r24, r12
    3a0a:	01 96       	adiw	r24, 0x01	; 1
    3a0c:	05 c0       	rjmp	.+10     	; 0x3a18 <vfprintf+0x262>
    3a0e:	85 e0       	ldi	r24, 0x05	; 5
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	02 c0       	rjmp	.+4      	; 0x3a18 <vfprintf+0x262>
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	01 11       	cpse	r16, r1
    3a1a:	01 96       	adiw	r24, 0x01	; 1
    3a1c:	11 23       	and	r17, r17
    3a1e:	31 f0       	breq	.+12     	; 0x3a2c <vfprintf+0x276>
    3a20:	21 2f       	mov	r18, r17
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	2f 5f       	subi	r18, 0xFF	; 255
    3a26:	3f 4f       	sbci	r19, 0xFF	; 255
    3a28:	82 0f       	add	r24, r18
    3a2a:	93 1f       	adc	r25, r19
    3a2c:	25 2d       	mov	r18, r5
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	82 17       	cp	r24, r18
    3a32:	93 07       	cpc	r25, r19
    3a34:	14 f4       	brge	.+4      	; 0x3a3a <vfprintf+0x284>
    3a36:	58 1a       	sub	r5, r24
    3a38:	01 c0       	rjmp	.+2      	; 0x3a3c <vfprintf+0x286>
    3a3a:	51 2c       	mov	r5, r1
    3a3c:	89 2d       	mov	r24, r9
    3a3e:	89 70       	andi	r24, 0x09	; 9
    3a40:	41 f4       	brne	.+16     	; 0x3a52 <vfprintf+0x29c>
    3a42:	55 20       	and	r5, r5
    3a44:	31 f0       	breq	.+12     	; 0x3a52 <vfprintf+0x29c>
    3a46:	b7 01       	movw	r22, r14
    3a48:	80 e2       	ldi	r24, 0x20	; 32
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	6c d4       	rcall	.+2264   	; 0x4326 <fputc>
    3a4e:	5a 94       	dec	r5
    3a50:	f8 cf       	rjmp	.-16     	; 0x3a42 <vfprintf+0x28c>
    3a52:	00 23       	and	r16, r16
    3a54:	21 f0       	breq	.+8      	; 0x3a5e <vfprintf+0x2a8>
    3a56:	b7 01       	movw	r22, r14
    3a58:	80 2f       	mov	r24, r16
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	64 d4       	rcall	.+2248   	; 0x4326 <fputc>
    3a5e:	93 fc       	sbrc	r9, 3
    3a60:	08 c0       	rjmp	.+16     	; 0x3a72 <vfprintf+0x2bc>
    3a62:	55 20       	and	r5, r5
    3a64:	31 f0       	breq	.+12     	; 0x3a72 <vfprintf+0x2bc>
    3a66:	b7 01       	movw	r22, r14
    3a68:	80 e3       	ldi	r24, 0x30	; 48
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	5c d4       	rcall	.+2232   	; 0x4326 <fputc>
    3a6e:	5a 94       	dec	r5
    3a70:	f8 cf       	rjmp	.-16     	; 0x3a62 <vfprintf+0x2ac>
    3a72:	97 fe       	sbrs	r9, 7
    3a74:	4a c0       	rjmp	.+148    	; 0x3b0a <vfprintf+0x354>
    3a76:	46 01       	movw	r8, r12
    3a78:	d7 fe       	sbrs	r13, 7
    3a7a:	02 c0       	rjmp	.+4      	; 0x3a80 <vfprintf+0x2ca>
    3a7c:	81 2c       	mov	r8, r1
    3a7e:	91 2c       	mov	r9, r1
    3a80:	c6 01       	movw	r24, r12
    3a82:	88 19       	sub	r24, r8
    3a84:	99 09       	sbc	r25, r9
    3a86:	f3 01       	movw	r30, r6
    3a88:	e8 0f       	add	r30, r24
    3a8a:	f9 1f       	adc	r31, r25
    3a8c:	ed 87       	std	Y+13, r30	; 0x0d
    3a8e:	fe 87       	std	Y+14, r31	; 0x0e
    3a90:	96 01       	movw	r18, r12
    3a92:	24 19       	sub	r18, r4
    3a94:	31 09       	sbc	r19, r1
    3a96:	2f 87       	std	Y+15, r18	; 0x0f
    3a98:	38 8b       	std	Y+16, r19	; 0x10
    3a9a:	01 2f       	mov	r16, r17
    3a9c:	10 e0       	ldi	r17, 0x00	; 0
    3a9e:	11 95       	neg	r17
    3aa0:	01 95       	neg	r16
    3aa2:	11 09       	sbc	r17, r1
    3aa4:	3f ef       	ldi	r19, 0xFF	; 255
    3aa6:	83 16       	cp	r8, r19
    3aa8:	93 06       	cpc	r9, r19
    3aaa:	21 f4       	brne	.+8      	; 0x3ab4 <vfprintf+0x2fe>
    3aac:	b7 01       	movw	r22, r14
    3aae:	8e e2       	ldi	r24, 0x2E	; 46
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	39 d4       	rcall	.+2162   	; 0x4326 <fputc>
    3ab4:	c8 14       	cp	r12, r8
    3ab6:	d9 04       	cpc	r13, r9
    3ab8:	4c f0       	brlt	.+18     	; 0x3acc <vfprintf+0x316>
    3aba:	8f 85       	ldd	r24, Y+15	; 0x0f
    3abc:	98 89       	ldd	r25, Y+16	; 0x10
    3abe:	88 15       	cp	r24, r8
    3ac0:	99 05       	cpc	r25, r9
    3ac2:	24 f4       	brge	.+8      	; 0x3acc <vfprintf+0x316>
    3ac4:	ed 85       	ldd	r30, Y+13	; 0x0d
    3ac6:	fe 85       	ldd	r31, Y+14	; 0x0e
    3ac8:	81 81       	ldd	r24, Z+1	; 0x01
    3aca:	01 c0       	rjmp	.+2      	; 0x3ace <vfprintf+0x318>
    3acc:	80 e3       	ldi	r24, 0x30	; 48
    3ace:	f1 e0       	ldi	r31, 0x01	; 1
    3ad0:	8f 1a       	sub	r8, r31
    3ad2:	91 08       	sbc	r9, r1
    3ad4:	2d 85       	ldd	r18, Y+13	; 0x0d
    3ad6:	3e 85       	ldd	r19, Y+14	; 0x0e
    3ad8:	2f 5f       	subi	r18, 0xFF	; 255
    3ada:	3f 4f       	sbci	r19, 0xFF	; 255
    3adc:	2d 87       	std	Y+13, r18	; 0x0d
    3ade:	3e 87       	std	Y+14, r19	; 0x0e
    3ae0:	80 16       	cp	r8, r16
    3ae2:	91 06       	cpc	r9, r17
    3ae4:	24 f0       	brlt	.+8      	; 0x3aee <vfprintf+0x338>
    3ae6:	b7 01       	movw	r22, r14
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	1d d4       	rcall	.+2106   	; 0x4326 <fputc>
    3aec:	db cf       	rjmp	.-74     	; 0x3aa4 <vfprintf+0x2ee>
    3aee:	c8 14       	cp	r12, r8
    3af0:	d9 04       	cpc	r13, r9
    3af2:	41 f4       	brne	.+16     	; 0x3b04 <vfprintf+0x34e>
    3af4:	9a 81       	ldd	r25, Y+2	; 0x02
    3af6:	96 33       	cpi	r25, 0x36	; 54
    3af8:	20 f4       	brcc	.+8      	; 0x3b02 <vfprintf+0x34c>
    3afa:	95 33       	cpi	r25, 0x35	; 53
    3afc:	19 f4       	brne	.+6      	; 0x3b04 <vfprintf+0x34e>
    3afe:	3c 85       	ldd	r19, Y+12	; 0x0c
    3b00:	34 ff       	sbrs	r19, 4
    3b02:	81 e3       	ldi	r24, 0x31	; 49
    3b04:	b7 01       	movw	r22, r14
    3b06:	90 e0       	ldi	r25, 0x00	; 0
    3b08:	48 c0       	rjmp	.+144    	; 0x3b9a <vfprintf+0x3e4>
    3b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0c:	81 33       	cpi	r24, 0x31	; 49
    3b0e:	19 f0       	breq	.+6      	; 0x3b16 <vfprintf+0x360>
    3b10:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b12:	9f 7e       	andi	r25, 0xEF	; 239
    3b14:	9c 87       	std	Y+12, r25	; 0x0c
    3b16:	b7 01       	movw	r22, r14
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	05 d4       	rcall	.+2058   	; 0x4326 <fputc>
    3b1c:	11 11       	cpse	r17, r1
    3b1e:	05 c0       	rjmp	.+10     	; 0x3b2a <vfprintf+0x374>
    3b20:	94 fc       	sbrc	r9, 4
    3b22:	16 c0       	rjmp	.+44     	; 0x3b50 <vfprintf+0x39a>
    3b24:	85 e6       	ldi	r24, 0x65	; 101
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	15 c0       	rjmp	.+42     	; 0x3b54 <vfprintf+0x39e>
    3b2a:	b7 01       	movw	r22, r14
    3b2c:	8e e2       	ldi	r24, 0x2E	; 46
    3b2e:	90 e0       	ldi	r25, 0x00	; 0
    3b30:	fa d3       	rcall	.+2036   	; 0x4326 <fputc>
    3b32:	1e 5f       	subi	r17, 0xFE	; 254
    3b34:	82 e0       	ldi	r24, 0x02	; 2
    3b36:	01 e0       	ldi	r16, 0x01	; 1
    3b38:	08 0f       	add	r16, r24
    3b3a:	f3 01       	movw	r30, r6
    3b3c:	e8 0f       	add	r30, r24
    3b3e:	f1 1d       	adc	r31, r1
    3b40:	80 81       	ld	r24, Z
    3b42:	b7 01       	movw	r22, r14
    3b44:	90 e0       	ldi	r25, 0x00	; 0
    3b46:	ef d3       	rcall	.+2014   	; 0x4326 <fputc>
    3b48:	80 2f       	mov	r24, r16
    3b4a:	01 13       	cpse	r16, r17
    3b4c:	f4 cf       	rjmp	.-24     	; 0x3b36 <vfprintf+0x380>
    3b4e:	e8 cf       	rjmp	.-48     	; 0x3b20 <vfprintf+0x36a>
    3b50:	85 e4       	ldi	r24, 0x45	; 69
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	b7 01       	movw	r22, r14
    3b56:	e7 d3       	rcall	.+1998   	; 0x4326 <fputc>
    3b58:	d7 fc       	sbrc	r13, 7
    3b5a:	06 c0       	rjmp	.+12     	; 0x3b68 <vfprintf+0x3b2>
    3b5c:	c1 14       	cp	r12, r1
    3b5e:	d1 04       	cpc	r13, r1
    3b60:	41 f4       	brne	.+16     	; 0x3b72 <vfprintf+0x3bc>
    3b62:	ec 85       	ldd	r30, Y+12	; 0x0c
    3b64:	e4 ff       	sbrs	r30, 4
    3b66:	05 c0       	rjmp	.+10     	; 0x3b72 <vfprintf+0x3bc>
    3b68:	d1 94       	neg	r13
    3b6a:	c1 94       	neg	r12
    3b6c:	d1 08       	sbc	r13, r1
    3b6e:	8d e2       	ldi	r24, 0x2D	; 45
    3b70:	01 c0       	rjmp	.+2      	; 0x3b74 <vfprintf+0x3be>
    3b72:	8b e2       	ldi	r24, 0x2B	; 43
    3b74:	b7 01       	movw	r22, r14
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	d6 d3       	rcall	.+1964   	; 0x4326 <fputc>
    3b7a:	80 e3       	ldi	r24, 0x30	; 48
    3b7c:	2a e0       	ldi	r18, 0x0A	; 10
    3b7e:	c2 16       	cp	r12, r18
    3b80:	d1 04       	cpc	r13, r1
    3b82:	2c f0       	brlt	.+10     	; 0x3b8e <vfprintf+0x3d8>
    3b84:	8f 5f       	subi	r24, 0xFF	; 255
    3b86:	fa e0       	ldi	r31, 0x0A	; 10
    3b88:	cf 1a       	sub	r12, r31
    3b8a:	d1 08       	sbc	r13, r1
    3b8c:	f7 cf       	rjmp	.-18     	; 0x3b7c <vfprintf+0x3c6>
    3b8e:	b7 01       	movw	r22, r14
    3b90:	90 e0       	ldi	r25, 0x00	; 0
    3b92:	c9 d3       	rcall	.+1938   	; 0x4326 <fputc>
    3b94:	b7 01       	movw	r22, r14
    3b96:	c6 01       	movw	r24, r12
    3b98:	c0 96       	adiw	r24, 0x30	; 48
    3b9a:	c5 d3       	rcall	.+1930   	; 0x4326 <fputc>
    3b9c:	49 c1       	rjmp	.+658    	; 0x3e30 <vfprintf+0x67a>
    3b9e:	83 36       	cpi	r24, 0x63	; 99
    3ba0:	31 f0       	breq	.+12     	; 0x3bae <vfprintf+0x3f8>
    3ba2:	83 37       	cpi	r24, 0x73	; 115
    3ba4:	79 f0       	breq	.+30     	; 0x3bc4 <vfprintf+0x40e>
    3ba6:	83 35       	cpi	r24, 0x53	; 83
    3ba8:	09 f0       	breq	.+2      	; 0x3bac <vfprintf+0x3f6>
    3baa:	52 c0       	rjmp	.+164    	; 0x3c50 <vfprintf+0x49a>
    3bac:	1f c0       	rjmp	.+62     	; 0x3bec <vfprintf+0x436>
    3bae:	56 01       	movw	r10, r12
    3bb0:	32 e0       	ldi	r19, 0x02	; 2
    3bb2:	a3 0e       	add	r10, r19
    3bb4:	b1 1c       	adc	r11, r1
    3bb6:	f6 01       	movw	r30, r12
    3bb8:	80 81       	ld	r24, Z
    3bba:	89 83       	std	Y+1, r24	; 0x01
    3bbc:	01 e0       	ldi	r16, 0x01	; 1
    3bbe:	10 e0       	ldi	r17, 0x00	; 0
    3bc0:	63 01       	movw	r12, r6
    3bc2:	11 c0       	rjmp	.+34     	; 0x3be6 <vfprintf+0x430>
    3bc4:	56 01       	movw	r10, r12
    3bc6:	f2 e0       	ldi	r31, 0x02	; 2
    3bc8:	af 0e       	add	r10, r31
    3bca:	b1 1c       	adc	r11, r1
    3bcc:	f6 01       	movw	r30, r12
    3bce:	c0 80       	ld	r12, Z
    3bd0:	d1 80       	ldd	r13, Z+1	; 0x01
    3bd2:	96 fe       	sbrs	r9, 6
    3bd4:	03 c0       	rjmp	.+6      	; 0x3bdc <vfprintf+0x426>
    3bd6:	61 2f       	mov	r22, r17
    3bd8:	70 e0       	ldi	r23, 0x00	; 0
    3bda:	02 c0       	rjmp	.+4      	; 0x3be0 <vfprintf+0x42a>
    3bdc:	6f ef       	ldi	r22, 0xFF	; 255
    3bde:	7f ef       	ldi	r23, 0xFF	; 255
    3be0:	c6 01       	movw	r24, r12
    3be2:	4c d3       	rcall	.+1688   	; 0x427c <strnlen>
    3be4:	8c 01       	movw	r16, r24
    3be6:	f9 2d       	mov	r31, r9
    3be8:	ff 77       	andi	r31, 0x7F	; 127
    3bea:	13 c0       	rjmp	.+38     	; 0x3c12 <vfprintf+0x45c>
    3bec:	56 01       	movw	r10, r12
    3bee:	22 e0       	ldi	r18, 0x02	; 2
    3bf0:	a2 0e       	add	r10, r18
    3bf2:	b1 1c       	adc	r11, r1
    3bf4:	f6 01       	movw	r30, r12
    3bf6:	c0 80       	ld	r12, Z
    3bf8:	d1 80       	ldd	r13, Z+1	; 0x01
    3bfa:	96 fe       	sbrs	r9, 6
    3bfc:	03 c0       	rjmp	.+6      	; 0x3c04 <vfprintf+0x44e>
    3bfe:	61 2f       	mov	r22, r17
    3c00:	70 e0       	ldi	r23, 0x00	; 0
    3c02:	02 c0       	rjmp	.+4      	; 0x3c08 <vfprintf+0x452>
    3c04:	6f ef       	ldi	r22, 0xFF	; 255
    3c06:	7f ef       	ldi	r23, 0xFF	; 255
    3c08:	c6 01       	movw	r24, r12
    3c0a:	2d d3       	rcall	.+1626   	; 0x4266 <strnlen_P>
    3c0c:	8c 01       	movw	r16, r24
    3c0e:	f9 2d       	mov	r31, r9
    3c10:	f0 68       	ori	r31, 0x80	; 128
    3c12:	9f 2e       	mov	r9, r31
    3c14:	f3 fd       	sbrc	r31, 3
    3c16:	18 c0       	rjmp	.+48     	; 0x3c48 <vfprintf+0x492>
    3c18:	85 2d       	mov	r24, r5
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	08 17       	cp	r16, r24
    3c1e:	19 07       	cpc	r17, r25
    3c20:	98 f4       	brcc	.+38     	; 0x3c48 <vfprintf+0x492>
    3c22:	b7 01       	movw	r22, r14
    3c24:	80 e2       	ldi	r24, 0x20	; 32
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	7e d3       	rcall	.+1788   	; 0x4326 <fputc>
    3c2a:	5a 94       	dec	r5
    3c2c:	f5 cf       	rjmp	.-22     	; 0x3c18 <vfprintf+0x462>
    3c2e:	f6 01       	movw	r30, r12
    3c30:	97 fc       	sbrc	r9, 7
    3c32:	85 91       	lpm	r24, Z+
    3c34:	97 fe       	sbrs	r9, 7
    3c36:	81 91       	ld	r24, Z+
    3c38:	6f 01       	movw	r12, r30
    3c3a:	b7 01       	movw	r22, r14
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	73 d3       	rcall	.+1766   	; 0x4326 <fputc>
    3c40:	51 10       	cpse	r5, r1
    3c42:	5a 94       	dec	r5
    3c44:	01 50       	subi	r16, 0x01	; 1
    3c46:	11 09       	sbc	r17, r1
    3c48:	01 15       	cp	r16, r1
    3c4a:	11 05       	cpc	r17, r1
    3c4c:	81 f7       	brne	.-32     	; 0x3c2e <vfprintf+0x478>
    3c4e:	f0 c0       	rjmp	.+480    	; 0x3e30 <vfprintf+0x67a>
    3c50:	84 36       	cpi	r24, 0x64	; 100
    3c52:	11 f0       	breq	.+4      	; 0x3c58 <vfprintf+0x4a2>
    3c54:	89 36       	cpi	r24, 0x69	; 105
    3c56:	59 f5       	brne	.+86     	; 0x3cae <vfprintf+0x4f8>
    3c58:	56 01       	movw	r10, r12
    3c5a:	97 fe       	sbrs	r9, 7
    3c5c:	09 c0       	rjmp	.+18     	; 0x3c70 <vfprintf+0x4ba>
    3c5e:	24 e0       	ldi	r18, 0x04	; 4
    3c60:	a2 0e       	add	r10, r18
    3c62:	b1 1c       	adc	r11, r1
    3c64:	f6 01       	movw	r30, r12
    3c66:	60 81       	ld	r22, Z
    3c68:	71 81       	ldd	r23, Z+1	; 0x01
    3c6a:	82 81       	ldd	r24, Z+2	; 0x02
    3c6c:	93 81       	ldd	r25, Z+3	; 0x03
    3c6e:	0a c0       	rjmp	.+20     	; 0x3c84 <vfprintf+0x4ce>
    3c70:	f2 e0       	ldi	r31, 0x02	; 2
    3c72:	af 0e       	add	r10, r31
    3c74:	b1 1c       	adc	r11, r1
    3c76:	f6 01       	movw	r30, r12
    3c78:	60 81       	ld	r22, Z
    3c7a:	71 81       	ldd	r23, Z+1	; 0x01
    3c7c:	07 2e       	mov	r0, r23
    3c7e:	00 0c       	add	r0, r0
    3c80:	88 0b       	sbc	r24, r24
    3c82:	99 0b       	sbc	r25, r25
    3c84:	f9 2d       	mov	r31, r9
    3c86:	ff 76       	andi	r31, 0x6F	; 111
    3c88:	9f 2e       	mov	r9, r31
    3c8a:	97 ff       	sbrs	r25, 7
    3c8c:	09 c0       	rjmp	.+18     	; 0x3ca0 <vfprintf+0x4ea>
    3c8e:	90 95       	com	r25
    3c90:	80 95       	com	r24
    3c92:	70 95       	com	r23
    3c94:	61 95       	neg	r22
    3c96:	7f 4f       	sbci	r23, 0xFF	; 255
    3c98:	8f 4f       	sbci	r24, 0xFF	; 255
    3c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c9c:	f0 68       	ori	r31, 0x80	; 128
    3c9e:	9f 2e       	mov	r9, r31
    3ca0:	2a e0       	ldi	r18, 0x0A	; 10
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	a3 01       	movw	r20, r6
    3ca6:	e0 d3       	rcall	.+1984   	; 0x4468 <__ultoa_invert>
    3ca8:	c8 2e       	mov	r12, r24
    3caa:	c6 18       	sub	r12, r6
    3cac:	3e c0       	rjmp	.+124    	; 0x3d2a <vfprintf+0x574>
    3cae:	09 2d       	mov	r16, r9
    3cb0:	85 37       	cpi	r24, 0x75	; 117
    3cb2:	21 f4       	brne	.+8      	; 0x3cbc <vfprintf+0x506>
    3cb4:	0f 7e       	andi	r16, 0xEF	; 239
    3cb6:	2a e0       	ldi	r18, 0x0A	; 10
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	1d c0       	rjmp	.+58     	; 0x3cf6 <vfprintf+0x540>
    3cbc:	09 7f       	andi	r16, 0xF9	; 249
    3cbe:	8f 36       	cpi	r24, 0x6F	; 111
    3cc0:	91 f0       	breq	.+36     	; 0x3ce6 <vfprintf+0x530>
    3cc2:	18 f4       	brcc	.+6      	; 0x3cca <vfprintf+0x514>
    3cc4:	88 35       	cpi	r24, 0x58	; 88
    3cc6:	59 f0       	breq	.+22     	; 0x3cde <vfprintf+0x528>
    3cc8:	bc c0       	rjmp	.+376    	; 0x3e42 <vfprintf+0x68c>
    3cca:	80 37       	cpi	r24, 0x70	; 112
    3ccc:	19 f0       	breq	.+6      	; 0x3cd4 <vfprintf+0x51e>
    3cce:	88 37       	cpi	r24, 0x78	; 120
    3cd0:	11 f0       	breq	.+4      	; 0x3cd6 <vfprintf+0x520>
    3cd2:	b7 c0       	rjmp	.+366    	; 0x3e42 <vfprintf+0x68c>
    3cd4:	00 61       	ori	r16, 0x10	; 16
    3cd6:	04 ff       	sbrs	r16, 4
    3cd8:	09 c0       	rjmp	.+18     	; 0x3cec <vfprintf+0x536>
    3cda:	04 60       	ori	r16, 0x04	; 4
    3cdc:	07 c0       	rjmp	.+14     	; 0x3cec <vfprintf+0x536>
    3cde:	94 fe       	sbrs	r9, 4
    3ce0:	08 c0       	rjmp	.+16     	; 0x3cf2 <vfprintf+0x53c>
    3ce2:	06 60       	ori	r16, 0x06	; 6
    3ce4:	06 c0       	rjmp	.+12     	; 0x3cf2 <vfprintf+0x53c>
    3ce6:	28 e0       	ldi	r18, 0x08	; 8
    3ce8:	30 e0       	ldi	r19, 0x00	; 0
    3cea:	05 c0       	rjmp	.+10     	; 0x3cf6 <vfprintf+0x540>
    3cec:	20 e1       	ldi	r18, 0x10	; 16
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	02 c0       	rjmp	.+4      	; 0x3cf6 <vfprintf+0x540>
    3cf2:	20 e1       	ldi	r18, 0x10	; 16
    3cf4:	32 e0       	ldi	r19, 0x02	; 2
    3cf6:	56 01       	movw	r10, r12
    3cf8:	07 ff       	sbrs	r16, 7
    3cfa:	09 c0       	rjmp	.+18     	; 0x3d0e <vfprintf+0x558>
    3cfc:	84 e0       	ldi	r24, 0x04	; 4
    3cfe:	a8 0e       	add	r10, r24
    3d00:	b1 1c       	adc	r11, r1
    3d02:	f6 01       	movw	r30, r12
    3d04:	60 81       	ld	r22, Z
    3d06:	71 81       	ldd	r23, Z+1	; 0x01
    3d08:	82 81       	ldd	r24, Z+2	; 0x02
    3d0a:	93 81       	ldd	r25, Z+3	; 0x03
    3d0c:	08 c0       	rjmp	.+16     	; 0x3d1e <vfprintf+0x568>
    3d0e:	f2 e0       	ldi	r31, 0x02	; 2
    3d10:	af 0e       	add	r10, r31
    3d12:	b1 1c       	adc	r11, r1
    3d14:	f6 01       	movw	r30, r12
    3d16:	60 81       	ld	r22, Z
    3d18:	71 81       	ldd	r23, Z+1	; 0x01
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	a3 01       	movw	r20, r6
    3d20:	a3 d3       	rcall	.+1862   	; 0x4468 <__ultoa_invert>
    3d22:	c8 2e       	mov	r12, r24
    3d24:	c6 18       	sub	r12, r6
    3d26:	0f 77       	andi	r16, 0x7F	; 127
    3d28:	90 2e       	mov	r9, r16
    3d2a:	96 fe       	sbrs	r9, 6
    3d2c:	0b c0       	rjmp	.+22     	; 0x3d44 <vfprintf+0x58e>
    3d2e:	09 2d       	mov	r16, r9
    3d30:	0e 7f       	andi	r16, 0xFE	; 254
    3d32:	c1 16       	cp	r12, r17
    3d34:	50 f4       	brcc	.+20     	; 0x3d4a <vfprintf+0x594>
    3d36:	94 fe       	sbrs	r9, 4
    3d38:	0a c0       	rjmp	.+20     	; 0x3d4e <vfprintf+0x598>
    3d3a:	92 fc       	sbrc	r9, 2
    3d3c:	08 c0       	rjmp	.+16     	; 0x3d4e <vfprintf+0x598>
    3d3e:	09 2d       	mov	r16, r9
    3d40:	0e 7e       	andi	r16, 0xEE	; 238
    3d42:	05 c0       	rjmp	.+10     	; 0x3d4e <vfprintf+0x598>
    3d44:	dc 2c       	mov	r13, r12
    3d46:	09 2d       	mov	r16, r9
    3d48:	03 c0       	rjmp	.+6      	; 0x3d50 <vfprintf+0x59a>
    3d4a:	dc 2c       	mov	r13, r12
    3d4c:	01 c0       	rjmp	.+2      	; 0x3d50 <vfprintf+0x59a>
    3d4e:	d1 2e       	mov	r13, r17
    3d50:	04 ff       	sbrs	r16, 4
    3d52:	0d c0       	rjmp	.+26     	; 0x3d6e <vfprintf+0x5b8>
    3d54:	fe 01       	movw	r30, r28
    3d56:	ec 0d       	add	r30, r12
    3d58:	f1 1d       	adc	r31, r1
    3d5a:	80 81       	ld	r24, Z
    3d5c:	80 33       	cpi	r24, 0x30	; 48
    3d5e:	11 f4       	brne	.+4      	; 0x3d64 <vfprintf+0x5ae>
    3d60:	09 7e       	andi	r16, 0xE9	; 233
    3d62:	09 c0       	rjmp	.+18     	; 0x3d76 <vfprintf+0x5c0>
    3d64:	02 ff       	sbrs	r16, 2
    3d66:	06 c0       	rjmp	.+12     	; 0x3d74 <vfprintf+0x5be>
    3d68:	d3 94       	inc	r13
    3d6a:	d3 94       	inc	r13
    3d6c:	04 c0       	rjmp	.+8      	; 0x3d76 <vfprintf+0x5c0>
    3d6e:	80 2f       	mov	r24, r16
    3d70:	86 78       	andi	r24, 0x86	; 134
    3d72:	09 f0       	breq	.+2      	; 0x3d76 <vfprintf+0x5c0>
    3d74:	d3 94       	inc	r13
    3d76:	03 fd       	sbrc	r16, 3
    3d78:	10 c0       	rjmp	.+32     	; 0x3d9a <vfprintf+0x5e4>
    3d7a:	00 ff       	sbrs	r16, 0
    3d7c:	06 c0       	rjmp	.+12     	; 0x3d8a <vfprintf+0x5d4>
    3d7e:	1c 2d       	mov	r17, r12
    3d80:	d5 14       	cp	r13, r5
    3d82:	78 f4       	brcc	.+30     	; 0x3da2 <vfprintf+0x5ec>
    3d84:	15 0d       	add	r17, r5
    3d86:	1d 19       	sub	r17, r13
    3d88:	0c c0       	rjmp	.+24     	; 0x3da2 <vfprintf+0x5ec>
    3d8a:	d5 14       	cp	r13, r5
    3d8c:	50 f4       	brcc	.+20     	; 0x3da2 <vfprintf+0x5ec>
    3d8e:	b7 01       	movw	r22, r14
    3d90:	80 e2       	ldi	r24, 0x20	; 32
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	c8 d2       	rcall	.+1424   	; 0x4326 <fputc>
    3d96:	d3 94       	inc	r13
    3d98:	f8 cf       	rjmp	.-16     	; 0x3d8a <vfprintf+0x5d4>
    3d9a:	d5 14       	cp	r13, r5
    3d9c:	10 f4       	brcc	.+4      	; 0x3da2 <vfprintf+0x5ec>
    3d9e:	5d 18       	sub	r5, r13
    3da0:	01 c0       	rjmp	.+2      	; 0x3da4 <vfprintf+0x5ee>
    3da2:	51 2c       	mov	r5, r1
    3da4:	04 ff       	sbrs	r16, 4
    3da6:	0f c0       	rjmp	.+30     	; 0x3dc6 <vfprintf+0x610>
    3da8:	b7 01       	movw	r22, r14
    3daa:	80 e3       	ldi	r24, 0x30	; 48
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	bb d2       	rcall	.+1398   	; 0x4326 <fputc>
    3db0:	02 ff       	sbrs	r16, 2
    3db2:	16 c0       	rjmp	.+44     	; 0x3de0 <vfprintf+0x62a>
    3db4:	01 fd       	sbrc	r16, 1
    3db6:	03 c0       	rjmp	.+6      	; 0x3dbe <vfprintf+0x608>
    3db8:	88 e7       	ldi	r24, 0x78	; 120
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	02 c0       	rjmp	.+4      	; 0x3dc2 <vfprintf+0x60c>
    3dbe:	88 e5       	ldi	r24, 0x58	; 88
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	b7 01       	movw	r22, r14
    3dc4:	0c c0       	rjmp	.+24     	; 0x3dde <vfprintf+0x628>
    3dc6:	80 2f       	mov	r24, r16
    3dc8:	86 78       	andi	r24, 0x86	; 134
    3dca:	51 f0       	breq	.+20     	; 0x3de0 <vfprintf+0x62a>
    3dcc:	01 ff       	sbrs	r16, 1
    3dce:	02 c0       	rjmp	.+4      	; 0x3dd4 <vfprintf+0x61e>
    3dd0:	8b e2       	ldi	r24, 0x2B	; 43
    3dd2:	01 c0       	rjmp	.+2      	; 0x3dd6 <vfprintf+0x620>
    3dd4:	80 e2       	ldi	r24, 0x20	; 32
    3dd6:	07 fd       	sbrc	r16, 7
    3dd8:	8d e2       	ldi	r24, 0x2D	; 45
    3dda:	b7 01       	movw	r22, r14
    3ddc:	90 e0       	ldi	r25, 0x00	; 0
    3dde:	a3 d2       	rcall	.+1350   	; 0x4326 <fputc>
    3de0:	c1 16       	cp	r12, r17
    3de2:	30 f4       	brcc	.+12     	; 0x3df0 <vfprintf+0x63a>
    3de4:	b7 01       	movw	r22, r14
    3de6:	80 e3       	ldi	r24, 0x30	; 48
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	9d d2       	rcall	.+1338   	; 0x4326 <fputc>
    3dec:	11 50       	subi	r17, 0x01	; 1
    3dee:	f8 cf       	rjmp	.-16     	; 0x3de0 <vfprintf+0x62a>
    3df0:	ca 94       	dec	r12
    3df2:	f3 01       	movw	r30, r6
    3df4:	ec 0d       	add	r30, r12
    3df6:	f1 1d       	adc	r31, r1
    3df8:	80 81       	ld	r24, Z
    3dfa:	b7 01       	movw	r22, r14
    3dfc:	90 e0       	ldi	r25, 0x00	; 0
    3dfe:	93 d2       	rcall	.+1318   	; 0x4326 <fputc>
    3e00:	c1 10       	cpse	r12, r1
    3e02:	f6 cf       	rjmp	.-20     	; 0x3df0 <vfprintf+0x63a>
    3e04:	15 c0       	rjmp	.+42     	; 0x3e30 <vfprintf+0x67a>
    3e06:	f4 e0       	ldi	r31, 0x04	; 4
    3e08:	f5 15       	cp	r31, r5
    3e0a:	50 f5       	brcc	.+84     	; 0x3e60 <vfprintf+0x6aa>
    3e0c:	84 e0       	ldi	r24, 0x04	; 4
    3e0e:	58 1a       	sub	r5, r24
    3e10:	93 fe       	sbrs	r9, 3
    3e12:	1e c0       	rjmp	.+60     	; 0x3e50 <vfprintf+0x69a>
    3e14:	01 11       	cpse	r16, r1
    3e16:	25 c0       	rjmp	.+74     	; 0x3e62 <vfprintf+0x6ac>
    3e18:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e1a:	23 ff       	sbrs	r18, 3
    3e1c:	27 c0       	rjmp	.+78     	; 0x3e6c <vfprintf+0x6b6>
    3e1e:	0e e7       	ldi	r16, 0x7E	; 126
    3e20:	12 e0       	ldi	r17, 0x02	; 2
    3e22:	39 2d       	mov	r19, r9
    3e24:	30 71       	andi	r19, 0x10	; 16
    3e26:	93 2e       	mov	r9, r19
    3e28:	f8 01       	movw	r30, r16
    3e2a:	84 91       	lpm	r24, Z
    3e2c:	81 11       	cpse	r24, r1
    3e2e:	21 c0       	rjmp	.+66     	; 0x3e72 <vfprintf+0x6bc>
    3e30:	55 20       	and	r5, r5
    3e32:	09 f4       	brne	.+2      	; 0x3e36 <vfprintf+0x680>
    3e34:	fc cc       	rjmp	.-1544   	; 0x382e <vfprintf+0x78>
    3e36:	b7 01       	movw	r22, r14
    3e38:	80 e2       	ldi	r24, 0x20	; 32
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	74 d2       	rcall	.+1256   	; 0x4326 <fputc>
    3e3e:	5a 94       	dec	r5
    3e40:	f7 cf       	rjmp	.-18     	; 0x3e30 <vfprintf+0x67a>
    3e42:	f7 01       	movw	r30, r14
    3e44:	86 81       	ldd	r24, Z+6	; 0x06
    3e46:	97 81       	ldd	r25, Z+7	; 0x07
    3e48:	23 c0       	rjmp	.+70     	; 0x3e90 <vfprintf+0x6da>
    3e4a:	8f ef       	ldi	r24, 0xFF	; 255
    3e4c:	9f ef       	ldi	r25, 0xFF	; 255
    3e4e:	20 c0       	rjmp	.+64     	; 0x3e90 <vfprintf+0x6da>
    3e50:	b7 01       	movw	r22, r14
    3e52:	80 e2       	ldi	r24, 0x20	; 32
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	67 d2       	rcall	.+1230   	; 0x4326 <fputc>
    3e58:	5a 94       	dec	r5
    3e5a:	51 10       	cpse	r5, r1
    3e5c:	f9 cf       	rjmp	.-14     	; 0x3e50 <vfprintf+0x69a>
    3e5e:	da cf       	rjmp	.-76     	; 0x3e14 <vfprintf+0x65e>
    3e60:	51 2c       	mov	r5, r1
    3e62:	b7 01       	movw	r22, r14
    3e64:	80 2f       	mov	r24, r16
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	5e d2       	rcall	.+1212   	; 0x4326 <fputc>
    3e6a:	d6 cf       	rjmp	.-84     	; 0x3e18 <vfprintf+0x662>
    3e6c:	02 e8       	ldi	r16, 0x82	; 130
    3e6e:	12 e0       	ldi	r17, 0x02	; 2
    3e70:	d8 cf       	rjmp	.-80     	; 0x3e22 <vfprintf+0x66c>
    3e72:	91 10       	cpse	r9, r1
    3e74:	80 52       	subi	r24, 0x20	; 32
    3e76:	b7 01       	movw	r22, r14
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	55 d2       	rcall	.+1194   	; 0x4326 <fputc>
    3e7c:	0f 5f       	subi	r16, 0xFF	; 255
    3e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e80:	d3 cf       	rjmp	.-90     	; 0x3e28 <vfprintf+0x672>
    3e82:	23 e0       	ldi	r18, 0x03	; 3
    3e84:	25 15       	cp	r18, r5
    3e86:	10 f4       	brcc	.+4      	; 0x3e8c <vfprintf+0x6d6>
    3e88:	83 e0       	ldi	r24, 0x03	; 3
    3e8a:	c1 cf       	rjmp	.-126    	; 0x3e0e <vfprintf+0x658>
    3e8c:	51 2c       	mov	r5, r1
    3e8e:	c4 cf       	rjmp	.-120    	; 0x3e18 <vfprintf+0x662>
    3e90:	60 96       	adiw	r28, 0x10	; 16
    3e92:	cd bf       	out	0x3d, r28	; 61
    3e94:	de bf       	out	0x3e, r29	; 62
    3e96:	df 91       	pop	r29
    3e98:	cf 91       	pop	r28
    3e9a:	1f 91       	pop	r17
    3e9c:	0f 91       	pop	r16
    3e9e:	ff 90       	pop	r15
    3ea0:	ef 90       	pop	r14
    3ea2:	df 90       	pop	r13
    3ea4:	cf 90       	pop	r12
    3ea6:	bf 90       	pop	r11
    3ea8:	af 90       	pop	r10
    3eaa:	9f 90       	pop	r9
    3eac:	8f 90       	pop	r8
    3eae:	7f 90       	pop	r7
    3eb0:	6f 90       	pop	r6
    3eb2:	5f 90       	pop	r5
    3eb4:	4f 90       	pop	r4
    3eb6:	3f 90       	pop	r3
    3eb8:	2f 90       	pop	r2
    3eba:	08 95       	ret

00003ebc <__udivmodsi4>:
    3ebc:	a1 e2       	ldi	r26, 0x21	; 33
    3ebe:	1a 2e       	mov	r1, r26
    3ec0:	aa 1b       	sub	r26, r26
    3ec2:	bb 1b       	sub	r27, r27
    3ec4:	fd 01       	movw	r30, r26
    3ec6:	0d c0       	rjmp	.+26     	; 0x3ee2 <__udivmodsi4_ep>

00003ec8 <__udivmodsi4_loop>:
    3ec8:	aa 1f       	adc	r26, r26
    3eca:	bb 1f       	adc	r27, r27
    3ecc:	ee 1f       	adc	r30, r30
    3ece:	ff 1f       	adc	r31, r31
    3ed0:	a2 17       	cp	r26, r18
    3ed2:	b3 07       	cpc	r27, r19
    3ed4:	e4 07       	cpc	r30, r20
    3ed6:	f5 07       	cpc	r31, r21
    3ed8:	20 f0       	brcs	.+8      	; 0x3ee2 <__udivmodsi4_ep>
    3eda:	a2 1b       	sub	r26, r18
    3edc:	b3 0b       	sbc	r27, r19
    3ede:	e4 0b       	sbc	r30, r20
    3ee0:	f5 0b       	sbc	r31, r21

00003ee2 <__udivmodsi4_ep>:
    3ee2:	66 1f       	adc	r22, r22
    3ee4:	77 1f       	adc	r23, r23
    3ee6:	88 1f       	adc	r24, r24
    3ee8:	99 1f       	adc	r25, r25
    3eea:	1a 94       	dec	r1
    3eec:	69 f7       	brne	.-38     	; 0x3ec8 <__udivmodsi4_loop>
    3eee:	60 95       	com	r22
    3ef0:	70 95       	com	r23
    3ef2:	80 95       	com	r24
    3ef4:	90 95       	com	r25
    3ef6:	9b 01       	movw	r18, r22
    3ef8:	ac 01       	movw	r20, r24
    3efa:	bd 01       	movw	r22, r26
    3efc:	cf 01       	movw	r24, r30
    3efe:	08 95       	ret

00003f00 <__divmodsi4>:
    3f00:	05 2e       	mov	r0, r21
    3f02:	97 fb       	bst	r25, 7
    3f04:	16 f4       	brtc	.+4      	; 0x3f0a <__divmodsi4+0xa>
    3f06:	00 94       	com	r0
    3f08:	0f d0       	rcall	.+30     	; 0x3f28 <__negsi2>
    3f0a:	57 fd       	sbrc	r21, 7
    3f0c:	05 d0       	rcall	.+10     	; 0x3f18 <__divmodsi4_neg2>
    3f0e:	d6 df       	rcall	.-84     	; 0x3ebc <__udivmodsi4>
    3f10:	07 fc       	sbrc	r0, 7
    3f12:	02 d0       	rcall	.+4      	; 0x3f18 <__divmodsi4_neg2>
    3f14:	46 f4       	brtc	.+16     	; 0x3f26 <__divmodsi4_exit>
    3f16:	08 c0       	rjmp	.+16     	; 0x3f28 <__negsi2>

00003f18 <__divmodsi4_neg2>:
    3f18:	50 95       	com	r21
    3f1a:	40 95       	com	r20
    3f1c:	30 95       	com	r19
    3f1e:	21 95       	neg	r18
    3f20:	3f 4f       	sbci	r19, 0xFF	; 255
    3f22:	4f 4f       	sbci	r20, 0xFF	; 255
    3f24:	5f 4f       	sbci	r21, 0xFF	; 255

00003f26 <__divmodsi4_exit>:
    3f26:	08 95       	ret

00003f28 <__negsi2>:
    3f28:	90 95       	com	r25
    3f2a:	80 95       	com	r24
    3f2c:	70 95       	com	r23
    3f2e:	61 95       	neg	r22
    3f30:	7f 4f       	sbci	r23, 0xFF	; 255
    3f32:	8f 4f       	sbci	r24, 0xFF	; 255
    3f34:	9f 4f       	sbci	r25, 0xFF	; 255
    3f36:	08 95       	ret

00003f38 <__muluhisi3>:
    3f38:	af d0       	rcall	.+350    	; 0x4098 <__umulhisi3>
    3f3a:	a5 9f       	mul	r26, r21
    3f3c:	90 0d       	add	r25, r0
    3f3e:	b4 9f       	mul	r27, r20
    3f40:	90 0d       	add	r25, r0
    3f42:	a4 9f       	mul	r26, r20
    3f44:	80 0d       	add	r24, r0
    3f46:	91 1d       	adc	r25, r1
    3f48:	11 24       	eor	r1, r1
    3f4a:	08 95       	ret

00003f4c <__muldi3>:
    3f4c:	df 93       	push	r29
    3f4e:	cf 93       	push	r28
    3f50:	1f 93       	push	r17
    3f52:	0f 93       	push	r16
    3f54:	9a 9d       	mul	r25, r10
    3f56:	f0 2d       	mov	r31, r0
    3f58:	21 9f       	mul	r18, r17
    3f5a:	f0 0d       	add	r31, r0
    3f5c:	8b 9d       	mul	r24, r11
    3f5e:	f0 0d       	add	r31, r0
    3f60:	8a 9d       	mul	r24, r10
    3f62:	e0 2d       	mov	r30, r0
    3f64:	f1 0d       	add	r31, r1
    3f66:	03 9f       	mul	r16, r19
    3f68:	f0 0d       	add	r31, r0
    3f6a:	02 9f       	mul	r16, r18
    3f6c:	e0 0d       	add	r30, r0
    3f6e:	f1 1d       	adc	r31, r1
    3f70:	4e 9d       	mul	r20, r14
    3f72:	e0 0d       	add	r30, r0
    3f74:	f1 1d       	adc	r31, r1
    3f76:	5e 9d       	mul	r21, r14
    3f78:	f0 0d       	add	r31, r0
    3f7a:	4f 9d       	mul	r20, r15
    3f7c:	f0 0d       	add	r31, r0
    3f7e:	7f 93       	push	r23
    3f80:	6f 93       	push	r22
    3f82:	bf 92       	push	r11
    3f84:	af 92       	push	r10
    3f86:	5f 93       	push	r21
    3f88:	4f 93       	push	r20
    3f8a:	d5 01       	movw	r26, r10
    3f8c:	85 d0       	rcall	.+266    	; 0x4098 <__umulhisi3>
    3f8e:	8b 01       	movw	r16, r22
    3f90:	ac 01       	movw	r20, r24
    3f92:	d7 01       	movw	r26, r14
    3f94:	81 d0       	rcall	.+258    	; 0x4098 <__umulhisi3>
    3f96:	eb 01       	movw	r28, r22
    3f98:	e8 0f       	add	r30, r24
    3f9a:	f9 1f       	adc	r31, r25
    3f9c:	d6 01       	movw	r26, r12
    3f9e:	1f d0       	rcall	.+62     	; 0x3fde <__muldi3_6>
    3fa0:	2f 91       	pop	r18
    3fa2:	3f 91       	pop	r19
    3fa4:	d6 01       	movw	r26, r12
    3fa6:	78 d0       	rcall	.+240    	; 0x4098 <__umulhisi3>
    3fa8:	c6 0f       	add	r28, r22
    3faa:	d7 1f       	adc	r29, r23
    3fac:	e8 1f       	adc	r30, r24
    3fae:	f9 1f       	adc	r31, r25
    3fb0:	af 91       	pop	r26
    3fb2:	bf 91       	pop	r27
    3fb4:	14 d0       	rcall	.+40     	; 0x3fde <__muldi3_6>
    3fb6:	2f 91       	pop	r18
    3fb8:	3f 91       	pop	r19
    3fba:	6e d0       	rcall	.+220    	; 0x4098 <__umulhisi3>
    3fbc:	c6 0f       	add	r28, r22
    3fbe:	d7 1f       	adc	r29, r23
    3fc0:	e8 1f       	adc	r30, r24
    3fc2:	f9 1f       	adc	r31, r25
    3fc4:	d6 01       	movw	r26, r12
    3fc6:	68 d0       	rcall	.+208    	; 0x4098 <__umulhisi3>
    3fc8:	e6 0f       	add	r30, r22
    3fca:	f7 1f       	adc	r31, r23
    3fcc:	98 01       	movw	r18, r16
    3fce:	be 01       	movw	r22, r28
    3fd0:	cf 01       	movw	r24, r30
    3fd2:	11 24       	eor	r1, r1
    3fd4:	0f 91       	pop	r16
    3fd6:	1f 91       	pop	r17
    3fd8:	cf 91       	pop	r28
    3fda:	df 91       	pop	r29
    3fdc:	08 95       	ret

00003fde <__muldi3_6>:
    3fde:	5c d0       	rcall	.+184    	; 0x4098 <__umulhisi3>
    3fe0:	46 0f       	add	r20, r22
    3fe2:	57 1f       	adc	r21, r23
    3fe4:	c8 1f       	adc	r28, r24
    3fe6:	d9 1f       	adc	r29, r25
    3fe8:	08 f4       	brcc	.+2      	; 0x3fec <__muldi3_6+0xe>
    3fea:	31 96       	adiw	r30, 0x01	; 1
    3fec:	08 95       	ret

00003fee <__ashldi3>:
    3fee:	0f 93       	push	r16
    3ff0:	08 30       	cpi	r16, 0x08	; 8
    3ff2:	90 f0       	brcs	.+36     	; 0x4018 <__stack+0x19>
    3ff4:	98 2f       	mov	r25, r24
    3ff6:	87 2f       	mov	r24, r23
    3ff8:	76 2f       	mov	r23, r22
    3ffa:	65 2f       	mov	r22, r21
    3ffc:	54 2f       	mov	r21, r20
    3ffe:	43 2f       	mov	r20, r19
    4000:	32 2f       	mov	r19, r18
    4002:	22 27       	eor	r18, r18
    4004:	08 50       	subi	r16, 0x08	; 8
    4006:	f4 cf       	rjmp	.-24     	; 0x3ff0 <__ashldi3+0x2>
    4008:	22 0f       	add	r18, r18
    400a:	33 1f       	adc	r19, r19
    400c:	44 1f       	adc	r20, r20
    400e:	55 1f       	adc	r21, r21
    4010:	66 1f       	adc	r22, r22
    4012:	77 1f       	adc	r23, r23
    4014:	88 1f       	adc	r24, r24
    4016:	99 1f       	adc	r25, r25
    4018:	0a 95       	dec	r16
    401a:	b2 f7       	brpl	.-20     	; 0x4008 <__stack+0x9>
    401c:	0f 91       	pop	r16
    401e:	08 95       	ret

00004020 <__ashrdi3>:
    4020:	97 fb       	bst	r25, 7
    4022:	10 f8       	bld	r1, 0

00004024 <__lshrdi3>:
    4024:	16 94       	lsr	r1
    4026:	00 08       	sbc	r0, r0
    4028:	0f 93       	push	r16
    402a:	08 30       	cpi	r16, 0x08	; 8
    402c:	98 f0       	brcs	.+38     	; 0x4054 <__lshrdi3+0x30>
    402e:	08 50       	subi	r16, 0x08	; 8
    4030:	23 2f       	mov	r18, r19
    4032:	34 2f       	mov	r19, r20
    4034:	45 2f       	mov	r20, r21
    4036:	56 2f       	mov	r21, r22
    4038:	67 2f       	mov	r22, r23
    403a:	78 2f       	mov	r23, r24
    403c:	89 2f       	mov	r24, r25
    403e:	90 2d       	mov	r25, r0
    4040:	f4 cf       	rjmp	.-24     	; 0x402a <__lshrdi3+0x6>
    4042:	05 94       	asr	r0
    4044:	97 95       	ror	r25
    4046:	87 95       	ror	r24
    4048:	77 95       	ror	r23
    404a:	67 95       	ror	r22
    404c:	57 95       	ror	r21
    404e:	47 95       	ror	r20
    4050:	37 95       	ror	r19
    4052:	27 95       	ror	r18
    4054:	0a 95       	dec	r16
    4056:	aa f7       	brpl	.-22     	; 0x4042 <__lshrdi3+0x1e>
    4058:	0f 91       	pop	r16
    405a:	08 95       	ret

0000405c <__adddi3>:
    405c:	2a 0d       	add	r18, r10
    405e:	3b 1d       	adc	r19, r11
    4060:	4c 1d       	adc	r20, r12
    4062:	5d 1d       	adc	r21, r13
    4064:	6e 1d       	adc	r22, r14
    4066:	7f 1d       	adc	r23, r15
    4068:	80 1f       	adc	r24, r16
    406a:	91 1f       	adc	r25, r17
    406c:	08 95       	ret

0000406e <__subdi3>:
    406e:	2a 19       	sub	r18, r10
    4070:	3b 09       	sbc	r19, r11
    4072:	4c 09       	sbc	r20, r12
    4074:	5d 09       	sbc	r21, r13
    4076:	6e 09       	sbc	r22, r14
    4078:	7f 09       	sbc	r23, r15
    407a:	80 0b       	sbc	r24, r16
    407c:	91 0b       	sbc	r25, r17
    407e:	08 95       	ret

00004080 <__cmpdi2_s8>:
    4080:	00 24       	eor	r0, r0
    4082:	a7 fd       	sbrc	r26, 7
    4084:	00 94       	com	r0
    4086:	2a 17       	cp	r18, r26
    4088:	30 05       	cpc	r19, r0
    408a:	40 05       	cpc	r20, r0
    408c:	50 05       	cpc	r21, r0
    408e:	60 05       	cpc	r22, r0
    4090:	70 05       	cpc	r23, r0
    4092:	80 05       	cpc	r24, r0
    4094:	90 05       	cpc	r25, r0
    4096:	08 95       	ret

00004098 <__umulhisi3>:
    4098:	a2 9f       	mul	r26, r18
    409a:	b0 01       	movw	r22, r0
    409c:	b3 9f       	mul	r27, r19
    409e:	c0 01       	movw	r24, r0
    40a0:	a3 9f       	mul	r26, r19
    40a2:	70 0d       	add	r23, r0
    40a4:	81 1d       	adc	r24, r1
    40a6:	11 24       	eor	r1, r1
    40a8:	91 1d       	adc	r25, r1
    40aa:	b2 9f       	mul	r27, r18
    40ac:	70 0d       	add	r23, r0
    40ae:	81 1d       	adc	r24, r1
    40b0:	11 24       	eor	r1, r1
    40b2:	91 1d       	adc	r25, r1
    40b4:	08 95       	ret

000040b6 <__ftoa_engine>:
    40b6:	28 30       	cpi	r18, 0x08	; 8
    40b8:	08 f0       	brcs	.+2      	; 0x40bc <__ftoa_engine+0x6>
    40ba:	27 e0       	ldi	r18, 0x07	; 7
    40bc:	33 27       	eor	r19, r19
    40be:	da 01       	movw	r26, r20
    40c0:	99 0f       	add	r25, r25
    40c2:	31 1d       	adc	r19, r1
    40c4:	87 fd       	sbrc	r24, 7
    40c6:	91 60       	ori	r25, 0x01	; 1
    40c8:	00 96       	adiw	r24, 0x00	; 0
    40ca:	61 05       	cpc	r22, r1
    40cc:	71 05       	cpc	r23, r1
    40ce:	39 f4       	brne	.+14     	; 0x40de <__ftoa_engine+0x28>
    40d0:	32 60       	ori	r19, 0x02	; 2
    40d2:	2e 5f       	subi	r18, 0xFE	; 254
    40d4:	3d 93       	st	X+, r19
    40d6:	30 e3       	ldi	r19, 0x30	; 48
    40d8:	2a 95       	dec	r18
    40da:	e1 f7       	brne	.-8      	; 0x40d4 <__ftoa_engine+0x1e>
    40dc:	08 95       	ret
    40de:	9f 3f       	cpi	r25, 0xFF	; 255
    40e0:	30 f0       	brcs	.+12     	; 0x40ee <__ftoa_engine+0x38>
    40e2:	80 38       	cpi	r24, 0x80	; 128
    40e4:	71 05       	cpc	r23, r1
    40e6:	61 05       	cpc	r22, r1
    40e8:	09 f0       	breq	.+2      	; 0x40ec <__ftoa_engine+0x36>
    40ea:	3c 5f       	subi	r19, 0xFC	; 252
    40ec:	3c 5f       	subi	r19, 0xFC	; 252
    40ee:	3d 93       	st	X+, r19
    40f0:	91 30       	cpi	r25, 0x01	; 1
    40f2:	08 f0       	brcs	.+2      	; 0x40f6 <__ftoa_engine+0x40>
    40f4:	80 68       	ori	r24, 0x80	; 128
    40f6:	91 1d       	adc	r25, r1
    40f8:	df 93       	push	r29
    40fa:	cf 93       	push	r28
    40fc:	1f 93       	push	r17
    40fe:	0f 93       	push	r16
    4100:	ff 92       	push	r15
    4102:	ef 92       	push	r14
    4104:	19 2f       	mov	r17, r25
    4106:	98 7f       	andi	r25, 0xF8	; 248
    4108:	96 95       	lsr	r25
    410a:	e9 2f       	mov	r30, r25
    410c:	96 95       	lsr	r25
    410e:	96 95       	lsr	r25
    4110:	e9 0f       	add	r30, r25
    4112:	ff 27       	eor	r31, r31
    4114:	e0 52       	subi	r30, 0x20	; 32
    4116:	fd 4f       	sbci	r31, 0xFD	; 253
    4118:	99 27       	eor	r25, r25
    411a:	33 27       	eor	r19, r19
    411c:	ee 24       	eor	r14, r14
    411e:	ff 24       	eor	r15, r15
    4120:	a7 01       	movw	r20, r14
    4122:	e7 01       	movw	r28, r14
    4124:	05 90       	lpm	r0, Z+
    4126:	08 94       	sec
    4128:	07 94       	ror	r0
    412a:	28 f4       	brcc	.+10     	; 0x4136 <__ftoa_engine+0x80>
    412c:	36 0f       	add	r19, r22
    412e:	e7 1e       	adc	r14, r23
    4130:	f8 1e       	adc	r15, r24
    4132:	49 1f       	adc	r20, r25
    4134:	51 1d       	adc	r21, r1
    4136:	66 0f       	add	r22, r22
    4138:	77 1f       	adc	r23, r23
    413a:	88 1f       	adc	r24, r24
    413c:	99 1f       	adc	r25, r25
    413e:	06 94       	lsr	r0
    4140:	a1 f7       	brne	.-24     	; 0x412a <__ftoa_engine+0x74>
    4142:	05 90       	lpm	r0, Z+
    4144:	07 94       	ror	r0
    4146:	28 f4       	brcc	.+10     	; 0x4152 <__ftoa_engine+0x9c>
    4148:	e7 0e       	add	r14, r23
    414a:	f8 1e       	adc	r15, r24
    414c:	49 1f       	adc	r20, r25
    414e:	56 1f       	adc	r21, r22
    4150:	c1 1d       	adc	r28, r1
    4152:	77 0f       	add	r23, r23
    4154:	88 1f       	adc	r24, r24
    4156:	99 1f       	adc	r25, r25
    4158:	66 1f       	adc	r22, r22
    415a:	06 94       	lsr	r0
    415c:	a1 f7       	brne	.-24     	; 0x4146 <__ftoa_engine+0x90>
    415e:	05 90       	lpm	r0, Z+
    4160:	07 94       	ror	r0
    4162:	28 f4       	brcc	.+10     	; 0x416e <__ftoa_engine+0xb8>
    4164:	f8 0e       	add	r15, r24
    4166:	49 1f       	adc	r20, r25
    4168:	56 1f       	adc	r21, r22
    416a:	c7 1f       	adc	r28, r23
    416c:	d1 1d       	adc	r29, r1
    416e:	88 0f       	add	r24, r24
    4170:	99 1f       	adc	r25, r25
    4172:	66 1f       	adc	r22, r22
    4174:	77 1f       	adc	r23, r23
    4176:	06 94       	lsr	r0
    4178:	a1 f7       	brne	.-24     	; 0x4162 <__ftoa_engine+0xac>
    417a:	05 90       	lpm	r0, Z+
    417c:	07 94       	ror	r0
    417e:	20 f4       	brcc	.+8      	; 0x4188 <__ftoa_engine+0xd2>
    4180:	49 0f       	add	r20, r25
    4182:	56 1f       	adc	r21, r22
    4184:	c7 1f       	adc	r28, r23
    4186:	d8 1f       	adc	r29, r24
    4188:	99 0f       	add	r25, r25
    418a:	66 1f       	adc	r22, r22
    418c:	77 1f       	adc	r23, r23
    418e:	88 1f       	adc	r24, r24
    4190:	06 94       	lsr	r0
    4192:	a9 f7       	brne	.-22     	; 0x417e <__ftoa_engine+0xc8>
    4194:	84 91       	lpm	r24, Z
    4196:	10 95       	com	r17
    4198:	17 70       	andi	r17, 0x07	; 7
    419a:	41 f0       	breq	.+16     	; 0x41ac <__ftoa_engine+0xf6>
    419c:	d6 95       	lsr	r29
    419e:	c7 95       	ror	r28
    41a0:	57 95       	ror	r21
    41a2:	47 95       	ror	r20
    41a4:	f7 94       	ror	r15
    41a6:	e7 94       	ror	r14
    41a8:	1a 95       	dec	r17
    41aa:	c1 f7       	brne	.-16     	; 0x419c <__ftoa_engine+0xe6>
    41ac:	e6 e8       	ldi	r30, 0x86	; 134
    41ae:	f2 e0       	ldi	r31, 0x02	; 2
    41b0:	68 94       	set
    41b2:	15 90       	lpm	r1, Z+
    41b4:	15 91       	lpm	r17, Z+
    41b6:	35 91       	lpm	r19, Z+
    41b8:	65 91       	lpm	r22, Z+
    41ba:	95 91       	lpm	r25, Z+
    41bc:	05 90       	lpm	r0, Z+
    41be:	7f e2       	ldi	r23, 0x2F	; 47
    41c0:	73 95       	inc	r23
    41c2:	e1 18       	sub	r14, r1
    41c4:	f1 0a       	sbc	r15, r17
    41c6:	43 0b       	sbc	r20, r19
    41c8:	56 0b       	sbc	r21, r22
    41ca:	c9 0b       	sbc	r28, r25
    41cc:	d0 09       	sbc	r29, r0
    41ce:	c0 f7       	brcc	.-16     	; 0x41c0 <__ftoa_engine+0x10a>
    41d0:	e1 0c       	add	r14, r1
    41d2:	f1 1e       	adc	r15, r17
    41d4:	43 1f       	adc	r20, r19
    41d6:	56 1f       	adc	r21, r22
    41d8:	c9 1f       	adc	r28, r25
    41da:	d0 1d       	adc	r29, r0
    41dc:	7e f4       	brtc	.+30     	; 0x41fc <__ftoa_engine+0x146>
    41de:	70 33       	cpi	r23, 0x30	; 48
    41e0:	11 f4       	brne	.+4      	; 0x41e6 <__ftoa_engine+0x130>
    41e2:	8a 95       	dec	r24
    41e4:	e6 cf       	rjmp	.-52     	; 0x41b2 <__ftoa_engine+0xfc>
    41e6:	e8 94       	clt
    41e8:	01 50       	subi	r16, 0x01	; 1
    41ea:	30 f0       	brcs	.+12     	; 0x41f8 <__ftoa_engine+0x142>
    41ec:	08 0f       	add	r16, r24
    41ee:	0a f4       	brpl	.+2      	; 0x41f2 <__ftoa_engine+0x13c>
    41f0:	00 27       	eor	r16, r16
    41f2:	02 17       	cp	r16, r18
    41f4:	08 f4       	brcc	.+2      	; 0x41f8 <__ftoa_engine+0x142>
    41f6:	20 2f       	mov	r18, r16
    41f8:	23 95       	inc	r18
    41fa:	02 2f       	mov	r16, r18
    41fc:	7a 33       	cpi	r23, 0x3A	; 58
    41fe:	28 f0       	brcs	.+10     	; 0x420a <__ftoa_engine+0x154>
    4200:	79 e3       	ldi	r23, 0x39	; 57
    4202:	7d 93       	st	X+, r23
    4204:	2a 95       	dec	r18
    4206:	e9 f7       	brne	.-6      	; 0x4202 <__ftoa_engine+0x14c>
    4208:	10 c0       	rjmp	.+32     	; 0x422a <__ftoa_engine+0x174>
    420a:	7d 93       	st	X+, r23
    420c:	2a 95       	dec	r18
    420e:	89 f6       	brne	.-94     	; 0x41b2 <__ftoa_engine+0xfc>
    4210:	06 94       	lsr	r0
    4212:	97 95       	ror	r25
    4214:	67 95       	ror	r22
    4216:	37 95       	ror	r19
    4218:	17 95       	ror	r17
    421a:	17 94       	ror	r1
    421c:	e1 18       	sub	r14, r1
    421e:	f1 0a       	sbc	r15, r17
    4220:	43 0b       	sbc	r20, r19
    4222:	56 0b       	sbc	r21, r22
    4224:	c9 0b       	sbc	r28, r25
    4226:	d0 09       	sbc	r29, r0
    4228:	98 f0       	brcs	.+38     	; 0x4250 <__ftoa_engine+0x19a>
    422a:	23 95       	inc	r18
    422c:	7e 91       	ld	r23, -X
    422e:	73 95       	inc	r23
    4230:	7a 33       	cpi	r23, 0x3A	; 58
    4232:	08 f0       	brcs	.+2      	; 0x4236 <__ftoa_engine+0x180>
    4234:	70 e3       	ldi	r23, 0x30	; 48
    4236:	7c 93       	st	X, r23
    4238:	20 13       	cpse	r18, r16
    423a:	b8 f7       	brcc	.-18     	; 0x422a <__ftoa_engine+0x174>
    423c:	7e 91       	ld	r23, -X
    423e:	70 61       	ori	r23, 0x10	; 16
    4240:	7d 93       	st	X+, r23
    4242:	30 f0       	brcs	.+12     	; 0x4250 <__ftoa_engine+0x19a>
    4244:	83 95       	inc	r24
    4246:	71 e3       	ldi	r23, 0x31	; 49
    4248:	7d 93       	st	X+, r23
    424a:	70 e3       	ldi	r23, 0x30	; 48
    424c:	2a 95       	dec	r18
    424e:	e1 f7       	brne	.-8      	; 0x4248 <__ftoa_engine+0x192>
    4250:	11 24       	eor	r1, r1
    4252:	ef 90       	pop	r14
    4254:	ff 90       	pop	r15
    4256:	0f 91       	pop	r16
    4258:	1f 91       	pop	r17
    425a:	cf 91       	pop	r28
    425c:	df 91       	pop	r29
    425e:	99 27       	eor	r25, r25
    4260:	87 fd       	sbrc	r24, 7
    4262:	90 95       	com	r25
    4264:	08 95       	ret

00004266 <strnlen_P>:
    4266:	fc 01       	movw	r30, r24
    4268:	05 90       	lpm	r0, Z+
    426a:	61 50       	subi	r22, 0x01	; 1
    426c:	70 40       	sbci	r23, 0x00	; 0
    426e:	01 10       	cpse	r0, r1
    4270:	d8 f7       	brcc	.-10     	; 0x4268 <strnlen_P+0x2>
    4272:	80 95       	com	r24
    4274:	90 95       	com	r25
    4276:	8e 0f       	add	r24, r30
    4278:	9f 1f       	adc	r25, r31
    427a:	08 95       	ret

0000427c <strnlen>:
    427c:	fc 01       	movw	r30, r24
    427e:	61 50       	subi	r22, 0x01	; 1
    4280:	70 40       	sbci	r23, 0x00	; 0
    4282:	01 90       	ld	r0, Z+
    4284:	01 10       	cpse	r0, r1
    4286:	d8 f7       	brcc	.-10     	; 0x427e <strnlen+0x2>
    4288:	80 95       	com	r24
    428a:	90 95       	com	r25
    428c:	8e 0f       	add	r24, r30
    428e:	9f 1f       	adc	r25, r31
    4290:	08 95       	ret

00004292 <fdevopen>:
    4292:	0f 93       	push	r16
    4294:	1f 93       	push	r17
    4296:	cf 93       	push	r28
    4298:	df 93       	push	r29
    429a:	00 97       	sbiw	r24, 0x00	; 0
    429c:	31 f4       	brne	.+12     	; 0x42aa <fdevopen+0x18>
    429e:	61 15       	cp	r22, r1
    42a0:	71 05       	cpc	r23, r1
    42a2:	19 f4       	brne	.+6      	; 0x42aa <fdevopen+0x18>
    42a4:	80 e0       	ldi	r24, 0x00	; 0
    42a6:	90 e0       	ldi	r25, 0x00	; 0
    42a8:	39 c0       	rjmp	.+114    	; 0x431c <fdevopen+0x8a>
    42aa:	8b 01       	movw	r16, r22
    42ac:	ec 01       	movw	r28, r24
    42ae:	6e e0       	ldi	r22, 0x0E	; 14
    42b0:	70 e0       	ldi	r23, 0x00	; 0
    42b2:	81 e0       	ldi	r24, 0x01	; 1
    42b4:	90 e0       	ldi	r25, 0x00	; 0
    42b6:	36 d1       	rcall	.+620    	; 0x4524 <calloc>
    42b8:	fc 01       	movw	r30, r24
    42ba:	89 2b       	or	r24, r25
    42bc:	99 f3       	breq	.-26     	; 0x42a4 <fdevopen+0x12>
    42be:	80 e8       	ldi	r24, 0x80	; 128
    42c0:	83 83       	std	Z+3, r24	; 0x03
    42c2:	01 15       	cp	r16, r1
    42c4:	11 05       	cpc	r17, r1
    42c6:	71 f0       	breq	.+28     	; 0x42e4 <fdevopen+0x52>
    42c8:	02 87       	std	Z+10, r16	; 0x0a
    42ca:	13 87       	std	Z+11, r17	; 0x0b
    42cc:	81 e8       	ldi	r24, 0x81	; 129
    42ce:	83 83       	std	Z+3, r24	; 0x03
    42d0:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <__iob>
    42d4:	90 91 e2 20 	lds	r25, 0x20E2	; 0x8020e2 <__iob+0x1>
    42d8:	89 2b       	or	r24, r25
    42da:	21 f4       	brne	.+8      	; 0x42e4 <fdevopen+0x52>
    42dc:	e0 93 e1 20 	sts	0x20E1, r30	; 0x8020e1 <__iob>
    42e0:	f0 93 e2 20 	sts	0x20E2, r31	; 0x8020e2 <__iob+0x1>
    42e4:	20 97       	sbiw	r28, 0x00	; 0
    42e6:	c9 f0       	breq	.+50     	; 0x431a <fdevopen+0x88>
    42e8:	c0 87       	std	Z+8, r28	; 0x08
    42ea:	d1 87       	std	Z+9, r29	; 0x09
    42ec:	83 81       	ldd	r24, Z+3	; 0x03
    42ee:	82 60       	ori	r24, 0x02	; 2
    42f0:	83 83       	std	Z+3, r24	; 0x03
    42f2:	80 91 e3 20 	lds	r24, 0x20E3	; 0x8020e3 <__iob+0x2>
    42f6:	90 91 e4 20 	lds	r25, 0x20E4	; 0x8020e4 <__iob+0x3>
    42fa:	89 2b       	or	r24, r25
    42fc:	71 f4       	brne	.+28     	; 0x431a <fdevopen+0x88>
    42fe:	e0 93 e3 20 	sts	0x20E3, r30	; 0x8020e3 <__iob+0x2>
    4302:	f0 93 e4 20 	sts	0x20E4, r31	; 0x8020e4 <__iob+0x3>
    4306:	80 91 e5 20 	lds	r24, 0x20E5	; 0x8020e5 <__iob+0x4>
    430a:	90 91 e6 20 	lds	r25, 0x20E6	; 0x8020e6 <__iob+0x5>
    430e:	89 2b       	or	r24, r25
    4310:	21 f4       	brne	.+8      	; 0x431a <fdevopen+0x88>
    4312:	e0 93 e5 20 	sts	0x20E5, r30	; 0x8020e5 <__iob+0x4>
    4316:	f0 93 e6 20 	sts	0x20E6, r31	; 0x8020e6 <__iob+0x5>
    431a:	cf 01       	movw	r24, r30
    431c:	df 91       	pop	r29
    431e:	cf 91       	pop	r28
    4320:	1f 91       	pop	r17
    4322:	0f 91       	pop	r16
    4324:	08 95       	ret

00004326 <fputc>:
    4326:	0f 93       	push	r16
    4328:	1f 93       	push	r17
    432a:	cf 93       	push	r28
    432c:	df 93       	push	r29
    432e:	fb 01       	movw	r30, r22
    4330:	23 81       	ldd	r18, Z+3	; 0x03
    4332:	21 fd       	sbrc	r18, 1
    4334:	03 c0       	rjmp	.+6      	; 0x433c <fputc+0x16>
    4336:	8f ef       	ldi	r24, 0xFF	; 255
    4338:	9f ef       	ldi	r25, 0xFF	; 255
    433a:	2c c0       	rjmp	.+88     	; 0x4394 <fputc+0x6e>
    433c:	22 ff       	sbrs	r18, 2
    433e:	16 c0       	rjmp	.+44     	; 0x436c <fputc+0x46>
    4340:	46 81       	ldd	r20, Z+6	; 0x06
    4342:	57 81       	ldd	r21, Z+7	; 0x07
    4344:	24 81       	ldd	r18, Z+4	; 0x04
    4346:	35 81       	ldd	r19, Z+5	; 0x05
    4348:	42 17       	cp	r20, r18
    434a:	53 07       	cpc	r21, r19
    434c:	44 f4       	brge	.+16     	; 0x435e <fputc+0x38>
    434e:	a0 81       	ld	r26, Z
    4350:	b1 81       	ldd	r27, Z+1	; 0x01
    4352:	9d 01       	movw	r18, r26
    4354:	2f 5f       	subi	r18, 0xFF	; 255
    4356:	3f 4f       	sbci	r19, 0xFF	; 255
    4358:	20 83       	st	Z, r18
    435a:	31 83       	std	Z+1, r19	; 0x01
    435c:	8c 93       	st	X, r24
    435e:	26 81       	ldd	r18, Z+6	; 0x06
    4360:	37 81       	ldd	r19, Z+7	; 0x07
    4362:	2f 5f       	subi	r18, 0xFF	; 255
    4364:	3f 4f       	sbci	r19, 0xFF	; 255
    4366:	26 83       	std	Z+6, r18	; 0x06
    4368:	37 83       	std	Z+7, r19	; 0x07
    436a:	14 c0       	rjmp	.+40     	; 0x4394 <fputc+0x6e>
    436c:	8b 01       	movw	r16, r22
    436e:	ec 01       	movw	r28, r24
    4370:	fb 01       	movw	r30, r22
    4372:	00 84       	ldd	r0, Z+8	; 0x08
    4374:	f1 85       	ldd	r31, Z+9	; 0x09
    4376:	e0 2d       	mov	r30, r0
    4378:	19 95       	eicall
    437a:	89 2b       	or	r24, r25
    437c:	e1 f6       	brne	.-72     	; 0x4336 <fputc+0x10>
    437e:	d8 01       	movw	r26, r16
    4380:	16 96       	adiw	r26, 0x06	; 6
    4382:	8d 91       	ld	r24, X+
    4384:	9c 91       	ld	r25, X
    4386:	17 97       	sbiw	r26, 0x07	; 7
    4388:	01 96       	adiw	r24, 0x01	; 1
    438a:	16 96       	adiw	r26, 0x06	; 6
    438c:	8d 93       	st	X+, r24
    438e:	9c 93       	st	X, r25
    4390:	17 97       	sbiw	r26, 0x07	; 7
    4392:	ce 01       	movw	r24, r28
    4394:	df 91       	pop	r29
    4396:	cf 91       	pop	r28
    4398:	1f 91       	pop	r17
    439a:	0f 91       	pop	r16
    439c:	08 95       	ret

0000439e <printf>:
    439e:	cf 93       	push	r28
    43a0:	df 93       	push	r29
    43a2:	cd b7       	in	r28, 0x3d	; 61
    43a4:	de b7       	in	r29, 0x3e	; 62
    43a6:	ae 01       	movw	r20, r28
    43a8:	4a 5f       	subi	r20, 0xFA	; 250
    43aa:	5f 4f       	sbci	r21, 0xFF	; 255
    43ac:	fa 01       	movw	r30, r20
    43ae:	61 91       	ld	r22, Z+
    43b0:	71 91       	ld	r23, Z+
    43b2:	af 01       	movw	r20, r30
    43b4:	80 91 e3 20 	lds	r24, 0x20E3	; 0x8020e3 <__iob+0x2>
    43b8:	90 91 e4 20 	lds	r25, 0x20E4	; 0x8020e4 <__iob+0x3>
    43bc:	fc d9       	rcall	.-3080   	; 0x37b6 <vfprintf>
    43be:	df 91       	pop	r29
    43c0:	cf 91       	pop	r28
    43c2:	08 95       	ret

000043c4 <puts>:
    43c4:	0f 93       	push	r16
    43c6:	1f 93       	push	r17
    43c8:	cf 93       	push	r28
    43ca:	df 93       	push	r29
    43cc:	e0 91 e3 20 	lds	r30, 0x20E3	; 0x8020e3 <__iob+0x2>
    43d0:	f0 91 e4 20 	lds	r31, 0x20E4	; 0x8020e4 <__iob+0x3>
    43d4:	23 81       	ldd	r18, Z+3	; 0x03
    43d6:	21 ff       	sbrs	r18, 1
    43d8:	1b c0       	rjmp	.+54     	; 0x4410 <puts+0x4c>
    43da:	8c 01       	movw	r16, r24
    43dc:	d0 e0       	ldi	r29, 0x00	; 0
    43de:	c0 e0       	ldi	r28, 0x00	; 0
    43e0:	f8 01       	movw	r30, r16
    43e2:	81 91       	ld	r24, Z+
    43e4:	8f 01       	movw	r16, r30
    43e6:	60 91 e3 20 	lds	r22, 0x20E3	; 0x8020e3 <__iob+0x2>
    43ea:	70 91 e4 20 	lds	r23, 0x20E4	; 0x8020e4 <__iob+0x3>
    43ee:	db 01       	movw	r26, r22
    43f0:	18 96       	adiw	r26, 0x08	; 8
    43f2:	ed 91       	ld	r30, X+
    43f4:	fc 91       	ld	r31, X
    43f6:	19 97       	sbiw	r26, 0x09	; 9
    43f8:	88 23       	and	r24, r24
    43fa:	31 f0       	breq	.+12     	; 0x4408 <puts+0x44>
    43fc:	19 95       	eicall
    43fe:	89 2b       	or	r24, r25
    4400:	79 f3       	breq	.-34     	; 0x43e0 <puts+0x1c>
    4402:	df ef       	ldi	r29, 0xFF	; 255
    4404:	cf ef       	ldi	r28, 0xFF	; 255
    4406:	ec cf       	rjmp	.-40     	; 0x43e0 <puts+0x1c>
    4408:	8a e0       	ldi	r24, 0x0A	; 10
    440a:	19 95       	eicall
    440c:	89 2b       	or	r24, r25
    440e:	19 f0       	breq	.+6      	; 0x4416 <puts+0x52>
    4410:	8f ef       	ldi	r24, 0xFF	; 255
    4412:	9f ef       	ldi	r25, 0xFF	; 255
    4414:	02 c0       	rjmp	.+4      	; 0x441a <puts+0x56>
    4416:	8d 2f       	mov	r24, r29
    4418:	9c 2f       	mov	r25, r28
    441a:	df 91       	pop	r29
    441c:	cf 91       	pop	r28
    441e:	1f 91       	pop	r17
    4420:	0f 91       	pop	r16
    4422:	08 95       	ret

00004424 <vsprintf>:
    4424:	0f 93       	push	r16
    4426:	1f 93       	push	r17
    4428:	cf 93       	push	r28
    442a:	df 93       	push	r29
    442c:	cd b7       	in	r28, 0x3d	; 61
    442e:	de b7       	in	r29, 0x3e	; 62
    4430:	2e 97       	sbiw	r28, 0x0e	; 14
    4432:	cd bf       	out	0x3d, r28	; 61
    4434:	de bf       	out	0x3e, r29	; 62
    4436:	8c 01       	movw	r16, r24
    4438:	86 e0       	ldi	r24, 0x06	; 6
    443a:	8c 83       	std	Y+4, r24	; 0x04
    443c:	09 83       	std	Y+1, r16	; 0x01
    443e:	1a 83       	std	Y+2, r17	; 0x02
    4440:	8f ef       	ldi	r24, 0xFF	; 255
    4442:	9f e7       	ldi	r25, 0x7F	; 127
    4444:	8d 83       	std	Y+5, r24	; 0x05
    4446:	9e 83       	std	Y+6, r25	; 0x06
    4448:	ce 01       	movw	r24, r28
    444a:	01 96       	adiw	r24, 0x01	; 1
    444c:	b4 d9       	rcall	.-3224   	; 0x37b6 <vfprintf>
    444e:	ef 81       	ldd	r30, Y+7	; 0x07
    4450:	f8 85       	ldd	r31, Y+8	; 0x08
    4452:	e0 0f       	add	r30, r16
    4454:	f1 1f       	adc	r31, r17
    4456:	10 82       	st	Z, r1
    4458:	2e 96       	adiw	r28, 0x0e	; 14
    445a:	cd bf       	out	0x3d, r28	; 61
    445c:	de bf       	out	0x3e, r29	; 62
    445e:	df 91       	pop	r29
    4460:	cf 91       	pop	r28
    4462:	1f 91       	pop	r17
    4464:	0f 91       	pop	r16
    4466:	08 95       	ret

00004468 <__ultoa_invert>:
    4468:	fa 01       	movw	r30, r20
    446a:	aa 27       	eor	r26, r26
    446c:	28 30       	cpi	r18, 0x08	; 8
    446e:	51 f1       	breq	.+84     	; 0x44c4 <__ultoa_invert+0x5c>
    4470:	20 31       	cpi	r18, 0x10	; 16
    4472:	81 f1       	breq	.+96     	; 0x44d4 <__ultoa_invert+0x6c>
    4474:	e8 94       	clt
    4476:	6f 93       	push	r22
    4478:	6e 7f       	andi	r22, 0xFE	; 254
    447a:	6e 5f       	subi	r22, 0xFE	; 254
    447c:	7f 4f       	sbci	r23, 0xFF	; 255
    447e:	8f 4f       	sbci	r24, 0xFF	; 255
    4480:	9f 4f       	sbci	r25, 0xFF	; 255
    4482:	af 4f       	sbci	r26, 0xFF	; 255
    4484:	b1 e0       	ldi	r27, 0x01	; 1
    4486:	3e d0       	rcall	.+124    	; 0x4504 <__ultoa_invert+0x9c>
    4488:	b4 e0       	ldi	r27, 0x04	; 4
    448a:	3c d0       	rcall	.+120    	; 0x4504 <__ultoa_invert+0x9c>
    448c:	67 0f       	add	r22, r23
    448e:	78 1f       	adc	r23, r24
    4490:	89 1f       	adc	r24, r25
    4492:	9a 1f       	adc	r25, r26
    4494:	a1 1d       	adc	r26, r1
    4496:	68 0f       	add	r22, r24
    4498:	79 1f       	adc	r23, r25
    449a:	8a 1f       	adc	r24, r26
    449c:	91 1d       	adc	r25, r1
    449e:	a1 1d       	adc	r26, r1
    44a0:	6a 0f       	add	r22, r26
    44a2:	71 1d       	adc	r23, r1
    44a4:	81 1d       	adc	r24, r1
    44a6:	91 1d       	adc	r25, r1
    44a8:	a1 1d       	adc	r26, r1
    44aa:	20 d0       	rcall	.+64     	; 0x44ec <__ultoa_invert+0x84>
    44ac:	09 f4       	brne	.+2      	; 0x44b0 <__ultoa_invert+0x48>
    44ae:	68 94       	set
    44b0:	3f 91       	pop	r19
    44b2:	2a e0       	ldi	r18, 0x0A	; 10
    44b4:	26 9f       	mul	r18, r22
    44b6:	11 24       	eor	r1, r1
    44b8:	30 19       	sub	r19, r0
    44ba:	30 5d       	subi	r19, 0xD0	; 208
    44bc:	31 93       	st	Z+, r19
    44be:	de f6       	brtc	.-74     	; 0x4476 <__ultoa_invert+0xe>
    44c0:	cf 01       	movw	r24, r30
    44c2:	08 95       	ret
    44c4:	46 2f       	mov	r20, r22
    44c6:	47 70       	andi	r20, 0x07	; 7
    44c8:	40 5d       	subi	r20, 0xD0	; 208
    44ca:	41 93       	st	Z+, r20
    44cc:	b3 e0       	ldi	r27, 0x03	; 3
    44ce:	0f d0       	rcall	.+30     	; 0x44ee <__ultoa_invert+0x86>
    44d0:	c9 f7       	brne	.-14     	; 0x44c4 <__ultoa_invert+0x5c>
    44d2:	f6 cf       	rjmp	.-20     	; 0x44c0 <__ultoa_invert+0x58>
    44d4:	46 2f       	mov	r20, r22
    44d6:	4f 70       	andi	r20, 0x0F	; 15
    44d8:	40 5d       	subi	r20, 0xD0	; 208
    44da:	4a 33       	cpi	r20, 0x3A	; 58
    44dc:	18 f0       	brcs	.+6      	; 0x44e4 <__ultoa_invert+0x7c>
    44de:	49 5d       	subi	r20, 0xD9	; 217
    44e0:	31 fd       	sbrc	r19, 1
    44e2:	40 52       	subi	r20, 0x20	; 32
    44e4:	41 93       	st	Z+, r20
    44e6:	02 d0       	rcall	.+4      	; 0x44ec <__ultoa_invert+0x84>
    44e8:	a9 f7       	brne	.-22     	; 0x44d4 <__ultoa_invert+0x6c>
    44ea:	ea cf       	rjmp	.-44     	; 0x44c0 <__ultoa_invert+0x58>
    44ec:	b4 e0       	ldi	r27, 0x04	; 4
    44ee:	a6 95       	lsr	r26
    44f0:	97 95       	ror	r25
    44f2:	87 95       	ror	r24
    44f4:	77 95       	ror	r23
    44f6:	67 95       	ror	r22
    44f8:	ba 95       	dec	r27
    44fa:	c9 f7       	brne	.-14     	; 0x44ee <__ultoa_invert+0x86>
    44fc:	00 97       	sbiw	r24, 0x00	; 0
    44fe:	61 05       	cpc	r22, r1
    4500:	71 05       	cpc	r23, r1
    4502:	08 95       	ret
    4504:	9b 01       	movw	r18, r22
    4506:	ac 01       	movw	r20, r24
    4508:	0a 2e       	mov	r0, r26
    450a:	06 94       	lsr	r0
    450c:	57 95       	ror	r21
    450e:	47 95       	ror	r20
    4510:	37 95       	ror	r19
    4512:	27 95       	ror	r18
    4514:	ba 95       	dec	r27
    4516:	c9 f7       	brne	.-14     	; 0x450a <__ultoa_invert+0xa2>
    4518:	62 0f       	add	r22, r18
    451a:	73 1f       	adc	r23, r19
    451c:	84 1f       	adc	r24, r20
    451e:	95 1f       	adc	r25, r21
    4520:	a0 1d       	adc	r26, r0
    4522:	08 95       	ret

00004524 <calloc>:
    4524:	0f 93       	push	r16
    4526:	1f 93       	push	r17
    4528:	cf 93       	push	r28
    452a:	df 93       	push	r29
    452c:	86 9f       	mul	r24, r22
    452e:	80 01       	movw	r16, r0
    4530:	87 9f       	mul	r24, r23
    4532:	10 0d       	add	r17, r0
    4534:	96 9f       	mul	r25, r22
    4536:	10 0d       	add	r17, r0
    4538:	11 24       	eor	r1, r1
    453a:	c8 01       	movw	r24, r16
    453c:	0d d0       	rcall	.+26     	; 0x4558 <malloc>
    453e:	ec 01       	movw	r28, r24
    4540:	00 97       	sbiw	r24, 0x00	; 0
    4542:	21 f0       	breq	.+8      	; 0x454c <calloc+0x28>
    4544:	a8 01       	movw	r20, r16
    4546:	60 e0       	ldi	r22, 0x00	; 0
    4548:	70 e0       	ldi	r23, 0x00	; 0
    454a:	27 d1       	rcall	.+590    	; 0x479a <memset>
    454c:	ce 01       	movw	r24, r28
    454e:	df 91       	pop	r29
    4550:	cf 91       	pop	r28
    4552:	1f 91       	pop	r17
    4554:	0f 91       	pop	r16
    4556:	08 95       	ret

00004558 <malloc>:
    4558:	0f 93       	push	r16
    455a:	1f 93       	push	r17
    455c:	cf 93       	push	r28
    455e:	df 93       	push	r29
    4560:	82 30       	cpi	r24, 0x02	; 2
    4562:	91 05       	cpc	r25, r1
    4564:	10 f4       	brcc	.+4      	; 0x456a <malloc+0x12>
    4566:	82 e0       	ldi	r24, 0x02	; 2
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	e0 91 e9 20 	lds	r30, 0x20E9	; 0x8020e9 <__flp>
    456e:	f0 91 ea 20 	lds	r31, 0x20EA	; 0x8020ea <__flp+0x1>
    4572:	20 e0       	ldi	r18, 0x00	; 0
    4574:	30 e0       	ldi	r19, 0x00	; 0
    4576:	a0 e0       	ldi	r26, 0x00	; 0
    4578:	b0 e0       	ldi	r27, 0x00	; 0
    457a:	30 97       	sbiw	r30, 0x00	; 0
    457c:	19 f1       	breq	.+70     	; 0x45c4 <malloc+0x6c>
    457e:	40 81       	ld	r20, Z
    4580:	51 81       	ldd	r21, Z+1	; 0x01
    4582:	02 81       	ldd	r16, Z+2	; 0x02
    4584:	13 81       	ldd	r17, Z+3	; 0x03
    4586:	48 17       	cp	r20, r24
    4588:	59 07       	cpc	r21, r25
    458a:	c8 f0       	brcs	.+50     	; 0x45be <malloc+0x66>
    458c:	84 17       	cp	r24, r20
    458e:	95 07       	cpc	r25, r21
    4590:	69 f4       	brne	.+26     	; 0x45ac <malloc+0x54>
    4592:	10 97       	sbiw	r26, 0x00	; 0
    4594:	31 f0       	breq	.+12     	; 0x45a2 <malloc+0x4a>
    4596:	12 96       	adiw	r26, 0x02	; 2
    4598:	0c 93       	st	X, r16
    459a:	12 97       	sbiw	r26, 0x02	; 2
    459c:	13 96       	adiw	r26, 0x03	; 3
    459e:	1c 93       	st	X, r17
    45a0:	27 c0       	rjmp	.+78     	; 0x45f0 <malloc+0x98>
    45a2:	00 93 e9 20 	sts	0x20E9, r16	; 0x8020e9 <__flp>
    45a6:	10 93 ea 20 	sts	0x20EA, r17	; 0x8020ea <__flp+0x1>
    45aa:	22 c0       	rjmp	.+68     	; 0x45f0 <malloc+0x98>
    45ac:	21 15       	cp	r18, r1
    45ae:	31 05       	cpc	r19, r1
    45b0:	19 f0       	breq	.+6      	; 0x45b8 <malloc+0x60>
    45b2:	42 17       	cp	r20, r18
    45b4:	53 07       	cpc	r21, r19
    45b6:	18 f4       	brcc	.+6      	; 0x45be <malloc+0x66>
    45b8:	9a 01       	movw	r18, r20
    45ba:	bd 01       	movw	r22, r26
    45bc:	ef 01       	movw	r28, r30
    45be:	df 01       	movw	r26, r30
    45c0:	f8 01       	movw	r30, r16
    45c2:	db cf       	rjmp	.-74     	; 0x457a <malloc+0x22>
    45c4:	21 15       	cp	r18, r1
    45c6:	31 05       	cpc	r19, r1
    45c8:	f9 f0       	breq	.+62     	; 0x4608 <malloc+0xb0>
    45ca:	28 1b       	sub	r18, r24
    45cc:	39 0b       	sbc	r19, r25
    45ce:	24 30       	cpi	r18, 0x04	; 4
    45d0:	31 05       	cpc	r19, r1
    45d2:	80 f4       	brcc	.+32     	; 0x45f4 <malloc+0x9c>
    45d4:	8a 81       	ldd	r24, Y+2	; 0x02
    45d6:	9b 81       	ldd	r25, Y+3	; 0x03
    45d8:	61 15       	cp	r22, r1
    45da:	71 05       	cpc	r23, r1
    45dc:	21 f0       	breq	.+8      	; 0x45e6 <malloc+0x8e>
    45de:	fb 01       	movw	r30, r22
    45e0:	82 83       	std	Z+2, r24	; 0x02
    45e2:	93 83       	std	Z+3, r25	; 0x03
    45e4:	04 c0       	rjmp	.+8      	; 0x45ee <malloc+0x96>
    45e6:	80 93 e9 20 	sts	0x20E9, r24	; 0x8020e9 <__flp>
    45ea:	90 93 ea 20 	sts	0x20EA, r25	; 0x8020ea <__flp+0x1>
    45ee:	fe 01       	movw	r30, r28
    45f0:	32 96       	adiw	r30, 0x02	; 2
    45f2:	44 c0       	rjmp	.+136    	; 0x467c <malloc+0x124>
    45f4:	fe 01       	movw	r30, r28
    45f6:	e2 0f       	add	r30, r18
    45f8:	f3 1f       	adc	r31, r19
    45fa:	81 93       	st	Z+, r24
    45fc:	91 93       	st	Z+, r25
    45fe:	22 50       	subi	r18, 0x02	; 2
    4600:	31 09       	sbc	r19, r1
    4602:	28 83       	st	Y, r18
    4604:	39 83       	std	Y+1, r19	; 0x01
    4606:	3a c0       	rjmp	.+116    	; 0x467c <malloc+0x124>
    4608:	20 91 e7 20 	lds	r18, 0x20E7	; 0x8020e7 <__brkval>
    460c:	30 91 e8 20 	lds	r19, 0x20E8	; 0x8020e8 <__brkval+0x1>
    4610:	23 2b       	or	r18, r19
    4612:	41 f4       	brne	.+16     	; 0x4624 <malloc+0xcc>
    4614:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4618:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    461c:	20 93 e7 20 	sts	0x20E7, r18	; 0x8020e7 <__brkval>
    4620:	30 93 e8 20 	sts	0x20E8, r19	; 0x8020e8 <__brkval+0x1>
    4624:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4628:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    462c:	21 15       	cp	r18, r1
    462e:	31 05       	cpc	r19, r1
    4630:	41 f4       	brne	.+16     	; 0x4642 <malloc+0xea>
    4632:	2d b7       	in	r18, 0x3d	; 61
    4634:	3e b7       	in	r19, 0x3e	; 62
    4636:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    463a:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    463e:	24 1b       	sub	r18, r20
    4640:	35 0b       	sbc	r19, r21
    4642:	e0 91 e7 20 	lds	r30, 0x20E7	; 0x8020e7 <__brkval>
    4646:	f0 91 e8 20 	lds	r31, 0x20E8	; 0x8020e8 <__brkval+0x1>
    464a:	e2 17       	cp	r30, r18
    464c:	f3 07       	cpc	r31, r19
    464e:	a0 f4       	brcc	.+40     	; 0x4678 <malloc+0x120>
    4650:	2e 1b       	sub	r18, r30
    4652:	3f 0b       	sbc	r19, r31
    4654:	28 17       	cp	r18, r24
    4656:	39 07       	cpc	r19, r25
    4658:	78 f0       	brcs	.+30     	; 0x4678 <malloc+0x120>
    465a:	ac 01       	movw	r20, r24
    465c:	4e 5f       	subi	r20, 0xFE	; 254
    465e:	5f 4f       	sbci	r21, 0xFF	; 255
    4660:	24 17       	cp	r18, r20
    4662:	35 07       	cpc	r19, r21
    4664:	48 f0       	brcs	.+18     	; 0x4678 <malloc+0x120>
    4666:	4e 0f       	add	r20, r30
    4668:	5f 1f       	adc	r21, r31
    466a:	40 93 e7 20 	sts	0x20E7, r20	; 0x8020e7 <__brkval>
    466e:	50 93 e8 20 	sts	0x20E8, r21	; 0x8020e8 <__brkval+0x1>
    4672:	81 93       	st	Z+, r24
    4674:	91 93       	st	Z+, r25
    4676:	02 c0       	rjmp	.+4      	; 0x467c <malloc+0x124>
    4678:	e0 e0       	ldi	r30, 0x00	; 0
    467a:	f0 e0       	ldi	r31, 0x00	; 0
    467c:	cf 01       	movw	r24, r30
    467e:	df 91       	pop	r29
    4680:	cf 91       	pop	r28
    4682:	1f 91       	pop	r17
    4684:	0f 91       	pop	r16
    4686:	08 95       	ret

00004688 <free>:
    4688:	cf 93       	push	r28
    468a:	df 93       	push	r29
    468c:	00 97       	sbiw	r24, 0x00	; 0
    468e:	09 f4       	brne	.+2      	; 0x4692 <free+0xa>
    4690:	81 c0       	rjmp	.+258    	; 0x4794 <free+0x10c>
    4692:	fc 01       	movw	r30, r24
    4694:	32 97       	sbiw	r30, 0x02	; 2
    4696:	12 82       	std	Z+2, r1	; 0x02
    4698:	13 82       	std	Z+3, r1	; 0x03
    469a:	a0 91 e9 20 	lds	r26, 0x20E9	; 0x8020e9 <__flp>
    469e:	b0 91 ea 20 	lds	r27, 0x20EA	; 0x8020ea <__flp+0x1>
    46a2:	10 97       	sbiw	r26, 0x00	; 0
    46a4:	81 f4       	brne	.+32     	; 0x46c6 <free+0x3e>
    46a6:	20 81       	ld	r18, Z
    46a8:	31 81       	ldd	r19, Z+1	; 0x01
    46aa:	82 0f       	add	r24, r18
    46ac:	93 1f       	adc	r25, r19
    46ae:	20 91 e7 20 	lds	r18, 0x20E7	; 0x8020e7 <__brkval>
    46b2:	30 91 e8 20 	lds	r19, 0x20E8	; 0x8020e8 <__brkval+0x1>
    46b6:	28 17       	cp	r18, r24
    46b8:	39 07       	cpc	r19, r25
    46ba:	51 f5       	brne	.+84     	; 0x4710 <free+0x88>
    46bc:	e0 93 e7 20 	sts	0x20E7, r30	; 0x8020e7 <__brkval>
    46c0:	f0 93 e8 20 	sts	0x20E8, r31	; 0x8020e8 <__brkval+0x1>
    46c4:	67 c0       	rjmp	.+206    	; 0x4794 <free+0x10c>
    46c6:	ed 01       	movw	r28, r26
    46c8:	20 e0       	ldi	r18, 0x00	; 0
    46ca:	30 e0       	ldi	r19, 0x00	; 0
    46cc:	ce 17       	cp	r28, r30
    46ce:	df 07       	cpc	r29, r31
    46d0:	40 f4       	brcc	.+16     	; 0x46e2 <free+0x5a>
    46d2:	4a 81       	ldd	r20, Y+2	; 0x02
    46d4:	5b 81       	ldd	r21, Y+3	; 0x03
    46d6:	9e 01       	movw	r18, r28
    46d8:	41 15       	cp	r20, r1
    46da:	51 05       	cpc	r21, r1
    46dc:	f1 f0       	breq	.+60     	; 0x471a <free+0x92>
    46de:	ea 01       	movw	r28, r20
    46e0:	f5 cf       	rjmp	.-22     	; 0x46cc <free+0x44>
    46e2:	c2 83       	std	Z+2, r28	; 0x02
    46e4:	d3 83       	std	Z+3, r29	; 0x03
    46e6:	40 81       	ld	r20, Z
    46e8:	51 81       	ldd	r21, Z+1	; 0x01
    46ea:	84 0f       	add	r24, r20
    46ec:	95 1f       	adc	r25, r21
    46ee:	c8 17       	cp	r28, r24
    46f0:	d9 07       	cpc	r29, r25
    46f2:	59 f4       	brne	.+22     	; 0x470a <free+0x82>
    46f4:	88 81       	ld	r24, Y
    46f6:	99 81       	ldd	r25, Y+1	; 0x01
    46f8:	84 0f       	add	r24, r20
    46fa:	95 1f       	adc	r25, r21
    46fc:	02 96       	adiw	r24, 0x02	; 2
    46fe:	80 83       	st	Z, r24
    4700:	91 83       	std	Z+1, r25	; 0x01
    4702:	8a 81       	ldd	r24, Y+2	; 0x02
    4704:	9b 81       	ldd	r25, Y+3	; 0x03
    4706:	82 83       	std	Z+2, r24	; 0x02
    4708:	93 83       	std	Z+3, r25	; 0x03
    470a:	21 15       	cp	r18, r1
    470c:	31 05       	cpc	r19, r1
    470e:	29 f4       	brne	.+10     	; 0x471a <free+0x92>
    4710:	e0 93 e9 20 	sts	0x20E9, r30	; 0x8020e9 <__flp>
    4714:	f0 93 ea 20 	sts	0x20EA, r31	; 0x8020ea <__flp+0x1>
    4718:	3d c0       	rjmp	.+122    	; 0x4794 <free+0x10c>
    471a:	e9 01       	movw	r28, r18
    471c:	ea 83       	std	Y+2, r30	; 0x02
    471e:	fb 83       	std	Y+3, r31	; 0x03
    4720:	49 91       	ld	r20, Y+
    4722:	59 91       	ld	r21, Y+
    4724:	c4 0f       	add	r28, r20
    4726:	d5 1f       	adc	r29, r21
    4728:	ec 17       	cp	r30, r28
    472a:	fd 07       	cpc	r31, r29
    472c:	61 f4       	brne	.+24     	; 0x4746 <free+0xbe>
    472e:	80 81       	ld	r24, Z
    4730:	91 81       	ldd	r25, Z+1	; 0x01
    4732:	84 0f       	add	r24, r20
    4734:	95 1f       	adc	r25, r21
    4736:	02 96       	adiw	r24, 0x02	; 2
    4738:	e9 01       	movw	r28, r18
    473a:	88 83       	st	Y, r24
    473c:	99 83       	std	Y+1, r25	; 0x01
    473e:	82 81       	ldd	r24, Z+2	; 0x02
    4740:	93 81       	ldd	r25, Z+3	; 0x03
    4742:	8a 83       	std	Y+2, r24	; 0x02
    4744:	9b 83       	std	Y+3, r25	; 0x03
    4746:	e0 e0       	ldi	r30, 0x00	; 0
    4748:	f0 e0       	ldi	r31, 0x00	; 0
    474a:	12 96       	adiw	r26, 0x02	; 2
    474c:	8d 91       	ld	r24, X+
    474e:	9c 91       	ld	r25, X
    4750:	13 97       	sbiw	r26, 0x03	; 3
    4752:	00 97       	sbiw	r24, 0x00	; 0
    4754:	19 f0       	breq	.+6      	; 0x475c <free+0xd4>
    4756:	fd 01       	movw	r30, r26
    4758:	dc 01       	movw	r26, r24
    475a:	f7 cf       	rjmp	.-18     	; 0x474a <free+0xc2>
    475c:	8d 91       	ld	r24, X+
    475e:	9c 91       	ld	r25, X
    4760:	11 97       	sbiw	r26, 0x01	; 1
    4762:	9d 01       	movw	r18, r26
    4764:	2e 5f       	subi	r18, 0xFE	; 254
    4766:	3f 4f       	sbci	r19, 0xFF	; 255
    4768:	82 0f       	add	r24, r18
    476a:	93 1f       	adc	r25, r19
    476c:	20 91 e7 20 	lds	r18, 0x20E7	; 0x8020e7 <__brkval>
    4770:	30 91 e8 20 	lds	r19, 0x20E8	; 0x8020e8 <__brkval+0x1>
    4774:	28 17       	cp	r18, r24
    4776:	39 07       	cpc	r19, r25
    4778:	69 f4       	brne	.+26     	; 0x4794 <free+0x10c>
    477a:	30 97       	sbiw	r30, 0x00	; 0
    477c:	29 f4       	brne	.+10     	; 0x4788 <free+0x100>
    477e:	10 92 e9 20 	sts	0x20E9, r1	; 0x8020e9 <__flp>
    4782:	10 92 ea 20 	sts	0x20EA, r1	; 0x8020ea <__flp+0x1>
    4786:	02 c0       	rjmp	.+4      	; 0x478c <free+0x104>
    4788:	12 82       	std	Z+2, r1	; 0x02
    478a:	13 82       	std	Z+3, r1	; 0x03
    478c:	a0 93 e7 20 	sts	0x20E7, r26	; 0x8020e7 <__brkval>
    4790:	b0 93 e8 20 	sts	0x20E8, r27	; 0x8020e8 <__brkval+0x1>
    4794:	df 91       	pop	r29
    4796:	cf 91       	pop	r28
    4798:	08 95       	ret

0000479a <memset>:
    479a:	dc 01       	movw	r26, r24
    479c:	01 c0       	rjmp	.+2      	; 0x47a0 <memset+0x6>
    479e:	6d 93       	st	X+, r22
    47a0:	41 50       	subi	r20, 0x01	; 1
    47a2:	50 40       	sbci	r21, 0x00	; 0
    47a4:	e0 f7       	brcc	.-8      	; 0x479e <memset+0x4>
    47a6:	08 95       	ret

000047a8 <_exit>:
    47a8:	f8 94       	cli

000047aa <__stop_program>:
    47aa:	ff cf       	rjmp	.-2      	; 0x47aa <__stop_program>
