
CanSat Probe Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00802000  000041ee  00004282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000074  00802060  00802060  000042e2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000042e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000480  00000000  00000000  00004380  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f48d  00000000  00000000  00004800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000572f  00000000  00000000  00013c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00007635  00000000  00000000  000193bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001890  00000000  00000000  000209f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00034169  00000000  00000000  00022284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000546f  00000000  00000000  000563ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003d0  00000000  00000000  0005b860  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000c659  00000000  00000000  0005bc30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	bf c1       	rjmp	.+894    	; 0x380 <__ctors_end>
       2:	00 00       	nop
       4:	e3 c1       	rjmp	.+966    	; 0x3cc <__bad_interrupt>
       6:	00 00       	nop
       8:	e1 c1       	rjmp	.+962    	; 0x3cc <__bad_interrupt>
       a:	00 00       	nop
       c:	df c1       	rjmp	.+958    	; 0x3cc <__bad_interrupt>
       e:	00 00       	nop
      10:	dd c1       	rjmp	.+954    	; 0x3cc <__bad_interrupt>
      12:	00 00       	nop
      14:	db c1       	rjmp	.+950    	; 0x3cc <__bad_interrupt>
      16:	00 00       	nop
      18:	d9 c1       	rjmp	.+946    	; 0x3cc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d7 c1       	rjmp	.+942    	; 0x3cc <__bad_interrupt>
      1e:	00 00       	nop
      20:	d5 c1       	rjmp	.+938    	; 0x3cc <__bad_interrupt>
      22:	00 00       	nop
      24:	d3 c1       	rjmp	.+934    	; 0x3cc <__bad_interrupt>
      26:	00 00       	nop
      28:	d1 c1       	rjmp	.+930    	; 0x3cc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cf c1       	rjmp	.+926    	; 0x3cc <__bad_interrupt>
      2e:	00 00       	nop
      30:	cd c1       	rjmp	.+922    	; 0x3cc <__bad_interrupt>
      32:	00 00       	nop
      34:	cb c1       	rjmp	.+918    	; 0x3cc <__bad_interrupt>
      36:	00 00       	nop
      38:	38 c4       	rjmp	.+2160   	; 0x8aa <__vector_14>
      3a:	00 00       	nop
      3c:	6e c4       	rjmp	.+2268   	; 0x91a <__vector_15>
      3e:	00 00       	nop
      40:	a4 c4       	rjmp	.+2376   	; 0x98a <__vector_16>
      42:	00 00       	nop
      44:	da c4       	rjmp	.+2484   	; 0x9fa <__vector_17>
      46:	00 00       	nop
      48:	10 c5       	rjmp	.+2592   	; 0xa6a <__vector_18>
      4a:	00 00       	nop
      4c:	46 c5       	rjmp	.+2700   	; 0xada <__vector_19>
      4e:	00 00       	nop
      50:	7c c5       	rjmp	.+2808   	; 0xb4a <__vector_20>
      52:	00 00       	nop
      54:	b2 c5       	rjmp	.+2916   	; 0xbba <__vector_21>
      56:	00 00       	nop
      58:	e8 c5       	rjmp	.+3024   	; 0xc2a <__vector_22>
      5a:	00 00       	nop
      5c:	1e c6       	rjmp	.+3132   	; 0xc9a <__vector_23>
      5e:	00 00       	nop
      60:	b5 c1       	rjmp	.+874    	; 0x3cc <__bad_interrupt>
      62:	00 00       	nop
      64:	b3 c1       	rjmp	.+870    	; 0x3cc <__bad_interrupt>
      66:	00 00       	nop
      68:	b1 c1       	rjmp	.+866    	; 0x3cc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	af c1       	rjmp	.+862    	; 0x3cc <__bad_interrupt>
      6e:	00 00       	nop
      70:	ad c1       	rjmp	.+858    	; 0x3cc <__bad_interrupt>
      72:	00 00       	nop
      74:	ab c1       	rjmp	.+854    	; 0x3cc <__bad_interrupt>
      76:	00 00       	nop
      78:	a9 c1       	rjmp	.+850    	; 0x3cc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a7 c1       	rjmp	.+846    	; 0x3cc <__bad_interrupt>
      7e:	00 00       	nop
      80:	a5 c1       	rjmp	.+842    	; 0x3cc <__bad_interrupt>
      82:	00 00       	nop
      84:	a3 c1       	rjmp	.+838    	; 0x3cc <__bad_interrupt>
      86:	00 00       	nop
      88:	a1 c1       	rjmp	.+834    	; 0x3cc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9f c1       	rjmp	.+830    	; 0x3cc <__bad_interrupt>
      8e:	00 00       	nop
      90:	9d c1       	rjmp	.+826    	; 0x3cc <__bad_interrupt>
      92:	00 00       	nop
      94:	9b c1       	rjmp	.+822    	; 0x3cc <__bad_interrupt>
      96:	00 00       	nop
      98:	99 c1       	rjmp	.+818    	; 0x3cc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	02 c3       	rjmp	.+1540   	; 0x6a2 <__vector_39>
      9e:	00 00       	nop
      a0:	3d c3       	rjmp	.+1658   	; 0x71c <__vector_40>
      a2:	00 00       	nop
      a4:	78 c3       	rjmp	.+1776   	; 0x796 <__vector_41>
      a6:	00 00       	nop
      a8:	b3 c3       	rjmp	.+1894   	; 0x810 <__vector_42>
      aa:	00 00       	nop
      ac:	8f c1       	rjmp	.+798    	; 0x3cc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8d c1       	rjmp	.+794    	; 0x3cc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	8b c1       	rjmp	.+790    	; 0x3cc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	89 c1       	rjmp	.+786    	; 0x3cc <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 b5 08 	jmp	0x116a	; 0x116a <__vector_47>
      c0:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__vector_48>
      c4:	0c 94 25 09 	jmp	0x124a	; 0x124a <__vector_49>
      c8:	0c 94 5d 09 	jmp	0x12ba	; 0x12ba <__vector_50>
      cc:	0c 94 95 09 	jmp	0x132a	; 0x132a <__vector_51>
      d0:	0c 94 cd 09 	jmp	0x139a	; 0x139a <__vector_52>
      d4:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__vector_53>
      d8:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__vector_54>
      dc:	0c 94 75 0a 	jmp	0x14ea	; 0x14ea <__vector_55>
      e0:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <__vector_56>
      e4:	73 c1       	rjmp	.+742    	; 0x3cc <__bad_interrupt>
      e6:	00 00       	nop
      e8:	71 c1       	rjmp	.+738    	; 0x3cc <__bad_interrupt>
      ea:	00 00       	nop
      ec:	6f c1       	rjmp	.+734    	; 0x3cc <__bad_interrupt>
      ee:	00 00       	nop
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <__bad_interrupt>
      f2:	00 00       	nop
      f4:	6b c1       	rjmp	.+726    	; 0x3cc <__bad_interrupt>
      f6:	00 00       	nop
      f8:	69 c1       	rjmp	.+722    	; 0x3cc <__bad_interrupt>
      fa:	00 00       	nop
      fc:	67 c1       	rjmp	.+718    	; 0x3cc <__bad_interrupt>
      fe:	00 00       	nop
     100:	65 c1       	rjmp	.+714    	; 0x3cc <__bad_interrupt>
     102:	00 00       	nop
     104:	63 c1       	rjmp	.+710    	; 0x3cc <__bad_interrupt>
     106:	00 00       	nop
     108:	61 c1       	rjmp	.+706    	; 0x3cc <__bad_interrupt>
     10a:	00 00       	nop
     10c:	5f c1       	rjmp	.+702    	; 0x3cc <__bad_interrupt>
     10e:	00 00       	nop
     110:	5d c1       	rjmp	.+698    	; 0x3cc <__bad_interrupt>
     112:	00 00       	nop
     114:	5b c1       	rjmp	.+694    	; 0x3cc <__bad_interrupt>
     116:	00 00       	nop
     118:	59 c1       	rjmp	.+690    	; 0x3cc <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ce c1       	rjmp	.+924    	; 0x4ba <__vector_71>
     11e:	00 00       	nop
     120:	09 c2       	rjmp	.+1042   	; 0x534 <__vector_72>
     122:	00 00       	nop
     124:	44 c2       	rjmp	.+1160   	; 0x5ae <__vector_73>
     126:	00 00       	nop
     128:	7f c2       	rjmp	.+1278   	; 0x628 <__vector_74>
     12a:	00 00       	nop
     12c:	4f c1       	rjmp	.+670    	; 0x3cc <__bad_interrupt>
     12e:	00 00       	nop
     130:	4d c1       	rjmp	.+666    	; 0x3cc <__bad_interrupt>
     132:	00 00       	nop
     134:	ea c5       	rjmp	.+3028   	; 0xd0a <__vector_77>
     136:	00 00       	nop
     138:	20 c6       	rjmp	.+3136   	; 0xd7a <__vector_78>
     13a:	00 00       	nop
     13c:	56 c6       	rjmp	.+3244   	; 0xdea <__vector_79>
     13e:	00 00       	nop
     140:	8c c6       	rjmp	.+3352   	; 0xe5a <__vector_80>
     142:	00 00       	nop
     144:	c2 c6       	rjmp	.+3460   	; 0xeca <__vector_81>
     146:	00 00       	nop
     148:	f8 c6       	rjmp	.+3568   	; 0xf3a <__vector_82>
     14a:	00 00       	nop
     14c:	2e c7       	rjmp	.+3676   	; 0xfaa <__vector_83>
     14e:	00 00       	nop
     150:	64 c7       	rjmp	.+3784   	; 0x101a <__vector_84>
     152:	00 00       	nop
     154:	9a c7       	rjmp	.+3892   	; 0x108a <__vector_85>
     156:	00 00       	nop
     158:	d0 c7       	rjmp	.+4000   	; 0x10fa <__vector_86>
     15a:	00 00       	nop
     15c:	37 c1       	rjmp	.+622    	; 0x3cc <__bad_interrupt>
     15e:	00 00       	nop
     160:	35 c1       	rjmp	.+618    	; 0x3cc <__bad_interrupt>
     162:	00 00       	nop
     164:	33 c1       	rjmp	.+614    	; 0x3cc <__bad_interrupt>
     166:	00 00       	nop
     168:	31 c1       	rjmp	.+610    	; 0x3cc <__bad_interrupt>
     16a:	00 00       	nop
     16c:	2f c1       	rjmp	.+606    	; 0x3cc <__bad_interrupt>
     16e:	00 00       	nop
     170:	2d c1       	rjmp	.+602    	; 0x3cc <__bad_interrupt>
     172:	00 00       	nop
     174:	2b c1       	rjmp	.+598    	; 0x3cc <__bad_interrupt>
     176:	00 00       	nop
     178:	29 c1       	rjmp	.+594    	; 0x3cc <__bad_interrupt>
     17a:	00 00       	nop
     17c:	27 c1       	rjmp	.+590    	; 0x3cc <__bad_interrupt>
     17e:	00 00       	nop
     180:	25 c1       	rjmp	.+586    	; 0x3cc <__bad_interrupt>
     182:	00 00       	nop
     184:	23 c1       	rjmp	.+582    	; 0x3cc <__bad_interrupt>
     186:	00 00       	nop
     188:	21 c1       	rjmp	.+578    	; 0x3cc <__bad_interrupt>
     18a:	00 00       	nop
     18c:	1f c1       	rjmp	.+574    	; 0x3cc <__bad_interrupt>
     18e:	00 00       	nop
     190:	1d c1       	rjmp	.+570    	; 0x3cc <__bad_interrupt>
     192:	00 00       	nop
     194:	1b c1       	rjmp	.+566    	; 0x3cc <__bad_interrupt>
     196:	00 00       	nop
     198:	19 c1       	rjmp	.+562    	; 0x3cc <__bad_interrupt>
     19a:	00 00       	nop
     19c:	17 c1       	rjmp	.+558    	; 0x3cc <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	15 c1       	rjmp	.+554    	; 0x3cc <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	13 c1       	rjmp	.+550    	; 0x3cc <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	11 c1       	rjmp	.+546    	; 0x3cc <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	0f c1       	rjmp	.+542    	; 0x3cc <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__vector_108>
     1b4:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__vector_109>
     1b8:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <__vector_110>
     1bc:	0c 94 8d 0b 	jmp	0x171a	; 0x171a <__vector_111>
     1c0:	0c 94 c5 0b 	jmp	0x178a	; 0x178a <__vector_112>
     1c4:	0c 94 fd 0b 	jmp	0x17fa	; 0x17fa <__vector_113>
     1c8:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__vector_114>
     1cc:	0c 94 6d 0c 	jmp	0x18da	; 0x18da <__vector_115>
     1d0:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__vector_116>
     1d4:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__vector_117>
     1d8:	f9 c0       	rjmp	.+498    	; 0x3cc <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	f7 c0       	rjmp	.+494    	; 0x3cc <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	f5 c0       	rjmp	.+490    	; 0x3cc <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	f3 c0       	rjmp	.+486    	; 0x3cc <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	f1 c0       	rjmp	.+482    	; 0x3cc <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	ef c0       	rjmp	.+478    	; 0x3cc <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	ed c0       	rjmp	.+474    	; 0x3cc <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	eb c0       	rjmp	.+470    	; 0x3cc <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	e9 c0       	rjmp	.+466    	; 0x3cc <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	08 00       	.word	0x0008	; ????
     1fe:	00 00       	nop
     200:	be 92       	st	-X, r11
     202:	24 49       	sbci	r18, 0x94	; 148
     204:	12 3e       	cpi	r17, 0xE2	; 226
     206:	ab aa       	std	Y+51, r10	; 0x33
     208:	aa 2a       	or	r10, r26
     20a:	be cd       	rjmp	.-1156   	; 0xfffffd88 <__eeprom_end+0xff7efd88>
     20c:	cc cc       	rjmp	.-1640   	; 0xfffffba6 <__eeprom_end+0xff7efba6>
     20e:	4c 3e       	cpi	r20, 0xEC	; 236
     210:	00 00       	nop
     212:	00 80       	ld	r0, Z
     214:	be ab       	std	Y+54, r27	; 0x36
     216:	aa aa       	std	Y+50, r10	; 0x32
     218:	aa 3e       	cpi	r26, 0xEA	; 234
     21a:	00 00       	nop
     21c:	00 00       	nop
     21e:	bf 00       	.word	0x00bf	; ????
     220:	00 00       	nop
     222:	80 3f       	cpi	r24, 0xF0	; 240
     224:	00 00       	nop
     226:	00 00       	nop
     228:	00 08       	sbc	r0, r0
     22a:	41 78       	andi	r20, 0x81	; 129
     22c:	d3 bb       	out	0x13, r29	; 19
     22e:	43 87       	std	Z+11, r20	; 0x0b
     230:	d1 13       	cpse	r29, r17
     232:	3d 19       	sub	r19, r13
     234:	0e 3c       	cpi	r16, 0xCE	; 206
     236:	c3 bd       	out	0x23, r28	; 35
     238:	42 82       	std	Z+2, r4	; 0x02
     23a:	ad 2b       	or	r26, r29
     23c:	3e 68       	ori	r19, 0x8E	; 142
     23e:	ec 82       	std	Y+4, r14	; 0x04
     240:	76 be       	out	0x36, r7	; 54
     242:	d9 8f       	std	Y+25, r29	; 0x19
     244:	e1 a9       	ldd	r30, Z+49	; 0x31
     246:	3e 4c       	sbci	r19, 0xCE	; 206
     248:	80 ef       	ldi	r24, 0xF0	; 240
     24a:	ff be       	out	0x3f, r15	; 63
     24c:	01 c4       	rjmp	.+2050   	; 0xa50 <__vector_17+0x56>
     24e:	ff 7f       	andi	r31, 0xFF	; 255
     250:	3f 00       	.word	0x003f	; ????
     252:	00 00       	nop
     254:	00 00       	nop
     256:	07 63       	ori	r16, 0x37	; 55
     258:	42 36       	cpi	r20, 0x62	; 98
     25a:	b7 9b       	sbis	0x16, 7	; 22
     25c:	d8 a7       	std	Y+40, r29	; 0x28
     25e:	1a 39       	cpi	r17, 0x9A	; 154
     260:	68 56       	subi	r22, 0x68	; 104
     262:	18 ae       	std	Y+56, r1	; 0x38
     264:	ba ab       	std	Y+50, r27	; 0x32
     266:	55 8c       	ldd	r5, Z+29	; 0x1d
     268:	1d 3c       	cpi	r17, 0xCD	; 205
     26a:	b7 cc       	rjmp	.-1682   	; 0xfffffbda <__eeprom_end+0xff7efbda>
     26c:	57 63       	ori	r21, 0x37	; 55
     26e:	bd 6d       	ori	r27, 0xDD	; 221
     270:	ed fd       	.word	0xfded	; ????
     272:	75 3e       	cpi	r23, 0xE5	; 229
     274:	f6 17       	cp	r31, r22
     276:	72 31       	cpi	r23, 0x12	; 18
     278:	bf 00       	.word	0x00bf	; ????
     27a:	00 00       	nop
     27c:	80 3f       	cpi	r24, 0xF0	; 240

0000027e <__trampolines_end>:
     27e:	6e 61       	ori	r22, 0x1E	; 30
     280:	6e 00       	.word	0x006e	; ????

00000282 <__c.2332>:
     282:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     292:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     2a2:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2b2:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2c2:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2d2:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2e2:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2f2:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     302:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     312:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     322:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     332:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     342:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     352:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     362:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     372:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000380 <__ctors_end>:
     380:	11 24       	eor	r1, r1
     382:	1f be       	out	0x3f, r1	; 63
     384:	cf ef       	ldi	r28, 0xFF	; 255
     386:	cd bf       	out	0x3d, r28	; 61
     388:	df e3       	ldi	r29, 0x3F	; 63
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	00 e0       	ldi	r16, 0x00	; 0
     38e:	0c bf       	out	0x3c, r16	; 60
     390:	18 be       	out	0x38, r1	; 56
     392:	19 be       	out	0x39, r1	; 57
     394:	1a be       	out	0x3a, r1	; 58
     396:	1b be       	out	0x3b, r1	; 59

00000398 <__do_copy_data>:
     398:	10 e2       	ldi	r17, 0x20	; 32
     39a:	a0 e0       	ldi	r26, 0x00	; 0
     39c:	b0 e2       	ldi	r27, 0x20	; 32
     39e:	ee ee       	ldi	r30, 0xEE	; 238
     3a0:	f1 e4       	ldi	r31, 0x41	; 65
     3a2:	00 e0       	ldi	r16, 0x00	; 0
     3a4:	0b bf       	out	0x3b, r16	; 59
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <__do_copy_data+0x14>
     3a8:	07 90       	elpm	r0, Z+
     3aa:	0d 92       	st	X+, r0
     3ac:	a0 36       	cpi	r26, 0x60	; 96
     3ae:	b1 07       	cpc	r27, r17
     3b0:	d9 f7       	brne	.-10     	; 0x3a8 <__do_copy_data+0x10>
     3b2:	1b be       	out	0x3b, r1	; 59

000003b4 <__do_clear_bss>:
     3b4:	20 e2       	ldi	r18, 0x20	; 32
     3b6:	a0 e6       	ldi	r26, 0x60	; 96
     3b8:	b0 e2       	ldi	r27, 0x20	; 32
     3ba:	01 c0       	rjmp	.+2      	; 0x3be <.do_clear_bss_start>

000003bc <.do_clear_bss_loop>:
     3bc:	1d 92       	st	X+, r1

000003be <.do_clear_bss_start>:
     3be:	a4 3d       	cpi	r26, 0xD4	; 212
     3c0:	b2 07       	cpc	r27, r18
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <.do_clear_bss_loop>
     3c4:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <main>
     3c8:	0c 94 f5 20 	jmp	0x41ea	; 0x41ea <_exit>

000003cc <__bad_interrupt>:
     3cc:	19 ce       	rjmp	.-974    	; 0x0 <__vectors>

000003ce <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     3ce:	cf 93       	push	r28
     3d0:	df 93       	push	r29
     3d2:	1f 92       	push	r1
     3d4:	1f 92       	push	r1
     3d6:	cd b7       	in	r28, 0x3d	; 61
     3d8:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     3da:	8f ef       	ldi	r24, 0xFF	; 255
     3dc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     3e0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     3e4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     3e8:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     3ec:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     3f0:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     3f4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     3f8:	8f b7       	in	r24, 0x3f	; 63
     3fa:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     3fc:	f8 94       	cli
	return flags;
     3fe:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     400:	e0 e5       	ldi	r30, 0x50	; 80
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	82 60       	ori	r24, 0x02	; 2
     408:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     40a:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     40c:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     40e:	81 ff       	sbrs	r24, 1
     410:	fd cf       	rjmp	.-6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     412:	61 e0       	ldi	r22, 0x01	; 1
     414:	80 e4       	ldi	r24, 0x40	; 64
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	38 d2       	rcall	.+1136   	; 0x88a <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     41a:	8f b7       	in	r24, 0x3f	; 63
     41c:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     41e:	f8 94       	cli
	return flags;
     420:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     422:	e0 e5       	ldi	r30, 0x50	; 80
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	8e 7f       	andi	r24, 0xFE	; 254
     42a:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     42c:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     42e:	0f 90       	pop	r0
     430:	0f 90       	pop	r0
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	08 95       	ret

00000438 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	1f 92       	push	r1
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     442:	9f b7       	in	r25, 0x3f	; 63
     444:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     446:	f8 94       	cli
	return flags;
     448:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     44a:	e8 2f       	mov	r30, r24
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	e0 59       	subi	r30, 0x90	; 144
     450:	ff 4f       	sbci	r31, 0xFF	; 255
     452:	60 95       	com	r22
     454:	80 81       	ld	r24, Z
     456:	68 23       	and	r22, r24
     458:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     45a:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     45c:	0f 90       	pop	r0
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	1f 92       	push	r1
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     46e:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <stdio_base>
     472:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <stdio_base+0x1>
     476:	e0 91 b0 20 	lds	r30, 0x20B0	; 0x8020b0 <ptr_get>
     47a:	f0 91 b1 20 	lds	r31, 0x20B1	; 0x8020b1 <ptr_get+0x1>
     47e:	be 01       	movw	r22, r28
     480:	6f 5f       	subi	r22, 0xFF	; 255
     482:	7f 4f       	sbci	r23, 0xFF	; 255
     484:	19 95       	eicall
	return c;
     486:	89 81       	ldd	r24, Y+1	; 0x01
}
     488:	08 2e       	mov	r0, r24
     48a:	00 0c       	add	r0, r0
     48c:	99 0b       	sbc	r25, r25
     48e:	0f 90       	pop	r0
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     496:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     498:	80 91 b4 20 	lds	r24, 0x20B4	; 0x8020b4 <stdio_base>
     49c:	90 91 b5 20 	lds	r25, 0x20B5	; 0x8020b5 <stdio_base+0x1>
     4a0:	e0 91 b2 20 	lds	r30, 0x20B2	; 0x8020b2 <ptr_put>
     4a4:	f0 91 b3 20 	lds	r31, 0x20B3	; 0x8020b3 <ptr_put+0x1>
     4a8:	19 95       	eicall
     4aa:	99 23       	and	r25, r25
     4ac:	1c f0       	brlt	.+6      	; 0x4b4 <_write+0x1e>
		return -1;
	}
	return 1;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     4b4:	8f ef       	ldi	r24, 0xFF	; 255
     4b6:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     4b8:	08 95       	ret

000004ba <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     4ba:	1f 92       	push	r1
     4bc:	0f 92       	push	r0
     4be:	0f b6       	in	r0, 0x3f	; 63
     4c0:	0f 92       	push	r0
     4c2:	11 24       	eor	r1, r1
     4c4:	08 b6       	in	r0, 0x38	; 56
     4c6:	0f 92       	push	r0
     4c8:	18 be       	out	0x38, r1	; 56
     4ca:	09 b6       	in	r0, 0x39	; 57
     4cc:	0f 92       	push	r0
     4ce:	19 be       	out	0x39, r1	; 57
     4d0:	0b b6       	in	r0, 0x3b	; 59
     4d2:	0f 92       	push	r0
     4d4:	1b be       	out	0x3b, r1	; 59
     4d6:	2f 93       	push	r18
     4d8:	3f 93       	push	r19
     4da:	4f 93       	push	r20
     4dc:	5f 93       	push	r21
     4de:	6f 93       	push	r22
     4e0:	7f 93       	push	r23
     4e2:	8f 93       	push	r24
     4e4:	9f 93       	push	r25
     4e6:	af 93       	push	r26
     4e8:	bf 93       	push	r27
     4ea:	ef 93       	push	r30
     4ec:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     4ee:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     4f2:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     4f6:	e0 91 b8 20 	lds	r30, 0x20B8	; 0x8020b8 <adca_callback>
     4fa:	f0 91 b9 20 	lds	r31, 0x20B9	; 0x8020b9 <adca_callback+0x1>
     4fe:	61 e0       	ldi	r22, 0x01	; 1
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	19 95       	eicall
}
     506:	ff 91       	pop	r31
     508:	ef 91       	pop	r30
     50a:	bf 91       	pop	r27
     50c:	af 91       	pop	r26
     50e:	9f 91       	pop	r25
     510:	8f 91       	pop	r24
     512:	7f 91       	pop	r23
     514:	6f 91       	pop	r22
     516:	5f 91       	pop	r21
     518:	4f 91       	pop	r20
     51a:	3f 91       	pop	r19
     51c:	2f 91       	pop	r18
     51e:	0f 90       	pop	r0
     520:	0b be       	out	0x3b, r0	; 59
     522:	0f 90       	pop	r0
     524:	09 be       	out	0x39, r0	; 57
     526:	0f 90       	pop	r0
     528:	08 be       	out	0x38, r0	; 56
     52a:	0f 90       	pop	r0
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	0f 90       	pop	r0
     530:	1f 90       	pop	r1
     532:	18 95       	reti

00000534 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     534:	1f 92       	push	r1
     536:	0f 92       	push	r0
     538:	0f b6       	in	r0, 0x3f	; 63
     53a:	0f 92       	push	r0
     53c:	11 24       	eor	r1, r1
     53e:	08 b6       	in	r0, 0x38	; 56
     540:	0f 92       	push	r0
     542:	18 be       	out	0x38, r1	; 56
     544:	09 b6       	in	r0, 0x39	; 57
     546:	0f 92       	push	r0
     548:	19 be       	out	0x39, r1	; 57
     54a:	0b b6       	in	r0, 0x3b	; 59
     54c:	0f 92       	push	r0
     54e:	1b be       	out	0x3b, r1	; 59
     550:	2f 93       	push	r18
     552:	3f 93       	push	r19
     554:	4f 93       	push	r20
     556:	5f 93       	push	r21
     558:	6f 93       	push	r22
     55a:	7f 93       	push	r23
     55c:	8f 93       	push	r24
     55e:	9f 93       	push	r25
     560:	af 93       	push	r26
     562:	bf 93       	push	r27
     564:	ef 93       	push	r30
     566:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     568:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     56c:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     570:	e0 91 b8 20 	lds	r30, 0x20B8	; 0x8020b8 <adca_callback>
     574:	f0 91 b9 20 	lds	r31, 0x20B9	; 0x8020b9 <adca_callback+0x1>
     578:	62 e0       	ldi	r22, 0x02	; 2
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	92 e0       	ldi	r25, 0x02	; 2
     57e:	19 95       	eicall
}
     580:	ff 91       	pop	r31
     582:	ef 91       	pop	r30
     584:	bf 91       	pop	r27
     586:	af 91       	pop	r26
     588:	9f 91       	pop	r25
     58a:	8f 91       	pop	r24
     58c:	7f 91       	pop	r23
     58e:	6f 91       	pop	r22
     590:	5f 91       	pop	r21
     592:	4f 91       	pop	r20
     594:	3f 91       	pop	r19
     596:	2f 91       	pop	r18
     598:	0f 90       	pop	r0
     59a:	0b be       	out	0x3b, r0	; 59
     59c:	0f 90       	pop	r0
     59e:	09 be       	out	0x39, r0	; 57
     5a0:	0f 90       	pop	r0
     5a2:	08 be       	out	0x38, r0	; 56
     5a4:	0f 90       	pop	r0
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	0f 90       	pop	r0
     5aa:	1f 90       	pop	r1
     5ac:	18 95       	reti

000005ae <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     5ae:	1f 92       	push	r1
     5b0:	0f 92       	push	r0
     5b2:	0f b6       	in	r0, 0x3f	; 63
     5b4:	0f 92       	push	r0
     5b6:	11 24       	eor	r1, r1
     5b8:	08 b6       	in	r0, 0x38	; 56
     5ba:	0f 92       	push	r0
     5bc:	18 be       	out	0x38, r1	; 56
     5be:	09 b6       	in	r0, 0x39	; 57
     5c0:	0f 92       	push	r0
     5c2:	19 be       	out	0x39, r1	; 57
     5c4:	0b b6       	in	r0, 0x3b	; 59
     5c6:	0f 92       	push	r0
     5c8:	1b be       	out	0x3b, r1	; 59
     5ca:	2f 93       	push	r18
     5cc:	3f 93       	push	r19
     5ce:	4f 93       	push	r20
     5d0:	5f 93       	push	r21
     5d2:	6f 93       	push	r22
     5d4:	7f 93       	push	r23
     5d6:	8f 93       	push	r24
     5d8:	9f 93       	push	r25
     5da:	af 93       	push	r26
     5dc:	bf 93       	push	r27
     5de:	ef 93       	push	r30
     5e0:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     5e2:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     5e6:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     5ea:	e0 91 b8 20 	lds	r30, 0x20B8	; 0x8020b8 <adca_callback>
     5ee:	f0 91 b9 20 	lds	r31, 0x20B9	; 0x8020b9 <adca_callback+0x1>
     5f2:	64 e0       	ldi	r22, 0x04	; 4
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	19 95       	eicall
}
     5fa:	ff 91       	pop	r31
     5fc:	ef 91       	pop	r30
     5fe:	bf 91       	pop	r27
     600:	af 91       	pop	r26
     602:	9f 91       	pop	r25
     604:	8f 91       	pop	r24
     606:	7f 91       	pop	r23
     608:	6f 91       	pop	r22
     60a:	5f 91       	pop	r21
     60c:	4f 91       	pop	r20
     60e:	3f 91       	pop	r19
     610:	2f 91       	pop	r18
     612:	0f 90       	pop	r0
     614:	0b be       	out	0x3b, r0	; 59
     616:	0f 90       	pop	r0
     618:	09 be       	out	0x39, r0	; 57
     61a:	0f 90       	pop	r0
     61c:	08 be       	out	0x38, r0	; 56
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	0f 90       	pop	r0
     624:	1f 90       	pop	r1
     626:	18 95       	reti

00000628 <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     628:	1f 92       	push	r1
     62a:	0f 92       	push	r0
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	0f 92       	push	r0
     630:	11 24       	eor	r1, r1
     632:	08 b6       	in	r0, 0x38	; 56
     634:	0f 92       	push	r0
     636:	18 be       	out	0x38, r1	; 56
     638:	09 b6       	in	r0, 0x39	; 57
     63a:	0f 92       	push	r0
     63c:	19 be       	out	0x39, r1	; 57
     63e:	0b b6       	in	r0, 0x3b	; 59
     640:	0f 92       	push	r0
     642:	1b be       	out	0x3b, r1	; 59
     644:	2f 93       	push	r18
     646:	3f 93       	push	r19
     648:	4f 93       	push	r20
     64a:	5f 93       	push	r21
     64c:	6f 93       	push	r22
     64e:	7f 93       	push	r23
     650:	8f 93       	push	r24
     652:	9f 93       	push	r25
     654:	af 93       	push	r26
     656:	bf 93       	push	r27
     658:	ef 93       	push	r30
     65a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     65c:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     660:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     664:	e0 91 b8 20 	lds	r30, 0x20B8	; 0x8020b8 <adca_callback>
     668:	f0 91 b9 20 	lds	r31, 0x20B9	; 0x8020b9 <adca_callback+0x1>
     66c:	68 e0       	ldi	r22, 0x08	; 8
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	19 95       	eicall
}
     674:	ff 91       	pop	r31
     676:	ef 91       	pop	r30
     678:	bf 91       	pop	r27
     67a:	af 91       	pop	r26
     67c:	9f 91       	pop	r25
     67e:	8f 91       	pop	r24
     680:	7f 91       	pop	r23
     682:	6f 91       	pop	r22
     684:	5f 91       	pop	r21
     686:	4f 91       	pop	r20
     688:	3f 91       	pop	r19
     68a:	2f 91       	pop	r18
     68c:	0f 90       	pop	r0
     68e:	0b be       	out	0x3b, r0	; 59
     690:	0f 90       	pop	r0
     692:	09 be       	out	0x39, r0	; 57
     694:	0f 90       	pop	r0
     696:	08 be       	out	0x38, r0	; 56
     698:	0f 90       	pop	r0
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	0f 90       	pop	r0
     69e:	1f 90       	pop	r1
     6a0:	18 95       	reti

000006a2 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     6a2:	1f 92       	push	r1
     6a4:	0f 92       	push	r0
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	0f 92       	push	r0
     6aa:	11 24       	eor	r1, r1
     6ac:	08 b6       	in	r0, 0x38	; 56
     6ae:	0f 92       	push	r0
     6b0:	18 be       	out	0x38, r1	; 56
     6b2:	09 b6       	in	r0, 0x39	; 57
     6b4:	0f 92       	push	r0
     6b6:	19 be       	out	0x39, r1	; 57
     6b8:	0b b6       	in	r0, 0x3b	; 59
     6ba:	0f 92       	push	r0
     6bc:	1b be       	out	0x3b, r1	; 59
     6be:	2f 93       	push	r18
     6c0:	3f 93       	push	r19
     6c2:	4f 93       	push	r20
     6c4:	5f 93       	push	r21
     6c6:	6f 93       	push	r22
     6c8:	7f 93       	push	r23
     6ca:	8f 93       	push	r24
     6cc:	9f 93       	push	r25
     6ce:	af 93       	push	r26
     6d0:	bf 93       	push	r27
     6d2:	ef 93       	push	r30
     6d4:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     6d6:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     6da:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     6de:	e0 91 b6 20 	lds	r30, 0x20B6	; 0x8020b6 <adcb_callback>
     6e2:	f0 91 b7 20 	lds	r31, 0x20B7	; 0x8020b7 <adcb_callback+0x1>
     6e6:	61 e0       	ldi	r22, 0x01	; 1
     6e8:	80 e4       	ldi	r24, 0x40	; 64
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	19 95       	eicall
}
     6ee:	ff 91       	pop	r31
     6f0:	ef 91       	pop	r30
     6f2:	bf 91       	pop	r27
     6f4:	af 91       	pop	r26
     6f6:	9f 91       	pop	r25
     6f8:	8f 91       	pop	r24
     6fa:	7f 91       	pop	r23
     6fc:	6f 91       	pop	r22
     6fe:	5f 91       	pop	r21
     700:	4f 91       	pop	r20
     702:	3f 91       	pop	r19
     704:	2f 91       	pop	r18
     706:	0f 90       	pop	r0
     708:	0b be       	out	0x3b, r0	; 59
     70a:	0f 90       	pop	r0
     70c:	09 be       	out	0x39, r0	; 57
     70e:	0f 90       	pop	r0
     710:	08 be       	out	0x38, r0	; 56
     712:	0f 90       	pop	r0
     714:	0f be       	out	0x3f, r0	; 63
     716:	0f 90       	pop	r0
     718:	1f 90       	pop	r1
     71a:	18 95       	reti

0000071c <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     71c:	1f 92       	push	r1
     71e:	0f 92       	push	r0
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	0f 92       	push	r0
     724:	11 24       	eor	r1, r1
     726:	08 b6       	in	r0, 0x38	; 56
     728:	0f 92       	push	r0
     72a:	18 be       	out	0x38, r1	; 56
     72c:	09 b6       	in	r0, 0x39	; 57
     72e:	0f 92       	push	r0
     730:	19 be       	out	0x39, r1	; 57
     732:	0b b6       	in	r0, 0x3b	; 59
     734:	0f 92       	push	r0
     736:	1b be       	out	0x3b, r1	; 59
     738:	2f 93       	push	r18
     73a:	3f 93       	push	r19
     73c:	4f 93       	push	r20
     73e:	5f 93       	push	r21
     740:	6f 93       	push	r22
     742:	7f 93       	push	r23
     744:	8f 93       	push	r24
     746:	9f 93       	push	r25
     748:	af 93       	push	r26
     74a:	bf 93       	push	r27
     74c:	ef 93       	push	r30
     74e:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     750:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     754:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     758:	e0 91 b6 20 	lds	r30, 0x20B6	; 0x8020b6 <adcb_callback>
     75c:	f0 91 b7 20 	lds	r31, 0x20B7	; 0x8020b7 <adcb_callback+0x1>
     760:	62 e0       	ldi	r22, 0x02	; 2
     762:	80 e4       	ldi	r24, 0x40	; 64
     764:	92 e0       	ldi	r25, 0x02	; 2
     766:	19 95       	eicall
}
     768:	ff 91       	pop	r31
     76a:	ef 91       	pop	r30
     76c:	bf 91       	pop	r27
     76e:	af 91       	pop	r26
     770:	9f 91       	pop	r25
     772:	8f 91       	pop	r24
     774:	7f 91       	pop	r23
     776:	6f 91       	pop	r22
     778:	5f 91       	pop	r21
     77a:	4f 91       	pop	r20
     77c:	3f 91       	pop	r19
     77e:	2f 91       	pop	r18
     780:	0f 90       	pop	r0
     782:	0b be       	out	0x3b, r0	; 59
     784:	0f 90       	pop	r0
     786:	09 be       	out	0x39, r0	; 57
     788:	0f 90       	pop	r0
     78a:	08 be       	out	0x38, r0	; 56
     78c:	0f 90       	pop	r0
     78e:	0f be       	out	0x3f, r0	; 63
     790:	0f 90       	pop	r0
     792:	1f 90       	pop	r1
     794:	18 95       	reti

00000796 <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     796:	1f 92       	push	r1
     798:	0f 92       	push	r0
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	0f 92       	push	r0
     79e:	11 24       	eor	r1, r1
     7a0:	08 b6       	in	r0, 0x38	; 56
     7a2:	0f 92       	push	r0
     7a4:	18 be       	out	0x38, r1	; 56
     7a6:	09 b6       	in	r0, 0x39	; 57
     7a8:	0f 92       	push	r0
     7aa:	19 be       	out	0x39, r1	; 57
     7ac:	0b b6       	in	r0, 0x3b	; 59
     7ae:	0f 92       	push	r0
     7b0:	1b be       	out	0x3b, r1	; 59
     7b2:	2f 93       	push	r18
     7b4:	3f 93       	push	r19
     7b6:	4f 93       	push	r20
     7b8:	5f 93       	push	r21
     7ba:	6f 93       	push	r22
     7bc:	7f 93       	push	r23
     7be:	8f 93       	push	r24
     7c0:	9f 93       	push	r25
     7c2:	af 93       	push	r26
     7c4:	bf 93       	push	r27
     7c6:	ef 93       	push	r30
     7c8:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     7ca:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     7ce:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     7d2:	e0 91 b6 20 	lds	r30, 0x20B6	; 0x8020b6 <adcb_callback>
     7d6:	f0 91 b7 20 	lds	r31, 0x20B7	; 0x8020b7 <adcb_callback+0x1>
     7da:	64 e0       	ldi	r22, 0x04	; 4
     7dc:	80 e4       	ldi	r24, 0x40	; 64
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	19 95       	eicall
}
     7e2:	ff 91       	pop	r31
     7e4:	ef 91       	pop	r30
     7e6:	bf 91       	pop	r27
     7e8:	af 91       	pop	r26
     7ea:	9f 91       	pop	r25
     7ec:	8f 91       	pop	r24
     7ee:	7f 91       	pop	r23
     7f0:	6f 91       	pop	r22
     7f2:	5f 91       	pop	r21
     7f4:	4f 91       	pop	r20
     7f6:	3f 91       	pop	r19
     7f8:	2f 91       	pop	r18
     7fa:	0f 90       	pop	r0
     7fc:	0b be       	out	0x3b, r0	; 59
     7fe:	0f 90       	pop	r0
     800:	09 be       	out	0x39, r0	; 57
     802:	0f 90       	pop	r0
     804:	08 be       	out	0x38, r0	; 56
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     810:	1f 92       	push	r1
     812:	0f 92       	push	r0
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	0f 92       	push	r0
     818:	11 24       	eor	r1, r1
     81a:	08 b6       	in	r0, 0x38	; 56
     81c:	0f 92       	push	r0
     81e:	18 be       	out	0x38, r1	; 56
     820:	09 b6       	in	r0, 0x39	; 57
     822:	0f 92       	push	r0
     824:	19 be       	out	0x39, r1	; 57
     826:	0b b6       	in	r0, 0x3b	; 59
     828:	0f 92       	push	r0
     82a:	1b be       	out	0x3b, r1	; 59
     82c:	2f 93       	push	r18
     82e:	3f 93       	push	r19
     830:	4f 93       	push	r20
     832:	5f 93       	push	r21
     834:	6f 93       	push	r22
     836:	7f 93       	push	r23
     838:	8f 93       	push	r24
     83a:	9f 93       	push	r25
     83c:	af 93       	push	r26
     83e:	bf 93       	push	r27
     840:	ef 93       	push	r30
     842:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     844:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     848:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     84c:	e0 91 b6 20 	lds	r30, 0x20B6	; 0x8020b6 <adcb_callback>
     850:	f0 91 b7 20 	lds	r31, 0x20B7	; 0x8020b7 <adcb_callback+0x1>
     854:	68 e0       	ldi	r22, 0x08	; 8
     856:	80 e4       	ldi	r24, 0x40	; 64
     858:	92 e0       	ldi	r25, 0x02	; 2
     85a:	19 95       	eicall
}
     85c:	ff 91       	pop	r31
     85e:	ef 91       	pop	r30
     860:	bf 91       	pop	r27
     862:	af 91       	pop	r26
     864:	9f 91       	pop	r25
     866:	8f 91       	pop	r24
     868:	7f 91       	pop	r23
     86a:	6f 91       	pop	r22
     86c:	5f 91       	pop	r21
     86e:	4f 91       	pop	r20
     870:	3f 91       	pop	r19
     872:	2f 91       	pop	r18
     874:	0f 90       	pop	r0
     876:	0b be       	out	0x3b, r0	; 59
     878:	0f 90       	pop	r0
     87a:	09 be       	out	0x39, r0	; 57
     87c:	0f 90       	pop	r0
     87e:	08 be       	out	0x38, r0	; 56
     880:	0f 90       	pop	r0
     882:	0f be       	out	0x3f, r0	; 63
     884:	0f 90       	pop	r0
     886:	1f 90       	pop	r1
     888:	18 95       	reti

0000088a <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     88a:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     88c:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     88e:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     890:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     892:	60 83       	st	Z, r22
	ret                             // Return to caller
     894:	08 95       	ret

00000896 <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     896:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     89a:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     89c:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     89e:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     8a2:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     8a4:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     8a8:	08 95       	ret

000008aa <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     8aa:	1f 92       	push	r1
     8ac:	0f 92       	push	r0
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	0f 92       	push	r0
     8b2:	11 24       	eor	r1, r1
     8b4:	08 b6       	in	r0, 0x38	; 56
     8b6:	0f 92       	push	r0
     8b8:	18 be       	out	0x38, r1	; 56
     8ba:	09 b6       	in	r0, 0x39	; 57
     8bc:	0f 92       	push	r0
     8be:	19 be       	out	0x39, r1	; 57
     8c0:	0b b6       	in	r0, 0x3b	; 59
     8c2:	0f 92       	push	r0
     8c4:	1b be       	out	0x3b, r1	; 59
     8c6:	2f 93       	push	r18
     8c8:	3f 93       	push	r19
     8ca:	4f 93       	push	r20
     8cc:	5f 93       	push	r21
     8ce:	6f 93       	push	r22
     8d0:	7f 93       	push	r23
     8d2:	8f 93       	push	r24
     8d4:	9f 93       	push	r25
     8d6:	af 93       	push	r26
     8d8:	bf 93       	push	r27
     8da:	ef 93       	push	r30
     8dc:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     8de:	e0 91 ae 20 	lds	r30, 0x20AE	; 0x8020ae <tc_tcc0_ovf_callback>
     8e2:	f0 91 af 20 	lds	r31, 0x20AF	; 0x8020af <tc_tcc0_ovf_callback+0x1>
     8e6:	30 97       	sbiw	r30, 0x00	; 0
     8e8:	09 f0       	breq	.+2      	; 0x8ec <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     8ea:	19 95       	eicall
	}
}
     8ec:	ff 91       	pop	r31
     8ee:	ef 91       	pop	r30
     8f0:	bf 91       	pop	r27
     8f2:	af 91       	pop	r26
     8f4:	9f 91       	pop	r25
     8f6:	8f 91       	pop	r24
     8f8:	7f 91       	pop	r23
     8fa:	6f 91       	pop	r22
     8fc:	5f 91       	pop	r21
     8fe:	4f 91       	pop	r20
     900:	3f 91       	pop	r19
     902:	2f 91       	pop	r18
     904:	0f 90       	pop	r0
     906:	0b be       	out	0x3b, r0	; 59
     908:	0f 90       	pop	r0
     90a:	09 be       	out	0x39, r0	; 57
     90c:	0f 90       	pop	r0
     90e:	08 be       	out	0x38, r0	; 56
     910:	0f 90       	pop	r0
     912:	0f be       	out	0x3f, r0	; 63
     914:	0f 90       	pop	r0
     916:	1f 90       	pop	r1
     918:	18 95       	reti

0000091a <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     91a:	1f 92       	push	r1
     91c:	0f 92       	push	r0
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	0f 92       	push	r0
     922:	11 24       	eor	r1, r1
     924:	08 b6       	in	r0, 0x38	; 56
     926:	0f 92       	push	r0
     928:	18 be       	out	0x38, r1	; 56
     92a:	09 b6       	in	r0, 0x39	; 57
     92c:	0f 92       	push	r0
     92e:	19 be       	out	0x39, r1	; 57
     930:	0b b6       	in	r0, 0x3b	; 59
     932:	0f 92       	push	r0
     934:	1b be       	out	0x3b, r1	; 59
     936:	2f 93       	push	r18
     938:	3f 93       	push	r19
     93a:	4f 93       	push	r20
     93c:	5f 93       	push	r21
     93e:	6f 93       	push	r22
     940:	7f 93       	push	r23
     942:	8f 93       	push	r24
     944:	9f 93       	push	r25
     946:	af 93       	push	r26
     948:	bf 93       	push	r27
     94a:	ef 93       	push	r30
     94c:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     94e:	e0 91 ac 20 	lds	r30, 0x20AC	; 0x8020ac <tc_tcc0_err_callback>
     952:	f0 91 ad 20 	lds	r31, 0x20AD	; 0x8020ad <tc_tcc0_err_callback+0x1>
     956:	30 97       	sbiw	r30, 0x00	; 0
     958:	09 f0       	breq	.+2      	; 0x95c <__vector_15+0x42>
		tc_tcc0_err_callback();
     95a:	19 95       	eicall
	}
}
     95c:	ff 91       	pop	r31
     95e:	ef 91       	pop	r30
     960:	bf 91       	pop	r27
     962:	af 91       	pop	r26
     964:	9f 91       	pop	r25
     966:	8f 91       	pop	r24
     968:	7f 91       	pop	r23
     96a:	6f 91       	pop	r22
     96c:	5f 91       	pop	r21
     96e:	4f 91       	pop	r20
     970:	3f 91       	pop	r19
     972:	2f 91       	pop	r18
     974:	0f 90       	pop	r0
     976:	0b be       	out	0x3b, r0	; 59
     978:	0f 90       	pop	r0
     97a:	09 be       	out	0x39, r0	; 57
     97c:	0f 90       	pop	r0
     97e:	08 be       	out	0x38, r0	; 56
     980:	0f 90       	pop	r0
     982:	0f be       	out	0x3f, r0	; 63
     984:	0f 90       	pop	r0
     986:	1f 90       	pop	r1
     988:	18 95       	reti

0000098a <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     98a:	1f 92       	push	r1
     98c:	0f 92       	push	r0
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	0f 92       	push	r0
     992:	11 24       	eor	r1, r1
     994:	08 b6       	in	r0, 0x38	; 56
     996:	0f 92       	push	r0
     998:	18 be       	out	0x38, r1	; 56
     99a:	09 b6       	in	r0, 0x39	; 57
     99c:	0f 92       	push	r0
     99e:	19 be       	out	0x39, r1	; 57
     9a0:	0b b6       	in	r0, 0x3b	; 59
     9a2:	0f 92       	push	r0
     9a4:	1b be       	out	0x3b, r1	; 59
     9a6:	2f 93       	push	r18
     9a8:	3f 93       	push	r19
     9aa:	4f 93       	push	r20
     9ac:	5f 93       	push	r21
     9ae:	6f 93       	push	r22
     9b0:	7f 93       	push	r23
     9b2:	8f 93       	push	r24
     9b4:	9f 93       	push	r25
     9b6:	af 93       	push	r26
     9b8:	bf 93       	push	r27
     9ba:	ef 93       	push	r30
     9bc:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     9be:	e0 91 aa 20 	lds	r30, 0x20AA	; 0x8020aa <tc_tcc0_cca_callback>
     9c2:	f0 91 ab 20 	lds	r31, 0x20AB	; 0x8020ab <tc_tcc0_cca_callback+0x1>
     9c6:	30 97       	sbiw	r30, 0x00	; 0
     9c8:	09 f0       	breq	.+2      	; 0x9cc <__vector_16+0x42>
		tc_tcc0_cca_callback();
     9ca:	19 95       	eicall
	}
}
     9cc:	ff 91       	pop	r31
     9ce:	ef 91       	pop	r30
     9d0:	bf 91       	pop	r27
     9d2:	af 91       	pop	r26
     9d4:	9f 91       	pop	r25
     9d6:	8f 91       	pop	r24
     9d8:	7f 91       	pop	r23
     9da:	6f 91       	pop	r22
     9dc:	5f 91       	pop	r21
     9de:	4f 91       	pop	r20
     9e0:	3f 91       	pop	r19
     9e2:	2f 91       	pop	r18
     9e4:	0f 90       	pop	r0
     9e6:	0b be       	out	0x3b, r0	; 59
     9e8:	0f 90       	pop	r0
     9ea:	09 be       	out	0x39, r0	; 57
     9ec:	0f 90       	pop	r0
     9ee:	08 be       	out	0x38, r0	; 56
     9f0:	0f 90       	pop	r0
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	0f 90       	pop	r0
     9f6:	1f 90       	pop	r1
     9f8:	18 95       	reti

000009fa <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     9fa:	1f 92       	push	r1
     9fc:	0f 92       	push	r0
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	0f 92       	push	r0
     a02:	11 24       	eor	r1, r1
     a04:	08 b6       	in	r0, 0x38	; 56
     a06:	0f 92       	push	r0
     a08:	18 be       	out	0x38, r1	; 56
     a0a:	09 b6       	in	r0, 0x39	; 57
     a0c:	0f 92       	push	r0
     a0e:	19 be       	out	0x39, r1	; 57
     a10:	0b b6       	in	r0, 0x3b	; 59
     a12:	0f 92       	push	r0
     a14:	1b be       	out	0x3b, r1	; 59
     a16:	2f 93       	push	r18
     a18:	3f 93       	push	r19
     a1a:	4f 93       	push	r20
     a1c:	5f 93       	push	r21
     a1e:	6f 93       	push	r22
     a20:	7f 93       	push	r23
     a22:	8f 93       	push	r24
     a24:	9f 93       	push	r25
     a26:	af 93       	push	r26
     a28:	bf 93       	push	r27
     a2a:	ef 93       	push	r30
     a2c:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     a2e:	e0 91 a8 20 	lds	r30, 0x20A8	; 0x8020a8 <tc_tcc0_ccb_callback>
     a32:	f0 91 a9 20 	lds	r31, 0x20A9	; 0x8020a9 <tc_tcc0_ccb_callback+0x1>
     a36:	30 97       	sbiw	r30, 0x00	; 0
     a38:	09 f0       	breq	.+2      	; 0xa3c <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     a3a:	19 95       	eicall
	}
}
     a3c:	ff 91       	pop	r31
     a3e:	ef 91       	pop	r30
     a40:	bf 91       	pop	r27
     a42:	af 91       	pop	r26
     a44:	9f 91       	pop	r25
     a46:	8f 91       	pop	r24
     a48:	7f 91       	pop	r23
     a4a:	6f 91       	pop	r22
     a4c:	5f 91       	pop	r21
     a4e:	4f 91       	pop	r20
     a50:	3f 91       	pop	r19
     a52:	2f 91       	pop	r18
     a54:	0f 90       	pop	r0
     a56:	0b be       	out	0x3b, r0	; 59
     a58:	0f 90       	pop	r0
     a5a:	09 be       	out	0x39, r0	; 57
     a5c:	0f 90       	pop	r0
     a5e:	08 be       	out	0x38, r0	; 56
     a60:	0f 90       	pop	r0
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	0f 90       	pop	r0
     a66:	1f 90       	pop	r1
     a68:	18 95       	reti

00000a6a <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     a6a:	1f 92       	push	r1
     a6c:	0f 92       	push	r0
     a6e:	0f b6       	in	r0, 0x3f	; 63
     a70:	0f 92       	push	r0
     a72:	11 24       	eor	r1, r1
     a74:	08 b6       	in	r0, 0x38	; 56
     a76:	0f 92       	push	r0
     a78:	18 be       	out	0x38, r1	; 56
     a7a:	09 b6       	in	r0, 0x39	; 57
     a7c:	0f 92       	push	r0
     a7e:	19 be       	out	0x39, r1	; 57
     a80:	0b b6       	in	r0, 0x3b	; 59
     a82:	0f 92       	push	r0
     a84:	1b be       	out	0x3b, r1	; 59
     a86:	2f 93       	push	r18
     a88:	3f 93       	push	r19
     a8a:	4f 93       	push	r20
     a8c:	5f 93       	push	r21
     a8e:	6f 93       	push	r22
     a90:	7f 93       	push	r23
     a92:	8f 93       	push	r24
     a94:	9f 93       	push	r25
     a96:	af 93       	push	r26
     a98:	bf 93       	push	r27
     a9a:	ef 93       	push	r30
     a9c:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     a9e:	e0 91 a6 20 	lds	r30, 0x20A6	; 0x8020a6 <tc_tcc0_ccc_callback>
     aa2:	f0 91 a7 20 	lds	r31, 0x20A7	; 0x8020a7 <tc_tcc0_ccc_callback+0x1>
     aa6:	30 97       	sbiw	r30, 0x00	; 0
     aa8:	09 f0       	breq	.+2      	; 0xaac <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     aaa:	19 95       	eicall
	}
}
     aac:	ff 91       	pop	r31
     aae:	ef 91       	pop	r30
     ab0:	bf 91       	pop	r27
     ab2:	af 91       	pop	r26
     ab4:	9f 91       	pop	r25
     ab6:	8f 91       	pop	r24
     ab8:	7f 91       	pop	r23
     aba:	6f 91       	pop	r22
     abc:	5f 91       	pop	r21
     abe:	4f 91       	pop	r20
     ac0:	3f 91       	pop	r19
     ac2:	2f 91       	pop	r18
     ac4:	0f 90       	pop	r0
     ac6:	0b be       	out	0x3b, r0	; 59
     ac8:	0f 90       	pop	r0
     aca:	09 be       	out	0x39, r0	; 57
     acc:	0f 90       	pop	r0
     ace:	08 be       	out	0x38, r0	; 56
     ad0:	0f 90       	pop	r0
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	0f 90       	pop	r0
     ad6:	1f 90       	pop	r1
     ad8:	18 95       	reti

00000ada <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     ada:	1f 92       	push	r1
     adc:	0f 92       	push	r0
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	0f 92       	push	r0
     ae2:	11 24       	eor	r1, r1
     ae4:	08 b6       	in	r0, 0x38	; 56
     ae6:	0f 92       	push	r0
     ae8:	18 be       	out	0x38, r1	; 56
     aea:	09 b6       	in	r0, 0x39	; 57
     aec:	0f 92       	push	r0
     aee:	19 be       	out	0x39, r1	; 57
     af0:	0b b6       	in	r0, 0x3b	; 59
     af2:	0f 92       	push	r0
     af4:	1b be       	out	0x3b, r1	; 59
     af6:	2f 93       	push	r18
     af8:	3f 93       	push	r19
     afa:	4f 93       	push	r20
     afc:	5f 93       	push	r21
     afe:	6f 93       	push	r22
     b00:	7f 93       	push	r23
     b02:	8f 93       	push	r24
     b04:	9f 93       	push	r25
     b06:	af 93       	push	r26
     b08:	bf 93       	push	r27
     b0a:	ef 93       	push	r30
     b0c:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     b0e:	e0 91 a4 20 	lds	r30, 0x20A4	; 0x8020a4 <tc_tcc0_ccd_callback>
     b12:	f0 91 a5 20 	lds	r31, 0x20A5	; 0x8020a5 <tc_tcc0_ccd_callback+0x1>
     b16:	30 97       	sbiw	r30, 0x00	; 0
     b18:	09 f0       	breq	.+2      	; 0xb1c <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     b1a:	19 95       	eicall
	}
}
     b1c:	ff 91       	pop	r31
     b1e:	ef 91       	pop	r30
     b20:	bf 91       	pop	r27
     b22:	af 91       	pop	r26
     b24:	9f 91       	pop	r25
     b26:	8f 91       	pop	r24
     b28:	7f 91       	pop	r23
     b2a:	6f 91       	pop	r22
     b2c:	5f 91       	pop	r21
     b2e:	4f 91       	pop	r20
     b30:	3f 91       	pop	r19
     b32:	2f 91       	pop	r18
     b34:	0f 90       	pop	r0
     b36:	0b be       	out	0x3b, r0	; 59
     b38:	0f 90       	pop	r0
     b3a:	09 be       	out	0x39, r0	; 57
     b3c:	0f 90       	pop	r0
     b3e:	08 be       	out	0x38, r0	; 56
     b40:	0f 90       	pop	r0
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	0f 90       	pop	r0
     b46:	1f 90       	pop	r1
     b48:	18 95       	reti

00000b4a <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     b4a:	1f 92       	push	r1
     b4c:	0f 92       	push	r0
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	0f 92       	push	r0
     b52:	11 24       	eor	r1, r1
     b54:	08 b6       	in	r0, 0x38	; 56
     b56:	0f 92       	push	r0
     b58:	18 be       	out	0x38, r1	; 56
     b5a:	09 b6       	in	r0, 0x39	; 57
     b5c:	0f 92       	push	r0
     b5e:	19 be       	out	0x39, r1	; 57
     b60:	0b b6       	in	r0, 0x3b	; 59
     b62:	0f 92       	push	r0
     b64:	1b be       	out	0x3b, r1	; 59
     b66:	2f 93       	push	r18
     b68:	3f 93       	push	r19
     b6a:	4f 93       	push	r20
     b6c:	5f 93       	push	r21
     b6e:	6f 93       	push	r22
     b70:	7f 93       	push	r23
     b72:	8f 93       	push	r24
     b74:	9f 93       	push	r25
     b76:	af 93       	push	r26
     b78:	bf 93       	push	r27
     b7a:	ef 93       	push	r30
     b7c:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     b7e:	e0 91 a2 20 	lds	r30, 0x20A2	; 0x8020a2 <tc_tcc1_ovf_callback>
     b82:	f0 91 a3 20 	lds	r31, 0x20A3	; 0x8020a3 <tc_tcc1_ovf_callback+0x1>
     b86:	30 97       	sbiw	r30, 0x00	; 0
     b88:	09 f0       	breq	.+2      	; 0xb8c <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     b8a:	19 95       	eicall
	}
}
     b8c:	ff 91       	pop	r31
     b8e:	ef 91       	pop	r30
     b90:	bf 91       	pop	r27
     b92:	af 91       	pop	r26
     b94:	9f 91       	pop	r25
     b96:	8f 91       	pop	r24
     b98:	7f 91       	pop	r23
     b9a:	6f 91       	pop	r22
     b9c:	5f 91       	pop	r21
     b9e:	4f 91       	pop	r20
     ba0:	3f 91       	pop	r19
     ba2:	2f 91       	pop	r18
     ba4:	0f 90       	pop	r0
     ba6:	0b be       	out	0x3b, r0	; 59
     ba8:	0f 90       	pop	r0
     baa:	09 be       	out	0x39, r0	; 57
     bac:	0f 90       	pop	r0
     bae:	08 be       	out	0x38, r0	; 56
     bb0:	0f 90       	pop	r0
     bb2:	0f be       	out	0x3f, r0	; 63
     bb4:	0f 90       	pop	r0
     bb6:	1f 90       	pop	r1
     bb8:	18 95       	reti

00000bba <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     bba:	1f 92       	push	r1
     bbc:	0f 92       	push	r0
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	0f 92       	push	r0
     bc2:	11 24       	eor	r1, r1
     bc4:	08 b6       	in	r0, 0x38	; 56
     bc6:	0f 92       	push	r0
     bc8:	18 be       	out	0x38, r1	; 56
     bca:	09 b6       	in	r0, 0x39	; 57
     bcc:	0f 92       	push	r0
     bce:	19 be       	out	0x39, r1	; 57
     bd0:	0b b6       	in	r0, 0x3b	; 59
     bd2:	0f 92       	push	r0
     bd4:	1b be       	out	0x3b, r1	; 59
     bd6:	2f 93       	push	r18
     bd8:	3f 93       	push	r19
     bda:	4f 93       	push	r20
     bdc:	5f 93       	push	r21
     bde:	6f 93       	push	r22
     be0:	7f 93       	push	r23
     be2:	8f 93       	push	r24
     be4:	9f 93       	push	r25
     be6:	af 93       	push	r26
     be8:	bf 93       	push	r27
     bea:	ef 93       	push	r30
     bec:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     bee:	e0 91 a0 20 	lds	r30, 0x20A0	; 0x8020a0 <tc_tcc1_err_callback>
     bf2:	f0 91 a1 20 	lds	r31, 0x20A1	; 0x8020a1 <tc_tcc1_err_callback+0x1>
     bf6:	30 97       	sbiw	r30, 0x00	; 0
     bf8:	09 f0       	breq	.+2      	; 0xbfc <__vector_21+0x42>
		tc_tcc1_err_callback();
     bfa:	19 95       	eicall
	}
}
     bfc:	ff 91       	pop	r31
     bfe:	ef 91       	pop	r30
     c00:	bf 91       	pop	r27
     c02:	af 91       	pop	r26
     c04:	9f 91       	pop	r25
     c06:	8f 91       	pop	r24
     c08:	7f 91       	pop	r23
     c0a:	6f 91       	pop	r22
     c0c:	5f 91       	pop	r21
     c0e:	4f 91       	pop	r20
     c10:	3f 91       	pop	r19
     c12:	2f 91       	pop	r18
     c14:	0f 90       	pop	r0
     c16:	0b be       	out	0x3b, r0	; 59
     c18:	0f 90       	pop	r0
     c1a:	09 be       	out	0x39, r0	; 57
     c1c:	0f 90       	pop	r0
     c1e:	08 be       	out	0x38, r0	; 56
     c20:	0f 90       	pop	r0
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	0f 90       	pop	r0
     c26:	1f 90       	pop	r1
     c28:	18 95       	reti

00000c2a <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     c2a:	1f 92       	push	r1
     c2c:	0f 92       	push	r0
     c2e:	0f b6       	in	r0, 0x3f	; 63
     c30:	0f 92       	push	r0
     c32:	11 24       	eor	r1, r1
     c34:	08 b6       	in	r0, 0x38	; 56
     c36:	0f 92       	push	r0
     c38:	18 be       	out	0x38, r1	; 56
     c3a:	09 b6       	in	r0, 0x39	; 57
     c3c:	0f 92       	push	r0
     c3e:	19 be       	out	0x39, r1	; 57
     c40:	0b b6       	in	r0, 0x3b	; 59
     c42:	0f 92       	push	r0
     c44:	1b be       	out	0x3b, r1	; 59
     c46:	2f 93       	push	r18
     c48:	3f 93       	push	r19
     c4a:	4f 93       	push	r20
     c4c:	5f 93       	push	r21
     c4e:	6f 93       	push	r22
     c50:	7f 93       	push	r23
     c52:	8f 93       	push	r24
     c54:	9f 93       	push	r25
     c56:	af 93       	push	r26
     c58:	bf 93       	push	r27
     c5a:	ef 93       	push	r30
     c5c:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     c5e:	e0 91 9e 20 	lds	r30, 0x209E	; 0x80209e <tc_tcc1_cca_callback>
     c62:	f0 91 9f 20 	lds	r31, 0x209F	; 0x80209f <tc_tcc1_cca_callback+0x1>
     c66:	30 97       	sbiw	r30, 0x00	; 0
     c68:	09 f0       	breq	.+2      	; 0xc6c <__vector_22+0x42>
		tc_tcc1_cca_callback();
     c6a:	19 95       	eicall
	}
}
     c6c:	ff 91       	pop	r31
     c6e:	ef 91       	pop	r30
     c70:	bf 91       	pop	r27
     c72:	af 91       	pop	r26
     c74:	9f 91       	pop	r25
     c76:	8f 91       	pop	r24
     c78:	7f 91       	pop	r23
     c7a:	6f 91       	pop	r22
     c7c:	5f 91       	pop	r21
     c7e:	4f 91       	pop	r20
     c80:	3f 91       	pop	r19
     c82:	2f 91       	pop	r18
     c84:	0f 90       	pop	r0
     c86:	0b be       	out	0x3b, r0	; 59
     c88:	0f 90       	pop	r0
     c8a:	09 be       	out	0x39, r0	; 57
     c8c:	0f 90       	pop	r0
     c8e:	08 be       	out	0x38, r0	; 56
     c90:	0f 90       	pop	r0
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	0f 90       	pop	r0
     c96:	1f 90       	pop	r1
     c98:	18 95       	reti

00000c9a <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     c9a:	1f 92       	push	r1
     c9c:	0f 92       	push	r0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	0f 92       	push	r0
     ca2:	11 24       	eor	r1, r1
     ca4:	08 b6       	in	r0, 0x38	; 56
     ca6:	0f 92       	push	r0
     ca8:	18 be       	out	0x38, r1	; 56
     caa:	09 b6       	in	r0, 0x39	; 57
     cac:	0f 92       	push	r0
     cae:	19 be       	out	0x39, r1	; 57
     cb0:	0b b6       	in	r0, 0x3b	; 59
     cb2:	0f 92       	push	r0
     cb4:	1b be       	out	0x3b, r1	; 59
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
     cce:	e0 91 9c 20 	lds	r30, 0x209C	; 0x80209c <tc_tcc1_ccb_callback>
     cd2:	f0 91 9d 20 	lds	r31, 0x209D	; 0x80209d <tc_tcc1_ccb_callback+0x1>
     cd6:	30 97       	sbiw	r30, 0x00	; 0
     cd8:	09 f0       	breq	.+2      	; 0xcdc <__vector_23+0x42>
		tc_tcc1_ccb_callback();
     cda:	19 95       	eicall
	}
}
     cdc:	ff 91       	pop	r31
     cde:	ef 91       	pop	r30
     ce0:	bf 91       	pop	r27
     ce2:	af 91       	pop	r26
     ce4:	9f 91       	pop	r25
     ce6:	8f 91       	pop	r24
     ce8:	7f 91       	pop	r23
     cea:	6f 91       	pop	r22
     cec:	5f 91       	pop	r21
     cee:	4f 91       	pop	r20
     cf0:	3f 91       	pop	r19
     cf2:	2f 91       	pop	r18
     cf4:	0f 90       	pop	r0
     cf6:	0b be       	out	0x3b, r0	; 59
     cf8:	0f 90       	pop	r0
     cfa:	09 be       	out	0x39, r0	; 57
     cfc:	0f 90       	pop	r0
     cfe:	08 be       	out	0x38, r0	; 56
     d00:	0f 90       	pop	r0
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	0f 90       	pop	r0
     d06:	1f 90       	pop	r1
     d08:	18 95       	reti

00000d0a <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
     d0a:	1f 92       	push	r1
     d0c:	0f 92       	push	r0
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	0f 92       	push	r0
     d12:	11 24       	eor	r1, r1
     d14:	08 b6       	in	r0, 0x38	; 56
     d16:	0f 92       	push	r0
     d18:	18 be       	out	0x38, r1	; 56
     d1a:	09 b6       	in	r0, 0x39	; 57
     d1c:	0f 92       	push	r0
     d1e:	19 be       	out	0x39, r1	; 57
     d20:	0b b6       	in	r0, 0x3b	; 59
     d22:	0f 92       	push	r0
     d24:	1b be       	out	0x3b, r1	; 59
     d26:	2f 93       	push	r18
     d28:	3f 93       	push	r19
     d2a:	4f 93       	push	r20
     d2c:	5f 93       	push	r21
     d2e:	6f 93       	push	r22
     d30:	7f 93       	push	r23
     d32:	8f 93       	push	r24
     d34:	9f 93       	push	r25
     d36:	af 93       	push	r26
     d38:	bf 93       	push	r27
     d3a:	ef 93       	push	r30
     d3c:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
     d3e:	e0 91 9a 20 	lds	r30, 0x209A	; 0x80209a <tc_tcd0_ovf_callback>
     d42:	f0 91 9b 20 	lds	r31, 0x209B	; 0x80209b <tc_tcd0_ovf_callback+0x1>
     d46:	30 97       	sbiw	r30, 0x00	; 0
     d48:	09 f0       	breq	.+2      	; 0xd4c <__vector_77+0x42>
		tc_tcd0_ovf_callback();
     d4a:	19 95       	eicall
	}
}
     d4c:	ff 91       	pop	r31
     d4e:	ef 91       	pop	r30
     d50:	bf 91       	pop	r27
     d52:	af 91       	pop	r26
     d54:	9f 91       	pop	r25
     d56:	8f 91       	pop	r24
     d58:	7f 91       	pop	r23
     d5a:	6f 91       	pop	r22
     d5c:	5f 91       	pop	r21
     d5e:	4f 91       	pop	r20
     d60:	3f 91       	pop	r19
     d62:	2f 91       	pop	r18
     d64:	0f 90       	pop	r0
     d66:	0b be       	out	0x3b, r0	; 59
     d68:	0f 90       	pop	r0
     d6a:	09 be       	out	0x39, r0	; 57
     d6c:	0f 90       	pop	r0
     d6e:	08 be       	out	0x38, r0	; 56
     d70:	0f 90       	pop	r0
     d72:	0f be       	out	0x3f, r0	; 63
     d74:	0f 90       	pop	r0
     d76:	1f 90       	pop	r1
     d78:	18 95       	reti

00000d7a <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
     d7a:	1f 92       	push	r1
     d7c:	0f 92       	push	r0
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	0f 92       	push	r0
     d82:	11 24       	eor	r1, r1
     d84:	08 b6       	in	r0, 0x38	; 56
     d86:	0f 92       	push	r0
     d88:	18 be       	out	0x38, r1	; 56
     d8a:	09 b6       	in	r0, 0x39	; 57
     d8c:	0f 92       	push	r0
     d8e:	19 be       	out	0x39, r1	; 57
     d90:	0b b6       	in	r0, 0x3b	; 59
     d92:	0f 92       	push	r0
     d94:	1b be       	out	0x3b, r1	; 59
     d96:	2f 93       	push	r18
     d98:	3f 93       	push	r19
     d9a:	4f 93       	push	r20
     d9c:	5f 93       	push	r21
     d9e:	6f 93       	push	r22
     da0:	7f 93       	push	r23
     da2:	8f 93       	push	r24
     da4:	9f 93       	push	r25
     da6:	af 93       	push	r26
     da8:	bf 93       	push	r27
     daa:	ef 93       	push	r30
     dac:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
     dae:	e0 91 98 20 	lds	r30, 0x2098	; 0x802098 <tc_tcd0_err_callback>
     db2:	f0 91 99 20 	lds	r31, 0x2099	; 0x802099 <tc_tcd0_err_callback+0x1>
     db6:	30 97       	sbiw	r30, 0x00	; 0
     db8:	09 f0       	breq	.+2      	; 0xdbc <__vector_78+0x42>
		tc_tcd0_err_callback();
     dba:	19 95       	eicall
	}
}
     dbc:	ff 91       	pop	r31
     dbe:	ef 91       	pop	r30
     dc0:	bf 91       	pop	r27
     dc2:	af 91       	pop	r26
     dc4:	9f 91       	pop	r25
     dc6:	8f 91       	pop	r24
     dc8:	7f 91       	pop	r23
     dca:	6f 91       	pop	r22
     dcc:	5f 91       	pop	r21
     dce:	4f 91       	pop	r20
     dd0:	3f 91       	pop	r19
     dd2:	2f 91       	pop	r18
     dd4:	0f 90       	pop	r0
     dd6:	0b be       	out	0x3b, r0	; 59
     dd8:	0f 90       	pop	r0
     dda:	09 be       	out	0x39, r0	; 57
     ddc:	0f 90       	pop	r0
     dde:	08 be       	out	0x38, r0	; 56
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	0f 90       	pop	r0
     de6:	1f 90       	pop	r1
     de8:	18 95       	reti

00000dea <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
     dea:	1f 92       	push	r1
     dec:	0f 92       	push	r0
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	0f 92       	push	r0
     df2:	11 24       	eor	r1, r1
     df4:	08 b6       	in	r0, 0x38	; 56
     df6:	0f 92       	push	r0
     df8:	18 be       	out	0x38, r1	; 56
     dfa:	09 b6       	in	r0, 0x39	; 57
     dfc:	0f 92       	push	r0
     dfe:	19 be       	out	0x39, r1	; 57
     e00:	0b b6       	in	r0, 0x3b	; 59
     e02:	0f 92       	push	r0
     e04:	1b be       	out	0x3b, r1	; 59
     e06:	2f 93       	push	r18
     e08:	3f 93       	push	r19
     e0a:	4f 93       	push	r20
     e0c:	5f 93       	push	r21
     e0e:	6f 93       	push	r22
     e10:	7f 93       	push	r23
     e12:	8f 93       	push	r24
     e14:	9f 93       	push	r25
     e16:	af 93       	push	r26
     e18:	bf 93       	push	r27
     e1a:	ef 93       	push	r30
     e1c:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
     e1e:	e0 91 96 20 	lds	r30, 0x2096	; 0x802096 <tc_tcd0_cca_callback>
     e22:	f0 91 97 20 	lds	r31, 0x2097	; 0x802097 <tc_tcd0_cca_callback+0x1>
     e26:	30 97       	sbiw	r30, 0x00	; 0
     e28:	09 f0       	breq	.+2      	; 0xe2c <__vector_79+0x42>
		tc_tcd0_cca_callback();
     e2a:	19 95       	eicall
	}
}
     e2c:	ff 91       	pop	r31
     e2e:	ef 91       	pop	r30
     e30:	bf 91       	pop	r27
     e32:	af 91       	pop	r26
     e34:	9f 91       	pop	r25
     e36:	8f 91       	pop	r24
     e38:	7f 91       	pop	r23
     e3a:	6f 91       	pop	r22
     e3c:	5f 91       	pop	r21
     e3e:	4f 91       	pop	r20
     e40:	3f 91       	pop	r19
     e42:	2f 91       	pop	r18
     e44:	0f 90       	pop	r0
     e46:	0b be       	out	0x3b, r0	; 59
     e48:	0f 90       	pop	r0
     e4a:	09 be       	out	0x39, r0	; 57
     e4c:	0f 90       	pop	r0
     e4e:	08 be       	out	0x38, r0	; 56
     e50:	0f 90       	pop	r0
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	0f 90       	pop	r0
     e56:	1f 90       	pop	r1
     e58:	18 95       	reti

00000e5a <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
     e5a:	1f 92       	push	r1
     e5c:	0f 92       	push	r0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	0f 92       	push	r0
     e62:	11 24       	eor	r1, r1
     e64:	08 b6       	in	r0, 0x38	; 56
     e66:	0f 92       	push	r0
     e68:	18 be       	out	0x38, r1	; 56
     e6a:	09 b6       	in	r0, 0x39	; 57
     e6c:	0f 92       	push	r0
     e6e:	19 be       	out	0x39, r1	; 57
     e70:	0b b6       	in	r0, 0x3b	; 59
     e72:	0f 92       	push	r0
     e74:	1b be       	out	0x3b, r1	; 59
     e76:	2f 93       	push	r18
     e78:	3f 93       	push	r19
     e7a:	4f 93       	push	r20
     e7c:	5f 93       	push	r21
     e7e:	6f 93       	push	r22
     e80:	7f 93       	push	r23
     e82:	8f 93       	push	r24
     e84:	9f 93       	push	r25
     e86:	af 93       	push	r26
     e88:	bf 93       	push	r27
     e8a:	ef 93       	push	r30
     e8c:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
     e8e:	e0 91 94 20 	lds	r30, 0x2094	; 0x802094 <tc_tcd0_ccb_callback>
     e92:	f0 91 95 20 	lds	r31, 0x2095	; 0x802095 <tc_tcd0_ccb_callback+0x1>
     e96:	30 97       	sbiw	r30, 0x00	; 0
     e98:	09 f0       	breq	.+2      	; 0xe9c <__vector_80+0x42>
		tc_tcd0_ccb_callback();
     e9a:	19 95       	eicall
	}
}
     e9c:	ff 91       	pop	r31
     e9e:	ef 91       	pop	r30
     ea0:	bf 91       	pop	r27
     ea2:	af 91       	pop	r26
     ea4:	9f 91       	pop	r25
     ea6:	8f 91       	pop	r24
     ea8:	7f 91       	pop	r23
     eaa:	6f 91       	pop	r22
     eac:	5f 91       	pop	r21
     eae:	4f 91       	pop	r20
     eb0:	3f 91       	pop	r19
     eb2:	2f 91       	pop	r18
     eb4:	0f 90       	pop	r0
     eb6:	0b be       	out	0x3b, r0	; 59
     eb8:	0f 90       	pop	r0
     eba:	09 be       	out	0x39, r0	; 57
     ebc:	0f 90       	pop	r0
     ebe:	08 be       	out	0x38, r0	; 56
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	0f 90       	pop	r0
     ec6:	1f 90       	pop	r1
     ec8:	18 95       	reti

00000eca <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
     eca:	1f 92       	push	r1
     ecc:	0f 92       	push	r0
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	0f 92       	push	r0
     ed2:	11 24       	eor	r1, r1
     ed4:	08 b6       	in	r0, 0x38	; 56
     ed6:	0f 92       	push	r0
     ed8:	18 be       	out	0x38, r1	; 56
     eda:	09 b6       	in	r0, 0x39	; 57
     edc:	0f 92       	push	r0
     ede:	19 be       	out	0x39, r1	; 57
     ee0:	0b b6       	in	r0, 0x3b	; 59
     ee2:	0f 92       	push	r0
     ee4:	1b be       	out	0x3b, r1	; 59
     ee6:	2f 93       	push	r18
     ee8:	3f 93       	push	r19
     eea:	4f 93       	push	r20
     eec:	5f 93       	push	r21
     eee:	6f 93       	push	r22
     ef0:	7f 93       	push	r23
     ef2:	8f 93       	push	r24
     ef4:	9f 93       	push	r25
     ef6:	af 93       	push	r26
     ef8:	bf 93       	push	r27
     efa:	ef 93       	push	r30
     efc:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
     efe:	e0 91 92 20 	lds	r30, 0x2092	; 0x802092 <tc_tcd0_ccc_callback>
     f02:	f0 91 93 20 	lds	r31, 0x2093	; 0x802093 <tc_tcd0_ccc_callback+0x1>
     f06:	30 97       	sbiw	r30, 0x00	; 0
     f08:	09 f0       	breq	.+2      	; 0xf0c <__vector_81+0x42>
		tc_tcd0_ccc_callback();
     f0a:	19 95       	eicall
	}
}
     f0c:	ff 91       	pop	r31
     f0e:	ef 91       	pop	r30
     f10:	bf 91       	pop	r27
     f12:	af 91       	pop	r26
     f14:	9f 91       	pop	r25
     f16:	8f 91       	pop	r24
     f18:	7f 91       	pop	r23
     f1a:	6f 91       	pop	r22
     f1c:	5f 91       	pop	r21
     f1e:	4f 91       	pop	r20
     f20:	3f 91       	pop	r19
     f22:	2f 91       	pop	r18
     f24:	0f 90       	pop	r0
     f26:	0b be       	out	0x3b, r0	; 59
     f28:	0f 90       	pop	r0
     f2a:	09 be       	out	0x39, r0	; 57
     f2c:	0f 90       	pop	r0
     f2e:	08 be       	out	0x38, r0	; 56
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	0f 90       	pop	r0
     f36:	1f 90       	pop	r1
     f38:	18 95       	reti

00000f3a <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
     f3a:	1f 92       	push	r1
     f3c:	0f 92       	push	r0
     f3e:	0f b6       	in	r0, 0x3f	; 63
     f40:	0f 92       	push	r0
     f42:	11 24       	eor	r1, r1
     f44:	08 b6       	in	r0, 0x38	; 56
     f46:	0f 92       	push	r0
     f48:	18 be       	out	0x38, r1	; 56
     f4a:	09 b6       	in	r0, 0x39	; 57
     f4c:	0f 92       	push	r0
     f4e:	19 be       	out	0x39, r1	; 57
     f50:	0b b6       	in	r0, 0x3b	; 59
     f52:	0f 92       	push	r0
     f54:	1b be       	out	0x3b, r1	; 59
     f56:	2f 93       	push	r18
     f58:	3f 93       	push	r19
     f5a:	4f 93       	push	r20
     f5c:	5f 93       	push	r21
     f5e:	6f 93       	push	r22
     f60:	7f 93       	push	r23
     f62:	8f 93       	push	r24
     f64:	9f 93       	push	r25
     f66:	af 93       	push	r26
     f68:	bf 93       	push	r27
     f6a:	ef 93       	push	r30
     f6c:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
     f6e:	e0 91 90 20 	lds	r30, 0x2090	; 0x802090 <tc_tcd0_ccd_callback>
     f72:	f0 91 91 20 	lds	r31, 0x2091	; 0x802091 <tc_tcd0_ccd_callback+0x1>
     f76:	30 97       	sbiw	r30, 0x00	; 0
     f78:	09 f0       	breq	.+2      	; 0xf7c <__vector_82+0x42>
		tc_tcd0_ccd_callback();
     f7a:	19 95       	eicall
	}
}
     f7c:	ff 91       	pop	r31
     f7e:	ef 91       	pop	r30
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	4f 91       	pop	r20
     f90:	3f 91       	pop	r19
     f92:	2f 91       	pop	r18
     f94:	0f 90       	pop	r0
     f96:	0b be       	out	0x3b, r0	; 59
     f98:	0f 90       	pop	r0
     f9a:	09 be       	out	0x39, r0	; 57
     f9c:	0f 90       	pop	r0
     f9e:	08 be       	out	0x38, r0	; 56
     fa0:	0f 90       	pop	r0
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	0f 90       	pop	r0
     fa6:	1f 90       	pop	r1
     fa8:	18 95       	reti

00000faa <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
     faa:	1f 92       	push	r1
     fac:	0f 92       	push	r0
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	0f 92       	push	r0
     fb2:	11 24       	eor	r1, r1
     fb4:	08 b6       	in	r0, 0x38	; 56
     fb6:	0f 92       	push	r0
     fb8:	18 be       	out	0x38, r1	; 56
     fba:	09 b6       	in	r0, 0x39	; 57
     fbc:	0f 92       	push	r0
     fbe:	19 be       	out	0x39, r1	; 57
     fc0:	0b b6       	in	r0, 0x3b	; 59
     fc2:	0f 92       	push	r0
     fc4:	1b be       	out	0x3b, r1	; 59
     fc6:	2f 93       	push	r18
     fc8:	3f 93       	push	r19
     fca:	4f 93       	push	r20
     fcc:	5f 93       	push	r21
     fce:	6f 93       	push	r22
     fd0:	7f 93       	push	r23
     fd2:	8f 93       	push	r24
     fd4:	9f 93       	push	r25
     fd6:	af 93       	push	r26
     fd8:	bf 93       	push	r27
     fda:	ef 93       	push	r30
     fdc:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
     fde:	e0 91 8e 20 	lds	r30, 0x208E	; 0x80208e <tc_tcd1_ovf_callback>
     fe2:	f0 91 8f 20 	lds	r31, 0x208F	; 0x80208f <tc_tcd1_ovf_callback+0x1>
     fe6:	30 97       	sbiw	r30, 0x00	; 0
     fe8:	09 f0       	breq	.+2      	; 0xfec <__vector_83+0x42>
		tc_tcd1_ovf_callback();
     fea:	19 95       	eicall
	}
}
     fec:	ff 91       	pop	r31
     fee:	ef 91       	pop	r30
     ff0:	bf 91       	pop	r27
     ff2:	af 91       	pop	r26
     ff4:	9f 91       	pop	r25
     ff6:	8f 91       	pop	r24
     ff8:	7f 91       	pop	r23
     ffa:	6f 91       	pop	r22
     ffc:	5f 91       	pop	r21
     ffe:	4f 91       	pop	r20
    1000:	3f 91       	pop	r19
    1002:	2f 91       	pop	r18
    1004:	0f 90       	pop	r0
    1006:	0b be       	out	0x3b, r0	; 59
    1008:	0f 90       	pop	r0
    100a:	09 be       	out	0x39, r0	; 57
    100c:	0f 90       	pop	r0
    100e:	08 be       	out	0x38, r0	; 56
    1010:	0f 90       	pop	r0
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	0f 90       	pop	r0
    1016:	1f 90       	pop	r1
    1018:	18 95       	reti

0000101a <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
    1024:	08 b6       	in	r0, 0x38	; 56
    1026:	0f 92       	push	r0
    1028:	18 be       	out	0x38, r1	; 56
    102a:	09 b6       	in	r0, 0x39	; 57
    102c:	0f 92       	push	r0
    102e:	19 be       	out	0x39, r1	; 57
    1030:	0b b6       	in	r0, 0x3b	; 59
    1032:	0f 92       	push	r0
    1034:	1b be       	out	0x3b, r1	; 59
    1036:	2f 93       	push	r18
    1038:	3f 93       	push	r19
    103a:	4f 93       	push	r20
    103c:	5f 93       	push	r21
    103e:	6f 93       	push	r22
    1040:	7f 93       	push	r23
    1042:	8f 93       	push	r24
    1044:	9f 93       	push	r25
    1046:	af 93       	push	r26
    1048:	bf 93       	push	r27
    104a:	ef 93       	push	r30
    104c:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    104e:	e0 91 8c 20 	lds	r30, 0x208C	; 0x80208c <tc_tcd1_err_callback>
    1052:	f0 91 8d 20 	lds	r31, 0x208D	; 0x80208d <tc_tcd1_err_callback+0x1>
    1056:	30 97       	sbiw	r30, 0x00	; 0
    1058:	09 f0       	breq	.+2      	; 0x105c <__vector_84+0x42>
		tc_tcd1_err_callback();
    105a:	19 95       	eicall
	}
}
    105c:	ff 91       	pop	r31
    105e:	ef 91       	pop	r30
    1060:	bf 91       	pop	r27
    1062:	af 91       	pop	r26
    1064:	9f 91       	pop	r25
    1066:	8f 91       	pop	r24
    1068:	7f 91       	pop	r23
    106a:	6f 91       	pop	r22
    106c:	5f 91       	pop	r21
    106e:	4f 91       	pop	r20
    1070:	3f 91       	pop	r19
    1072:	2f 91       	pop	r18
    1074:	0f 90       	pop	r0
    1076:	0b be       	out	0x3b, r0	; 59
    1078:	0f 90       	pop	r0
    107a:	09 be       	out	0x39, r0	; 57
    107c:	0f 90       	pop	r0
    107e:	08 be       	out	0x38, r0	; 56
    1080:	0f 90       	pop	r0
    1082:	0f be       	out	0x3f, r0	; 63
    1084:	0f 90       	pop	r0
    1086:	1f 90       	pop	r1
    1088:	18 95       	reti

0000108a <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    108a:	1f 92       	push	r1
    108c:	0f 92       	push	r0
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	0f 92       	push	r0
    1092:	11 24       	eor	r1, r1
    1094:	08 b6       	in	r0, 0x38	; 56
    1096:	0f 92       	push	r0
    1098:	18 be       	out	0x38, r1	; 56
    109a:	09 b6       	in	r0, 0x39	; 57
    109c:	0f 92       	push	r0
    109e:	19 be       	out	0x39, r1	; 57
    10a0:	0b b6       	in	r0, 0x3b	; 59
    10a2:	0f 92       	push	r0
    10a4:	1b be       	out	0x3b, r1	; 59
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    10be:	e0 91 8a 20 	lds	r30, 0x208A	; 0x80208a <tc_tcd1_cca_callback>
    10c2:	f0 91 8b 20 	lds	r31, 0x208B	; 0x80208b <tc_tcd1_cca_callback+0x1>
    10c6:	30 97       	sbiw	r30, 0x00	; 0
    10c8:	09 f0       	breq	.+2      	; 0x10cc <__vector_85+0x42>
		tc_tcd1_cca_callback();
    10ca:	19 95       	eicall
	}
}
    10cc:	ff 91       	pop	r31
    10ce:	ef 91       	pop	r30
    10d0:	bf 91       	pop	r27
    10d2:	af 91       	pop	r26
    10d4:	9f 91       	pop	r25
    10d6:	8f 91       	pop	r24
    10d8:	7f 91       	pop	r23
    10da:	6f 91       	pop	r22
    10dc:	5f 91       	pop	r21
    10de:	4f 91       	pop	r20
    10e0:	3f 91       	pop	r19
    10e2:	2f 91       	pop	r18
    10e4:	0f 90       	pop	r0
    10e6:	0b be       	out	0x3b, r0	; 59
    10e8:	0f 90       	pop	r0
    10ea:	09 be       	out	0x39, r0	; 57
    10ec:	0f 90       	pop	r0
    10ee:	08 be       	out	0x38, r0	; 56
    10f0:	0f 90       	pop	r0
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	0f 90       	pop	r0
    10f6:	1f 90       	pop	r1
    10f8:	18 95       	reti

000010fa <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    10fa:	1f 92       	push	r1
    10fc:	0f 92       	push	r0
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	0f 92       	push	r0
    1102:	11 24       	eor	r1, r1
    1104:	08 b6       	in	r0, 0x38	; 56
    1106:	0f 92       	push	r0
    1108:	18 be       	out	0x38, r1	; 56
    110a:	09 b6       	in	r0, 0x39	; 57
    110c:	0f 92       	push	r0
    110e:	19 be       	out	0x39, r1	; 57
    1110:	0b b6       	in	r0, 0x3b	; 59
    1112:	0f 92       	push	r0
    1114:	1b be       	out	0x3b, r1	; 59
    1116:	2f 93       	push	r18
    1118:	3f 93       	push	r19
    111a:	4f 93       	push	r20
    111c:	5f 93       	push	r21
    111e:	6f 93       	push	r22
    1120:	7f 93       	push	r23
    1122:	8f 93       	push	r24
    1124:	9f 93       	push	r25
    1126:	af 93       	push	r26
    1128:	bf 93       	push	r27
    112a:	ef 93       	push	r30
    112c:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    112e:	e0 91 88 20 	lds	r30, 0x2088	; 0x802088 <tc_tcd1_ccb_callback>
    1132:	f0 91 89 20 	lds	r31, 0x2089	; 0x802089 <tc_tcd1_ccb_callback+0x1>
    1136:	30 97       	sbiw	r30, 0x00	; 0
    1138:	09 f0       	breq	.+2      	; 0x113c <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    113a:	19 95       	eicall
	}
}
    113c:	ff 91       	pop	r31
    113e:	ef 91       	pop	r30
    1140:	bf 91       	pop	r27
    1142:	af 91       	pop	r26
    1144:	9f 91       	pop	r25
    1146:	8f 91       	pop	r24
    1148:	7f 91       	pop	r23
    114a:	6f 91       	pop	r22
    114c:	5f 91       	pop	r21
    114e:	4f 91       	pop	r20
    1150:	3f 91       	pop	r19
    1152:	2f 91       	pop	r18
    1154:	0f 90       	pop	r0
    1156:	0b be       	out	0x3b, r0	; 59
    1158:	0f 90       	pop	r0
    115a:	09 be       	out	0x39, r0	; 57
    115c:	0f 90       	pop	r0
    115e:	08 be       	out	0x38, r0	; 56
    1160:	0f 90       	pop	r0
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	0f 90       	pop	r0
    1166:	1f 90       	pop	r1
    1168:	18 95       	reti

0000116a <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    116a:	1f 92       	push	r1
    116c:	0f 92       	push	r0
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	0f 92       	push	r0
    1172:	11 24       	eor	r1, r1
    1174:	08 b6       	in	r0, 0x38	; 56
    1176:	0f 92       	push	r0
    1178:	18 be       	out	0x38, r1	; 56
    117a:	09 b6       	in	r0, 0x39	; 57
    117c:	0f 92       	push	r0
    117e:	19 be       	out	0x39, r1	; 57
    1180:	0b b6       	in	r0, 0x3b	; 59
    1182:	0f 92       	push	r0
    1184:	1b be       	out	0x3b, r1	; 59
    1186:	2f 93       	push	r18
    1188:	3f 93       	push	r19
    118a:	4f 93       	push	r20
    118c:	5f 93       	push	r21
    118e:	6f 93       	push	r22
    1190:	7f 93       	push	r23
    1192:	8f 93       	push	r24
    1194:	9f 93       	push	r25
    1196:	af 93       	push	r26
    1198:	bf 93       	push	r27
    119a:	ef 93       	push	r30
    119c:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    119e:	e0 91 86 20 	lds	r30, 0x2086	; 0x802086 <tc_tce0_ovf_callback>
    11a2:	f0 91 87 20 	lds	r31, 0x2087	; 0x802087 <tc_tce0_ovf_callback+0x1>
    11a6:	30 97       	sbiw	r30, 0x00	; 0
    11a8:	09 f0       	breq	.+2      	; 0x11ac <__vector_47+0x42>
		tc_tce0_ovf_callback();
    11aa:	19 95       	eicall
	}
}
    11ac:	ff 91       	pop	r31
    11ae:	ef 91       	pop	r30
    11b0:	bf 91       	pop	r27
    11b2:	af 91       	pop	r26
    11b4:	9f 91       	pop	r25
    11b6:	8f 91       	pop	r24
    11b8:	7f 91       	pop	r23
    11ba:	6f 91       	pop	r22
    11bc:	5f 91       	pop	r21
    11be:	4f 91       	pop	r20
    11c0:	3f 91       	pop	r19
    11c2:	2f 91       	pop	r18
    11c4:	0f 90       	pop	r0
    11c6:	0b be       	out	0x3b, r0	; 59
    11c8:	0f 90       	pop	r0
    11ca:	09 be       	out	0x39, r0	; 57
    11cc:	0f 90       	pop	r0
    11ce:	08 be       	out	0x38, r0	; 56
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	0f 90       	pop	r0
    11d6:	1f 90       	pop	r1
    11d8:	18 95       	reti

000011da <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    11da:	1f 92       	push	r1
    11dc:	0f 92       	push	r0
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	0f 92       	push	r0
    11e2:	11 24       	eor	r1, r1
    11e4:	08 b6       	in	r0, 0x38	; 56
    11e6:	0f 92       	push	r0
    11e8:	18 be       	out	0x38, r1	; 56
    11ea:	09 b6       	in	r0, 0x39	; 57
    11ec:	0f 92       	push	r0
    11ee:	19 be       	out	0x39, r1	; 57
    11f0:	0b b6       	in	r0, 0x3b	; 59
    11f2:	0f 92       	push	r0
    11f4:	1b be       	out	0x3b, r1	; 59
    11f6:	2f 93       	push	r18
    11f8:	3f 93       	push	r19
    11fa:	4f 93       	push	r20
    11fc:	5f 93       	push	r21
    11fe:	6f 93       	push	r22
    1200:	7f 93       	push	r23
    1202:	8f 93       	push	r24
    1204:	9f 93       	push	r25
    1206:	af 93       	push	r26
    1208:	bf 93       	push	r27
    120a:	ef 93       	push	r30
    120c:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    120e:	e0 91 84 20 	lds	r30, 0x2084	; 0x802084 <tc_tce0_err_callback>
    1212:	f0 91 85 20 	lds	r31, 0x2085	; 0x802085 <tc_tce0_err_callback+0x1>
    1216:	30 97       	sbiw	r30, 0x00	; 0
    1218:	09 f0       	breq	.+2      	; 0x121c <__vector_48+0x42>
		tc_tce0_err_callback();
    121a:	19 95       	eicall
	}
}
    121c:	ff 91       	pop	r31
    121e:	ef 91       	pop	r30
    1220:	bf 91       	pop	r27
    1222:	af 91       	pop	r26
    1224:	9f 91       	pop	r25
    1226:	8f 91       	pop	r24
    1228:	7f 91       	pop	r23
    122a:	6f 91       	pop	r22
    122c:	5f 91       	pop	r21
    122e:	4f 91       	pop	r20
    1230:	3f 91       	pop	r19
    1232:	2f 91       	pop	r18
    1234:	0f 90       	pop	r0
    1236:	0b be       	out	0x3b, r0	; 59
    1238:	0f 90       	pop	r0
    123a:	09 be       	out	0x39, r0	; 57
    123c:	0f 90       	pop	r0
    123e:	08 be       	out	0x38, r0	; 56
    1240:	0f 90       	pop	r0
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	0f 90       	pop	r0
    1246:	1f 90       	pop	r1
    1248:	18 95       	reti

0000124a <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    124a:	1f 92       	push	r1
    124c:	0f 92       	push	r0
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	0f 92       	push	r0
    1252:	11 24       	eor	r1, r1
    1254:	08 b6       	in	r0, 0x38	; 56
    1256:	0f 92       	push	r0
    1258:	18 be       	out	0x38, r1	; 56
    125a:	09 b6       	in	r0, 0x39	; 57
    125c:	0f 92       	push	r0
    125e:	19 be       	out	0x39, r1	; 57
    1260:	0b b6       	in	r0, 0x3b	; 59
    1262:	0f 92       	push	r0
    1264:	1b be       	out	0x3b, r1	; 59
    1266:	2f 93       	push	r18
    1268:	3f 93       	push	r19
    126a:	4f 93       	push	r20
    126c:	5f 93       	push	r21
    126e:	6f 93       	push	r22
    1270:	7f 93       	push	r23
    1272:	8f 93       	push	r24
    1274:	9f 93       	push	r25
    1276:	af 93       	push	r26
    1278:	bf 93       	push	r27
    127a:	ef 93       	push	r30
    127c:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    127e:	e0 91 82 20 	lds	r30, 0x2082	; 0x802082 <tc_tce0_cca_callback>
    1282:	f0 91 83 20 	lds	r31, 0x2083	; 0x802083 <tc_tce0_cca_callback+0x1>
    1286:	30 97       	sbiw	r30, 0x00	; 0
    1288:	09 f0       	breq	.+2      	; 0x128c <__vector_49+0x42>
		tc_tce0_cca_callback();
    128a:	19 95       	eicall
	}
}
    128c:	ff 91       	pop	r31
    128e:	ef 91       	pop	r30
    1290:	bf 91       	pop	r27
    1292:	af 91       	pop	r26
    1294:	9f 91       	pop	r25
    1296:	8f 91       	pop	r24
    1298:	7f 91       	pop	r23
    129a:	6f 91       	pop	r22
    129c:	5f 91       	pop	r21
    129e:	4f 91       	pop	r20
    12a0:	3f 91       	pop	r19
    12a2:	2f 91       	pop	r18
    12a4:	0f 90       	pop	r0
    12a6:	0b be       	out	0x3b, r0	; 59
    12a8:	0f 90       	pop	r0
    12aa:	09 be       	out	0x39, r0	; 57
    12ac:	0f 90       	pop	r0
    12ae:	08 be       	out	0x38, r0	; 56
    12b0:	0f 90       	pop	r0
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	0f 90       	pop	r0
    12b6:	1f 90       	pop	r1
    12b8:	18 95       	reti

000012ba <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    12ba:	1f 92       	push	r1
    12bc:	0f 92       	push	r0
    12be:	0f b6       	in	r0, 0x3f	; 63
    12c0:	0f 92       	push	r0
    12c2:	11 24       	eor	r1, r1
    12c4:	08 b6       	in	r0, 0x38	; 56
    12c6:	0f 92       	push	r0
    12c8:	18 be       	out	0x38, r1	; 56
    12ca:	09 b6       	in	r0, 0x39	; 57
    12cc:	0f 92       	push	r0
    12ce:	19 be       	out	0x39, r1	; 57
    12d0:	0b b6       	in	r0, 0x3b	; 59
    12d2:	0f 92       	push	r0
    12d4:	1b be       	out	0x3b, r1	; 59
    12d6:	2f 93       	push	r18
    12d8:	3f 93       	push	r19
    12da:	4f 93       	push	r20
    12dc:	5f 93       	push	r21
    12de:	6f 93       	push	r22
    12e0:	7f 93       	push	r23
    12e2:	8f 93       	push	r24
    12e4:	9f 93       	push	r25
    12e6:	af 93       	push	r26
    12e8:	bf 93       	push	r27
    12ea:	ef 93       	push	r30
    12ec:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    12ee:	e0 91 80 20 	lds	r30, 0x2080	; 0x802080 <tc_tce0_ccb_callback>
    12f2:	f0 91 81 20 	lds	r31, 0x2081	; 0x802081 <tc_tce0_ccb_callback+0x1>
    12f6:	30 97       	sbiw	r30, 0x00	; 0
    12f8:	09 f0       	breq	.+2      	; 0x12fc <__vector_50+0x42>
		tc_tce0_ccb_callback();
    12fa:	19 95       	eicall
	}
}
    12fc:	ff 91       	pop	r31
    12fe:	ef 91       	pop	r30
    1300:	bf 91       	pop	r27
    1302:	af 91       	pop	r26
    1304:	9f 91       	pop	r25
    1306:	8f 91       	pop	r24
    1308:	7f 91       	pop	r23
    130a:	6f 91       	pop	r22
    130c:	5f 91       	pop	r21
    130e:	4f 91       	pop	r20
    1310:	3f 91       	pop	r19
    1312:	2f 91       	pop	r18
    1314:	0f 90       	pop	r0
    1316:	0b be       	out	0x3b, r0	; 59
    1318:	0f 90       	pop	r0
    131a:	09 be       	out	0x39, r0	; 57
    131c:	0f 90       	pop	r0
    131e:	08 be       	out	0x38, r0	; 56
    1320:	0f 90       	pop	r0
    1322:	0f be       	out	0x3f, r0	; 63
    1324:	0f 90       	pop	r0
    1326:	1f 90       	pop	r1
    1328:	18 95       	reti

0000132a <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    132a:	1f 92       	push	r1
    132c:	0f 92       	push	r0
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	0f 92       	push	r0
    1332:	11 24       	eor	r1, r1
    1334:	08 b6       	in	r0, 0x38	; 56
    1336:	0f 92       	push	r0
    1338:	18 be       	out	0x38, r1	; 56
    133a:	09 b6       	in	r0, 0x39	; 57
    133c:	0f 92       	push	r0
    133e:	19 be       	out	0x39, r1	; 57
    1340:	0b b6       	in	r0, 0x3b	; 59
    1342:	0f 92       	push	r0
    1344:	1b be       	out	0x3b, r1	; 59
    1346:	2f 93       	push	r18
    1348:	3f 93       	push	r19
    134a:	4f 93       	push	r20
    134c:	5f 93       	push	r21
    134e:	6f 93       	push	r22
    1350:	7f 93       	push	r23
    1352:	8f 93       	push	r24
    1354:	9f 93       	push	r25
    1356:	af 93       	push	r26
    1358:	bf 93       	push	r27
    135a:	ef 93       	push	r30
    135c:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    135e:	e0 91 7e 20 	lds	r30, 0x207E	; 0x80207e <tc_tce0_ccc_callback>
    1362:	f0 91 7f 20 	lds	r31, 0x207F	; 0x80207f <tc_tce0_ccc_callback+0x1>
    1366:	30 97       	sbiw	r30, 0x00	; 0
    1368:	09 f0       	breq	.+2      	; 0x136c <__vector_51+0x42>
		tc_tce0_ccc_callback();
    136a:	19 95       	eicall
	}
}
    136c:	ff 91       	pop	r31
    136e:	ef 91       	pop	r30
    1370:	bf 91       	pop	r27
    1372:	af 91       	pop	r26
    1374:	9f 91       	pop	r25
    1376:	8f 91       	pop	r24
    1378:	7f 91       	pop	r23
    137a:	6f 91       	pop	r22
    137c:	5f 91       	pop	r21
    137e:	4f 91       	pop	r20
    1380:	3f 91       	pop	r19
    1382:	2f 91       	pop	r18
    1384:	0f 90       	pop	r0
    1386:	0b be       	out	0x3b, r0	; 59
    1388:	0f 90       	pop	r0
    138a:	09 be       	out	0x39, r0	; 57
    138c:	0f 90       	pop	r0
    138e:	08 be       	out	0x38, r0	; 56
    1390:	0f 90       	pop	r0
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	0f 90       	pop	r0
    1396:	1f 90       	pop	r1
    1398:	18 95       	reti

0000139a <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    139a:	1f 92       	push	r1
    139c:	0f 92       	push	r0
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	0f 92       	push	r0
    13a2:	11 24       	eor	r1, r1
    13a4:	08 b6       	in	r0, 0x38	; 56
    13a6:	0f 92       	push	r0
    13a8:	18 be       	out	0x38, r1	; 56
    13aa:	09 b6       	in	r0, 0x39	; 57
    13ac:	0f 92       	push	r0
    13ae:	19 be       	out	0x39, r1	; 57
    13b0:	0b b6       	in	r0, 0x3b	; 59
    13b2:	0f 92       	push	r0
    13b4:	1b be       	out	0x3b, r1	; 59
    13b6:	2f 93       	push	r18
    13b8:	3f 93       	push	r19
    13ba:	4f 93       	push	r20
    13bc:	5f 93       	push	r21
    13be:	6f 93       	push	r22
    13c0:	7f 93       	push	r23
    13c2:	8f 93       	push	r24
    13c4:	9f 93       	push	r25
    13c6:	af 93       	push	r26
    13c8:	bf 93       	push	r27
    13ca:	ef 93       	push	r30
    13cc:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    13ce:	e0 91 7c 20 	lds	r30, 0x207C	; 0x80207c <tc_tce0_ccd_callback>
    13d2:	f0 91 7d 20 	lds	r31, 0x207D	; 0x80207d <tc_tce0_ccd_callback+0x1>
    13d6:	30 97       	sbiw	r30, 0x00	; 0
    13d8:	09 f0       	breq	.+2      	; 0x13dc <__vector_52+0x42>
		tc_tce0_ccd_callback();
    13da:	19 95       	eicall
	}
}
    13dc:	ff 91       	pop	r31
    13de:	ef 91       	pop	r30
    13e0:	bf 91       	pop	r27
    13e2:	af 91       	pop	r26
    13e4:	9f 91       	pop	r25
    13e6:	8f 91       	pop	r24
    13e8:	7f 91       	pop	r23
    13ea:	6f 91       	pop	r22
    13ec:	5f 91       	pop	r21
    13ee:	4f 91       	pop	r20
    13f0:	3f 91       	pop	r19
    13f2:	2f 91       	pop	r18
    13f4:	0f 90       	pop	r0
    13f6:	0b be       	out	0x3b, r0	; 59
    13f8:	0f 90       	pop	r0
    13fa:	09 be       	out	0x39, r0	; 57
    13fc:	0f 90       	pop	r0
    13fe:	08 be       	out	0x38, r0	; 56
    1400:	0f 90       	pop	r0
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	0f 90       	pop	r0
    1406:	1f 90       	pop	r1
    1408:	18 95       	reti

0000140a <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    140a:	1f 92       	push	r1
    140c:	0f 92       	push	r0
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	0f 92       	push	r0
    1412:	11 24       	eor	r1, r1
    1414:	08 b6       	in	r0, 0x38	; 56
    1416:	0f 92       	push	r0
    1418:	18 be       	out	0x38, r1	; 56
    141a:	09 b6       	in	r0, 0x39	; 57
    141c:	0f 92       	push	r0
    141e:	19 be       	out	0x39, r1	; 57
    1420:	0b b6       	in	r0, 0x3b	; 59
    1422:	0f 92       	push	r0
    1424:	1b be       	out	0x3b, r1	; 59
    1426:	2f 93       	push	r18
    1428:	3f 93       	push	r19
    142a:	4f 93       	push	r20
    142c:	5f 93       	push	r21
    142e:	6f 93       	push	r22
    1430:	7f 93       	push	r23
    1432:	8f 93       	push	r24
    1434:	9f 93       	push	r25
    1436:	af 93       	push	r26
    1438:	bf 93       	push	r27
    143a:	ef 93       	push	r30
    143c:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    143e:	e0 91 7a 20 	lds	r30, 0x207A	; 0x80207a <tc_tce1_ovf_callback>
    1442:	f0 91 7b 20 	lds	r31, 0x207B	; 0x80207b <tc_tce1_ovf_callback+0x1>
    1446:	30 97       	sbiw	r30, 0x00	; 0
    1448:	09 f0       	breq	.+2      	; 0x144c <__vector_53+0x42>
		tc_tce1_ovf_callback();
    144a:	19 95       	eicall
	}
}
    144c:	ff 91       	pop	r31
    144e:	ef 91       	pop	r30
    1450:	bf 91       	pop	r27
    1452:	af 91       	pop	r26
    1454:	9f 91       	pop	r25
    1456:	8f 91       	pop	r24
    1458:	7f 91       	pop	r23
    145a:	6f 91       	pop	r22
    145c:	5f 91       	pop	r21
    145e:	4f 91       	pop	r20
    1460:	3f 91       	pop	r19
    1462:	2f 91       	pop	r18
    1464:	0f 90       	pop	r0
    1466:	0b be       	out	0x3b, r0	; 59
    1468:	0f 90       	pop	r0
    146a:	09 be       	out	0x39, r0	; 57
    146c:	0f 90       	pop	r0
    146e:	08 be       	out	0x38, r0	; 56
    1470:	0f 90       	pop	r0
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	0f 90       	pop	r0
    1476:	1f 90       	pop	r1
    1478:	18 95       	reti

0000147a <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    147a:	1f 92       	push	r1
    147c:	0f 92       	push	r0
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	0f 92       	push	r0
    1482:	11 24       	eor	r1, r1
    1484:	08 b6       	in	r0, 0x38	; 56
    1486:	0f 92       	push	r0
    1488:	18 be       	out	0x38, r1	; 56
    148a:	09 b6       	in	r0, 0x39	; 57
    148c:	0f 92       	push	r0
    148e:	19 be       	out	0x39, r1	; 57
    1490:	0b b6       	in	r0, 0x3b	; 59
    1492:	0f 92       	push	r0
    1494:	1b be       	out	0x3b, r1	; 59
    1496:	2f 93       	push	r18
    1498:	3f 93       	push	r19
    149a:	4f 93       	push	r20
    149c:	5f 93       	push	r21
    149e:	6f 93       	push	r22
    14a0:	7f 93       	push	r23
    14a2:	8f 93       	push	r24
    14a4:	9f 93       	push	r25
    14a6:	af 93       	push	r26
    14a8:	bf 93       	push	r27
    14aa:	ef 93       	push	r30
    14ac:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    14ae:	e0 91 78 20 	lds	r30, 0x2078	; 0x802078 <tc_tce1_err_callback>
    14b2:	f0 91 79 20 	lds	r31, 0x2079	; 0x802079 <tc_tce1_err_callback+0x1>
    14b6:	30 97       	sbiw	r30, 0x00	; 0
    14b8:	09 f0       	breq	.+2      	; 0x14bc <__vector_54+0x42>
		tc_tce1_err_callback();
    14ba:	19 95       	eicall
	}
}
    14bc:	ff 91       	pop	r31
    14be:	ef 91       	pop	r30
    14c0:	bf 91       	pop	r27
    14c2:	af 91       	pop	r26
    14c4:	9f 91       	pop	r25
    14c6:	8f 91       	pop	r24
    14c8:	7f 91       	pop	r23
    14ca:	6f 91       	pop	r22
    14cc:	5f 91       	pop	r21
    14ce:	4f 91       	pop	r20
    14d0:	3f 91       	pop	r19
    14d2:	2f 91       	pop	r18
    14d4:	0f 90       	pop	r0
    14d6:	0b be       	out	0x3b, r0	; 59
    14d8:	0f 90       	pop	r0
    14da:	09 be       	out	0x39, r0	; 57
    14dc:	0f 90       	pop	r0
    14de:	08 be       	out	0x38, r0	; 56
    14e0:	0f 90       	pop	r0
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	0f 90       	pop	r0
    14e6:	1f 90       	pop	r1
    14e8:	18 95       	reti

000014ea <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    14ea:	1f 92       	push	r1
    14ec:	0f 92       	push	r0
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	0f 92       	push	r0
    14f2:	11 24       	eor	r1, r1
    14f4:	08 b6       	in	r0, 0x38	; 56
    14f6:	0f 92       	push	r0
    14f8:	18 be       	out	0x38, r1	; 56
    14fa:	09 b6       	in	r0, 0x39	; 57
    14fc:	0f 92       	push	r0
    14fe:	19 be       	out	0x39, r1	; 57
    1500:	0b b6       	in	r0, 0x3b	; 59
    1502:	0f 92       	push	r0
    1504:	1b be       	out	0x3b, r1	; 59
    1506:	2f 93       	push	r18
    1508:	3f 93       	push	r19
    150a:	4f 93       	push	r20
    150c:	5f 93       	push	r21
    150e:	6f 93       	push	r22
    1510:	7f 93       	push	r23
    1512:	8f 93       	push	r24
    1514:	9f 93       	push	r25
    1516:	af 93       	push	r26
    1518:	bf 93       	push	r27
    151a:	ef 93       	push	r30
    151c:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    151e:	e0 91 76 20 	lds	r30, 0x2076	; 0x802076 <tc_tce1_cca_callback>
    1522:	f0 91 77 20 	lds	r31, 0x2077	; 0x802077 <tc_tce1_cca_callback+0x1>
    1526:	30 97       	sbiw	r30, 0x00	; 0
    1528:	09 f0       	breq	.+2      	; 0x152c <__vector_55+0x42>
		tc_tce1_cca_callback();
    152a:	19 95       	eicall
	}
}
    152c:	ff 91       	pop	r31
    152e:	ef 91       	pop	r30
    1530:	bf 91       	pop	r27
    1532:	af 91       	pop	r26
    1534:	9f 91       	pop	r25
    1536:	8f 91       	pop	r24
    1538:	7f 91       	pop	r23
    153a:	6f 91       	pop	r22
    153c:	5f 91       	pop	r21
    153e:	4f 91       	pop	r20
    1540:	3f 91       	pop	r19
    1542:	2f 91       	pop	r18
    1544:	0f 90       	pop	r0
    1546:	0b be       	out	0x3b, r0	; 59
    1548:	0f 90       	pop	r0
    154a:	09 be       	out	0x39, r0	; 57
    154c:	0f 90       	pop	r0
    154e:	08 be       	out	0x38, r0	; 56
    1550:	0f 90       	pop	r0
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	0f 90       	pop	r0
    1556:	1f 90       	pop	r1
    1558:	18 95       	reti

0000155a <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    155a:	1f 92       	push	r1
    155c:	0f 92       	push	r0
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	0f 92       	push	r0
    1562:	11 24       	eor	r1, r1
    1564:	08 b6       	in	r0, 0x38	; 56
    1566:	0f 92       	push	r0
    1568:	18 be       	out	0x38, r1	; 56
    156a:	09 b6       	in	r0, 0x39	; 57
    156c:	0f 92       	push	r0
    156e:	19 be       	out	0x39, r1	; 57
    1570:	0b b6       	in	r0, 0x3b	; 59
    1572:	0f 92       	push	r0
    1574:	1b be       	out	0x3b, r1	; 59
    1576:	2f 93       	push	r18
    1578:	3f 93       	push	r19
    157a:	4f 93       	push	r20
    157c:	5f 93       	push	r21
    157e:	6f 93       	push	r22
    1580:	7f 93       	push	r23
    1582:	8f 93       	push	r24
    1584:	9f 93       	push	r25
    1586:	af 93       	push	r26
    1588:	bf 93       	push	r27
    158a:	ef 93       	push	r30
    158c:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    158e:	e0 91 74 20 	lds	r30, 0x2074	; 0x802074 <tc_tce1_ccb_callback>
    1592:	f0 91 75 20 	lds	r31, 0x2075	; 0x802075 <tc_tce1_ccb_callback+0x1>
    1596:	30 97       	sbiw	r30, 0x00	; 0
    1598:	09 f0       	breq	.+2      	; 0x159c <__vector_56+0x42>
		tc_tce1_ccb_callback();
    159a:	19 95       	eicall
	}
}
    159c:	ff 91       	pop	r31
    159e:	ef 91       	pop	r30
    15a0:	bf 91       	pop	r27
    15a2:	af 91       	pop	r26
    15a4:	9f 91       	pop	r25
    15a6:	8f 91       	pop	r24
    15a8:	7f 91       	pop	r23
    15aa:	6f 91       	pop	r22
    15ac:	5f 91       	pop	r21
    15ae:	4f 91       	pop	r20
    15b0:	3f 91       	pop	r19
    15b2:	2f 91       	pop	r18
    15b4:	0f 90       	pop	r0
    15b6:	0b be       	out	0x3b, r0	; 59
    15b8:	0f 90       	pop	r0
    15ba:	09 be       	out	0x39, r0	; 57
    15bc:	0f 90       	pop	r0
    15be:	08 be       	out	0x38, r0	; 56
    15c0:	0f 90       	pop	r0
    15c2:	0f be       	out	0x3f, r0	; 63
    15c4:	0f 90       	pop	r0
    15c6:	1f 90       	pop	r1
    15c8:	18 95       	reti

000015ca <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    15ca:	1f 92       	push	r1
    15cc:	0f 92       	push	r0
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	0f 92       	push	r0
    15d2:	11 24       	eor	r1, r1
    15d4:	08 b6       	in	r0, 0x38	; 56
    15d6:	0f 92       	push	r0
    15d8:	18 be       	out	0x38, r1	; 56
    15da:	09 b6       	in	r0, 0x39	; 57
    15dc:	0f 92       	push	r0
    15de:	19 be       	out	0x39, r1	; 57
    15e0:	0b b6       	in	r0, 0x3b	; 59
    15e2:	0f 92       	push	r0
    15e4:	1b be       	out	0x3b, r1	; 59
    15e6:	2f 93       	push	r18
    15e8:	3f 93       	push	r19
    15ea:	4f 93       	push	r20
    15ec:	5f 93       	push	r21
    15ee:	6f 93       	push	r22
    15f0:	7f 93       	push	r23
    15f2:	8f 93       	push	r24
    15f4:	9f 93       	push	r25
    15f6:	af 93       	push	r26
    15f8:	bf 93       	push	r27
    15fa:	ef 93       	push	r30
    15fc:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    15fe:	e0 91 72 20 	lds	r30, 0x2072	; 0x802072 <tc_tcf0_ovf_callback>
    1602:	f0 91 73 20 	lds	r31, 0x2073	; 0x802073 <tc_tcf0_ovf_callback+0x1>
    1606:	30 97       	sbiw	r30, 0x00	; 0
    1608:	09 f0       	breq	.+2      	; 0x160c <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    160a:	19 95       	eicall
	}
}
    160c:	ff 91       	pop	r31
    160e:	ef 91       	pop	r30
    1610:	bf 91       	pop	r27
    1612:	af 91       	pop	r26
    1614:	9f 91       	pop	r25
    1616:	8f 91       	pop	r24
    1618:	7f 91       	pop	r23
    161a:	6f 91       	pop	r22
    161c:	5f 91       	pop	r21
    161e:	4f 91       	pop	r20
    1620:	3f 91       	pop	r19
    1622:	2f 91       	pop	r18
    1624:	0f 90       	pop	r0
    1626:	0b be       	out	0x3b, r0	; 59
    1628:	0f 90       	pop	r0
    162a:	09 be       	out	0x39, r0	; 57
    162c:	0f 90       	pop	r0
    162e:	08 be       	out	0x38, r0	; 56
    1630:	0f 90       	pop	r0
    1632:	0f be       	out	0x3f, r0	; 63
    1634:	0f 90       	pop	r0
    1636:	1f 90       	pop	r1
    1638:	18 95       	reti

0000163a <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    163a:	1f 92       	push	r1
    163c:	0f 92       	push	r0
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	0f 92       	push	r0
    1642:	11 24       	eor	r1, r1
    1644:	08 b6       	in	r0, 0x38	; 56
    1646:	0f 92       	push	r0
    1648:	18 be       	out	0x38, r1	; 56
    164a:	09 b6       	in	r0, 0x39	; 57
    164c:	0f 92       	push	r0
    164e:	19 be       	out	0x39, r1	; 57
    1650:	0b b6       	in	r0, 0x3b	; 59
    1652:	0f 92       	push	r0
    1654:	1b be       	out	0x3b, r1	; 59
    1656:	2f 93       	push	r18
    1658:	3f 93       	push	r19
    165a:	4f 93       	push	r20
    165c:	5f 93       	push	r21
    165e:	6f 93       	push	r22
    1660:	7f 93       	push	r23
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	af 93       	push	r26
    1668:	bf 93       	push	r27
    166a:	ef 93       	push	r30
    166c:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    166e:	e0 91 70 20 	lds	r30, 0x2070	; 0x802070 <tc_tcf0_err_callback>
    1672:	f0 91 71 20 	lds	r31, 0x2071	; 0x802071 <tc_tcf0_err_callback+0x1>
    1676:	30 97       	sbiw	r30, 0x00	; 0
    1678:	09 f0       	breq	.+2      	; 0x167c <__vector_109+0x42>
		tc_tcf0_err_callback();
    167a:	19 95       	eicall
	}
}
    167c:	ff 91       	pop	r31
    167e:	ef 91       	pop	r30
    1680:	bf 91       	pop	r27
    1682:	af 91       	pop	r26
    1684:	9f 91       	pop	r25
    1686:	8f 91       	pop	r24
    1688:	7f 91       	pop	r23
    168a:	6f 91       	pop	r22
    168c:	5f 91       	pop	r21
    168e:	4f 91       	pop	r20
    1690:	3f 91       	pop	r19
    1692:	2f 91       	pop	r18
    1694:	0f 90       	pop	r0
    1696:	0b be       	out	0x3b, r0	; 59
    1698:	0f 90       	pop	r0
    169a:	09 be       	out	0x39, r0	; 57
    169c:	0f 90       	pop	r0
    169e:	08 be       	out	0x38, r0	; 56
    16a0:	0f 90       	pop	r0
    16a2:	0f be       	out	0x3f, r0	; 63
    16a4:	0f 90       	pop	r0
    16a6:	1f 90       	pop	r1
    16a8:	18 95       	reti

000016aa <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    16aa:	1f 92       	push	r1
    16ac:	0f 92       	push	r0
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	0f 92       	push	r0
    16b2:	11 24       	eor	r1, r1
    16b4:	08 b6       	in	r0, 0x38	; 56
    16b6:	0f 92       	push	r0
    16b8:	18 be       	out	0x38, r1	; 56
    16ba:	09 b6       	in	r0, 0x39	; 57
    16bc:	0f 92       	push	r0
    16be:	19 be       	out	0x39, r1	; 57
    16c0:	0b b6       	in	r0, 0x3b	; 59
    16c2:	0f 92       	push	r0
    16c4:	1b be       	out	0x3b, r1	; 59
    16c6:	2f 93       	push	r18
    16c8:	3f 93       	push	r19
    16ca:	4f 93       	push	r20
    16cc:	5f 93       	push	r21
    16ce:	6f 93       	push	r22
    16d0:	7f 93       	push	r23
    16d2:	8f 93       	push	r24
    16d4:	9f 93       	push	r25
    16d6:	af 93       	push	r26
    16d8:	bf 93       	push	r27
    16da:	ef 93       	push	r30
    16dc:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    16de:	e0 91 6e 20 	lds	r30, 0x206E	; 0x80206e <tc_tcf0_cca_callback>
    16e2:	f0 91 6f 20 	lds	r31, 0x206F	; 0x80206f <tc_tcf0_cca_callback+0x1>
    16e6:	30 97       	sbiw	r30, 0x00	; 0
    16e8:	09 f0       	breq	.+2      	; 0x16ec <__vector_110+0x42>
		tc_tcf0_cca_callback();
    16ea:	19 95       	eicall
	}
}
    16ec:	ff 91       	pop	r31
    16ee:	ef 91       	pop	r30
    16f0:	bf 91       	pop	r27
    16f2:	af 91       	pop	r26
    16f4:	9f 91       	pop	r25
    16f6:	8f 91       	pop	r24
    16f8:	7f 91       	pop	r23
    16fa:	6f 91       	pop	r22
    16fc:	5f 91       	pop	r21
    16fe:	4f 91       	pop	r20
    1700:	3f 91       	pop	r19
    1702:	2f 91       	pop	r18
    1704:	0f 90       	pop	r0
    1706:	0b be       	out	0x3b, r0	; 59
    1708:	0f 90       	pop	r0
    170a:	09 be       	out	0x39, r0	; 57
    170c:	0f 90       	pop	r0
    170e:	08 be       	out	0x38, r0	; 56
    1710:	0f 90       	pop	r0
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	0f 90       	pop	r0
    1716:	1f 90       	pop	r1
    1718:	18 95       	reti

0000171a <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    171a:	1f 92       	push	r1
    171c:	0f 92       	push	r0
    171e:	0f b6       	in	r0, 0x3f	; 63
    1720:	0f 92       	push	r0
    1722:	11 24       	eor	r1, r1
    1724:	08 b6       	in	r0, 0x38	; 56
    1726:	0f 92       	push	r0
    1728:	18 be       	out	0x38, r1	; 56
    172a:	09 b6       	in	r0, 0x39	; 57
    172c:	0f 92       	push	r0
    172e:	19 be       	out	0x39, r1	; 57
    1730:	0b b6       	in	r0, 0x3b	; 59
    1732:	0f 92       	push	r0
    1734:	1b be       	out	0x3b, r1	; 59
    1736:	2f 93       	push	r18
    1738:	3f 93       	push	r19
    173a:	4f 93       	push	r20
    173c:	5f 93       	push	r21
    173e:	6f 93       	push	r22
    1740:	7f 93       	push	r23
    1742:	8f 93       	push	r24
    1744:	9f 93       	push	r25
    1746:	af 93       	push	r26
    1748:	bf 93       	push	r27
    174a:	ef 93       	push	r30
    174c:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    174e:	e0 91 6c 20 	lds	r30, 0x206C	; 0x80206c <tc_tcf0_ccb_callback>
    1752:	f0 91 6d 20 	lds	r31, 0x206D	; 0x80206d <tc_tcf0_ccb_callback+0x1>
    1756:	30 97       	sbiw	r30, 0x00	; 0
    1758:	09 f0       	breq	.+2      	; 0x175c <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    175a:	19 95       	eicall
	}
}
    175c:	ff 91       	pop	r31
    175e:	ef 91       	pop	r30
    1760:	bf 91       	pop	r27
    1762:	af 91       	pop	r26
    1764:	9f 91       	pop	r25
    1766:	8f 91       	pop	r24
    1768:	7f 91       	pop	r23
    176a:	6f 91       	pop	r22
    176c:	5f 91       	pop	r21
    176e:	4f 91       	pop	r20
    1770:	3f 91       	pop	r19
    1772:	2f 91       	pop	r18
    1774:	0f 90       	pop	r0
    1776:	0b be       	out	0x3b, r0	; 59
    1778:	0f 90       	pop	r0
    177a:	09 be       	out	0x39, r0	; 57
    177c:	0f 90       	pop	r0
    177e:	08 be       	out	0x38, r0	; 56
    1780:	0f 90       	pop	r0
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	0f 90       	pop	r0
    1786:	1f 90       	pop	r1
    1788:	18 95       	reti

0000178a <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    178a:	1f 92       	push	r1
    178c:	0f 92       	push	r0
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	0f 92       	push	r0
    1792:	11 24       	eor	r1, r1
    1794:	08 b6       	in	r0, 0x38	; 56
    1796:	0f 92       	push	r0
    1798:	18 be       	out	0x38, r1	; 56
    179a:	09 b6       	in	r0, 0x39	; 57
    179c:	0f 92       	push	r0
    179e:	19 be       	out	0x39, r1	; 57
    17a0:	0b b6       	in	r0, 0x3b	; 59
    17a2:	0f 92       	push	r0
    17a4:	1b be       	out	0x3b, r1	; 59
    17a6:	2f 93       	push	r18
    17a8:	3f 93       	push	r19
    17aa:	4f 93       	push	r20
    17ac:	5f 93       	push	r21
    17ae:	6f 93       	push	r22
    17b0:	7f 93       	push	r23
    17b2:	8f 93       	push	r24
    17b4:	9f 93       	push	r25
    17b6:	af 93       	push	r26
    17b8:	bf 93       	push	r27
    17ba:	ef 93       	push	r30
    17bc:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    17be:	e0 91 6a 20 	lds	r30, 0x206A	; 0x80206a <tc_tcf0_ccc_callback>
    17c2:	f0 91 6b 20 	lds	r31, 0x206B	; 0x80206b <tc_tcf0_ccc_callback+0x1>
    17c6:	30 97       	sbiw	r30, 0x00	; 0
    17c8:	09 f0       	breq	.+2      	; 0x17cc <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    17ca:	19 95       	eicall
	}
}
    17cc:	ff 91       	pop	r31
    17ce:	ef 91       	pop	r30
    17d0:	bf 91       	pop	r27
    17d2:	af 91       	pop	r26
    17d4:	9f 91       	pop	r25
    17d6:	8f 91       	pop	r24
    17d8:	7f 91       	pop	r23
    17da:	6f 91       	pop	r22
    17dc:	5f 91       	pop	r21
    17de:	4f 91       	pop	r20
    17e0:	3f 91       	pop	r19
    17e2:	2f 91       	pop	r18
    17e4:	0f 90       	pop	r0
    17e6:	0b be       	out	0x3b, r0	; 59
    17e8:	0f 90       	pop	r0
    17ea:	09 be       	out	0x39, r0	; 57
    17ec:	0f 90       	pop	r0
    17ee:	08 be       	out	0x38, r0	; 56
    17f0:	0f 90       	pop	r0
    17f2:	0f be       	out	0x3f, r0	; 63
    17f4:	0f 90       	pop	r0
    17f6:	1f 90       	pop	r1
    17f8:	18 95       	reti

000017fa <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    17fa:	1f 92       	push	r1
    17fc:	0f 92       	push	r0
    17fe:	0f b6       	in	r0, 0x3f	; 63
    1800:	0f 92       	push	r0
    1802:	11 24       	eor	r1, r1
    1804:	08 b6       	in	r0, 0x38	; 56
    1806:	0f 92       	push	r0
    1808:	18 be       	out	0x38, r1	; 56
    180a:	09 b6       	in	r0, 0x39	; 57
    180c:	0f 92       	push	r0
    180e:	19 be       	out	0x39, r1	; 57
    1810:	0b b6       	in	r0, 0x3b	; 59
    1812:	0f 92       	push	r0
    1814:	1b be       	out	0x3b, r1	; 59
    1816:	2f 93       	push	r18
    1818:	3f 93       	push	r19
    181a:	4f 93       	push	r20
    181c:	5f 93       	push	r21
    181e:	6f 93       	push	r22
    1820:	7f 93       	push	r23
    1822:	8f 93       	push	r24
    1824:	9f 93       	push	r25
    1826:	af 93       	push	r26
    1828:	bf 93       	push	r27
    182a:	ef 93       	push	r30
    182c:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    182e:	e0 91 68 20 	lds	r30, 0x2068	; 0x802068 <tc_tcf0_ccd_callback>
    1832:	f0 91 69 20 	lds	r31, 0x2069	; 0x802069 <tc_tcf0_ccd_callback+0x1>
    1836:	30 97       	sbiw	r30, 0x00	; 0
    1838:	09 f0       	breq	.+2      	; 0x183c <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    183a:	19 95       	eicall
	}
}
    183c:	ff 91       	pop	r31
    183e:	ef 91       	pop	r30
    1840:	bf 91       	pop	r27
    1842:	af 91       	pop	r26
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	7f 91       	pop	r23
    184a:	6f 91       	pop	r22
    184c:	5f 91       	pop	r21
    184e:	4f 91       	pop	r20
    1850:	3f 91       	pop	r19
    1852:	2f 91       	pop	r18
    1854:	0f 90       	pop	r0
    1856:	0b be       	out	0x3b, r0	; 59
    1858:	0f 90       	pop	r0
    185a:	09 be       	out	0x39, r0	; 57
    185c:	0f 90       	pop	r0
    185e:	08 be       	out	0x38, r0	; 56
    1860:	0f 90       	pop	r0
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	0f 90       	pop	r0
    1866:	1f 90       	pop	r1
    1868:	18 95       	reti

0000186a <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    186a:	1f 92       	push	r1
    186c:	0f 92       	push	r0
    186e:	0f b6       	in	r0, 0x3f	; 63
    1870:	0f 92       	push	r0
    1872:	11 24       	eor	r1, r1
    1874:	08 b6       	in	r0, 0x38	; 56
    1876:	0f 92       	push	r0
    1878:	18 be       	out	0x38, r1	; 56
    187a:	09 b6       	in	r0, 0x39	; 57
    187c:	0f 92       	push	r0
    187e:	19 be       	out	0x39, r1	; 57
    1880:	0b b6       	in	r0, 0x3b	; 59
    1882:	0f 92       	push	r0
    1884:	1b be       	out	0x3b, r1	; 59
    1886:	2f 93       	push	r18
    1888:	3f 93       	push	r19
    188a:	4f 93       	push	r20
    188c:	5f 93       	push	r21
    188e:	6f 93       	push	r22
    1890:	7f 93       	push	r23
    1892:	8f 93       	push	r24
    1894:	9f 93       	push	r25
    1896:	af 93       	push	r26
    1898:	bf 93       	push	r27
    189a:	ef 93       	push	r30
    189c:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    189e:	e0 91 66 20 	lds	r30, 0x2066	; 0x802066 <tc_tcf1_ovf_callback>
    18a2:	f0 91 67 20 	lds	r31, 0x2067	; 0x802067 <tc_tcf1_ovf_callback+0x1>
    18a6:	30 97       	sbiw	r30, 0x00	; 0
    18a8:	09 f0       	breq	.+2      	; 0x18ac <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    18aa:	19 95       	eicall
	}
}
    18ac:	ff 91       	pop	r31
    18ae:	ef 91       	pop	r30
    18b0:	bf 91       	pop	r27
    18b2:	af 91       	pop	r26
    18b4:	9f 91       	pop	r25
    18b6:	8f 91       	pop	r24
    18b8:	7f 91       	pop	r23
    18ba:	6f 91       	pop	r22
    18bc:	5f 91       	pop	r21
    18be:	4f 91       	pop	r20
    18c0:	3f 91       	pop	r19
    18c2:	2f 91       	pop	r18
    18c4:	0f 90       	pop	r0
    18c6:	0b be       	out	0x3b, r0	; 59
    18c8:	0f 90       	pop	r0
    18ca:	09 be       	out	0x39, r0	; 57
    18cc:	0f 90       	pop	r0
    18ce:	08 be       	out	0x38, r0	; 56
    18d0:	0f 90       	pop	r0
    18d2:	0f be       	out	0x3f, r0	; 63
    18d4:	0f 90       	pop	r0
    18d6:	1f 90       	pop	r1
    18d8:	18 95       	reti

000018da <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    18da:	1f 92       	push	r1
    18dc:	0f 92       	push	r0
    18de:	0f b6       	in	r0, 0x3f	; 63
    18e0:	0f 92       	push	r0
    18e2:	11 24       	eor	r1, r1
    18e4:	08 b6       	in	r0, 0x38	; 56
    18e6:	0f 92       	push	r0
    18e8:	18 be       	out	0x38, r1	; 56
    18ea:	09 b6       	in	r0, 0x39	; 57
    18ec:	0f 92       	push	r0
    18ee:	19 be       	out	0x39, r1	; 57
    18f0:	0b b6       	in	r0, 0x3b	; 59
    18f2:	0f 92       	push	r0
    18f4:	1b be       	out	0x3b, r1	; 59
    18f6:	2f 93       	push	r18
    18f8:	3f 93       	push	r19
    18fa:	4f 93       	push	r20
    18fc:	5f 93       	push	r21
    18fe:	6f 93       	push	r22
    1900:	7f 93       	push	r23
    1902:	8f 93       	push	r24
    1904:	9f 93       	push	r25
    1906:	af 93       	push	r26
    1908:	bf 93       	push	r27
    190a:	ef 93       	push	r30
    190c:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    190e:	e0 91 64 20 	lds	r30, 0x2064	; 0x802064 <tc_tcf1_err_callback>
    1912:	f0 91 65 20 	lds	r31, 0x2065	; 0x802065 <tc_tcf1_err_callback+0x1>
    1916:	30 97       	sbiw	r30, 0x00	; 0
    1918:	09 f0       	breq	.+2      	; 0x191c <__vector_115+0x42>
		tc_tcf1_err_callback();
    191a:	19 95       	eicall
	}
}
    191c:	ff 91       	pop	r31
    191e:	ef 91       	pop	r30
    1920:	bf 91       	pop	r27
    1922:	af 91       	pop	r26
    1924:	9f 91       	pop	r25
    1926:	8f 91       	pop	r24
    1928:	7f 91       	pop	r23
    192a:	6f 91       	pop	r22
    192c:	5f 91       	pop	r21
    192e:	4f 91       	pop	r20
    1930:	3f 91       	pop	r19
    1932:	2f 91       	pop	r18
    1934:	0f 90       	pop	r0
    1936:	0b be       	out	0x3b, r0	; 59
    1938:	0f 90       	pop	r0
    193a:	09 be       	out	0x39, r0	; 57
    193c:	0f 90       	pop	r0
    193e:	08 be       	out	0x38, r0	; 56
    1940:	0f 90       	pop	r0
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	0f 90       	pop	r0
    1946:	1f 90       	pop	r1
    1948:	18 95       	reti

0000194a <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    194a:	1f 92       	push	r1
    194c:	0f 92       	push	r0
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	0f 92       	push	r0
    1952:	11 24       	eor	r1, r1
    1954:	08 b6       	in	r0, 0x38	; 56
    1956:	0f 92       	push	r0
    1958:	18 be       	out	0x38, r1	; 56
    195a:	09 b6       	in	r0, 0x39	; 57
    195c:	0f 92       	push	r0
    195e:	19 be       	out	0x39, r1	; 57
    1960:	0b b6       	in	r0, 0x3b	; 59
    1962:	0f 92       	push	r0
    1964:	1b be       	out	0x3b, r1	; 59
    1966:	2f 93       	push	r18
    1968:	3f 93       	push	r19
    196a:	4f 93       	push	r20
    196c:	5f 93       	push	r21
    196e:	6f 93       	push	r22
    1970:	7f 93       	push	r23
    1972:	8f 93       	push	r24
    1974:	9f 93       	push	r25
    1976:	af 93       	push	r26
    1978:	bf 93       	push	r27
    197a:	ef 93       	push	r30
    197c:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    197e:	e0 91 62 20 	lds	r30, 0x2062	; 0x802062 <tc_tcf1_cca_callback>
    1982:	f0 91 63 20 	lds	r31, 0x2063	; 0x802063 <tc_tcf1_cca_callback+0x1>
    1986:	30 97       	sbiw	r30, 0x00	; 0
    1988:	09 f0       	breq	.+2      	; 0x198c <__vector_116+0x42>
		tc_tcf1_cca_callback();
    198a:	19 95       	eicall
	}
}
    198c:	ff 91       	pop	r31
    198e:	ef 91       	pop	r30
    1990:	bf 91       	pop	r27
    1992:	af 91       	pop	r26
    1994:	9f 91       	pop	r25
    1996:	8f 91       	pop	r24
    1998:	7f 91       	pop	r23
    199a:	6f 91       	pop	r22
    199c:	5f 91       	pop	r21
    199e:	4f 91       	pop	r20
    19a0:	3f 91       	pop	r19
    19a2:	2f 91       	pop	r18
    19a4:	0f 90       	pop	r0
    19a6:	0b be       	out	0x3b, r0	; 59
    19a8:	0f 90       	pop	r0
    19aa:	09 be       	out	0x39, r0	; 57
    19ac:	0f 90       	pop	r0
    19ae:	08 be       	out	0x38, r0	; 56
    19b0:	0f 90       	pop	r0
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	0f 90       	pop	r0
    19b6:	1f 90       	pop	r1
    19b8:	18 95       	reti

000019ba <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    19ba:	1f 92       	push	r1
    19bc:	0f 92       	push	r0
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	0f 92       	push	r0
    19c2:	11 24       	eor	r1, r1
    19c4:	08 b6       	in	r0, 0x38	; 56
    19c6:	0f 92       	push	r0
    19c8:	18 be       	out	0x38, r1	; 56
    19ca:	09 b6       	in	r0, 0x39	; 57
    19cc:	0f 92       	push	r0
    19ce:	19 be       	out	0x39, r1	; 57
    19d0:	0b b6       	in	r0, 0x3b	; 59
    19d2:	0f 92       	push	r0
    19d4:	1b be       	out	0x3b, r1	; 59
    19d6:	2f 93       	push	r18
    19d8:	3f 93       	push	r19
    19da:	4f 93       	push	r20
    19dc:	5f 93       	push	r21
    19de:	6f 93       	push	r22
    19e0:	7f 93       	push	r23
    19e2:	8f 93       	push	r24
    19e4:	9f 93       	push	r25
    19e6:	af 93       	push	r26
    19e8:	bf 93       	push	r27
    19ea:	ef 93       	push	r30
    19ec:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    19ee:	e0 91 60 20 	lds	r30, 0x2060	; 0x802060 <__data_end>
    19f2:	f0 91 61 20 	lds	r31, 0x2061	; 0x802061 <__data_end+0x1>
    19f6:	30 97       	sbiw	r30, 0x00	; 0
    19f8:	09 f0       	breq	.+2      	; 0x19fc <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    19fa:	19 95       	eicall
	}
}
    19fc:	ff 91       	pop	r31
    19fe:	ef 91       	pop	r30
    1a00:	bf 91       	pop	r27
    1a02:	af 91       	pop	r26
    1a04:	9f 91       	pop	r25
    1a06:	8f 91       	pop	r24
    1a08:	7f 91       	pop	r23
    1a0a:	6f 91       	pop	r22
    1a0c:	5f 91       	pop	r21
    1a0e:	4f 91       	pop	r20
    1a10:	3f 91       	pop	r19
    1a12:	2f 91       	pop	r18
    1a14:	0f 90       	pop	r0
    1a16:	0b be       	out	0x3b, r0	; 59
    1a18:	0f 90       	pop	r0
    1a1a:	09 be       	out	0x39, r0	; 57
    1a1c:	0f 90       	pop	r0
    1a1e:	08 be       	out	0x38, r0	; 56
    1a20:	0f 90       	pop	r0
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	0f 90       	pop	r0
    1a26:	1f 90       	pop	r1
    1a28:	18 95       	reti

00001a2a <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	91 81       	ldd	r25, Z+1	; 0x01
    1a2e:	95 ff       	sbrs	r25, 5
    1a30:	fd cf       	rjmp	.-6      	; 0x1a2c <usart_putchar+0x2>
    1a32:	60 83       	st	Z, r22
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	08 95       	ret

00001a3a <usart_getchar>:
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	91 81       	ldd	r25, Z+1	; 0x01
    1a3e:	99 23       	and	r25, r25
    1a40:	ec f7       	brge	.-6      	; 0x1a3c <usart_getchar+0x2>
    1a42:	80 81       	ld	r24, Z
    1a44:	08 95       	ret

00001a46 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1a46:	4f 92       	push	r4
    1a48:	5f 92       	push	r5
    1a4a:	6f 92       	push	r6
    1a4c:	7f 92       	push	r7
    1a4e:	8f 92       	push	r8
    1a50:	9f 92       	push	r9
    1a52:	af 92       	push	r10
    1a54:	bf 92       	push	r11
    1a56:	ef 92       	push	r14
    1a58:	ff 92       	push	r15
    1a5a:	0f 93       	push	r16
    1a5c:	1f 93       	push	r17
    1a5e:	cf 93       	push	r28
    1a60:	7c 01       	movw	r14, r24
    1a62:	4a 01       	movw	r8, r20
    1a64:	5b 01       	movw	r10, r22
    1a66:	28 01       	movw	r4, r16
    1a68:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	84 81       	ldd	r24, Z+4	; 0x04
    1a6e:	82 ff       	sbrs	r24, 2
    1a70:	16 c0       	rjmp	.+44     	; 0x1a9e <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1a72:	d9 01       	movw	r26, r18
    1a74:	c8 01       	movw	r24, r16
    1a76:	68 94       	set
    1a78:	12 f8       	bld	r1, 2
    1a7a:	b6 95       	lsr	r27
    1a7c:	a7 95       	ror	r26
    1a7e:	97 95       	ror	r25
    1a80:	87 95       	ror	r24
    1a82:	16 94       	lsr	r1
    1a84:	d1 f7       	brne	.-12     	; 0x1a7a <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1a86:	b9 01       	movw	r22, r18
    1a88:	a8 01       	movw	r20, r16
    1a8a:	03 2e       	mov	r0, r19
    1a8c:	36 e1       	ldi	r19, 0x16	; 22
    1a8e:	76 95       	lsr	r23
    1a90:	67 95       	ror	r22
    1a92:	57 95       	ror	r21
    1a94:	47 95       	ror	r20
    1a96:	3a 95       	dec	r19
    1a98:	d1 f7       	brne	.-12     	; 0x1a8e <usart_set_baudrate+0x48>
    1a9a:	30 2d       	mov	r19, r0
    1a9c:	15 c0       	rjmp	.+42     	; 0x1ac8 <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1a9e:	d9 01       	movw	r26, r18
    1aa0:	c8 01       	movw	r24, r16
    1aa2:	68 94       	set
    1aa4:	13 f8       	bld	r1, 3
    1aa6:	b6 95       	lsr	r27
    1aa8:	a7 95       	ror	r26
    1aaa:	97 95       	ror	r25
    1aac:	87 95       	ror	r24
    1aae:	16 94       	lsr	r1
    1ab0:	d1 f7       	brne	.-12     	; 0x1aa6 <usart_set_baudrate+0x60>
		min_rate /= 2;
    1ab2:	b9 01       	movw	r22, r18
    1ab4:	a8 01       	movw	r20, r16
    1ab6:	03 2e       	mov	r0, r19
    1ab8:	37 e1       	ldi	r19, 0x17	; 23
    1aba:	76 95       	lsr	r23
    1abc:	67 95       	ror	r22
    1abe:	57 95       	ror	r21
    1ac0:	47 95       	ror	r20
    1ac2:	3a 95       	dec	r19
    1ac4:	d1 f7       	brne	.-12     	; 0x1aba <usart_set_baudrate+0x74>
    1ac6:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1ac8:	88 15       	cp	r24, r8
    1aca:	99 05       	cpc	r25, r9
    1acc:	aa 05       	cpc	r26, r10
    1ace:	bb 05       	cpc	r27, r11
    1ad0:	08 f4       	brcc	.+2      	; 0x1ad4 <usart_set_baudrate+0x8e>
    1ad2:	a6 c0       	rjmp	.+332    	; 0x1c20 <usart_set_baudrate+0x1da>
    1ad4:	84 16       	cp	r8, r20
    1ad6:	95 06       	cpc	r9, r21
    1ad8:	a6 06       	cpc	r10, r22
    1ada:	b7 06       	cpc	r11, r23
    1adc:	08 f4       	brcc	.+2      	; 0x1ae0 <usart_set_baudrate+0x9a>
    1ade:	a2 c0       	rjmp	.+324    	; 0x1c24 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1ae0:	f7 01       	movw	r30, r14
    1ae2:	84 81       	ldd	r24, Z+4	; 0x04
    1ae4:	82 fd       	sbrc	r24, 2
    1ae6:	04 c0       	rjmp	.+8      	; 0x1af0 <usart_set_baudrate+0xaa>
		baud *= 2;
    1ae8:	88 0c       	add	r8, r8
    1aea:	99 1c       	adc	r9, r9
    1aec:	aa 1c       	adc	r10, r10
    1aee:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1af0:	c3 01       	movw	r24, r6
    1af2:	b2 01       	movw	r22, r4
    1af4:	a5 01       	movw	r20, r10
    1af6:	94 01       	movw	r18, r8
    1af8:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1afc:	2f 3f       	cpi	r18, 0xFF	; 255
    1afe:	31 05       	cpc	r19, r1
    1b00:	41 05       	cpc	r20, r1
    1b02:	51 05       	cpc	r21, r1
    1b04:	08 f4       	brcc	.+2      	; 0x1b08 <usart_set_baudrate+0xc2>
    1b06:	90 c0       	rjmp	.+288    	; 0x1c28 <usart_set_baudrate+0x1e2>
    1b08:	8f ef       	ldi	r24, 0xFF	; 255
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	a0 e0       	ldi	r26, 0x00	; 0
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	c9 ef       	ldi	r28, 0xF9	; 249
    1b12:	05 c0       	rjmp	.+10     	; 0x1b1e <usart_set_baudrate+0xd8>
    1b14:	28 17       	cp	r18, r24
    1b16:	39 07       	cpc	r19, r25
    1b18:	4a 07       	cpc	r20, r26
    1b1a:	5b 07       	cpc	r21, r27
    1b1c:	58 f0       	brcs	.+22     	; 0x1b34 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	aa 1f       	adc	r26, r26
    1b24:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1b26:	cd 3f       	cpi	r28, 0xFD	; 253
    1b28:	0c f4       	brge	.+2      	; 0x1b2c <usart_set_baudrate+0xe6>
			limit |= 1;
    1b2a:	81 60       	ori	r24, 0x01	; 1
    1b2c:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1b2e:	c7 30       	cpi	r28, 0x07	; 7
    1b30:	89 f7       	brne	.-30     	; 0x1b14 <usart_set_baudrate+0xce>
    1b32:	4f c0       	rjmp	.+158    	; 0x1bd2 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1b34:	cc 23       	and	r28, r28
    1b36:	0c f0       	brlt	.+2      	; 0x1b3a <usart_set_baudrate+0xf4>
    1b38:	4c c0       	rjmp	.+152    	; 0x1bd2 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1b3a:	d5 01       	movw	r26, r10
    1b3c:	c4 01       	movw	r24, r8
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	aa 1f       	adc	r26, r26
    1b44:	bb 1f       	adc	r27, r27
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	aa 1f       	adc	r26, r26
    1b4c:	bb 1f       	adc	r27, r27
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	aa 1f       	adc	r26, r26
    1b54:	bb 1f       	adc	r27, r27
    1b56:	48 1a       	sub	r4, r24
    1b58:	59 0a       	sbc	r5, r25
    1b5a:	6a 0a       	sbc	r6, r26
    1b5c:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1b5e:	ce 3f       	cpi	r28, 0xFE	; 254
    1b60:	f4 f4       	brge	.+60     	; 0x1b9e <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1b62:	8d ef       	ldi	r24, 0xFD	; 253
    1b64:	9f ef       	ldi	r25, 0xFF	; 255
    1b66:	8c 1b       	sub	r24, r28
    1b68:	91 09       	sbc	r25, r1
    1b6a:	c7 fd       	sbrc	r28, 7
    1b6c:	93 95       	inc	r25
    1b6e:	04 c0       	rjmp	.+8      	; 0x1b78 <usart_set_baudrate+0x132>
    1b70:	44 0c       	add	r4, r4
    1b72:	55 1c       	adc	r5, r5
    1b74:	66 1c       	adc	r6, r6
    1b76:	77 1c       	adc	r7, r7
    1b78:	8a 95       	dec	r24
    1b7a:	d2 f7       	brpl	.-12     	; 0x1b70 <usart_set_baudrate+0x12a>
    1b7c:	d5 01       	movw	r26, r10
    1b7e:	c4 01       	movw	r24, r8
    1b80:	b6 95       	lsr	r27
    1b82:	a7 95       	ror	r26
    1b84:	97 95       	ror	r25
    1b86:	87 95       	ror	r24
    1b88:	bc 01       	movw	r22, r24
    1b8a:	cd 01       	movw	r24, r26
    1b8c:	64 0d       	add	r22, r4
    1b8e:	75 1d       	adc	r23, r5
    1b90:	86 1d       	adc	r24, r6
    1b92:	97 1d       	adc	r25, r7
    1b94:	a5 01       	movw	r20, r10
    1b96:	94 01       	movw	r18, r8
    1b98:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodsi4>
    1b9c:	37 c0       	rjmp	.+110    	; 0x1c0c <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    1b9e:	83 e0       	ldi	r24, 0x03	; 3
    1ba0:	8c 0f       	add	r24, r28
    1ba2:	a5 01       	movw	r20, r10
    1ba4:	94 01       	movw	r18, r8
    1ba6:	04 c0       	rjmp	.+8      	; 0x1bb0 <usart_set_baudrate+0x16a>
    1ba8:	22 0f       	add	r18, r18
    1baa:	33 1f       	adc	r19, r19
    1bac:	44 1f       	adc	r20, r20
    1bae:	55 1f       	adc	r21, r21
    1bb0:	8a 95       	dec	r24
    1bb2:	d2 f7       	brpl	.-12     	; 0x1ba8 <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    1bb4:	da 01       	movw	r26, r20
    1bb6:	c9 01       	movw	r24, r18
    1bb8:	b6 95       	lsr	r27
    1bba:	a7 95       	ror	r26
    1bbc:	97 95       	ror	r25
    1bbe:	87 95       	ror	r24
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	64 0d       	add	r22, r4
    1bc6:	75 1d       	adc	r23, r5
    1bc8:	86 1d       	adc	r24, r6
    1bca:	97 1d       	adc	r25, r7
    1bcc:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodsi4>
    1bd0:	1d c0       	rjmp	.+58     	; 0x1c0c <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1bd2:	83 e0       	ldi	r24, 0x03	; 3
    1bd4:	8c 0f       	add	r24, r28
    1bd6:	a5 01       	movw	r20, r10
    1bd8:	94 01       	movw	r18, r8
    1bda:	04 c0       	rjmp	.+8      	; 0x1be4 <usart_set_baudrate+0x19e>
    1bdc:	22 0f       	add	r18, r18
    1bde:	33 1f       	adc	r19, r19
    1be0:	44 1f       	adc	r20, r20
    1be2:	55 1f       	adc	r21, r21
    1be4:	8a 95       	dec	r24
    1be6:	d2 f7       	brpl	.-12     	; 0x1bdc <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    1be8:	da 01       	movw	r26, r20
    1bea:	c9 01       	movw	r24, r18
    1bec:	b6 95       	lsr	r27
    1bee:	a7 95       	ror	r26
    1bf0:	97 95       	ror	r25
    1bf2:	87 95       	ror	r24
    1bf4:	bc 01       	movw	r22, r24
    1bf6:	cd 01       	movw	r24, r26
    1bf8:	64 0d       	add	r22, r4
    1bfa:	75 1d       	adc	r23, r5
    1bfc:	86 1d       	adc	r24, r6
    1bfe:	97 1d       	adc	r25, r7
    1c00:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodsi4>
    1c04:	21 50       	subi	r18, 0x01	; 1
    1c06:	31 09       	sbc	r19, r1
    1c08:	41 09       	sbc	r20, r1
    1c0a:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1c0c:	83 2f       	mov	r24, r19
    1c0e:	8f 70       	andi	r24, 0x0F	; 15
    1c10:	c2 95       	swap	r28
    1c12:	c0 7f       	andi	r28, 0xF0	; 240
    1c14:	c8 2b       	or	r28, r24
    1c16:	f7 01       	movw	r30, r14
    1c18:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1c1a:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	18 c0       	rjmp	.+48     	; 0x1c50 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	16 c0       	rjmp	.+44     	; 0x1c50 <usart_set_baudrate+0x20a>
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	14 c0       	rjmp	.+40     	; 0x1c50 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1c28:	d5 01       	movw	r26, r10
    1c2a:	c4 01       	movw	r24, r8
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	aa 1f       	adc	r26, r26
    1c32:	bb 1f       	adc	r27, r27
    1c34:	88 0f       	add	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	aa 1f       	adc	r26, r26
    1c3a:	bb 1f       	adc	r27, r27
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	aa 1f       	adc	r26, r26
    1c42:	bb 1f       	adc	r27, r27
    1c44:	48 1a       	sub	r4, r24
    1c46:	59 0a       	sbc	r5, r25
    1c48:	6a 0a       	sbc	r6, r26
    1c4a:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1c4c:	c9 ef       	ldi	r28, 0xF9	; 249
    1c4e:	89 cf       	rjmp	.-238    	; 0x1b62 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1c50:	cf 91       	pop	r28
    1c52:	1f 91       	pop	r17
    1c54:	0f 91       	pop	r16
    1c56:	ff 90       	pop	r15
    1c58:	ef 90       	pop	r14
    1c5a:	bf 90       	pop	r11
    1c5c:	af 90       	pop	r10
    1c5e:	9f 90       	pop	r9
    1c60:	8f 90       	pop	r8
    1c62:	7f 90       	pop	r7
    1c64:	6f 90       	pop	r6
    1c66:	5f 90       	pop	r5
    1c68:	4f 90       	pop	r4
    1c6a:	08 95       	ret

00001c6c <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1c6c:	0f 93       	push	r16
    1c6e:	1f 93       	push	r17
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	ec 01       	movw	r28, r24
    1c76:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1c78:	00 97       	sbiw	r24, 0x00	; 0
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <usart_init_rs232+0x12>
    1c7c:	5d c1       	rjmp	.+698    	; 0x1f38 <usart_init_rs232+0x2cc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1c7e:	80 3c       	cpi	r24, 0xC0	; 192
    1c80:	91 05       	cpc	r25, r1
    1c82:	29 f4       	brne	.+10     	; 0x1c8e <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1c84:	60 e1       	ldi	r22, 0x10	; 16
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1c8c:	55 c1       	rjmp	.+682    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1c8e:	c0 34       	cpi	r28, 0x40	; 64
    1c90:	84 e0       	ldi	r24, 0x04	; 4
    1c92:	d8 07       	cpc	r29, r24
    1c94:	29 f4       	brne	.+10     	; 0x1ca0 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1c96:	68 e0       	ldi	r22, 0x08	; 8
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1c9e:	4c c1       	rjmp	.+664    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    1ca0:	c1 15       	cp	r28, r1
    1ca2:	e4 e0       	ldi	r30, 0x04	; 4
    1ca4:	de 07       	cpc	r29, r30
    1ca6:	29 f4       	brne	.+10     	; 0x1cb2 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    1ca8:	64 e0       	ldi	r22, 0x04	; 4
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1cb0:	43 c1       	rjmp	.+646    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    1cb2:	c0 38       	cpi	r28, 0x80	; 128
    1cb4:	f1 e0       	ldi	r31, 0x01	; 1
    1cb6:	df 07       	cpc	r29, r31
    1cb8:	29 f4       	brne	.+10     	; 0x1cc4 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    1cba:	62 e0       	ldi	r22, 0x02	; 2
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1cc2:	3a c1       	rjmp	.+628    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    1cc4:	c1 15       	cp	r28, r1
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	d8 07       	cpc	r29, r24
    1cca:	29 f4       	brne	.+10     	; 0x1cd6 <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    1ccc:	61 e0       	ldi	r22, 0x01	; 1
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1cd4:	31 c1       	rjmp	.+610    	; 0x1f38 <usart_init_rs232+0x2cc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    1cd6:	c0 38       	cpi	r28, 0x80	; 128
    1cd8:	e3 e0       	ldi	r30, 0x03	; 3
    1cda:	de 07       	cpc	r29, r30
    1cdc:	29 f4       	brne	.+10     	; 0x1ce8 <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1ce6:	28 c1       	rjmp	.+592    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    1ce8:	c0 39       	cpi	r28, 0x90	; 144
    1cea:	f3 e0       	ldi	r31, 0x03	; 3
    1cec:	df 07       	cpc	r29, r31
    1cee:	29 f4       	brne	.+10     	; 0x1cfa <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    1cf0:	61 e0       	ldi	r22, 0x01	; 1
    1cf2:	82 e0       	ldi	r24, 0x02	; 2
    1cf4:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1cf8:	1f c1       	rjmp	.+574    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    1cfa:	c1 15       	cp	r28, r1
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	d8 07       	cpc	r29, r24
    1d00:	29 f4       	brne	.+10     	; 0x1d0c <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    1d02:	62 e0       	ldi	r22, 0x02	; 2
    1d04:	81 e0       	ldi	r24, 0x01	; 1
    1d06:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1d0a:	16 c1       	rjmp	.+556    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    1d0c:	c0 34       	cpi	r28, 0x40	; 64
    1d0e:	e2 e0       	ldi	r30, 0x02	; 2
    1d10:	de 07       	cpc	r29, r30
    1d12:	29 f4       	brne	.+10     	; 0x1d1e <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    1d14:	62 e0       	ldi	r22, 0x02	; 2
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1d1c:	0d c1       	rjmp	.+538    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    1d1e:	c1 15       	cp	r28, r1
    1d20:	f3 e0       	ldi	r31, 0x03	; 3
    1d22:	df 07       	cpc	r29, r31
    1d24:	29 f4       	brne	.+10     	; 0x1d30 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    1d26:	64 e0       	ldi	r22, 0x04	; 4
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1d2e:	04 c1       	rjmp	.+520    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    1d30:	c0 32       	cpi	r28, 0x20	; 32
    1d32:	83 e0       	ldi	r24, 0x03	; 3
    1d34:	d8 07       	cpc	r29, r24
    1d36:	29 f4       	brne	.+10     	; 0x1d42 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    1d38:	64 e0       	ldi	r22, 0x04	; 4
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1d40:	fb c0       	rjmp	.+502    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    1d42:	c1 15       	cp	r28, r1
    1d44:	e8 e0       	ldi	r30, 0x08	; 8
    1d46:	de 07       	cpc	r29, r30
    1d48:	29 f4       	brne	.+10     	; 0x1d54 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    1d4a:	61 e0       	ldi	r22, 0x01	; 1
    1d4c:	83 e0       	ldi	r24, 0x03	; 3
    1d4e:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1d52:	f2 c0       	rjmp	.+484    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    1d54:	c1 15       	cp	r28, r1
    1d56:	f9 e0       	ldi	r31, 0x09	; 9
    1d58:	df 07       	cpc	r29, r31
    1d5a:	29 f4       	brne	.+10     	; 0x1d66 <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    1d5c:	61 e0       	ldi	r22, 0x01	; 1
    1d5e:	84 e0       	ldi	r24, 0x04	; 4
    1d60:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1d64:	e9 c0       	rjmp	.+466    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    1d66:	c1 15       	cp	r28, r1
    1d68:	8a e0       	ldi	r24, 0x0A	; 10
    1d6a:	d8 07       	cpc	r29, r24
    1d6c:	29 f4       	brne	.+10     	; 0x1d78 <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    1d6e:	61 e0       	ldi	r22, 0x01	; 1
    1d70:	85 e0       	ldi	r24, 0x05	; 5
    1d72:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1d76:	e0 c0       	rjmp	.+448    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    1d78:	c1 15       	cp	r28, r1
    1d7a:	eb e0       	ldi	r30, 0x0B	; 11
    1d7c:	de 07       	cpc	r29, r30
    1d7e:	29 f4       	brne	.+10     	; 0x1d8a <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    1d80:	61 e0       	ldi	r22, 0x01	; 1
    1d82:	86 e0       	ldi	r24, 0x06	; 6
    1d84:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1d88:	d7 c0       	rjmp	.+430    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    1d8a:	c0 34       	cpi	r28, 0x40	; 64
    1d8c:	f8 e0       	ldi	r31, 0x08	; 8
    1d8e:	df 07       	cpc	r29, r31
    1d90:	29 f4       	brne	.+10     	; 0x1d9c <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    1d92:	62 e0       	ldi	r22, 0x02	; 2
    1d94:	83 e0       	ldi	r24, 0x03	; 3
    1d96:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1d9a:	ce c0       	rjmp	.+412    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    1d9c:	c0 34       	cpi	r28, 0x40	; 64
    1d9e:	89 e0       	ldi	r24, 0x09	; 9
    1da0:	d8 07       	cpc	r29, r24
    1da2:	29 f4       	brne	.+10     	; 0x1dae <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1da4:	62 e0       	ldi	r22, 0x02	; 2
    1da6:	84 e0       	ldi	r24, 0x04	; 4
    1da8:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1dac:	c5 c0       	rjmp	.+394    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    1dae:	c0 34       	cpi	r28, 0x40	; 64
    1db0:	ea e0       	ldi	r30, 0x0A	; 10
    1db2:	de 07       	cpc	r29, r30
    1db4:	29 f4       	brne	.+10     	; 0x1dc0 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    1db6:	62 e0       	ldi	r22, 0x02	; 2
    1db8:	85 e0       	ldi	r24, 0x05	; 5
    1dba:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1dbe:	bc c0       	rjmp	.+376    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    1dc0:	c0 34       	cpi	r28, 0x40	; 64
    1dc2:	fb e0       	ldi	r31, 0x0B	; 11
    1dc4:	df 07       	cpc	r29, r31
    1dc6:	29 f4       	brne	.+10     	; 0x1dd2 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    1dc8:	62 e0       	ldi	r22, 0x02	; 2
    1dca:	86 e0       	ldi	r24, 0x06	; 6
    1dcc:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1dd0:	b3 c0       	rjmp	.+358    	; 0x1f38 <usart_init_rs232+0x2cc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    1dd2:	c0 39       	cpi	r28, 0x90	; 144
    1dd4:	88 e0       	ldi	r24, 0x08	; 8
    1dd6:	d8 07       	cpc	r29, r24
    1dd8:	29 f4       	brne	.+10     	; 0x1de4 <usart_init_rs232+0x178>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    1dda:	64 e0       	ldi	r22, 0x04	; 4
    1ddc:	83 e0       	ldi	r24, 0x03	; 3
    1dde:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1de2:	aa c0       	rjmp	.+340    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    1de4:	c0 39       	cpi	r28, 0x90	; 144
    1de6:	e9 e0       	ldi	r30, 0x09	; 9
    1de8:	de 07       	cpc	r29, r30
    1dea:	29 f4       	brne	.+10     	; 0x1df6 <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    1dec:	64 e0       	ldi	r22, 0x04	; 4
    1dee:	84 e0       	ldi	r24, 0x04	; 4
    1df0:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1df4:	a1 c0       	rjmp	.+322    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    1df6:	c0 39       	cpi	r28, 0x90	; 144
    1df8:	fa e0       	ldi	r31, 0x0A	; 10
    1dfa:	df 07       	cpc	r29, r31
    1dfc:	29 f4       	brne	.+10     	; 0x1e08 <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1dfe:	64 e0       	ldi	r22, 0x04	; 4
    1e00:	85 e0       	ldi	r24, 0x05	; 5
    1e02:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1e06:	98 c0       	rjmp	.+304    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    1e08:	c0 39       	cpi	r28, 0x90	; 144
    1e0a:	8b e0       	ldi	r24, 0x0B	; 11
    1e0c:	d8 07       	cpc	r29, r24
    1e0e:	29 f4       	brne	.+10     	; 0x1e1a <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    1e10:	64 e0       	ldi	r22, 0x04	; 4
    1e12:	86 e0       	ldi	r24, 0x06	; 6
    1e14:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1e18:	8f c0       	rjmp	.+286    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    1e1a:	c0 3c       	cpi	r28, 0xC0	; 192
    1e1c:	e8 e0       	ldi	r30, 0x08	; 8
    1e1e:	de 07       	cpc	r29, r30
    1e20:	29 f4       	brne	.+10     	; 0x1e2c <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    1e22:	68 e0       	ldi	r22, 0x08	; 8
    1e24:	83 e0       	ldi	r24, 0x03	; 3
    1e26:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1e2a:	86 c0       	rjmp	.+268    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    1e2c:	c0 3c       	cpi	r28, 0xC0	; 192
    1e2e:	f9 e0       	ldi	r31, 0x09	; 9
    1e30:	df 07       	cpc	r29, r31
    1e32:	29 f4       	brne	.+10     	; 0x1e3e <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    1e34:	68 e0       	ldi	r22, 0x08	; 8
    1e36:	84 e0       	ldi	r24, 0x04	; 4
    1e38:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1e3c:	7d c0       	rjmp	.+250    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    1e3e:	c0 3c       	cpi	r28, 0xC0	; 192
    1e40:	8a e0       	ldi	r24, 0x0A	; 10
    1e42:	d8 07       	cpc	r29, r24
    1e44:	29 f4       	brne	.+10     	; 0x1e50 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    1e46:	68 e0       	ldi	r22, 0x08	; 8
    1e48:	85 e0       	ldi	r24, 0x05	; 5
    1e4a:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1e4e:	74 c0       	rjmp	.+232    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    1e50:	c0 3c       	cpi	r28, 0xC0	; 192
    1e52:	eb e0       	ldi	r30, 0x0B	; 11
    1e54:	de 07       	cpc	r29, r30
    1e56:	29 f4       	brne	.+10     	; 0x1e62 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    1e58:	68 e0       	ldi	r22, 0x08	; 8
    1e5a:	86 e0       	ldi	r24, 0x06	; 6
    1e5c:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1e60:	6b c0       	rjmp	.+214    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    1e62:	c0 3a       	cpi	r28, 0xA0	; 160
    1e64:	f8 e0       	ldi	r31, 0x08	; 8
    1e66:	df 07       	cpc	r29, r31
    1e68:	29 f4       	brne	.+10     	; 0x1e74 <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    1e6a:	60 e1       	ldi	r22, 0x10	; 16
    1e6c:	83 e0       	ldi	r24, 0x03	; 3
    1e6e:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1e72:	62 c0       	rjmp	.+196    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    1e74:	c0 3a       	cpi	r28, 0xA0	; 160
    1e76:	89 e0       	ldi	r24, 0x09	; 9
    1e78:	d8 07       	cpc	r29, r24
    1e7a:	29 f4       	brne	.+10     	; 0x1e86 <usart_init_rs232+0x21a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    1e7c:	60 e1       	ldi	r22, 0x10	; 16
    1e7e:	84 e0       	ldi	r24, 0x04	; 4
    1e80:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1e84:	59 c0       	rjmp	.+178    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    1e86:	c0 3a       	cpi	r28, 0xA0	; 160
    1e88:	ea e0       	ldi	r30, 0x0A	; 10
    1e8a:	de 07       	cpc	r29, r30
    1e8c:	29 f4       	brne	.+10     	; 0x1e98 <usart_init_rs232+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    1e8e:	60 e1       	ldi	r22, 0x10	; 16
    1e90:	85 e0       	ldi	r24, 0x05	; 5
    1e92:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1e96:	50 c0       	rjmp	.+160    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    1e98:	c0 3a       	cpi	r28, 0xA0	; 160
    1e9a:	fb e0       	ldi	r31, 0x0B	; 11
    1e9c:	df 07       	cpc	r29, r31
    1e9e:	29 f4       	brne	.+10     	; 0x1eaa <usart_init_rs232+0x23e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    1ea0:	60 e1       	ldi	r22, 0x10	; 16
    1ea2:	86 e0       	ldi	r24, 0x06	; 6
    1ea4:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1ea8:	47 c0       	rjmp	.+142    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    1eaa:	c0 3b       	cpi	r28, 0xB0	; 176
    1eac:	88 e0       	ldi	r24, 0x08	; 8
    1eae:	d8 07       	cpc	r29, r24
    1eb0:	29 f4       	brne	.+10     	; 0x1ebc <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    1eb2:	60 e2       	ldi	r22, 0x20	; 32
    1eb4:	83 e0       	ldi	r24, 0x03	; 3
    1eb6:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1eba:	3e c0       	rjmp	.+124    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    1ebc:	c0 3b       	cpi	r28, 0xB0	; 176
    1ebe:	e9 e0       	ldi	r30, 0x09	; 9
    1ec0:	de 07       	cpc	r29, r30
    1ec2:	29 f4       	brne	.+10     	; 0x1ece <usart_init_rs232+0x262>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    1ec4:	60 e2       	ldi	r22, 0x20	; 32
    1ec6:	84 e0       	ldi	r24, 0x04	; 4
    1ec8:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1ecc:	35 c0       	rjmp	.+106    	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    1ece:	c0 3b       	cpi	r28, 0xB0	; 176
    1ed0:	fa e0       	ldi	r31, 0x0A	; 10
    1ed2:	df 07       	cpc	r29, r31
    1ed4:	29 f4       	brne	.+10     	; 0x1ee0 <usart_init_rs232+0x274>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    1ed6:	60 e2       	ldi	r22, 0x20	; 32
    1ed8:	85 e0       	ldi	r24, 0x05	; 5
    1eda:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1ede:	2c c0       	rjmp	.+88     	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    1ee0:	c0 3b       	cpi	r28, 0xB0	; 176
    1ee2:	8b e0       	ldi	r24, 0x0B	; 11
    1ee4:	d8 07       	cpc	r29, r24
    1ee6:	29 f4       	brne	.+10     	; 0x1ef2 <usart_init_rs232+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    1ee8:	60 e2       	ldi	r22, 0x20	; 32
    1eea:	86 e0       	ldi	r24, 0x06	; 6
    1eec:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1ef0:	23 c0       	rjmp	.+70     	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    1ef2:	c0 38       	cpi	r28, 0x80	; 128
    1ef4:	e4 e0       	ldi	r30, 0x04	; 4
    1ef6:	de 07       	cpc	r29, r30
    1ef8:	29 f4       	brne	.+10     	; 0x1f04 <usart_init_rs232+0x298>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    1efa:	60 e4       	ldi	r22, 0x40	; 64
    1efc:	83 e0       	ldi	r24, 0x03	; 3
    1efe:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1f02:	1a c0       	rjmp	.+52     	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    1f04:	c0 39       	cpi	r28, 0x90	; 144
    1f06:	f4 e0       	ldi	r31, 0x04	; 4
    1f08:	df 07       	cpc	r29, r31
    1f0a:	29 f4       	brne	.+10     	; 0x1f16 <usart_init_rs232+0x2aa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    1f0c:	60 e4       	ldi	r22, 0x40	; 64
    1f0e:	84 e0       	ldi	r24, 0x04	; 4
    1f10:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1f14:	11 c0       	rjmp	.+34     	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    1f16:	c0 3a       	cpi	r28, 0xA0	; 160
    1f18:	84 e0       	ldi	r24, 0x04	; 4
    1f1a:	d8 07       	cpc	r29, r24
    1f1c:	29 f4       	brne	.+10     	; 0x1f28 <usart_init_rs232+0x2bc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    1f1e:	60 e4       	ldi	r22, 0x40	; 64
    1f20:	85 e0       	ldi	r24, 0x05	; 5
    1f22:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    1f26:	08 c0       	rjmp	.+16     	; 0x1f38 <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    1f28:	c0 3b       	cpi	r28, 0xB0	; 176
    1f2a:	e4 e0       	ldi	r30, 0x04	; 4
    1f2c:	de 07       	cpc	r29, r30
    1f2e:	21 f4       	brne	.+8      	; 0x1f38 <usart_init_rs232+0x2cc>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    1f30:	60 e4       	ldi	r22, 0x40	; 64
    1f32:	86 e0       	ldi	r24, 0x06	; 6
    1f34:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    1f38:	8d 81       	ldd	r24, Y+5	; 0x05
    1f3a:	8f 73       	andi	r24, 0x3F	; 63
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    1f3e:	f8 01       	movw	r30, r16
    1f40:	95 81       	ldd	r25, Z+5	; 0x05
    1f42:	84 81       	ldd	r24, Z+4	; 0x04
    1f44:	89 2b       	or	r24, r25
    1f46:	96 81       	ldd	r25, Z+6	; 0x06
    1f48:	91 11       	cpse	r25, r1
    1f4a:	98 e0       	ldi	r25, 0x08	; 8
    1f4c:	89 2b       	or	r24, r25
    1f4e:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    1f50:	f8 01       	movw	r30, r16
    1f52:	40 81       	ld	r20, Z
    1f54:	51 81       	ldd	r21, Z+1	; 0x01
    1f56:	62 81       	ldd	r22, Z+2	; 0x02
    1f58:	73 81       	ldd	r23, Z+3	; 0x03
    1f5a:	00 e0       	ldi	r16, 0x00	; 0
    1f5c:	18 e4       	ldi	r17, 0x48	; 72
    1f5e:	28 ee       	ldi	r18, 0xE8	; 232
    1f60:	31 e0       	ldi	r19, 0x01	; 1
    1f62:	ce 01       	movw	r24, r28
    1f64:	70 dd       	rcall	.-1312   	; 0x1a46 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    1f66:	9c 81       	ldd	r25, Y+4	; 0x04
    1f68:	98 60       	ori	r25, 0x08	; 8
    1f6a:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    1f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6e:	90 61       	ori	r25, 0x10	; 16
    1f70:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	08 95       	ret

00001f7c <Get_altitude>:
	//printf("altitude = %f \n", (float)altitude);
	return altitude;
}*/

//Old, working function. Uses TEMP from pressure sensor calculations. May as well use
float Get_altitude(uint32_t initial, uint32_t pressure){
    1f7c:	4f 92       	push	r4
    1f7e:	5f 92       	push	r5
    1f80:	6f 92       	push	r6
    1f82:	7f 92       	push	r7
    1f84:	8f 92       	push	r8
    1f86:	9f 92       	push	r9
    1f88:	af 92       	push	r10
    1f8a:	bf 92       	push	r11
    1f8c:	cf 92       	push	r12
    1f8e:	df 92       	push	r13
    1f90:	ef 92       	push	r14
    1f92:	ff 92       	push	r15
    1f94:	29 01       	movw	r4, r18
    1f96:	3a 01       	movw	r6, r20
	//printf("Initial Pressure = %lu\n", initial);
	//printf("pressure = %lu \n", pressure);
	//printf("temperature = %li \n", TEMP/100);
	//float altitude = (((287.058 * (((float)(TEMP)/100)+273.15)/9.8))*log((float)initial/get_pressure())*3.28);	Not this one, this one's bad
	float altitude = (pow(((initial/100)/(pressure/100)),(1/5.257))-1)*((TEMP/100)+273.15)/.0065; //This is now right, just gotta use the thermistor
    1f98:	0f 2e       	mov	r0, r31
    1f9a:	f4 e6       	ldi	r31, 0x64	; 100
    1f9c:	cf 2e       	mov	r12, r31
    1f9e:	d1 2c       	mov	r13, r1
    1fa0:	e1 2c       	mov	r14, r1
    1fa2:	f1 2c       	mov	r15, r1
    1fa4:	f0 2d       	mov	r31, r0
    1fa6:	a7 01       	movw	r20, r14
    1fa8:	96 01       	movw	r18, r12
    1faa:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodsi4>
    1fae:	49 01       	movw	r8, r18
    1fb0:	5a 01       	movw	r10, r20
    1fb2:	c3 01       	movw	r24, r6
    1fb4:	b2 01       	movw	r22, r4
    1fb6:	a7 01       	movw	r20, r14
    1fb8:	96 01       	movw	r18, r12
    1fba:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodsi4>
    1fbe:	c5 01       	movw	r24, r10
    1fc0:	b4 01       	movw	r22, r8
    1fc2:	0e 94 a1 1c 	call	0x3942	; 0x3942 <__udivmodsi4>
    1fc6:	ca 01       	movw	r24, r20
    1fc8:	b9 01       	movw	r22, r18
    1fca:	e2 d6       	rcall	.+3524   	; 0x2d90 <__floatunsisf>
    1fcc:	24 eb       	ldi	r18, 0xB4	; 180
    1fce:	39 ec       	ldi	r19, 0xC9	; 201
    1fd0:	42 e4       	ldi	r20, 0x42	; 66
    1fd2:	5e e3       	ldi	r21, 0x3E	; 62
    1fd4:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <pow>
    1fd8:	4b 01       	movw	r8, r22
    1fda:	5c 01       	movw	r10, r24
	//printf("altitude = %f \n", (float)altitude);
	return altitude;
    1fdc:	60 91 ba 20 	lds	r22, 0x20BA	; 0x8020ba <TEMP>
    1fe0:	70 91 bb 20 	lds	r23, 0x20BB	; 0x8020bb <TEMP+0x1>
    1fe4:	80 91 bc 20 	lds	r24, 0x20BC	; 0x8020bc <TEMP+0x2>
    1fe8:	90 91 bd 20 	lds	r25, 0x20BD	; 0x8020bd <TEMP+0x3>
    1fec:	a7 01       	movw	r20, r14
    1fee:	96 01       	movw	r18, r12
    1ff0:	0e 94 c3 1c 	call	0x3986	; 0x3986 <__divmodsi4>
    1ff4:	ca 01       	movw	r24, r20
    1ff6:	b9 01       	movw	r22, r18
    1ff8:	cd d6       	rcall	.+3482   	; 0x2d94 <__floatsisf>
    1ffa:	23 e3       	ldi	r18, 0x33	; 51
    1ffc:	33 e9       	ldi	r19, 0x93	; 147
    1ffe:	48 e8       	ldi	r20, 0x88	; 136
    2000:	53 e4       	ldi	r21, 0x43	; 67
    2002:	c9 d5       	rcall	.+2962   	; 0x2b96 <__addsf3>
    2004:	6b 01       	movw	r12, r22
    2006:	7c 01       	movw	r14, r24
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e8       	ldi	r20, 0x80	; 128
    200e:	5f e3       	ldi	r21, 0x3F	; 63
    2010:	c5 01       	movw	r24, r10
    2012:	b4 01       	movw	r22, r8
    2014:	bf d5       	rcall	.+2942   	; 0x2b94 <__subsf3>
    2016:	9b 01       	movw	r18, r22
    2018:	ac 01       	movw	r20, r24
    201a:	c7 01       	movw	r24, r14
    201c:	b6 01       	movw	r22, r12
    201e:	8b d7       	rcall	.+3862   	; 0x2f36 <__mulsf3>
    2020:	24 ef       	ldi	r18, 0xF4	; 244
    2022:	3d ef       	ldi	r19, 0xFD	; 253
    2024:	44 ed       	ldi	r20, 0xD4	; 212
    2026:	5b e3       	ldi	r21, 0x3B	; 59
    2028:	1a d6       	rcall	.+3124   	; 0x2c5e <__divsf3>
}
    202a:	ff 90       	pop	r15
    202c:	ef 90       	pop	r14
    202e:	df 90       	pop	r13
    2030:	cf 90       	pop	r12
    2032:	bf 90       	pop	r11
    2034:	af 90       	pop	r10
    2036:	9f 90       	pop	r9
    2038:	8f 90       	pop	r8
    203a:	7f 90       	pop	r7
    203c:	6f 90       	pop	r6
    203e:	5f 90       	pop	r5
    2040:	4f 90       	pop	r4
    2042:	08 95       	ret

00002044 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2044:	04 c0       	rjmp	.+8      	; 0x204e <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2046:	61 50       	subi	r22, 0x01	; 1
    2048:	71 09       	sbc	r23, r1
    204a:	81 09       	sbc	r24, r1
    204c:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    204e:	61 15       	cp	r22, r1
    2050:	71 05       	cpc	r23, r1
    2052:	81 05       	cpc	r24, r1
    2054:	91 05       	cpc	r25, r1
    2056:	b9 f7       	brne	.-18     	; 0x2046 <__portable_avr_delay_cycles+0x2>
    2058:	08 95       	ret

0000205a <SPI_init>:
uint16_t c5;
uint16_t c6;


void SPI_init(void){
	PORTC.DIRSET = 0b10110000;
    205a:	e0 e4       	ldi	r30, 0x40	; 64
    205c:	f6 e0       	ldi	r31, 0x06	; 6
    205e:	80 eb       	ldi	r24, 0xB0	; 176
    2060:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = 0b01000000;
    2062:	90 e4       	ldi	r25, 0x40	; 64
    2064:	92 83       	std	Z+2, r25	; 0x02
	PORTC.OUTSET = 0b10110000;
    2066:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0b01010011;
    2068:	83 e5       	ldi	r24, 0x53	; 83
    206a:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    206e:	08 95       	ret

00002070 <SPI_write>:
}

void SPI_write(uint8_t data){
	SPIC.DATA = data;
    2070:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
    2074:	e0 ec       	ldi	r30, 0xC0	; 192
    2076:	f8 e0       	ldi	r31, 0x08	; 8
    2078:	82 81       	ldd	r24, Z+2	; 0x02
    207a:	88 23       	and	r24, r24
    207c:	ec f7       	brge	.-6      	; 0x2078 <SPI_write+0x8>
}
    207e:	08 95       	ret

00002080 <spi_read>:

uint8_t spi_read (void){
	SPI_write(0xFF);
    2080:	8f ef       	ldi	r24, 0xFF	; 255
    2082:	f6 df       	rcall	.-20     	; 0x2070 <SPI_write>
	return SPIC.DATA;
    2084:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    2088:	08 95       	ret

0000208a <prom_read>:
	//printf("c5: %u \n", c5);
	c6 = prom_read(0xAC);
	//printf("c6: %u \n", c6);
}

uint16_t prom_read(uint8_t command){
    208a:	ff 92       	push	r15
    208c:	0f 93       	push	r16
    208e:	1f 93       	push	r17
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
	uint16_t data;
	PORTC.OUTCLR = 0b00010000;
    2094:	00 e4       	ldi	r16, 0x40	; 64
    2096:	16 e0       	ldi	r17, 0x06	; 6
    2098:	68 94       	set
    209a:	ff 24       	eor	r15, r15
    209c:	f4 f8       	bld	r15, 4
    209e:	f8 01       	movw	r30, r16
	SPI_write(command);
	data = ((uint16_t)spi_read())<<8;	//Bitshifting
    20a0:	f6 82       	std	Z+6, r15	; 0x06
    20a2:	e6 df       	rcall	.-52     	; 0x2070 <SPI_write>
    20a4:	ed df       	rcall	.-38     	; 0x2080 <spi_read>
    20a6:	c8 2f       	mov	r28, r24
    20a8:	d0 e0       	ldi	r29, 0x00	; 0
	data += spi_read();
    20aa:	dc 2f       	mov	r29, r28
    20ac:	cc 27       	eor	r28, r28
    20ae:	e8 df       	rcall	.-48     	; 0x2080 <spi_read>
    20b0:	c8 0f       	add	r28, r24
	PORTC.OUTSET = 0b00010000;
    20b2:	d1 1d       	adc	r29, r1
    20b4:	f8 01       	movw	r30, r16
	delay_ms(1);
    20b6:	f5 82       	std	Z+5, r15	; 0x05
    20b8:	66 ed       	ldi	r22, 0xD6	; 214
    20ba:	74 e1       	ldi	r23, 0x14	; 20
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	90 e0       	ldi	r25, 0x00	; 0
	//printf("data: %lu \n", data);
	return data;
}
    20c0:	c1 df       	rcall	.-126    	; 0x2044 <__portable_avr_delay_cycles>
    20c2:	ce 01       	movw	r24, r28
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	ff 90       	pop	r15
    20ce:	08 95       	ret

000020d0 <ms5607_init>:
uint8_t spi_read (void){
	SPI_write(0xFF);
	return SPIC.DATA;
}

void ms5607_init(void){
    20d0:	1f 93       	push	r17
    20d2:	cf 93       	push	r28
    20d4:	df 93       	push	r29
	PORTC.OUTCLR = 0b00010000;
    20d6:	c0 e4       	ldi	r28, 0x40	; 64
    20d8:	d6 e0       	ldi	r29, 0x06	; 6
    20da:	10 e1       	ldi	r17, 0x10	; 16
    20dc:	1e 83       	std	Y+6, r17	; 0x06
	SPI_write(0x1E);
    20de:	8e e1       	ldi	r24, 0x1E	; 30
    20e0:	c7 df       	rcall	.-114    	; 0x2070 <SPI_write>
	PORTC.OUTSET = 0b00010000;
    20e2:	1d 83       	std	Y+5, r17	; 0x05
	delay_ms(10);
    20e4:	66 e5       	ldi	r22, 0x56	; 86
    20e6:	70 ed       	ldi	r23, 0xD0	; 208
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	90 e0       	ldi	r25, 0x00	; 0
	c1 = prom_read(0xA2);
    20ec:	ab df       	rcall	.-170    	; 0x2044 <__portable_avr_delay_cycles>
    20ee:	82 ea       	ldi	r24, 0xA2	; 162
    20f0:	cc df       	rcall	.-104    	; 0x208a <prom_read>
    20f2:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <c1>
    20f6:	90 93 c7 20 	sts	0x20C7, r25	; 0x8020c7 <c1+0x1>
	//printf("c1: %u \n", c1);
	c2 = prom_read(0xA4);
    20fa:	84 ea       	ldi	r24, 0xA4	; 164
    20fc:	c6 df       	rcall	.-116    	; 0x208a <prom_read>
    20fe:	80 93 c2 20 	sts	0x20C2, r24	; 0x8020c2 <c2>
    2102:	90 93 c3 20 	sts	0x20C3, r25	; 0x8020c3 <c2+0x1>
	//printf("c2: %u \n", c2);
	c3 = prom_read(0xA6);
    2106:	86 ea       	ldi	r24, 0xA6	; 166
    2108:	c0 df       	rcall	.-128    	; 0x208a <prom_read>
    210a:	80 93 c8 20 	sts	0x20C8, r24	; 0x8020c8 <c3>
    210e:	90 93 c9 20 	sts	0x20C9, r25	; 0x8020c9 <c3+0x1>
	//printf("c3: %u \n", c3);
	c4 = prom_read(0xA8);
    2112:	88 ea       	ldi	r24, 0xA8	; 168
    2114:	ba df       	rcall	.-140    	; 0x208a <prom_read>
    2116:	80 93 c0 20 	sts	0x20C0, r24	; 0x8020c0 <c4>
    211a:	90 93 c1 20 	sts	0x20C1, r25	; 0x8020c1 <c4+0x1>
	//printf("c4: %u \n", c4);
	c5 = prom_read(0xAA);
    211e:	8a ea       	ldi	r24, 0xAA	; 170
    2120:	b4 df       	rcall	.-152    	; 0x208a <prom_read>
    2122:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <c5>
    2126:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <c5+0x1>
	//printf("c5: %u \n", c5);
	c6 = prom_read(0xAC);
    212a:	8c ea       	ldi	r24, 0xAC	; 172
    212c:	ae df       	rcall	.-164    	; 0x208a <prom_read>
    212e:	80 93 be 20 	sts	0x20BE, r24	; 0x8020be <c6>
    2132:	90 93 bf 20 	sts	0x20BF, r25	; 0x8020bf <c6+0x1>
	//printf("c6: %u \n", c6);
}
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	1f 91       	pop	r17
    213c:	08 95       	ret

0000213e <data_read>:
	delay_ms(1);
	//printf("data: %lu \n", data);
	return data;
}

uint32_t data_read(uint8_t command){
    213e:	8f 92       	push	r8
    2140:	9f 92       	push	r9
    2142:	af 92       	push	r10
    2144:	bf 92       	push	r11
    2146:	cf 92       	push	r12
    2148:	df 92       	push	r13
    214a:	ef 92       	push	r14
    214c:	ff 92       	push	r15
    214e:	1f 93       	push	r17
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
	uint32_t data;
	PORTC.OUTCLR = 0b00010000;
    2154:	c0 e4       	ldi	r28, 0x40	; 64
    2156:	d6 e0       	ldi	r29, 0x06	; 6
    2158:	10 e1       	ldi	r17, 0x10	; 16
	SPI_write(command);
    215a:	1e 83       	std	Y+6, r17	; 0x06
	PORTC.OUTSET = 0b00010000;
    215c:	89 df       	rcall	.-238    	; 0x2070 <SPI_write>
	delay_ms(9);
    215e:	1d 83       	std	Y+5, r17	; 0x05
    2160:	61 e8       	ldi	r22, 0x81	; 129
    2162:	7b eb       	ldi	r23, 0xBB	; 187
    2164:	80 e0       	ldi	r24, 0x00	; 0
	PORTC.OUTCLR = 0b00010000;
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	6d df       	rcall	.-294    	; 0x2044 <__portable_avr_delay_cycles>
    216a:	1e 83       	std	Y+6, r17	; 0x06
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	80 df       	rcall	.-256    	; 0x2070 <SPI_write>
    2170:	87 df       	rcall	.-242    	; 0x2080 <spi_read>
    2172:	c8 2e       	mov	r12, r24
    2174:	d1 2c       	mov	r13, r1
    2176:	e1 2c       	mov	r14, r1
    2178:	f1 2c       	mov	r15, r1
    217a:	56 01       	movw	r10, r12
    217c:	99 24       	eor	r9, r9
    217e:	88 24       	eor	r8, r8
    2180:	7f df       	rcall	.-258    	; 0x2080 <spi_read>
    2182:	c8 2e       	mov	r12, r24
    2184:	d1 2c       	mov	r13, r1
    2186:	e1 2c       	mov	r14, r1
    2188:	f1 2c       	mov	r15, r1
    218a:	fe 2c       	mov	r15, r14
    218c:	ed 2c       	mov	r14, r13
    218e:	dc 2c       	mov	r13, r12
    2190:	cc 24       	eor	r12, r12
    2192:	c8 0c       	add	r12, r8
    2194:	d9 1c       	adc	r13, r9
    2196:	ea 1c       	adc	r14, r10
    2198:	fb 1c       	adc	r15, r11
    219a:	72 df       	rcall	.-284    	; 0x2080 <spi_read>
    219c:	1d 83       	std	Y+5, r17	; 0x05
    219e:	a7 01       	movw	r20, r14
    21a0:	96 01       	movw	r18, r12
    21a2:	28 0f       	add	r18, r24
    21a4:	31 1d       	adc	r19, r1
    21a6:	41 1d       	adc	r20, r1
    21a8:	51 1d       	adc	r21, r1
    21aa:	ca 01       	movw	r24, r20
    21ac:	b9 01       	movw	r22, r18
    21ae:	df 91       	pop	r29
    21b0:	cf 91       	pop	r28
    21b2:	1f 91       	pop	r17
    21b4:	ff 90       	pop	r15
    21b6:	ef 90       	pop	r14
    21b8:	df 90       	pop	r13
    21ba:	cf 90       	pop	r12
    21bc:	bf 90       	pop	r11
    21be:	af 90       	pop	r10
    21c0:	9f 90       	pop	r9
    21c2:	8f 90       	pop	r8
    21c4:	08 95       	ret

000021c6 <get_pressure>:
    21c6:	2f 92       	push	r2
    21c8:	3f 92       	push	r3
    21ca:	4f 92       	push	r4
    21cc:	5f 92       	push	r5
    21ce:	6f 92       	push	r6
    21d0:	7f 92       	push	r7
    21d2:	8f 92       	push	r8
    21d4:	9f 92       	push	r9
    21d6:	af 92       	push	r10
    21d8:	bf 92       	push	r11
    21da:	cf 92       	push	r12
    21dc:	df 92       	push	r13
    21de:	ef 92       	push	r14
    21e0:	ff 92       	push	r15
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	61 97       	sbiw	r28, 0x11	; 17
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	88 e4       	ldi	r24, 0x48	; 72
    21f6:	a3 df       	rcall	.-186    	; 0x213e <data_read>
    21f8:	6d 83       	std	Y+5, r22	; 0x05
    21fa:	7e 83       	std	Y+6, r23	; 0x06
    21fc:	8f 83       	std	Y+7, r24	; 0x07
    21fe:	98 87       	std	Y+8, r25	; 0x08
    2200:	88 e5       	ldi	r24, 0x58	; 88
    2202:	9d df       	rcall	.-198    	; 0x213e <data_read>
    2204:	20 91 c4 20 	lds	r18, 0x20C4	; 0x8020c4 <c5>
    2208:	30 91 c5 20 	lds	r19, 0x20C5	; 0x8020c5 <c5+0x1>
    220c:	89 01       	movw	r16, r18
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	32 2f       	mov	r19, r18
    2214:	21 2f       	mov	r18, r17
    2216:	10 2f       	mov	r17, r16
    2218:	00 27       	eor	r16, r16
    221a:	6b 01       	movw	r12, r22
    221c:	7c 01       	movw	r14, r24
    221e:	c0 1a       	sub	r12, r16
    2220:	d1 0a       	sbc	r13, r17
    2222:	e2 0a       	sbc	r14, r18
    2224:	f3 0a       	sbc	r15, r19
    2226:	c9 82       	std	Y+1, r12	; 0x01
    2228:	da 82       	std	Y+2, r13	; 0x02
    222a:	eb 82       	std	Y+3, r14	; 0x03
    222c:	fc 82       	std	Y+4, r15	; 0x04
    222e:	20 90 be 20 	lds	r2, 0x20BE	; 0x8020be <c6>
    2232:	30 90 bf 20 	lds	r3, 0x20BF	; 0x8020bf <c6+0x1>
    2236:	d7 01       	movw	r26, r14
    2238:	c6 01       	movw	r24, r12
    223a:	bb 0f       	add	r27, r27
    223c:	88 0b       	sbc	r24, r24
    223e:	98 2f       	mov	r25, r24
    2240:	dc 01       	movw	r26, r24
    2242:	a9 80       	ldd	r10, Y+1	; 0x01
    2244:	ba 80       	ldd	r11, Y+2	; 0x02
    2246:	cb 80       	ldd	r12, Y+3	; 0x03
    2248:	dc 80       	ldd	r13, Y+4	; 0x04
    224a:	e8 2e       	mov	r14, r24
    224c:	f8 2e       	mov	r15, r24
    224e:	08 2f       	mov	r16, r24
    2250:	18 2f       	mov	r17, r24
    2252:	22 2d       	mov	r18, r2
    2254:	33 2d       	mov	r19, r3
    2256:	40 e0       	ldi	r20, 0x00	; 0
    2258:	50 e0       	ldi	r21, 0x00	; 0
    225a:	60 e0       	ldi	r22, 0x00	; 0
    225c:	70 e0       	ldi	r23, 0x00	; 0
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__muldi3>
    2266:	89 8b       	std	Y+17, r24	; 0x11
    2268:	b2 2f       	mov	r27, r18
    226a:	f3 2f       	mov	r31, r19
    226c:	e4 2f       	mov	r30, r20
    226e:	95 2e       	mov	r9, r21
    2270:	86 2e       	mov	r8, r22
    2272:	77 2e       	mov	r7, r23
    2274:	a8 2e       	mov	r10, r24
    2276:	b9 2e       	mov	r11, r25
    2278:	a0 e0       	ldi	r26, 0x00	; 0
    227a:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <__cmpdi2_s8>
    227e:	84 f4       	brge	.+32     	; 0x22a0 <get_pressure+0xda>
    2280:	21 50       	subi	r18, 0x01	; 1
    2282:	31 09       	sbc	r19, r1
    2284:	40 48       	sbci	r20, 0x80	; 128
    2286:	5f 4f       	sbci	r21, 0xFF	; 255
    2288:	6f 4f       	sbci	r22, 0xFF	; 255
    228a:	7f 4f       	sbci	r23, 0xFF	; 255
    228c:	8f 4f       	sbci	r24, 0xFF	; 255
    228e:	9f 4f       	sbci	r25, 0xFF	; 255
    2290:	b2 2f       	mov	r27, r18
    2292:	f3 2f       	mov	r31, r19
    2294:	e4 2f       	mov	r30, r20
    2296:	95 2e       	mov	r9, r21
    2298:	86 2e       	mov	r8, r22
    229a:	77 2e       	mov	r7, r23
    229c:	a8 2e       	mov	r10, r24
    229e:	b9 2e       	mov	r11, r25
    22a0:	2b 2f       	mov	r18, r27
    22a2:	3f 2f       	mov	r19, r31
    22a4:	4e 2f       	mov	r20, r30
    22a6:	59 2d       	mov	r21, r9
    22a8:	68 2d       	mov	r22, r8
    22aa:	77 2d       	mov	r23, r7
    22ac:	8a 2d       	mov	r24, r10
    22ae:	9b 2d       	mov	r25, r11
    22b0:	07 e1       	ldi	r16, 0x17	; 23
    22b2:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__ashrdi3>
    22b6:	82 2e       	mov	r8, r18
    22b8:	93 2e       	mov	r9, r19
    22ba:	00 e3       	ldi	r16, 0x30	; 48
    22bc:	80 1a       	sub	r8, r16
    22be:	08 ef       	ldi	r16, 0xF8	; 248
    22c0:	90 0a       	sbc	r9, r16
    22c2:	09 2c       	mov	r0, r9
    22c4:	00 0c       	add	r0, r0
    22c6:	aa 08       	sbc	r10, r10
    22c8:	bb 08       	sbc	r11, r11
    22ca:	80 92 ba 20 	sts	0x20BA, r8	; 0x8020ba <TEMP>
    22ce:	90 92 bb 20 	sts	0x20BB, r9	; 0x8020bb <TEMP+0x1>
    22d2:	a0 92 bc 20 	sts	0x20BC, r10	; 0x8020bc <TEMP+0x2>
    22d6:	b0 92 bd 20 	sts	0x20BD, r11	; 0x8020bd <TEMP+0x3>
    22da:	a0 91 c8 20 	lds	r26, 0x20C8	; 0x8020c8 <c3>
    22de:	b0 91 c9 20 	lds	r27, 0x20C9	; 0x8020c9 <c3+0x1>
    22e2:	29 81       	ldd	r18, Y+1	; 0x01
    22e4:	3a 81       	ldd	r19, Y+2	; 0x02
    22e6:	4b 81       	ldd	r20, Y+3	; 0x03
    22e8:	5c 81       	ldd	r21, Y+4	; 0x04
    22ea:	0e 94 df 1c 	call	0x39be	; 0x39be <__muluhisi3>
    22ee:	4b 01       	movw	r8, r22
    22f0:	5c 01       	movw	r10, r24
    22f2:	99 23       	and	r25, r25
    22f4:	2c f4       	brge	.+10     	; 0x2300 <get_pressure+0x13a>
    22f6:	1f e7       	ldi	r17, 0x7F	; 127
    22f8:	81 0e       	add	r8, r17
    22fa:	91 1c       	adc	r9, r1
    22fc:	a1 1c       	adc	r10, r1
    22fe:	b1 1c       	adc	r11, r1
    2300:	24 01       	movw	r4, r8
    2302:	35 01       	movw	r6, r10
    2304:	68 94       	set
    2306:	16 f8       	bld	r1, 6
    2308:	75 94       	asr	r7
    230a:	67 94       	ror	r6
    230c:	57 94       	ror	r5
    230e:	47 94       	ror	r4
    2310:	16 94       	lsr	r1
    2312:	d1 f7       	brne	.-12     	; 0x2308 <get_pressure+0x142>
    2314:	bb 0c       	add	r11, r11
    2316:	88 08       	sbc	r8, r8
    2318:	98 2c       	mov	r9, r8
    231a:	54 01       	movw	r10, r8
    231c:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <c1>
    2320:	90 91 c7 20 	lds	r25, 0x20C7	; 0x8020c7 <c1+0x1>
    2324:	6c 01       	movw	r12, r24
    2326:	e1 2c       	mov	r14, r1
    2328:	f1 2c       	mov	r15, r1
    232a:	00 e0       	ldi	r16, 0x00	; 0
    232c:	10 e0       	ldi	r17, 0x00	; 0
    232e:	98 01       	movw	r18, r16
    2330:	89 87       	std	Y+9, r24	; 0x09
    2332:	da 86       	std	Y+10, r13	; 0x0a
    2334:	eb 86       	std	Y+11, r14	; 0x0b
    2336:	fc 86       	std	Y+12, r15	; 0x0c
    2338:	0d 87       	std	Y+13, r16	; 0x0d
    233a:	1e 87       	std	Y+14, r17	; 0x0e
    233c:	2f 87       	std	Y+15, r18	; 0x0f
    233e:	38 8b       	std	Y+16, r19	; 0x10
    2340:	28 2f       	mov	r18, r24
    2342:	3d 2d       	mov	r19, r13
    2344:	40 e0       	ldi	r20, 0x00	; 0
    2346:	50 e0       	ldi	r21, 0x00	; 0
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	70 e0       	ldi	r23, 0x00	; 0
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	00 e1       	ldi	r16, 0x10	; 16
    2352:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__ashldi3>
    2356:	f2 2f       	mov	r31, r18
    2358:	e3 2f       	mov	r30, r19
    235a:	c4 2e       	mov	r12, r20
    235c:	d5 2e       	mov	r13, r21
    235e:	e6 2e       	mov	r14, r22
    2360:	f7 2e       	mov	r15, r23
    2362:	08 2f       	mov	r16, r24
    2364:	19 2f       	mov	r17, r25
    2366:	24 2d       	mov	r18, r4
    2368:	35 2d       	mov	r19, r5
    236a:	46 2d       	mov	r20, r6
    236c:	57 2d       	mov	r21, r7
    236e:	68 2d       	mov	r22, r8
    2370:	78 2d       	mov	r23, r8
    2372:	88 2d       	mov	r24, r8
    2374:	98 2d       	mov	r25, r8
    2376:	af 2e       	mov	r10, r31
    2378:	be 2e       	mov	r11, r30
    237a:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__adddi3>
    237e:	ed 80       	ldd	r14, Y+5	; 0x05
    2380:	fe 80       	ldd	r15, Y+6	; 0x06
    2382:	0f 81       	ldd	r16, Y+7	; 0x07
    2384:	18 85       	ldd	r17, Y+8	; 0x08
    2386:	17 01       	movw	r2, r14
    2388:	28 01       	movw	r4, r16
    238a:	ae 2c       	mov	r10, r14
    238c:	b3 2c       	mov	r11, r3
    238e:	c4 2c       	mov	r12, r4
    2390:	d5 2c       	mov	r13, r5
    2392:	e1 2c       	mov	r14, r1
    2394:	f1 2c       	mov	r15, r1
    2396:	00 e0       	ldi	r16, 0x00	; 0
    2398:	10 e0       	ldi	r17, 0x00	; 0
    239a:	0e 94 e9 1c 	call	0x39d2	; 0x39d2 <__muldi3>
    239e:	12 2f       	mov	r17, r18
    23a0:	39 87       	std	Y+9, r19	; 0x09
    23a2:	4d 83       	std	Y+5, r20	; 0x05
    23a4:	b5 2f       	mov	r27, r21
    23a6:	f6 2f       	mov	r31, r22
    23a8:	e7 2f       	mov	r30, r23
    23aa:	78 2e       	mov	r7, r24
    23ac:	89 2e       	mov	r8, r25
    23ae:	a0 e0       	ldi	r26, 0x00	; 0
    23b0:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <__cmpdi2_s8>
    23b4:	84 f4       	brge	.+32     	; 0x23d6 <get_pressure+0x210>
    23b6:	21 50       	subi	r18, 0x01	; 1
    23b8:	31 09       	sbc	r19, r1
    23ba:	40 4e       	sbci	r20, 0xE0	; 224
    23bc:	5f 4f       	sbci	r21, 0xFF	; 255
    23be:	6f 4f       	sbci	r22, 0xFF	; 255
    23c0:	7f 4f       	sbci	r23, 0xFF	; 255
    23c2:	8f 4f       	sbci	r24, 0xFF	; 255
    23c4:	9f 4f       	sbci	r25, 0xFF	; 255
    23c6:	12 2f       	mov	r17, r18
    23c8:	39 87       	std	Y+9, r19	; 0x09
    23ca:	4d 83       	std	Y+5, r20	; 0x05
    23cc:	b5 2f       	mov	r27, r21
    23ce:	f6 2f       	mov	r31, r22
    23d0:	e7 2f       	mov	r30, r23
    23d2:	78 2e       	mov	r7, r24
    23d4:	89 2e       	mov	r8, r25
    23d6:	21 2f       	mov	r18, r17
    23d8:	39 85       	ldd	r19, Y+9	; 0x09
    23da:	4d 81       	ldd	r20, Y+5	; 0x05
    23dc:	5b 2f       	mov	r21, r27
    23de:	6f 2f       	mov	r22, r31
    23e0:	7e 2f       	mov	r23, r30
    23e2:	87 2d       	mov	r24, r7
    23e4:	98 2d       	mov	r25, r8
    23e6:	05 e1       	ldi	r16, 0x15	; 21
    23e8:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__ashrdi3>
    23ec:	52 2e       	mov	r5, r18
    23ee:	63 2e       	mov	r6, r19
    23f0:	74 2e       	mov	r7, r20
    23f2:	59 8b       	std	Y+17, r21	; 0x11
    23f4:	69 87       	std	Y+9, r22	; 0x09
    23f6:	f7 2f       	mov	r31, r23
    23f8:	e8 2f       	mov	r30, r24
    23fa:	49 2e       	mov	r4, r25
    23fc:	a0 91 c0 20 	lds	r26, 0x20C0	; 0x8020c0 <c4>
    2400:	b0 91 c1 20 	lds	r27, 0x20C1	; 0x8020c1 <c4+0x1>
    2404:	29 81       	ldd	r18, Y+1	; 0x01
    2406:	3a 81       	ldd	r19, Y+2	; 0x02
    2408:	4b 81       	ldd	r20, Y+3	; 0x03
    240a:	5c 81       	ldd	r21, Y+4	; 0x04
    240c:	0e 94 df 1c 	call	0x39be	; 0x39be <__muluhisi3>
    2410:	4b 01       	movw	r8, r22
    2412:	5c 01       	movw	r10, r24
    2414:	99 23       	and	r25, r25
    2416:	2c f4       	brge	.+10     	; 0x2422 <get_pressure+0x25c>
    2418:	0f e3       	ldi	r16, 0x3F	; 63
    241a:	80 0e       	add	r8, r16
    241c:	91 1c       	adc	r9, r1
    241e:	a1 1c       	adc	r10, r1
    2420:	b1 1c       	adc	r11, r1
    2422:	75 01       	movw	r14, r10
    2424:	64 01       	movw	r12, r8
    2426:	68 94       	set
    2428:	15 f8       	bld	r1, 5
    242a:	f5 94       	asr	r15
    242c:	e7 94       	ror	r14
    242e:	d7 94       	ror	r13
    2430:	c7 94       	ror	r12
    2432:	16 94       	lsr	r1
    2434:	d1 f7       	brne	.-12     	; 0x242a <get_pressure+0x264>
    2436:	bb 0c       	add	r11, r11
    2438:	88 08       	sbc	r8, r8
    243a:	98 2c       	mov	r9, r8
    243c:	54 01       	movw	r10, r8
    243e:	20 91 c2 20 	lds	r18, 0x20C2	; 0x8020c2 <c2>
    2442:	30 91 c3 20 	lds	r19, 0x20C3	; 0x8020c3 <c2+0x1>
    2446:	a9 01       	movw	r20, r18
    2448:	35 2f       	mov	r19, r21
    244a:	40 e0       	ldi	r20, 0x00	; 0
    244c:	50 e0       	ldi	r21, 0x00	; 0
    244e:	60 e0       	ldi	r22, 0x00	; 0
    2450:	70 e0       	ldi	r23, 0x00	; 0
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	01 e1       	ldi	r16, 0x11	; 17
    2458:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <__ashldi3>
    245c:	22 2e       	mov	r2, r18
    245e:	33 2e       	mov	r3, r19
    2460:	49 83       	std	Y+1, r20	; 0x01
    2462:	5d 83       	std	Y+5, r21	; 0x05
    2464:	b6 2f       	mov	r27, r22
    2466:	a7 2f       	mov	r26, r23
    2468:	08 2f       	mov	r16, r24
    246a:	19 2f       	mov	r17, r25
    246c:	2c 2d       	mov	r18, r12
    246e:	3d 2d       	mov	r19, r13
    2470:	4e 2d       	mov	r20, r14
    2472:	5f 2d       	mov	r21, r15
    2474:	68 2d       	mov	r22, r8
    2476:	78 2d       	mov	r23, r8
    2478:	88 2d       	mov	r24, r8
    247a:	98 2d       	mov	r25, r8
    247c:	a2 2c       	mov	r10, r2
    247e:	b3 2c       	mov	r11, r3
    2480:	c9 80       	ldd	r12, Y+1	; 0x01
    2482:	dd 80       	ldd	r13, Y+5	; 0x05
    2484:	eb 2e       	mov	r14, r27
    2486:	fa 2e       	mov	r15, r26
    2488:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <__adddi3>
    248c:	a2 2e       	mov	r10, r18
    248e:	b3 2e       	mov	r11, r19
    2490:	c4 2e       	mov	r12, r20
    2492:	d5 2e       	mov	r13, r21
    2494:	e6 2e       	mov	r14, r22
    2496:	f7 2e       	mov	r15, r23
    2498:	08 2f       	mov	r16, r24
    249a:	19 2f       	mov	r17, r25
    249c:	25 2d       	mov	r18, r5
    249e:	36 2d       	mov	r19, r6
    24a0:	47 2d       	mov	r20, r7
    24a2:	59 89       	ldd	r21, Y+17	; 0x11
    24a4:	69 85       	ldd	r22, Y+9	; 0x09
    24a6:	7f 2f       	mov	r23, r31
    24a8:	8e 2f       	mov	r24, r30
    24aa:	94 2d       	mov	r25, r4
    24ac:	0e 94 7a 1d 	call	0x3af4	; 0x3af4 <__subdi3>
    24b0:	12 2f       	mov	r17, r18
    24b2:	3d 83       	std	Y+5, r19	; 0x05
    24b4:	49 83       	std	Y+1, r20	; 0x01
    24b6:	b5 2f       	mov	r27, r21
    24b8:	f6 2f       	mov	r31, r22
    24ba:	e7 2f       	mov	r30, r23
    24bc:	78 2e       	mov	r7, r24
    24be:	89 2e       	mov	r8, r25
    24c0:	a0 e0       	ldi	r26, 0x00	; 0
    24c2:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <__cmpdi2_s8>
    24c6:	84 f4       	brge	.+32     	; 0x24e8 <get_pressure+0x322>
    24c8:	21 50       	subi	r18, 0x01	; 1
    24ca:	30 48       	sbci	r19, 0x80	; 128
    24cc:	4f 4f       	sbci	r20, 0xFF	; 255
    24ce:	5f 4f       	sbci	r21, 0xFF	; 255
    24d0:	6f 4f       	sbci	r22, 0xFF	; 255
    24d2:	7f 4f       	sbci	r23, 0xFF	; 255
    24d4:	8f 4f       	sbci	r24, 0xFF	; 255
    24d6:	9f 4f       	sbci	r25, 0xFF	; 255
    24d8:	12 2f       	mov	r17, r18
    24da:	3d 83       	std	Y+5, r19	; 0x05
    24dc:	49 83       	std	Y+1, r20	; 0x01
    24de:	b5 2f       	mov	r27, r21
    24e0:	f6 2f       	mov	r31, r22
    24e2:	e7 2f       	mov	r30, r23
    24e4:	78 2e       	mov	r7, r24
    24e6:	89 2e       	mov	r8, r25
    24e8:	21 2f       	mov	r18, r17
    24ea:	3d 81       	ldd	r19, Y+5	; 0x05
    24ec:	49 81       	ldd	r20, Y+1	; 0x01
    24ee:	5b 2f       	mov	r21, r27
    24f0:	6f 2f       	mov	r22, r31
    24f2:	7e 2f       	mov	r23, r30
    24f4:	87 2d       	mov	r24, r7
    24f6:	98 2d       	mov	r25, r8
    24f8:	0f e0       	ldi	r16, 0x0F	; 15
    24fa:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__ashrdi3>
    24fe:	62 2f       	mov	r22, r18
    2500:	73 2f       	mov	r23, r19
    2502:	84 2f       	mov	r24, r20
    2504:	95 2f       	mov	r25, r21
    2506:	61 96       	adiw	r28, 0x11	; 17
    2508:	cd bf       	out	0x3d, r28	; 61
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	df 91       	pop	r29
    250e:	cf 91       	pop	r28
    2510:	1f 91       	pop	r17
    2512:	0f 91       	pop	r16
    2514:	ff 90       	pop	r15
    2516:	ef 90       	pop	r14
    2518:	df 90       	pop	r13
    251a:	cf 90       	pop	r12
    251c:	bf 90       	pop	r11
    251e:	af 90       	pop	r10
    2520:	9f 90       	pop	r9
    2522:	8f 90       	pop	r8
    2524:	7f 90       	pop	r7
    2526:	6f 90       	pop	r6
    2528:	5f 90       	pop	r5
    252a:	4f 90       	pop	r4
    252c:	3f 90       	pop	r3
    252e:	2f 90       	pop	r2
    2530:	08 95       	ret

00002532 <adc_init>:
#include <asf.h>
#include <math.h>
#include "thermistor.h"


void adc_init(void){	//This is for PA6... mostly
    2532:	ff 92       	push	r15
    2534:	0f 93       	push	r16
    2536:	1f 93       	push	r17
    2538:	cf 93       	push	r28
    253a:	df 93       	push	r29
	PORTA.DIRCLR = 0b01000000;
    253c:	e0 e0       	ldi	r30, 0x00	; 0
    253e:	f6 e0       	ldi	r31, 0x06	; 6
    2540:	68 94       	set
    2542:	ff 24       	eor	r15, r15
    2544:	f6 f8       	bld	r15, 6
    2546:	f2 82       	std	Z+2, r15	; 0x02
	PORTA.DIR = 0b10111111;
    2548:	8f eb       	ldi	r24, 0xBF	; 191
    254a:	80 83       	st	Z, r24
	ADCA.CTRLA = 0b01000000;
    254c:	c0 e0       	ldi	r28, 0x00	; 0
    254e:	d2 e0       	ldi	r29, 0x02	; 2
    2550:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000;
    2552:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000;
    2554:	80 e1       	ldi	r24, 0x10	; 16
    2556:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101;
    2558:	85 e0       	ldi	r24, 0x05	; 5
    255a:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    255c:	61 e2       	ldi	r22, 0x21	; 33
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	82 e0       	ldi	r24, 0x02	; 2
    2562:	0e 94 4b 04 	call	0x896	; 0x896 <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    2566:	08 2f       	mov	r16, r24
    2568:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    256a:	10 2f       	mov	r17, r16
    256c:	00 27       	eor	r16, r16
    256e:	60 e2       	ldi	r22, 0x20	; 32
    2570:	70 e0       	ldi	r23, 0x00	; 0
    2572:	82 e0       	ldi	r24, 0x02	; 2
    2574:	0e 94 4b 04 	call	0x896	; 0x896 <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    2578:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    257a:	0c 87       	std	Y+12, r16	; 0x0c
    257c:	1d 87       	std	Y+13, r17	; 0x0d
	
	ADCA.CH0.CTRL = 0b01000000;
    257e:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000000;
    2580:	19 a2       	std	Y+33, r1	; 0x21
}
    2582:	df 91       	pop	r29
    2584:	cf 91       	pop	r28
    2586:	1f 91       	pop	r17
    2588:	0f 91       	pop	r16
    258a:	ff 90       	pop	r15
    258c:	08 95       	ret

0000258e <getVoltage>:


float getVoltage(void){
	ADCA.CH0.CTRL  |= 0b10000000;
    258e:	e0 e0       	ldi	r30, 0x00	; 0
    2590:	f2 e0       	ldi	r31, 0x02	; 2
    2592:	80 a1       	ldd	r24, Z+32	; 0x20
    2594:	80 68       	ori	r24, 0x80	; 128
    2596:	80 a3       	std	Z+32, r24	; 0x20
	//printf("one");
	//while(ADCA.CH0.INTFLAGS == 0);
	//printf("two");
	ADCA.CH0.INTFLAGS = 0;
    2598:	13 a2       	std	Z+35, r1	; 0x23
	//printf("three");
	uint16_t adcReading = ADCA.CH0.RES;
    259a:	64 a1       	ldd	r22, Z+36	; 0x24
    259c:	75 a1       	ldd	r23, Z+37	; 0x25
	//printf("ADC reading = %u\n", adcReading);
	float voltage = 0.0004899 * (float)(adcReading) - 0.0856326;	//We have to find these numbers by applying differing voltage, printing ADC readings, and solve equation
	//printf("voltage: %f \n", voltage);
	return voltage;
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	f6 d3       	rcall	.+2028   	; 0x2d90 <__floatunsisf>
    25a4:	22 ea       	ldi	r18, 0xA2	; 162
    25a6:	3c e6       	ldi	r19, 0x6C	; 108
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	5a e3       	ldi	r21, 0x3A	; 58
    25ac:	c4 d4       	rcall	.+2440   	; 0x2f36 <__mulsf3>
    25ae:	25 e2       	ldi	r18, 0x25	; 37
    25b0:	30 e6       	ldi	r19, 0x60	; 96
    25b2:	4f ea       	ldi	r20, 0xAF	; 175
    25b4:	5d e3       	ldi	r21, 0x3D	; 61
	
}
    25b6:	ee c2       	rjmp	.+1500   	; 0x2b94 <__subsf3>

000025b8 <getTemperature>:
	uint16_t voltage = getVoltage();
	uint16_t current = (voltage/10000);
	return current;
}
*/
float getTemperature(void){
    25b8:	8f 92       	push	r8
    25ba:	9f 92       	push	r9
    25bc:	af 92       	push	r10
    25be:	bf 92       	push	r11
    25c0:	cf 92       	push	r12
    25c2:	df 92       	push	r13
    25c4:	ef 92       	push	r14
    25c6:	ff 92       	push	r15
    25c8:	0f 93       	push	r16
    25ca:	1f 93       	push	r17
    25cc:	cf 93       	push	r28
	float voltage = getVoltage();
    25ce:	df 93       	push	r29
    25d0:	de df       	rcall	.-68     	; 0x258e <getVoltage>
    25d2:	6b 01       	movw	r12, r22
	//uint16_t current = getCurrent();
	//uint16_t resistance = voltage/current;
	float resistance = (voltage*10000)/(voltage-3.3);
    25d4:	7c 01       	movw	r14, r24
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e4       	ldi	r19, 0x40	; 64
    25da:	4c e1       	ldi	r20, 0x1C	; 28
    25dc:	56 e4       	ldi	r21, 0x46	; 70
    25de:	ab d4       	rcall	.+2390   	; 0x2f36 <__mulsf3>
    25e0:	4b 01       	movw	r8, r22
    25e2:	5c 01       	movw	r10, r24
    25e4:	23 e3       	ldi	r18, 0x33	; 51
    25e6:	33 e3       	ldi	r19, 0x33	; 51
    25e8:	43 e5       	ldi	r20, 0x53	; 83
    25ea:	50 e4       	ldi	r21, 0x40	; 64
    25ec:	c7 01       	movw	r24, r14
    25ee:	b6 01       	movw	r22, r12
    25f0:	d1 d2       	rcall	.+1442   	; 0x2b94 <__subsf3>
    25f2:	9b 01       	movw	r18, r22
    25f4:	ac 01       	movw	r20, r24
    25f6:	c5 01       	movw	r24, r10
    25f8:	b4 01       	movw	r22, r8
    25fa:	31 d3       	rcall	.+1634   	; 0x2c5e <__divsf3>
    25fc:	06 2f       	mov	r16, r22
    25fe:	17 2f       	mov	r17, r23
    2600:	d8 2f       	mov	r29, r24
	printf("resistance = %f \n", resistance);
    2602:	c9 2f       	mov	r28, r25
    2604:	9f 93       	push	r25
    2606:	8f 93       	push	r24
    2608:	7f 93       	push	r23
    260a:	6f 93       	push	r22
    260c:	8d e0       	ldi	r24, 0x0D	; 13
    260e:	90 e2       	ldi	r25, 0x20	; 32
    2610:	9f 93       	push	r25
    2612:	8f 93       	push	r24
    2614:	0e 94 12 1f 	call	0x3e24	; 0x3e24 <printf>
	uint32_t temperature = 3977.0/(log(resistance/(10000.0*pow(2.71828,(-3977.0/298.15)))));
    2618:	2b e5       	ldi	r18, 0x5B	; 91
    261a:	30 ef       	ldi	r19, 0xF0	; 240
    261c:	43 e8       	ldi	r20, 0x83	; 131
    261e:	5c e3       	ldi	r21, 0x3C	; 60
    2620:	60 2f       	mov	r22, r16
    2622:	71 2f       	mov	r23, r17
    2624:	8d 2f       	mov	r24, r29
    2626:	9c 2f       	mov	r25, r28
	//float temperature = pow((.003351016+.0002569850*log(resistance/10000)+.000002620131*pow(log(resistance/10000),2)),-1);
	return temperature;
    2628:	1a d3       	rcall	.+1588   	; 0x2c5e <__divsf3>
    262a:	45 d4       	rcall	.+2186   	; 0x2eb6 <log>
    262c:	9b 01       	movw	r18, r22
    262e:	ac 01       	movw	r20, r24
    2630:	60 e0       	ldi	r22, 0x00	; 0
    2632:	70 e9       	ldi	r23, 0x90	; 144
    2634:	88 e7       	ldi	r24, 0x78	; 120
    2636:	95 e4       	ldi	r25, 0x45	; 69
    2638:	12 d3       	rcall	.+1572   	; 0x2c5e <__divsf3>
    263a:	7e d3       	rcall	.+1788   	; 0x2d38 <__fixunssfsi>
    263c:	a9 d3       	rcall	.+1874   	; 0x2d90 <__floatunsisf>
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
	
	
	
    2646:	0f 90       	pop	r0
    2648:	0f 90       	pop	r0
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	1f 91       	pop	r17
    2650:	0f 91       	pop	r16
    2652:	ff 90       	pop	r15
    2654:	ef 90       	pop	r14
    2656:	df 90       	pop	r13
    2658:	cf 90       	pop	r12
    265a:	bf 90       	pop	r11
    265c:	af 90       	pop	r10
    265e:	9f 90       	pop	r9
    2660:	8f 90       	pop	r8
    2662:	08 95       	ret

00002664 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
    2664:	cf 93       	push	r28
    2666:	df 93       	push	r29
	*data = usart_getchar(usart);
    2668:	eb 01       	movw	r28, r22
    266a:	e7 d9       	rcall	.-3122   	; 0x1a3a <usart_getchar>
}
    266c:	88 83       	st	Y, r24
    266e:	df 91       	pop	r29
    2670:	cf 91       	pop	r28
    2672:	08 95       	ret

00002674 <usart_serial_putchar>:
 * \param c       Character to write.
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
    2674:	da c9       	rjmp	.-3148   	; 0x1a2a <usart_putchar>
    2676:	08 95       	ret

00002678 <usart_init>:
    2678:	cf 93       	push	r28
    267a:	df 93       	push	r29
    267c:	cd b7       	in	r28, 0x3d	; 61
    267e:	de b7       	in	r29, 0x3e	; 62
    2680:	27 97       	sbiw	r28, 0x07	; 7
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	de bf       	out	0x3e, r29	; 62
    2686:	e0 e4       	ldi	r30, 0x40	; 64
    2688:	f6 e0       	ldi	r31, 0x06	; 6
    268a:	88 e0       	ldi	r24, 0x08	; 8
    268c:	81 83       	std	Z+1, r24	; 0x01
    268e:	85 83       	std	Z+5, r24	; 0x05
    2690:	80 ea       	ldi	r24, 0xA0	; 160
    2692:	98 e0       	ldi	r25, 0x08	; 8
    2694:	80 93 b4 20 	sts	0x20B4, r24	; 0x8020b4 <stdio_base>
    2698:	90 93 b5 20 	sts	0x20B5, r25	; 0x8020b5 <stdio_base+0x1>
    269c:	8a e3       	ldi	r24, 0x3A	; 58
    269e:	93 e1       	ldi	r25, 0x13	; 19
    26a0:	80 93 b2 20 	sts	0x20B2, r24	; 0x8020b2 <ptr_put>
    26a4:	90 93 b3 20 	sts	0x20B3, r25	; 0x8020b3 <ptr_put+0x1>
    26a8:	82 e3       	ldi	r24, 0x32	; 50
    26aa:	93 e1       	ldi	r25, 0x13	; 19
    26ac:	80 93 b0 20 	sts	0x20B0, r24	; 0x8020b0 <ptr_get>
    26b0:	90 93 b1 20 	sts	0x20B1, r25	; 0x8020b1 <ptr_get+0x1>
    26b4:	e6 e0       	ldi	r30, 0x06	; 6
    26b6:	f0 e2       	ldi	r31, 0x20	; 32
    26b8:	84 81       	ldd	r24, Z+4	; 0x04
    26ba:	8d 83       	std	Y+5, r24	; 0x05
    26bc:	85 81       	ldd	r24, Z+5	; 0x05
    26be:	8e 83       	std	Y+6, r24	; 0x06
    26c0:	86 81       	ldd	r24, Z+6	; 0x06
    26c2:	8f 83       	std	Y+7, r24	; 0x07
    26c4:	80 81       	ld	r24, Z
    26c6:	91 81       	ldd	r25, Z+1	; 0x01
    26c8:	a2 81       	ldd	r26, Z+2	; 0x02
    26ca:	b3 81       	ldd	r27, Z+3	; 0x03
    26cc:	89 83       	std	Y+1, r24	; 0x01
    26ce:	9a 83       	std	Y+2, r25	; 0x02
    26d0:	ab 83       	std	Y+3, r26	; 0x03
    26d2:	bc 83       	std	Y+4, r27	; 0x04
    26d4:	60 e1       	ldi	r22, 0x10	; 16
    26d6:	83 e0       	ldi	r24, 0x03	; 3
    26d8:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    26dc:	be 01       	movw	r22, r28
    26de:	6f 5f       	subi	r22, 0xFF	; 255
    26e0:	7f 4f       	sbci	r23, 0xFF	; 255
    26e2:	80 ea       	ldi	r24, 0xA0	; 160
    26e4:	98 e0       	ldi	r25, 0x08	; 8
    26e6:	c2 da       	rcall	.-2684   	; 0x1c6c <usart_init_rs232>
    26e8:	62 e3       	ldi	r22, 0x32	; 50
    26ea:	72 e0       	ldi	r23, 0x02	; 2
    26ec:	8b e4       	ldi	r24, 0x4B	; 75
    26ee:	92 e0       	ldi	r25, 0x02	; 2
    26f0:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <fdevopen>
    26f4:	27 96       	adiw	r28, 0x07	; 7
    26f6:	cd bf       	out	0x3d, r28	; 61
    26f8:	de bf       	out	0x3e, r29	; 62
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	08 95       	ret

00002700 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2700:	04 c0       	rjmp	.+8      	; 0x270a <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2702:	61 50       	subi	r22, 0x01	; 1
    2704:	71 09       	sbc	r23, r1
    2706:	81 09       	sbc	r24, r1
    2708:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    270a:	61 15       	cp	r22, r1
    270c:	71 05       	cpc	r23, r1
    270e:	81 05       	cpc	r24, r1
    2710:	91 05       	cpc	r25, r1
    2712:	b9 f7       	brne	.-18     	; 0x2702 <__portable_avr_delay_cycles+0x2>
    2714:	08 95       	ret

00002716 <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	09 f4       	brne	.+2      	; 0x271c <sysclk_enable_peripheral_clock+0x6>
    271a:	5c c1       	rjmp	.+696    	; 0x29d4 <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    271c:	80 3c       	cpi	r24, 0xC0	; 192
    271e:	91 05       	cpc	r25, r1
    2720:	29 f4       	brne	.+10     	; 0x272c <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    2722:	60 e1       	ldi	r22, 0x10	; 16
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    272a:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    272c:	80 34       	cpi	r24, 0x40	; 64
    272e:	24 e0       	ldi	r18, 0x04	; 4
    2730:	92 07       	cpc	r25, r18
    2732:	29 f4       	brne	.+10     	; 0x273e <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    2734:	68 e0       	ldi	r22, 0x08	; 8
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    273c:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    273e:	81 15       	cp	r24, r1
    2740:	24 e0       	ldi	r18, 0x04	; 4
    2742:	92 07       	cpc	r25, r18
    2744:	29 f4       	brne	.+10     	; 0x2750 <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    2746:	64 e0       	ldi	r22, 0x04	; 4
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    274e:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2750:	80 38       	cpi	r24, 0x80	; 128
    2752:	21 e0       	ldi	r18, 0x01	; 1
    2754:	92 07       	cpc	r25, r18
    2756:	29 f4       	brne	.+10     	; 0x2762 <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    2758:	62 e0       	ldi	r22, 0x02	; 2
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    2760:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    2762:	81 15       	cp	r24, r1
    2764:	21 e0       	ldi	r18, 0x01	; 1
    2766:	92 07       	cpc	r25, r18
    2768:	29 f4       	brne	.+10     	; 0x2774 <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    276a:	61 e0       	ldi	r22, 0x01	; 1
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    2772:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    2774:	80 38       	cpi	r24, 0x80	; 128
    2776:	23 e0       	ldi	r18, 0x03	; 3
    2778:	92 07       	cpc	r25, r18
    277a:	29 f4       	brne	.+10     	; 0x2786 <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    277c:	61 e0       	ldi	r22, 0x01	; 1
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    2784:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    2786:	80 39       	cpi	r24, 0x90	; 144
    2788:	23 e0       	ldi	r18, 0x03	; 3
    278a:	92 07       	cpc	r25, r18
    278c:	29 f4       	brne	.+10     	; 0x2798 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    278e:	61 e0       	ldi	r22, 0x01	; 1
    2790:	82 e0       	ldi	r24, 0x02	; 2
    2792:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    2796:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    2798:	81 15       	cp	r24, r1
    279a:	22 e0       	ldi	r18, 0x02	; 2
    279c:	92 07       	cpc	r25, r18
    279e:	29 f4       	brne	.+10     	; 0x27aa <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    27a0:	62 e0       	ldi	r22, 0x02	; 2
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    27a8:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    27aa:	80 34       	cpi	r24, 0x40	; 64
    27ac:	22 e0       	ldi	r18, 0x02	; 2
    27ae:	92 07       	cpc	r25, r18
    27b0:	29 f4       	brne	.+10     	; 0x27bc <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    27b2:	62 e0       	ldi	r22, 0x02	; 2
    27b4:	82 e0       	ldi	r24, 0x02	; 2
    27b6:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    27ba:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    27bc:	81 15       	cp	r24, r1
    27be:	23 e0       	ldi	r18, 0x03	; 3
    27c0:	92 07       	cpc	r25, r18
    27c2:	29 f4       	brne	.+10     	; 0x27ce <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    27c4:	64 e0       	ldi	r22, 0x04	; 4
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    27cc:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    27ce:	80 32       	cpi	r24, 0x20	; 32
    27d0:	23 e0       	ldi	r18, 0x03	; 3
    27d2:	92 07       	cpc	r25, r18
    27d4:	29 f4       	brne	.+10     	; 0x27e0 <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    27d6:	64 e0       	ldi	r22, 0x04	; 4
    27d8:	82 e0       	ldi	r24, 0x02	; 2
    27da:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    27de:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    27e0:	81 15       	cp	r24, r1
    27e2:	28 e0       	ldi	r18, 0x08	; 8
    27e4:	92 07       	cpc	r25, r18
    27e6:	29 f4       	brne	.+10     	; 0x27f2 <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    27e8:	61 e0       	ldi	r22, 0x01	; 1
    27ea:	83 e0       	ldi	r24, 0x03	; 3
    27ec:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    27f0:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    27f2:	81 15       	cp	r24, r1
    27f4:	29 e0       	ldi	r18, 0x09	; 9
    27f6:	92 07       	cpc	r25, r18
    27f8:	29 f4       	brne	.+10     	; 0x2804 <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    27fa:	61 e0       	ldi	r22, 0x01	; 1
    27fc:	84 e0       	ldi	r24, 0x04	; 4
    27fe:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    2802:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    2804:	81 15       	cp	r24, r1
    2806:	2a e0       	ldi	r18, 0x0A	; 10
    2808:	92 07       	cpc	r25, r18
    280a:	29 f4       	brne	.+10     	; 0x2816 <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	85 e0       	ldi	r24, 0x05	; 5
    2810:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    2814:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    2816:	81 15       	cp	r24, r1
    2818:	2b e0       	ldi	r18, 0x0B	; 11
    281a:	92 07       	cpc	r25, r18
    281c:	29 f4       	brne	.+10     	; 0x2828 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    281e:	61 e0       	ldi	r22, 0x01	; 1
    2820:	86 e0       	ldi	r24, 0x06	; 6
    2822:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    2826:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    2828:	80 34       	cpi	r24, 0x40	; 64
    282a:	28 e0       	ldi	r18, 0x08	; 8
    282c:	92 07       	cpc	r25, r18
    282e:	29 f4       	brne	.+10     	; 0x283a <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    2830:	62 e0       	ldi	r22, 0x02	; 2
    2832:	83 e0       	ldi	r24, 0x03	; 3
    2834:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    2838:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    283a:	80 34       	cpi	r24, 0x40	; 64
    283c:	29 e0       	ldi	r18, 0x09	; 9
    283e:	92 07       	cpc	r25, r18
    2840:	29 f4       	brne	.+10     	; 0x284c <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2842:	62 e0       	ldi	r22, 0x02	; 2
    2844:	84 e0       	ldi	r24, 0x04	; 4
    2846:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    284a:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    284c:	80 34       	cpi	r24, 0x40	; 64
    284e:	2a e0       	ldi	r18, 0x0A	; 10
    2850:	92 07       	cpc	r25, r18
    2852:	29 f4       	brne	.+10     	; 0x285e <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    2854:	62 e0       	ldi	r22, 0x02	; 2
    2856:	85 e0       	ldi	r24, 0x05	; 5
    2858:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    285c:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    285e:	80 34       	cpi	r24, 0x40	; 64
    2860:	2b e0       	ldi	r18, 0x0B	; 11
    2862:	92 07       	cpc	r25, r18
    2864:	29 f4       	brne	.+10     	; 0x2870 <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    2866:	62 e0       	ldi	r22, 0x02	; 2
    2868:	86 e0       	ldi	r24, 0x06	; 6
    286a:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    286e:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2870:	80 39       	cpi	r24, 0x90	; 144
    2872:	28 e0       	ldi	r18, 0x08	; 8
    2874:	92 07       	cpc	r25, r18
    2876:	29 f4       	brne	.+10     	; 0x2882 <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    2878:	64 e0       	ldi	r22, 0x04	; 4
    287a:	83 e0       	ldi	r24, 0x03	; 3
    287c:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    2880:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2882:	80 39       	cpi	r24, 0x90	; 144
    2884:	29 e0       	ldi	r18, 0x09	; 9
    2886:	92 07       	cpc	r25, r18
    2888:	29 f4       	brne	.+10     	; 0x2894 <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    288a:	64 e0       	ldi	r22, 0x04	; 4
    288c:	84 e0       	ldi	r24, 0x04	; 4
    288e:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    2892:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    2894:	80 39       	cpi	r24, 0x90	; 144
    2896:	2a e0       	ldi	r18, 0x0A	; 10
    2898:	92 07       	cpc	r25, r18
    289a:	29 f4       	brne	.+10     	; 0x28a6 <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    289c:	64 e0       	ldi	r22, 0x04	; 4
    289e:	85 e0       	ldi	r24, 0x05	; 5
    28a0:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    28a4:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    28a6:	80 39       	cpi	r24, 0x90	; 144
    28a8:	2b e0       	ldi	r18, 0x0B	; 11
    28aa:	92 07       	cpc	r25, r18
    28ac:	29 f4       	brne	.+10     	; 0x28b8 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    28ae:	64 e0       	ldi	r22, 0x04	; 4
    28b0:	86 e0       	ldi	r24, 0x06	; 6
    28b2:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    28b6:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    28b8:	80 3c       	cpi	r24, 0xC0	; 192
    28ba:	28 e0       	ldi	r18, 0x08	; 8
    28bc:	92 07       	cpc	r25, r18
    28be:	29 f4       	brne	.+10     	; 0x28ca <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    28c0:	68 e0       	ldi	r22, 0x08	; 8
    28c2:	83 e0       	ldi	r24, 0x03	; 3
    28c4:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    28c8:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    28ca:	80 3c       	cpi	r24, 0xC0	; 192
    28cc:	29 e0       	ldi	r18, 0x09	; 9
    28ce:	92 07       	cpc	r25, r18
    28d0:	29 f4       	brne	.+10     	; 0x28dc <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    28d2:	68 e0       	ldi	r22, 0x08	; 8
    28d4:	84 e0       	ldi	r24, 0x04	; 4
    28d6:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    28da:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    28dc:	80 3c       	cpi	r24, 0xC0	; 192
    28de:	2a e0       	ldi	r18, 0x0A	; 10
    28e0:	92 07       	cpc	r25, r18
    28e2:	29 f4       	brne	.+10     	; 0x28ee <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    28e4:	68 e0       	ldi	r22, 0x08	; 8
    28e6:	85 e0       	ldi	r24, 0x05	; 5
    28e8:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    28ec:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    28ee:	80 3c       	cpi	r24, 0xC0	; 192
    28f0:	2b e0       	ldi	r18, 0x0B	; 11
    28f2:	92 07       	cpc	r25, r18
    28f4:	29 f4       	brne	.+10     	; 0x2900 <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    28f6:	68 e0       	ldi	r22, 0x08	; 8
    28f8:	86 e0       	ldi	r24, 0x06	; 6
    28fa:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    28fe:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    2900:	80 3a       	cpi	r24, 0xA0	; 160
    2902:	28 e0       	ldi	r18, 0x08	; 8
    2904:	92 07       	cpc	r25, r18
    2906:	29 f4       	brne	.+10     	; 0x2912 <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    2908:	60 e1       	ldi	r22, 0x10	; 16
    290a:	83 e0       	ldi	r24, 0x03	; 3
    290c:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    2910:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    2912:	80 3a       	cpi	r24, 0xA0	; 160
    2914:	29 e0       	ldi	r18, 0x09	; 9
    2916:	92 07       	cpc	r25, r18
    2918:	29 f4       	brne	.+10     	; 0x2924 <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    291a:	60 e1       	ldi	r22, 0x10	; 16
    291c:	84 e0       	ldi	r24, 0x04	; 4
    291e:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    2922:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    2924:	80 3a       	cpi	r24, 0xA0	; 160
    2926:	2a e0       	ldi	r18, 0x0A	; 10
    2928:	92 07       	cpc	r25, r18
    292a:	29 f4       	brne	.+10     	; 0x2936 <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    292c:	60 e1       	ldi	r22, 0x10	; 16
    292e:	85 e0       	ldi	r24, 0x05	; 5
    2930:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    2934:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    2936:	80 3a       	cpi	r24, 0xA0	; 160
    2938:	2b e0       	ldi	r18, 0x0B	; 11
    293a:	92 07       	cpc	r25, r18
    293c:	29 f4       	brne	.+10     	; 0x2948 <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    293e:	60 e1       	ldi	r22, 0x10	; 16
    2940:	86 e0       	ldi	r24, 0x06	; 6
    2942:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    2946:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    2948:	80 3b       	cpi	r24, 0xB0	; 176
    294a:	28 e0       	ldi	r18, 0x08	; 8
    294c:	92 07       	cpc	r25, r18
    294e:	29 f4       	brne	.+10     	; 0x295a <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    2950:	60 e2       	ldi	r22, 0x20	; 32
    2952:	83 e0       	ldi	r24, 0x03	; 3
    2954:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    2958:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    295a:	80 3b       	cpi	r24, 0xB0	; 176
    295c:	29 e0       	ldi	r18, 0x09	; 9
    295e:	92 07       	cpc	r25, r18
    2960:	29 f4       	brne	.+10     	; 0x296c <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    2962:	60 e2       	ldi	r22, 0x20	; 32
    2964:	84 e0       	ldi	r24, 0x04	; 4
    2966:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    296a:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    296c:	80 3b       	cpi	r24, 0xB0	; 176
    296e:	2a e0       	ldi	r18, 0x0A	; 10
    2970:	92 07       	cpc	r25, r18
    2972:	29 f4       	brne	.+10     	; 0x297e <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    2974:	60 e2       	ldi	r22, 0x20	; 32
    2976:	85 e0       	ldi	r24, 0x05	; 5
    2978:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    297c:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    297e:	80 3b       	cpi	r24, 0xB0	; 176
    2980:	2b e0       	ldi	r18, 0x0B	; 11
    2982:	92 07       	cpc	r25, r18
    2984:	29 f4       	brne	.+10     	; 0x2990 <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    2986:	60 e2       	ldi	r22, 0x20	; 32
    2988:	86 e0       	ldi	r24, 0x06	; 6
    298a:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    298e:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    2990:	80 38       	cpi	r24, 0x80	; 128
    2992:	24 e0       	ldi	r18, 0x04	; 4
    2994:	92 07       	cpc	r25, r18
    2996:	29 f4       	brne	.+10     	; 0x29a2 <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    2998:	60 e4       	ldi	r22, 0x40	; 64
    299a:	83 e0       	ldi	r24, 0x03	; 3
    299c:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    29a0:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    29a2:	80 39       	cpi	r24, 0x90	; 144
    29a4:	24 e0       	ldi	r18, 0x04	; 4
    29a6:	92 07       	cpc	r25, r18
    29a8:	29 f4       	brne	.+10     	; 0x29b4 <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    29aa:	60 e4       	ldi	r22, 0x40	; 64
    29ac:	84 e0       	ldi	r24, 0x04	; 4
    29ae:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    29b2:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    29b4:	80 3a       	cpi	r24, 0xA0	; 160
    29b6:	24 e0       	ldi	r18, 0x04	; 4
    29b8:	92 07       	cpc	r25, r18
    29ba:	29 f4       	brne	.+10     	; 0x29c6 <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    29bc:	60 e4       	ldi	r22, 0x40	; 64
    29be:	85 e0       	ldi	r24, 0x05	; 5
    29c0:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    29c4:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    29c6:	80 3b       	cpi	r24, 0xB0	; 176
    29c8:	94 40       	sbci	r25, 0x04	; 4
    29ca:	21 f4       	brne	.+8      	; 0x29d4 <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    29cc:	60 e4       	ldi	r22, 0x40	; 64
    29ce:	86 e0       	ldi	r24, 0x06	; 6
    29d0:	0c 94 1c 02 	jmp	0x438	; 0x438 <sysclk_enable_module>
    29d4:	08 95       	ret

000029d6 <main>:
    29d6:	cf 93       	push	r28
    29d8:	df 93       	push	r29
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	28 97       	sbiw	r28, 0x08	; 8
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	de bf       	out	0x3e, r29	; 62
    29e4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <sysclk_init>
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	9b e0       	ldi	r25, 0x0B	; 11
    29ec:	94 de       	rcall	.-728    	; 0x2716 <sysclk_enable_peripheral_clock>
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	99 e0       	ldi	r25, 0x09	; 9
    29f2:	91 de       	rcall	.-734    	; 0x2716 <sysclk_enable_peripheral_clock>
    29f4:	64 e0       	ldi	r22, 0x04	; 4
    29f6:	86 e0       	ldi	r24, 0x06	; 6
    29f8:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    29fc:	64 e0       	ldi	r22, 0x04	; 4
    29fe:	84 e0       	ldi	r24, 0x04	; 4
    2a00:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    2a04:	68 e0       	ldi	r22, 0x08	; 8
    2a06:	83 e0       	ldi	r24, 0x03	; 3
    2a08:	0e 94 1c 02 	call	0x438	; 0x438 <sysclk_enable_module>
    2a0c:	80 ea       	ldi	r24, 0xA0	; 160
    2a0e:	98 e0       	ldi	r25, 0x08	; 8
    2a10:	82 de       	rcall	.-764    	; 0x2716 <sysclk_enable_peripheral_clock>
    2a12:	32 de       	rcall	.-924    	; 0x2678 <usart_init>
    2a14:	80 ec       	ldi	r24, 0xC0	; 192
    2a16:	98 e0       	ldi	r25, 0x08	; 8
    2a18:	7e de       	rcall	.-772    	; 0x2716 <sysclk_enable_peripheral_clock>
    2a1a:	1f db       	rcall	.-2498   	; 0x205a <SPI_init>
    2a1c:	59 db       	rcall	.-2382   	; 0x20d0 <ms5607_init>
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	92 e0       	ldi	r25, 0x02	; 2
    2a22:	79 de       	rcall	.-782    	; 0x2716 <sysclk_enable_peripheral_clock>
    2a24:	86 dd       	rcall	.-1268   	; 0x2532 <adc_init>
    2a26:	cf db       	rcall	.-2146   	; 0x21c6 <get_pressure>
    2a28:	6d 83       	std	Y+5, r22	; 0x05
    2a2a:	7e 83       	std	Y+6, r23	; 0x06
    2a2c:	8f 83       	std	Y+7, r24	; 0x07
    2a2e:	98 87       	std	Y+8, r25	; 0x08
    2a30:	8f e1       	ldi	r24, 0x1F	; 31
    2a32:	90 e2       	ldi	r25, 0x20	; 32
    2a34:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <puts>
    2a38:	81 e3       	ldi	r24, 0x31	; 49
    2a3a:	90 e2       	ldi	r25, 0x20	; 32
    2a3c:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <puts>
    2a40:	21 2c       	mov	r2, r1
    2a42:	c1 2c       	mov	r12, r1
    2a44:	d1 2c       	mov	r13, r1
    2a46:	76 01       	movw	r14, r12
    2a48:	0f 2e       	mov	r0, r31
    2a4a:	f5 e5       	ldi	r31, 0x55	; 85
    2a4c:	3f 2e       	mov	r3, r31
    2a4e:	f0 2d       	mov	r31, r0
    2a50:	00 e0       	ldi	r16, 0x00	; 0
    2a52:	16 e0       	ldi	r17, 0x06	; 6
    2a54:	68 94       	set
    2a56:	77 24       	eor	r7, r7
    2a58:	73 f8       	bld	r7, 3
    2a5a:	0a c0       	rjmp	.+20     	; 0x2a70 <main+0x9a>
    2a5c:	22 24       	eor	r2, r2
    2a5e:	23 94       	inc	r2
    2a60:	07 c0       	rjmp	.+14     	; 0x2a70 <main+0x9a>
    2a62:	68 94       	set
    2a64:	22 24       	eor	r2, r2
    2a66:	21 f8       	bld	r2, 1
    2a68:	03 c0       	rjmp	.+6      	; 0x2a70 <main+0x9a>
    2a6a:	68 94       	set
    2a6c:	22 24       	eor	r2, r2
    2a6e:	21 f8       	bld	r2, 1
    2a70:	aa db       	rcall	.-2220   	; 0x21c6 <get_pressure>
    2a72:	4b 01       	movw	r8, r22
    2a74:	5c 01       	movw	r10, r24
    2a76:	a0 dd       	rcall	.-1216   	; 0x25b8 <getTemperature>
    2a78:	a5 01       	movw	r20, r10
    2a7a:	94 01       	movw	r18, r8
    2a7c:	6d 81       	ldd	r22, Y+5	; 0x05
    2a7e:	7e 81       	ldd	r23, Y+6	; 0x06
    2a80:	8f 81       	ldd	r24, Y+7	; 0x07
    2a82:	98 85       	ldd	r25, Y+8	; 0x08
    2a84:	7b da       	rcall	.-2826   	; 0x1f7c <Get_altitude>
    2a86:	53 d1       	rcall	.+678    	; 0x2d2e <__fixsfsi>
    2a88:	4b 01       	movw	r8, r22
    2a8a:	5c 01       	movw	r10, r24
    2a8c:	83 d1       	rcall	.+774    	; 0x2d94 <__floatsisf>
    2a8e:	26 e6       	ldi	r18, 0x66	; 102
    2a90:	36 e6       	ldi	r19, 0x66	; 102
    2a92:	46 e6       	ldi	r20, 0x66	; 102
    2a94:	5f e3       	ldi	r21, 0x3F	; 63
    2a96:	4f d2       	rcall	.+1182   	; 0x2f36 <__mulsf3>
    2a98:	69 83       	std	Y+1, r22	; 0x01
    2a9a:	7a 83       	std	Y+2, r23	; 0x02
    2a9c:	8b 83       	std	Y+3, r24	; 0x03
    2a9e:	9c 83       	std	Y+4, r25	; 0x04
    2aa0:	c7 01       	movw	r24, r14
    2aa2:	b6 01       	movw	r22, r12
    2aa4:	77 d1       	rcall	.+750    	; 0x2d94 <__floatsisf>
    2aa6:	20 ed       	ldi	r18, 0xD0	; 208
    2aa8:	3c ec       	ldi	r19, 0xCC	; 204
    2aaa:	4c ec       	ldi	r20, 0xCC	; 204
    2aac:	5d e3       	ldi	r21, 0x3D	; 61
    2aae:	43 d2       	rcall	.+1158   	; 0x2f36 <__mulsf3>
    2ab0:	9b 01       	movw	r18, r22
    2ab2:	ac 01       	movw	r20, r24
    2ab4:	69 81       	ldd	r22, Y+1	; 0x01
    2ab6:	7a 81       	ldd	r23, Y+2	; 0x02
    2ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aba:	9c 81       	ldd	r25, Y+4	; 0x04
    2abc:	6c d0       	rcall	.+216    	; 0x2b96 <__addsf3>
    2abe:	37 d1       	rcall	.+622    	; 0x2d2e <__fixsfsi>
    2ac0:	6b 01       	movw	r12, r22
    2ac2:	7c 01       	movw	r14, r24
    2ac4:	61 e8       	ldi	r22, 0x81	; 129
    2ac6:	78 e3       	ldi	r23, 0x38	; 56
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	19 de       	rcall	.-974    	; 0x2700 <__portable_avr_delay_cycles>
    2ace:	30 92 81 06 	sts	0x0681, r3	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    2ad2:	30 92 85 06 	sts	0x0685, r3	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    2ad6:	21 10       	cpse	r2, r1
    2ad8:	22 c0       	rjmp	.+68     	; 0x2b1e <main+0x148>
    2ada:	30 92 81 06 	sts	0x0681, r3	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    2ade:	30 92 85 06 	sts	0x0685, r3	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    2ae2:	f8 01       	movw	r30, r16
    2ae4:	71 82       	std	Z+1, r7	; 0x01
    2ae6:	75 82       	std	Z+5, r7	; 0x05
    2ae8:	74 82       	std	Z+4, r7	; 0x04
    2aea:	d7 01       	movw	r26, r14
    2aec:	c6 01       	movw	r24, r12
    2aee:	88 19       	sub	r24, r8
    2af0:	99 09       	sbc	r25, r9
    2af2:	aa 09       	sbc	r26, r10
    2af4:	bb 09       	sbc	r27, r11
    2af6:	0a f0       	brmi	.+2      	; 0x2afa <main+0x124>
    2af8:	bb cf       	rjmp	.-138    	; 0x2a70 <main+0x9a>
    2afa:	d7 01       	movw	r26, r14
    2afc:	c6 01       	movw	r24, r12
    2afe:	89 55       	subi	r24, 0x59	; 89
    2b00:	92 40       	sbci	r25, 0x02	; 2
    2b02:	a1 09       	sbc	r26, r1
    2b04:	b1 09       	sbc	r27, r1
    2b06:	87 3c       	cpi	r24, 0xC7	; 199
    2b08:	91 05       	cpc	r25, r1
    2b0a:	a1 05       	cpc	r26, r1
    2b0c:	b1 05       	cpc	r27, r1
    2b0e:	08 f0       	brcs	.+2      	; 0x2b12 <main+0x13c>
    2b10:	af cf       	rjmp	.-162    	; 0x2a70 <main+0x9a>
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    2b18:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    2b1c:	03 c0       	rjmp	.+6      	; 0x2b24 <main+0x14e>
    2b1e:	f1 e0       	ldi	r31, 0x01	; 1
    2b20:	2f 12       	cpse	r2, r31
    2b22:	16 c0       	rjmp	.+44     	; 0x2b50 <main+0x17a>
    2b24:	8f e3       	ldi	r24, 0x3F	; 63
    2b26:	90 e2       	ldi	r25, 0x20	; 32
    2b28:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <puts>
    2b2c:	8c e2       	ldi	r24, 0x2C	; 44
    2b2e:	c8 16       	cp	r12, r24
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	d8 06       	cpc	r13, r24
    2b34:	e1 04       	cpc	r14, r1
    2b36:	f1 04       	cpc	r15, r1
    2b38:	0c f0       	brlt	.+2      	; 0x2b3c <main+0x166>
    2b3a:	90 cf       	rjmp	.-224    	; 0x2a5c <main+0x86>
    2b3c:	82 e0       	ldi	r24, 0x02	; 2
    2b3e:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    2b42:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    2b46:	80 e8       	ldi	r24, 0x80	; 128
    2b48:	f8 01       	movw	r30, r16
    2b4a:	81 83       	std	Z+1, r24	; 0x01
    2b4c:	85 83       	std	Z+5, r24	; 0x05
    2b4e:	03 c0       	rjmp	.+6      	; 0x2b56 <main+0x180>
    2b50:	e2 e0       	ldi	r30, 0x02	; 2
    2b52:	2e 12       	cpse	r2, r30
    2b54:	8d cf       	rjmp	.-230    	; 0x2a70 <main+0x9a>
    2b56:	8f e4       	ldi	r24, 0x4F	; 79
    2b58:	90 e2       	ldi	r25, 0x20	; 32
    2b5a:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <puts>
    2b5e:	d7 01       	movw	r26, r14
    2b60:	c6 01       	movw	r24, r12
    2b62:	88 19       	sub	r24, r8
    2b64:	99 09       	sbc	r25, r9
    2b66:	aa 09       	sbc	r26, r10
    2b68:	bb 09       	sbc	r27, r11
    2b6a:	18 16       	cp	r1, r24
    2b6c:	19 06       	cpc	r1, r25
    2b6e:	1a 06       	cpc	r1, r26
    2b70:	1b 06       	cpc	r1, r27
    2b72:	0c f4       	brge	.+2      	; 0x2b76 <main+0x1a0>
    2b74:	76 cf       	rjmp	.-276    	; 0x2a62 <main+0x8c>
    2b76:	f4 e6       	ldi	r31, 0x64	; 100
    2b78:	8f 16       	cp	r8, r31
    2b7a:	91 04       	cpc	r9, r1
    2b7c:	a1 04       	cpc	r10, r1
    2b7e:	b1 04       	cpc	r11, r1
    2b80:	0c f0       	brlt	.+2      	; 0x2b84 <main+0x1ae>
    2b82:	73 cf       	rjmp	.-282    	; 0x2a6a <main+0x94>
    2b84:	f8 01       	movw	r30, r16
    2b86:	71 82       	std	Z+1, r7	; 0x01
    2b88:	75 82       	std	Z+5, r7	; 0x05
    2b8a:	0f 2e       	mov	r0, r31
    2b8c:	f3 e0       	ldi	r31, 0x03	; 3
    2b8e:	2f 2e       	mov	r2, r31
    2b90:	f0 2d       	mov	r31, r0
    2b92:	6e cf       	rjmp	.-292    	; 0x2a70 <main+0x9a>

00002b94 <__subsf3>:
    2b94:	50 58       	subi	r21, 0x80	; 128

00002b96 <__addsf3>:
    2b96:	bb 27       	eor	r27, r27
    2b98:	aa 27       	eor	r26, r26
    2b9a:	0e d0       	rcall	.+28     	; 0x2bb8 <__addsf3x>
    2b9c:	4d c1       	rjmp	.+666    	; 0x2e38 <__fp_round>
    2b9e:	3e d1       	rcall	.+636    	; 0x2e1c <__fp_pscA>
    2ba0:	30 f0       	brcs	.+12     	; 0x2bae <__addsf3+0x18>
    2ba2:	43 d1       	rcall	.+646    	; 0x2e2a <__fp_pscB>
    2ba4:	20 f0       	brcs	.+8      	; 0x2bae <__addsf3+0x18>
    2ba6:	31 f4       	brne	.+12     	; 0x2bb4 <__addsf3+0x1e>
    2ba8:	9f 3f       	cpi	r25, 0xFF	; 255
    2baa:	11 f4       	brne	.+4      	; 0x2bb0 <__addsf3+0x1a>
    2bac:	1e f4       	brtc	.+6      	; 0x2bb4 <__addsf3+0x1e>
    2bae:	33 c1       	rjmp	.+614    	; 0x2e16 <__fp_nan>
    2bb0:	0e f4       	brtc	.+2      	; 0x2bb4 <__addsf3+0x1e>
    2bb2:	e0 95       	com	r30
    2bb4:	e7 fb       	bst	r30, 7
    2bb6:	29 c1       	rjmp	.+594    	; 0x2e0a <__fp_inf>

00002bb8 <__addsf3x>:
    2bb8:	e9 2f       	mov	r30, r25
    2bba:	4f d1       	rcall	.+670    	; 0x2e5a <__fp_split3>
    2bbc:	80 f3       	brcs	.-32     	; 0x2b9e <__addsf3+0x8>
    2bbe:	ba 17       	cp	r27, r26
    2bc0:	62 07       	cpc	r22, r18
    2bc2:	73 07       	cpc	r23, r19
    2bc4:	84 07       	cpc	r24, r20
    2bc6:	95 07       	cpc	r25, r21
    2bc8:	18 f0       	brcs	.+6      	; 0x2bd0 <__addsf3x+0x18>
    2bca:	71 f4       	brne	.+28     	; 0x2be8 <__addsf3x+0x30>
    2bcc:	9e f5       	brtc	.+102    	; 0x2c34 <__addsf3x+0x7c>
    2bce:	67 c1       	rjmp	.+718    	; 0x2e9e <__fp_zero>
    2bd0:	0e f4       	brtc	.+2      	; 0x2bd4 <__addsf3x+0x1c>
    2bd2:	e0 95       	com	r30
    2bd4:	0b 2e       	mov	r0, r27
    2bd6:	ba 2f       	mov	r27, r26
    2bd8:	a0 2d       	mov	r26, r0
    2bda:	0b 01       	movw	r0, r22
    2bdc:	b9 01       	movw	r22, r18
    2bde:	90 01       	movw	r18, r0
    2be0:	0c 01       	movw	r0, r24
    2be2:	ca 01       	movw	r24, r20
    2be4:	a0 01       	movw	r20, r0
    2be6:	11 24       	eor	r1, r1
    2be8:	ff 27       	eor	r31, r31
    2bea:	59 1b       	sub	r21, r25
    2bec:	99 f0       	breq	.+38     	; 0x2c14 <__addsf3x+0x5c>
    2bee:	59 3f       	cpi	r21, 0xF9	; 249
    2bf0:	50 f4       	brcc	.+20     	; 0x2c06 <__addsf3x+0x4e>
    2bf2:	50 3e       	cpi	r21, 0xE0	; 224
    2bf4:	68 f1       	brcs	.+90     	; 0x2c50 <__addsf3x+0x98>
    2bf6:	1a 16       	cp	r1, r26
    2bf8:	f0 40       	sbci	r31, 0x00	; 0
    2bfa:	a2 2f       	mov	r26, r18
    2bfc:	23 2f       	mov	r18, r19
    2bfe:	34 2f       	mov	r19, r20
    2c00:	44 27       	eor	r20, r20
    2c02:	58 5f       	subi	r21, 0xF8	; 248
    2c04:	f3 cf       	rjmp	.-26     	; 0x2bec <__addsf3x+0x34>
    2c06:	46 95       	lsr	r20
    2c08:	37 95       	ror	r19
    2c0a:	27 95       	ror	r18
    2c0c:	a7 95       	ror	r26
    2c0e:	f0 40       	sbci	r31, 0x00	; 0
    2c10:	53 95       	inc	r21
    2c12:	c9 f7       	brne	.-14     	; 0x2c06 <__addsf3x+0x4e>
    2c14:	7e f4       	brtc	.+30     	; 0x2c34 <__addsf3x+0x7c>
    2c16:	1f 16       	cp	r1, r31
    2c18:	ba 0b       	sbc	r27, r26
    2c1a:	62 0b       	sbc	r22, r18
    2c1c:	73 0b       	sbc	r23, r19
    2c1e:	84 0b       	sbc	r24, r20
    2c20:	ba f0       	brmi	.+46     	; 0x2c50 <__addsf3x+0x98>
    2c22:	91 50       	subi	r25, 0x01	; 1
    2c24:	a1 f0       	breq	.+40     	; 0x2c4e <__addsf3x+0x96>
    2c26:	ff 0f       	add	r31, r31
    2c28:	bb 1f       	adc	r27, r27
    2c2a:	66 1f       	adc	r22, r22
    2c2c:	77 1f       	adc	r23, r23
    2c2e:	88 1f       	adc	r24, r24
    2c30:	c2 f7       	brpl	.-16     	; 0x2c22 <__addsf3x+0x6a>
    2c32:	0e c0       	rjmp	.+28     	; 0x2c50 <__addsf3x+0x98>
    2c34:	ba 0f       	add	r27, r26
    2c36:	62 1f       	adc	r22, r18
    2c38:	73 1f       	adc	r23, r19
    2c3a:	84 1f       	adc	r24, r20
    2c3c:	48 f4       	brcc	.+18     	; 0x2c50 <__addsf3x+0x98>
    2c3e:	87 95       	ror	r24
    2c40:	77 95       	ror	r23
    2c42:	67 95       	ror	r22
    2c44:	b7 95       	ror	r27
    2c46:	f7 95       	ror	r31
    2c48:	9e 3f       	cpi	r25, 0xFE	; 254
    2c4a:	08 f0       	brcs	.+2      	; 0x2c4e <__addsf3x+0x96>
    2c4c:	b3 cf       	rjmp	.-154    	; 0x2bb4 <__addsf3+0x1e>
    2c4e:	93 95       	inc	r25
    2c50:	88 0f       	add	r24, r24
    2c52:	08 f0       	brcs	.+2      	; 0x2c56 <__addsf3x+0x9e>
    2c54:	99 27       	eor	r25, r25
    2c56:	ee 0f       	add	r30, r30
    2c58:	97 95       	ror	r25
    2c5a:	87 95       	ror	r24
    2c5c:	08 95       	ret

00002c5e <__divsf3>:
    2c5e:	0c d0       	rcall	.+24     	; 0x2c78 <__divsf3x>
    2c60:	eb c0       	rjmp	.+470    	; 0x2e38 <__fp_round>
    2c62:	e3 d0       	rcall	.+454    	; 0x2e2a <__fp_pscB>
    2c64:	40 f0       	brcs	.+16     	; 0x2c76 <__divsf3+0x18>
    2c66:	da d0       	rcall	.+436    	; 0x2e1c <__fp_pscA>
    2c68:	30 f0       	brcs	.+12     	; 0x2c76 <__divsf3+0x18>
    2c6a:	21 f4       	brne	.+8      	; 0x2c74 <__divsf3+0x16>
    2c6c:	5f 3f       	cpi	r21, 0xFF	; 255
    2c6e:	19 f0       	breq	.+6      	; 0x2c76 <__divsf3+0x18>
    2c70:	cc c0       	rjmp	.+408    	; 0x2e0a <__fp_inf>
    2c72:	51 11       	cpse	r21, r1
    2c74:	15 c1       	rjmp	.+554    	; 0x2ea0 <__fp_szero>
    2c76:	cf c0       	rjmp	.+414    	; 0x2e16 <__fp_nan>

00002c78 <__divsf3x>:
    2c78:	f0 d0       	rcall	.+480    	; 0x2e5a <__fp_split3>
    2c7a:	98 f3       	brcs	.-26     	; 0x2c62 <__divsf3+0x4>

00002c7c <__divsf3_pse>:
    2c7c:	99 23       	and	r25, r25
    2c7e:	c9 f3       	breq	.-14     	; 0x2c72 <__divsf3+0x14>
    2c80:	55 23       	and	r21, r21
    2c82:	b1 f3       	breq	.-20     	; 0x2c70 <__divsf3+0x12>
    2c84:	95 1b       	sub	r25, r21
    2c86:	55 0b       	sbc	r21, r21
    2c88:	bb 27       	eor	r27, r27
    2c8a:	aa 27       	eor	r26, r26
    2c8c:	62 17       	cp	r22, r18
    2c8e:	73 07       	cpc	r23, r19
    2c90:	84 07       	cpc	r24, r20
    2c92:	38 f0       	brcs	.+14     	; 0x2ca2 <__divsf3_pse+0x26>
    2c94:	9f 5f       	subi	r25, 0xFF	; 255
    2c96:	5f 4f       	sbci	r21, 0xFF	; 255
    2c98:	22 0f       	add	r18, r18
    2c9a:	33 1f       	adc	r19, r19
    2c9c:	44 1f       	adc	r20, r20
    2c9e:	aa 1f       	adc	r26, r26
    2ca0:	a9 f3       	breq	.-22     	; 0x2c8c <__divsf3_pse+0x10>
    2ca2:	33 d0       	rcall	.+102    	; 0x2d0a <__divsf3_pse+0x8e>
    2ca4:	0e 2e       	mov	r0, r30
    2ca6:	3a f0       	brmi	.+14     	; 0x2cb6 <__divsf3_pse+0x3a>
    2ca8:	e0 e8       	ldi	r30, 0x80	; 128
    2caa:	30 d0       	rcall	.+96     	; 0x2d0c <__divsf3_pse+0x90>
    2cac:	91 50       	subi	r25, 0x01	; 1
    2cae:	50 40       	sbci	r21, 0x00	; 0
    2cb0:	e6 95       	lsr	r30
    2cb2:	00 1c       	adc	r0, r0
    2cb4:	ca f7       	brpl	.-14     	; 0x2ca8 <__divsf3_pse+0x2c>
    2cb6:	29 d0       	rcall	.+82     	; 0x2d0a <__divsf3_pse+0x8e>
    2cb8:	fe 2f       	mov	r31, r30
    2cba:	27 d0       	rcall	.+78     	; 0x2d0a <__divsf3_pse+0x8e>
    2cbc:	66 0f       	add	r22, r22
    2cbe:	77 1f       	adc	r23, r23
    2cc0:	88 1f       	adc	r24, r24
    2cc2:	bb 1f       	adc	r27, r27
    2cc4:	26 17       	cp	r18, r22
    2cc6:	37 07       	cpc	r19, r23
    2cc8:	48 07       	cpc	r20, r24
    2cca:	ab 07       	cpc	r26, r27
    2ccc:	b0 e8       	ldi	r27, 0x80	; 128
    2cce:	09 f0       	breq	.+2      	; 0x2cd2 <__divsf3_pse+0x56>
    2cd0:	bb 0b       	sbc	r27, r27
    2cd2:	80 2d       	mov	r24, r0
    2cd4:	bf 01       	movw	r22, r30
    2cd6:	ff 27       	eor	r31, r31
    2cd8:	93 58       	subi	r25, 0x83	; 131
    2cda:	5f 4f       	sbci	r21, 0xFF	; 255
    2cdc:	2a f0       	brmi	.+10     	; 0x2ce8 <__divsf3_pse+0x6c>
    2cde:	9e 3f       	cpi	r25, 0xFE	; 254
    2ce0:	51 05       	cpc	r21, r1
    2ce2:	68 f0       	brcs	.+26     	; 0x2cfe <__divsf3_pse+0x82>
    2ce4:	92 c0       	rjmp	.+292    	; 0x2e0a <__fp_inf>
    2ce6:	dc c0       	rjmp	.+440    	; 0x2ea0 <__fp_szero>
    2ce8:	5f 3f       	cpi	r21, 0xFF	; 255
    2cea:	ec f3       	brlt	.-6      	; 0x2ce6 <__divsf3_pse+0x6a>
    2cec:	98 3e       	cpi	r25, 0xE8	; 232
    2cee:	dc f3       	brlt	.-10     	; 0x2ce6 <__divsf3_pse+0x6a>
    2cf0:	86 95       	lsr	r24
    2cf2:	77 95       	ror	r23
    2cf4:	67 95       	ror	r22
    2cf6:	b7 95       	ror	r27
    2cf8:	f7 95       	ror	r31
    2cfa:	9f 5f       	subi	r25, 0xFF	; 255
    2cfc:	c9 f7       	brne	.-14     	; 0x2cf0 <__divsf3_pse+0x74>
    2cfe:	88 0f       	add	r24, r24
    2d00:	91 1d       	adc	r25, r1
    2d02:	96 95       	lsr	r25
    2d04:	87 95       	ror	r24
    2d06:	97 f9       	bld	r25, 7
    2d08:	08 95       	ret
    2d0a:	e1 e0       	ldi	r30, 0x01	; 1
    2d0c:	66 0f       	add	r22, r22
    2d0e:	77 1f       	adc	r23, r23
    2d10:	88 1f       	adc	r24, r24
    2d12:	bb 1f       	adc	r27, r27
    2d14:	62 17       	cp	r22, r18
    2d16:	73 07       	cpc	r23, r19
    2d18:	84 07       	cpc	r24, r20
    2d1a:	ba 07       	cpc	r27, r26
    2d1c:	20 f0       	brcs	.+8      	; 0x2d26 <__divsf3_pse+0xaa>
    2d1e:	62 1b       	sub	r22, r18
    2d20:	73 0b       	sbc	r23, r19
    2d22:	84 0b       	sbc	r24, r20
    2d24:	ba 0b       	sbc	r27, r26
    2d26:	ee 1f       	adc	r30, r30
    2d28:	88 f7       	brcc	.-30     	; 0x2d0c <__divsf3_pse+0x90>
    2d2a:	e0 95       	com	r30
    2d2c:	08 95       	ret

00002d2e <__fixsfsi>:
    2d2e:	04 d0       	rcall	.+8      	; 0x2d38 <__fixunssfsi>
    2d30:	68 94       	set
    2d32:	b1 11       	cpse	r27, r1
    2d34:	b5 c0       	rjmp	.+362    	; 0x2ea0 <__fp_szero>
    2d36:	08 95       	ret

00002d38 <__fixunssfsi>:
    2d38:	98 d0       	rcall	.+304    	; 0x2e6a <__fp_splitA>
    2d3a:	88 f0       	brcs	.+34     	; 0x2d5e <__fixunssfsi+0x26>
    2d3c:	9f 57       	subi	r25, 0x7F	; 127
    2d3e:	90 f0       	brcs	.+36     	; 0x2d64 <__fixunssfsi+0x2c>
    2d40:	b9 2f       	mov	r27, r25
    2d42:	99 27       	eor	r25, r25
    2d44:	b7 51       	subi	r27, 0x17	; 23
    2d46:	a0 f0       	brcs	.+40     	; 0x2d70 <__fixunssfsi+0x38>
    2d48:	d1 f0       	breq	.+52     	; 0x2d7e <__fixunssfsi+0x46>
    2d4a:	66 0f       	add	r22, r22
    2d4c:	77 1f       	adc	r23, r23
    2d4e:	88 1f       	adc	r24, r24
    2d50:	99 1f       	adc	r25, r25
    2d52:	1a f0       	brmi	.+6      	; 0x2d5a <__fixunssfsi+0x22>
    2d54:	ba 95       	dec	r27
    2d56:	c9 f7       	brne	.-14     	; 0x2d4a <__fixunssfsi+0x12>
    2d58:	12 c0       	rjmp	.+36     	; 0x2d7e <__fixunssfsi+0x46>
    2d5a:	b1 30       	cpi	r27, 0x01	; 1
    2d5c:	81 f0       	breq	.+32     	; 0x2d7e <__fixunssfsi+0x46>
    2d5e:	9f d0       	rcall	.+318    	; 0x2e9e <__fp_zero>
    2d60:	b1 e0       	ldi	r27, 0x01	; 1
    2d62:	08 95       	ret
    2d64:	9c c0       	rjmp	.+312    	; 0x2e9e <__fp_zero>
    2d66:	67 2f       	mov	r22, r23
    2d68:	78 2f       	mov	r23, r24
    2d6a:	88 27       	eor	r24, r24
    2d6c:	b8 5f       	subi	r27, 0xF8	; 248
    2d6e:	39 f0       	breq	.+14     	; 0x2d7e <__fixunssfsi+0x46>
    2d70:	b9 3f       	cpi	r27, 0xF9	; 249
    2d72:	cc f3       	brlt	.-14     	; 0x2d66 <__fixunssfsi+0x2e>
    2d74:	86 95       	lsr	r24
    2d76:	77 95       	ror	r23
    2d78:	67 95       	ror	r22
    2d7a:	b3 95       	inc	r27
    2d7c:	d9 f7       	brne	.-10     	; 0x2d74 <__fixunssfsi+0x3c>
    2d7e:	3e f4       	brtc	.+14     	; 0x2d8e <__fixunssfsi+0x56>
    2d80:	90 95       	com	r25
    2d82:	80 95       	com	r24
    2d84:	70 95       	com	r23
    2d86:	61 95       	neg	r22
    2d88:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d8e:	08 95       	ret

00002d90 <__floatunsisf>:
    2d90:	e8 94       	clt
    2d92:	09 c0       	rjmp	.+18     	; 0x2da6 <__floatsisf+0x12>

00002d94 <__floatsisf>:
    2d94:	97 fb       	bst	r25, 7
    2d96:	3e f4       	brtc	.+14     	; 0x2da6 <__floatsisf+0x12>
    2d98:	90 95       	com	r25
    2d9a:	80 95       	com	r24
    2d9c:	70 95       	com	r23
    2d9e:	61 95       	neg	r22
    2da0:	7f 4f       	sbci	r23, 0xFF	; 255
    2da2:	8f 4f       	sbci	r24, 0xFF	; 255
    2da4:	9f 4f       	sbci	r25, 0xFF	; 255
    2da6:	99 23       	and	r25, r25
    2da8:	a9 f0       	breq	.+42     	; 0x2dd4 <__floatsisf+0x40>
    2daa:	f9 2f       	mov	r31, r25
    2dac:	96 e9       	ldi	r25, 0x96	; 150
    2dae:	bb 27       	eor	r27, r27
    2db0:	93 95       	inc	r25
    2db2:	f6 95       	lsr	r31
    2db4:	87 95       	ror	r24
    2db6:	77 95       	ror	r23
    2db8:	67 95       	ror	r22
    2dba:	b7 95       	ror	r27
    2dbc:	f1 11       	cpse	r31, r1
    2dbe:	f8 cf       	rjmp	.-16     	; 0x2db0 <__floatsisf+0x1c>
    2dc0:	fa f4       	brpl	.+62     	; 0x2e00 <__floatsisf+0x6c>
    2dc2:	bb 0f       	add	r27, r27
    2dc4:	11 f4       	brne	.+4      	; 0x2dca <__floatsisf+0x36>
    2dc6:	60 ff       	sbrs	r22, 0
    2dc8:	1b c0       	rjmp	.+54     	; 0x2e00 <__floatsisf+0x6c>
    2dca:	6f 5f       	subi	r22, 0xFF	; 255
    2dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dce:	8f 4f       	sbci	r24, 0xFF	; 255
    2dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd2:	16 c0       	rjmp	.+44     	; 0x2e00 <__floatsisf+0x6c>
    2dd4:	88 23       	and	r24, r24
    2dd6:	11 f0       	breq	.+4      	; 0x2ddc <__floatsisf+0x48>
    2dd8:	96 e9       	ldi	r25, 0x96	; 150
    2dda:	11 c0       	rjmp	.+34     	; 0x2dfe <__floatsisf+0x6a>
    2ddc:	77 23       	and	r23, r23
    2dde:	21 f0       	breq	.+8      	; 0x2de8 <__floatsisf+0x54>
    2de0:	9e e8       	ldi	r25, 0x8E	; 142
    2de2:	87 2f       	mov	r24, r23
    2de4:	76 2f       	mov	r23, r22
    2de6:	05 c0       	rjmp	.+10     	; 0x2df2 <__floatsisf+0x5e>
    2de8:	66 23       	and	r22, r22
    2dea:	71 f0       	breq	.+28     	; 0x2e08 <__floatsisf+0x74>
    2dec:	96 e8       	ldi	r25, 0x86	; 134
    2dee:	86 2f       	mov	r24, r22
    2df0:	70 e0       	ldi	r23, 0x00	; 0
    2df2:	60 e0       	ldi	r22, 0x00	; 0
    2df4:	2a f0       	brmi	.+10     	; 0x2e00 <__floatsisf+0x6c>
    2df6:	9a 95       	dec	r25
    2df8:	66 0f       	add	r22, r22
    2dfa:	77 1f       	adc	r23, r23
    2dfc:	88 1f       	adc	r24, r24
    2dfe:	da f7       	brpl	.-10     	; 0x2df6 <__floatsisf+0x62>
    2e00:	88 0f       	add	r24, r24
    2e02:	96 95       	lsr	r25
    2e04:	87 95       	ror	r24
    2e06:	97 f9       	bld	r25, 7
    2e08:	08 95       	ret

00002e0a <__fp_inf>:
    2e0a:	97 f9       	bld	r25, 7
    2e0c:	9f 67       	ori	r25, 0x7F	; 127
    2e0e:	80 e8       	ldi	r24, 0x80	; 128
    2e10:	70 e0       	ldi	r23, 0x00	; 0
    2e12:	60 e0       	ldi	r22, 0x00	; 0
    2e14:	08 95       	ret

00002e16 <__fp_nan>:
    2e16:	9f ef       	ldi	r25, 0xFF	; 255
    2e18:	80 ec       	ldi	r24, 0xC0	; 192
    2e1a:	08 95       	ret

00002e1c <__fp_pscA>:
    2e1c:	00 24       	eor	r0, r0
    2e1e:	0a 94       	dec	r0
    2e20:	16 16       	cp	r1, r22
    2e22:	17 06       	cpc	r1, r23
    2e24:	18 06       	cpc	r1, r24
    2e26:	09 06       	cpc	r0, r25
    2e28:	08 95       	ret

00002e2a <__fp_pscB>:
    2e2a:	00 24       	eor	r0, r0
    2e2c:	0a 94       	dec	r0
    2e2e:	12 16       	cp	r1, r18
    2e30:	13 06       	cpc	r1, r19
    2e32:	14 06       	cpc	r1, r20
    2e34:	05 06       	cpc	r0, r21
    2e36:	08 95       	ret

00002e38 <__fp_round>:
    2e38:	09 2e       	mov	r0, r25
    2e3a:	03 94       	inc	r0
    2e3c:	00 0c       	add	r0, r0
    2e3e:	11 f4       	brne	.+4      	; 0x2e44 <__fp_round+0xc>
    2e40:	88 23       	and	r24, r24
    2e42:	52 f0       	brmi	.+20     	; 0x2e58 <__fp_round+0x20>
    2e44:	bb 0f       	add	r27, r27
    2e46:	40 f4       	brcc	.+16     	; 0x2e58 <__fp_round+0x20>
    2e48:	bf 2b       	or	r27, r31
    2e4a:	11 f4       	brne	.+4      	; 0x2e50 <__fp_round+0x18>
    2e4c:	60 ff       	sbrs	r22, 0
    2e4e:	04 c0       	rjmp	.+8      	; 0x2e58 <__fp_round+0x20>
    2e50:	6f 5f       	subi	r22, 0xFF	; 255
    2e52:	7f 4f       	sbci	r23, 0xFF	; 255
    2e54:	8f 4f       	sbci	r24, 0xFF	; 255
    2e56:	9f 4f       	sbci	r25, 0xFF	; 255
    2e58:	08 95       	ret

00002e5a <__fp_split3>:
    2e5a:	57 fd       	sbrc	r21, 7
    2e5c:	90 58       	subi	r25, 0x80	; 128
    2e5e:	44 0f       	add	r20, r20
    2e60:	55 1f       	adc	r21, r21
    2e62:	59 f0       	breq	.+22     	; 0x2e7a <__fp_splitA+0x10>
    2e64:	5f 3f       	cpi	r21, 0xFF	; 255
    2e66:	71 f0       	breq	.+28     	; 0x2e84 <__fp_splitA+0x1a>
    2e68:	47 95       	ror	r20

00002e6a <__fp_splitA>:
    2e6a:	88 0f       	add	r24, r24
    2e6c:	97 fb       	bst	r25, 7
    2e6e:	99 1f       	adc	r25, r25
    2e70:	61 f0       	breq	.+24     	; 0x2e8a <__fp_splitA+0x20>
    2e72:	9f 3f       	cpi	r25, 0xFF	; 255
    2e74:	79 f0       	breq	.+30     	; 0x2e94 <__fp_splitA+0x2a>
    2e76:	87 95       	ror	r24
    2e78:	08 95       	ret
    2e7a:	12 16       	cp	r1, r18
    2e7c:	13 06       	cpc	r1, r19
    2e7e:	14 06       	cpc	r1, r20
    2e80:	55 1f       	adc	r21, r21
    2e82:	f2 cf       	rjmp	.-28     	; 0x2e68 <__fp_split3+0xe>
    2e84:	46 95       	lsr	r20
    2e86:	f1 df       	rcall	.-30     	; 0x2e6a <__fp_splitA>
    2e88:	08 c0       	rjmp	.+16     	; 0x2e9a <__fp_splitA+0x30>
    2e8a:	16 16       	cp	r1, r22
    2e8c:	17 06       	cpc	r1, r23
    2e8e:	18 06       	cpc	r1, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	f1 cf       	rjmp	.-30     	; 0x2e76 <__fp_splitA+0xc>
    2e94:	86 95       	lsr	r24
    2e96:	71 05       	cpc	r23, r1
    2e98:	61 05       	cpc	r22, r1
    2e9a:	08 94       	sec
    2e9c:	08 95       	ret

00002e9e <__fp_zero>:
    2e9e:	e8 94       	clt

00002ea0 <__fp_szero>:
    2ea0:	bb 27       	eor	r27, r27
    2ea2:	66 27       	eor	r22, r22
    2ea4:	77 27       	eor	r23, r23
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	97 f9       	bld	r25, 7
    2eaa:	08 95       	ret
    2eac:	0e f0       	brts	.+2      	; 0x2eb0 <__fp_szero+0x10>
    2eae:	23 c1       	rjmp	.+582    	; 0x30f6 <__fp_mpack>
    2eb0:	b2 cf       	rjmp	.-156    	; 0x2e16 <__fp_nan>
    2eb2:	68 94       	set
    2eb4:	aa cf       	rjmp	.-172    	; 0x2e0a <__fp_inf>

00002eb6 <log>:
    2eb6:	d9 df       	rcall	.-78     	; 0x2e6a <__fp_splitA>
    2eb8:	c8 f3       	brcs	.-14     	; 0x2eac <__fp_szero+0xc>
    2eba:	99 23       	and	r25, r25
    2ebc:	d1 f3       	breq	.-12     	; 0x2eb2 <__fp_szero+0x12>
    2ebe:	c6 f3       	brts	.-16     	; 0x2eb0 <__fp_szero+0x10>
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	1f 93       	push	r17
    2ec6:	0f 93       	push	r16
    2ec8:	ff 92       	push	r15
    2eca:	c9 2f       	mov	r28, r25
    2ecc:	dd 27       	eor	r29, r29
    2ece:	88 23       	and	r24, r24
    2ed0:	2a f0       	brmi	.+10     	; 0x2edc <log+0x26>
    2ed2:	21 97       	sbiw	r28, 0x01	; 1
    2ed4:	66 0f       	add	r22, r22
    2ed6:	77 1f       	adc	r23, r23
    2ed8:	88 1f       	adc	r24, r24
    2eda:	da f7       	brpl	.-10     	; 0x2ed2 <log+0x1c>
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	40 e8       	ldi	r20, 0x80	; 128
    2ee2:	5f eb       	ldi	r21, 0xBF	; 191
    2ee4:	9f e3       	ldi	r25, 0x3F	; 63
    2ee6:	88 39       	cpi	r24, 0x98	; 152
    2ee8:	20 f0       	brcs	.+8      	; 0x2ef2 <log+0x3c>
    2eea:	80 3e       	cpi	r24, 0xE0	; 224
    2eec:	30 f0       	brcs	.+12     	; 0x2efa <log+0x44>
    2eee:	21 96       	adiw	r28, 0x01	; 1
    2ef0:	8f 77       	andi	r24, 0x7F	; 127
    2ef2:	51 de       	rcall	.-862    	; 0x2b96 <__addsf3>
    2ef4:	ec ef       	ldi	r30, 0xFC	; 252
    2ef6:	f1 e0       	ldi	r31, 0x01	; 1
    2ef8:	03 c0       	rjmp	.+6      	; 0x2f00 <log+0x4a>
    2efa:	4d de       	rcall	.-870    	; 0x2b96 <__addsf3>
    2efc:	e9 e2       	ldi	r30, 0x29	; 41
    2efe:	f2 e0       	ldi	r31, 0x02	; 2
    2f00:	08 d1       	rcall	.+528    	; 0x3112 <__fp_powser>
    2f02:	8b 01       	movw	r16, r22
    2f04:	be 01       	movw	r22, r28
    2f06:	ec 01       	movw	r28, r24
    2f08:	fb 2e       	mov	r15, r27
    2f0a:	6f 57       	subi	r22, 0x7F	; 127
    2f0c:	71 09       	sbc	r23, r1
    2f0e:	75 95       	asr	r23
    2f10:	77 1f       	adc	r23, r23
    2f12:	88 0b       	sbc	r24, r24
    2f14:	99 0b       	sbc	r25, r25
    2f16:	3e df       	rcall	.-388    	; 0x2d94 <__floatsisf>
    2f18:	28 e1       	ldi	r18, 0x18	; 24
    2f1a:	32 e7       	ldi	r19, 0x72	; 114
    2f1c:	41 e3       	ldi	r20, 0x31	; 49
    2f1e:	5f e3       	ldi	r21, 0x3F	; 63
    2f20:	16 d0       	rcall	.+44     	; 0x2f4e <__mulsf3x>
    2f22:	af 2d       	mov	r26, r15
    2f24:	98 01       	movw	r18, r16
    2f26:	ae 01       	movw	r20, r28
    2f28:	ff 90       	pop	r15
    2f2a:	0f 91       	pop	r16
    2f2c:	1f 91       	pop	r17
    2f2e:	cf 91       	pop	r28
    2f30:	df 91       	pop	r29
    2f32:	42 de       	rcall	.-892    	; 0x2bb8 <__addsf3x>
    2f34:	81 cf       	rjmp	.-254    	; 0x2e38 <__fp_round>

00002f36 <__mulsf3>:
    2f36:	0b d0       	rcall	.+22     	; 0x2f4e <__mulsf3x>
    2f38:	7f cf       	rjmp	.-258    	; 0x2e38 <__fp_round>
    2f3a:	70 df       	rcall	.-288    	; 0x2e1c <__fp_pscA>
    2f3c:	28 f0       	brcs	.+10     	; 0x2f48 <__mulsf3+0x12>
    2f3e:	75 df       	rcall	.-278    	; 0x2e2a <__fp_pscB>
    2f40:	18 f0       	brcs	.+6      	; 0x2f48 <__mulsf3+0x12>
    2f42:	95 23       	and	r25, r21
    2f44:	09 f0       	breq	.+2      	; 0x2f48 <__mulsf3+0x12>
    2f46:	61 cf       	rjmp	.-318    	; 0x2e0a <__fp_inf>
    2f48:	66 cf       	rjmp	.-308    	; 0x2e16 <__fp_nan>
    2f4a:	11 24       	eor	r1, r1
    2f4c:	a9 cf       	rjmp	.-174    	; 0x2ea0 <__fp_szero>

00002f4e <__mulsf3x>:
    2f4e:	85 df       	rcall	.-246    	; 0x2e5a <__fp_split3>
    2f50:	a0 f3       	brcs	.-24     	; 0x2f3a <__mulsf3+0x4>

00002f52 <__mulsf3_pse>:
    2f52:	95 9f       	mul	r25, r21
    2f54:	d1 f3       	breq	.-12     	; 0x2f4a <__mulsf3+0x14>
    2f56:	95 0f       	add	r25, r21
    2f58:	50 e0       	ldi	r21, 0x00	; 0
    2f5a:	55 1f       	adc	r21, r21
    2f5c:	62 9f       	mul	r22, r18
    2f5e:	f0 01       	movw	r30, r0
    2f60:	72 9f       	mul	r23, r18
    2f62:	bb 27       	eor	r27, r27
    2f64:	f0 0d       	add	r31, r0
    2f66:	b1 1d       	adc	r27, r1
    2f68:	63 9f       	mul	r22, r19
    2f6a:	aa 27       	eor	r26, r26
    2f6c:	f0 0d       	add	r31, r0
    2f6e:	b1 1d       	adc	r27, r1
    2f70:	aa 1f       	adc	r26, r26
    2f72:	64 9f       	mul	r22, r20
    2f74:	66 27       	eor	r22, r22
    2f76:	b0 0d       	add	r27, r0
    2f78:	a1 1d       	adc	r26, r1
    2f7a:	66 1f       	adc	r22, r22
    2f7c:	82 9f       	mul	r24, r18
    2f7e:	22 27       	eor	r18, r18
    2f80:	b0 0d       	add	r27, r0
    2f82:	a1 1d       	adc	r26, r1
    2f84:	62 1f       	adc	r22, r18
    2f86:	73 9f       	mul	r23, r19
    2f88:	b0 0d       	add	r27, r0
    2f8a:	a1 1d       	adc	r26, r1
    2f8c:	62 1f       	adc	r22, r18
    2f8e:	83 9f       	mul	r24, r19
    2f90:	a0 0d       	add	r26, r0
    2f92:	61 1d       	adc	r22, r1
    2f94:	22 1f       	adc	r18, r18
    2f96:	74 9f       	mul	r23, r20
    2f98:	33 27       	eor	r19, r19
    2f9a:	a0 0d       	add	r26, r0
    2f9c:	61 1d       	adc	r22, r1
    2f9e:	23 1f       	adc	r18, r19
    2fa0:	84 9f       	mul	r24, r20
    2fa2:	60 0d       	add	r22, r0
    2fa4:	21 1d       	adc	r18, r1
    2fa6:	82 2f       	mov	r24, r18
    2fa8:	76 2f       	mov	r23, r22
    2faa:	6a 2f       	mov	r22, r26
    2fac:	11 24       	eor	r1, r1
    2fae:	9f 57       	subi	r25, 0x7F	; 127
    2fb0:	50 40       	sbci	r21, 0x00	; 0
    2fb2:	8a f0       	brmi	.+34     	; 0x2fd6 <__mulsf3_pse+0x84>
    2fb4:	e1 f0       	breq	.+56     	; 0x2fee <__mulsf3_pse+0x9c>
    2fb6:	88 23       	and	r24, r24
    2fb8:	4a f0       	brmi	.+18     	; 0x2fcc <__mulsf3_pse+0x7a>
    2fba:	ee 0f       	add	r30, r30
    2fbc:	ff 1f       	adc	r31, r31
    2fbe:	bb 1f       	adc	r27, r27
    2fc0:	66 1f       	adc	r22, r22
    2fc2:	77 1f       	adc	r23, r23
    2fc4:	88 1f       	adc	r24, r24
    2fc6:	91 50       	subi	r25, 0x01	; 1
    2fc8:	50 40       	sbci	r21, 0x00	; 0
    2fca:	a9 f7       	brne	.-22     	; 0x2fb6 <__mulsf3_pse+0x64>
    2fcc:	9e 3f       	cpi	r25, 0xFE	; 254
    2fce:	51 05       	cpc	r21, r1
    2fd0:	70 f0       	brcs	.+28     	; 0x2fee <__mulsf3_pse+0x9c>
    2fd2:	1b cf       	rjmp	.-458    	; 0x2e0a <__fp_inf>
    2fd4:	65 cf       	rjmp	.-310    	; 0x2ea0 <__fp_szero>
    2fd6:	5f 3f       	cpi	r21, 0xFF	; 255
    2fd8:	ec f3       	brlt	.-6      	; 0x2fd4 <__mulsf3_pse+0x82>
    2fda:	98 3e       	cpi	r25, 0xE8	; 232
    2fdc:	dc f3       	brlt	.-10     	; 0x2fd4 <__mulsf3_pse+0x82>
    2fde:	86 95       	lsr	r24
    2fe0:	77 95       	ror	r23
    2fe2:	67 95       	ror	r22
    2fe4:	b7 95       	ror	r27
    2fe6:	f7 95       	ror	r31
    2fe8:	e7 95       	ror	r30
    2fea:	9f 5f       	subi	r25, 0xFF	; 255
    2fec:	c1 f7       	brne	.-16     	; 0x2fde <__mulsf3_pse+0x8c>
    2fee:	fe 2b       	or	r31, r30
    2ff0:	88 0f       	add	r24, r24
    2ff2:	91 1d       	adc	r25, r1
    2ff4:	96 95       	lsr	r25
    2ff6:	87 95       	ror	r24
    2ff8:	97 f9       	bld	r25, 7
    2ffa:	08 95       	ret

00002ffc <pow>:
    2ffc:	fa 01       	movw	r30, r20
    2ffe:	ee 0f       	add	r30, r30
    3000:	ff 1f       	adc	r31, r31
    3002:	30 96       	adiw	r30, 0x00	; 0
    3004:	21 05       	cpc	r18, r1
    3006:	31 05       	cpc	r19, r1
    3008:	99 f1       	breq	.+102    	; 0x3070 <pow+0x74>
    300a:	61 15       	cp	r22, r1
    300c:	71 05       	cpc	r23, r1
    300e:	61 f4       	brne	.+24     	; 0x3028 <pow+0x2c>
    3010:	80 38       	cpi	r24, 0x80	; 128
    3012:	bf e3       	ldi	r27, 0x3F	; 63
    3014:	9b 07       	cpc	r25, r27
    3016:	49 f1       	breq	.+82     	; 0x306a <pow+0x6e>
    3018:	68 94       	set
    301a:	90 38       	cpi	r25, 0x80	; 128
    301c:	81 05       	cpc	r24, r1
    301e:	61 f0       	breq	.+24     	; 0x3038 <pow+0x3c>
    3020:	80 38       	cpi	r24, 0x80	; 128
    3022:	bf ef       	ldi	r27, 0xFF	; 255
    3024:	9b 07       	cpc	r25, r27
    3026:	41 f0       	breq	.+16     	; 0x3038 <pow+0x3c>
    3028:	99 23       	and	r25, r25
    302a:	42 f5       	brpl	.+80     	; 0x307c <pow+0x80>
    302c:	ff 3f       	cpi	r31, 0xFF	; 255
    302e:	e1 05       	cpc	r30, r1
    3030:	31 05       	cpc	r19, r1
    3032:	21 05       	cpc	r18, r1
    3034:	11 f1       	breq	.+68     	; 0x307a <pow+0x7e>
    3036:	e8 94       	clt
    3038:	08 94       	sec
    303a:	e7 95       	ror	r30
    303c:	d9 01       	movw	r26, r18
    303e:	aa 23       	and	r26, r26
    3040:	29 f4       	brne	.+10     	; 0x304c <pow+0x50>
    3042:	ab 2f       	mov	r26, r27
    3044:	be 2f       	mov	r27, r30
    3046:	f8 5f       	subi	r31, 0xF8	; 248
    3048:	d0 f3       	brcs	.-12     	; 0x303e <pow+0x42>
    304a:	10 c0       	rjmp	.+32     	; 0x306c <pow+0x70>
    304c:	ff 5f       	subi	r31, 0xFF	; 255
    304e:	70 f4       	brcc	.+28     	; 0x306c <pow+0x70>
    3050:	a6 95       	lsr	r26
    3052:	e0 f7       	brcc	.-8      	; 0x304c <pow+0x50>
    3054:	f7 39       	cpi	r31, 0x97	; 151
    3056:	50 f0       	brcs	.+20     	; 0x306c <pow+0x70>
    3058:	19 f0       	breq	.+6      	; 0x3060 <pow+0x64>
    305a:	ff 3a       	cpi	r31, 0xAF	; 175
    305c:	38 f4       	brcc	.+14     	; 0x306c <pow+0x70>
    305e:	9f 77       	andi	r25, 0x7F	; 127
    3060:	9f 93       	push	r25
    3062:	0c d0       	rcall	.+24     	; 0x307c <pow+0x80>
    3064:	0f 90       	pop	r0
    3066:	07 fc       	sbrc	r0, 7
    3068:	90 58       	subi	r25, 0x80	; 128
    306a:	08 95       	ret
    306c:	3e f0       	brts	.+14     	; 0x307c <pow+0x80>
    306e:	d3 ce       	rjmp	.-602    	; 0x2e16 <__fp_nan>
    3070:	60 e0       	ldi	r22, 0x00	; 0
    3072:	70 e0       	ldi	r23, 0x00	; 0
    3074:	80 e8       	ldi	r24, 0x80	; 128
    3076:	9f e3       	ldi	r25, 0x3F	; 63
    3078:	08 95       	ret
    307a:	4f e7       	ldi	r20, 0x7F	; 127
    307c:	9f 77       	andi	r25, 0x7F	; 127
    307e:	5f 93       	push	r21
    3080:	4f 93       	push	r20
    3082:	3f 93       	push	r19
    3084:	2f 93       	push	r18
    3086:	17 df       	rcall	.-466    	; 0x2eb6 <log>
    3088:	2f 91       	pop	r18
    308a:	3f 91       	pop	r19
    308c:	4f 91       	pop	r20
    308e:	5f 91       	pop	r21
    3090:	52 df       	rcall	.-348    	; 0x2f36 <__mulsf3>
    3092:	05 c0       	rjmp	.+10     	; 0x309e <exp>
    3094:	19 f4       	brne	.+6      	; 0x309c <pow+0xa0>
    3096:	0e f0       	brts	.+2      	; 0x309a <pow+0x9e>
    3098:	b8 ce       	rjmp	.-656    	; 0x2e0a <__fp_inf>
    309a:	01 cf       	rjmp	.-510    	; 0x2e9e <__fp_zero>
    309c:	bc ce       	rjmp	.-648    	; 0x2e16 <__fp_nan>

0000309e <exp>:
    309e:	e5 de       	rcall	.-566    	; 0x2e6a <__fp_splitA>
    30a0:	c8 f3       	brcs	.-14     	; 0x3094 <pow+0x98>
    30a2:	96 38       	cpi	r25, 0x86	; 134
    30a4:	c0 f7       	brcc	.-16     	; 0x3096 <pow+0x9a>
    30a6:	07 f8       	bld	r0, 7
    30a8:	0f 92       	push	r0
    30aa:	e8 94       	clt
    30ac:	2b e3       	ldi	r18, 0x3B	; 59
    30ae:	3a ea       	ldi	r19, 0xAA	; 170
    30b0:	48 eb       	ldi	r20, 0xB8	; 184
    30b2:	5f e7       	ldi	r21, 0x7F	; 127
    30b4:	4e df       	rcall	.-356    	; 0x2f52 <__mulsf3_pse>
    30b6:	0f 92       	push	r0
    30b8:	0f 92       	push	r0
    30ba:	0f 92       	push	r0
    30bc:	4d b7       	in	r20, 0x3d	; 61
    30be:	5e b7       	in	r21, 0x3e	; 62
    30c0:	0f 92       	push	r0
    30c2:	89 d0       	rcall	.+274    	; 0x31d6 <modf>
    30c4:	e6 e5       	ldi	r30, 0x56	; 86
    30c6:	f2 e0       	ldi	r31, 0x02	; 2
    30c8:	24 d0       	rcall	.+72     	; 0x3112 <__fp_powser>
    30ca:	4f 91       	pop	r20
    30cc:	5f 91       	pop	r21
    30ce:	ef 91       	pop	r30
    30d0:	ff 91       	pop	r31
    30d2:	e5 95       	asr	r30
    30d4:	ee 1f       	adc	r30, r30
    30d6:	ff 1f       	adc	r31, r31
    30d8:	49 f0       	breq	.+18     	; 0x30ec <exp+0x4e>
    30da:	fe 57       	subi	r31, 0x7E	; 126
    30dc:	e0 68       	ori	r30, 0x80	; 128
    30de:	44 27       	eor	r20, r20
    30e0:	ee 0f       	add	r30, r30
    30e2:	44 1f       	adc	r20, r20
    30e4:	fa 95       	dec	r31
    30e6:	e1 f7       	brne	.-8      	; 0x30e0 <exp+0x42>
    30e8:	41 95       	neg	r20
    30ea:	55 0b       	sbc	r21, r21
    30ec:	40 d0       	rcall	.+128    	; 0x316e <ldexp>
    30ee:	0f 90       	pop	r0
    30f0:	07 fe       	sbrs	r0, 7
    30f2:	34 c0       	rjmp	.+104    	; 0x315c <inverse>
    30f4:	08 95       	ret

000030f6 <__fp_mpack>:
    30f6:	9f 3f       	cpi	r25, 0xFF	; 255
    30f8:	31 f0       	breq	.+12     	; 0x3106 <__fp_mpack_finite+0xc>

000030fa <__fp_mpack_finite>:
    30fa:	91 50       	subi	r25, 0x01	; 1
    30fc:	20 f4       	brcc	.+8      	; 0x3106 <__fp_mpack_finite+0xc>
    30fe:	87 95       	ror	r24
    3100:	77 95       	ror	r23
    3102:	67 95       	ror	r22
    3104:	b7 95       	ror	r27
    3106:	88 0f       	add	r24, r24
    3108:	91 1d       	adc	r25, r1
    310a:	96 95       	lsr	r25
    310c:	87 95       	ror	r24
    310e:	97 f9       	bld	r25, 7
    3110:	08 95       	ret

00003112 <__fp_powser>:
    3112:	df 93       	push	r29
    3114:	cf 93       	push	r28
    3116:	1f 93       	push	r17
    3118:	0f 93       	push	r16
    311a:	ff 92       	push	r15
    311c:	ef 92       	push	r14
    311e:	df 92       	push	r13
    3120:	7b 01       	movw	r14, r22
    3122:	8c 01       	movw	r16, r24
    3124:	68 94       	set
    3126:	05 c0       	rjmp	.+10     	; 0x3132 <__fp_powser+0x20>
    3128:	da 2e       	mov	r13, r26
    312a:	ef 01       	movw	r28, r30
    312c:	10 df       	rcall	.-480    	; 0x2f4e <__mulsf3x>
    312e:	fe 01       	movw	r30, r28
    3130:	e8 94       	clt
    3132:	a5 91       	lpm	r26, Z+
    3134:	25 91       	lpm	r18, Z+
    3136:	35 91       	lpm	r19, Z+
    3138:	45 91       	lpm	r20, Z+
    313a:	55 91       	lpm	r21, Z+
    313c:	ae f3       	brts	.-22     	; 0x3128 <__fp_powser+0x16>
    313e:	ef 01       	movw	r28, r30
    3140:	3b dd       	rcall	.-1418   	; 0x2bb8 <__addsf3x>
    3142:	fe 01       	movw	r30, r28
    3144:	97 01       	movw	r18, r14
    3146:	a8 01       	movw	r20, r16
    3148:	da 94       	dec	r13
    314a:	79 f7       	brne	.-34     	; 0x312a <__fp_powser+0x18>
    314c:	df 90       	pop	r13
    314e:	ef 90       	pop	r14
    3150:	ff 90       	pop	r15
    3152:	0f 91       	pop	r16
    3154:	1f 91       	pop	r17
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <inverse>:
    315c:	9b 01       	movw	r18, r22
    315e:	ac 01       	movw	r20, r24
    3160:	60 e0       	ldi	r22, 0x00	; 0
    3162:	70 e0       	ldi	r23, 0x00	; 0
    3164:	80 e8       	ldi	r24, 0x80	; 128
    3166:	9f e3       	ldi	r25, 0x3F	; 63
    3168:	7a cd       	rjmp	.-1292   	; 0x2c5e <__divsf3>
    316a:	4f ce       	rjmp	.-866    	; 0x2e0a <__fp_inf>
    316c:	c4 cf       	rjmp	.-120    	; 0x30f6 <__fp_mpack>

0000316e <ldexp>:
    316e:	7d de       	rcall	.-774    	; 0x2e6a <__fp_splitA>
    3170:	e8 f3       	brcs	.-6      	; 0x316c <inverse+0x10>
    3172:	99 23       	and	r25, r25
    3174:	d9 f3       	breq	.-10     	; 0x316c <inverse+0x10>
    3176:	94 0f       	add	r25, r20
    3178:	51 1d       	adc	r21, r1
    317a:	bb f3       	brvs	.-18     	; 0x316a <inverse+0xe>
    317c:	91 50       	subi	r25, 0x01	; 1
    317e:	50 40       	sbci	r21, 0x00	; 0
    3180:	94 f0       	brlt	.+36     	; 0x31a6 <ldexp+0x38>
    3182:	59 f0       	breq	.+22     	; 0x319a <ldexp+0x2c>
    3184:	88 23       	and	r24, r24
    3186:	32 f0       	brmi	.+12     	; 0x3194 <ldexp+0x26>
    3188:	66 0f       	add	r22, r22
    318a:	77 1f       	adc	r23, r23
    318c:	88 1f       	adc	r24, r24
    318e:	91 50       	subi	r25, 0x01	; 1
    3190:	50 40       	sbci	r21, 0x00	; 0
    3192:	c1 f7       	brne	.-16     	; 0x3184 <ldexp+0x16>
    3194:	9e 3f       	cpi	r25, 0xFE	; 254
    3196:	51 05       	cpc	r21, r1
    3198:	44 f7       	brge	.-48     	; 0x316a <inverse+0xe>
    319a:	88 0f       	add	r24, r24
    319c:	91 1d       	adc	r25, r1
    319e:	96 95       	lsr	r25
    31a0:	87 95       	ror	r24
    31a2:	97 f9       	bld	r25, 7
    31a4:	08 95       	ret
    31a6:	5f 3f       	cpi	r21, 0xFF	; 255
    31a8:	ac f0       	brlt	.+42     	; 0x31d4 <ldexp+0x66>
    31aa:	98 3e       	cpi	r25, 0xE8	; 232
    31ac:	9c f0       	brlt	.+38     	; 0x31d4 <ldexp+0x66>
    31ae:	bb 27       	eor	r27, r27
    31b0:	86 95       	lsr	r24
    31b2:	77 95       	ror	r23
    31b4:	67 95       	ror	r22
    31b6:	b7 95       	ror	r27
    31b8:	08 f4       	brcc	.+2      	; 0x31bc <ldexp+0x4e>
    31ba:	b1 60       	ori	r27, 0x01	; 1
    31bc:	93 95       	inc	r25
    31be:	c1 f7       	brne	.-16     	; 0x31b0 <ldexp+0x42>
    31c0:	bb 0f       	add	r27, r27
    31c2:	58 f7       	brcc	.-42     	; 0x319a <ldexp+0x2c>
    31c4:	11 f4       	brne	.+4      	; 0x31ca <ldexp+0x5c>
    31c6:	60 ff       	sbrs	r22, 0
    31c8:	e8 cf       	rjmp	.-48     	; 0x319a <ldexp+0x2c>
    31ca:	6f 5f       	subi	r22, 0xFF	; 255
    31cc:	7f 4f       	sbci	r23, 0xFF	; 255
    31ce:	8f 4f       	sbci	r24, 0xFF	; 255
    31d0:	9f 4f       	sbci	r25, 0xFF	; 255
    31d2:	e3 cf       	rjmp	.-58     	; 0x319a <ldexp+0x2c>
    31d4:	65 ce       	rjmp	.-822    	; 0x2ea0 <__fp_szero>

000031d6 <modf>:
    31d6:	fa 01       	movw	r30, r20
    31d8:	dc 01       	movw	r26, r24
    31da:	aa 0f       	add	r26, r26
    31dc:	bb 1f       	adc	r27, r27
    31de:	9b 01       	movw	r18, r22
    31e0:	ac 01       	movw	r20, r24
    31e2:	bf 57       	subi	r27, 0x7F	; 127
    31e4:	28 f4       	brcc	.+10     	; 0x31f0 <modf+0x1a>
    31e6:	22 27       	eor	r18, r18
    31e8:	33 27       	eor	r19, r19
    31ea:	44 27       	eor	r20, r20
    31ec:	50 78       	andi	r21, 0x80	; 128
    31ee:	1f c0       	rjmp	.+62     	; 0x322e <modf+0x58>
    31f0:	b7 51       	subi	r27, 0x17	; 23
    31f2:	88 f4       	brcc	.+34     	; 0x3216 <modf+0x40>
    31f4:	ab 2f       	mov	r26, r27
    31f6:	00 24       	eor	r0, r0
    31f8:	46 95       	lsr	r20
    31fa:	37 95       	ror	r19
    31fc:	27 95       	ror	r18
    31fe:	01 1c       	adc	r0, r1
    3200:	a3 95       	inc	r26
    3202:	d2 f3       	brmi	.-12     	; 0x31f8 <modf+0x22>
    3204:	00 20       	and	r0, r0
    3206:	69 f0       	breq	.+26     	; 0x3222 <modf+0x4c>
    3208:	22 0f       	add	r18, r18
    320a:	33 1f       	adc	r19, r19
    320c:	44 1f       	adc	r20, r20
    320e:	b3 95       	inc	r27
    3210:	da f3       	brmi	.-10     	; 0x3208 <modf+0x32>
    3212:	0d d0       	rcall	.+26     	; 0x322e <modf+0x58>
    3214:	bf cc       	rjmp	.-1666   	; 0x2b94 <__subsf3>
    3216:	61 30       	cpi	r22, 0x01	; 1
    3218:	71 05       	cpc	r23, r1
    321a:	a0 e8       	ldi	r26, 0x80	; 128
    321c:	8a 07       	cpc	r24, r26
    321e:	b9 46       	sbci	r27, 0x69	; 105
    3220:	30 f4       	brcc	.+12     	; 0x322e <modf+0x58>
    3222:	9b 01       	movw	r18, r22
    3224:	ac 01       	movw	r20, r24
    3226:	66 27       	eor	r22, r22
    3228:	77 27       	eor	r23, r23
    322a:	88 27       	eor	r24, r24
    322c:	90 78       	andi	r25, 0x80	; 128
    322e:	30 96       	adiw	r30, 0x00	; 0
    3230:	21 f0       	breq	.+8      	; 0x323a <modf+0x64>
    3232:	20 83       	st	Z, r18
    3234:	31 83       	std	Z+1, r19	; 0x01
    3236:	42 83       	std	Z+2, r20	; 0x02
    3238:	53 83       	std	Z+3, r21	; 0x03
    323a:	08 95       	ret

0000323c <vfprintf>:
    323c:	2f 92       	push	r2
    323e:	3f 92       	push	r3
    3240:	4f 92       	push	r4
    3242:	5f 92       	push	r5
    3244:	6f 92       	push	r6
    3246:	7f 92       	push	r7
    3248:	8f 92       	push	r8
    324a:	9f 92       	push	r9
    324c:	af 92       	push	r10
    324e:	bf 92       	push	r11
    3250:	cf 92       	push	r12
    3252:	df 92       	push	r13
    3254:	ef 92       	push	r14
    3256:	ff 92       	push	r15
    3258:	0f 93       	push	r16
    325a:	1f 93       	push	r17
    325c:	cf 93       	push	r28
    325e:	df 93       	push	r29
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
    3264:	60 97       	sbiw	r28, 0x10	; 16
    3266:	cd bf       	out	0x3d, r28	; 61
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	7c 01       	movw	r14, r24
    326c:	1b 01       	movw	r2, r22
    326e:	6a 01       	movw	r12, r20
    3270:	fc 01       	movw	r30, r24
    3272:	16 82       	std	Z+6, r1	; 0x06
    3274:	17 82       	std	Z+7, r1	; 0x07
    3276:	83 81       	ldd	r24, Z+3	; 0x03
    3278:	81 ff       	sbrs	r24, 1
    327a:	2a c3       	rjmp	.+1620   	; 0x38d0 <vfprintf+0x694>
    327c:	9e 01       	movw	r18, r28
    327e:	2f 5f       	subi	r18, 0xFF	; 255
    3280:	3f 4f       	sbci	r19, 0xFF	; 255
    3282:	39 01       	movw	r6, r18
    3284:	f7 01       	movw	r30, r14
    3286:	93 81       	ldd	r25, Z+3	; 0x03
    3288:	f1 01       	movw	r30, r2
    328a:	93 fd       	sbrc	r25, 3
    328c:	85 91       	lpm	r24, Z+
    328e:	93 ff       	sbrs	r25, 3
    3290:	81 91       	ld	r24, Z+
    3292:	1f 01       	movw	r2, r30
    3294:	88 23       	and	r24, r24
    3296:	09 f4       	brne	.+2      	; 0x329a <vfprintf+0x5e>
    3298:	17 c3       	rjmp	.+1582   	; 0x38c8 <vfprintf+0x68c>
    329a:	85 32       	cpi	r24, 0x25	; 37
    329c:	39 f4       	brne	.+14     	; 0x32ac <vfprintf+0x70>
    329e:	93 fd       	sbrc	r25, 3
    32a0:	85 91       	lpm	r24, Z+
    32a2:	93 ff       	sbrs	r25, 3
    32a4:	81 91       	ld	r24, Z+
    32a6:	1f 01       	movw	r2, r30
    32a8:	85 32       	cpi	r24, 0x25	; 37
    32aa:	31 f4       	brne	.+12     	; 0x32b8 <vfprintf+0x7c>
    32ac:	b7 01       	movw	r22, r14
    32ae:	90 e0       	ldi	r25, 0x00	; 0
    32b0:	7d d5       	rcall	.+2810   	; 0x3dac <fputc>
    32b2:	56 01       	movw	r10, r12
    32b4:	65 01       	movw	r12, r10
    32b6:	e6 cf       	rjmp	.-52     	; 0x3284 <vfprintf+0x48>
    32b8:	10 e0       	ldi	r17, 0x00	; 0
    32ba:	51 2c       	mov	r5, r1
    32bc:	91 2c       	mov	r9, r1
    32be:	ff e1       	ldi	r31, 0x1F	; 31
    32c0:	f9 15       	cp	r31, r9
    32c2:	d8 f0       	brcs	.+54     	; 0x32fa <vfprintf+0xbe>
    32c4:	8b 32       	cpi	r24, 0x2B	; 43
    32c6:	79 f0       	breq	.+30     	; 0x32e6 <vfprintf+0xaa>
    32c8:	38 f4       	brcc	.+14     	; 0x32d8 <vfprintf+0x9c>
    32ca:	80 32       	cpi	r24, 0x20	; 32
    32cc:	79 f0       	breq	.+30     	; 0x32ec <vfprintf+0xb0>
    32ce:	83 32       	cpi	r24, 0x23	; 35
    32d0:	a1 f4       	brne	.+40     	; 0x32fa <vfprintf+0xbe>
    32d2:	f9 2d       	mov	r31, r9
    32d4:	f0 61       	ori	r31, 0x10	; 16
    32d6:	2e c0       	rjmp	.+92     	; 0x3334 <vfprintf+0xf8>
    32d8:	8d 32       	cpi	r24, 0x2D	; 45
    32da:	61 f0       	breq	.+24     	; 0x32f4 <vfprintf+0xb8>
    32dc:	80 33       	cpi	r24, 0x30	; 48
    32de:	69 f4       	brne	.+26     	; 0x32fa <vfprintf+0xbe>
    32e0:	29 2d       	mov	r18, r9
    32e2:	21 60       	ori	r18, 0x01	; 1
    32e4:	2d c0       	rjmp	.+90     	; 0x3340 <vfprintf+0x104>
    32e6:	39 2d       	mov	r19, r9
    32e8:	32 60       	ori	r19, 0x02	; 2
    32ea:	93 2e       	mov	r9, r19
    32ec:	89 2d       	mov	r24, r9
    32ee:	84 60       	ori	r24, 0x04	; 4
    32f0:	98 2e       	mov	r9, r24
    32f2:	2a c0       	rjmp	.+84     	; 0x3348 <vfprintf+0x10c>
    32f4:	e9 2d       	mov	r30, r9
    32f6:	e8 60       	ori	r30, 0x08	; 8
    32f8:	15 c0       	rjmp	.+42     	; 0x3324 <vfprintf+0xe8>
    32fa:	97 fc       	sbrc	r9, 7
    32fc:	2d c0       	rjmp	.+90     	; 0x3358 <vfprintf+0x11c>
    32fe:	20 ed       	ldi	r18, 0xD0	; 208
    3300:	28 0f       	add	r18, r24
    3302:	2a 30       	cpi	r18, 0x0A	; 10
    3304:	88 f4       	brcc	.+34     	; 0x3328 <vfprintf+0xec>
    3306:	96 fe       	sbrs	r9, 6
    3308:	06 c0       	rjmp	.+12     	; 0x3316 <vfprintf+0xda>
    330a:	3a e0       	ldi	r19, 0x0A	; 10
    330c:	13 9f       	mul	r17, r19
    330e:	20 0d       	add	r18, r0
    3310:	11 24       	eor	r1, r1
    3312:	12 2f       	mov	r17, r18
    3314:	19 c0       	rjmp	.+50     	; 0x3348 <vfprintf+0x10c>
    3316:	8a e0       	ldi	r24, 0x0A	; 10
    3318:	58 9e       	mul	r5, r24
    331a:	20 0d       	add	r18, r0
    331c:	11 24       	eor	r1, r1
    331e:	52 2e       	mov	r5, r18
    3320:	e9 2d       	mov	r30, r9
    3322:	e0 62       	ori	r30, 0x20	; 32
    3324:	9e 2e       	mov	r9, r30
    3326:	10 c0       	rjmp	.+32     	; 0x3348 <vfprintf+0x10c>
    3328:	8e 32       	cpi	r24, 0x2E	; 46
    332a:	31 f4       	brne	.+12     	; 0x3338 <vfprintf+0xfc>
    332c:	96 fc       	sbrc	r9, 6
    332e:	cc c2       	rjmp	.+1432   	; 0x38c8 <vfprintf+0x68c>
    3330:	f9 2d       	mov	r31, r9
    3332:	f0 64       	ori	r31, 0x40	; 64
    3334:	9f 2e       	mov	r9, r31
    3336:	08 c0       	rjmp	.+16     	; 0x3348 <vfprintf+0x10c>
    3338:	8c 36       	cpi	r24, 0x6C	; 108
    333a:	21 f4       	brne	.+8      	; 0x3344 <vfprintf+0x108>
    333c:	29 2d       	mov	r18, r9
    333e:	20 68       	ori	r18, 0x80	; 128
    3340:	92 2e       	mov	r9, r18
    3342:	02 c0       	rjmp	.+4      	; 0x3348 <vfprintf+0x10c>
    3344:	88 36       	cpi	r24, 0x68	; 104
    3346:	41 f4       	brne	.+16     	; 0x3358 <vfprintf+0x11c>
    3348:	f1 01       	movw	r30, r2
    334a:	93 fd       	sbrc	r25, 3
    334c:	85 91       	lpm	r24, Z+
    334e:	93 ff       	sbrs	r25, 3
    3350:	81 91       	ld	r24, Z+
    3352:	1f 01       	movw	r2, r30
    3354:	81 11       	cpse	r24, r1
    3356:	b3 cf       	rjmp	.-154    	; 0x32be <vfprintf+0x82>
    3358:	9b eb       	ldi	r25, 0xBB	; 187
    335a:	98 0f       	add	r25, r24
    335c:	93 30       	cpi	r25, 0x03	; 3
    335e:	20 f4       	brcc	.+8      	; 0x3368 <vfprintf+0x12c>
    3360:	99 2d       	mov	r25, r9
    3362:	90 61       	ori	r25, 0x10	; 16
    3364:	80 5e       	subi	r24, 0xE0	; 224
    3366:	07 c0       	rjmp	.+14     	; 0x3376 <vfprintf+0x13a>
    3368:	9b e9       	ldi	r25, 0x9B	; 155
    336a:	98 0f       	add	r25, r24
    336c:	93 30       	cpi	r25, 0x03	; 3
    336e:	08 f0       	brcs	.+2      	; 0x3372 <vfprintf+0x136>
    3370:	59 c1       	rjmp	.+690    	; 0x3624 <vfprintf+0x3e8>
    3372:	99 2d       	mov	r25, r9
    3374:	9f 7e       	andi	r25, 0xEF	; 239
    3376:	96 ff       	sbrs	r25, 6
    3378:	16 e0       	ldi	r17, 0x06	; 6
    337a:	9f 73       	andi	r25, 0x3F	; 63
    337c:	99 2e       	mov	r9, r25
    337e:	85 36       	cpi	r24, 0x65	; 101
    3380:	19 f4       	brne	.+6      	; 0x3388 <vfprintf+0x14c>
    3382:	90 64       	ori	r25, 0x40	; 64
    3384:	99 2e       	mov	r9, r25
    3386:	08 c0       	rjmp	.+16     	; 0x3398 <vfprintf+0x15c>
    3388:	86 36       	cpi	r24, 0x66	; 102
    338a:	21 f4       	brne	.+8      	; 0x3394 <vfprintf+0x158>
    338c:	39 2f       	mov	r19, r25
    338e:	30 68       	ori	r19, 0x80	; 128
    3390:	93 2e       	mov	r9, r19
    3392:	02 c0       	rjmp	.+4      	; 0x3398 <vfprintf+0x15c>
    3394:	11 11       	cpse	r17, r1
    3396:	11 50       	subi	r17, 0x01	; 1
    3398:	97 fe       	sbrs	r9, 7
    339a:	07 c0       	rjmp	.+14     	; 0x33aa <vfprintf+0x16e>
    339c:	1c 33       	cpi	r17, 0x3C	; 60
    339e:	50 f4       	brcc	.+20     	; 0x33b4 <vfprintf+0x178>
    33a0:	44 24       	eor	r4, r4
    33a2:	43 94       	inc	r4
    33a4:	41 0e       	add	r4, r17
    33a6:	27 e0       	ldi	r18, 0x07	; 7
    33a8:	0b c0       	rjmp	.+22     	; 0x33c0 <vfprintf+0x184>
    33aa:	18 30       	cpi	r17, 0x08	; 8
    33ac:	38 f0       	brcs	.+14     	; 0x33bc <vfprintf+0x180>
    33ae:	27 e0       	ldi	r18, 0x07	; 7
    33b0:	17 e0       	ldi	r17, 0x07	; 7
    33b2:	05 c0       	rjmp	.+10     	; 0x33be <vfprintf+0x182>
    33b4:	27 e0       	ldi	r18, 0x07	; 7
    33b6:	9c e3       	ldi	r25, 0x3C	; 60
    33b8:	49 2e       	mov	r4, r25
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <vfprintf+0x184>
    33bc:	21 2f       	mov	r18, r17
    33be:	41 2c       	mov	r4, r1
    33c0:	56 01       	movw	r10, r12
    33c2:	84 e0       	ldi	r24, 0x04	; 4
    33c4:	a8 0e       	add	r10, r24
    33c6:	b1 1c       	adc	r11, r1
    33c8:	f6 01       	movw	r30, r12
    33ca:	60 81       	ld	r22, Z
    33cc:	71 81       	ldd	r23, Z+1	; 0x01
    33ce:	82 81       	ldd	r24, Z+2	; 0x02
    33d0:	93 81       	ldd	r25, Z+3	; 0x03
    33d2:	04 2d       	mov	r16, r4
    33d4:	a3 01       	movw	r20, r6
    33d6:	b2 d3       	rcall	.+1892   	; 0x3b3c <__ftoa_engine>
    33d8:	6c 01       	movw	r12, r24
    33da:	f9 81       	ldd	r31, Y+1	; 0x01
    33dc:	fc 87       	std	Y+12, r31	; 0x0c
    33de:	f0 ff       	sbrs	r31, 0
    33e0:	02 c0       	rjmp	.+4      	; 0x33e6 <vfprintf+0x1aa>
    33e2:	f3 ff       	sbrs	r31, 3
    33e4:	06 c0       	rjmp	.+12     	; 0x33f2 <vfprintf+0x1b6>
    33e6:	91 fc       	sbrc	r9, 1
    33e8:	06 c0       	rjmp	.+12     	; 0x33f6 <vfprintf+0x1ba>
    33ea:	92 fe       	sbrs	r9, 2
    33ec:	06 c0       	rjmp	.+12     	; 0x33fa <vfprintf+0x1be>
    33ee:	00 e2       	ldi	r16, 0x20	; 32
    33f0:	05 c0       	rjmp	.+10     	; 0x33fc <vfprintf+0x1c0>
    33f2:	0d e2       	ldi	r16, 0x2D	; 45
    33f4:	03 c0       	rjmp	.+6      	; 0x33fc <vfprintf+0x1c0>
    33f6:	0b e2       	ldi	r16, 0x2B	; 43
    33f8:	01 c0       	rjmp	.+2      	; 0x33fc <vfprintf+0x1c0>
    33fa:	00 e0       	ldi	r16, 0x00	; 0
    33fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    33fe:	8c 70       	andi	r24, 0x0C	; 12
    3400:	19 f0       	breq	.+6      	; 0x3408 <vfprintf+0x1cc>
    3402:	01 11       	cpse	r16, r1
    3404:	43 c2       	rjmp	.+1158   	; 0x388c <vfprintf+0x650>
    3406:	80 c2       	rjmp	.+1280   	; 0x3908 <vfprintf+0x6cc>
    3408:	97 fe       	sbrs	r9, 7
    340a:	10 c0       	rjmp	.+32     	; 0x342c <vfprintf+0x1f0>
    340c:	4c 0c       	add	r4, r12
    340e:	fc 85       	ldd	r31, Y+12	; 0x0c
    3410:	f4 ff       	sbrs	r31, 4
    3412:	04 c0       	rjmp	.+8      	; 0x341c <vfprintf+0x1e0>
    3414:	8a 81       	ldd	r24, Y+2	; 0x02
    3416:	81 33       	cpi	r24, 0x31	; 49
    3418:	09 f4       	brne	.+2      	; 0x341c <vfprintf+0x1e0>
    341a:	4a 94       	dec	r4
    341c:	14 14       	cp	r1, r4
    341e:	74 f5       	brge	.+92     	; 0x347c <vfprintf+0x240>
    3420:	28 e0       	ldi	r18, 0x08	; 8
    3422:	24 15       	cp	r18, r4
    3424:	78 f5       	brcc	.+94     	; 0x3484 <vfprintf+0x248>
    3426:	88 e0       	ldi	r24, 0x08	; 8
    3428:	48 2e       	mov	r4, r24
    342a:	2c c0       	rjmp	.+88     	; 0x3484 <vfprintf+0x248>
    342c:	96 fc       	sbrc	r9, 6
    342e:	2a c0       	rjmp	.+84     	; 0x3484 <vfprintf+0x248>
    3430:	81 2f       	mov	r24, r17
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	8c 15       	cp	r24, r12
    3436:	9d 05       	cpc	r25, r13
    3438:	9c f0       	brlt	.+38     	; 0x3460 <vfprintf+0x224>
    343a:	3c ef       	ldi	r19, 0xFC	; 252
    343c:	c3 16       	cp	r12, r19
    343e:	3f ef       	ldi	r19, 0xFF	; 255
    3440:	d3 06       	cpc	r13, r19
    3442:	74 f0       	brlt	.+28     	; 0x3460 <vfprintf+0x224>
    3444:	89 2d       	mov	r24, r9
    3446:	80 68       	ori	r24, 0x80	; 128
    3448:	98 2e       	mov	r9, r24
    344a:	0a c0       	rjmp	.+20     	; 0x3460 <vfprintf+0x224>
    344c:	e2 e0       	ldi	r30, 0x02	; 2
    344e:	f0 e0       	ldi	r31, 0x00	; 0
    3450:	ec 0f       	add	r30, r28
    3452:	fd 1f       	adc	r31, r29
    3454:	e1 0f       	add	r30, r17
    3456:	f1 1d       	adc	r31, r1
    3458:	80 81       	ld	r24, Z
    345a:	80 33       	cpi	r24, 0x30	; 48
    345c:	19 f4       	brne	.+6      	; 0x3464 <vfprintf+0x228>
    345e:	11 50       	subi	r17, 0x01	; 1
    3460:	11 11       	cpse	r17, r1
    3462:	f4 cf       	rjmp	.-24     	; 0x344c <vfprintf+0x210>
    3464:	97 fe       	sbrs	r9, 7
    3466:	0e c0       	rjmp	.+28     	; 0x3484 <vfprintf+0x248>
    3468:	44 24       	eor	r4, r4
    346a:	43 94       	inc	r4
    346c:	41 0e       	add	r4, r17
    346e:	81 2f       	mov	r24, r17
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	c8 16       	cp	r12, r24
    3474:	d9 06       	cpc	r13, r25
    3476:	2c f4       	brge	.+10     	; 0x3482 <vfprintf+0x246>
    3478:	1c 19       	sub	r17, r12
    347a:	04 c0       	rjmp	.+8      	; 0x3484 <vfprintf+0x248>
    347c:	44 24       	eor	r4, r4
    347e:	43 94       	inc	r4
    3480:	01 c0       	rjmp	.+2      	; 0x3484 <vfprintf+0x248>
    3482:	10 e0       	ldi	r17, 0x00	; 0
    3484:	97 fe       	sbrs	r9, 7
    3486:	06 c0       	rjmp	.+12     	; 0x3494 <vfprintf+0x258>
    3488:	1c 14       	cp	r1, r12
    348a:	1d 04       	cpc	r1, r13
    348c:	34 f4       	brge	.+12     	; 0x349a <vfprintf+0x25e>
    348e:	c6 01       	movw	r24, r12
    3490:	01 96       	adiw	r24, 0x01	; 1
    3492:	05 c0       	rjmp	.+10     	; 0x349e <vfprintf+0x262>
    3494:	85 e0       	ldi	r24, 0x05	; 5
    3496:	90 e0       	ldi	r25, 0x00	; 0
    3498:	02 c0       	rjmp	.+4      	; 0x349e <vfprintf+0x262>
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	01 11       	cpse	r16, r1
    34a0:	01 96       	adiw	r24, 0x01	; 1
    34a2:	11 23       	and	r17, r17
    34a4:	31 f0       	breq	.+12     	; 0x34b2 <vfprintf+0x276>
    34a6:	21 2f       	mov	r18, r17
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	2f 5f       	subi	r18, 0xFF	; 255
    34ac:	3f 4f       	sbci	r19, 0xFF	; 255
    34ae:	82 0f       	add	r24, r18
    34b0:	93 1f       	adc	r25, r19
    34b2:	25 2d       	mov	r18, r5
    34b4:	30 e0       	ldi	r19, 0x00	; 0
    34b6:	82 17       	cp	r24, r18
    34b8:	93 07       	cpc	r25, r19
    34ba:	14 f4       	brge	.+4      	; 0x34c0 <vfprintf+0x284>
    34bc:	58 1a       	sub	r5, r24
    34be:	01 c0       	rjmp	.+2      	; 0x34c2 <vfprintf+0x286>
    34c0:	51 2c       	mov	r5, r1
    34c2:	89 2d       	mov	r24, r9
    34c4:	89 70       	andi	r24, 0x09	; 9
    34c6:	41 f4       	brne	.+16     	; 0x34d8 <vfprintf+0x29c>
    34c8:	55 20       	and	r5, r5
    34ca:	31 f0       	breq	.+12     	; 0x34d8 <vfprintf+0x29c>
    34cc:	b7 01       	movw	r22, r14
    34ce:	80 e2       	ldi	r24, 0x20	; 32
    34d0:	90 e0       	ldi	r25, 0x00	; 0
    34d2:	6c d4       	rcall	.+2264   	; 0x3dac <fputc>
    34d4:	5a 94       	dec	r5
    34d6:	f8 cf       	rjmp	.-16     	; 0x34c8 <vfprintf+0x28c>
    34d8:	00 23       	and	r16, r16
    34da:	21 f0       	breq	.+8      	; 0x34e4 <vfprintf+0x2a8>
    34dc:	b7 01       	movw	r22, r14
    34de:	80 2f       	mov	r24, r16
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	64 d4       	rcall	.+2248   	; 0x3dac <fputc>
    34e4:	93 fc       	sbrc	r9, 3
    34e6:	08 c0       	rjmp	.+16     	; 0x34f8 <vfprintf+0x2bc>
    34e8:	55 20       	and	r5, r5
    34ea:	31 f0       	breq	.+12     	; 0x34f8 <vfprintf+0x2bc>
    34ec:	b7 01       	movw	r22, r14
    34ee:	80 e3       	ldi	r24, 0x30	; 48
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	5c d4       	rcall	.+2232   	; 0x3dac <fputc>
    34f4:	5a 94       	dec	r5
    34f6:	f8 cf       	rjmp	.-16     	; 0x34e8 <vfprintf+0x2ac>
    34f8:	97 fe       	sbrs	r9, 7
    34fa:	4a c0       	rjmp	.+148    	; 0x3590 <vfprintf+0x354>
    34fc:	46 01       	movw	r8, r12
    34fe:	d7 fe       	sbrs	r13, 7
    3500:	02 c0       	rjmp	.+4      	; 0x3506 <vfprintf+0x2ca>
    3502:	81 2c       	mov	r8, r1
    3504:	91 2c       	mov	r9, r1
    3506:	c6 01       	movw	r24, r12
    3508:	88 19       	sub	r24, r8
    350a:	99 09       	sbc	r25, r9
    350c:	f3 01       	movw	r30, r6
    350e:	e8 0f       	add	r30, r24
    3510:	f9 1f       	adc	r31, r25
    3512:	ed 87       	std	Y+13, r30	; 0x0d
    3514:	fe 87       	std	Y+14, r31	; 0x0e
    3516:	96 01       	movw	r18, r12
    3518:	24 19       	sub	r18, r4
    351a:	31 09       	sbc	r19, r1
    351c:	2f 87       	std	Y+15, r18	; 0x0f
    351e:	38 8b       	std	Y+16, r19	; 0x10
    3520:	01 2f       	mov	r16, r17
    3522:	10 e0       	ldi	r17, 0x00	; 0
    3524:	11 95       	neg	r17
    3526:	01 95       	neg	r16
    3528:	11 09       	sbc	r17, r1
    352a:	3f ef       	ldi	r19, 0xFF	; 255
    352c:	83 16       	cp	r8, r19
    352e:	93 06       	cpc	r9, r19
    3530:	21 f4       	brne	.+8      	; 0x353a <vfprintf+0x2fe>
    3532:	b7 01       	movw	r22, r14
    3534:	8e e2       	ldi	r24, 0x2E	; 46
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	39 d4       	rcall	.+2162   	; 0x3dac <fputc>
    353a:	c8 14       	cp	r12, r8
    353c:	d9 04       	cpc	r13, r9
    353e:	4c f0       	brlt	.+18     	; 0x3552 <vfprintf+0x316>
    3540:	8f 85       	ldd	r24, Y+15	; 0x0f
    3542:	98 89       	ldd	r25, Y+16	; 0x10
    3544:	88 15       	cp	r24, r8
    3546:	99 05       	cpc	r25, r9
    3548:	24 f4       	brge	.+8      	; 0x3552 <vfprintf+0x316>
    354a:	ed 85       	ldd	r30, Y+13	; 0x0d
    354c:	fe 85       	ldd	r31, Y+14	; 0x0e
    354e:	81 81       	ldd	r24, Z+1	; 0x01
    3550:	01 c0       	rjmp	.+2      	; 0x3554 <vfprintf+0x318>
    3552:	80 e3       	ldi	r24, 0x30	; 48
    3554:	f1 e0       	ldi	r31, 0x01	; 1
    3556:	8f 1a       	sub	r8, r31
    3558:	91 08       	sbc	r9, r1
    355a:	2d 85       	ldd	r18, Y+13	; 0x0d
    355c:	3e 85       	ldd	r19, Y+14	; 0x0e
    355e:	2f 5f       	subi	r18, 0xFF	; 255
    3560:	3f 4f       	sbci	r19, 0xFF	; 255
    3562:	2d 87       	std	Y+13, r18	; 0x0d
    3564:	3e 87       	std	Y+14, r19	; 0x0e
    3566:	80 16       	cp	r8, r16
    3568:	91 06       	cpc	r9, r17
    356a:	24 f0       	brlt	.+8      	; 0x3574 <vfprintf+0x338>
    356c:	b7 01       	movw	r22, r14
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	1d d4       	rcall	.+2106   	; 0x3dac <fputc>
    3572:	db cf       	rjmp	.-74     	; 0x352a <vfprintf+0x2ee>
    3574:	c8 14       	cp	r12, r8
    3576:	d9 04       	cpc	r13, r9
    3578:	41 f4       	brne	.+16     	; 0x358a <vfprintf+0x34e>
    357a:	9a 81       	ldd	r25, Y+2	; 0x02
    357c:	96 33       	cpi	r25, 0x36	; 54
    357e:	20 f4       	brcc	.+8      	; 0x3588 <vfprintf+0x34c>
    3580:	95 33       	cpi	r25, 0x35	; 53
    3582:	19 f4       	brne	.+6      	; 0x358a <vfprintf+0x34e>
    3584:	3c 85       	ldd	r19, Y+12	; 0x0c
    3586:	34 ff       	sbrs	r19, 4
    3588:	81 e3       	ldi	r24, 0x31	; 49
    358a:	b7 01       	movw	r22, r14
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	48 c0       	rjmp	.+144    	; 0x3620 <vfprintf+0x3e4>
    3590:	8a 81       	ldd	r24, Y+2	; 0x02
    3592:	81 33       	cpi	r24, 0x31	; 49
    3594:	19 f0       	breq	.+6      	; 0x359c <vfprintf+0x360>
    3596:	9c 85       	ldd	r25, Y+12	; 0x0c
    3598:	9f 7e       	andi	r25, 0xEF	; 239
    359a:	9c 87       	std	Y+12, r25	; 0x0c
    359c:	b7 01       	movw	r22, r14
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	05 d4       	rcall	.+2058   	; 0x3dac <fputc>
    35a2:	11 11       	cpse	r17, r1
    35a4:	05 c0       	rjmp	.+10     	; 0x35b0 <vfprintf+0x374>
    35a6:	94 fc       	sbrc	r9, 4
    35a8:	16 c0       	rjmp	.+44     	; 0x35d6 <vfprintf+0x39a>
    35aa:	85 e6       	ldi	r24, 0x65	; 101
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	15 c0       	rjmp	.+42     	; 0x35da <vfprintf+0x39e>
    35b0:	b7 01       	movw	r22, r14
    35b2:	8e e2       	ldi	r24, 0x2E	; 46
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	fa d3       	rcall	.+2036   	; 0x3dac <fputc>
    35b8:	1e 5f       	subi	r17, 0xFE	; 254
    35ba:	82 e0       	ldi	r24, 0x02	; 2
    35bc:	01 e0       	ldi	r16, 0x01	; 1
    35be:	08 0f       	add	r16, r24
    35c0:	f3 01       	movw	r30, r6
    35c2:	e8 0f       	add	r30, r24
    35c4:	f1 1d       	adc	r31, r1
    35c6:	80 81       	ld	r24, Z
    35c8:	b7 01       	movw	r22, r14
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	ef d3       	rcall	.+2014   	; 0x3dac <fputc>
    35ce:	80 2f       	mov	r24, r16
    35d0:	01 13       	cpse	r16, r17
    35d2:	f4 cf       	rjmp	.-24     	; 0x35bc <vfprintf+0x380>
    35d4:	e8 cf       	rjmp	.-48     	; 0x35a6 <vfprintf+0x36a>
    35d6:	85 e4       	ldi	r24, 0x45	; 69
    35d8:	90 e0       	ldi	r25, 0x00	; 0
    35da:	b7 01       	movw	r22, r14
    35dc:	e7 d3       	rcall	.+1998   	; 0x3dac <fputc>
    35de:	d7 fc       	sbrc	r13, 7
    35e0:	06 c0       	rjmp	.+12     	; 0x35ee <vfprintf+0x3b2>
    35e2:	c1 14       	cp	r12, r1
    35e4:	d1 04       	cpc	r13, r1
    35e6:	41 f4       	brne	.+16     	; 0x35f8 <vfprintf+0x3bc>
    35e8:	ec 85       	ldd	r30, Y+12	; 0x0c
    35ea:	e4 ff       	sbrs	r30, 4
    35ec:	05 c0       	rjmp	.+10     	; 0x35f8 <vfprintf+0x3bc>
    35ee:	d1 94       	neg	r13
    35f0:	c1 94       	neg	r12
    35f2:	d1 08       	sbc	r13, r1
    35f4:	8d e2       	ldi	r24, 0x2D	; 45
    35f6:	01 c0       	rjmp	.+2      	; 0x35fa <vfprintf+0x3be>
    35f8:	8b e2       	ldi	r24, 0x2B	; 43
    35fa:	b7 01       	movw	r22, r14
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	d6 d3       	rcall	.+1964   	; 0x3dac <fputc>
    3600:	80 e3       	ldi	r24, 0x30	; 48
    3602:	2a e0       	ldi	r18, 0x0A	; 10
    3604:	c2 16       	cp	r12, r18
    3606:	d1 04       	cpc	r13, r1
    3608:	2c f0       	brlt	.+10     	; 0x3614 <vfprintf+0x3d8>
    360a:	8f 5f       	subi	r24, 0xFF	; 255
    360c:	fa e0       	ldi	r31, 0x0A	; 10
    360e:	cf 1a       	sub	r12, r31
    3610:	d1 08       	sbc	r13, r1
    3612:	f7 cf       	rjmp	.-18     	; 0x3602 <vfprintf+0x3c6>
    3614:	b7 01       	movw	r22, r14
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	c9 d3       	rcall	.+1938   	; 0x3dac <fputc>
    361a:	b7 01       	movw	r22, r14
    361c:	c6 01       	movw	r24, r12
    361e:	c0 96       	adiw	r24, 0x30	; 48
    3620:	c5 d3       	rcall	.+1930   	; 0x3dac <fputc>
    3622:	49 c1       	rjmp	.+658    	; 0x38b6 <vfprintf+0x67a>
    3624:	83 36       	cpi	r24, 0x63	; 99
    3626:	31 f0       	breq	.+12     	; 0x3634 <vfprintf+0x3f8>
    3628:	83 37       	cpi	r24, 0x73	; 115
    362a:	79 f0       	breq	.+30     	; 0x364a <vfprintf+0x40e>
    362c:	83 35       	cpi	r24, 0x53	; 83
    362e:	09 f0       	breq	.+2      	; 0x3632 <vfprintf+0x3f6>
    3630:	52 c0       	rjmp	.+164    	; 0x36d6 <vfprintf+0x49a>
    3632:	1f c0       	rjmp	.+62     	; 0x3672 <vfprintf+0x436>
    3634:	56 01       	movw	r10, r12
    3636:	32 e0       	ldi	r19, 0x02	; 2
    3638:	a3 0e       	add	r10, r19
    363a:	b1 1c       	adc	r11, r1
    363c:	f6 01       	movw	r30, r12
    363e:	80 81       	ld	r24, Z
    3640:	89 83       	std	Y+1, r24	; 0x01
    3642:	01 e0       	ldi	r16, 0x01	; 1
    3644:	10 e0       	ldi	r17, 0x00	; 0
    3646:	63 01       	movw	r12, r6
    3648:	11 c0       	rjmp	.+34     	; 0x366c <vfprintf+0x430>
    364a:	56 01       	movw	r10, r12
    364c:	f2 e0       	ldi	r31, 0x02	; 2
    364e:	af 0e       	add	r10, r31
    3650:	b1 1c       	adc	r11, r1
    3652:	f6 01       	movw	r30, r12
    3654:	c0 80       	ld	r12, Z
    3656:	d1 80       	ldd	r13, Z+1	; 0x01
    3658:	96 fe       	sbrs	r9, 6
    365a:	03 c0       	rjmp	.+6      	; 0x3662 <vfprintf+0x426>
    365c:	61 2f       	mov	r22, r17
    365e:	70 e0       	ldi	r23, 0x00	; 0
    3660:	02 c0       	rjmp	.+4      	; 0x3666 <vfprintf+0x42a>
    3662:	6f ef       	ldi	r22, 0xFF	; 255
    3664:	7f ef       	ldi	r23, 0xFF	; 255
    3666:	c6 01       	movw	r24, r12
    3668:	4c d3       	rcall	.+1688   	; 0x3d02 <strnlen>
    366a:	8c 01       	movw	r16, r24
    366c:	f9 2d       	mov	r31, r9
    366e:	ff 77       	andi	r31, 0x7F	; 127
    3670:	13 c0       	rjmp	.+38     	; 0x3698 <vfprintf+0x45c>
    3672:	56 01       	movw	r10, r12
    3674:	22 e0       	ldi	r18, 0x02	; 2
    3676:	a2 0e       	add	r10, r18
    3678:	b1 1c       	adc	r11, r1
    367a:	f6 01       	movw	r30, r12
    367c:	c0 80       	ld	r12, Z
    367e:	d1 80       	ldd	r13, Z+1	; 0x01
    3680:	96 fe       	sbrs	r9, 6
    3682:	03 c0       	rjmp	.+6      	; 0x368a <vfprintf+0x44e>
    3684:	61 2f       	mov	r22, r17
    3686:	70 e0       	ldi	r23, 0x00	; 0
    3688:	02 c0       	rjmp	.+4      	; 0x368e <vfprintf+0x452>
    368a:	6f ef       	ldi	r22, 0xFF	; 255
    368c:	7f ef       	ldi	r23, 0xFF	; 255
    368e:	c6 01       	movw	r24, r12
    3690:	2d d3       	rcall	.+1626   	; 0x3cec <strnlen_P>
    3692:	8c 01       	movw	r16, r24
    3694:	f9 2d       	mov	r31, r9
    3696:	f0 68       	ori	r31, 0x80	; 128
    3698:	9f 2e       	mov	r9, r31
    369a:	f3 fd       	sbrc	r31, 3
    369c:	18 c0       	rjmp	.+48     	; 0x36ce <vfprintf+0x492>
    369e:	85 2d       	mov	r24, r5
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	08 17       	cp	r16, r24
    36a4:	19 07       	cpc	r17, r25
    36a6:	98 f4       	brcc	.+38     	; 0x36ce <vfprintf+0x492>
    36a8:	b7 01       	movw	r22, r14
    36aa:	80 e2       	ldi	r24, 0x20	; 32
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	7e d3       	rcall	.+1788   	; 0x3dac <fputc>
    36b0:	5a 94       	dec	r5
    36b2:	f5 cf       	rjmp	.-22     	; 0x369e <vfprintf+0x462>
    36b4:	f6 01       	movw	r30, r12
    36b6:	97 fc       	sbrc	r9, 7
    36b8:	85 91       	lpm	r24, Z+
    36ba:	97 fe       	sbrs	r9, 7
    36bc:	81 91       	ld	r24, Z+
    36be:	6f 01       	movw	r12, r30
    36c0:	b7 01       	movw	r22, r14
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	73 d3       	rcall	.+1766   	; 0x3dac <fputc>
    36c6:	51 10       	cpse	r5, r1
    36c8:	5a 94       	dec	r5
    36ca:	01 50       	subi	r16, 0x01	; 1
    36cc:	11 09       	sbc	r17, r1
    36ce:	01 15       	cp	r16, r1
    36d0:	11 05       	cpc	r17, r1
    36d2:	81 f7       	brne	.-32     	; 0x36b4 <vfprintf+0x478>
    36d4:	f0 c0       	rjmp	.+480    	; 0x38b6 <vfprintf+0x67a>
    36d6:	84 36       	cpi	r24, 0x64	; 100
    36d8:	11 f0       	breq	.+4      	; 0x36de <vfprintf+0x4a2>
    36da:	89 36       	cpi	r24, 0x69	; 105
    36dc:	59 f5       	brne	.+86     	; 0x3734 <vfprintf+0x4f8>
    36de:	56 01       	movw	r10, r12
    36e0:	97 fe       	sbrs	r9, 7
    36e2:	09 c0       	rjmp	.+18     	; 0x36f6 <vfprintf+0x4ba>
    36e4:	24 e0       	ldi	r18, 0x04	; 4
    36e6:	a2 0e       	add	r10, r18
    36e8:	b1 1c       	adc	r11, r1
    36ea:	f6 01       	movw	r30, r12
    36ec:	60 81       	ld	r22, Z
    36ee:	71 81       	ldd	r23, Z+1	; 0x01
    36f0:	82 81       	ldd	r24, Z+2	; 0x02
    36f2:	93 81       	ldd	r25, Z+3	; 0x03
    36f4:	0a c0       	rjmp	.+20     	; 0x370a <vfprintf+0x4ce>
    36f6:	f2 e0       	ldi	r31, 0x02	; 2
    36f8:	af 0e       	add	r10, r31
    36fa:	b1 1c       	adc	r11, r1
    36fc:	f6 01       	movw	r30, r12
    36fe:	60 81       	ld	r22, Z
    3700:	71 81       	ldd	r23, Z+1	; 0x01
    3702:	07 2e       	mov	r0, r23
    3704:	00 0c       	add	r0, r0
    3706:	88 0b       	sbc	r24, r24
    3708:	99 0b       	sbc	r25, r25
    370a:	f9 2d       	mov	r31, r9
    370c:	ff 76       	andi	r31, 0x6F	; 111
    370e:	9f 2e       	mov	r9, r31
    3710:	97 ff       	sbrs	r25, 7
    3712:	09 c0       	rjmp	.+18     	; 0x3726 <vfprintf+0x4ea>
    3714:	90 95       	com	r25
    3716:	80 95       	com	r24
    3718:	70 95       	com	r23
    371a:	61 95       	neg	r22
    371c:	7f 4f       	sbci	r23, 0xFF	; 255
    371e:	8f 4f       	sbci	r24, 0xFF	; 255
    3720:	9f 4f       	sbci	r25, 0xFF	; 255
    3722:	f0 68       	ori	r31, 0x80	; 128
    3724:	9f 2e       	mov	r9, r31
    3726:	2a e0       	ldi	r18, 0x0A	; 10
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	a3 01       	movw	r20, r6
    372c:	be d3       	rcall	.+1916   	; 0x3eaa <__ultoa_invert>
    372e:	c8 2e       	mov	r12, r24
    3730:	c6 18       	sub	r12, r6
    3732:	3e c0       	rjmp	.+124    	; 0x37b0 <vfprintf+0x574>
    3734:	09 2d       	mov	r16, r9
    3736:	85 37       	cpi	r24, 0x75	; 117
    3738:	21 f4       	brne	.+8      	; 0x3742 <vfprintf+0x506>
    373a:	0f 7e       	andi	r16, 0xEF	; 239
    373c:	2a e0       	ldi	r18, 0x0A	; 10
    373e:	30 e0       	ldi	r19, 0x00	; 0
    3740:	1d c0       	rjmp	.+58     	; 0x377c <vfprintf+0x540>
    3742:	09 7f       	andi	r16, 0xF9	; 249
    3744:	8f 36       	cpi	r24, 0x6F	; 111
    3746:	91 f0       	breq	.+36     	; 0x376c <vfprintf+0x530>
    3748:	18 f4       	brcc	.+6      	; 0x3750 <vfprintf+0x514>
    374a:	88 35       	cpi	r24, 0x58	; 88
    374c:	59 f0       	breq	.+22     	; 0x3764 <vfprintf+0x528>
    374e:	bc c0       	rjmp	.+376    	; 0x38c8 <vfprintf+0x68c>
    3750:	80 37       	cpi	r24, 0x70	; 112
    3752:	19 f0       	breq	.+6      	; 0x375a <vfprintf+0x51e>
    3754:	88 37       	cpi	r24, 0x78	; 120
    3756:	11 f0       	breq	.+4      	; 0x375c <vfprintf+0x520>
    3758:	b7 c0       	rjmp	.+366    	; 0x38c8 <vfprintf+0x68c>
    375a:	00 61       	ori	r16, 0x10	; 16
    375c:	04 ff       	sbrs	r16, 4
    375e:	09 c0       	rjmp	.+18     	; 0x3772 <vfprintf+0x536>
    3760:	04 60       	ori	r16, 0x04	; 4
    3762:	07 c0       	rjmp	.+14     	; 0x3772 <vfprintf+0x536>
    3764:	94 fe       	sbrs	r9, 4
    3766:	08 c0       	rjmp	.+16     	; 0x3778 <vfprintf+0x53c>
    3768:	06 60       	ori	r16, 0x06	; 6
    376a:	06 c0       	rjmp	.+12     	; 0x3778 <vfprintf+0x53c>
    376c:	28 e0       	ldi	r18, 0x08	; 8
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	05 c0       	rjmp	.+10     	; 0x377c <vfprintf+0x540>
    3772:	20 e1       	ldi	r18, 0x10	; 16
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	02 c0       	rjmp	.+4      	; 0x377c <vfprintf+0x540>
    3778:	20 e1       	ldi	r18, 0x10	; 16
    377a:	32 e0       	ldi	r19, 0x02	; 2
    377c:	56 01       	movw	r10, r12
    377e:	07 ff       	sbrs	r16, 7
    3780:	09 c0       	rjmp	.+18     	; 0x3794 <vfprintf+0x558>
    3782:	84 e0       	ldi	r24, 0x04	; 4
    3784:	a8 0e       	add	r10, r24
    3786:	b1 1c       	adc	r11, r1
    3788:	f6 01       	movw	r30, r12
    378a:	60 81       	ld	r22, Z
    378c:	71 81       	ldd	r23, Z+1	; 0x01
    378e:	82 81       	ldd	r24, Z+2	; 0x02
    3790:	93 81       	ldd	r25, Z+3	; 0x03
    3792:	08 c0       	rjmp	.+16     	; 0x37a4 <vfprintf+0x568>
    3794:	f2 e0       	ldi	r31, 0x02	; 2
    3796:	af 0e       	add	r10, r31
    3798:	b1 1c       	adc	r11, r1
    379a:	f6 01       	movw	r30, r12
    379c:	60 81       	ld	r22, Z
    379e:	71 81       	ldd	r23, Z+1	; 0x01
    37a0:	80 e0       	ldi	r24, 0x00	; 0
    37a2:	90 e0       	ldi	r25, 0x00	; 0
    37a4:	a3 01       	movw	r20, r6
    37a6:	81 d3       	rcall	.+1794   	; 0x3eaa <__ultoa_invert>
    37a8:	c8 2e       	mov	r12, r24
    37aa:	c6 18       	sub	r12, r6
    37ac:	0f 77       	andi	r16, 0x7F	; 127
    37ae:	90 2e       	mov	r9, r16
    37b0:	96 fe       	sbrs	r9, 6
    37b2:	0b c0       	rjmp	.+22     	; 0x37ca <vfprintf+0x58e>
    37b4:	09 2d       	mov	r16, r9
    37b6:	0e 7f       	andi	r16, 0xFE	; 254
    37b8:	c1 16       	cp	r12, r17
    37ba:	50 f4       	brcc	.+20     	; 0x37d0 <vfprintf+0x594>
    37bc:	94 fe       	sbrs	r9, 4
    37be:	0a c0       	rjmp	.+20     	; 0x37d4 <vfprintf+0x598>
    37c0:	92 fc       	sbrc	r9, 2
    37c2:	08 c0       	rjmp	.+16     	; 0x37d4 <vfprintf+0x598>
    37c4:	09 2d       	mov	r16, r9
    37c6:	0e 7e       	andi	r16, 0xEE	; 238
    37c8:	05 c0       	rjmp	.+10     	; 0x37d4 <vfprintf+0x598>
    37ca:	dc 2c       	mov	r13, r12
    37cc:	09 2d       	mov	r16, r9
    37ce:	03 c0       	rjmp	.+6      	; 0x37d6 <vfprintf+0x59a>
    37d0:	dc 2c       	mov	r13, r12
    37d2:	01 c0       	rjmp	.+2      	; 0x37d6 <vfprintf+0x59a>
    37d4:	d1 2e       	mov	r13, r17
    37d6:	04 ff       	sbrs	r16, 4
    37d8:	0d c0       	rjmp	.+26     	; 0x37f4 <vfprintf+0x5b8>
    37da:	fe 01       	movw	r30, r28
    37dc:	ec 0d       	add	r30, r12
    37de:	f1 1d       	adc	r31, r1
    37e0:	80 81       	ld	r24, Z
    37e2:	80 33       	cpi	r24, 0x30	; 48
    37e4:	11 f4       	brne	.+4      	; 0x37ea <vfprintf+0x5ae>
    37e6:	09 7e       	andi	r16, 0xE9	; 233
    37e8:	09 c0       	rjmp	.+18     	; 0x37fc <vfprintf+0x5c0>
    37ea:	02 ff       	sbrs	r16, 2
    37ec:	06 c0       	rjmp	.+12     	; 0x37fa <vfprintf+0x5be>
    37ee:	d3 94       	inc	r13
    37f0:	d3 94       	inc	r13
    37f2:	04 c0       	rjmp	.+8      	; 0x37fc <vfprintf+0x5c0>
    37f4:	80 2f       	mov	r24, r16
    37f6:	86 78       	andi	r24, 0x86	; 134
    37f8:	09 f0       	breq	.+2      	; 0x37fc <vfprintf+0x5c0>
    37fa:	d3 94       	inc	r13
    37fc:	03 fd       	sbrc	r16, 3
    37fe:	10 c0       	rjmp	.+32     	; 0x3820 <vfprintf+0x5e4>
    3800:	00 ff       	sbrs	r16, 0
    3802:	06 c0       	rjmp	.+12     	; 0x3810 <vfprintf+0x5d4>
    3804:	1c 2d       	mov	r17, r12
    3806:	d5 14       	cp	r13, r5
    3808:	78 f4       	brcc	.+30     	; 0x3828 <vfprintf+0x5ec>
    380a:	15 0d       	add	r17, r5
    380c:	1d 19       	sub	r17, r13
    380e:	0c c0       	rjmp	.+24     	; 0x3828 <vfprintf+0x5ec>
    3810:	d5 14       	cp	r13, r5
    3812:	50 f4       	brcc	.+20     	; 0x3828 <vfprintf+0x5ec>
    3814:	b7 01       	movw	r22, r14
    3816:	80 e2       	ldi	r24, 0x20	; 32
    3818:	90 e0       	ldi	r25, 0x00	; 0
    381a:	c8 d2       	rcall	.+1424   	; 0x3dac <fputc>
    381c:	d3 94       	inc	r13
    381e:	f8 cf       	rjmp	.-16     	; 0x3810 <vfprintf+0x5d4>
    3820:	d5 14       	cp	r13, r5
    3822:	10 f4       	brcc	.+4      	; 0x3828 <vfprintf+0x5ec>
    3824:	5d 18       	sub	r5, r13
    3826:	01 c0       	rjmp	.+2      	; 0x382a <vfprintf+0x5ee>
    3828:	51 2c       	mov	r5, r1
    382a:	04 ff       	sbrs	r16, 4
    382c:	0f c0       	rjmp	.+30     	; 0x384c <vfprintf+0x610>
    382e:	b7 01       	movw	r22, r14
    3830:	80 e3       	ldi	r24, 0x30	; 48
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	bb d2       	rcall	.+1398   	; 0x3dac <fputc>
    3836:	02 ff       	sbrs	r16, 2
    3838:	16 c0       	rjmp	.+44     	; 0x3866 <vfprintf+0x62a>
    383a:	01 fd       	sbrc	r16, 1
    383c:	03 c0       	rjmp	.+6      	; 0x3844 <vfprintf+0x608>
    383e:	88 e7       	ldi	r24, 0x78	; 120
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	02 c0       	rjmp	.+4      	; 0x3848 <vfprintf+0x60c>
    3844:	88 e5       	ldi	r24, 0x58	; 88
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	b7 01       	movw	r22, r14
    384a:	0c c0       	rjmp	.+24     	; 0x3864 <vfprintf+0x628>
    384c:	80 2f       	mov	r24, r16
    384e:	86 78       	andi	r24, 0x86	; 134
    3850:	51 f0       	breq	.+20     	; 0x3866 <vfprintf+0x62a>
    3852:	01 ff       	sbrs	r16, 1
    3854:	02 c0       	rjmp	.+4      	; 0x385a <vfprintf+0x61e>
    3856:	8b e2       	ldi	r24, 0x2B	; 43
    3858:	01 c0       	rjmp	.+2      	; 0x385c <vfprintf+0x620>
    385a:	80 e2       	ldi	r24, 0x20	; 32
    385c:	07 fd       	sbrc	r16, 7
    385e:	8d e2       	ldi	r24, 0x2D	; 45
    3860:	b7 01       	movw	r22, r14
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	a3 d2       	rcall	.+1350   	; 0x3dac <fputc>
    3866:	c1 16       	cp	r12, r17
    3868:	30 f4       	brcc	.+12     	; 0x3876 <vfprintf+0x63a>
    386a:	b7 01       	movw	r22, r14
    386c:	80 e3       	ldi	r24, 0x30	; 48
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	9d d2       	rcall	.+1338   	; 0x3dac <fputc>
    3872:	11 50       	subi	r17, 0x01	; 1
    3874:	f8 cf       	rjmp	.-16     	; 0x3866 <vfprintf+0x62a>
    3876:	ca 94       	dec	r12
    3878:	f3 01       	movw	r30, r6
    387a:	ec 0d       	add	r30, r12
    387c:	f1 1d       	adc	r31, r1
    387e:	80 81       	ld	r24, Z
    3880:	b7 01       	movw	r22, r14
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	93 d2       	rcall	.+1318   	; 0x3dac <fputc>
    3886:	c1 10       	cpse	r12, r1
    3888:	f6 cf       	rjmp	.-20     	; 0x3876 <vfprintf+0x63a>
    388a:	15 c0       	rjmp	.+42     	; 0x38b6 <vfprintf+0x67a>
    388c:	f4 e0       	ldi	r31, 0x04	; 4
    388e:	f5 15       	cp	r31, r5
    3890:	50 f5       	brcc	.+84     	; 0x38e6 <vfprintf+0x6aa>
    3892:	84 e0       	ldi	r24, 0x04	; 4
    3894:	58 1a       	sub	r5, r24
    3896:	93 fe       	sbrs	r9, 3
    3898:	1e c0       	rjmp	.+60     	; 0x38d6 <vfprintf+0x69a>
    389a:	01 11       	cpse	r16, r1
    389c:	25 c0       	rjmp	.+74     	; 0x38e8 <vfprintf+0x6ac>
    389e:	2c 85       	ldd	r18, Y+12	; 0x0c
    38a0:	23 ff       	sbrs	r18, 3
    38a2:	27 c0       	rjmp	.+78     	; 0x38f2 <vfprintf+0x6b6>
    38a4:	0e e7       	ldi	r16, 0x7E	; 126
    38a6:	12 e0       	ldi	r17, 0x02	; 2
    38a8:	39 2d       	mov	r19, r9
    38aa:	30 71       	andi	r19, 0x10	; 16
    38ac:	93 2e       	mov	r9, r19
    38ae:	f8 01       	movw	r30, r16
    38b0:	84 91       	lpm	r24, Z
    38b2:	81 11       	cpse	r24, r1
    38b4:	21 c0       	rjmp	.+66     	; 0x38f8 <vfprintf+0x6bc>
    38b6:	55 20       	and	r5, r5
    38b8:	09 f4       	brne	.+2      	; 0x38bc <vfprintf+0x680>
    38ba:	fc cc       	rjmp	.-1544   	; 0x32b4 <vfprintf+0x78>
    38bc:	b7 01       	movw	r22, r14
    38be:	80 e2       	ldi	r24, 0x20	; 32
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	74 d2       	rcall	.+1256   	; 0x3dac <fputc>
    38c4:	5a 94       	dec	r5
    38c6:	f7 cf       	rjmp	.-18     	; 0x38b6 <vfprintf+0x67a>
    38c8:	f7 01       	movw	r30, r14
    38ca:	86 81       	ldd	r24, Z+6	; 0x06
    38cc:	97 81       	ldd	r25, Z+7	; 0x07
    38ce:	23 c0       	rjmp	.+70     	; 0x3916 <vfprintf+0x6da>
    38d0:	8f ef       	ldi	r24, 0xFF	; 255
    38d2:	9f ef       	ldi	r25, 0xFF	; 255
    38d4:	20 c0       	rjmp	.+64     	; 0x3916 <vfprintf+0x6da>
    38d6:	b7 01       	movw	r22, r14
    38d8:	80 e2       	ldi	r24, 0x20	; 32
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	67 d2       	rcall	.+1230   	; 0x3dac <fputc>
    38de:	5a 94       	dec	r5
    38e0:	51 10       	cpse	r5, r1
    38e2:	f9 cf       	rjmp	.-14     	; 0x38d6 <vfprintf+0x69a>
    38e4:	da cf       	rjmp	.-76     	; 0x389a <vfprintf+0x65e>
    38e6:	51 2c       	mov	r5, r1
    38e8:	b7 01       	movw	r22, r14
    38ea:	80 2f       	mov	r24, r16
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	5e d2       	rcall	.+1212   	; 0x3dac <fputc>
    38f0:	d6 cf       	rjmp	.-84     	; 0x389e <vfprintf+0x662>
    38f2:	02 e8       	ldi	r16, 0x82	; 130
    38f4:	12 e0       	ldi	r17, 0x02	; 2
    38f6:	d8 cf       	rjmp	.-80     	; 0x38a8 <vfprintf+0x66c>
    38f8:	91 10       	cpse	r9, r1
    38fa:	80 52       	subi	r24, 0x20	; 32
    38fc:	b7 01       	movw	r22, r14
    38fe:	90 e0       	ldi	r25, 0x00	; 0
    3900:	55 d2       	rcall	.+1194   	; 0x3dac <fputc>
    3902:	0f 5f       	subi	r16, 0xFF	; 255
    3904:	1f 4f       	sbci	r17, 0xFF	; 255
    3906:	d3 cf       	rjmp	.-90     	; 0x38ae <vfprintf+0x672>
    3908:	23 e0       	ldi	r18, 0x03	; 3
    390a:	25 15       	cp	r18, r5
    390c:	10 f4       	brcc	.+4      	; 0x3912 <vfprintf+0x6d6>
    390e:	83 e0       	ldi	r24, 0x03	; 3
    3910:	c1 cf       	rjmp	.-126    	; 0x3894 <vfprintf+0x658>
    3912:	51 2c       	mov	r5, r1
    3914:	c4 cf       	rjmp	.-120    	; 0x389e <vfprintf+0x662>
    3916:	60 96       	adiw	r28, 0x10	; 16
    3918:	cd bf       	out	0x3d, r28	; 61
    391a:	de bf       	out	0x3e, r29	; 62
    391c:	df 91       	pop	r29
    391e:	cf 91       	pop	r28
    3920:	1f 91       	pop	r17
    3922:	0f 91       	pop	r16
    3924:	ff 90       	pop	r15
    3926:	ef 90       	pop	r14
    3928:	df 90       	pop	r13
    392a:	cf 90       	pop	r12
    392c:	bf 90       	pop	r11
    392e:	af 90       	pop	r10
    3930:	9f 90       	pop	r9
    3932:	8f 90       	pop	r8
    3934:	7f 90       	pop	r7
    3936:	6f 90       	pop	r6
    3938:	5f 90       	pop	r5
    393a:	4f 90       	pop	r4
    393c:	3f 90       	pop	r3
    393e:	2f 90       	pop	r2
    3940:	08 95       	ret

00003942 <__udivmodsi4>:
    3942:	a1 e2       	ldi	r26, 0x21	; 33
    3944:	1a 2e       	mov	r1, r26
    3946:	aa 1b       	sub	r26, r26
    3948:	bb 1b       	sub	r27, r27
    394a:	fd 01       	movw	r30, r26
    394c:	0d c0       	rjmp	.+26     	; 0x3968 <__udivmodsi4_ep>

0000394e <__udivmodsi4_loop>:
    394e:	aa 1f       	adc	r26, r26
    3950:	bb 1f       	adc	r27, r27
    3952:	ee 1f       	adc	r30, r30
    3954:	ff 1f       	adc	r31, r31
    3956:	a2 17       	cp	r26, r18
    3958:	b3 07       	cpc	r27, r19
    395a:	e4 07       	cpc	r30, r20
    395c:	f5 07       	cpc	r31, r21
    395e:	20 f0       	brcs	.+8      	; 0x3968 <__udivmodsi4_ep>
    3960:	a2 1b       	sub	r26, r18
    3962:	b3 0b       	sbc	r27, r19
    3964:	e4 0b       	sbc	r30, r20
    3966:	f5 0b       	sbc	r31, r21

00003968 <__udivmodsi4_ep>:
    3968:	66 1f       	adc	r22, r22
    396a:	77 1f       	adc	r23, r23
    396c:	88 1f       	adc	r24, r24
    396e:	99 1f       	adc	r25, r25
    3970:	1a 94       	dec	r1
    3972:	69 f7       	brne	.-38     	; 0x394e <__udivmodsi4_loop>
    3974:	60 95       	com	r22
    3976:	70 95       	com	r23
    3978:	80 95       	com	r24
    397a:	90 95       	com	r25
    397c:	9b 01       	movw	r18, r22
    397e:	ac 01       	movw	r20, r24
    3980:	bd 01       	movw	r22, r26
    3982:	cf 01       	movw	r24, r30
    3984:	08 95       	ret

00003986 <__divmodsi4>:
    3986:	05 2e       	mov	r0, r21
    3988:	97 fb       	bst	r25, 7
    398a:	16 f4       	brtc	.+4      	; 0x3990 <__divmodsi4+0xa>
    398c:	00 94       	com	r0
    398e:	0f d0       	rcall	.+30     	; 0x39ae <__negsi2>
    3990:	57 fd       	sbrc	r21, 7
    3992:	05 d0       	rcall	.+10     	; 0x399e <__divmodsi4_neg2>
    3994:	d6 df       	rcall	.-84     	; 0x3942 <__udivmodsi4>
    3996:	07 fc       	sbrc	r0, 7
    3998:	02 d0       	rcall	.+4      	; 0x399e <__divmodsi4_neg2>
    399a:	46 f4       	brtc	.+16     	; 0x39ac <__divmodsi4_exit>
    399c:	08 c0       	rjmp	.+16     	; 0x39ae <__negsi2>

0000399e <__divmodsi4_neg2>:
    399e:	50 95       	com	r21
    39a0:	40 95       	com	r20
    39a2:	30 95       	com	r19
    39a4:	21 95       	neg	r18
    39a6:	3f 4f       	sbci	r19, 0xFF	; 255
    39a8:	4f 4f       	sbci	r20, 0xFF	; 255
    39aa:	5f 4f       	sbci	r21, 0xFF	; 255

000039ac <__divmodsi4_exit>:
    39ac:	08 95       	ret

000039ae <__negsi2>:
    39ae:	90 95       	com	r25
    39b0:	80 95       	com	r24
    39b2:	70 95       	com	r23
    39b4:	61 95       	neg	r22
    39b6:	7f 4f       	sbci	r23, 0xFF	; 255
    39b8:	8f 4f       	sbci	r24, 0xFF	; 255
    39ba:	9f 4f       	sbci	r25, 0xFF	; 255
    39bc:	08 95       	ret

000039be <__muluhisi3>:
    39be:	af d0       	rcall	.+350    	; 0x3b1e <__umulhisi3>
    39c0:	a5 9f       	mul	r26, r21
    39c2:	90 0d       	add	r25, r0
    39c4:	b4 9f       	mul	r27, r20
    39c6:	90 0d       	add	r25, r0
    39c8:	a4 9f       	mul	r26, r20
    39ca:	80 0d       	add	r24, r0
    39cc:	91 1d       	adc	r25, r1
    39ce:	11 24       	eor	r1, r1
    39d0:	08 95       	ret

000039d2 <__muldi3>:
    39d2:	df 93       	push	r29
    39d4:	cf 93       	push	r28
    39d6:	1f 93       	push	r17
    39d8:	0f 93       	push	r16
    39da:	9a 9d       	mul	r25, r10
    39dc:	f0 2d       	mov	r31, r0
    39de:	21 9f       	mul	r18, r17
    39e0:	f0 0d       	add	r31, r0
    39e2:	8b 9d       	mul	r24, r11
    39e4:	f0 0d       	add	r31, r0
    39e6:	8a 9d       	mul	r24, r10
    39e8:	e0 2d       	mov	r30, r0
    39ea:	f1 0d       	add	r31, r1
    39ec:	03 9f       	mul	r16, r19
    39ee:	f0 0d       	add	r31, r0
    39f0:	02 9f       	mul	r16, r18
    39f2:	e0 0d       	add	r30, r0
    39f4:	f1 1d       	adc	r31, r1
    39f6:	4e 9d       	mul	r20, r14
    39f8:	e0 0d       	add	r30, r0
    39fa:	f1 1d       	adc	r31, r1
    39fc:	5e 9d       	mul	r21, r14
    39fe:	f0 0d       	add	r31, r0
    3a00:	4f 9d       	mul	r20, r15
    3a02:	f0 0d       	add	r31, r0
    3a04:	7f 93       	push	r23
    3a06:	6f 93       	push	r22
    3a08:	bf 92       	push	r11
    3a0a:	af 92       	push	r10
    3a0c:	5f 93       	push	r21
    3a0e:	4f 93       	push	r20
    3a10:	d5 01       	movw	r26, r10
    3a12:	85 d0       	rcall	.+266    	; 0x3b1e <__umulhisi3>
    3a14:	8b 01       	movw	r16, r22
    3a16:	ac 01       	movw	r20, r24
    3a18:	d7 01       	movw	r26, r14
    3a1a:	81 d0       	rcall	.+258    	; 0x3b1e <__umulhisi3>
    3a1c:	eb 01       	movw	r28, r22
    3a1e:	e8 0f       	add	r30, r24
    3a20:	f9 1f       	adc	r31, r25
    3a22:	d6 01       	movw	r26, r12
    3a24:	1f d0       	rcall	.+62     	; 0x3a64 <__muldi3_6>
    3a26:	2f 91       	pop	r18
    3a28:	3f 91       	pop	r19
    3a2a:	d6 01       	movw	r26, r12
    3a2c:	78 d0       	rcall	.+240    	; 0x3b1e <__umulhisi3>
    3a2e:	c6 0f       	add	r28, r22
    3a30:	d7 1f       	adc	r29, r23
    3a32:	e8 1f       	adc	r30, r24
    3a34:	f9 1f       	adc	r31, r25
    3a36:	af 91       	pop	r26
    3a38:	bf 91       	pop	r27
    3a3a:	14 d0       	rcall	.+40     	; 0x3a64 <__muldi3_6>
    3a3c:	2f 91       	pop	r18
    3a3e:	3f 91       	pop	r19
    3a40:	6e d0       	rcall	.+220    	; 0x3b1e <__umulhisi3>
    3a42:	c6 0f       	add	r28, r22
    3a44:	d7 1f       	adc	r29, r23
    3a46:	e8 1f       	adc	r30, r24
    3a48:	f9 1f       	adc	r31, r25
    3a4a:	d6 01       	movw	r26, r12
    3a4c:	68 d0       	rcall	.+208    	; 0x3b1e <__umulhisi3>
    3a4e:	e6 0f       	add	r30, r22
    3a50:	f7 1f       	adc	r31, r23
    3a52:	98 01       	movw	r18, r16
    3a54:	be 01       	movw	r22, r28
    3a56:	cf 01       	movw	r24, r30
    3a58:	11 24       	eor	r1, r1
    3a5a:	0f 91       	pop	r16
    3a5c:	1f 91       	pop	r17
    3a5e:	cf 91       	pop	r28
    3a60:	df 91       	pop	r29
    3a62:	08 95       	ret

00003a64 <__muldi3_6>:
    3a64:	5c d0       	rcall	.+184    	; 0x3b1e <__umulhisi3>
    3a66:	46 0f       	add	r20, r22
    3a68:	57 1f       	adc	r21, r23
    3a6a:	c8 1f       	adc	r28, r24
    3a6c:	d9 1f       	adc	r29, r25
    3a6e:	08 f4       	brcc	.+2      	; 0x3a72 <__muldi3_6+0xe>
    3a70:	31 96       	adiw	r30, 0x01	; 1
    3a72:	08 95       	ret

00003a74 <__ashldi3>:
    3a74:	0f 93       	push	r16
    3a76:	08 30       	cpi	r16, 0x08	; 8
    3a78:	90 f0       	brcs	.+36     	; 0x3a9e <__ashldi3+0x2a>
    3a7a:	98 2f       	mov	r25, r24
    3a7c:	87 2f       	mov	r24, r23
    3a7e:	76 2f       	mov	r23, r22
    3a80:	65 2f       	mov	r22, r21
    3a82:	54 2f       	mov	r21, r20
    3a84:	43 2f       	mov	r20, r19
    3a86:	32 2f       	mov	r19, r18
    3a88:	22 27       	eor	r18, r18
    3a8a:	08 50       	subi	r16, 0x08	; 8
    3a8c:	f4 cf       	rjmp	.-24     	; 0x3a76 <__ashldi3+0x2>
    3a8e:	22 0f       	add	r18, r18
    3a90:	33 1f       	adc	r19, r19
    3a92:	44 1f       	adc	r20, r20
    3a94:	55 1f       	adc	r21, r21
    3a96:	66 1f       	adc	r22, r22
    3a98:	77 1f       	adc	r23, r23
    3a9a:	88 1f       	adc	r24, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	0a 95       	dec	r16
    3aa0:	b2 f7       	brpl	.-20     	; 0x3a8e <__ashldi3+0x1a>
    3aa2:	0f 91       	pop	r16
    3aa4:	08 95       	ret

00003aa6 <__ashrdi3>:
    3aa6:	97 fb       	bst	r25, 7
    3aa8:	10 f8       	bld	r1, 0

00003aaa <__lshrdi3>:
    3aaa:	16 94       	lsr	r1
    3aac:	00 08       	sbc	r0, r0
    3aae:	0f 93       	push	r16
    3ab0:	08 30       	cpi	r16, 0x08	; 8
    3ab2:	98 f0       	brcs	.+38     	; 0x3ada <__lshrdi3+0x30>
    3ab4:	08 50       	subi	r16, 0x08	; 8
    3ab6:	23 2f       	mov	r18, r19
    3ab8:	34 2f       	mov	r19, r20
    3aba:	45 2f       	mov	r20, r21
    3abc:	56 2f       	mov	r21, r22
    3abe:	67 2f       	mov	r22, r23
    3ac0:	78 2f       	mov	r23, r24
    3ac2:	89 2f       	mov	r24, r25
    3ac4:	90 2d       	mov	r25, r0
    3ac6:	f4 cf       	rjmp	.-24     	; 0x3ab0 <__lshrdi3+0x6>
    3ac8:	05 94       	asr	r0
    3aca:	97 95       	ror	r25
    3acc:	87 95       	ror	r24
    3ace:	77 95       	ror	r23
    3ad0:	67 95       	ror	r22
    3ad2:	57 95       	ror	r21
    3ad4:	47 95       	ror	r20
    3ad6:	37 95       	ror	r19
    3ad8:	27 95       	ror	r18
    3ada:	0a 95       	dec	r16
    3adc:	aa f7       	brpl	.-22     	; 0x3ac8 <__lshrdi3+0x1e>
    3ade:	0f 91       	pop	r16
    3ae0:	08 95       	ret

00003ae2 <__adddi3>:
    3ae2:	2a 0d       	add	r18, r10
    3ae4:	3b 1d       	adc	r19, r11
    3ae6:	4c 1d       	adc	r20, r12
    3ae8:	5d 1d       	adc	r21, r13
    3aea:	6e 1d       	adc	r22, r14
    3aec:	7f 1d       	adc	r23, r15
    3aee:	80 1f       	adc	r24, r16
    3af0:	91 1f       	adc	r25, r17
    3af2:	08 95       	ret

00003af4 <__subdi3>:
    3af4:	2a 19       	sub	r18, r10
    3af6:	3b 09       	sbc	r19, r11
    3af8:	4c 09       	sbc	r20, r12
    3afa:	5d 09       	sbc	r21, r13
    3afc:	6e 09       	sbc	r22, r14
    3afe:	7f 09       	sbc	r23, r15
    3b00:	80 0b       	sbc	r24, r16
    3b02:	91 0b       	sbc	r25, r17
    3b04:	08 95       	ret

00003b06 <__cmpdi2_s8>:
    3b06:	00 24       	eor	r0, r0
    3b08:	a7 fd       	sbrc	r26, 7
    3b0a:	00 94       	com	r0
    3b0c:	2a 17       	cp	r18, r26
    3b0e:	30 05       	cpc	r19, r0
    3b10:	40 05       	cpc	r20, r0
    3b12:	50 05       	cpc	r21, r0
    3b14:	60 05       	cpc	r22, r0
    3b16:	70 05       	cpc	r23, r0
    3b18:	80 05       	cpc	r24, r0
    3b1a:	90 05       	cpc	r25, r0
    3b1c:	08 95       	ret

00003b1e <__umulhisi3>:
    3b1e:	a2 9f       	mul	r26, r18
    3b20:	b0 01       	movw	r22, r0
    3b22:	b3 9f       	mul	r27, r19
    3b24:	c0 01       	movw	r24, r0
    3b26:	a3 9f       	mul	r26, r19
    3b28:	70 0d       	add	r23, r0
    3b2a:	81 1d       	adc	r24, r1
    3b2c:	11 24       	eor	r1, r1
    3b2e:	91 1d       	adc	r25, r1
    3b30:	b2 9f       	mul	r27, r18
    3b32:	70 0d       	add	r23, r0
    3b34:	81 1d       	adc	r24, r1
    3b36:	11 24       	eor	r1, r1
    3b38:	91 1d       	adc	r25, r1
    3b3a:	08 95       	ret

00003b3c <__ftoa_engine>:
    3b3c:	28 30       	cpi	r18, 0x08	; 8
    3b3e:	08 f0       	brcs	.+2      	; 0x3b42 <__ftoa_engine+0x6>
    3b40:	27 e0       	ldi	r18, 0x07	; 7
    3b42:	33 27       	eor	r19, r19
    3b44:	da 01       	movw	r26, r20
    3b46:	99 0f       	add	r25, r25
    3b48:	31 1d       	adc	r19, r1
    3b4a:	87 fd       	sbrc	r24, 7
    3b4c:	91 60       	ori	r25, 0x01	; 1
    3b4e:	00 96       	adiw	r24, 0x00	; 0
    3b50:	61 05       	cpc	r22, r1
    3b52:	71 05       	cpc	r23, r1
    3b54:	39 f4       	brne	.+14     	; 0x3b64 <__ftoa_engine+0x28>
    3b56:	32 60       	ori	r19, 0x02	; 2
    3b58:	2e 5f       	subi	r18, 0xFE	; 254
    3b5a:	3d 93       	st	X+, r19
    3b5c:	30 e3       	ldi	r19, 0x30	; 48
    3b5e:	2a 95       	dec	r18
    3b60:	e1 f7       	brne	.-8      	; 0x3b5a <__ftoa_engine+0x1e>
    3b62:	08 95       	ret
    3b64:	9f 3f       	cpi	r25, 0xFF	; 255
    3b66:	30 f0       	brcs	.+12     	; 0x3b74 <__ftoa_engine+0x38>
    3b68:	80 38       	cpi	r24, 0x80	; 128
    3b6a:	71 05       	cpc	r23, r1
    3b6c:	61 05       	cpc	r22, r1
    3b6e:	09 f0       	breq	.+2      	; 0x3b72 <__ftoa_engine+0x36>
    3b70:	3c 5f       	subi	r19, 0xFC	; 252
    3b72:	3c 5f       	subi	r19, 0xFC	; 252
    3b74:	3d 93       	st	X+, r19
    3b76:	91 30       	cpi	r25, 0x01	; 1
    3b78:	08 f0       	brcs	.+2      	; 0x3b7c <__ftoa_engine+0x40>
    3b7a:	80 68       	ori	r24, 0x80	; 128
    3b7c:	91 1d       	adc	r25, r1
    3b7e:	df 93       	push	r29
    3b80:	cf 93       	push	r28
    3b82:	1f 93       	push	r17
    3b84:	0f 93       	push	r16
    3b86:	ff 92       	push	r15
    3b88:	ef 92       	push	r14
    3b8a:	19 2f       	mov	r17, r25
    3b8c:	98 7f       	andi	r25, 0xF8	; 248
    3b8e:	96 95       	lsr	r25
    3b90:	e9 2f       	mov	r30, r25
    3b92:	96 95       	lsr	r25
    3b94:	96 95       	lsr	r25
    3b96:	e9 0f       	add	r30, r25
    3b98:	ff 27       	eor	r31, r31
    3b9a:	e0 52       	subi	r30, 0x20	; 32
    3b9c:	fd 4f       	sbci	r31, 0xFD	; 253
    3b9e:	99 27       	eor	r25, r25
    3ba0:	33 27       	eor	r19, r19
    3ba2:	ee 24       	eor	r14, r14
    3ba4:	ff 24       	eor	r15, r15
    3ba6:	a7 01       	movw	r20, r14
    3ba8:	e7 01       	movw	r28, r14
    3baa:	05 90       	lpm	r0, Z+
    3bac:	08 94       	sec
    3bae:	07 94       	ror	r0
    3bb0:	28 f4       	brcc	.+10     	; 0x3bbc <__ftoa_engine+0x80>
    3bb2:	36 0f       	add	r19, r22
    3bb4:	e7 1e       	adc	r14, r23
    3bb6:	f8 1e       	adc	r15, r24
    3bb8:	49 1f       	adc	r20, r25
    3bba:	51 1d       	adc	r21, r1
    3bbc:	66 0f       	add	r22, r22
    3bbe:	77 1f       	adc	r23, r23
    3bc0:	88 1f       	adc	r24, r24
    3bc2:	99 1f       	adc	r25, r25
    3bc4:	06 94       	lsr	r0
    3bc6:	a1 f7       	brne	.-24     	; 0x3bb0 <__ftoa_engine+0x74>
    3bc8:	05 90       	lpm	r0, Z+
    3bca:	07 94       	ror	r0
    3bcc:	28 f4       	brcc	.+10     	; 0x3bd8 <__ftoa_engine+0x9c>
    3bce:	e7 0e       	add	r14, r23
    3bd0:	f8 1e       	adc	r15, r24
    3bd2:	49 1f       	adc	r20, r25
    3bd4:	56 1f       	adc	r21, r22
    3bd6:	c1 1d       	adc	r28, r1
    3bd8:	77 0f       	add	r23, r23
    3bda:	88 1f       	adc	r24, r24
    3bdc:	99 1f       	adc	r25, r25
    3bde:	66 1f       	adc	r22, r22
    3be0:	06 94       	lsr	r0
    3be2:	a1 f7       	brne	.-24     	; 0x3bcc <__ftoa_engine+0x90>
    3be4:	05 90       	lpm	r0, Z+
    3be6:	07 94       	ror	r0
    3be8:	28 f4       	brcc	.+10     	; 0x3bf4 <__ftoa_engine+0xb8>
    3bea:	f8 0e       	add	r15, r24
    3bec:	49 1f       	adc	r20, r25
    3bee:	56 1f       	adc	r21, r22
    3bf0:	c7 1f       	adc	r28, r23
    3bf2:	d1 1d       	adc	r29, r1
    3bf4:	88 0f       	add	r24, r24
    3bf6:	99 1f       	adc	r25, r25
    3bf8:	66 1f       	adc	r22, r22
    3bfa:	77 1f       	adc	r23, r23
    3bfc:	06 94       	lsr	r0
    3bfe:	a1 f7       	brne	.-24     	; 0x3be8 <__ftoa_engine+0xac>
    3c00:	05 90       	lpm	r0, Z+
    3c02:	07 94       	ror	r0
    3c04:	20 f4       	brcc	.+8      	; 0x3c0e <__ftoa_engine+0xd2>
    3c06:	49 0f       	add	r20, r25
    3c08:	56 1f       	adc	r21, r22
    3c0a:	c7 1f       	adc	r28, r23
    3c0c:	d8 1f       	adc	r29, r24
    3c0e:	99 0f       	add	r25, r25
    3c10:	66 1f       	adc	r22, r22
    3c12:	77 1f       	adc	r23, r23
    3c14:	88 1f       	adc	r24, r24
    3c16:	06 94       	lsr	r0
    3c18:	a9 f7       	brne	.-22     	; 0x3c04 <__ftoa_engine+0xc8>
    3c1a:	84 91       	lpm	r24, Z
    3c1c:	10 95       	com	r17
    3c1e:	17 70       	andi	r17, 0x07	; 7
    3c20:	41 f0       	breq	.+16     	; 0x3c32 <__ftoa_engine+0xf6>
    3c22:	d6 95       	lsr	r29
    3c24:	c7 95       	ror	r28
    3c26:	57 95       	ror	r21
    3c28:	47 95       	ror	r20
    3c2a:	f7 94       	ror	r15
    3c2c:	e7 94       	ror	r14
    3c2e:	1a 95       	dec	r17
    3c30:	c1 f7       	brne	.-16     	; 0x3c22 <__ftoa_engine+0xe6>
    3c32:	e6 e8       	ldi	r30, 0x86	; 134
    3c34:	f2 e0       	ldi	r31, 0x02	; 2
    3c36:	68 94       	set
    3c38:	15 90       	lpm	r1, Z+
    3c3a:	15 91       	lpm	r17, Z+
    3c3c:	35 91       	lpm	r19, Z+
    3c3e:	65 91       	lpm	r22, Z+
    3c40:	95 91       	lpm	r25, Z+
    3c42:	05 90       	lpm	r0, Z+
    3c44:	7f e2       	ldi	r23, 0x2F	; 47
    3c46:	73 95       	inc	r23
    3c48:	e1 18       	sub	r14, r1
    3c4a:	f1 0a       	sbc	r15, r17
    3c4c:	43 0b       	sbc	r20, r19
    3c4e:	56 0b       	sbc	r21, r22
    3c50:	c9 0b       	sbc	r28, r25
    3c52:	d0 09       	sbc	r29, r0
    3c54:	c0 f7       	brcc	.-16     	; 0x3c46 <__ftoa_engine+0x10a>
    3c56:	e1 0c       	add	r14, r1
    3c58:	f1 1e       	adc	r15, r17
    3c5a:	43 1f       	adc	r20, r19
    3c5c:	56 1f       	adc	r21, r22
    3c5e:	c9 1f       	adc	r28, r25
    3c60:	d0 1d       	adc	r29, r0
    3c62:	7e f4       	brtc	.+30     	; 0x3c82 <__ftoa_engine+0x146>
    3c64:	70 33       	cpi	r23, 0x30	; 48
    3c66:	11 f4       	brne	.+4      	; 0x3c6c <__ftoa_engine+0x130>
    3c68:	8a 95       	dec	r24
    3c6a:	e6 cf       	rjmp	.-52     	; 0x3c38 <__ftoa_engine+0xfc>
    3c6c:	e8 94       	clt
    3c6e:	01 50       	subi	r16, 0x01	; 1
    3c70:	30 f0       	brcs	.+12     	; 0x3c7e <__ftoa_engine+0x142>
    3c72:	08 0f       	add	r16, r24
    3c74:	0a f4       	brpl	.+2      	; 0x3c78 <__ftoa_engine+0x13c>
    3c76:	00 27       	eor	r16, r16
    3c78:	02 17       	cp	r16, r18
    3c7a:	08 f4       	brcc	.+2      	; 0x3c7e <__ftoa_engine+0x142>
    3c7c:	20 2f       	mov	r18, r16
    3c7e:	23 95       	inc	r18
    3c80:	02 2f       	mov	r16, r18
    3c82:	7a 33       	cpi	r23, 0x3A	; 58
    3c84:	28 f0       	brcs	.+10     	; 0x3c90 <__ftoa_engine+0x154>
    3c86:	79 e3       	ldi	r23, 0x39	; 57
    3c88:	7d 93       	st	X+, r23
    3c8a:	2a 95       	dec	r18
    3c8c:	e9 f7       	brne	.-6      	; 0x3c88 <__ftoa_engine+0x14c>
    3c8e:	10 c0       	rjmp	.+32     	; 0x3cb0 <__ftoa_engine+0x174>
    3c90:	7d 93       	st	X+, r23
    3c92:	2a 95       	dec	r18
    3c94:	89 f6       	brne	.-94     	; 0x3c38 <__ftoa_engine+0xfc>
    3c96:	06 94       	lsr	r0
    3c98:	97 95       	ror	r25
    3c9a:	67 95       	ror	r22
    3c9c:	37 95       	ror	r19
    3c9e:	17 95       	ror	r17
    3ca0:	17 94       	ror	r1
    3ca2:	e1 18       	sub	r14, r1
    3ca4:	f1 0a       	sbc	r15, r17
    3ca6:	43 0b       	sbc	r20, r19
    3ca8:	56 0b       	sbc	r21, r22
    3caa:	c9 0b       	sbc	r28, r25
    3cac:	d0 09       	sbc	r29, r0
    3cae:	98 f0       	brcs	.+38     	; 0x3cd6 <__ftoa_engine+0x19a>
    3cb0:	23 95       	inc	r18
    3cb2:	7e 91       	ld	r23, -X
    3cb4:	73 95       	inc	r23
    3cb6:	7a 33       	cpi	r23, 0x3A	; 58
    3cb8:	08 f0       	brcs	.+2      	; 0x3cbc <__ftoa_engine+0x180>
    3cba:	70 e3       	ldi	r23, 0x30	; 48
    3cbc:	7c 93       	st	X, r23
    3cbe:	20 13       	cpse	r18, r16
    3cc0:	b8 f7       	brcc	.-18     	; 0x3cb0 <__ftoa_engine+0x174>
    3cc2:	7e 91       	ld	r23, -X
    3cc4:	70 61       	ori	r23, 0x10	; 16
    3cc6:	7d 93       	st	X+, r23
    3cc8:	30 f0       	brcs	.+12     	; 0x3cd6 <__ftoa_engine+0x19a>
    3cca:	83 95       	inc	r24
    3ccc:	71 e3       	ldi	r23, 0x31	; 49
    3cce:	7d 93       	st	X+, r23
    3cd0:	70 e3       	ldi	r23, 0x30	; 48
    3cd2:	2a 95       	dec	r18
    3cd4:	e1 f7       	brne	.-8      	; 0x3cce <__ftoa_engine+0x192>
    3cd6:	11 24       	eor	r1, r1
    3cd8:	ef 90       	pop	r14
    3cda:	ff 90       	pop	r15
    3cdc:	0f 91       	pop	r16
    3cde:	1f 91       	pop	r17
    3ce0:	cf 91       	pop	r28
    3ce2:	df 91       	pop	r29
    3ce4:	99 27       	eor	r25, r25
    3ce6:	87 fd       	sbrc	r24, 7
    3ce8:	90 95       	com	r25
    3cea:	08 95       	ret

00003cec <strnlen_P>:
    3cec:	fc 01       	movw	r30, r24
    3cee:	05 90       	lpm	r0, Z+
    3cf0:	61 50       	subi	r22, 0x01	; 1
    3cf2:	70 40       	sbci	r23, 0x00	; 0
    3cf4:	01 10       	cpse	r0, r1
    3cf6:	d8 f7       	brcc	.-10     	; 0x3cee <strnlen_P+0x2>
    3cf8:	80 95       	com	r24
    3cfa:	90 95       	com	r25
    3cfc:	8e 0f       	add	r24, r30
    3cfe:	9f 1f       	adc	r25, r31
    3d00:	08 95       	ret

00003d02 <strnlen>:
    3d02:	fc 01       	movw	r30, r24
    3d04:	61 50       	subi	r22, 0x01	; 1
    3d06:	70 40       	sbci	r23, 0x00	; 0
    3d08:	01 90       	ld	r0, Z+
    3d0a:	01 10       	cpse	r0, r1
    3d0c:	d8 f7       	brcc	.-10     	; 0x3d04 <strnlen+0x2>
    3d0e:	80 95       	com	r24
    3d10:	90 95       	com	r25
    3d12:	8e 0f       	add	r24, r30
    3d14:	9f 1f       	adc	r25, r31
    3d16:	08 95       	ret

00003d18 <fdevopen>:
    3d18:	0f 93       	push	r16
    3d1a:	1f 93       	push	r17
    3d1c:	cf 93       	push	r28
    3d1e:	df 93       	push	r29
    3d20:	00 97       	sbiw	r24, 0x00	; 0
    3d22:	31 f4       	brne	.+12     	; 0x3d30 <fdevopen+0x18>
    3d24:	61 15       	cp	r22, r1
    3d26:	71 05       	cpc	r23, r1
    3d28:	19 f4       	brne	.+6      	; 0x3d30 <fdevopen+0x18>
    3d2a:	80 e0       	ldi	r24, 0x00	; 0
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	39 c0       	rjmp	.+114    	; 0x3da2 <fdevopen+0x8a>
    3d30:	8b 01       	movw	r16, r22
    3d32:	ec 01       	movw	r28, r24
    3d34:	6e e0       	ldi	r22, 0x0E	; 14
    3d36:	70 e0       	ldi	r23, 0x00	; 0
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	90 e0       	ldi	r25, 0x00	; 0
    3d3c:	14 d1       	rcall	.+552    	; 0x3f66 <calloc>
    3d3e:	fc 01       	movw	r30, r24
    3d40:	89 2b       	or	r24, r25
    3d42:	99 f3       	breq	.-26     	; 0x3d2a <fdevopen+0x12>
    3d44:	80 e8       	ldi	r24, 0x80	; 128
    3d46:	83 83       	std	Z+3, r24	; 0x03
    3d48:	01 15       	cp	r16, r1
    3d4a:	11 05       	cpc	r17, r1
    3d4c:	71 f0       	breq	.+28     	; 0x3d6a <fdevopen+0x52>
    3d4e:	02 87       	std	Z+10, r16	; 0x0a
    3d50:	13 87       	std	Z+11, r17	; 0x0b
    3d52:	81 e8       	ldi	r24, 0x81	; 129
    3d54:	83 83       	std	Z+3, r24	; 0x03
    3d56:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <__iob>
    3d5a:	90 91 cb 20 	lds	r25, 0x20CB	; 0x8020cb <__iob+0x1>
    3d5e:	89 2b       	or	r24, r25
    3d60:	21 f4       	brne	.+8      	; 0x3d6a <fdevopen+0x52>
    3d62:	e0 93 ca 20 	sts	0x20CA, r30	; 0x8020ca <__iob>
    3d66:	f0 93 cb 20 	sts	0x20CB, r31	; 0x8020cb <__iob+0x1>
    3d6a:	20 97       	sbiw	r28, 0x00	; 0
    3d6c:	c9 f0       	breq	.+50     	; 0x3da0 <fdevopen+0x88>
    3d6e:	c0 87       	std	Z+8, r28	; 0x08
    3d70:	d1 87       	std	Z+9, r29	; 0x09
    3d72:	83 81       	ldd	r24, Z+3	; 0x03
    3d74:	82 60       	ori	r24, 0x02	; 2
    3d76:	83 83       	std	Z+3, r24	; 0x03
    3d78:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <__iob+0x2>
    3d7c:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <__iob+0x3>
    3d80:	89 2b       	or	r24, r25
    3d82:	71 f4       	brne	.+28     	; 0x3da0 <fdevopen+0x88>
    3d84:	e0 93 cc 20 	sts	0x20CC, r30	; 0x8020cc <__iob+0x2>
    3d88:	f0 93 cd 20 	sts	0x20CD, r31	; 0x8020cd <__iob+0x3>
    3d8c:	80 91 ce 20 	lds	r24, 0x20CE	; 0x8020ce <__iob+0x4>
    3d90:	90 91 cf 20 	lds	r25, 0x20CF	; 0x8020cf <__iob+0x5>
    3d94:	89 2b       	or	r24, r25
    3d96:	21 f4       	brne	.+8      	; 0x3da0 <fdevopen+0x88>
    3d98:	e0 93 ce 20 	sts	0x20CE, r30	; 0x8020ce <__iob+0x4>
    3d9c:	f0 93 cf 20 	sts	0x20CF, r31	; 0x8020cf <__iob+0x5>
    3da0:	cf 01       	movw	r24, r30
    3da2:	df 91       	pop	r29
    3da4:	cf 91       	pop	r28
    3da6:	1f 91       	pop	r17
    3da8:	0f 91       	pop	r16
    3daa:	08 95       	ret

00003dac <fputc>:
    3dac:	0f 93       	push	r16
    3dae:	1f 93       	push	r17
    3db0:	cf 93       	push	r28
    3db2:	df 93       	push	r29
    3db4:	fb 01       	movw	r30, r22
    3db6:	23 81       	ldd	r18, Z+3	; 0x03
    3db8:	21 fd       	sbrc	r18, 1
    3dba:	03 c0       	rjmp	.+6      	; 0x3dc2 <fputc+0x16>
    3dbc:	8f ef       	ldi	r24, 0xFF	; 255
    3dbe:	9f ef       	ldi	r25, 0xFF	; 255
    3dc0:	2c c0       	rjmp	.+88     	; 0x3e1a <fputc+0x6e>
    3dc2:	22 ff       	sbrs	r18, 2
    3dc4:	16 c0       	rjmp	.+44     	; 0x3df2 <fputc+0x46>
    3dc6:	46 81       	ldd	r20, Z+6	; 0x06
    3dc8:	57 81       	ldd	r21, Z+7	; 0x07
    3dca:	24 81       	ldd	r18, Z+4	; 0x04
    3dcc:	35 81       	ldd	r19, Z+5	; 0x05
    3dce:	42 17       	cp	r20, r18
    3dd0:	53 07       	cpc	r21, r19
    3dd2:	44 f4       	brge	.+16     	; 0x3de4 <fputc+0x38>
    3dd4:	a0 81       	ld	r26, Z
    3dd6:	b1 81       	ldd	r27, Z+1	; 0x01
    3dd8:	9d 01       	movw	r18, r26
    3dda:	2f 5f       	subi	r18, 0xFF	; 255
    3ddc:	3f 4f       	sbci	r19, 0xFF	; 255
    3dde:	20 83       	st	Z, r18
    3de0:	31 83       	std	Z+1, r19	; 0x01
    3de2:	8c 93       	st	X, r24
    3de4:	26 81       	ldd	r18, Z+6	; 0x06
    3de6:	37 81       	ldd	r19, Z+7	; 0x07
    3de8:	2f 5f       	subi	r18, 0xFF	; 255
    3dea:	3f 4f       	sbci	r19, 0xFF	; 255
    3dec:	26 83       	std	Z+6, r18	; 0x06
    3dee:	37 83       	std	Z+7, r19	; 0x07
    3df0:	14 c0       	rjmp	.+40     	; 0x3e1a <fputc+0x6e>
    3df2:	8b 01       	movw	r16, r22
    3df4:	ec 01       	movw	r28, r24
    3df6:	fb 01       	movw	r30, r22
    3df8:	00 84       	ldd	r0, Z+8	; 0x08
    3dfa:	f1 85       	ldd	r31, Z+9	; 0x09
    3dfc:	e0 2d       	mov	r30, r0
    3dfe:	19 95       	eicall
    3e00:	89 2b       	or	r24, r25
    3e02:	e1 f6       	brne	.-72     	; 0x3dbc <fputc+0x10>
    3e04:	d8 01       	movw	r26, r16
    3e06:	16 96       	adiw	r26, 0x06	; 6
    3e08:	8d 91       	ld	r24, X+
    3e0a:	9c 91       	ld	r25, X
    3e0c:	17 97       	sbiw	r26, 0x07	; 7
    3e0e:	01 96       	adiw	r24, 0x01	; 1
    3e10:	16 96       	adiw	r26, 0x06	; 6
    3e12:	8d 93       	st	X+, r24
    3e14:	9c 93       	st	X, r25
    3e16:	17 97       	sbiw	r26, 0x07	; 7
    3e18:	ce 01       	movw	r24, r28
    3e1a:	df 91       	pop	r29
    3e1c:	cf 91       	pop	r28
    3e1e:	1f 91       	pop	r17
    3e20:	0f 91       	pop	r16
    3e22:	08 95       	ret

00003e24 <printf>:
    3e24:	cf 93       	push	r28
    3e26:	df 93       	push	r29
    3e28:	cd b7       	in	r28, 0x3d	; 61
    3e2a:	de b7       	in	r29, 0x3e	; 62
    3e2c:	ae 01       	movw	r20, r28
    3e2e:	4a 5f       	subi	r20, 0xFA	; 250
    3e30:	5f 4f       	sbci	r21, 0xFF	; 255
    3e32:	fa 01       	movw	r30, r20
    3e34:	61 91       	ld	r22, Z+
    3e36:	71 91       	ld	r23, Z+
    3e38:	af 01       	movw	r20, r30
    3e3a:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <__iob+0x2>
    3e3e:	90 91 cd 20 	lds	r25, 0x20CD	; 0x8020cd <__iob+0x3>
    3e42:	fc d9       	rcall	.-3080   	; 0x323c <vfprintf>
    3e44:	df 91       	pop	r29
    3e46:	cf 91       	pop	r28
    3e48:	08 95       	ret

00003e4a <puts>:
    3e4a:	0f 93       	push	r16
    3e4c:	1f 93       	push	r17
    3e4e:	cf 93       	push	r28
    3e50:	df 93       	push	r29
    3e52:	e0 91 cc 20 	lds	r30, 0x20CC	; 0x8020cc <__iob+0x2>
    3e56:	f0 91 cd 20 	lds	r31, 0x20CD	; 0x8020cd <__iob+0x3>
    3e5a:	23 81       	ldd	r18, Z+3	; 0x03
    3e5c:	21 ff       	sbrs	r18, 1
    3e5e:	1b c0       	rjmp	.+54     	; 0x3e96 <puts+0x4c>
    3e60:	8c 01       	movw	r16, r24
    3e62:	d0 e0       	ldi	r29, 0x00	; 0
    3e64:	c0 e0       	ldi	r28, 0x00	; 0
    3e66:	f8 01       	movw	r30, r16
    3e68:	81 91       	ld	r24, Z+
    3e6a:	8f 01       	movw	r16, r30
    3e6c:	60 91 cc 20 	lds	r22, 0x20CC	; 0x8020cc <__iob+0x2>
    3e70:	70 91 cd 20 	lds	r23, 0x20CD	; 0x8020cd <__iob+0x3>
    3e74:	db 01       	movw	r26, r22
    3e76:	18 96       	adiw	r26, 0x08	; 8
    3e78:	ed 91       	ld	r30, X+
    3e7a:	fc 91       	ld	r31, X
    3e7c:	19 97       	sbiw	r26, 0x09	; 9
    3e7e:	88 23       	and	r24, r24
    3e80:	31 f0       	breq	.+12     	; 0x3e8e <puts+0x44>
    3e82:	19 95       	eicall
    3e84:	89 2b       	or	r24, r25
    3e86:	79 f3       	breq	.-34     	; 0x3e66 <puts+0x1c>
    3e88:	df ef       	ldi	r29, 0xFF	; 255
    3e8a:	cf ef       	ldi	r28, 0xFF	; 255
    3e8c:	ec cf       	rjmp	.-40     	; 0x3e66 <puts+0x1c>
    3e8e:	8a e0       	ldi	r24, 0x0A	; 10
    3e90:	19 95       	eicall
    3e92:	89 2b       	or	r24, r25
    3e94:	19 f0       	breq	.+6      	; 0x3e9c <puts+0x52>
    3e96:	8f ef       	ldi	r24, 0xFF	; 255
    3e98:	9f ef       	ldi	r25, 0xFF	; 255
    3e9a:	02 c0       	rjmp	.+4      	; 0x3ea0 <puts+0x56>
    3e9c:	8d 2f       	mov	r24, r29
    3e9e:	9c 2f       	mov	r25, r28
    3ea0:	df 91       	pop	r29
    3ea2:	cf 91       	pop	r28
    3ea4:	1f 91       	pop	r17
    3ea6:	0f 91       	pop	r16
    3ea8:	08 95       	ret

00003eaa <__ultoa_invert>:
    3eaa:	fa 01       	movw	r30, r20
    3eac:	aa 27       	eor	r26, r26
    3eae:	28 30       	cpi	r18, 0x08	; 8
    3eb0:	51 f1       	breq	.+84     	; 0x3f06 <__ultoa_invert+0x5c>
    3eb2:	20 31       	cpi	r18, 0x10	; 16
    3eb4:	81 f1       	breq	.+96     	; 0x3f16 <__ultoa_invert+0x6c>
    3eb6:	e8 94       	clt
    3eb8:	6f 93       	push	r22
    3eba:	6e 7f       	andi	r22, 0xFE	; 254
    3ebc:	6e 5f       	subi	r22, 0xFE	; 254
    3ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    3ec0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec4:	af 4f       	sbci	r26, 0xFF	; 255
    3ec6:	b1 e0       	ldi	r27, 0x01	; 1
    3ec8:	3e d0       	rcall	.+124    	; 0x3f46 <__ultoa_invert+0x9c>
    3eca:	b4 e0       	ldi	r27, 0x04	; 4
    3ecc:	3c d0       	rcall	.+120    	; 0x3f46 <__ultoa_invert+0x9c>
    3ece:	67 0f       	add	r22, r23
    3ed0:	78 1f       	adc	r23, r24
    3ed2:	89 1f       	adc	r24, r25
    3ed4:	9a 1f       	adc	r25, r26
    3ed6:	a1 1d       	adc	r26, r1
    3ed8:	68 0f       	add	r22, r24
    3eda:	79 1f       	adc	r23, r25
    3edc:	8a 1f       	adc	r24, r26
    3ede:	91 1d       	adc	r25, r1
    3ee0:	a1 1d       	adc	r26, r1
    3ee2:	6a 0f       	add	r22, r26
    3ee4:	71 1d       	adc	r23, r1
    3ee6:	81 1d       	adc	r24, r1
    3ee8:	91 1d       	adc	r25, r1
    3eea:	a1 1d       	adc	r26, r1
    3eec:	20 d0       	rcall	.+64     	; 0x3f2e <__ultoa_invert+0x84>
    3eee:	09 f4       	brne	.+2      	; 0x3ef2 <__ultoa_invert+0x48>
    3ef0:	68 94       	set
    3ef2:	3f 91       	pop	r19
    3ef4:	2a e0       	ldi	r18, 0x0A	; 10
    3ef6:	26 9f       	mul	r18, r22
    3ef8:	11 24       	eor	r1, r1
    3efa:	30 19       	sub	r19, r0
    3efc:	30 5d       	subi	r19, 0xD0	; 208
    3efe:	31 93       	st	Z+, r19
    3f00:	de f6       	brtc	.-74     	; 0x3eb8 <__ultoa_invert+0xe>
    3f02:	cf 01       	movw	r24, r30
    3f04:	08 95       	ret
    3f06:	46 2f       	mov	r20, r22
    3f08:	47 70       	andi	r20, 0x07	; 7
    3f0a:	40 5d       	subi	r20, 0xD0	; 208
    3f0c:	41 93       	st	Z+, r20
    3f0e:	b3 e0       	ldi	r27, 0x03	; 3
    3f10:	0f d0       	rcall	.+30     	; 0x3f30 <__ultoa_invert+0x86>
    3f12:	c9 f7       	brne	.-14     	; 0x3f06 <__ultoa_invert+0x5c>
    3f14:	f6 cf       	rjmp	.-20     	; 0x3f02 <__ultoa_invert+0x58>
    3f16:	46 2f       	mov	r20, r22
    3f18:	4f 70       	andi	r20, 0x0F	; 15
    3f1a:	40 5d       	subi	r20, 0xD0	; 208
    3f1c:	4a 33       	cpi	r20, 0x3A	; 58
    3f1e:	18 f0       	brcs	.+6      	; 0x3f26 <__ultoa_invert+0x7c>
    3f20:	49 5d       	subi	r20, 0xD9	; 217
    3f22:	31 fd       	sbrc	r19, 1
    3f24:	40 52       	subi	r20, 0x20	; 32
    3f26:	41 93       	st	Z+, r20
    3f28:	02 d0       	rcall	.+4      	; 0x3f2e <__ultoa_invert+0x84>
    3f2a:	a9 f7       	brne	.-22     	; 0x3f16 <__ultoa_invert+0x6c>
    3f2c:	ea cf       	rjmp	.-44     	; 0x3f02 <__ultoa_invert+0x58>
    3f2e:	b4 e0       	ldi	r27, 0x04	; 4
    3f30:	a6 95       	lsr	r26
    3f32:	97 95       	ror	r25
    3f34:	87 95       	ror	r24
    3f36:	77 95       	ror	r23
    3f38:	67 95       	ror	r22
    3f3a:	ba 95       	dec	r27
    3f3c:	c9 f7       	brne	.-14     	; 0x3f30 <__ultoa_invert+0x86>
    3f3e:	00 97       	sbiw	r24, 0x00	; 0
    3f40:	61 05       	cpc	r22, r1
    3f42:	71 05       	cpc	r23, r1
    3f44:	08 95       	ret
    3f46:	9b 01       	movw	r18, r22
    3f48:	ac 01       	movw	r20, r24
    3f4a:	0a 2e       	mov	r0, r26
    3f4c:	06 94       	lsr	r0
    3f4e:	57 95       	ror	r21
    3f50:	47 95       	ror	r20
    3f52:	37 95       	ror	r19
    3f54:	27 95       	ror	r18
    3f56:	ba 95       	dec	r27
    3f58:	c9 f7       	brne	.-14     	; 0x3f4c <__ultoa_invert+0xa2>
    3f5a:	62 0f       	add	r22, r18
    3f5c:	73 1f       	adc	r23, r19
    3f5e:	84 1f       	adc	r24, r20
    3f60:	95 1f       	adc	r25, r21
    3f62:	a0 1d       	adc	r26, r0
    3f64:	08 95       	ret

00003f66 <calloc>:
    3f66:	0f 93       	push	r16
    3f68:	1f 93       	push	r17
    3f6a:	cf 93       	push	r28
    3f6c:	df 93       	push	r29
    3f6e:	86 9f       	mul	r24, r22
    3f70:	80 01       	movw	r16, r0
    3f72:	87 9f       	mul	r24, r23
    3f74:	10 0d       	add	r17, r0
    3f76:	96 9f       	mul	r25, r22
    3f78:	10 0d       	add	r17, r0
    3f7a:	11 24       	eor	r1, r1
    3f7c:	c8 01       	movw	r24, r16
    3f7e:	0d d0       	rcall	.+26     	; 0x3f9a <malloc>
    3f80:	ec 01       	movw	r28, r24
    3f82:	00 97       	sbiw	r24, 0x00	; 0
    3f84:	21 f0       	breq	.+8      	; 0x3f8e <calloc+0x28>
    3f86:	a8 01       	movw	r20, r16
    3f88:	60 e0       	ldi	r22, 0x00	; 0
    3f8a:	70 e0       	ldi	r23, 0x00	; 0
    3f8c:	27 d1       	rcall	.+590    	; 0x41dc <memset>
    3f8e:	ce 01       	movw	r24, r28
    3f90:	df 91       	pop	r29
    3f92:	cf 91       	pop	r28
    3f94:	1f 91       	pop	r17
    3f96:	0f 91       	pop	r16
    3f98:	08 95       	ret

00003f9a <malloc>:
    3f9a:	0f 93       	push	r16
    3f9c:	1f 93       	push	r17
    3f9e:	cf 93       	push	r28
    3fa0:	df 93       	push	r29
    3fa2:	82 30       	cpi	r24, 0x02	; 2
    3fa4:	91 05       	cpc	r25, r1
    3fa6:	10 f4       	brcc	.+4      	; 0x3fac <malloc+0x12>
    3fa8:	82 e0       	ldi	r24, 0x02	; 2
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	e0 91 d2 20 	lds	r30, 0x20D2	; 0x8020d2 <__flp>
    3fb0:	f0 91 d3 20 	lds	r31, 0x20D3	; 0x8020d3 <__flp+0x1>
    3fb4:	20 e0       	ldi	r18, 0x00	; 0
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	a0 e0       	ldi	r26, 0x00	; 0
    3fba:	b0 e0       	ldi	r27, 0x00	; 0
    3fbc:	30 97       	sbiw	r30, 0x00	; 0
    3fbe:	19 f1       	breq	.+70     	; 0x4006 <__stack+0x7>
    3fc0:	40 81       	ld	r20, Z
    3fc2:	51 81       	ldd	r21, Z+1	; 0x01
    3fc4:	02 81       	ldd	r16, Z+2	; 0x02
    3fc6:	13 81       	ldd	r17, Z+3	; 0x03
    3fc8:	48 17       	cp	r20, r24
    3fca:	59 07       	cpc	r21, r25
    3fcc:	c8 f0       	brcs	.+50     	; 0x4000 <__stack+0x1>
    3fce:	84 17       	cp	r24, r20
    3fd0:	95 07       	cpc	r25, r21
    3fd2:	69 f4       	brne	.+26     	; 0x3fee <malloc+0x54>
    3fd4:	10 97       	sbiw	r26, 0x00	; 0
    3fd6:	31 f0       	breq	.+12     	; 0x3fe4 <malloc+0x4a>
    3fd8:	12 96       	adiw	r26, 0x02	; 2
    3fda:	0c 93       	st	X, r16
    3fdc:	12 97       	sbiw	r26, 0x02	; 2
    3fde:	13 96       	adiw	r26, 0x03	; 3
    3fe0:	1c 93       	st	X, r17
    3fe2:	27 c0       	rjmp	.+78     	; 0x4032 <__stack+0x33>
    3fe4:	00 93 d2 20 	sts	0x20D2, r16	; 0x8020d2 <__flp>
    3fe8:	10 93 d3 20 	sts	0x20D3, r17	; 0x8020d3 <__flp+0x1>
    3fec:	22 c0       	rjmp	.+68     	; 0x4032 <__stack+0x33>
    3fee:	21 15       	cp	r18, r1
    3ff0:	31 05       	cpc	r19, r1
    3ff2:	19 f0       	breq	.+6      	; 0x3ffa <malloc+0x60>
    3ff4:	42 17       	cp	r20, r18
    3ff6:	53 07       	cpc	r21, r19
    3ff8:	18 f4       	brcc	.+6      	; 0x4000 <__stack+0x1>
    3ffa:	9a 01       	movw	r18, r20
    3ffc:	bd 01       	movw	r22, r26
    3ffe:	ef 01       	movw	r28, r30
    4000:	df 01       	movw	r26, r30
    4002:	f8 01       	movw	r30, r16
    4004:	db cf       	rjmp	.-74     	; 0x3fbc <malloc+0x22>
    4006:	21 15       	cp	r18, r1
    4008:	31 05       	cpc	r19, r1
    400a:	f9 f0       	breq	.+62     	; 0x404a <__stack+0x4b>
    400c:	28 1b       	sub	r18, r24
    400e:	39 0b       	sbc	r19, r25
    4010:	24 30       	cpi	r18, 0x04	; 4
    4012:	31 05       	cpc	r19, r1
    4014:	80 f4       	brcc	.+32     	; 0x4036 <__stack+0x37>
    4016:	8a 81       	ldd	r24, Y+2	; 0x02
    4018:	9b 81       	ldd	r25, Y+3	; 0x03
    401a:	61 15       	cp	r22, r1
    401c:	71 05       	cpc	r23, r1
    401e:	21 f0       	breq	.+8      	; 0x4028 <__stack+0x29>
    4020:	fb 01       	movw	r30, r22
    4022:	82 83       	std	Z+2, r24	; 0x02
    4024:	93 83       	std	Z+3, r25	; 0x03
    4026:	04 c0       	rjmp	.+8      	; 0x4030 <__stack+0x31>
    4028:	80 93 d2 20 	sts	0x20D2, r24	; 0x8020d2 <__flp>
    402c:	90 93 d3 20 	sts	0x20D3, r25	; 0x8020d3 <__flp+0x1>
    4030:	fe 01       	movw	r30, r28
    4032:	32 96       	adiw	r30, 0x02	; 2
    4034:	44 c0       	rjmp	.+136    	; 0x40be <__stack+0xbf>
    4036:	fe 01       	movw	r30, r28
    4038:	e2 0f       	add	r30, r18
    403a:	f3 1f       	adc	r31, r19
    403c:	81 93       	st	Z+, r24
    403e:	91 93       	st	Z+, r25
    4040:	22 50       	subi	r18, 0x02	; 2
    4042:	31 09       	sbc	r19, r1
    4044:	28 83       	st	Y, r18
    4046:	39 83       	std	Y+1, r19	; 0x01
    4048:	3a c0       	rjmp	.+116    	; 0x40be <__stack+0xbf>
    404a:	20 91 d0 20 	lds	r18, 0x20D0	; 0x8020d0 <__brkval>
    404e:	30 91 d1 20 	lds	r19, 0x20D1	; 0x8020d1 <__brkval+0x1>
    4052:	23 2b       	or	r18, r19
    4054:	41 f4       	brne	.+16     	; 0x4066 <__stack+0x67>
    4056:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    405a:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    405e:	20 93 d0 20 	sts	0x20D0, r18	; 0x8020d0 <__brkval>
    4062:	30 93 d1 20 	sts	0x20D1, r19	; 0x8020d1 <__brkval+0x1>
    4066:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    406a:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    406e:	21 15       	cp	r18, r1
    4070:	31 05       	cpc	r19, r1
    4072:	41 f4       	brne	.+16     	; 0x4084 <__stack+0x85>
    4074:	2d b7       	in	r18, 0x3d	; 61
    4076:	3e b7       	in	r19, 0x3e	; 62
    4078:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    407c:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    4080:	24 1b       	sub	r18, r20
    4082:	35 0b       	sbc	r19, r21
    4084:	e0 91 d0 20 	lds	r30, 0x20D0	; 0x8020d0 <__brkval>
    4088:	f0 91 d1 20 	lds	r31, 0x20D1	; 0x8020d1 <__brkval+0x1>
    408c:	e2 17       	cp	r30, r18
    408e:	f3 07       	cpc	r31, r19
    4090:	a0 f4       	brcc	.+40     	; 0x40ba <__stack+0xbb>
    4092:	2e 1b       	sub	r18, r30
    4094:	3f 0b       	sbc	r19, r31
    4096:	28 17       	cp	r18, r24
    4098:	39 07       	cpc	r19, r25
    409a:	78 f0       	brcs	.+30     	; 0x40ba <__stack+0xbb>
    409c:	ac 01       	movw	r20, r24
    409e:	4e 5f       	subi	r20, 0xFE	; 254
    40a0:	5f 4f       	sbci	r21, 0xFF	; 255
    40a2:	24 17       	cp	r18, r20
    40a4:	35 07       	cpc	r19, r21
    40a6:	48 f0       	brcs	.+18     	; 0x40ba <__stack+0xbb>
    40a8:	4e 0f       	add	r20, r30
    40aa:	5f 1f       	adc	r21, r31
    40ac:	40 93 d0 20 	sts	0x20D0, r20	; 0x8020d0 <__brkval>
    40b0:	50 93 d1 20 	sts	0x20D1, r21	; 0x8020d1 <__brkval+0x1>
    40b4:	81 93       	st	Z+, r24
    40b6:	91 93       	st	Z+, r25
    40b8:	02 c0       	rjmp	.+4      	; 0x40be <__stack+0xbf>
    40ba:	e0 e0       	ldi	r30, 0x00	; 0
    40bc:	f0 e0       	ldi	r31, 0x00	; 0
    40be:	cf 01       	movw	r24, r30
    40c0:	df 91       	pop	r29
    40c2:	cf 91       	pop	r28
    40c4:	1f 91       	pop	r17
    40c6:	0f 91       	pop	r16
    40c8:	08 95       	ret

000040ca <free>:
    40ca:	cf 93       	push	r28
    40cc:	df 93       	push	r29
    40ce:	00 97       	sbiw	r24, 0x00	; 0
    40d0:	09 f4       	brne	.+2      	; 0x40d4 <free+0xa>
    40d2:	81 c0       	rjmp	.+258    	; 0x41d6 <free+0x10c>
    40d4:	fc 01       	movw	r30, r24
    40d6:	32 97       	sbiw	r30, 0x02	; 2
    40d8:	12 82       	std	Z+2, r1	; 0x02
    40da:	13 82       	std	Z+3, r1	; 0x03
    40dc:	a0 91 d2 20 	lds	r26, 0x20D2	; 0x8020d2 <__flp>
    40e0:	b0 91 d3 20 	lds	r27, 0x20D3	; 0x8020d3 <__flp+0x1>
    40e4:	10 97       	sbiw	r26, 0x00	; 0
    40e6:	81 f4       	brne	.+32     	; 0x4108 <free+0x3e>
    40e8:	20 81       	ld	r18, Z
    40ea:	31 81       	ldd	r19, Z+1	; 0x01
    40ec:	82 0f       	add	r24, r18
    40ee:	93 1f       	adc	r25, r19
    40f0:	20 91 d0 20 	lds	r18, 0x20D0	; 0x8020d0 <__brkval>
    40f4:	30 91 d1 20 	lds	r19, 0x20D1	; 0x8020d1 <__brkval+0x1>
    40f8:	28 17       	cp	r18, r24
    40fa:	39 07       	cpc	r19, r25
    40fc:	51 f5       	brne	.+84     	; 0x4152 <free+0x88>
    40fe:	e0 93 d0 20 	sts	0x20D0, r30	; 0x8020d0 <__brkval>
    4102:	f0 93 d1 20 	sts	0x20D1, r31	; 0x8020d1 <__brkval+0x1>
    4106:	67 c0       	rjmp	.+206    	; 0x41d6 <free+0x10c>
    4108:	ed 01       	movw	r28, r26
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	ce 17       	cp	r28, r30
    4110:	df 07       	cpc	r29, r31
    4112:	40 f4       	brcc	.+16     	; 0x4124 <free+0x5a>
    4114:	4a 81       	ldd	r20, Y+2	; 0x02
    4116:	5b 81       	ldd	r21, Y+3	; 0x03
    4118:	9e 01       	movw	r18, r28
    411a:	41 15       	cp	r20, r1
    411c:	51 05       	cpc	r21, r1
    411e:	f1 f0       	breq	.+60     	; 0x415c <free+0x92>
    4120:	ea 01       	movw	r28, r20
    4122:	f5 cf       	rjmp	.-22     	; 0x410e <free+0x44>
    4124:	c2 83       	std	Z+2, r28	; 0x02
    4126:	d3 83       	std	Z+3, r29	; 0x03
    4128:	40 81       	ld	r20, Z
    412a:	51 81       	ldd	r21, Z+1	; 0x01
    412c:	84 0f       	add	r24, r20
    412e:	95 1f       	adc	r25, r21
    4130:	c8 17       	cp	r28, r24
    4132:	d9 07       	cpc	r29, r25
    4134:	59 f4       	brne	.+22     	; 0x414c <free+0x82>
    4136:	88 81       	ld	r24, Y
    4138:	99 81       	ldd	r25, Y+1	; 0x01
    413a:	84 0f       	add	r24, r20
    413c:	95 1f       	adc	r25, r21
    413e:	02 96       	adiw	r24, 0x02	; 2
    4140:	80 83       	st	Z, r24
    4142:	91 83       	std	Z+1, r25	; 0x01
    4144:	8a 81       	ldd	r24, Y+2	; 0x02
    4146:	9b 81       	ldd	r25, Y+3	; 0x03
    4148:	82 83       	std	Z+2, r24	; 0x02
    414a:	93 83       	std	Z+3, r25	; 0x03
    414c:	21 15       	cp	r18, r1
    414e:	31 05       	cpc	r19, r1
    4150:	29 f4       	brne	.+10     	; 0x415c <free+0x92>
    4152:	e0 93 d2 20 	sts	0x20D2, r30	; 0x8020d2 <__flp>
    4156:	f0 93 d3 20 	sts	0x20D3, r31	; 0x8020d3 <__flp+0x1>
    415a:	3d c0       	rjmp	.+122    	; 0x41d6 <free+0x10c>
    415c:	e9 01       	movw	r28, r18
    415e:	ea 83       	std	Y+2, r30	; 0x02
    4160:	fb 83       	std	Y+3, r31	; 0x03
    4162:	49 91       	ld	r20, Y+
    4164:	59 91       	ld	r21, Y+
    4166:	c4 0f       	add	r28, r20
    4168:	d5 1f       	adc	r29, r21
    416a:	ec 17       	cp	r30, r28
    416c:	fd 07       	cpc	r31, r29
    416e:	61 f4       	brne	.+24     	; 0x4188 <free+0xbe>
    4170:	80 81       	ld	r24, Z
    4172:	91 81       	ldd	r25, Z+1	; 0x01
    4174:	84 0f       	add	r24, r20
    4176:	95 1f       	adc	r25, r21
    4178:	02 96       	adiw	r24, 0x02	; 2
    417a:	e9 01       	movw	r28, r18
    417c:	88 83       	st	Y, r24
    417e:	99 83       	std	Y+1, r25	; 0x01
    4180:	82 81       	ldd	r24, Z+2	; 0x02
    4182:	93 81       	ldd	r25, Z+3	; 0x03
    4184:	8a 83       	std	Y+2, r24	; 0x02
    4186:	9b 83       	std	Y+3, r25	; 0x03
    4188:	e0 e0       	ldi	r30, 0x00	; 0
    418a:	f0 e0       	ldi	r31, 0x00	; 0
    418c:	12 96       	adiw	r26, 0x02	; 2
    418e:	8d 91       	ld	r24, X+
    4190:	9c 91       	ld	r25, X
    4192:	13 97       	sbiw	r26, 0x03	; 3
    4194:	00 97       	sbiw	r24, 0x00	; 0
    4196:	19 f0       	breq	.+6      	; 0x419e <free+0xd4>
    4198:	fd 01       	movw	r30, r26
    419a:	dc 01       	movw	r26, r24
    419c:	f7 cf       	rjmp	.-18     	; 0x418c <free+0xc2>
    419e:	8d 91       	ld	r24, X+
    41a0:	9c 91       	ld	r25, X
    41a2:	11 97       	sbiw	r26, 0x01	; 1
    41a4:	9d 01       	movw	r18, r26
    41a6:	2e 5f       	subi	r18, 0xFE	; 254
    41a8:	3f 4f       	sbci	r19, 0xFF	; 255
    41aa:	82 0f       	add	r24, r18
    41ac:	93 1f       	adc	r25, r19
    41ae:	20 91 d0 20 	lds	r18, 0x20D0	; 0x8020d0 <__brkval>
    41b2:	30 91 d1 20 	lds	r19, 0x20D1	; 0x8020d1 <__brkval+0x1>
    41b6:	28 17       	cp	r18, r24
    41b8:	39 07       	cpc	r19, r25
    41ba:	69 f4       	brne	.+26     	; 0x41d6 <free+0x10c>
    41bc:	30 97       	sbiw	r30, 0x00	; 0
    41be:	29 f4       	brne	.+10     	; 0x41ca <free+0x100>
    41c0:	10 92 d2 20 	sts	0x20D2, r1	; 0x8020d2 <__flp>
    41c4:	10 92 d3 20 	sts	0x20D3, r1	; 0x8020d3 <__flp+0x1>
    41c8:	02 c0       	rjmp	.+4      	; 0x41ce <free+0x104>
    41ca:	12 82       	std	Z+2, r1	; 0x02
    41cc:	13 82       	std	Z+3, r1	; 0x03
    41ce:	a0 93 d0 20 	sts	0x20D0, r26	; 0x8020d0 <__brkval>
    41d2:	b0 93 d1 20 	sts	0x20D1, r27	; 0x8020d1 <__brkval+0x1>
    41d6:	df 91       	pop	r29
    41d8:	cf 91       	pop	r28
    41da:	08 95       	ret

000041dc <memset>:
    41dc:	dc 01       	movw	r26, r24
    41de:	01 c0       	rjmp	.+2      	; 0x41e2 <memset+0x6>
    41e0:	6d 93       	st	X+, r22
    41e2:	41 50       	subi	r20, 0x01	; 1
    41e4:	50 40       	sbci	r21, 0x00	; 0
    41e6:	e0 f7       	brcc	.-8      	; 0x41e0 <memset+0x4>
    41e8:	08 95       	ret

000041ea <_exit>:
    41ea:	f8 94       	cli

000041ec <__stop_program>:
    41ec:	ff cf       	rjmp	.-2      	; 0x41ec <__stop_program>
