
CanSat Probe Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00802000  00004e4a  00004ede  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000331  00802084  00802084  00004f62  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004f62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004fc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000698  00000000  00000000  00005000  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00014fa6  00000000  00000000  00005698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000065c9  00000000  00000000  0001a63e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000af56  00000000  00000000  00020c07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f78  00000000  00000000  0002bb60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00035adb  00000000  00000000  0002dad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007c00  00000000  00000000  000635b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000628  00000000  00000000  0006b1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000d0a2  00000000  00000000  0006b7e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fe c1       	rjmp	.+1020   	; 0x3fe <__ctors_end>
       2:	00 00       	nop
       4:	22 c2       	rjmp	.+1092   	; 0x44a <__bad_interrupt>
       6:	00 00       	nop
       8:	0c 94 36 15 	jmp	0x2a6c	; 0x2a6c <__vector_2>
       c:	1e c2       	rjmp	.+1084   	; 0x44a <__bad_interrupt>
       e:	00 00       	nop
      10:	1c c2       	rjmp	.+1080   	; 0x44a <__bad_interrupt>
      12:	00 00       	nop
      14:	1a c2       	rjmp	.+1076   	; 0x44a <__bad_interrupt>
      16:	00 00       	nop
      18:	18 c2       	rjmp	.+1072   	; 0x44a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	16 c2       	rjmp	.+1068   	; 0x44a <__bad_interrupt>
      1e:	00 00       	nop
      20:	14 c2       	rjmp	.+1064   	; 0x44a <__bad_interrupt>
      22:	00 00       	nop
      24:	12 c2       	rjmp	.+1060   	; 0x44a <__bad_interrupt>
      26:	00 00       	nop
      28:	10 c2       	rjmp	.+1056   	; 0x44a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0e c2       	rjmp	.+1052   	; 0x44a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c c2       	rjmp	.+1048   	; 0x44a <__bad_interrupt>
      32:	00 00       	nop
      34:	a2 c2       	rjmp	.+1348   	; 0x57a <__vector_13>
      36:	00 00       	nop
      38:	ea c5       	rjmp	.+3028   	; 0xc0e <__vector_14>
      3a:	00 00       	nop
      3c:	20 c6       	rjmp	.+3136   	; 0xc7e <__vector_15>
      3e:	00 00       	nop
      40:	56 c6       	rjmp	.+3244   	; 0xcee <__vector_16>
      42:	00 00       	nop
      44:	8c c6       	rjmp	.+3352   	; 0xd5e <__vector_17>
      46:	00 00       	nop
      48:	c2 c6       	rjmp	.+3460   	; 0xdce <__vector_18>
      4a:	00 00       	nop
      4c:	f8 c6       	rjmp	.+3568   	; 0xe3e <__vector_19>
      4e:	00 00       	nop
      50:	2e c7       	rjmp	.+3676   	; 0xeae <__vector_20>
      52:	00 00       	nop
      54:	64 c7       	rjmp	.+3784   	; 0xf1e <__vector_21>
      56:	00 00       	nop
      58:	9a c7       	rjmp	.+3892   	; 0xf8e <__vector_22>
      5a:	00 00       	nop
      5c:	d0 c7       	rjmp	.+4000   	; 0xffe <__vector_23>
      5e:	00 00       	nop
      60:	f4 c1       	rjmp	.+1000   	; 0x44a <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__vector_25>
      68:	f0 c1       	rjmp	.+992    	; 0x44a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ee c1       	rjmp	.+988    	; 0x44a <__bad_interrupt>
      6e:	00 00       	nop
      70:	ec c1       	rjmp	.+984    	; 0x44a <__bad_interrupt>
      72:	00 00       	nop
      74:	ea c1       	rjmp	.+980    	; 0x44a <__bad_interrupt>
      76:	00 00       	nop
      78:	e8 c1       	rjmp	.+976    	; 0x44a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e6 c1       	rjmp	.+972    	; 0x44a <__bad_interrupt>
      7e:	00 00       	nop
      80:	e4 c1       	rjmp	.+968    	; 0x44a <__bad_interrupt>
      82:	00 00       	nop
      84:	e2 c1       	rjmp	.+964    	; 0x44a <__bad_interrupt>
      86:	00 00       	nop
      88:	e0 c1       	rjmp	.+960    	; 0x44a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	de c1       	rjmp	.+956    	; 0x44a <__bad_interrupt>
      8e:	00 00       	nop
      90:	dc c1       	rjmp	.+952    	; 0x44a <__bad_interrupt>
      92:	00 00       	nop
      94:	da c1       	rjmp	.+948    	; 0x44a <__bad_interrupt>
      96:	00 00       	nop
      98:	d8 c1       	rjmp	.+944    	; 0x44a <__bad_interrupt>
      9a:	00 00       	nop
      9c:	b4 c4       	rjmp	.+2408   	; 0xa06 <__vector_39>
      9e:	00 00       	nop
      a0:	ef c4       	rjmp	.+2526   	; 0xa80 <__vector_40>
      a2:	00 00       	nop
      a4:	2a c5       	rjmp	.+2644   	; 0xafa <__vector_41>
      a6:	00 00       	nop
      a8:	65 c5       	rjmp	.+2762   	; 0xb74 <__vector_42>
      aa:	00 00       	nop
      ac:	ce c1       	rjmp	.+924    	; 0x44a <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cc c1       	rjmp	.+920    	; 0x44a <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ca c1       	rjmp	.+916    	; 0x44a <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c4 c2       	rjmp	.+1416   	; 0x642 <__vector_46>
      ba:	00 00       	nop
      bc:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__vector_47>
      c0:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__vector_48>
      c4:	0c 94 d7 0a 	jmp	0x15ae	; 0x15ae <__vector_49>
      c8:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_50>
      cc:	0c 94 47 0b 	jmp	0x168e	; 0x168e <__vector_51>
      d0:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_52>
      d4:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_53>
      d8:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__vector_54>
      dc:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__vector_55>
      e0:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_56>
      e4:	b2 c1       	rjmp	.+868    	; 0x44a <__bad_interrupt>
      e6:	00 00       	nop
      e8:	b0 c1       	rjmp	.+864    	; 0x44a <__bad_interrupt>
      ea:	00 00       	nop
      ec:	ae c1       	rjmp	.+860    	; 0x44a <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ac c1       	rjmp	.+856    	; 0x44a <__bad_interrupt>
      f2:	00 00       	nop
      f4:	aa c1       	rjmp	.+852    	; 0x44a <__bad_interrupt>
      f6:	00 00       	nop
      f8:	a8 c1       	rjmp	.+848    	; 0x44a <__bad_interrupt>
      fa:	00 00       	nop
      fc:	a6 c1       	rjmp	.+844    	; 0x44a <__bad_interrupt>
      fe:	00 00       	nop
     100:	a4 c1       	rjmp	.+840    	; 0x44a <__bad_interrupt>
     102:	00 00       	nop
     104:	a2 c1       	rjmp	.+836    	; 0x44a <__bad_interrupt>
     106:	00 00       	nop
     108:	a0 c1       	rjmp	.+832    	; 0x44a <__bad_interrupt>
     10a:	00 00       	nop
     10c:	9e c1       	rjmp	.+828    	; 0x44a <__bad_interrupt>
     10e:	00 00       	nop
     110:	9c c1       	rjmp	.+824    	; 0x44a <__bad_interrupt>
     112:	00 00       	nop
     114:	9a c1       	rjmp	.+820    	; 0x44a <__bad_interrupt>
     116:	00 00       	nop
     118:	98 c1       	rjmp	.+816    	; 0x44a <__bad_interrupt>
     11a:	00 00       	nop
     11c:	80 c3       	rjmp	.+1792   	; 0x81e <__vector_71>
     11e:	00 00       	nop
     120:	bb c3       	rjmp	.+1910   	; 0x898 <__vector_72>
     122:	00 00       	nop
     124:	f6 c3       	rjmp	.+2028   	; 0x912 <__vector_73>
     126:	00 00       	nop
     128:	31 c4       	rjmp	.+2146   	; 0x98c <__vector_74>
     12a:	00 00       	nop
     12c:	8e c1       	rjmp	.+796    	; 0x44a <__bad_interrupt>
     12e:	00 00       	nop
     130:	56 c2       	rjmp	.+1196   	; 0x5de <__vector_76>
     132:	00 00       	nop
     134:	9c c7       	rjmp	.+3896   	; 0x106e <__vector_77>
     136:	00 00       	nop
     138:	d2 c7       	rjmp	.+4004   	; 0x10de <__vector_78>
     13a:	00 00       	nop
     13c:	0c 94 a7 08 	jmp	0x114e	; 0x114e <__vector_79>
     140:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_80>
     144:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_81>
     148:	0c 94 4f 09 	jmp	0x129e	; 0x129e <__vector_82>
     14c:	0c 94 87 09 	jmp	0x130e	; 0x130e <__vector_83>
     150:	0c 94 bf 09 	jmp	0x137e	; 0x137e <__vector_84>
     154:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_85>
     158:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__vector_86>
     15c:	76 c1       	rjmp	.+748    	; 0x44a <__bad_interrupt>
     15e:	00 00       	nop
     160:	74 c1       	rjmp	.+744    	; 0x44a <__bad_interrupt>
     162:	00 00       	nop
     164:	72 c1       	rjmp	.+740    	; 0x44a <__bad_interrupt>
     166:	00 00       	nop
     168:	70 c1       	rjmp	.+736    	; 0x44a <__bad_interrupt>
     16a:	00 00       	nop
     16c:	6e c1       	rjmp	.+732    	; 0x44a <__bad_interrupt>
     16e:	00 00       	nop
     170:	6c c1       	rjmp	.+728    	; 0x44a <__bad_interrupt>
     172:	00 00       	nop
     174:	6a c1       	rjmp	.+724    	; 0x44a <__bad_interrupt>
     176:	00 00       	nop
     178:	68 c1       	rjmp	.+720    	; 0x44a <__bad_interrupt>
     17a:	00 00       	nop
     17c:	66 c1       	rjmp	.+716    	; 0x44a <__bad_interrupt>
     17e:	00 00       	nop
     180:	64 c1       	rjmp	.+712    	; 0x44a <__bad_interrupt>
     182:	00 00       	nop
     184:	62 c1       	rjmp	.+708    	; 0x44a <__bad_interrupt>
     186:	00 00       	nop
     188:	60 c1       	rjmp	.+704    	; 0x44a <__bad_interrupt>
     18a:	00 00       	nop
     18c:	5e c1       	rjmp	.+700    	; 0x44a <__bad_interrupt>
     18e:	00 00       	nop
     190:	5c c1       	rjmp	.+696    	; 0x44a <__bad_interrupt>
     192:	00 00       	nop
     194:	5a c1       	rjmp	.+692    	; 0x44a <__bad_interrupt>
     196:	00 00       	nop
     198:	58 c1       	rjmp	.+688    	; 0x44a <__bad_interrupt>
     19a:	00 00       	nop
     19c:	56 c1       	rjmp	.+684    	; 0x44a <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	54 c1       	rjmp	.+680    	; 0x44a <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	52 c1       	rjmp	.+676    	; 0x44a <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	50 c1       	rjmp	.+672    	; 0x44a <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	7c c2       	rjmp	.+1272   	; 0x6a6 <__vector_107>
     1ae:	00 00       	nop
     1b0:	0c 94 97 0c 	jmp	0x192e	; 0x192e <__vector_108>
     1b4:	0c 94 cf 0c 	jmp	0x199e	; 0x199e <__vector_109>
     1b8:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__vector_110>
     1bc:	0c 94 3f 0d 	jmp	0x1a7e	; 0x1a7e <__vector_111>
     1c0:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__vector_112>
     1c4:	0c 94 af 0d 	jmp	0x1b5e	; 0x1b5e <__vector_113>
     1c8:	0c 94 e7 0d 	jmp	0x1bce	; 0x1bce <__vector_114>
     1cc:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__vector_115>
     1d0:	0c 94 57 0e 	jmp	0x1cae	; 0x1cae <__vector_116>
     1d4:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__vector_117>
     1d8:	38 c1       	rjmp	.+624    	; 0x44a <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	36 c1       	rjmp	.+620    	; 0x44a <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	34 c1       	rjmp	.+616    	; 0x44a <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	32 c1       	rjmp	.+612    	; 0x44a <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	30 c1       	rjmp	.+608    	; 0x44a <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	2e c1       	rjmp	.+604    	; 0x44a <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	2c c1       	rjmp	.+600    	; 0x44a <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	2a c1       	rjmp	.+596    	; 0x44a <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	28 c1       	rjmp	.+592    	; 0x44a <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	ff 18       	sub	r15, r15
     1fe:	0d 19       	sub	r16, r13
     200:	0d 19       	sub	r16, r13
     202:	0d 19       	sub	r16, r13
     204:	0d 19       	sub	r16, r13
     206:	04 19       	sub	r16, r4
     208:	0d 19       	sub	r16, r13
     20a:	08 19       	sub	r16, r8
     20c:	0a 19       	sub	r16, r10
     20e:	06 19       	sub	r16, r6
     210:	0d 19       	sub	r16, r13
     212:	0d 19       	sub	r16, r13
     214:	0d 19       	sub	r16, r13
     216:	0d 19       	sub	r16, r13
     218:	0d 19       	sub	r16, r13
     21a:	0d 19       	sub	r16, r13
     21c:	0d 19       	sub	r16, r13
     21e:	0d 19       	sub	r16, r13
     220:	0d 19       	sub	r16, r13
     222:	0d 19       	sub	r16, r13
     224:	0d 19       	sub	r16, r13
     226:	0d 19       	sub	r16, r13
     228:	0d 19       	sub	r16, r13
     22a:	0d 19       	sub	r16, r13
     22c:	0d 19       	sub	r16, r13
     22e:	0d 19       	sub	r16, r13
     230:	0d 19       	sub	r16, r13
     232:	0d 19       	sub	r16, r13
     234:	0d 19       	sub	r16, r13
     236:	0d 19       	sub	r16, r13
     238:	0d 19       	sub	r16, r13
     23a:	0d 19       	sub	r16, r13
     23c:	0d 19       	sub	r16, r13
     23e:	0d 19       	sub	r16, r13
     240:	0d 19       	sub	r16, r13
     242:	0d 19       	sub	r16, r13
     244:	0d 19       	sub	r16, r13
     246:	0d 19       	sub	r16, r13
     248:	0d 19       	sub	r16, r13
     24a:	0d 19       	sub	r16, r13
     24c:	0d 19       	sub	r16, r13
     24e:	0d 19       	sub	r16, r13
     250:	0d 19       	sub	r16, r13
     252:	0d 19       	sub	r16, r13
     254:	0d 19       	sub	r16, r13
     256:	0d 19       	sub	r16, r13
     258:	0d 19       	sub	r16, r13
     25a:	0d 19       	sub	r16, r13
     25c:	0d 19       	sub	r16, r13
     25e:	0d 19       	sub	r16, r13
     260:	0d 19       	sub	r16, r13
     262:	0d 19       	sub	r16, r13
     264:	0d 19       	sub	r16, r13
     266:	0d 19       	sub	r16, r13
     268:	0d 19       	sub	r16, r13
     26a:	0d 19       	sub	r16, r13
     26c:	0d 19       	sub	r16, r13
     26e:	0d 19       	sub	r16, r13
     270:	0d 19       	sub	r16, r13
     272:	0d 19       	sub	r16, r13
     274:	0d 19       	sub	r16, r13
     276:	02 19       	sub	r16, r2
     278:	0c 19       	sub	r16, r12
     27a:	08 00       	.word	0x0008	; ????
     27c:	00 00       	nop
     27e:	be 92       	st	-X, r11
     280:	24 49       	sbci	r18, 0x94	; 148
     282:	12 3e       	cpi	r17, 0xE2	; 226
     284:	ab aa       	std	Y+51, r10	; 0x33
     286:	aa 2a       	or	r10, r26
     288:	be cd       	rjmp	.-1156   	; 0xfffffe06 <__eeprom_end+0xff7efe06>
     28a:	cc cc       	rjmp	.-1640   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     28c:	4c 3e       	cpi	r20, 0xEC	; 236
     28e:	00 00       	nop
     290:	00 80       	ld	r0, Z
     292:	be ab       	std	Y+54, r27	; 0x36
     294:	aa aa       	std	Y+50, r10	; 0x32
     296:	aa 3e       	cpi	r26, 0xEA	; 234
     298:	00 00       	nop
     29a:	00 00       	nop
     29c:	bf 00       	.word	0x00bf	; ????
     29e:	00 00       	nop
     2a0:	80 3f       	cpi	r24, 0xF0	; 240
     2a2:	00 00       	nop
     2a4:	00 00       	nop
     2a6:	00 08       	sbc	r0, r0
     2a8:	41 78       	andi	r20, 0x81	; 129
     2aa:	d3 bb       	out	0x13, r29	; 19
     2ac:	43 87       	std	Z+11, r20	; 0x0b
     2ae:	d1 13       	cpse	r29, r17
     2b0:	3d 19       	sub	r19, r13
     2b2:	0e 3c       	cpi	r16, 0xCE	; 206
     2b4:	c3 bd       	out	0x23, r28	; 35
     2b6:	42 82       	std	Z+2, r4	; 0x02
     2b8:	ad 2b       	or	r26, r29
     2ba:	3e 68       	ori	r19, 0x8E	; 142
     2bc:	ec 82       	std	Y+4, r14	; 0x04
     2be:	76 be       	out	0x36, r7	; 54
     2c0:	d9 8f       	std	Y+25, r29	; 0x19
     2c2:	e1 a9       	ldd	r30, Z+49	; 0x31
     2c4:	3e 4c       	sbci	r19, 0xCE	; 206
     2c6:	80 ef       	ldi	r24, 0xF0	; 240
     2c8:	ff be       	out	0x3f, r15	; 63
     2ca:	01 c4       	rjmp	.+2050   	; 0xace <__vector_40+0x4e>
     2cc:	ff 7f       	andi	r31, 0xFF	; 255
     2ce:	3f 00       	.word	0x003f	; ????
     2d0:	00 00       	nop
     2d2:	00 00       	nop
     2d4:	07 63       	ori	r16, 0x37	; 55
     2d6:	42 36       	cpi	r20, 0x62	; 98
     2d8:	b7 9b       	sbis	0x16, 7	; 22
     2da:	d8 a7       	std	Y+40, r29	; 0x28
     2dc:	1a 39       	cpi	r17, 0x9A	; 154
     2de:	68 56       	subi	r22, 0x68	; 104
     2e0:	18 ae       	std	Y+56, r1	; 0x38
     2e2:	ba ab       	std	Y+50, r27	; 0x32
     2e4:	55 8c       	ldd	r5, Z+29	; 0x1d
     2e6:	1d 3c       	cpi	r17, 0xCD	; 205
     2e8:	b7 cc       	rjmp	.-1682   	; 0xfffffc58 <__eeprom_end+0xff7efc58>
     2ea:	57 63       	ori	r21, 0x37	; 55
     2ec:	bd 6d       	ori	r27, 0xDD	; 221
     2ee:	ed fd       	.word	0xfded	; ????
     2f0:	75 3e       	cpi	r23, 0xE5	; 229
     2f2:	f6 17       	cp	r31, r22
     2f4:	72 31       	cpi	r23, 0x12	; 18
     2f6:	bf 00       	.word	0x00bf	; ????
     2f8:	00 00       	nop
     2fa:	80 3f       	cpi	r24, 0xF0	; 240

000002fc <__trampolines_end>:
     2fc:	6e 61       	ori	r22, 0x1E	; 30
     2fe:	6e 00       	.word	0x006e	; ????

00000300 <__c.2332>:
     300:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     310:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     320:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     330:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     340:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     350:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     360:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     370:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     380:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     390:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     3a0:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     3b0:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     3c0:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     3d0:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     3e0:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     3f0:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000003fe <__ctors_end>:
     3fe:	11 24       	eor	r1, r1
     400:	1f be       	out	0x3f, r1	; 63
     402:	cf ef       	ldi	r28, 0xFF	; 255
     404:	cd bf       	out	0x3d, r28	; 61
     406:	df e3       	ldi	r29, 0x3F	; 63
     408:	de bf       	out	0x3e, r29	; 62
     40a:	00 e0       	ldi	r16, 0x00	; 0
     40c:	0c bf       	out	0x3c, r16	; 60
     40e:	18 be       	out	0x38, r1	; 56
     410:	19 be       	out	0x39, r1	; 57
     412:	1a be       	out	0x3a, r1	; 58
     414:	1b be       	out	0x3b, r1	; 59

00000416 <__do_copy_data>:
     416:	10 e2       	ldi	r17, 0x20	; 32
     418:	a0 e0       	ldi	r26, 0x00	; 0
     41a:	b0 e2       	ldi	r27, 0x20	; 32
     41c:	ea e4       	ldi	r30, 0x4A	; 74
     41e:	fe e4       	ldi	r31, 0x4E	; 78
     420:	00 e0       	ldi	r16, 0x00	; 0
     422:	0b bf       	out	0x3b, r16	; 59
     424:	02 c0       	rjmp	.+4      	; 0x42a <__do_copy_data+0x14>
     426:	07 90       	elpm	r0, Z+
     428:	0d 92       	st	X+, r0
     42a:	a4 38       	cpi	r26, 0x84	; 132
     42c:	b1 07       	cpc	r27, r17
     42e:	d9 f7       	brne	.-10     	; 0x426 <__do_copy_data+0x10>
     430:	1b be       	out	0x3b, r1	; 59

00000432 <__do_clear_bss>:
     432:	23 e2       	ldi	r18, 0x23	; 35
     434:	a4 e8       	ldi	r26, 0x84	; 132
     436:	b0 e2       	ldi	r27, 0x20	; 32
     438:	01 c0       	rjmp	.+2      	; 0x43c <.do_clear_bss_start>

0000043a <.do_clear_bss_loop>:
     43a:	1d 92       	st	X+, r1

0000043c <.do_clear_bss_start>:
     43c:	a5 3b       	cpi	r26, 0xB5	; 181
     43e:	b2 07       	cpc	r27, r18
     440:	e1 f7       	brne	.-8      	; 0x43a <.do_clear_bss_loop>
     442:	0e 94 a8 1a 	call	0x3550	; 0x3550 <main>
     446:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <_exit>

0000044a <__bad_interrupt>:
     44a:	da cd       	rjmp	.-1100   	; 0x0 <__vectors>

0000044c <twim_interrupt_handler>:
 * \brief Common TWI master interrupt service routine.
 *
 *  Check current status and calls the appropriate handler.
 */
static void twim_interrupt_handler(void)
{
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
	uint8_t const master_status = transfer.bus->MASTER.STATUS;
     450:	e0 91 84 20 	lds	r30, 0x2084	; 0x802084 <__data_end>
     454:	f0 91 85 20 	lds	r31, 0x2085	; 0x802085 <__data_end+0x1>
     458:	84 81       	ldd	r24, Z+4	; 0x04

	if (master_status & TWI_MASTER_ARBLOST_bm) {
     45a:	83 ff       	sbrs	r24, 3
     45c:	08 c0       	rjmp	.+16     	; 0x46e <twim_interrupt_handler+0x22>

		transfer.bus->MASTER.STATUS = master_status | TWI_MASTER_ARBLOST_bm;
     45e:	88 60       	ori	r24, 0x08	; 8
     460:	84 83       	std	Z+4, r24	; 0x04
		transfer.bus->MASTER.CTRLC  = TWI_MASTER_CMD_STOP_gc;
     462:	83 e0       	ldi	r24, 0x03	; 3
     464:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_BUSY;
     466:	86 ef       	ldi	r24, 0xF6	; 246
     468:	80 93 8e 20 	sts	0x208E, r24	; 0x80208e <__data_end+0xa>
     46c:	83 c0       	rjmp	.+262    	; 0x574 <twim_interrupt_handler+0x128>

	} else if ((master_status & TWI_MASTER_BUSERR_bm) ||
     46e:	98 2f       	mov	r25, r24
     470:	94 71       	andi	r25, 0x14	; 20
     472:	31 f0       	breq	.+12     	; 0x480 <twim_interrupt_handler+0x34>
		(master_status & TWI_MASTER_RXACK_bm)) {

		transfer.bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_IO_ERROR;
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	80 93 8e 20 	sts	0x208E, r24	; 0x80208e <__data_end+0xa>
     47e:	7a c0       	rjmp	.+244    	; 0x574 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {
     480:	86 ff       	sbrs	r24, 6
     482:	43 c0       	rjmp	.+134    	; 0x50a <twim_interrupt_handler+0xbe>
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 */
static inline void twim_write_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     484:	c4 e8       	ldi	r28, 0x84	; 132
     486:	d0 e2       	ldi	r29, 0x20	; 32
     488:	aa 81       	ldd	r26, Y+2	; 0x02
     48a:	bb 81       	ldd	r27, Y+3	; 0x03

	if (transfer.addr_count < pkg->addr_length) {
     48c:	8c 81       	ldd	r24, Y+4	; 0x04
     48e:	9d 81       	ldd	r25, Y+5	; 0x05
     490:	14 96       	adiw	r26, 0x04	; 4
     492:	2d 91       	ld	r18, X+
     494:	3c 91       	ld	r19, X
     496:	15 97       	sbiw	r26, 0x05	; 5
     498:	82 17       	cp	r24, r18
     49a:	93 07       	cpc	r25, r19
     49c:	6c f4       	brge	.+26     	; 0x4b8 <twim_interrupt_handler+0x6c>

		const uint8_t * const data = pkg->addr;
		bus->MASTER.DATA = data[transfer.addr_count++];
     49e:	9c 01       	movw	r18, r24
     4a0:	2f 5f       	subi	r18, 0xFF	; 255
     4a2:	3f 4f       	sbci	r19, 0xFF	; 255
     4a4:	20 93 88 20 	sts	0x2088, r18	; 0x802088 <__data_end+0x4>
     4a8:	30 93 89 20 	sts	0x2089, r19	; 0x802089 <__data_end+0x5>
     4ac:	a8 0f       	add	r26, r24
     4ae:	b9 1f       	adc	r27, r25
     4b0:	11 96       	adiw	r26, 0x01	; 1
     4b2:	8c 91       	ld	r24, X
     4b4:	87 83       	std	Z+7, r24	; 0x07
     4b6:	5e c0       	rjmp	.+188    	; 0x574 <twim_interrupt_handler+0x128>

	} else if (transfer.data_count < pkg->length) {
     4b8:	80 91 8a 20 	lds	r24, 0x208A	; 0x80208a <__data_end+0x6>
     4bc:	90 91 8b 20 	lds	r25, 0x208B	; 0x80208b <__data_end+0x7>
     4c0:	18 96       	adiw	r26, 0x08	; 8
     4c2:	2d 91       	ld	r18, X+
     4c4:	3c 91       	ld	r19, X
     4c6:	19 97       	sbiw	r26, 0x09	; 9
     4c8:	82 17       	cp	r24, r18
     4ca:	93 07       	cpc	r25, r19
     4cc:	c8 f4       	brcc	.+50     	; 0x500 <twim_interrupt_handler+0xb4>

		if (transfer.read) {
     4ce:	20 91 8c 20 	lds	r18, 0x208C	; 0x80208c <__data_end+0x8>
     4d2:	22 23       	and	r18, r18
     4d4:	21 f0       	breq	.+8      	; 0x4de <twim_interrupt_handler+0x92>

			/* Send repeated START condition (Address|R/W=1). */

			bus->MASTER.ADDR |= 0x01;
     4d6:	86 81       	ldd	r24, Z+6	; 0x06
     4d8:	81 60       	ori	r24, 0x01	; 1
     4da:	86 83       	std	Z+6, r24	; 0x06
     4dc:	4b c0       	rjmp	.+150    	; 0x574 <twim_interrupt_handler+0x128>

		} else {
			const uint8_t * const data = pkg->buffer;
     4de:	16 96       	adiw	r26, 0x06	; 6
     4e0:	2d 91       	ld	r18, X+
     4e2:	3c 91       	ld	r19, X
     4e4:	17 97       	sbiw	r26, 0x07	; 7
			bus->MASTER.DATA = data[transfer.data_count++];
     4e6:	ac 01       	movw	r20, r24
     4e8:	4f 5f       	subi	r20, 0xFF	; 255
     4ea:	5f 4f       	sbci	r21, 0xFF	; 255
     4ec:	40 93 8a 20 	sts	0x208A, r20	; 0x80208a <__data_end+0x6>
     4f0:	50 93 8b 20 	sts	0x208B, r21	; 0x80208b <__data_end+0x7>
     4f4:	d9 01       	movw	r26, r18
     4f6:	a8 0f       	add	r26, r24
     4f8:	b9 1f       	adc	r27, r25
     4fa:	8c 91       	ld	r24, X
     4fc:	87 83       	std	Z+7, r24	; 0x07
     4fe:	3a c0       	rjmp	.+116    	; 0x574 <twim_interrupt_handler+0x128>

	} else {

		/* Send STOP condition to complete the transaction. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     500:	83 e0       	ldi	r24, 0x03	; 3
     502:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = STATUS_OK;
     504:	10 92 8e 20 	sts	0x208E, r1	; 0x80208e <__data_end+0xa>
     508:	35 c0       	rjmp	.+106    	; 0x574 <twim_interrupt_handler+0x128>

	} else if (master_status & TWI_MASTER_WIF_bm) {

		twim_write_handler();

	} else if (master_status & TWI_MASTER_RIF_bm) {
     50a:	88 23       	and	r24, r24
     50c:	84 f5       	brge	.+96     	; 0x56e <twim_interrupt_handler+0x122>
 *  reading bytes from the TWI slave.
 */
static inline void twim_read_handler(void)
{
	TWI_t * const         bus = transfer.bus;
	twi_package_t * const pkg = transfer.pkg;
     50e:	a4 e8       	ldi	r26, 0x84	; 132
     510:	b0 e2       	ldi	r27, 0x20	; 32
     512:	12 96       	adiw	r26, 0x02	; 2
     514:	cd 91       	ld	r28, X+
     516:	dc 91       	ld	r29, X
     518:	13 97       	sbiw	r26, 0x03	; 3

	if (transfer.data_count < pkg->length) {
     51a:	16 96       	adiw	r26, 0x06	; 6
     51c:	8d 91       	ld	r24, X+
     51e:	9c 91       	ld	r25, X
     520:	17 97       	sbiw	r26, 0x07	; 7
     522:	28 85       	ldd	r18, Y+8	; 0x08
     524:	39 85       	ldd	r19, Y+9	; 0x09
     526:	82 17       	cp	r24, r18
     528:	93 07       	cpc	r25, r19
     52a:	d8 f4       	brcc	.+54     	; 0x562 <twim_interrupt_handler+0x116>

		uint8_t * const data = pkg->buffer;
     52c:	6e 81       	ldd	r22, Y+6	; 0x06
     52e:	7f 81       	ldd	r23, Y+7	; 0x07
		data[transfer.data_count++] = bus->MASTER.DATA;
     530:	9c 01       	movw	r18, r24
     532:	2f 5f       	subi	r18, 0xFF	; 255
     534:	3f 4f       	sbci	r19, 0xFF	; 255
     536:	20 93 8a 20 	sts	0x208A, r18	; 0x80208a <__data_end+0x6>
     53a:	30 93 8b 20 	sts	0x208B, r19	; 0x80208b <__data_end+0x7>
     53e:	47 81       	ldd	r20, Z+7	; 0x07
     540:	db 01       	movw	r26, r22
     542:	a8 0f       	add	r26, r24
     544:	b9 1f       	adc	r27, r25
     546:	4c 93       	st	X, r20

		/* If there is more to read, issue ACK and start a byte read.
		 * Otherwise, issue NACK and STOP to complete the transaction.
		 */
		if (transfer.data_count < pkg->length) {
     548:	88 85       	ldd	r24, Y+8	; 0x08
     54a:	99 85       	ldd	r25, Y+9	; 0x09
     54c:	28 17       	cp	r18, r24
     54e:	39 07       	cpc	r19, r25
     550:	18 f4       	brcc	.+6      	; 0x558 <twim_interrupt_handler+0x10c>

			bus->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	83 83       	std	Z+3, r24	; 0x03
     556:	0e c0       	rjmp	.+28     	; 0x574 <twim_interrupt_handler+0x128>

		} else {

			bus->MASTER.CTRLC = TWI_MASTER_ACKACT_bm | TWI_MASTER_CMD_STOP_gc;
     558:	87 e0       	ldi	r24, 0x07	; 7
     55a:	83 83       	std	Z+3, r24	; 0x03
			transfer.status = STATUS_OK;
     55c:	10 92 8e 20 	sts	0x208E, r1	; 0x80208e <__data_end+0xa>
     560:	09 c0       	rjmp	.+18     	; 0x574 <twim_interrupt_handler+0x128>

	} else {

		/* Issue STOP and buffer overflow condition. */

		bus->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	83 83       	std	Z+3, r24	; 0x03
		transfer.status = ERR_NO_MEMORY;
     566:	89 ef       	ldi	r24, 0xF9	; 249
     568:	80 93 8e 20 	sts	0x208E, r24	; 0x80208e <__data_end+0xa>
     56c:	03 c0       	rjmp	.+6      	; 0x574 <twim_interrupt_handler+0x128>

		twim_read_handler();

	} else {

		transfer.status = ERR_PROTOCOL;
     56e:	8b ef       	ldi	r24, 0xFB	; 251
     570:	80 93 8e 20 	sts	0x208E, r24	; 0x80208e <__data_end+0xa>
	}
}
     574:	df 91       	pop	r29
     576:	cf 91       	pop	r28
     578:	08 95       	ret

0000057a <__vector_13>:
 * parameters specified in the global \c transfer structure.
 */
static void twim_interrupt_handler(void);

#ifdef TWIC
ISR(TWIC_TWIM_vect) { twim_interrupt_handler(); }
     57a:	1f 92       	push	r1
     57c:	0f 92       	push	r0
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	0f 92       	push	r0
     582:	11 24       	eor	r1, r1
     584:	08 b6       	in	r0, 0x38	; 56
     586:	0f 92       	push	r0
     588:	18 be       	out	0x38, r1	; 56
     58a:	09 b6       	in	r0, 0x39	; 57
     58c:	0f 92       	push	r0
     58e:	19 be       	out	0x39, r1	; 57
     590:	0b b6       	in	r0, 0x3b	; 59
     592:	0f 92       	push	r0
     594:	1b be       	out	0x3b, r1	; 59
     596:	2f 93       	push	r18
     598:	3f 93       	push	r19
     59a:	4f 93       	push	r20
     59c:	5f 93       	push	r21
     59e:	6f 93       	push	r22
     5a0:	7f 93       	push	r23
     5a2:	8f 93       	push	r24
     5a4:	9f 93       	push	r25
     5a6:	af 93       	push	r26
     5a8:	bf 93       	push	r27
     5aa:	ef 93       	push	r30
     5ac:	ff 93       	push	r31
     5ae:	4e df       	rcall	.-356    	; 0x44c <twim_interrupt_handler>
     5b0:	ff 91       	pop	r31
     5b2:	ef 91       	pop	r30
     5b4:	bf 91       	pop	r27
     5b6:	af 91       	pop	r26
     5b8:	9f 91       	pop	r25
     5ba:	8f 91       	pop	r24
     5bc:	7f 91       	pop	r23
     5be:	6f 91       	pop	r22
     5c0:	5f 91       	pop	r21
     5c2:	4f 91       	pop	r20
     5c4:	3f 91       	pop	r19
     5c6:	2f 91       	pop	r18
     5c8:	0f 90       	pop	r0
     5ca:	0b be       	out	0x3b, r0	; 59
     5cc:	0f 90       	pop	r0
     5ce:	09 be       	out	0x39, r0	; 57
     5d0:	0f 90       	pop	r0
     5d2:	08 be       	out	0x38, r0	; 56
     5d4:	0f 90       	pop	r0
     5d6:	0f be       	out	0x3f, r0	; 63
     5d8:	0f 90       	pop	r0
     5da:	1f 90       	pop	r1
     5dc:	18 95       	reti

000005de <__vector_76>:
#endif
#ifdef TWID
ISR(TWID_TWIM_vect) { twim_interrupt_handler(); }
     5de:	1f 92       	push	r1
     5e0:	0f 92       	push	r0
     5e2:	0f b6       	in	r0, 0x3f	; 63
     5e4:	0f 92       	push	r0
     5e6:	11 24       	eor	r1, r1
     5e8:	08 b6       	in	r0, 0x38	; 56
     5ea:	0f 92       	push	r0
     5ec:	18 be       	out	0x38, r1	; 56
     5ee:	09 b6       	in	r0, 0x39	; 57
     5f0:	0f 92       	push	r0
     5f2:	19 be       	out	0x39, r1	; 57
     5f4:	0b b6       	in	r0, 0x3b	; 59
     5f6:	0f 92       	push	r0
     5f8:	1b be       	out	0x3b, r1	; 59
     5fa:	2f 93       	push	r18
     5fc:	3f 93       	push	r19
     5fe:	4f 93       	push	r20
     600:	5f 93       	push	r21
     602:	6f 93       	push	r22
     604:	7f 93       	push	r23
     606:	8f 93       	push	r24
     608:	9f 93       	push	r25
     60a:	af 93       	push	r26
     60c:	bf 93       	push	r27
     60e:	ef 93       	push	r30
     610:	ff 93       	push	r31
     612:	1c df       	rcall	.-456    	; 0x44c <twim_interrupt_handler>
     614:	ff 91       	pop	r31
     616:	ef 91       	pop	r30
     618:	bf 91       	pop	r27
     61a:	af 91       	pop	r26
     61c:	9f 91       	pop	r25
     61e:	8f 91       	pop	r24
     620:	7f 91       	pop	r23
     622:	6f 91       	pop	r22
     624:	5f 91       	pop	r21
     626:	4f 91       	pop	r20
     628:	3f 91       	pop	r19
     62a:	2f 91       	pop	r18
     62c:	0f 90       	pop	r0
     62e:	0b be       	out	0x3b, r0	; 59
     630:	0f 90       	pop	r0
     632:	09 be       	out	0x39, r0	; 57
     634:	0f 90       	pop	r0
     636:	08 be       	out	0x38, r0	; 56
     638:	0f 90       	pop	r0
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	0f 90       	pop	r0
     63e:	1f 90       	pop	r1
     640:	18 95       	reti

00000642 <__vector_46>:
#endif
#ifdef TWIE
ISR(TWIE_TWIM_vect) { twim_interrupt_handler(); }
     642:	1f 92       	push	r1
     644:	0f 92       	push	r0
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	0f 92       	push	r0
     64a:	11 24       	eor	r1, r1
     64c:	08 b6       	in	r0, 0x38	; 56
     64e:	0f 92       	push	r0
     650:	18 be       	out	0x38, r1	; 56
     652:	09 b6       	in	r0, 0x39	; 57
     654:	0f 92       	push	r0
     656:	19 be       	out	0x39, r1	; 57
     658:	0b b6       	in	r0, 0x3b	; 59
     65a:	0f 92       	push	r0
     65c:	1b be       	out	0x3b, r1	; 59
     65e:	2f 93       	push	r18
     660:	3f 93       	push	r19
     662:	4f 93       	push	r20
     664:	5f 93       	push	r21
     666:	6f 93       	push	r22
     668:	7f 93       	push	r23
     66a:	8f 93       	push	r24
     66c:	9f 93       	push	r25
     66e:	af 93       	push	r26
     670:	bf 93       	push	r27
     672:	ef 93       	push	r30
     674:	ff 93       	push	r31
     676:	ea de       	rcall	.-556    	; 0x44c <twim_interrupt_handler>
     678:	ff 91       	pop	r31
     67a:	ef 91       	pop	r30
     67c:	bf 91       	pop	r27
     67e:	af 91       	pop	r26
     680:	9f 91       	pop	r25
     682:	8f 91       	pop	r24
     684:	7f 91       	pop	r23
     686:	6f 91       	pop	r22
     688:	5f 91       	pop	r21
     68a:	4f 91       	pop	r20
     68c:	3f 91       	pop	r19
     68e:	2f 91       	pop	r18
     690:	0f 90       	pop	r0
     692:	0b be       	out	0x3b, r0	; 59
     694:	0f 90       	pop	r0
     696:	09 be       	out	0x39, r0	; 57
     698:	0f 90       	pop	r0
     69a:	08 be       	out	0x38, r0	; 56
     69c:	0f 90       	pop	r0
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	0f 90       	pop	r0
     6a2:	1f 90       	pop	r1
     6a4:	18 95       	reti

000006a6 <__vector_107>:
#endif
#ifdef TWIF
ISR(TWIF_TWIM_vect) { twim_interrupt_handler(); }
     6a6:	1f 92       	push	r1
     6a8:	0f 92       	push	r0
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	0f 92       	push	r0
     6ae:	11 24       	eor	r1, r1
     6b0:	08 b6       	in	r0, 0x38	; 56
     6b2:	0f 92       	push	r0
     6b4:	18 be       	out	0x38, r1	; 56
     6b6:	09 b6       	in	r0, 0x39	; 57
     6b8:	0f 92       	push	r0
     6ba:	19 be       	out	0x39, r1	; 57
     6bc:	0b b6       	in	r0, 0x3b	; 59
     6be:	0f 92       	push	r0
     6c0:	1b be       	out	0x3b, r1	; 59
     6c2:	2f 93       	push	r18
     6c4:	3f 93       	push	r19
     6c6:	4f 93       	push	r20
     6c8:	5f 93       	push	r21
     6ca:	6f 93       	push	r22
     6cc:	7f 93       	push	r23
     6ce:	8f 93       	push	r24
     6d0:	9f 93       	push	r25
     6d2:	af 93       	push	r26
     6d4:	bf 93       	push	r27
     6d6:	ef 93       	push	r30
     6d8:	ff 93       	push	r31
     6da:	b8 de       	rcall	.-656    	; 0x44c <twim_interrupt_handler>
     6dc:	ff 91       	pop	r31
     6de:	ef 91       	pop	r30
     6e0:	bf 91       	pop	r27
     6e2:	af 91       	pop	r26
     6e4:	9f 91       	pop	r25
     6e6:	8f 91       	pop	r24
     6e8:	7f 91       	pop	r23
     6ea:	6f 91       	pop	r22
     6ec:	5f 91       	pop	r21
     6ee:	4f 91       	pop	r20
     6f0:	3f 91       	pop	r19
     6f2:	2f 91       	pop	r18
     6f4:	0f 90       	pop	r0
     6f6:	0b be       	out	0x3b, r0	; 59
     6f8:	0f 90       	pop	r0
     6fa:	09 be       	out	0x39, r0	; 57
     6fc:	0f 90       	pop	r0
     6fe:	08 be       	out	0x38, r0	; 56
     700:	0f 90       	pop	r0
     702:	0f be       	out	0x3f, r0	; 63
     704:	0f 90       	pop	r0
     706:	1f 90       	pop	r1
     708:	18 95       	reti

0000070a <wdt_reset_mcu>:
uint8_t temp;
	/*
	 * WDT enabled (minimum timeout period for max. security)
	 */
	temp = WDT_PER_8CLK_gc | (1 << WDT_ENABLE_bp) | (1 << WDT_CEN_bp);
	ccp_write_io((void *)&WDT.CTRL, temp);
     70a:	63 e0       	ldi	r22, 0x03	; 3
     70c:	80 e8       	ldi	r24, 0x80	; 128
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	6e d2       	rcall	.+1244   	; 0xbee <ccp_write_io>
/*! \brief Wait until WD settings are synchronized to the WD clock domain.
 *
 */
static inline void wdt_wait_while_busy(void)
{
	while ((WDT.STATUS & WDT_SYNCBUSY_bm) == WDT_SYNCBUSY_bm) {
     712:	e0 e8       	ldi	r30, 0x80	; 128
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	82 81       	ldd	r24, Z+2	; 0x02
     718:	80 fd       	sbrc	r24, 0
     71a:	fd cf       	rjmp	.-6      	; 0x716 <wdt_reset_mcu+0xc>
	wdt_wait_while_busy();
	/*
	 * WDT enabled (maximum window period for max. security)
	 */
	temp = WDT_WPER_8KCLK_gc | (1 << WDT_WEN_bp) | (1 << WDT_WCEN_bp);
	ccp_write_io((void *)&WDT.WINCTRL, temp);
     71c:	6b e2       	ldi	r22, 0x2B	; 43
     71e:	81 e8       	ldi	r24, 0x81	; 129
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	65 d2       	rcall	.+1226   	; 0xbee <ccp_write_io>
     724:	e0 e8       	ldi	r30, 0x80	; 128
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	82 81       	ldd	r24, Z+2	; 0x02
     72a:	80 fd       	sbrc	r24, 0
     72c:	fd cf       	rjmp	.-6      	; 0x728 <wdt_reset_mcu+0x1e>
	wdt_wait_while_busy();
	/*
	 * WDT Reset during window => WDT generates an Hard Reset.
	 */
	wdt_reset();
     72e:	a8 95       	wdr
     730:	ff cf       	rjmp	.-2      	; 0x730 <wdt_reset_mcu+0x26>

00000732 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	1f 92       	push	r1
     738:	1f 92       	push	r1
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     73e:	8f ef       	ldi	r24, 0xFF	; 255
     740:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     744:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     748:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     74c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     750:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     754:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     758:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     75c:	8f b7       	in	r24, 0x3f	; 63
     75e:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     760:	f8 94       	cli
	return flags;
     762:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     764:	e0 e5       	ldi	r30, 0x50	; 80
     766:	f0 e0       	ldi	r31, 0x00	; 0
     768:	80 81       	ld	r24, Z
     76a:	82 60       	ori	r24, 0x02	; 2
     76c:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     76e:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     770:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     772:	81 ff       	sbrs	r24, 1
     774:	fd cf       	rjmp	.-6      	; 0x770 <sysclk_init+0x3e>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	80 e4       	ldi	r24, 0x40	; 64
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	38 d2       	rcall	.+1136   	; 0xbee <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     77e:	8f b7       	in	r24, 0x3f	; 63
     780:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     782:	f8 94       	cli
	return flags;
     784:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     786:	e0 e5       	ldi	r30, 0x50	; 80
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	8e 7f       	andi	r24, 0xFE	; 254
     78e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     790:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     792:	0f 90       	pop	r0
     794:	0f 90       	pop	r0
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	1f 92       	push	r1
     7a2:	cd b7       	in	r28, 0x3d	; 61
     7a4:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     7a6:	9f b7       	in	r25, 0x3f	; 63
     7a8:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     7aa:	f8 94       	cli
	return flags;
     7ac:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     7ae:	e8 2f       	mov	r30, r24
     7b0:	f0 e0       	ldi	r31, 0x00	; 0
     7b2:	e0 59       	subi	r30, 0x90	; 144
     7b4:	ff 4f       	sbci	r31, 0xFF	; 255
     7b6:	60 95       	com	r22
     7b8:	80 81       	ld	r24, Z
     7ba:	68 23       	and	r22, r24
     7bc:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     7be:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     7c0:	0f 90       	pop	r0
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	1f 92       	push	r1
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     7d2:	80 91 e9 20 	lds	r24, 0x20E9	; 0x8020e9 <stdio_base>
     7d6:	90 91 ea 20 	lds	r25, 0x20EA	; 0x8020ea <stdio_base+0x1>
     7da:	e0 91 e5 20 	lds	r30, 0x20E5	; 0x8020e5 <ptr_get>
     7de:	f0 91 e6 20 	lds	r31, 0x20E6	; 0x8020e6 <ptr_get+0x1>
     7e2:	be 01       	movw	r22, r28
     7e4:	6f 5f       	subi	r22, 0xFF	; 255
     7e6:	7f 4f       	sbci	r23, 0xFF	; 255
     7e8:	19 95       	eicall
	return c;
     7ea:	89 81       	ldd	r24, Y+1	; 0x01
}
     7ec:	08 2e       	mov	r0, r24
     7ee:	00 0c       	add	r0, r0
     7f0:	99 0b       	sbc	r25, r25
     7f2:	0f 90       	pop	r0
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     7fa:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     7fc:	80 91 e9 20 	lds	r24, 0x20E9	; 0x8020e9 <stdio_base>
     800:	90 91 ea 20 	lds	r25, 0x20EA	; 0x8020ea <stdio_base+0x1>
     804:	e0 91 e7 20 	lds	r30, 0x20E7	; 0x8020e7 <ptr_put>
     808:	f0 91 e8 20 	lds	r31, 0x20E8	; 0x8020e8 <ptr_put+0x1>
     80c:	19 95       	eicall
     80e:	99 23       	and	r25, r25
     810:	1c f0       	brlt	.+6      	; 0x818 <_write+0x1e>
		return -1;
	}
	return 1;
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     818:	8f ef       	ldi	r24, 0xFF	; 255
     81a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     81c:	08 95       	ret

0000081e <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     81e:	1f 92       	push	r1
     820:	0f 92       	push	r0
     822:	0f b6       	in	r0, 0x3f	; 63
     824:	0f 92       	push	r0
     826:	11 24       	eor	r1, r1
     828:	08 b6       	in	r0, 0x38	; 56
     82a:	0f 92       	push	r0
     82c:	18 be       	out	0x38, r1	; 56
     82e:	09 b6       	in	r0, 0x39	; 57
     830:	0f 92       	push	r0
     832:	19 be       	out	0x39, r1	; 57
     834:	0b b6       	in	r0, 0x3b	; 59
     836:	0f 92       	push	r0
     838:	1b be       	out	0x3b, r1	; 59
     83a:	2f 93       	push	r18
     83c:	3f 93       	push	r19
     83e:	4f 93       	push	r20
     840:	5f 93       	push	r21
     842:	6f 93       	push	r22
     844:	7f 93       	push	r23
     846:	8f 93       	push	r24
     848:	9f 93       	push	r25
     84a:	af 93       	push	r26
     84c:	bf 93       	push	r27
     84e:	ef 93       	push	r30
     850:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     852:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     856:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     85a:	e0 91 ed 20 	lds	r30, 0x20ED	; 0x8020ed <adca_callback>
     85e:	f0 91 ee 20 	lds	r31, 0x20EE	; 0x8020ee <adca_callback+0x1>
     862:	61 e0       	ldi	r22, 0x01	; 1
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	92 e0       	ldi	r25, 0x02	; 2
     868:	19 95       	eicall
}
     86a:	ff 91       	pop	r31
     86c:	ef 91       	pop	r30
     86e:	bf 91       	pop	r27
     870:	af 91       	pop	r26
     872:	9f 91       	pop	r25
     874:	8f 91       	pop	r24
     876:	7f 91       	pop	r23
     878:	6f 91       	pop	r22
     87a:	5f 91       	pop	r21
     87c:	4f 91       	pop	r20
     87e:	3f 91       	pop	r19
     880:	2f 91       	pop	r18
     882:	0f 90       	pop	r0
     884:	0b be       	out	0x3b, r0	; 59
     886:	0f 90       	pop	r0
     888:	09 be       	out	0x39, r0	; 57
     88a:	0f 90       	pop	r0
     88c:	08 be       	out	0x38, r0	; 56
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     898:	1f 92       	push	r1
     89a:	0f 92       	push	r0
     89c:	0f b6       	in	r0, 0x3f	; 63
     89e:	0f 92       	push	r0
     8a0:	11 24       	eor	r1, r1
     8a2:	08 b6       	in	r0, 0x38	; 56
     8a4:	0f 92       	push	r0
     8a6:	18 be       	out	0x38, r1	; 56
     8a8:	09 b6       	in	r0, 0x39	; 57
     8aa:	0f 92       	push	r0
     8ac:	19 be       	out	0x39, r1	; 57
     8ae:	0b b6       	in	r0, 0x3b	; 59
     8b0:	0f 92       	push	r0
     8b2:	1b be       	out	0x3b, r1	; 59
     8b4:	2f 93       	push	r18
     8b6:	3f 93       	push	r19
     8b8:	4f 93       	push	r20
     8ba:	5f 93       	push	r21
     8bc:	6f 93       	push	r22
     8be:	7f 93       	push	r23
     8c0:	8f 93       	push	r24
     8c2:	9f 93       	push	r25
     8c4:	af 93       	push	r26
     8c6:	bf 93       	push	r27
     8c8:	ef 93       	push	r30
     8ca:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     8cc:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     8d0:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     8d4:	e0 91 ed 20 	lds	r30, 0x20ED	; 0x8020ed <adca_callback>
     8d8:	f0 91 ee 20 	lds	r31, 0x20EE	; 0x8020ee <adca_callback+0x1>
     8dc:	62 e0       	ldi	r22, 0x02	; 2
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	92 e0       	ldi	r25, 0x02	; 2
     8e2:	19 95       	eicall
}
     8e4:	ff 91       	pop	r31
     8e6:	ef 91       	pop	r30
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	7f 91       	pop	r23
     8f2:	6f 91       	pop	r22
     8f4:	5f 91       	pop	r21
     8f6:	4f 91       	pop	r20
     8f8:	3f 91       	pop	r19
     8fa:	2f 91       	pop	r18
     8fc:	0f 90       	pop	r0
     8fe:	0b be       	out	0x3b, r0	; 59
     900:	0f 90       	pop	r0
     902:	09 be       	out	0x39, r0	; 57
     904:	0f 90       	pop	r0
     906:	08 be       	out	0x38, r0	; 56
     908:	0f 90       	pop	r0
     90a:	0f be       	out	0x3f, r0	; 63
     90c:	0f 90       	pop	r0
     90e:	1f 90       	pop	r1
     910:	18 95       	reti

00000912 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     912:	1f 92       	push	r1
     914:	0f 92       	push	r0
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	0f 92       	push	r0
     91a:	11 24       	eor	r1, r1
     91c:	08 b6       	in	r0, 0x38	; 56
     91e:	0f 92       	push	r0
     920:	18 be       	out	0x38, r1	; 56
     922:	09 b6       	in	r0, 0x39	; 57
     924:	0f 92       	push	r0
     926:	19 be       	out	0x39, r1	; 57
     928:	0b b6       	in	r0, 0x3b	; 59
     92a:	0f 92       	push	r0
     92c:	1b be       	out	0x3b, r1	; 59
     92e:	2f 93       	push	r18
     930:	3f 93       	push	r19
     932:	4f 93       	push	r20
     934:	5f 93       	push	r21
     936:	6f 93       	push	r22
     938:	7f 93       	push	r23
     93a:	8f 93       	push	r24
     93c:	9f 93       	push	r25
     93e:	af 93       	push	r26
     940:	bf 93       	push	r27
     942:	ef 93       	push	r30
     944:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     946:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     94a:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     94e:	e0 91 ed 20 	lds	r30, 0x20ED	; 0x8020ed <adca_callback>
     952:	f0 91 ee 20 	lds	r31, 0x20EE	; 0x8020ee <adca_callback+0x1>
     956:	64 e0       	ldi	r22, 0x04	; 4
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	19 95       	eicall
}
     95e:	ff 91       	pop	r31
     960:	ef 91       	pop	r30
     962:	bf 91       	pop	r27
     964:	af 91       	pop	r26
     966:	9f 91       	pop	r25
     968:	8f 91       	pop	r24
     96a:	7f 91       	pop	r23
     96c:	6f 91       	pop	r22
     96e:	5f 91       	pop	r21
     970:	4f 91       	pop	r20
     972:	3f 91       	pop	r19
     974:	2f 91       	pop	r18
     976:	0f 90       	pop	r0
     978:	0b be       	out	0x3b, r0	; 59
     97a:	0f 90       	pop	r0
     97c:	09 be       	out	0x39, r0	; 57
     97e:	0f 90       	pop	r0
     980:	08 be       	out	0x38, r0	; 56
     982:	0f 90       	pop	r0
     984:	0f be       	out	0x3f, r0	; 63
     986:	0f 90       	pop	r0
     988:	1f 90       	pop	r1
     98a:	18 95       	reti

0000098c <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     98c:	1f 92       	push	r1
     98e:	0f 92       	push	r0
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	08 b6       	in	r0, 0x38	; 56
     998:	0f 92       	push	r0
     99a:	18 be       	out	0x38, r1	; 56
     99c:	09 b6       	in	r0, 0x39	; 57
     99e:	0f 92       	push	r0
     9a0:	19 be       	out	0x39, r1	; 57
     9a2:	0b b6       	in	r0, 0x3b	; 59
     9a4:	0f 92       	push	r0
     9a6:	1b be       	out	0x3b, r1	; 59
     9a8:	2f 93       	push	r18
     9aa:	3f 93       	push	r19
     9ac:	4f 93       	push	r20
     9ae:	5f 93       	push	r21
     9b0:	6f 93       	push	r22
     9b2:	7f 93       	push	r23
     9b4:	8f 93       	push	r24
     9b6:	9f 93       	push	r25
     9b8:	af 93       	push	r26
     9ba:	bf 93       	push	r27
     9bc:	ef 93       	push	r30
     9be:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     9c0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     9c4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     9c8:	e0 91 ed 20 	lds	r30, 0x20ED	; 0x8020ed <adca_callback>
     9cc:	f0 91 ee 20 	lds	r31, 0x20EE	; 0x8020ee <adca_callback+0x1>
     9d0:	68 e0       	ldi	r22, 0x08	; 8
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	92 e0       	ldi	r25, 0x02	; 2
     9d6:	19 95       	eicall
}
     9d8:	ff 91       	pop	r31
     9da:	ef 91       	pop	r30
     9dc:	bf 91       	pop	r27
     9de:	af 91       	pop	r26
     9e0:	9f 91       	pop	r25
     9e2:	8f 91       	pop	r24
     9e4:	7f 91       	pop	r23
     9e6:	6f 91       	pop	r22
     9e8:	5f 91       	pop	r21
     9ea:	4f 91       	pop	r20
     9ec:	3f 91       	pop	r19
     9ee:	2f 91       	pop	r18
     9f0:	0f 90       	pop	r0
     9f2:	0b be       	out	0x3b, r0	; 59
     9f4:	0f 90       	pop	r0
     9f6:	09 be       	out	0x39, r0	; 57
     9f8:	0f 90       	pop	r0
     9fa:	08 be       	out	0x38, r0	; 56
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	0f 90       	pop	r0
     a02:	1f 90       	pop	r1
     a04:	18 95       	reti

00000a06 <__vector_39>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH0_vect)
{
     a06:	1f 92       	push	r1
     a08:	0f 92       	push	r0
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	0f 92       	push	r0
     a0e:	11 24       	eor	r1, r1
     a10:	08 b6       	in	r0, 0x38	; 56
     a12:	0f 92       	push	r0
     a14:	18 be       	out	0x38, r1	; 56
     a16:	09 b6       	in	r0, 0x39	; 57
     a18:	0f 92       	push	r0
     a1a:	19 be       	out	0x39, r1	; 57
     a1c:	0b b6       	in	r0, 0x3b	; 59
     a1e:	0f 92       	push	r0
     a20:	1b be       	out	0x3b, r1	; 59
     a22:	2f 93       	push	r18
     a24:	3f 93       	push	r19
     a26:	4f 93       	push	r20
     a28:	5f 93       	push	r21
     a2a:	6f 93       	push	r22
     a2c:	7f 93       	push	r23
     a2e:	8f 93       	push	r24
     a30:	9f 93       	push	r25
     a32:	af 93       	push	r26
     a34:	bf 93       	push	r27
     a36:	ef 93       	push	r30
     a38:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH0, adc_get_result(&ADCB, ADC_CH0));
     a3a:	40 91 64 02 	lds	r20, 0x0264	; 0x800264 <__TEXT_REGION_LENGTH__+0x700264>
     a3e:	50 91 65 02 	lds	r21, 0x0265	; 0x800265 <__TEXT_REGION_LENGTH__+0x700265>
     a42:	e0 91 eb 20 	lds	r30, 0x20EB	; 0x8020eb <adcb_callback>
     a46:	f0 91 ec 20 	lds	r31, 0x20EC	; 0x8020ec <adcb_callback+0x1>
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	80 e4       	ldi	r24, 0x40	; 64
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	19 95       	eicall
}
     a52:	ff 91       	pop	r31
     a54:	ef 91       	pop	r30
     a56:	bf 91       	pop	r27
     a58:	af 91       	pop	r26
     a5a:	9f 91       	pop	r25
     a5c:	8f 91       	pop	r24
     a5e:	7f 91       	pop	r23
     a60:	6f 91       	pop	r22
     a62:	5f 91       	pop	r21
     a64:	4f 91       	pop	r20
     a66:	3f 91       	pop	r19
     a68:	2f 91       	pop	r18
     a6a:	0f 90       	pop	r0
     a6c:	0b be       	out	0x3b, r0	; 59
     a6e:	0f 90       	pop	r0
     a70:	09 be       	out	0x39, r0	; 57
     a72:	0f 90       	pop	r0
     a74:	08 be       	out	0x38, r0	; 56
     a76:	0f 90       	pop	r0
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	0f 90       	pop	r0
     a7c:	1f 90       	pop	r1
     a7e:	18 95       	reti

00000a80 <__vector_40>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH1_vect)
{
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	08 b6       	in	r0, 0x38	; 56
     a8c:	0f 92       	push	r0
     a8e:	18 be       	out	0x38, r1	; 56
     a90:	09 b6       	in	r0, 0x39	; 57
     a92:	0f 92       	push	r0
     a94:	19 be       	out	0x39, r1	; 57
     a96:	0b b6       	in	r0, 0x3b	; 59
     a98:	0f 92       	push	r0
     a9a:	1b be       	out	0x3b, r1	; 59
     a9c:	2f 93       	push	r18
     a9e:	3f 93       	push	r19
     aa0:	4f 93       	push	r20
     aa2:	5f 93       	push	r21
     aa4:	6f 93       	push	r22
     aa6:	7f 93       	push	r23
     aa8:	8f 93       	push	r24
     aaa:	9f 93       	push	r25
     aac:	af 93       	push	r26
     aae:	bf 93       	push	r27
     ab0:	ef 93       	push	r30
     ab2:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH1, adc_get_result(&ADCB, ADC_CH1));
     ab4:	40 91 6c 02 	lds	r20, 0x026C	; 0x80026c <__TEXT_REGION_LENGTH__+0x70026c>
     ab8:	50 91 6d 02 	lds	r21, 0x026D	; 0x80026d <__TEXT_REGION_LENGTH__+0x70026d>
     abc:	e0 91 eb 20 	lds	r30, 0x20EB	; 0x8020eb <adcb_callback>
     ac0:	f0 91 ec 20 	lds	r31, 0x20EC	; 0x8020ec <adcb_callback+0x1>
     ac4:	62 e0       	ldi	r22, 0x02	; 2
     ac6:	80 e4       	ldi	r24, 0x40	; 64
     ac8:	92 e0       	ldi	r25, 0x02	; 2
     aca:	19 95       	eicall
}
     acc:	ff 91       	pop	r31
     ace:	ef 91       	pop	r30
     ad0:	bf 91       	pop	r27
     ad2:	af 91       	pop	r26
     ad4:	9f 91       	pop	r25
     ad6:	8f 91       	pop	r24
     ad8:	7f 91       	pop	r23
     ada:	6f 91       	pop	r22
     adc:	5f 91       	pop	r21
     ade:	4f 91       	pop	r20
     ae0:	3f 91       	pop	r19
     ae2:	2f 91       	pop	r18
     ae4:	0f 90       	pop	r0
     ae6:	0b be       	out	0x3b, r0	; 59
     ae8:	0f 90       	pop	r0
     aea:	09 be       	out	0x39, r0	; 57
     aec:	0f 90       	pop	r0
     aee:	08 be       	out	0x38, r0	; 56
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	1f 90       	pop	r1
     af8:	18 95       	reti

00000afa <__vector_41>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH2_vect)
{
     afa:	1f 92       	push	r1
     afc:	0f 92       	push	r0
     afe:	0f b6       	in	r0, 0x3f	; 63
     b00:	0f 92       	push	r0
     b02:	11 24       	eor	r1, r1
     b04:	08 b6       	in	r0, 0x38	; 56
     b06:	0f 92       	push	r0
     b08:	18 be       	out	0x38, r1	; 56
     b0a:	09 b6       	in	r0, 0x39	; 57
     b0c:	0f 92       	push	r0
     b0e:	19 be       	out	0x39, r1	; 57
     b10:	0b b6       	in	r0, 0x3b	; 59
     b12:	0f 92       	push	r0
     b14:	1b be       	out	0x3b, r1	; 59
     b16:	2f 93       	push	r18
     b18:	3f 93       	push	r19
     b1a:	4f 93       	push	r20
     b1c:	5f 93       	push	r21
     b1e:	6f 93       	push	r22
     b20:	7f 93       	push	r23
     b22:	8f 93       	push	r24
     b24:	9f 93       	push	r25
     b26:	af 93       	push	r26
     b28:	bf 93       	push	r27
     b2a:	ef 93       	push	r30
     b2c:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH2, adc_get_result(&ADCB, ADC_CH2));
     b2e:	40 91 74 02 	lds	r20, 0x0274	; 0x800274 <__TEXT_REGION_LENGTH__+0x700274>
     b32:	50 91 75 02 	lds	r21, 0x0275	; 0x800275 <__TEXT_REGION_LENGTH__+0x700275>
     b36:	e0 91 eb 20 	lds	r30, 0x20EB	; 0x8020eb <adcb_callback>
     b3a:	f0 91 ec 20 	lds	r31, 0x20EC	; 0x8020ec <adcb_callback+0x1>
     b3e:	64 e0       	ldi	r22, 0x04	; 4
     b40:	80 e4       	ldi	r24, 0x40	; 64
     b42:	92 e0       	ldi	r25, 0x02	; 2
     b44:	19 95       	eicall
}
     b46:	ff 91       	pop	r31
     b48:	ef 91       	pop	r30
     b4a:	bf 91       	pop	r27
     b4c:	af 91       	pop	r26
     b4e:	9f 91       	pop	r25
     b50:	8f 91       	pop	r24
     b52:	7f 91       	pop	r23
     b54:	6f 91       	pop	r22
     b56:	5f 91       	pop	r21
     b58:	4f 91       	pop	r20
     b5a:	3f 91       	pop	r19
     b5c:	2f 91       	pop	r18
     b5e:	0f 90       	pop	r0
     b60:	0b be       	out	0x3b, r0	; 59
     b62:	0f 90       	pop	r0
     b64:	09 be       	out	0x39, r0	; 57
     b66:	0f 90       	pop	r0
     b68:	08 be       	out	0x38, r0	; 56
     b6a:	0f 90       	pop	r0
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	0f 90       	pop	r0
     b70:	1f 90       	pop	r1
     b72:	18 95       	reti

00000b74 <__vector_42>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCB_CH3_vect)
{
     b74:	1f 92       	push	r1
     b76:	0f 92       	push	r0
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	0f 92       	push	r0
     b7c:	11 24       	eor	r1, r1
     b7e:	08 b6       	in	r0, 0x38	; 56
     b80:	0f 92       	push	r0
     b82:	18 be       	out	0x38, r1	; 56
     b84:	09 b6       	in	r0, 0x39	; 57
     b86:	0f 92       	push	r0
     b88:	19 be       	out	0x39, r1	; 57
     b8a:	0b b6       	in	r0, 0x3b	; 59
     b8c:	0f 92       	push	r0
     b8e:	1b be       	out	0x3b, r1	; 59
     b90:	2f 93       	push	r18
     b92:	3f 93       	push	r19
     b94:	4f 93       	push	r20
     b96:	5f 93       	push	r21
     b98:	6f 93       	push	r22
     b9a:	7f 93       	push	r23
     b9c:	8f 93       	push	r24
     b9e:	9f 93       	push	r25
     ba0:	af 93       	push	r26
     ba2:	bf 93       	push	r27
     ba4:	ef 93       	push	r30
     ba6:	ff 93       	push	r31
	adcb_callback(&ADCB, ADC_CH3, adc_get_result(&ADCB, ADC_CH3));
     ba8:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <__TEXT_REGION_LENGTH__+0x70027c>
     bac:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <__TEXT_REGION_LENGTH__+0x70027d>
     bb0:	e0 91 eb 20 	lds	r30, 0x20EB	; 0x8020eb <adcb_callback>
     bb4:	f0 91 ec 20 	lds	r31, 0x20EC	; 0x8020ec <adcb_callback+0x1>
     bb8:	68 e0       	ldi	r22, 0x08	; 8
     bba:	80 e4       	ldi	r24, 0x40	; 64
     bbc:	92 e0       	ldi	r25, 0x02	; 2
     bbe:	19 95       	eicall
}
     bc0:	ff 91       	pop	r31
     bc2:	ef 91       	pop	r30
     bc4:	bf 91       	pop	r27
     bc6:	af 91       	pop	r26
     bc8:	9f 91       	pop	r25
     bca:	8f 91       	pop	r24
     bcc:	7f 91       	pop	r23
     bce:	6f 91       	pop	r22
     bd0:	5f 91       	pop	r21
     bd2:	4f 91       	pop	r20
     bd4:	3f 91       	pop	r19
     bd6:	2f 91       	pop	r18
     bd8:	0f 90       	pop	r0
     bda:	0b be       	out	0x3b, r0	; 59
     bdc:	0f 90       	pop	r0
     bde:	09 be       	out	0x39, r0	; 57
     be0:	0f 90       	pop	r0
     be2:	08 be       	out	0x38, r0	; 56
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     bee:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     bf0:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     bf2:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     bf4:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     bf6:	60 83       	st	Z, r22
	ret                             // Return to caller
     bf8:	08 95       	ret

00000bfa <nvm_read_byte>:
#endif

#ifndef __DOXYGEN__
	PUBLIC_FUNCTION(nvm_read_byte)
#if defined(__GNUC__)
	lds r20, NVM_CMD          ; Store NVM command register
     bfa:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	mov ZL, r22               ; Load byte index into low byte of Z.
     bfe:	e6 2f       	mov	r30, r22
	mov ZH, r23               ; Load high byte into Z.
     c00:	f7 2f       	mov	r31, r23
	sts NVM_CMD, r24          ; Load prepared command into NVM Command register.
     c02:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	lpm r24, Z                ; Perform an LPM to read out byte
     c06:	84 91       	lpm	r24, Z
	sts NVM_CMD, r20          ; Restore NVM command register
     c08:	40 93 ca 01 	sts	0x01CA, r20	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
	sts NVM_CMD, r16          ; Load prepared command into NVM Command register.
	lpm r16, Z                ; Perform an LPM to read out byte
	sts NVM_CMD, r20          ; Restore NVM command register
#endif

	ret
     c0c:	08 95       	ret

00000c0e <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     c0e:	1f 92       	push	r1
     c10:	0f 92       	push	r0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	0f 92       	push	r0
     c16:	11 24       	eor	r1, r1
     c18:	08 b6       	in	r0, 0x38	; 56
     c1a:	0f 92       	push	r0
     c1c:	18 be       	out	0x38, r1	; 56
     c1e:	09 b6       	in	r0, 0x39	; 57
     c20:	0f 92       	push	r0
     c22:	19 be       	out	0x39, r1	; 57
     c24:	0b b6       	in	r0, 0x3b	; 59
     c26:	0f 92       	push	r0
     c28:	1b be       	out	0x3b, r1	; 59
     c2a:	2f 93       	push	r18
     c2c:	3f 93       	push	r19
     c2e:	4f 93       	push	r20
     c30:	5f 93       	push	r21
     c32:	6f 93       	push	r22
     c34:	7f 93       	push	r23
     c36:	8f 93       	push	r24
     c38:	9f 93       	push	r25
     c3a:	af 93       	push	r26
     c3c:	bf 93       	push	r27
     c3e:	ef 93       	push	r30
     c40:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     c42:	e0 91 dd 20 	lds	r30, 0x20DD	; 0x8020dd <tc_tcc0_ovf_callback>
     c46:	f0 91 de 20 	lds	r31, 0x20DE	; 0x8020de <tc_tcc0_ovf_callback+0x1>
     c4a:	30 97       	sbiw	r30, 0x00	; 0
     c4c:	09 f0       	breq	.+2      	; 0xc50 <__vector_14+0x42>
		tc_tcc0_ovf_callback();
     c4e:	19 95       	eicall
	}
}
     c50:	ff 91       	pop	r31
     c52:	ef 91       	pop	r30
     c54:	bf 91       	pop	r27
     c56:	af 91       	pop	r26
     c58:	9f 91       	pop	r25
     c5a:	8f 91       	pop	r24
     c5c:	7f 91       	pop	r23
     c5e:	6f 91       	pop	r22
     c60:	5f 91       	pop	r21
     c62:	4f 91       	pop	r20
     c64:	3f 91       	pop	r19
     c66:	2f 91       	pop	r18
     c68:	0f 90       	pop	r0
     c6a:	0b be       	out	0x3b, r0	; 59
     c6c:	0f 90       	pop	r0
     c6e:	09 be       	out	0x39, r0	; 57
     c70:	0f 90       	pop	r0
     c72:	08 be       	out	0x38, r0	; 56
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	08 b6       	in	r0, 0x38	; 56
     c8a:	0f 92       	push	r0
     c8c:	18 be       	out	0x38, r1	; 56
     c8e:	09 b6       	in	r0, 0x39	; 57
     c90:	0f 92       	push	r0
     c92:	19 be       	out	0x39, r1	; 57
     c94:	0b b6       	in	r0, 0x3b	; 59
     c96:	0f 92       	push	r0
     c98:	1b be       	out	0x3b, r1	; 59
     c9a:	2f 93       	push	r18
     c9c:	3f 93       	push	r19
     c9e:	4f 93       	push	r20
     ca0:	5f 93       	push	r21
     ca2:	6f 93       	push	r22
     ca4:	7f 93       	push	r23
     ca6:	8f 93       	push	r24
     ca8:	9f 93       	push	r25
     caa:	af 93       	push	r26
     cac:	bf 93       	push	r27
     cae:	ef 93       	push	r30
     cb0:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     cb2:	e0 91 db 20 	lds	r30, 0x20DB	; 0x8020db <tc_tcc0_err_callback>
     cb6:	f0 91 dc 20 	lds	r31, 0x20DC	; 0x8020dc <tc_tcc0_err_callback+0x1>
     cba:	30 97       	sbiw	r30, 0x00	; 0
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <__vector_15+0x42>
		tc_tcc0_err_callback();
     cbe:	19 95       	eicall
	}
}
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	bf 91       	pop	r27
     cc6:	af 91       	pop	r26
     cc8:	9f 91       	pop	r25
     cca:	8f 91       	pop	r24
     ccc:	7f 91       	pop	r23
     cce:	6f 91       	pop	r22
     cd0:	5f 91       	pop	r21
     cd2:	4f 91       	pop	r20
     cd4:	3f 91       	pop	r19
     cd6:	2f 91       	pop	r18
     cd8:	0f 90       	pop	r0
     cda:	0b be       	out	0x3b, r0	; 59
     cdc:	0f 90       	pop	r0
     cde:	09 be       	out	0x39, r0	; 57
     ce0:	0f 90       	pop	r0
     ce2:	08 be       	out	0x38, r0	; 56
     ce4:	0f 90       	pop	r0
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	0f 90       	pop	r0
     cea:	1f 90       	pop	r1
     cec:	18 95       	reti

00000cee <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     cee:	1f 92       	push	r1
     cf0:	0f 92       	push	r0
     cf2:	0f b6       	in	r0, 0x3f	; 63
     cf4:	0f 92       	push	r0
     cf6:	11 24       	eor	r1, r1
     cf8:	08 b6       	in	r0, 0x38	; 56
     cfa:	0f 92       	push	r0
     cfc:	18 be       	out	0x38, r1	; 56
     cfe:	09 b6       	in	r0, 0x39	; 57
     d00:	0f 92       	push	r0
     d02:	19 be       	out	0x39, r1	; 57
     d04:	0b b6       	in	r0, 0x3b	; 59
     d06:	0f 92       	push	r0
     d08:	1b be       	out	0x3b, r1	; 59
     d0a:	2f 93       	push	r18
     d0c:	3f 93       	push	r19
     d0e:	4f 93       	push	r20
     d10:	5f 93       	push	r21
     d12:	6f 93       	push	r22
     d14:	7f 93       	push	r23
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     d22:	e0 91 d9 20 	lds	r30, 0x20D9	; 0x8020d9 <tc_tcc0_cca_callback>
     d26:	f0 91 da 20 	lds	r31, 0x20DA	; 0x8020da <tc_tcc0_cca_callback+0x1>
     d2a:	30 97       	sbiw	r30, 0x00	; 0
     d2c:	09 f0       	breq	.+2      	; 0xd30 <__vector_16+0x42>
		tc_tcc0_cca_callback();
     d2e:	19 95       	eicall
	}
}
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	7f 91       	pop	r23
     d3e:	6f 91       	pop	r22
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	0f 90       	pop	r0
     d4a:	0b be       	out	0x3b, r0	; 59
     d4c:	0f 90       	pop	r0
     d4e:	09 be       	out	0x39, r0	; 57
     d50:	0f 90       	pop	r0
     d52:	08 be       	out	0x38, r0	; 56
     d54:	0f 90       	pop	r0
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	0f 90       	pop	r0
     d5a:	1f 90       	pop	r1
     d5c:	18 95       	reti

00000d5e <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     d5e:	1f 92       	push	r1
     d60:	0f 92       	push	r0
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	0f 92       	push	r0
     d66:	11 24       	eor	r1, r1
     d68:	08 b6       	in	r0, 0x38	; 56
     d6a:	0f 92       	push	r0
     d6c:	18 be       	out	0x38, r1	; 56
     d6e:	09 b6       	in	r0, 0x39	; 57
     d70:	0f 92       	push	r0
     d72:	19 be       	out	0x39, r1	; 57
     d74:	0b b6       	in	r0, 0x3b	; 59
     d76:	0f 92       	push	r0
     d78:	1b be       	out	0x3b, r1	; 59
     d7a:	2f 93       	push	r18
     d7c:	3f 93       	push	r19
     d7e:	4f 93       	push	r20
     d80:	5f 93       	push	r21
     d82:	6f 93       	push	r22
     d84:	7f 93       	push	r23
     d86:	8f 93       	push	r24
     d88:	9f 93       	push	r25
     d8a:	af 93       	push	r26
     d8c:	bf 93       	push	r27
     d8e:	ef 93       	push	r30
     d90:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     d92:	e0 91 d7 20 	lds	r30, 0x20D7	; 0x8020d7 <tc_tcc0_ccb_callback>
     d96:	f0 91 d8 20 	lds	r31, 0x20D8	; 0x8020d8 <tc_tcc0_ccb_callback+0x1>
     d9a:	30 97       	sbiw	r30, 0x00	; 0
     d9c:	09 f0       	breq	.+2      	; 0xda0 <__vector_17+0x42>
		tc_tcc0_ccb_callback();
     d9e:	19 95       	eicall
	}
}
     da0:	ff 91       	pop	r31
     da2:	ef 91       	pop	r30
     da4:	bf 91       	pop	r27
     da6:	af 91       	pop	r26
     da8:	9f 91       	pop	r25
     daa:	8f 91       	pop	r24
     dac:	7f 91       	pop	r23
     dae:	6f 91       	pop	r22
     db0:	5f 91       	pop	r21
     db2:	4f 91       	pop	r20
     db4:	3f 91       	pop	r19
     db6:	2f 91       	pop	r18
     db8:	0f 90       	pop	r0
     dba:	0b be       	out	0x3b, r0	; 59
     dbc:	0f 90       	pop	r0
     dbe:	09 be       	out	0x39, r0	; 57
     dc0:	0f 90       	pop	r0
     dc2:	08 be       	out	0x38, r0	; 56
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	0f 90       	pop	r0
     dca:	1f 90       	pop	r1
     dcc:	18 95       	reti

00000dce <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	08 b6       	in	r0, 0x38	; 56
     dda:	0f 92       	push	r0
     ddc:	18 be       	out	0x38, r1	; 56
     dde:	09 b6       	in	r0, 0x39	; 57
     de0:	0f 92       	push	r0
     de2:	19 be       	out	0x39, r1	; 57
     de4:	0b b6       	in	r0, 0x3b	; 59
     de6:	0f 92       	push	r0
     de8:	1b be       	out	0x3b, r1	; 59
     dea:	2f 93       	push	r18
     dec:	3f 93       	push	r19
     dee:	4f 93       	push	r20
     df0:	5f 93       	push	r21
     df2:	6f 93       	push	r22
     df4:	7f 93       	push	r23
     df6:	8f 93       	push	r24
     df8:	9f 93       	push	r25
     dfa:	af 93       	push	r26
     dfc:	bf 93       	push	r27
     dfe:	ef 93       	push	r30
     e00:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     e02:	e0 91 d5 20 	lds	r30, 0x20D5	; 0x8020d5 <tc_tcc0_ccc_callback>
     e06:	f0 91 d6 20 	lds	r31, 0x20D6	; 0x8020d6 <tc_tcc0_ccc_callback+0x1>
     e0a:	30 97       	sbiw	r30, 0x00	; 0
     e0c:	09 f0       	breq	.+2      	; 0xe10 <__vector_18+0x42>
		tc_tcc0_ccc_callback();
     e0e:	19 95       	eicall
	}
}
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	bf 91       	pop	r27
     e16:	af 91       	pop	r26
     e18:	9f 91       	pop	r25
     e1a:	8f 91       	pop	r24
     e1c:	7f 91       	pop	r23
     e1e:	6f 91       	pop	r22
     e20:	5f 91       	pop	r21
     e22:	4f 91       	pop	r20
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	0b be       	out	0x3b, r0	; 59
     e2c:	0f 90       	pop	r0
     e2e:	09 be       	out	0x39, r0	; 57
     e30:	0f 90       	pop	r0
     e32:	08 be       	out	0x38, r0	; 56
     e34:	0f 90       	pop	r0
     e36:	0f be       	out	0x3f, r0	; 63
     e38:	0f 90       	pop	r0
     e3a:	1f 90       	pop	r1
     e3c:	18 95       	reti

00000e3e <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     e3e:	1f 92       	push	r1
     e40:	0f 92       	push	r0
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	0f 92       	push	r0
     e46:	11 24       	eor	r1, r1
     e48:	08 b6       	in	r0, 0x38	; 56
     e4a:	0f 92       	push	r0
     e4c:	18 be       	out	0x38, r1	; 56
     e4e:	09 b6       	in	r0, 0x39	; 57
     e50:	0f 92       	push	r0
     e52:	19 be       	out	0x39, r1	; 57
     e54:	0b b6       	in	r0, 0x3b	; 59
     e56:	0f 92       	push	r0
     e58:	1b be       	out	0x3b, r1	; 59
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     e72:	e0 91 d3 20 	lds	r30, 0x20D3	; 0x8020d3 <tc_tcc0_ccd_callback>
     e76:	f0 91 d4 20 	lds	r31, 0x20D4	; 0x8020d4 <tc_tcc0_ccd_callback+0x1>
     e7a:	30 97       	sbiw	r30, 0x00	; 0
     e7c:	09 f0       	breq	.+2      	; 0xe80 <__vector_19+0x42>
		tc_tcc0_ccd_callback();
     e7e:	19 95       	eicall
	}
}
     e80:	ff 91       	pop	r31
     e82:	ef 91       	pop	r30
     e84:	bf 91       	pop	r27
     e86:	af 91       	pop	r26
     e88:	9f 91       	pop	r25
     e8a:	8f 91       	pop	r24
     e8c:	7f 91       	pop	r23
     e8e:	6f 91       	pop	r22
     e90:	5f 91       	pop	r21
     e92:	4f 91       	pop	r20
     e94:	3f 91       	pop	r19
     e96:	2f 91       	pop	r18
     e98:	0f 90       	pop	r0
     e9a:	0b be       	out	0x3b, r0	; 59
     e9c:	0f 90       	pop	r0
     e9e:	09 be       	out	0x39, r0	; 57
     ea0:	0f 90       	pop	r0
     ea2:	08 be       	out	0x38, r0	; 56
     ea4:	0f 90       	pop	r0
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	0f 90       	pop	r0
     eaa:	1f 90       	pop	r1
     eac:	18 95       	reti

00000eae <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     eae:	1f 92       	push	r1
     eb0:	0f 92       	push	r0
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	0f 92       	push	r0
     eb6:	11 24       	eor	r1, r1
     eb8:	08 b6       	in	r0, 0x38	; 56
     eba:	0f 92       	push	r0
     ebc:	18 be       	out	0x38, r1	; 56
     ebe:	09 b6       	in	r0, 0x39	; 57
     ec0:	0f 92       	push	r0
     ec2:	19 be       	out	0x39, r1	; 57
     ec4:	0b b6       	in	r0, 0x3b	; 59
     ec6:	0f 92       	push	r0
     ec8:	1b be       	out	0x3b, r1	; 59
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     ee2:	e0 91 d1 20 	lds	r30, 0x20D1	; 0x8020d1 <tc_tcc1_ovf_callback>
     ee6:	f0 91 d2 20 	lds	r31, 0x20D2	; 0x8020d2 <tc_tcc1_ovf_callback+0x1>
     eea:	30 97       	sbiw	r30, 0x00	; 0
     eec:	09 f0       	breq	.+2      	; 0xef0 <__vector_20+0x42>
		tc_tcc1_ovf_callback();
     eee:	19 95       	eicall
	}
}
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	bf 91       	pop	r27
     ef6:	af 91       	pop	r26
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	7f 91       	pop	r23
     efe:	6f 91       	pop	r22
     f00:	5f 91       	pop	r21
     f02:	4f 91       	pop	r20
     f04:	3f 91       	pop	r19
     f06:	2f 91       	pop	r18
     f08:	0f 90       	pop	r0
     f0a:	0b be       	out	0x3b, r0	; 59
     f0c:	0f 90       	pop	r0
     f0e:	09 be       	out	0x39, r0	; 57
     f10:	0f 90       	pop	r0
     f12:	08 be       	out	0x38, r0	; 56
     f14:	0f 90       	pop	r0
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	0f 90       	pop	r0
     f1a:	1f 90       	pop	r1
     f1c:	18 95       	reti

00000f1e <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     f1e:	1f 92       	push	r1
     f20:	0f 92       	push	r0
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	0f 92       	push	r0
     f26:	11 24       	eor	r1, r1
     f28:	08 b6       	in	r0, 0x38	; 56
     f2a:	0f 92       	push	r0
     f2c:	18 be       	out	0x38, r1	; 56
     f2e:	09 b6       	in	r0, 0x39	; 57
     f30:	0f 92       	push	r0
     f32:	19 be       	out	0x39, r1	; 57
     f34:	0b b6       	in	r0, 0x3b	; 59
     f36:	0f 92       	push	r0
     f38:	1b be       	out	0x3b, r1	; 59
     f3a:	2f 93       	push	r18
     f3c:	3f 93       	push	r19
     f3e:	4f 93       	push	r20
     f40:	5f 93       	push	r21
     f42:	6f 93       	push	r22
     f44:	7f 93       	push	r23
     f46:	8f 93       	push	r24
     f48:	9f 93       	push	r25
     f4a:	af 93       	push	r26
     f4c:	bf 93       	push	r27
     f4e:	ef 93       	push	r30
     f50:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
     f52:	e0 91 cf 20 	lds	r30, 0x20CF	; 0x8020cf <tc_tcc1_err_callback>
     f56:	f0 91 d0 20 	lds	r31, 0x20D0	; 0x8020d0 <tc_tcc1_err_callback+0x1>
     f5a:	30 97       	sbiw	r30, 0x00	; 0
     f5c:	09 f0       	breq	.+2      	; 0xf60 <__vector_21+0x42>
		tc_tcc1_err_callback();
     f5e:	19 95       	eicall
	}
}
     f60:	ff 91       	pop	r31
     f62:	ef 91       	pop	r30
     f64:	bf 91       	pop	r27
     f66:	af 91       	pop	r26
     f68:	9f 91       	pop	r25
     f6a:	8f 91       	pop	r24
     f6c:	7f 91       	pop	r23
     f6e:	6f 91       	pop	r22
     f70:	5f 91       	pop	r21
     f72:	4f 91       	pop	r20
     f74:	3f 91       	pop	r19
     f76:	2f 91       	pop	r18
     f78:	0f 90       	pop	r0
     f7a:	0b be       	out	0x3b, r0	; 59
     f7c:	0f 90       	pop	r0
     f7e:	09 be       	out	0x39, r0	; 57
     f80:	0f 90       	pop	r0
     f82:	08 be       	out	0x38, r0	; 56
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	08 b6       	in	r0, 0x38	; 56
     f9a:	0f 92       	push	r0
     f9c:	18 be       	out	0x38, r1	; 56
     f9e:	09 b6       	in	r0, 0x39	; 57
     fa0:	0f 92       	push	r0
     fa2:	19 be       	out	0x39, r1	; 57
     fa4:	0b b6       	in	r0, 0x3b	; 59
     fa6:	0f 92       	push	r0
     fa8:	1b be       	out	0x3b, r1	; 59
     faa:	2f 93       	push	r18
     fac:	3f 93       	push	r19
     fae:	4f 93       	push	r20
     fb0:	5f 93       	push	r21
     fb2:	6f 93       	push	r22
     fb4:	7f 93       	push	r23
     fb6:	8f 93       	push	r24
     fb8:	9f 93       	push	r25
     fba:	af 93       	push	r26
     fbc:	bf 93       	push	r27
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
     fc2:	e0 91 cd 20 	lds	r30, 0x20CD	; 0x8020cd <tc_tcc1_cca_callback>
     fc6:	f0 91 ce 20 	lds	r31, 0x20CE	; 0x8020ce <tc_tcc1_cca_callback+0x1>
     fca:	30 97       	sbiw	r30, 0x00	; 0
     fcc:	09 f0       	breq	.+2      	; 0xfd0 <__vector_22+0x42>
		tc_tcc1_cca_callback();
     fce:	19 95       	eicall
	}
}
     fd0:	ff 91       	pop	r31
     fd2:	ef 91       	pop	r30
     fd4:	bf 91       	pop	r27
     fd6:	af 91       	pop	r26
     fd8:	9f 91       	pop	r25
     fda:	8f 91       	pop	r24
     fdc:	7f 91       	pop	r23
     fde:	6f 91       	pop	r22
     fe0:	5f 91       	pop	r21
     fe2:	4f 91       	pop	r20
     fe4:	3f 91       	pop	r19
     fe6:	2f 91       	pop	r18
     fe8:	0f 90       	pop	r0
     fea:	0b be       	out	0x3b, r0	; 59
     fec:	0f 90       	pop	r0
     fee:	09 be       	out	0x39, r0	; 57
     ff0:	0f 90       	pop	r0
     ff2:	08 be       	out	0x38, r0	; 56
     ff4:	0f 90       	pop	r0
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	0f 90       	pop	r0
     ffa:	1f 90       	pop	r1
     ffc:	18 95       	reti

00000ffe <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
     ffe:	1f 92       	push	r1
    1000:	0f 92       	push	r0
    1002:	0f b6       	in	r0, 0x3f	; 63
    1004:	0f 92       	push	r0
    1006:	11 24       	eor	r1, r1
    1008:	08 b6       	in	r0, 0x38	; 56
    100a:	0f 92       	push	r0
    100c:	18 be       	out	0x38, r1	; 56
    100e:	09 b6       	in	r0, 0x39	; 57
    1010:	0f 92       	push	r0
    1012:	19 be       	out	0x39, r1	; 57
    1014:	0b b6       	in	r0, 0x3b	; 59
    1016:	0f 92       	push	r0
    1018:	1b be       	out	0x3b, r1	; 59
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    1032:	e0 91 cb 20 	lds	r30, 0x20CB	; 0x8020cb <tc_tcc1_ccb_callback>
    1036:	f0 91 cc 20 	lds	r31, 0x20CC	; 0x8020cc <tc_tcc1_ccb_callback+0x1>
    103a:	30 97       	sbiw	r30, 0x00	; 0
    103c:	09 f0       	breq	.+2      	; 0x1040 <__vector_23+0x42>
		tc_tcc1_ccb_callback();
    103e:	19 95       	eicall
	}
}
    1040:	ff 91       	pop	r31
    1042:	ef 91       	pop	r30
    1044:	bf 91       	pop	r27
    1046:	af 91       	pop	r26
    1048:	9f 91       	pop	r25
    104a:	8f 91       	pop	r24
    104c:	7f 91       	pop	r23
    104e:	6f 91       	pop	r22
    1050:	5f 91       	pop	r21
    1052:	4f 91       	pop	r20
    1054:	3f 91       	pop	r19
    1056:	2f 91       	pop	r18
    1058:	0f 90       	pop	r0
    105a:	0b be       	out	0x3b, r0	; 59
    105c:	0f 90       	pop	r0
    105e:	09 be       	out	0x39, r0	; 57
    1060:	0f 90       	pop	r0
    1062:	08 be       	out	0x38, r0	; 56
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__vector_77>:
 *
 * This function will handle interrupt on Timer Counter D0 overflow and
 * call the callback function.
 */
ISR(TCD0_OVF_vect)
{
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	08 b6       	in	r0, 0x38	; 56
    107a:	0f 92       	push	r0
    107c:	18 be       	out	0x38, r1	; 56
    107e:	09 b6       	in	r0, 0x39	; 57
    1080:	0f 92       	push	r0
    1082:	19 be       	out	0x39, r1	; 57
    1084:	0b b6       	in	r0, 0x3b	; 59
    1086:	0f 92       	push	r0
    1088:	1b be       	out	0x3b, r1	; 59
    108a:	2f 93       	push	r18
    108c:	3f 93       	push	r19
    108e:	4f 93       	push	r20
    1090:	5f 93       	push	r21
    1092:	6f 93       	push	r22
    1094:	7f 93       	push	r23
    1096:	8f 93       	push	r24
    1098:	9f 93       	push	r25
    109a:	af 93       	push	r26
    109c:	bf 93       	push	r27
    109e:	ef 93       	push	r30
    10a0:	ff 93       	push	r31
	if (tc_tcd0_ovf_callback) {
    10a2:	e0 91 c9 20 	lds	r30, 0x20C9	; 0x8020c9 <tc_tcd0_ovf_callback>
    10a6:	f0 91 ca 20 	lds	r31, 0x20CA	; 0x8020ca <tc_tcd0_ovf_callback+0x1>
    10aa:	30 97       	sbiw	r30, 0x00	; 0
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <__vector_77+0x42>
		tc_tcd0_ovf_callback();
    10ae:	19 95       	eicall
	}
}
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	bf 91       	pop	r27
    10b6:	af 91       	pop	r26
    10b8:	9f 91       	pop	r25
    10ba:	8f 91       	pop	r24
    10bc:	7f 91       	pop	r23
    10be:	6f 91       	pop	r22
    10c0:	5f 91       	pop	r21
    10c2:	4f 91       	pop	r20
    10c4:	3f 91       	pop	r19
    10c6:	2f 91       	pop	r18
    10c8:	0f 90       	pop	r0
    10ca:	0b be       	out	0x3b, r0	; 59
    10cc:	0f 90       	pop	r0
    10ce:	09 be       	out	0x39, r0	; 57
    10d0:	0f 90       	pop	r0
    10d2:	08 be       	out	0x38, r0	; 56
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	08 b6       	in	r0, 0x38	; 56
    10ea:	0f 92       	push	r0
    10ec:	18 be       	out	0x38, r1	; 56
    10ee:	09 b6       	in	r0, 0x39	; 57
    10f0:	0f 92       	push	r0
    10f2:	19 be       	out	0x39, r1	; 57
    10f4:	0b b6       	in	r0, 0x3b	; 59
    10f6:	0f 92       	push	r0
    10f8:	1b be       	out	0x3b, r1	; 59
    10fa:	2f 93       	push	r18
    10fc:	3f 93       	push	r19
    10fe:	4f 93       	push	r20
    1100:	5f 93       	push	r21
    1102:	6f 93       	push	r22
    1104:	7f 93       	push	r23
    1106:	8f 93       	push	r24
    1108:	9f 93       	push	r25
    110a:	af 93       	push	r26
    110c:	bf 93       	push	r27
    110e:	ef 93       	push	r30
    1110:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    1112:	e0 91 c7 20 	lds	r30, 0x20C7	; 0x8020c7 <tc_tcd0_err_callback>
    1116:	f0 91 c8 20 	lds	r31, 0x20C8	; 0x8020c8 <tc_tcd0_err_callback+0x1>
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	09 f0       	breq	.+2      	; 0x1120 <__vector_78+0x42>
		tc_tcd0_err_callback();
    111e:	19 95       	eicall
	}
}
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	bf 91       	pop	r27
    1126:	af 91       	pop	r26
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	7f 91       	pop	r23
    112e:	6f 91       	pop	r22
    1130:	5f 91       	pop	r21
    1132:	4f 91       	pop	r20
    1134:	3f 91       	pop	r19
    1136:	2f 91       	pop	r18
    1138:	0f 90       	pop	r0
    113a:	0b be       	out	0x3b, r0	; 59
    113c:	0f 90       	pop	r0
    113e:	09 be       	out	0x39, r0	; 57
    1140:	0f 90       	pop	r0
    1142:	08 be       	out	0x38, r0	; 56
    1144:	0f 90       	pop	r0
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	0f 90       	pop	r0
    114a:	1f 90       	pop	r1
    114c:	18 95       	reti

0000114e <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    114e:	1f 92       	push	r1
    1150:	0f 92       	push	r0
    1152:	0f b6       	in	r0, 0x3f	; 63
    1154:	0f 92       	push	r0
    1156:	11 24       	eor	r1, r1
    1158:	08 b6       	in	r0, 0x38	; 56
    115a:	0f 92       	push	r0
    115c:	18 be       	out	0x38, r1	; 56
    115e:	09 b6       	in	r0, 0x39	; 57
    1160:	0f 92       	push	r0
    1162:	19 be       	out	0x39, r1	; 57
    1164:	0b b6       	in	r0, 0x3b	; 59
    1166:	0f 92       	push	r0
    1168:	1b be       	out	0x3b, r1	; 59
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    1182:	e0 91 c5 20 	lds	r30, 0x20C5	; 0x8020c5 <tc_tcd0_cca_callback>
    1186:	f0 91 c6 20 	lds	r31, 0x20C6	; 0x8020c6 <tc_tcd0_cca_callback+0x1>
    118a:	30 97       	sbiw	r30, 0x00	; 0
    118c:	09 f0       	breq	.+2      	; 0x1190 <__vector_79+0x42>
		tc_tcd0_cca_callback();
    118e:	19 95       	eicall
	}
}
    1190:	ff 91       	pop	r31
    1192:	ef 91       	pop	r30
    1194:	bf 91       	pop	r27
    1196:	af 91       	pop	r26
    1198:	9f 91       	pop	r25
    119a:	8f 91       	pop	r24
    119c:	7f 91       	pop	r23
    119e:	6f 91       	pop	r22
    11a0:	5f 91       	pop	r21
    11a2:	4f 91       	pop	r20
    11a4:	3f 91       	pop	r19
    11a6:	2f 91       	pop	r18
    11a8:	0f 90       	pop	r0
    11aa:	0b be       	out	0x3b, r0	; 59
    11ac:	0f 90       	pop	r0
    11ae:	09 be       	out	0x39, r0	; 57
    11b0:	0f 90       	pop	r0
    11b2:	08 be       	out	0x38, r0	; 56
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	08 b6       	in	r0, 0x38	; 56
    11ca:	0f 92       	push	r0
    11cc:	18 be       	out	0x38, r1	; 56
    11ce:	09 b6       	in	r0, 0x39	; 57
    11d0:	0f 92       	push	r0
    11d2:	19 be       	out	0x39, r1	; 57
    11d4:	0b b6       	in	r0, 0x3b	; 59
    11d6:	0f 92       	push	r0
    11d8:	1b be       	out	0x3b, r1	; 59
    11da:	2f 93       	push	r18
    11dc:	3f 93       	push	r19
    11de:	4f 93       	push	r20
    11e0:	5f 93       	push	r21
    11e2:	6f 93       	push	r22
    11e4:	7f 93       	push	r23
    11e6:	8f 93       	push	r24
    11e8:	9f 93       	push	r25
    11ea:	af 93       	push	r26
    11ec:	bf 93       	push	r27
    11ee:	ef 93       	push	r30
    11f0:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    11f2:	e0 91 c3 20 	lds	r30, 0x20C3	; 0x8020c3 <tc_tcd0_ccb_callback>
    11f6:	f0 91 c4 20 	lds	r31, 0x20C4	; 0x8020c4 <tc_tcd0_ccb_callback+0x1>
    11fa:	30 97       	sbiw	r30, 0x00	; 0
    11fc:	09 f0       	breq	.+2      	; 0x1200 <__vector_80+0x42>
		tc_tcd0_ccb_callback();
    11fe:	19 95       	eicall
	}
}
    1200:	ff 91       	pop	r31
    1202:	ef 91       	pop	r30
    1204:	bf 91       	pop	r27
    1206:	af 91       	pop	r26
    1208:	9f 91       	pop	r25
    120a:	8f 91       	pop	r24
    120c:	7f 91       	pop	r23
    120e:	6f 91       	pop	r22
    1210:	5f 91       	pop	r21
    1212:	4f 91       	pop	r20
    1214:	3f 91       	pop	r19
    1216:	2f 91       	pop	r18
    1218:	0f 90       	pop	r0
    121a:	0b be       	out	0x3b, r0	; 59
    121c:	0f 90       	pop	r0
    121e:	09 be       	out	0x39, r0	; 57
    1220:	0f 90       	pop	r0
    1222:	08 be       	out	0x38, r0	; 56
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	08 b6       	in	r0, 0x38	; 56
    123a:	0f 92       	push	r0
    123c:	18 be       	out	0x38, r1	; 56
    123e:	09 b6       	in	r0, 0x39	; 57
    1240:	0f 92       	push	r0
    1242:	19 be       	out	0x39, r1	; 57
    1244:	0b b6       	in	r0, 0x3b	; 59
    1246:	0f 92       	push	r0
    1248:	1b be       	out	0x3b, r1	; 59
    124a:	2f 93       	push	r18
    124c:	3f 93       	push	r19
    124e:	4f 93       	push	r20
    1250:	5f 93       	push	r21
    1252:	6f 93       	push	r22
    1254:	7f 93       	push	r23
    1256:	8f 93       	push	r24
    1258:	9f 93       	push	r25
    125a:	af 93       	push	r26
    125c:	bf 93       	push	r27
    125e:	ef 93       	push	r30
    1260:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    1262:	e0 91 c1 20 	lds	r30, 0x20C1	; 0x8020c1 <tc_tcd0_ccc_callback>
    1266:	f0 91 c2 20 	lds	r31, 0x20C2	; 0x8020c2 <tc_tcd0_ccc_callback+0x1>
    126a:	30 97       	sbiw	r30, 0x00	; 0
    126c:	09 f0       	breq	.+2      	; 0x1270 <__vector_81+0x42>
		tc_tcd0_ccc_callback();
    126e:	19 95       	eicall
	}
}
    1270:	ff 91       	pop	r31
    1272:	ef 91       	pop	r30
    1274:	bf 91       	pop	r27
    1276:	af 91       	pop	r26
    1278:	9f 91       	pop	r25
    127a:	8f 91       	pop	r24
    127c:	7f 91       	pop	r23
    127e:	6f 91       	pop	r22
    1280:	5f 91       	pop	r21
    1282:	4f 91       	pop	r20
    1284:	3f 91       	pop	r19
    1286:	2f 91       	pop	r18
    1288:	0f 90       	pop	r0
    128a:	0b be       	out	0x3b, r0	; 59
    128c:	0f 90       	pop	r0
    128e:	09 be       	out	0x39, r0	; 57
    1290:	0f 90       	pop	r0
    1292:	08 be       	out	0x38, r0	; 56
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	0f 90       	pop	r0
    129a:	1f 90       	pop	r1
    129c:	18 95       	reti

0000129e <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    129e:	1f 92       	push	r1
    12a0:	0f 92       	push	r0
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	0f 92       	push	r0
    12a6:	11 24       	eor	r1, r1
    12a8:	08 b6       	in	r0, 0x38	; 56
    12aa:	0f 92       	push	r0
    12ac:	18 be       	out	0x38, r1	; 56
    12ae:	09 b6       	in	r0, 0x39	; 57
    12b0:	0f 92       	push	r0
    12b2:	19 be       	out	0x39, r1	; 57
    12b4:	0b b6       	in	r0, 0x3b	; 59
    12b6:	0f 92       	push	r0
    12b8:	1b be       	out	0x3b, r1	; 59
    12ba:	2f 93       	push	r18
    12bc:	3f 93       	push	r19
    12be:	4f 93       	push	r20
    12c0:	5f 93       	push	r21
    12c2:	6f 93       	push	r22
    12c4:	7f 93       	push	r23
    12c6:	8f 93       	push	r24
    12c8:	9f 93       	push	r25
    12ca:	af 93       	push	r26
    12cc:	bf 93       	push	r27
    12ce:	ef 93       	push	r30
    12d0:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    12d2:	e0 91 bf 20 	lds	r30, 0x20BF	; 0x8020bf <tc_tcd0_ccd_callback>
    12d6:	f0 91 c0 20 	lds	r31, 0x20C0	; 0x8020c0 <tc_tcd0_ccd_callback+0x1>
    12da:	30 97       	sbiw	r30, 0x00	; 0
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <__vector_82+0x42>
		tc_tcd0_ccd_callback();
    12de:	19 95       	eicall
	}
}
    12e0:	ff 91       	pop	r31
    12e2:	ef 91       	pop	r30
    12e4:	bf 91       	pop	r27
    12e6:	af 91       	pop	r26
    12e8:	9f 91       	pop	r25
    12ea:	8f 91       	pop	r24
    12ec:	7f 91       	pop	r23
    12ee:	6f 91       	pop	r22
    12f0:	5f 91       	pop	r21
    12f2:	4f 91       	pop	r20
    12f4:	3f 91       	pop	r19
    12f6:	2f 91       	pop	r18
    12f8:	0f 90       	pop	r0
    12fa:	0b be       	out	0x3b, r0	; 59
    12fc:	0f 90       	pop	r0
    12fe:	09 be       	out	0x39, r0	; 57
    1300:	0f 90       	pop	r0
    1302:	08 be       	out	0x38, r0	; 56
    1304:	0f 90       	pop	r0
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	0f 90       	pop	r0
    130a:	1f 90       	pop	r1
    130c:	18 95       	reti

0000130e <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    130e:	1f 92       	push	r1
    1310:	0f 92       	push	r0
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	0f 92       	push	r0
    1316:	11 24       	eor	r1, r1
    1318:	08 b6       	in	r0, 0x38	; 56
    131a:	0f 92       	push	r0
    131c:	18 be       	out	0x38, r1	; 56
    131e:	09 b6       	in	r0, 0x39	; 57
    1320:	0f 92       	push	r0
    1322:	19 be       	out	0x39, r1	; 57
    1324:	0b b6       	in	r0, 0x3b	; 59
    1326:	0f 92       	push	r0
    1328:	1b be       	out	0x3b, r1	; 59
    132a:	2f 93       	push	r18
    132c:	3f 93       	push	r19
    132e:	4f 93       	push	r20
    1330:	5f 93       	push	r21
    1332:	6f 93       	push	r22
    1334:	7f 93       	push	r23
    1336:	8f 93       	push	r24
    1338:	9f 93       	push	r25
    133a:	af 93       	push	r26
    133c:	bf 93       	push	r27
    133e:	ef 93       	push	r30
    1340:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    1342:	e0 91 bd 20 	lds	r30, 0x20BD	; 0x8020bd <tc_tcd1_ovf_callback>
    1346:	f0 91 be 20 	lds	r31, 0x20BE	; 0x8020be <tc_tcd1_ovf_callback+0x1>
    134a:	30 97       	sbiw	r30, 0x00	; 0
    134c:	09 f0       	breq	.+2      	; 0x1350 <__vector_83+0x42>
		tc_tcd1_ovf_callback();
    134e:	19 95       	eicall
	}
}
    1350:	ff 91       	pop	r31
    1352:	ef 91       	pop	r30
    1354:	bf 91       	pop	r27
    1356:	af 91       	pop	r26
    1358:	9f 91       	pop	r25
    135a:	8f 91       	pop	r24
    135c:	7f 91       	pop	r23
    135e:	6f 91       	pop	r22
    1360:	5f 91       	pop	r21
    1362:	4f 91       	pop	r20
    1364:	3f 91       	pop	r19
    1366:	2f 91       	pop	r18
    1368:	0f 90       	pop	r0
    136a:	0b be       	out	0x3b, r0	; 59
    136c:	0f 90       	pop	r0
    136e:	09 be       	out	0x39, r0	; 57
    1370:	0f 90       	pop	r0
    1372:	08 be       	out	0x38, r0	; 56
    1374:	0f 90       	pop	r0
    1376:	0f be       	out	0x3f, r0	; 63
    1378:	0f 90       	pop	r0
    137a:	1f 90       	pop	r1
    137c:	18 95       	reti

0000137e <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    137e:	1f 92       	push	r1
    1380:	0f 92       	push	r0
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	0f 92       	push	r0
    1386:	11 24       	eor	r1, r1
    1388:	08 b6       	in	r0, 0x38	; 56
    138a:	0f 92       	push	r0
    138c:	18 be       	out	0x38, r1	; 56
    138e:	09 b6       	in	r0, 0x39	; 57
    1390:	0f 92       	push	r0
    1392:	19 be       	out	0x39, r1	; 57
    1394:	0b b6       	in	r0, 0x3b	; 59
    1396:	0f 92       	push	r0
    1398:	1b be       	out	0x3b, r1	; 59
    139a:	2f 93       	push	r18
    139c:	3f 93       	push	r19
    139e:	4f 93       	push	r20
    13a0:	5f 93       	push	r21
    13a2:	6f 93       	push	r22
    13a4:	7f 93       	push	r23
    13a6:	8f 93       	push	r24
    13a8:	9f 93       	push	r25
    13aa:	af 93       	push	r26
    13ac:	bf 93       	push	r27
    13ae:	ef 93       	push	r30
    13b0:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    13b2:	e0 91 bb 20 	lds	r30, 0x20BB	; 0x8020bb <tc_tcd1_err_callback>
    13b6:	f0 91 bc 20 	lds	r31, 0x20BC	; 0x8020bc <tc_tcd1_err_callback+0x1>
    13ba:	30 97       	sbiw	r30, 0x00	; 0
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <__vector_84+0x42>
		tc_tcd1_err_callback();
    13be:	19 95       	eicall
	}
}
    13c0:	ff 91       	pop	r31
    13c2:	ef 91       	pop	r30
    13c4:	bf 91       	pop	r27
    13c6:	af 91       	pop	r26
    13c8:	9f 91       	pop	r25
    13ca:	8f 91       	pop	r24
    13cc:	7f 91       	pop	r23
    13ce:	6f 91       	pop	r22
    13d0:	5f 91       	pop	r21
    13d2:	4f 91       	pop	r20
    13d4:	3f 91       	pop	r19
    13d6:	2f 91       	pop	r18
    13d8:	0f 90       	pop	r0
    13da:	0b be       	out	0x3b, r0	; 59
    13dc:	0f 90       	pop	r0
    13de:	09 be       	out	0x39, r0	; 57
    13e0:	0f 90       	pop	r0
    13e2:	08 be       	out	0x38, r0	; 56
    13e4:	0f 90       	pop	r0
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	0f 90       	pop	r0
    13ea:	1f 90       	pop	r1
    13ec:	18 95       	reti

000013ee <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    13ee:	1f 92       	push	r1
    13f0:	0f 92       	push	r0
    13f2:	0f b6       	in	r0, 0x3f	; 63
    13f4:	0f 92       	push	r0
    13f6:	11 24       	eor	r1, r1
    13f8:	08 b6       	in	r0, 0x38	; 56
    13fa:	0f 92       	push	r0
    13fc:	18 be       	out	0x38, r1	; 56
    13fe:	09 b6       	in	r0, 0x39	; 57
    1400:	0f 92       	push	r0
    1402:	19 be       	out	0x39, r1	; 57
    1404:	0b b6       	in	r0, 0x3b	; 59
    1406:	0f 92       	push	r0
    1408:	1b be       	out	0x3b, r1	; 59
    140a:	2f 93       	push	r18
    140c:	3f 93       	push	r19
    140e:	4f 93       	push	r20
    1410:	5f 93       	push	r21
    1412:	6f 93       	push	r22
    1414:	7f 93       	push	r23
    1416:	8f 93       	push	r24
    1418:	9f 93       	push	r25
    141a:	af 93       	push	r26
    141c:	bf 93       	push	r27
    141e:	ef 93       	push	r30
    1420:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1422:	e0 91 b9 20 	lds	r30, 0x20B9	; 0x8020b9 <tc_tcd1_cca_callback>
    1426:	f0 91 ba 20 	lds	r31, 0x20BA	; 0x8020ba <tc_tcd1_cca_callback+0x1>
    142a:	30 97       	sbiw	r30, 0x00	; 0
    142c:	09 f0       	breq	.+2      	; 0x1430 <__vector_85+0x42>
		tc_tcd1_cca_callback();
    142e:	19 95       	eicall
	}
}
    1430:	ff 91       	pop	r31
    1432:	ef 91       	pop	r30
    1434:	bf 91       	pop	r27
    1436:	af 91       	pop	r26
    1438:	9f 91       	pop	r25
    143a:	8f 91       	pop	r24
    143c:	7f 91       	pop	r23
    143e:	6f 91       	pop	r22
    1440:	5f 91       	pop	r21
    1442:	4f 91       	pop	r20
    1444:	3f 91       	pop	r19
    1446:	2f 91       	pop	r18
    1448:	0f 90       	pop	r0
    144a:	0b be       	out	0x3b, r0	; 59
    144c:	0f 90       	pop	r0
    144e:	09 be       	out	0x39, r0	; 57
    1450:	0f 90       	pop	r0
    1452:	08 be       	out	0x38, r0	; 56
    1454:	0f 90       	pop	r0
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	0f 90       	pop	r0
    145a:	1f 90       	pop	r1
    145c:	18 95       	reti

0000145e <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    145e:	1f 92       	push	r1
    1460:	0f 92       	push	r0
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	0f 92       	push	r0
    1466:	11 24       	eor	r1, r1
    1468:	08 b6       	in	r0, 0x38	; 56
    146a:	0f 92       	push	r0
    146c:	18 be       	out	0x38, r1	; 56
    146e:	09 b6       	in	r0, 0x39	; 57
    1470:	0f 92       	push	r0
    1472:	19 be       	out	0x39, r1	; 57
    1474:	0b b6       	in	r0, 0x3b	; 59
    1476:	0f 92       	push	r0
    1478:	1b be       	out	0x3b, r1	; 59
    147a:	2f 93       	push	r18
    147c:	3f 93       	push	r19
    147e:	4f 93       	push	r20
    1480:	5f 93       	push	r21
    1482:	6f 93       	push	r22
    1484:	7f 93       	push	r23
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	af 93       	push	r26
    148c:	bf 93       	push	r27
    148e:	ef 93       	push	r30
    1490:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1492:	e0 91 b7 20 	lds	r30, 0x20B7	; 0x8020b7 <tc_tcd1_ccb_callback>
    1496:	f0 91 b8 20 	lds	r31, 0x20B8	; 0x8020b8 <tc_tcd1_ccb_callback+0x1>
    149a:	30 97       	sbiw	r30, 0x00	; 0
    149c:	09 f0       	breq	.+2      	; 0x14a0 <__vector_86+0x42>
		tc_tcd1_ccb_callback();
    149e:	19 95       	eicall
	}
}
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	bf 91       	pop	r27
    14a6:	af 91       	pop	r26
    14a8:	9f 91       	pop	r25
    14aa:	8f 91       	pop	r24
    14ac:	7f 91       	pop	r23
    14ae:	6f 91       	pop	r22
    14b0:	5f 91       	pop	r21
    14b2:	4f 91       	pop	r20
    14b4:	3f 91       	pop	r19
    14b6:	2f 91       	pop	r18
    14b8:	0f 90       	pop	r0
    14ba:	0b be       	out	0x3b, r0	; 59
    14bc:	0f 90       	pop	r0
    14be:	09 be       	out	0x39, r0	; 57
    14c0:	0f 90       	pop	r0
    14c2:	08 be       	out	0x38, r0	; 56
    14c4:	0f 90       	pop	r0
    14c6:	0f be       	out	0x3f, r0	; 63
    14c8:	0f 90       	pop	r0
    14ca:	1f 90       	pop	r1
    14cc:	18 95       	reti

000014ce <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    14ce:	1f 92       	push	r1
    14d0:	0f 92       	push	r0
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	0f 92       	push	r0
    14d6:	11 24       	eor	r1, r1
    14d8:	08 b6       	in	r0, 0x38	; 56
    14da:	0f 92       	push	r0
    14dc:	18 be       	out	0x38, r1	; 56
    14de:	09 b6       	in	r0, 0x39	; 57
    14e0:	0f 92       	push	r0
    14e2:	19 be       	out	0x39, r1	; 57
    14e4:	0b b6       	in	r0, 0x3b	; 59
    14e6:	0f 92       	push	r0
    14e8:	1b be       	out	0x3b, r1	; 59
    14ea:	2f 93       	push	r18
    14ec:	3f 93       	push	r19
    14ee:	4f 93       	push	r20
    14f0:	5f 93       	push	r21
    14f2:	6f 93       	push	r22
    14f4:	7f 93       	push	r23
    14f6:	8f 93       	push	r24
    14f8:	9f 93       	push	r25
    14fa:	af 93       	push	r26
    14fc:	bf 93       	push	r27
    14fe:	ef 93       	push	r30
    1500:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    1502:	e0 91 b5 20 	lds	r30, 0x20B5	; 0x8020b5 <tc_tce0_ovf_callback>
    1506:	f0 91 b6 20 	lds	r31, 0x20B6	; 0x8020b6 <tc_tce0_ovf_callback+0x1>
    150a:	30 97       	sbiw	r30, 0x00	; 0
    150c:	09 f0       	breq	.+2      	; 0x1510 <__vector_47+0x42>
		tc_tce0_ovf_callback();
    150e:	19 95       	eicall
	}
}
    1510:	ff 91       	pop	r31
    1512:	ef 91       	pop	r30
    1514:	bf 91       	pop	r27
    1516:	af 91       	pop	r26
    1518:	9f 91       	pop	r25
    151a:	8f 91       	pop	r24
    151c:	7f 91       	pop	r23
    151e:	6f 91       	pop	r22
    1520:	5f 91       	pop	r21
    1522:	4f 91       	pop	r20
    1524:	3f 91       	pop	r19
    1526:	2f 91       	pop	r18
    1528:	0f 90       	pop	r0
    152a:	0b be       	out	0x3b, r0	; 59
    152c:	0f 90       	pop	r0
    152e:	09 be       	out	0x39, r0	; 57
    1530:	0f 90       	pop	r0
    1532:	08 be       	out	0x38, r0	; 56
    1534:	0f 90       	pop	r0
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	0f 90       	pop	r0
    153a:	1f 90       	pop	r1
    153c:	18 95       	reti

0000153e <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    153e:	1f 92       	push	r1
    1540:	0f 92       	push	r0
    1542:	0f b6       	in	r0, 0x3f	; 63
    1544:	0f 92       	push	r0
    1546:	11 24       	eor	r1, r1
    1548:	08 b6       	in	r0, 0x38	; 56
    154a:	0f 92       	push	r0
    154c:	18 be       	out	0x38, r1	; 56
    154e:	09 b6       	in	r0, 0x39	; 57
    1550:	0f 92       	push	r0
    1552:	19 be       	out	0x39, r1	; 57
    1554:	0b b6       	in	r0, 0x3b	; 59
    1556:	0f 92       	push	r0
    1558:	1b be       	out	0x3b, r1	; 59
    155a:	2f 93       	push	r18
    155c:	3f 93       	push	r19
    155e:	4f 93       	push	r20
    1560:	5f 93       	push	r21
    1562:	6f 93       	push	r22
    1564:	7f 93       	push	r23
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	af 93       	push	r26
    156c:	bf 93       	push	r27
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    1572:	e0 91 b3 20 	lds	r30, 0x20B3	; 0x8020b3 <tc_tce0_err_callback>
    1576:	f0 91 b4 20 	lds	r31, 0x20B4	; 0x8020b4 <tc_tce0_err_callback+0x1>
    157a:	30 97       	sbiw	r30, 0x00	; 0
    157c:	09 f0       	breq	.+2      	; 0x1580 <__vector_48+0x42>
		tc_tce0_err_callback();
    157e:	19 95       	eicall
	}
}
    1580:	ff 91       	pop	r31
    1582:	ef 91       	pop	r30
    1584:	bf 91       	pop	r27
    1586:	af 91       	pop	r26
    1588:	9f 91       	pop	r25
    158a:	8f 91       	pop	r24
    158c:	7f 91       	pop	r23
    158e:	6f 91       	pop	r22
    1590:	5f 91       	pop	r21
    1592:	4f 91       	pop	r20
    1594:	3f 91       	pop	r19
    1596:	2f 91       	pop	r18
    1598:	0f 90       	pop	r0
    159a:	0b be       	out	0x3b, r0	; 59
    159c:	0f 90       	pop	r0
    159e:	09 be       	out	0x39, r0	; 57
    15a0:	0f 90       	pop	r0
    15a2:	08 be       	out	0x38, r0	; 56
    15a4:	0f 90       	pop	r0
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	0f 90       	pop	r0
    15aa:	1f 90       	pop	r1
    15ac:	18 95       	reti

000015ae <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    15ae:	1f 92       	push	r1
    15b0:	0f 92       	push	r0
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	0f 92       	push	r0
    15b6:	11 24       	eor	r1, r1
    15b8:	08 b6       	in	r0, 0x38	; 56
    15ba:	0f 92       	push	r0
    15bc:	18 be       	out	0x38, r1	; 56
    15be:	09 b6       	in	r0, 0x39	; 57
    15c0:	0f 92       	push	r0
    15c2:	19 be       	out	0x39, r1	; 57
    15c4:	0b b6       	in	r0, 0x3b	; 59
    15c6:	0f 92       	push	r0
    15c8:	1b be       	out	0x3b, r1	; 59
    15ca:	2f 93       	push	r18
    15cc:	3f 93       	push	r19
    15ce:	4f 93       	push	r20
    15d0:	5f 93       	push	r21
    15d2:	6f 93       	push	r22
    15d4:	7f 93       	push	r23
    15d6:	8f 93       	push	r24
    15d8:	9f 93       	push	r25
    15da:	af 93       	push	r26
    15dc:	bf 93       	push	r27
    15de:	ef 93       	push	r30
    15e0:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    15e2:	e0 91 b1 20 	lds	r30, 0x20B1	; 0x8020b1 <tc_tce0_cca_callback>
    15e6:	f0 91 b2 20 	lds	r31, 0x20B2	; 0x8020b2 <tc_tce0_cca_callback+0x1>
    15ea:	30 97       	sbiw	r30, 0x00	; 0
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <__vector_49+0x42>
		tc_tce0_cca_callback();
    15ee:	19 95       	eicall
	}
}
    15f0:	ff 91       	pop	r31
    15f2:	ef 91       	pop	r30
    15f4:	bf 91       	pop	r27
    15f6:	af 91       	pop	r26
    15f8:	9f 91       	pop	r25
    15fa:	8f 91       	pop	r24
    15fc:	7f 91       	pop	r23
    15fe:	6f 91       	pop	r22
    1600:	5f 91       	pop	r21
    1602:	4f 91       	pop	r20
    1604:	3f 91       	pop	r19
    1606:	2f 91       	pop	r18
    1608:	0f 90       	pop	r0
    160a:	0b be       	out	0x3b, r0	; 59
    160c:	0f 90       	pop	r0
    160e:	09 be       	out	0x39, r0	; 57
    1610:	0f 90       	pop	r0
    1612:	08 be       	out	0x38, r0	; 56
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	08 b6       	in	r0, 0x38	; 56
    162a:	0f 92       	push	r0
    162c:	18 be       	out	0x38, r1	; 56
    162e:	09 b6       	in	r0, 0x39	; 57
    1630:	0f 92       	push	r0
    1632:	19 be       	out	0x39, r1	; 57
    1634:	0b b6       	in	r0, 0x3b	; 59
    1636:	0f 92       	push	r0
    1638:	1b be       	out	0x3b, r1	; 59
    163a:	2f 93       	push	r18
    163c:	3f 93       	push	r19
    163e:	4f 93       	push	r20
    1640:	5f 93       	push	r21
    1642:	6f 93       	push	r22
    1644:	7f 93       	push	r23
    1646:	8f 93       	push	r24
    1648:	9f 93       	push	r25
    164a:	af 93       	push	r26
    164c:	bf 93       	push	r27
    164e:	ef 93       	push	r30
    1650:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    1652:	e0 91 af 20 	lds	r30, 0x20AF	; 0x8020af <tc_tce0_ccb_callback>
    1656:	f0 91 b0 20 	lds	r31, 0x20B0	; 0x8020b0 <tc_tce0_ccb_callback+0x1>
    165a:	30 97       	sbiw	r30, 0x00	; 0
    165c:	09 f0       	breq	.+2      	; 0x1660 <__vector_50+0x42>
		tc_tce0_ccb_callback();
    165e:	19 95       	eicall
	}
}
    1660:	ff 91       	pop	r31
    1662:	ef 91       	pop	r30
    1664:	bf 91       	pop	r27
    1666:	af 91       	pop	r26
    1668:	9f 91       	pop	r25
    166a:	8f 91       	pop	r24
    166c:	7f 91       	pop	r23
    166e:	6f 91       	pop	r22
    1670:	5f 91       	pop	r21
    1672:	4f 91       	pop	r20
    1674:	3f 91       	pop	r19
    1676:	2f 91       	pop	r18
    1678:	0f 90       	pop	r0
    167a:	0b be       	out	0x3b, r0	; 59
    167c:	0f 90       	pop	r0
    167e:	09 be       	out	0x39, r0	; 57
    1680:	0f 90       	pop	r0
    1682:	08 be       	out	0x38, r0	; 56
    1684:	0f 90       	pop	r0
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	0f 90       	pop	r0
    168a:	1f 90       	pop	r1
    168c:	18 95       	reti

0000168e <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    168e:	1f 92       	push	r1
    1690:	0f 92       	push	r0
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	0f 92       	push	r0
    1696:	11 24       	eor	r1, r1
    1698:	08 b6       	in	r0, 0x38	; 56
    169a:	0f 92       	push	r0
    169c:	18 be       	out	0x38, r1	; 56
    169e:	09 b6       	in	r0, 0x39	; 57
    16a0:	0f 92       	push	r0
    16a2:	19 be       	out	0x39, r1	; 57
    16a4:	0b b6       	in	r0, 0x3b	; 59
    16a6:	0f 92       	push	r0
    16a8:	1b be       	out	0x3b, r1	; 59
    16aa:	2f 93       	push	r18
    16ac:	3f 93       	push	r19
    16ae:	4f 93       	push	r20
    16b0:	5f 93       	push	r21
    16b2:	6f 93       	push	r22
    16b4:	7f 93       	push	r23
    16b6:	8f 93       	push	r24
    16b8:	9f 93       	push	r25
    16ba:	af 93       	push	r26
    16bc:	bf 93       	push	r27
    16be:	ef 93       	push	r30
    16c0:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    16c2:	e0 91 ad 20 	lds	r30, 0x20AD	; 0x8020ad <tc_tce0_ccc_callback>
    16c6:	f0 91 ae 20 	lds	r31, 0x20AE	; 0x8020ae <tc_tce0_ccc_callback+0x1>
    16ca:	30 97       	sbiw	r30, 0x00	; 0
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <__vector_51+0x42>
		tc_tce0_ccc_callback();
    16ce:	19 95       	eicall
	}
}
    16d0:	ff 91       	pop	r31
    16d2:	ef 91       	pop	r30
    16d4:	bf 91       	pop	r27
    16d6:	af 91       	pop	r26
    16d8:	9f 91       	pop	r25
    16da:	8f 91       	pop	r24
    16dc:	7f 91       	pop	r23
    16de:	6f 91       	pop	r22
    16e0:	5f 91       	pop	r21
    16e2:	4f 91       	pop	r20
    16e4:	3f 91       	pop	r19
    16e6:	2f 91       	pop	r18
    16e8:	0f 90       	pop	r0
    16ea:	0b be       	out	0x3b, r0	; 59
    16ec:	0f 90       	pop	r0
    16ee:	09 be       	out	0x39, r0	; 57
    16f0:	0f 90       	pop	r0
    16f2:	08 be       	out	0x38, r0	; 56
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    16fe:	1f 92       	push	r1
    1700:	0f 92       	push	r0
    1702:	0f b6       	in	r0, 0x3f	; 63
    1704:	0f 92       	push	r0
    1706:	11 24       	eor	r1, r1
    1708:	08 b6       	in	r0, 0x38	; 56
    170a:	0f 92       	push	r0
    170c:	18 be       	out	0x38, r1	; 56
    170e:	09 b6       	in	r0, 0x39	; 57
    1710:	0f 92       	push	r0
    1712:	19 be       	out	0x39, r1	; 57
    1714:	0b b6       	in	r0, 0x3b	; 59
    1716:	0f 92       	push	r0
    1718:	1b be       	out	0x3b, r1	; 59
    171a:	2f 93       	push	r18
    171c:	3f 93       	push	r19
    171e:	4f 93       	push	r20
    1720:	5f 93       	push	r21
    1722:	6f 93       	push	r22
    1724:	7f 93       	push	r23
    1726:	8f 93       	push	r24
    1728:	9f 93       	push	r25
    172a:	af 93       	push	r26
    172c:	bf 93       	push	r27
    172e:	ef 93       	push	r30
    1730:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1732:	e0 91 ab 20 	lds	r30, 0x20AB	; 0x8020ab <tc_tce0_ccd_callback>
    1736:	f0 91 ac 20 	lds	r31, 0x20AC	; 0x8020ac <tc_tce0_ccd_callback+0x1>
    173a:	30 97       	sbiw	r30, 0x00	; 0
    173c:	09 f0       	breq	.+2      	; 0x1740 <__vector_52+0x42>
		tc_tce0_ccd_callback();
    173e:	19 95       	eicall
	}
}
    1740:	ff 91       	pop	r31
    1742:	ef 91       	pop	r30
    1744:	bf 91       	pop	r27
    1746:	af 91       	pop	r26
    1748:	9f 91       	pop	r25
    174a:	8f 91       	pop	r24
    174c:	7f 91       	pop	r23
    174e:	6f 91       	pop	r22
    1750:	5f 91       	pop	r21
    1752:	4f 91       	pop	r20
    1754:	3f 91       	pop	r19
    1756:	2f 91       	pop	r18
    1758:	0f 90       	pop	r0
    175a:	0b be       	out	0x3b, r0	; 59
    175c:	0f 90       	pop	r0
    175e:	09 be       	out	0x39, r0	; 57
    1760:	0f 90       	pop	r0
    1762:	08 be       	out	0x38, r0	; 56
    1764:	0f 90       	pop	r0
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	0f 90       	pop	r0
    176a:	1f 90       	pop	r1
    176c:	18 95       	reti

0000176e <__vector_53>:
 *
 * This function will handle interrupt on Timer Counter E1 overflow and
 * call the callback function.
 */
ISR(TCE1_OVF_vect)
{
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	08 b6       	in	r0, 0x38	; 56
    177a:	0f 92       	push	r0
    177c:	18 be       	out	0x38, r1	; 56
    177e:	09 b6       	in	r0, 0x39	; 57
    1780:	0f 92       	push	r0
    1782:	19 be       	out	0x39, r1	; 57
    1784:	0b b6       	in	r0, 0x3b	; 59
    1786:	0f 92       	push	r0
    1788:	1b be       	out	0x3b, r1	; 59
    178a:	2f 93       	push	r18
    178c:	3f 93       	push	r19
    178e:	4f 93       	push	r20
    1790:	5f 93       	push	r21
    1792:	6f 93       	push	r22
    1794:	7f 93       	push	r23
    1796:	8f 93       	push	r24
    1798:	9f 93       	push	r25
    179a:	af 93       	push	r26
    179c:	bf 93       	push	r27
    179e:	ef 93       	push	r30
    17a0:	ff 93       	push	r31
	if (tc_tce1_ovf_callback) {
    17a2:	e0 91 a9 20 	lds	r30, 0x20A9	; 0x8020a9 <tc_tce1_ovf_callback>
    17a6:	f0 91 aa 20 	lds	r31, 0x20AA	; 0x8020aa <tc_tce1_ovf_callback+0x1>
    17aa:	30 97       	sbiw	r30, 0x00	; 0
    17ac:	09 f0       	breq	.+2      	; 0x17b0 <__vector_53+0x42>
		tc_tce1_ovf_callback();
    17ae:	19 95       	eicall
	}
}
    17b0:	ff 91       	pop	r31
    17b2:	ef 91       	pop	r30
    17b4:	bf 91       	pop	r27
    17b6:	af 91       	pop	r26
    17b8:	9f 91       	pop	r25
    17ba:	8f 91       	pop	r24
    17bc:	7f 91       	pop	r23
    17be:	6f 91       	pop	r22
    17c0:	5f 91       	pop	r21
    17c2:	4f 91       	pop	r20
    17c4:	3f 91       	pop	r19
    17c6:	2f 91       	pop	r18
    17c8:	0f 90       	pop	r0
    17ca:	0b be       	out	0x3b, r0	; 59
    17cc:	0f 90       	pop	r0
    17ce:	09 be       	out	0x39, r0	; 57
    17d0:	0f 90       	pop	r0
    17d2:	08 be       	out	0x38, r0	; 56
    17d4:	0f 90       	pop	r0
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	0f 90       	pop	r0
    17da:	1f 90       	pop	r1
    17dc:	18 95       	reti

000017de <__vector_54>:
 *
 * This function will handle interrupt on Timer Counter E1 error and
 * call the callback function.
 */
ISR(TCE1_ERR_vect)
{
    17de:	1f 92       	push	r1
    17e0:	0f 92       	push	r0
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
    17e8:	08 b6       	in	r0, 0x38	; 56
    17ea:	0f 92       	push	r0
    17ec:	18 be       	out	0x38, r1	; 56
    17ee:	09 b6       	in	r0, 0x39	; 57
    17f0:	0f 92       	push	r0
    17f2:	19 be       	out	0x39, r1	; 57
    17f4:	0b b6       	in	r0, 0x3b	; 59
    17f6:	0f 92       	push	r0
    17f8:	1b be       	out	0x3b, r1	; 59
    17fa:	2f 93       	push	r18
    17fc:	3f 93       	push	r19
    17fe:	4f 93       	push	r20
    1800:	5f 93       	push	r21
    1802:	6f 93       	push	r22
    1804:	7f 93       	push	r23
    1806:	8f 93       	push	r24
    1808:	9f 93       	push	r25
    180a:	af 93       	push	r26
    180c:	bf 93       	push	r27
    180e:	ef 93       	push	r30
    1810:	ff 93       	push	r31
	if (tc_tce1_err_callback) {
    1812:	e0 91 a7 20 	lds	r30, 0x20A7	; 0x8020a7 <tc_tce1_err_callback>
    1816:	f0 91 a8 20 	lds	r31, 0x20A8	; 0x8020a8 <tc_tce1_err_callback+0x1>
    181a:	30 97       	sbiw	r30, 0x00	; 0
    181c:	09 f0       	breq	.+2      	; 0x1820 <__vector_54+0x42>
		tc_tce1_err_callback();
    181e:	19 95       	eicall
	}
}
    1820:	ff 91       	pop	r31
    1822:	ef 91       	pop	r30
    1824:	bf 91       	pop	r27
    1826:	af 91       	pop	r26
    1828:	9f 91       	pop	r25
    182a:	8f 91       	pop	r24
    182c:	7f 91       	pop	r23
    182e:	6f 91       	pop	r22
    1830:	5f 91       	pop	r21
    1832:	4f 91       	pop	r20
    1834:	3f 91       	pop	r19
    1836:	2f 91       	pop	r18
    1838:	0f 90       	pop	r0
    183a:	0b be       	out	0x3b, r0	; 59
    183c:	0f 90       	pop	r0
    183e:	09 be       	out	0x39, r0	; 57
    1840:	0f 90       	pop	r0
    1842:	08 be       	out	0x38, r0	; 56
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <__vector_55>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE1_CCA_vect)
{
    184e:	1f 92       	push	r1
    1850:	0f 92       	push	r0
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	0f 92       	push	r0
    1856:	11 24       	eor	r1, r1
    1858:	08 b6       	in	r0, 0x38	; 56
    185a:	0f 92       	push	r0
    185c:	18 be       	out	0x38, r1	; 56
    185e:	09 b6       	in	r0, 0x39	; 57
    1860:	0f 92       	push	r0
    1862:	19 be       	out	0x39, r1	; 57
    1864:	0b b6       	in	r0, 0x3b	; 59
    1866:	0f 92       	push	r0
    1868:	1b be       	out	0x3b, r1	; 59
    186a:	2f 93       	push	r18
    186c:	3f 93       	push	r19
    186e:	4f 93       	push	r20
    1870:	5f 93       	push	r21
    1872:	6f 93       	push	r22
    1874:	7f 93       	push	r23
    1876:	8f 93       	push	r24
    1878:	9f 93       	push	r25
    187a:	af 93       	push	r26
    187c:	bf 93       	push	r27
    187e:	ef 93       	push	r30
    1880:	ff 93       	push	r31
	if (tc_tce1_cca_callback) {
    1882:	e0 91 a5 20 	lds	r30, 0x20A5	; 0x8020a5 <tc_tce1_cca_callback>
    1886:	f0 91 a6 20 	lds	r31, 0x20A6	; 0x8020a6 <tc_tce1_cca_callback+0x1>
    188a:	30 97       	sbiw	r30, 0x00	; 0
    188c:	09 f0       	breq	.+2      	; 0x1890 <__vector_55+0x42>
		tc_tce1_cca_callback();
    188e:	19 95       	eicall
	}
}
    1890:	ff 91       	pop	r31
    1892:	ef 91       	pop	r30
    1894:	bf 91       	pop	r27
    1896:	af 91       	pop	r26
    1898:	9f 91       	pop	r25
    189a:	8f 91       	pop	r24
    189c:	7f 91       	pop	r23
    189e:	6f 91       	pop	r22
    18a0:	5f 91       	pop	r21
    18a2:	4f 91       	pop	r20
    18a4:	3f 91       	pop	r19
    18a6:	2f 91       	pop	r18
    18a8:	0f 90       	pop	r0
    18aa:	0b be       	out	0x3b, r0	; 59
    18ac:	0f 90       	pop	r0
    18ae:	09 be       	out	0x39, r0	; 57
    18b0:	0f 90       	pop	r0
    18b2:	08 be       	out	0x38, r0	; 56
    18b4:	0f 90       	pop	r0
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	0f 90       	pop	r0
    18ba:	1f 90       	pop	r1
    18bc:	18 95       	reti

000018be <__vector_56>:
 *
 * This function will handle interrupt on Timer Counter E1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE1_CCB_vect)
{
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	08 b6       	in	r0, 0x38	; 56
    18ca:	0f 92       	push	r0
    18cc:	18 be       	out	0x38, r1	; 56
    18ce:	09 b6       	in	r0, 0x39	; 57
    18d0:	0f 92       	push	r0
    18d2:	19 be       	out	0x39, r1	; 57
    18d4:	0b b6       	in	r0, 0x3b	; 59
    18d6:	0f 92       	push	r0
    18d8:	1b be       	out	0x3b, r1	; 59
    18da:	2f 93       	push	r18
    18dc:	3f 93       	push	r19
    18de:	4f 93       	push	r20
    18e0:	5f 93       	push	r21
    18e2:	6f 93       	push	r22
    18e4:	7f 93       	push	r23
    18e6:	8f 93       	push	r24
    18e8:	9f 93       	push	r25
    18ea:	af 93       	push	r26
    18ec:	bf 93       	push	r27
    18ee:	ef 93       	push	r30
    18f0:	ff 93       	push	r31
	if (tc_tce1_ccb_callback) {
    18f2:	e0 91 a3 20 	lds	r30, 0x20A3	; 0x8020a3 <tc_tce1_ccb_callback>
    18f6:	f0 91 a4 20 	lds	r31, 0x20A4	; 0x8020a4 <tc_tce1_ccb_callback+0x1>
    18fa:	30 97       	sbiw	r30, 0x00	; 0
    18fc:	09 f0       	breq	.+2      	; 0x1900 <__vector_56+0x42>
		tc_tce1_ccb_callback();
    18fe:	19 95       	eicall
	}
}
    1900:	ff 91       	pop	r31
    1902:	ef 91       	pop	r30
    1904:	bf 91       	pop	r27
    1906:	af 91       	pop	r26
    1908:	9f 91       	pop	r25
    190a:	8f 91       	pop	r24
    190c:	7f 91       	pop	r23
    190e:	6f 91       	pop	r22
    1910:	5f 91       	pop	r21
    1912:	4f 91       	pop	r20
    1914:	3f 91       	pop	r19
    1916:	2f 91       	pop	r18
    1918:	0f 90       	pop	r0
    191a:	0b be       	out	0x3b, r0	; 59
    191c:	0f 90       	pop	r0
    191e:	09 be       	out	0x39, r0	; 57
    1920:	0f 90       	pop	r0
    1922:	08 be       	out	0x38, r0	; 56
    1924:	0f 90       	pop	r0
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	0f 90       	pop	r0
    192a:	1f 90       	pop	r1
    192c:	18 95       	reti

0000192e <__vector_108>:
 *
 * This function will handle interrupt on Timer Counter F0 overflow and
 * call the callback function.
 */
ISR(TCF0_OVF_vect)
{
    192e:	1f 92       	push	r1
    1930:	0f 92       	push	r0
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	0f 92       	push	r0
    1936:	11 24       	eor	r1, r1
    1938:	08 b6       	in	r0, 0x38	; 56
    193a:	0f 92       	push	r0
    193c:	18 be       	out	0x38, r1	; 56
    193e:	09 b6       	in	r0, 0x39	; 57
    1940:	0f 92       	push	r0
    1942:	19 be       	out	0x39, r1	; 57
    1944:	0b b6       	in	r0, 0x3b	; 59
    1946:	0f 92       	push	r0
    1948:	1b be       	out	0x3b, r1	; 59
    194a:	2f 93       	push	r18
    194c:	3f 93       	push	r19
    194e:	4f 93       	push	r20
    1950:	5f 93       	push	r21
    1952:	6f 93       	push	r22
    1954:	7f 93       	push	r23
    1956:	8f 93       	push	r24
    1958:	9f 93       	push	r25
    195a:	af 93       	push	r26
    195c:	bf 93       	push	r27
    195e:	ef 93       	push	r30
    1960:	ff 93       	push	r31
	if (tc_tcf0_ovf_callback) {
    1962:	e0 91 a1 20 	lds	r30, 0x20A1	; 0x8020a1 <tc_tcf0_ovf_callback>
    1966:	f0 91 a2 20 	lds	r31, 0x20A2	; 0x8020a2 <tc_tcf0_ovf_callback+0x1>
    196a:	30 97       	sbiw	r30, 0x00	; 0
    196c:	09 f0       	breq	.+2      	; 0x1970 <__vector_108+0x42>
		tc_tcf0_ovf_callback();
    196e:	19 95       	eicall
	}
}
    1970:	ff 91       	pop	r31
    1972:	ef 91       	pop	r30
    1974:	bf 91       	pop	r27
    1976:	af 91       	pop	r26
    1978:	9f 91       	pop	r25
    197a:	8f 91       	pop	r24
    197c:	7f 91       	pop	r23
    197e:	6f 91       	pop	r22
    1980:	5f 91       	pop	r21
    1982:	4f 91       	pop	r20
    1984:	3f 91       	pop	r19
    1986:	2f 91       	pop	r18
    1988:	0f 90       	pop	r0
    198a:	0b be       	out	0x3b, r0	; 59
    198c:	0f 90       	pop	r0
    198e:	09 be       	out	0x39, r0	; 57
    1990:	0f 90       	pop	r0
    1992:	08 be       	out	0x38, r0	; 56
    1994:	0f 90       	pop	r0
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	0f 90       	pop	r0
    199a:	1f 90       	pop	r1
    199c:	18 95       	reti

0000199e <__vector_109>:
 *
 * This function will handle interrupt on Timer Counter F0 error and
 * call the callback function.
 */
ISR(TCF0_ERR_vect)
{
    199e:	1f 92       	push	r1
    19a0:	0f 92       	push	r0
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	0f 92       	push	r0
    19a6:	11 24       	eor	r1, r1
    19a8:	08 b6       	in	r0, 0x38	; 56
    19aa:	0f 92       	push	r0
    19ac:	18 be       	out	0x38, r1	; 56
    19ae:	09 b6       	in	r0, 0x39	; 57
    19b0:	0f 92       	push	r0
    19b2:	19 be       	out	0x39, r1	; 57
    19b4:	0b b6       	in	r0, 0x3b	; 59
    19b6:	0f 92       	push	r0
    19b8:	1b be       	out	0x3b, r1	; 59
    19ba:	2f 93       	push	r18
    19bc:	3f 93       	push	r19
    19be:	4f 93       	push	r20
    19c0:	5f 93       	push	r21
    19c2:	6f 93       	push	r22
    19c4:	7f 93       	push	r23
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	af 93       	push	r26
    19cc:	bf 93       	push	r27
    19ce:	ef 93       	push	r30
    19d0:	ff 93       	push	r31
	if (tc_tcf0_err_callback) {
    19d2:	e0 91 9f 20 	lds	r30, 0x209F	; 0x80209f <tc_tcf0_err_callback>
    19d6:	f0 91 a0 20 	lds	r31, 0x20A0	; 0x8020a0 <tc_tcf0_err_callback+0x1>
    19da:	30 97       	sbiw	r30, 0x00	; 0
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <__vector_109+0x42>
		tc_tcf0_err_callback();
    19de:	19 95       	eicall
	}
}
    19e0:	ff 91       	pop	r31
    19e2:	ef 91       	pop	r30
    19e4:	bf 91       	pop	r27
    19e6:	af 91       	pop	r26
    19e8:	9f 91       	pop	r25
    19ea:	8f 91       	pop	r24
    19ec:	7f 91       	pop	r23
    19ee:	6f 91       	pop	r22
    19f0:	5f 91       	pop	r21
    19f2:	4f 91       	pop	r20
    19f4:	3f 91       	pop	r19
    19f6:	2f 91       	pop	r18
    19f8:	0f 90       	pop	r0
    19fa:	0b be       	out	0x3b, r0	; 59
    19fc:	0f 90       	pop	r0
    19fe:	09 be       	out	0x39, r0	; 57
    1a00:	0f 90       	pop	r0
    1a02:	08 be       	out	0x38, r0	; 56
    1a04:	0f 90       	pop	r0
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	0f 90       	pop	r0
    1a0a:	1f 90       	pop	r1
    1a0c:	18 95       	reti

00001a0e <__vector_110>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF0_CCA_vect)
{
    1a0e:	1f 92       	push	r1
    1a10:	0f 92       	push	r0
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	0f 92       	push	r0
    1a16:	11 24       	eor	r1, r1
    1a18:	08 b6       	in	r0, 0x38	; 56
    1a1a:	0f 92       	push	r0
    1a1c:	18 be       	out	0x38, r1	; 56
    1a1e:	09 b6       	in	r0, 0x39	; 57
    1a20:	0f 92       	push	r0
    1a22:	19 be       	out	0x39, r1	; 57
    1a24:	0b b6       	in	r0, 0x3b	; 59
    1a26:	0f 92       	push	r0
    1a28:	1b be       	out	0x3b, r1	; 59
    1a2a:	2f 93       	push	r18
    1a2c:	3f 93       	push	r19
    1a2e:	4f 93       	push	r20
    1a30:	5f 93       	push	r21
    1a32:	6f 93       	push	r22
    1a34:	7f 93       	push	r23
    1a36:	8f 93       	push	r24
    1a38:	9f 93       	push	r25
    1a3a:	af 93       	push	r26
    1a3c:	bf 93       	push	r27
    1a3e:	ef 93       	push	r30
    1a40:	ff 93       	push	r31
	if (tc_tcf0_cca_callback) {
    1a42:	e0 91 9d 20 	lds	r30, 0x209D	; 0x80209d <tc_tcf0_cca_callback>
    1a46:	f0 91 9e 20 	lds	r31, 0x209E	; 0x80209e <tc_tcf0_cca_callback+0x1>
    1a4a:	30 97       	sbiw	r30, 0x00	; 0
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <__vector_110+0x42>
		tc_tcf0_cca_callback();
    1a4e:	19 95       	eicall
	}
}
    1a50:	ff 91       	pop	r31
    1a52:	ef 91       	pop	r30
    1a54:	bf 91       	pop	r27
    1a56:	af 91       	pop	r26
    1a58:	9f 91       	pop	r25
    1a5a:	8f 91       	pop	r24
    1a5c:	7f 91       	pop	r23
    1a5e:	6f 91       	pop	r22
    1a60:	5f 91       	pop	r21
    1a62:	4f 91       	pop	r20
    1a64:	3f 91       	pop	r19
    1a66:	2f 91       	pop	r18
    1a68:	0f 90       	pop	r0
    1a6a:	0b be       	out	0x3b, r0	; 59
    1a6c:	0f 90       	pop	r0
    1a6e:	09 be       	out	0x39, r0	; 57
    1a70:	0f 90       	pop	r0
    1a72:	08 be       	out	0x38, r0	; 56
    1a74:	0f 90       	pop	r0
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	0f 90       	pop	r0
    1a7a:	1f 90       	pop	r1
    1a7c:	18 95       	reti

00001a7e <__vector_111>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF0_CCB_vect)
{
    1a7e:	1f 92       	push	r1
    1a80:	0f 92       	push	r0
    1a82:	0f b6       	in	r0, 0x3f	; 63
    1a84:	0f 92       	push	r0
    1a86:	11 24       	eor	r1, r1
    1a88:	08 b6       	in	r0, 0x38	; 56
    1a8a:	0f 92       	push	r0
    1a8c:	18 be       	out	0x38, r1	; 56
    1a8e:	09 b6       	in	r0, 0x39	; 57
    1a90:	0f 92       	push	r0
    1a92:	19 be       	out	0x39, r1	; 57
    1a94:	0b b6       	in	r0, 0x3b	; 59
    1a96:	0f 92       	push	r0
    1a98:	1b be       	out	0x3b, r1	; 59
    1a9a:	2f 93       	push	r18
    1a9c:	3f 93       	push	r19
    1a9e:	4f 93       	push	r20
    1aa0:	5f 93       	push	r21
    1aa2:	6f 93       	push	r22
    1aa4:	7f 93       	push	r23
    1aa6:	8f 93       	push	r24
    1aa8:	9f 93       	push	r25
    1aaa:	af 93       	push	r26
    1aac:	bf 93       	push	r27
    1aae:	ef 93       	push	r30
    1ab0:	ff 93       	push	r31
	if (tc_tcf0_ccb_callback) {
    1ab2:	e0 91 9b 20 	lds	r30, 0x209B	; 0x80209b <tc_tcf0_ccb_callback>
    1ab6:	f0 91 9c 20 	lds	r31, 0x209C	; 0x80209c <tc_tcf0_ccb_callback+0x1>
    1aba:	30 97       	sbiw	r30, 0x00	; 0
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <__vector_111+0x42>
		tc_tcf0_ccb_callback();
    1abe:	19 95       	eicall
	}
}
    1ac0:	ff 91       	pop	r31
    1ac2:	ef 91       	pop	r30
    1ac4:	bf 91       	pop	r27
    1ac6:	af 91       	pop	r26
    1ac8:	9f 91       	pop	r25
    1aca:	8f 91       	pop	r24
    1acc:	7f 91       	pop	r23
    1ace:	6f 91       	pop	r22
    1ad0:	5f 91       	pop	r21
    1ad2:	4f 91       	pop	r20
    1ad4:	3f 91       	pop	r19
    1ad6:	2f 91       	pop	r18
    1ad8:	0f 90       	pop	r0
    1ada:	0b be       	out	0x3b, r0	; 59
    1adc:	0f 90       	pop	r0
    1ade:	09 be       	out	0x39, r0	; 57
    1ae0:	0f 90       	pop	r0
    1ae2:	08 be       	out	0x38, r0	; 56
    1ae4:	0f 90       	pop	r0
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	0f 90       	pop	r0
    1aea:	1f 90       	pop	r1
    1aec:	18 95       	reti

00001aee <__vector_112>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCF0_CCC_vect)
{
    1aee:	1f 92       	push	r1
    1af0:	0f 92       	push	r0
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	0f 92       	push	r0
    1af6:	11 24       	eor	r1, r1
    1af8:	08 b6       	in	r0, 0x38	; 56
    1afa:	0f 92       	push	r0
    1afc:	18 be       	out	0x38, r1	; 56
    1afe:	09 b6       	in	r0, 0x39	; 57
    1b00:	0f 92       	push	r0
    1b02:	19 be       	out	0x39, r1	; 57
    1b04:	0b b6       	in	r0, 0x3b	; 59
    1b06:	0f 92       	push	r0
    1b08:	1b be       	out	0x3b, r1	; 59
    1b0a:	2f 93       	push	r18
    1b0c:	3f 93       	push	r19
    1b0e:	4f 93       	push	r20
    1b10:	5f 93       	push	r21
    1b12:	6f 93       	push	r22
    1b14:	7f 93       	push	r23
    1b16:	8f 93       	push	r24
    1b18:	9f 93       	push	r25
    1b1a:	af 93       	push	r26
    1b1c:	bf 93       	push	r27
    1b1e:	ef 93       	push	r30
    1b20:	ff 93       	push	r31
	if (tc_tcf0_ccc_callback) {
    1b22:	e0 91 99 20 	lds	r30, 0x2099	; 0x802099 <tc_tcf0_ccc_callback>
    1b26:	f0 91 9a 20 	lds	r31, 0x209A	; 0x80209a <tc_tcf0_ccc_callback+0x1>
    1b2a:	30 97       	sbiw	r30, 0x00	; 0
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <__vector_112+0x42>
		tc_tcf0_ccc_callback();
    1b2e:	19 95       	eicall
	}
}
    1b30:	ff 91       	pop	r31
    1b32:	ef 91       	pop	r30
    1b34:	bf 91       	pop	r27
    1b36:	af 91       	pop	r26
    1b38:	9f 91       	pop	r25
    1b3a:	8f 91       	pop	r24
    1b3c:	7f 91       	pop	r23
    1b3e:	6f 91       	pop	r22
    1b40:	5f 91       	pop	r21
    1b42:	4f 91       	pop	r20
    1b44:	3f 91       	pop	r19
    1b46:	2f 91       	pop	r18
    1b48:	0f 90       	pop	r0
    1b4a:	0b be       	out	0x3b, r0	; 59
    1b4c:	0f 90       	pop	r0
    1b4e:	09 be       	out	0x39, r0	; 57
    1b50:	0f 90       	pop	r0
    1b52:	08 be       	out	0x38, r0	; 56
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	0f 90       	pop	r0
    1b5a:	1f 90       	pop	r1
    1b5c:	18 95       	reti

00001b5e <__vector_113>:
 *
 * This function will handle interrupt on Timer Counter F0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCF0_CCD_vect)
{
    1b5e:	1f 92       	push	r1
    1b60:	0f 92       	push	r0
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	0f 92       	push	r0
    1b66:	11 24       	eor	r1, r1
    1b68:	08 b6       	in	r0, 0x38	; 56
    1b6a:	0f 92       	push	r0
    1b6c:	18 be       	out	0x38, r1	; 56
    1b6e:	09 b6       	in	r0, 0x39	; 57
    1b70:	0f 92       	push	r0
    1b72:	19 be       	out	0x39, r1	; 57
    1b74:	0b b6       	in	r0, 0x3b	; 59
    1b76:	0f 92       	push	r0
    1b78:	1b be       	out	0x3b, r1	; 59
    1b7a:	2f 93       	push	r18
    1b7c:	3f 93       	push	r19
    1b7e:	4f 93       	push	r20
    1b80:	5f 93       	push	r21
    1b82:	6f 93       	push	r22
    1b84:	7f 93       	push	r23
    1b86:	8f 93       	push	r24
    1b88:	9f 93       	push	r25
    1b8a:	af 93       	push	r26
    1b8c:	bf 93       	push	r27
    1b8e:	ef 93       	push	r30
    1b90:	ff 93       	push	r31
	if (tc_tcf0_ccd_callback) {
    1b92:	e0 91 97 20 	lds	r30, 0x2097	; 0x802097 <tc_tcf0_ccd_callback>
    1b96:	f0 91 98 20 	lds	r31, 0x2098	; 0x802098 <tc_tcf0_ccd_callback+0x1>
    1b9a:	30 97       	sbiw	r30, 0x00	; 0
    1b9c:	09 f0       	breq	.+2      	; 0x1ba0 <__vector_113+0x42>
		tc_tcf0_ccd_callback();
    1b9e:	19 95       	eicall
	}
}
    1ba0:	ff 91       	pop	r31
    1ba2:	ef 91       	pop	r30
    1ba4:	bf 91       	pop	r27
    1ba6:	af 91       	pop	r26
    1ba8:	9f 91       	pop	r25
    1baa:	8f 91       	pop	r24
    1bac:	7f 91       	pop	r23
    1bae:	6f 91       	pop	r22
    1bb0:	5f 91       	pop	r21
    1bb2:	4f 91       	pop	r20
    1bb4:	3f 91       	pop	r19
    1bb6:	2f 91       	pop	r18
    1bb8:	0f 90       	pop	r0
    1bba:	0b be       	out	0x3b, r0	; 59
    1bbc:	0f 90       	pop	r0
    1bbe:	09 be       	out	0x39, r0	; 57
    1bc0:	0f 90       	pop	r0
    1bc2:	08 be       	out	0x38, r0	; 56
    1bc4:	0f 90       	pop	r0
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	0f 90       	pop	r0
    1bca:	1f 90       	pop	r1
    1bcc:	18 95       	reti

00001bce <__vector_114>:
 *
 * This function will handle interrupt on Timer Counter F1 overflow and
 * call the callback function.
 */
ISR(TCF1_OVF_vect)
{
    1bce:	1f 92       	push	r1
    1bd0:	0f 92       	push	r0
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	0f 92       	push	r0
    1bd6:	11 24       	eor	r1, r1
    1bd8:	08 b6       	in	r0, 0x38	; 56
    1bda:	0f 92       	push	r0
    1bdc:	18 be       	out	0x38, r1	; 56
    1bde:	09 b6       	in	r0, 0x39	; 57
    1be0:	0f 92       	push	r0
    1be2:	19 be       	out	0x39, r1	; 57
    1be4:	0b b6       	in	r0, 0x3b	; 59
    1be6:	0f 92       	push	r0
    1be8:	1b be       	out	0x3b, r1	; 59
    1bea:	2f 93       	push	r18
    1bec:	3f 93       	push	r19
    1bee:	4f 93       	push	r20
    1bf0:	5f 93       	push	r21
    1bf2:	6f 93       	push	r22
    1bf4:	7f 93       	push	r23
    1bf6:	8f 93       	push	r24
    1bf8:	9f 93       	push	r25
    1bfa:	af 93       	push	r26
    1bfc:	bf 93       	push	r27
    1bfe:	ef 93       	push	r30
    1c00:	ff 93       	push	r31
	if (tc_tcf1_ovf_callback) {
    1c02:	e0 91 95 20 	lds	r30, 0x2095	; 0x802095 <tc_tcf1_ovf_callback>
    1c06:	f0 91 96 20 	lds	r31, 0x2096	; 0x802096 <tc_tcf1_ovf_callback+0x1>
    1c0a:	30 97       	sbiw	r30, 0x00	; 0
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <__vector_114+0x42>
		tc_tcf1_ovf_callback();
    1c0e:	19 95       	eicall
	}
}
    1c10:	ff 91       	pop	r31
    1c12:	ef 91       	pop	r30
    1c14:	bf 91       	pop	r27
    1c16:	af 91       	pop	r26
    1c18:	9f 91       	pop	r25
    1c1a:	8f 91       	pop	r24
    1c1c:	7f 91       	pop	r23
    1c1e:	6f 91       	pop	r22
    1c20:	5f 91       	pop	r21
    1c22:	4f 91       	pop	r20
    1c24:	3f 91       	pop	r19
    1c26:	2f 91       	pop	r18
    1c28:	0f 90       	pop	r0
    1c2a:	0b be       	out	0x3b, r0	; 59
    1c2c:	0f 90       	pop	r0
    1c2e:	09 be       	out	0x39, r0	; 57
    1c30:	0f 90       	pop	r0
    1c32:	08 be       	out	0x38, r0	; 56
    1c34:	0f 90       	pop	r0
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	0f 90       	pop	r0
    1c3a:	1f 90       	pop	r1
    1c3c:	18 95       	reti

00001c3e <__vector_115>:
 *
 * This function will handle interrupt on Timer Counter F1 error and
 * call the callback function.
 */
ISR(TCF1_ERR_vect)
{
    1c3e:	1f 92       	push	r1
    1c40:	0f 92       	push	r0
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	0f 92       	push	r0
    1c46:	11 24       	eor	r1, r1
    1c48:	08 b6       	in	r0, 0x38	; 56
    1c4a:	0f 92       	push	r0
    1c4c:	18 be       	out	0x38, r1	; 56
    1c4e:	09 b6       	in	r0, 0x39	; 57
    1c50:	0f 92       	push	r0
    1c52:	19 be       	out	0x39, r1	; 57
    1c54:	0b b6       	in	r0, 0x3b	; 59
    1c56:	0f 92       	push	r0
    1c58:	1b be       	out	0x3b, r1	; 59
    1c5a:	2f 93       	push	r18
    1c5c:	3f 93       	push	r19
    1c5e:	4f 93       	push	r20
    1c60:	5f 93       	push	r21
    1c62:	6f 93       	push	r22
    1c64:	7f 93       	push	r23
    1c66:	8f 93       	push	r24
    1c68:	9f 93       	push	r25
    1c6a:	af 93       	push	r26
    1c6c:	bf 93       	push	r27
    1c6e:	ef 93       	push	r30
    1c70:	ff 93       	push	r31
	if (tc_tcf1_err_callback) {
    1c72:	e0 91 93 20 	lds	r30, 0x2093	; 0x802093 <tc_tcf1_err_callback>
    1c76:	f0 91 94 20 	lds	r31, 0x2094	; 0x802094 <tc_tcf1_err_callback+0x1>
    1c7a:	30 97       	sbiw	r30, 0x00	; 0
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <__vector_115+0x42>
		tc_tcf1_err_callback();
    1c7e:	19 95       	eicall
	}
}
    1c80:	ff 91       	pop	r31
    1c82:	ef 91       	pop	r30
    1c84:	bf 91       	pop	r27
    1c86:	af 91       	pop	r26
    1c88:	9f 91       	pop	r25
    1c8a:	8f 91       	pop	r24
    1c8c:	7f 91       	pop	r23
    1c8e:	6f 91       	pop	r22
    1c90:	5f 91       	pop	r21
    1c92:	4f 91       	pop	r20
    1c94:	3f 91       	pop	r19
    1c96:	2f 91       	pop	r18
    1c98:	0f 90       	pop	r0
    1c9a:	0b be       	out	0x3b, r0	; 59
    1c9c:	0f 90       	pop	r0
    1c9e:	09 be       	out	0x39, r0	; 57
    1ca0:	0f 90       	pop	r0
    1ca2:	08 be       	out	0x38, r0	; 56
    1ca4:	0f 90       	pop	r0
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	0f 90       	pop	r0
    1caa:	1f 90       	pop	r1
    1cac:	18 95       	reti

00001cae <__vector_116>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCF1_CCA_vect)
{
    1cae:	1f 92       	push	r1
    1cb0:	0f 92       	push	r0
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	0f 92       	push	r0
    1cb6:	11 24       	eor	r1, r1
    1cb8:	08 b6       	in	r0, 0x38	; 56
    1cba:	0f 92       	push	r0
    1cbc:	18 be       	out	0x38, r1	; 56
    1cbe:	09 b6       	in	r0, 0x39	; 57
    1cc0:	0f 92       	push	r0
    1cc2:	19 be       	out	0x39, r1	; 57
    1cc4:	0b b6       	in	r0, 0x3b	; 59
    1cc6:	0f 92       	push	r0
    1cc8:	1b be       	out	0x3b, r1	; 59
    1cca:	2f 93       	push	r18
    1ccc:	3f 93       	push	r19
    1cce:	4f 93       	push	r20
    1cd0:	5f 93       	push	r21
    1cd2:	6f 93       	push	r22
    1cd4:	7f 93       	push	r23
    1cd6:	8f 93       	push	r24
    1cd8:	9f 93       	push	r25
    1cda:	af 93       	push	r26
    1cdc:	bf 93       	push	r27
    1cde:	ef 93       	push	r30
    1ce0:	ff 93       	push	r31
	if (tc_tcf1_cca_callback) {
    1ce2:	e0 91 91 20 	lds	r30, 0x2091	; 0x802091 <tc_tcf1_cca_callback>
    1ce6:	f0 91 92 20 	lds	r31, 0x2092	; 0x802092 <tc_tcf1_cca_callback+0x1>
    1cea:	30 97       	sbiw	r30, 0x00	; 0
    1cec:	09 f0       	breq	.+2      	; 0x1cf0 <__vector_116+0x42>
		tc_tcf1_cca_callback();
    1cee:	19 95       	eicall
	}
}
    1cf0:	ff 91       	pop	r31
    1cf2:	ef 91       	pop	r30
    1cf4:	bf 91       	pop	r27
    1cf6:	af 91       	pop	r26
    1cf8:	9f 91       	pop	r25
    1cfa:	8f 91       	pop	r24
    1cfc:	7f 91       	pop	r23
    1cfe:	6f 91       	pop	r22
    1d00:	5f 91       	pop	r21
    1d02:	4f 91       	pop	r20
    1d04:	3f 91       	pop	r19
    1d06:	2f 91       	pop	r18
    1d08:	0f 90       	pop	r0
    1d0a:	0b be       	out	0x3b, r0	; 59
    1d0c:	0f 90       	pop	r0
    1d0e:	09 be       	out	0x39, r0	; 57
    1d10:	0f 90       	pop	r0
    1d12:	08 be       	out	0x38, r0	; 56
    1d14:	0f 90       	pop	r0
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	0f 90       	pop	r0
    1d1a:	1f 90       	pop	r1
    1d1c:	18 95       	reti

00001d1e <__vector_117>:
 *
 * This function will handle interrupt on Timer Counter F1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCF1_CCB_vect)
{
    1d1e:	1f 92       	push	r1
    1d20:	0f 92       	push	r0
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	0f 92       	push	r0
    1d26:	11 24       	eor	r1, r1
    1d28:	08 b6       	in	r0, 0x38	; 56
    1d2a:	0f 92       	push	r0
    1d2c:	18 be       	out	0x38, r1	; 56
    1d2e:	09 b6       	in	r0, 0x39	; 57
    1d30:	0f 92       	push	r0
    1d32:	19 be       	out	0x39, r1	; 57
    1d34:	0b b6       	in	r0, 0x3b	; 59
    1d36:	0f 92       	push	r0
    1d38:	1b be       	out	0x3b, r1	; 59
    1d3a:	2f 93       	push	r18
    1d3c:	3f 93       	push	r19
    1d3e:	4f 93       	push	r20
    1d40:	5f 93       	push	r21
    1d42:	6f 93       	push	r22
    1d44:	7f 93       	push	r23
    1d46:	8f 93       	push	r24
    1d48:	9f 93       	push	r25
    1d4a:	af 93       	push	r26
    1d4c:	bf 93       	push	r27
    1d4e:	ef 93       	push	r30
    1d50:	ff 93       	push	r31
	if (tc_tcf1_ccb_callback) {
    1d52:	e0 91 8f 20 	lds	r30, 0x208F	; 0x80208f <tc_tcf1_ccb_callback>
    1d56:	f0 91 90 20 	lds	r31, 0x2090	; 0x802090 <tc_tcf1_ccb_callback+0x1>
    1d5a:	30 97       	sbiw	r30, 0x00	; 0
    1d5c:	09 f0       	breq	.+2      	; 0x1d60 <__vector_117+0x42>
		tc_tcf1_ccb_callback();
    1d5e:	19 95       	eicall
	}
}
    1d60:	ff 91       	pop	r31
    1d62:	ef 91       	pop	r30
    1d64:	bf 91       	pop	r27
    1d66:	af 91       	pop	r26
    1d68:	9f 91       	pop	r25
    1d6a:	8f 91       	pop	r24
    1d6c:	7f 91       	pop	r23
    1d6e:	6f 91       	pop	r22
    1d70:	5f 91       	pop	r21
    1d72:	4f 91       	pop	r20
    1d74:	3f 91       	pop	r19
    1d76:	2f 91       	pop	r18
    1d78:	0f 90       	pop	r0
    1d7a:	0b be       	out	0x3b, r0	; 59
    1d7c:	0f 90       	pop	r0
    1d7e:	09 be       	out	0x39, r0	; 57
    1d80:	0f 90       	pop	r0
    1d82:	08 be       	out	0x38, r0	; 56
    1d84:	0f 90       	pop	r0
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	0f 90       	pop	r0
    1d8a:	1f 90       	pop	r1
    1d8c:	18 95       	reti

00001d8e <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1d8e:	fc 01       	movw	r30, r24
    1d90:	91 81       	ldd	r25, Z+1	; 0x01
    1d92:	95 ff       	sbrs	r25, 5
    1d94:	fd cf       	rjmp	.-6      	; 0x1d90 <usart_putchar+0x2>
    1d96:	60 83       	st	Z, r22
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	08 95       	ret

00001d9e <usart_getchar>:
    1d9e:	fc 01       	movw	r30, r24
    1da0:	91 81       	ldd	r25, Z+1	; 0x01
    1da2:	99 23       	and	r25, r25
    1da4:	ec f7       	brge	.-6      	; 0x1da0 <usart_getchar+0x2>
    1da6:	80 81       	ld	r24, Z
    1da8:	08 95       	ret

00001daa <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1daa:	4f 92       	push	r4
    1dac:	5f 92       	push	r5
    1dae:	6f 92       	push	r6
    1db0:	7f 92       	push	r7
    1db2:	8f 92       	push	r8
    1db4:	9f 92       	push	r9
    1db6:	af 92       	push	r10
    1db8:	bf 92       	push	r11
    1dba:	ef 92       	push	r14
    1dbc:	ff 92       	push	r15
    1dbe:	0f 93       	push	r16
    1dc0:	1f 93       	push	r17
    1dc2:	cf 93       	push	r28
    1dc4:	7c 01       	movw	r14, r24
    1dc6:	4a 01       	movw	r8, r20
    1dc8:	5b 01       	movw	r10, r22
    1dca:	28 01       	movw	r4, r16
    1dcc:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1dce:	fc 01       	movw	r30, r24
    1dd0:	84 81       	ldd	r24, Z+4	; 0x04
    1dd2:	82 ff       	sbrs	r24, 2
    1dd4:	16 c0       	rjmp	.+44     	; 0x1e02 <usart_set_baudrate+0x58>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    1dd6:	d9 01       	movw	r26, r18
    1dd8:	c8 01       	movw	r24, r16
    1dda:	68 94       	set
    1ddc:	12 f8       	bld	r1, 2
    1dde:	b6 95       	lsr	r27
    1de0:	a7 95       	ror	r26
    1de2:	97 95       	ror	r25
    1de4:	87 95       	ror	r24
    1de6:	16 94       	lsr	r1
    1de8:	d1 f7       	brne	.-12     	; 0x1dde <usart_set_baudrate+0x34>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1dea:	b9 01       	movw	r22, r18
    1dec:	a8 01       	movw	r20, r16
    1dee:	03 2e       	mov	r0, r19
    1df0:	36 e1       	ldi	r19, 0x16	; 22
    1df2:	76 95       	lsr	r23
    1df4:	67 95       	ror	r22
    1df6:	57 95       	ror	r21
    1df8:	47 95       	ror	r20
    1dfa:	3a 95       	dec	r19
    1dfc:	d1 f7       	brne	.-12     	; 0x1df2 <usart_set_baudrate+0x48>
    1dfe:	30 2d       	mov	r19, r0
    1e00:	15 c0       	rjmp	.+42     	; 0x1e2c <usart_set_baudrate+0x82>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
    1e02:	d9 01       	movw	r26, r18
    1e04:	c8 01       	movw	r24, r16
    1e06:	68 94       	set
    1e08:	13 f8       	bld	r1, 3
    1e0a:	b6 95       	lsr	r27
    1e0c:	a7 95       	ror	r26
    1e0e:	97 95       	ror	r25
    1e10:	87 95       	ror	r24
    1e12:	16 94       	lsr	r1
    1e14:	d1 f7       	brne	.-12     	; 0x1e0a <usart_set_baudrate+0x60>
		min_rate /= 2;
    1e16:	b9 01       	movw	r22, r18
    1e18:	a8 01       	movw	r20, r16
    1e1a:	03 2e       	mov	r0, r19
    1e1c:	37 e1       	ldi	r19, 0x17	; 23
    1e1e:	76 95       	lsr	r23
    1e20:	67 95       	ror	r22
    1e22:	57 95       	ror	r21
    1e24:	47 95       	ror	r20
    1e26:	3a 95       	dec	r19
    1e28:	d1 f7       	brne	.-12     	; 0x1e1e <usart_set_baudrate+0x74>
    1e2a:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    1e2c:	88 15       	cp	r24, r8
    1e2e:	99 05       	cpc	r25, r9
    1e30:	aa 05       	cpc	r26, r10
    1e32:	bb 05       	cpc	r27, r11
    1e34:	08 f4       	brcc	.+2      	; 0x1e38 <usart_set_baudrate+0x8e>
    1e36:	a6 c0       	rjmp	.+332    	; 0x1f84 <usart_set_baudrate+0x1da>
    1e38:	84 16       	cp	r8, r20
    1e3a:	95 06       	cpc	r9, r21
    1e3c:	a6 06       	cpc	r10, r22
    1e3e:	b7 06       	cpc	r11, r23
    1e40:	08 f4       	brcc	.+2      	; 0x1e44 <usart_set_baudrate+0x9a>
    1e42:	a2 c0       	rjmp	.+324    	; 0x1f88 <usart_set_baudrate+0x1de>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    1e44:	f7 01       	movw	r30, r14
    1e46:	84 81       	ldd	r24, Z+4	; 0x04
    1e48:	82 fd       	sbrc	r24, 2
    1e4a:	04 c0       	rjmp	.+8      	; 0x1e54 <usart_set_baudrate+0xaa>
		baud *= 2;
    1e4c:	88 0c       	add	r8, r8
    1e4e:	99 1c       	adc	r9, r9
    1e50:	aa 1c       	adc	r10, r10
    1e52:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    1e54:	c3 01       	movw	r24, r6
    1e56:	b2 01       	movw	r22, r4
    1e58:	a5 01       	movw	r20, r10
    1e5a:	94 01       	movw	r18, r8
    1e5c:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    1e60:	2f 3f       	cpi	r18, 0xFF	; 255
    1e62:	31 05       	cpc	r19, r1
    1e64:	41 05       	cpc	r20, r1
    1e66:	51 05       	cpc	r21, r1
    1e68:	08 f4       	brcc	.+2      	; 0x1e6c <usart_set_baudrate+0xc2>
    1e6a:	90 c0       	rjmp	.+288    	; 0x1f8c <usart_set_baudrate+0x1e2>
    1e6c:	8f ef       	ldi	r24, 0xFF	; 255
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	a0 e0       	ldi	r26, 0x00	; 0
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	c9 ef       	ldi	r28, 0xF9	; 249
    1e76:	05 c0       	rjmp	.+10     	; 0x1e82 <usart_set_baudrate+0xd8>
    1e78:	28 17       	cp	r18, r24
    1e7a:	39 07       	cpc	r19, r25
    1e7c:	4a 07       	cpc	r20, r26
    1e7e:	5b 07       	cpc	r21, r27
    1e80:	58 f0       	brcs	.+22     	; 0x1e98 <usart_set_baudrate+0xee>
			break;
		}

		limit <<= 1;
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	aa 1f       	adc	r26, r26
    1e88:	bb 1f       	adc	r27, r27

		if (exp < -3) {
    1e8a:	cd 3f       	cpi	r28, 0xFD	; 253
    1e8c:	0c f4       	brge	.+2      	; 0x1e90 <usart_set_baudrate+0xe6>
			limit |= 1;
    1e8e:	81 60       	ori	r24, 0x01	; 1
    1e90:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1e92:	c7 30       	cpi	r28, 0x07	; 7
    1e94:	89 f7       	brne	.-30     	; 0x1e78 <usart_set_baudrate+0xce>
    1e96:	4f c0       	rjmp	.+158    	; 0x1f36 <usart_set_baudrate+0x18c>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    1e98:	cc 23       	and	r28, r28
    1e9a:	0c f0       	brlt	.+2      	; 0x1e9e <usart_set_baudrate+0xf4>
    1e9c:	4c c0       	rjmp	.+152    	; 0x1f36 <usart_set_baudrate+0x18c>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1e9e:	d5 01       	movw	r26, r10
    1ea0:	c4 01       	movw	r24, r8
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	aa 1f       	adc	r26, r26
    1ea8:	bb 1f       	adc	r27, r27
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	aa 1f       	adc	r26, r26
    1eb0:	bb 1f       	adc	r27, r27
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	aa 1f       	adc	r26, r26
    1eb8:	bb 1f       	adc	r27, r27
    1eba:	48 1a       	sub	r4, r24
    1ebc:	59 0a       	sbc	r5, r25
    1ebe:	6a 0a       	sbc	r6, r26
    1ec0:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1ec2:	ce 3f       	cpi	r28, 0xFE	; 254
    1ec4:	f4 f4       	brge	.+60     	; 0x1f02 <usart_set_baudrate+0x158>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    1ec6:	8d ef       	ldi	r24, 0xFD	; 253
    1ec8:	9f ef       	ldi	r25, 0xFF	; 255
    1eca:	8c 1b       	sub	r24, r28
    1ecc:	91 09       	sbc	r25, r1
    1ece:	c7 fd       	sbrc	r28, 7
    1ed0:	93 95       	inc	r25
    1ed2:	04 c0       	rjmp	.+8      	; 0x1edc <usart_set_baudrate+0x132>
    1ed4:	44 0c       	add	r4, r4
    1ed6:	55 1c       	adc	r5, r5
    1ed8:	66 1c       	adc	r6, r6
    1eda:	77 1c       	adc	r7, r7
    1edc:	8a 95       	dec	r24
    1ede:	d2 f7       	brpl	.-12     	; 0x1ed4 <usart_set_baudrate+0x12a>
    1ee0:	d5 01       	movw	r26, r10
    1ee2:	c4 01       	movw	r24, r8
    1ee4:	b6 95       	lsr	r27
    1ee6:	a7 95       	ror	r26
    1ee8:	97 95       	ror	r25
    1eea:	87 95       	ror	r24
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	64 0d       	add	r22, r4
    1ef2:	75 1d       	adc	r23, r5
    1ef4:	86 1d       	adc	r24, r6
    1ef6:	97 1d       	adc	r25, r7
    1ef8:	a5 01       	movw	r20, r10
    1efa:	94 01       	movw	r18, r8
    1efc:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__udivmodsi4>
    1f00:	37 c0       	rjmp	.+110    	; 0x1f70 <usart_set_baudrate+0x1c6>
		} else {
			baud <<= exp + 3;
    1f02:	83 e0       	ldi	r24, 0x03	; 3
    1f04:	8c 0f       	add	r24, r28
    1f06:	a5 01       	movw	r20, r10
    1f08:	94 01       	movw	r18, r8
    1f0a:	04 c0       	rjmp	.+8      	; 0x1f14 <usart_set_baudrate+0x16a>
    1f0c:	22 0f       	add	r18, r18
    1f0e:	33 1f       	adc	r19, r19
    1f10:	44 1f       	adc	r20, r20
    1f12:	55 1f       	adc	r21, r21
    1f14:	8a 95       	dec	r24
    1f16:	d2 f7       	brpl	.-12     	; 0x1f0c <usart_set_baudrate+0x162>
			div = (cpu_hz + baud / 2) / baud;
    1f18:	da 01       	movw	r26, r20
    1f1a:	c9 01       	movw	r24, r18
    1f1c:	b6 95       	lsr	r27
    1f1e:	a7 95       	ror	r26
    1f20:	97 95       	ror	r25
    1f22:	87 95       	ror	r24
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	64 0d       	add	r22, r4
    1f2a:	75 1d       	adc	r23, r5
    1f2c:	86 1d       	adc	r24, r6
    1f2e:	97 1d       	adc	r25, r7
    1f30:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__udivmodsi4>
    1f34:	1d c0       	rjmp	.+58     	; 0x1f70 <usart_set_baudrate+0x1c6>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    1f36:	83 e0       	ldi	r24, 0x03	; 3
    1f38:	8c 0f       	add	r24, r28
    1f3a:	a5 01       	movw	r20, r10
    1f3c:	94 01       	movw	r18, r8
    1f3e:	04 c0       	rjmp	.+8      	; 0x1f48 <usart_set_baudrate+0x19e>
    1f40:	22 0f       	add	r18, r18
    1f42:	33 1f       	adc	r19, r19
    1f44:	44 1f       	adc	r20, r20
    1f46:	55 1f       	adc	r21, r21
    1f48:	8a 95       	dec	r24
    1f4a:	d2 f7       	brpl	.-12     	; 0x1f40 <usart_set_baudrate+0x196>
		div = (cpu_hz + baud / 2) / baud - 1;
    1f4c:	da 01       	movw	r26, r20
    1f4e:	c9 01       	movw	r24, r18
    1f50:	b6 95       	lsr	r27
    1f52:	a7 95       	ror	r26
    1f54:	97 95       	ror	r25
    1f56:	87 95       	ror	r24
    1f58:	bc 01       	movw	r22, r24
    1f5a:	cd 01       	movw	r24, r26
    1f5c:	64 0d       	add	r22, r4
    1f5e:	75 1d       	adc	r23, r5
    1f60:	86 1d       	adc	r24, r6
    1f62:	97 1d       	adc	r25, r7
    1f64:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__udivmodsi4>
    1f68:	21 50       	subi	r18, 0x01	; 1
    1f6a:	31 09       	sbc	r19, r1
    1f6c:	41 09       	sbc	r20, r1
    1f6e:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    1f70:	83 2f       	mov	r24, r19
    1f72:	8f 70       	andi	r24, 0x0F	; 15
    1f74:	c2 95       	swap	r28
    1f76:	c0 7f       	andi	r28, 0xF0	; 240
    1f78:	c8 2b       	or	r28, r24
    1f7a:	f7 01       	movw	r30, r14
    1f7c:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1f7e:	26 83       	std	Z+6, r18	; 0x06

	return true;
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	18 c0       	rjmp	.+48     	; 0x1fb4 <usart_set_baudrate+0x20a>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	16 c0       	rjmp	.+44     	; 0x1fb4 <usart_set_baudrate+0x20a>
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	14 c0       	rjmp	.+40     	; 0x1fb4 <usart_set_baudrate+0x20a>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1f8c:	d5 01       	movw	r26, r10
    1f8e:	c4 01       	movw	r24, r8
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	aa 1f       	adc	r26, r26
    1f96:	bb 1f       	adc	r27, r27
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	aa 1f       	adc	r26, r26
    1f9e:	bb 1f       	adc	r27, r27
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	aa 1f       	adc	r26, r26
    1fa6:	bb 1f       	adc	r27, r27
    1fa8:	48 1a       	sub	r4, r24
    1faa:	59 0a       	sbc	r5, r25
    1fac:	6a 0a       	sbc	r6, r26
    1fae:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1fb0:	c9 ef       	ldi	r28, 0xF9	; 249
    1fb2:	89 cf       	rjmp	.-238    	; 0x1ec6 <usart_set_baudrate+0x11c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    1fb4:	cf 91       	pop	r28
    1fb6:	1f 91       	pop	r17
    1fb8:	0f 91       	pop	r16
    1fba:	ff 90       	pop	r15
    1fbc:	ef 90       	pop	r14
    1fbe:	bf 90       	pop	r11
    1fc0:	af 90       	pop	r10
    1fc2:	9f 90       	pop	r9
    1fc4:	8f 90       	pop	r8
    1fc6:	7f 90       	pop	r7
    1fc8:	6f 90       	pop	r6
    1fca:	5f 90       	pop	r5
    1fcc:	4f 90       	pop	r4
    1fce:	08 95       	ret

00001fd0 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
    1fd0:	0f 93       	push	r16
    1fd2:	1f 93       	push	r17
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
    1fd8:	ec 01       	movw	r28, r24
    1fda:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <usart_init_rs232+0x12>
    1fe0:	5d c1       	rjmp	.+698    	; 0x229c <usart_init_rs232+0x2cc>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    1fe2:	80 3c       	cpi	r24, 0xC0	; 192
    1fe4:	91 05       	cpc	r25, r1
    1fe6:	29 f4       	brne	.+10     	; 0x1ff2 <usart_init_rs232+0x22>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    1fe8:	60 e1       	ldi	r22, 0x10	; 16
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    1ff0:	55 c1       	rjmp	.+682    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    1ff2:	c0 34       	cpi	r28, 0x40	; 64
    1ff4:	84 e0       	ldi	r24, 0x04	; 4
    1ff6:	d8 07       	cpc	r29, r24
    1ff8:	29 f4       	brne	.+10     	; 0x2004 <usart_init_rs232+0x34>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    1ffa:	68 e0       	ldi	r22, 0x08	; 8
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2002:	4c c1       	rjmp	.+664    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    2004:	c1 15       	cp	r28, r1
    2006:	e4 e0       	ldi	r30, 0x04	; 4
    2008:	de 07       	cpc	r29, r30
    200a:	29 f4       	brne	.+10     	; 0x2016 <usart_init_rs232+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    200c:	64 e0       	ldi	r22, 0x04	; 4
    200e:	80 e0       	ldi	r24, 0x00	; 0
    2010:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2014:	43 c1       	rjmp	.+646    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    2016:	c0 38       	cpi	r28, 0x80	; 128
    2018:	f1 e0       	ldi	r31, 0x01	; 1
    201a:	df 07       	cpc	r29, r31
    201c:	29 f4       	brne	.+10     	; 0x2028 <usart_init_rs232+0x58>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    201e:	62 e0       	ldi	r22, 0x02	; 2
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2026:	3a c1       	rjmp	.+628    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    2028:	c1 15       	cp	r28, r1
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	d8 07       	cpc	r29, r24
    202e:	29 f4       	brne	.+10     	; 0x203a <usart_init_rs232+0x6a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    2030:	61 e0       	ldi	r22, 0x01	; 1
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2038:	31 c1       	rjmp	.+610    	; 0x229c <usart_init_rs232+0x2cc>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    203a:	c0 38       	cpi	r28, 0x80	; 128
    203c:	e3 e0       	ldi	r30, 0x03	; 3
    203e:	de 07       	cpc	r29, r30
    2040:	29 f4       	brne	.+10     	; 0x204c <usart_init_rs232+0x7c>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    2042:	61 e0       	ldi	r22, 0x01	; 1
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    204a:	28 c1       	rjmp	.+592    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    204c:	c0 39       	cpi	r28, 0x90	; 144
    204e:	f3 e0       	ldi	r31, 0x03	; 3
    2050:	df 07       	cpc	r29, r31
    2052:	29 f4       	brne	.+10     	; 0x205e <usart_init_rs232+0x8e>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    2054:	61 e0       	ldi	r22, 0x01	; 1
    2056:	82 e0       	ldi	r24, 0x02	; 2
    2058:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    205c:	1f c1       	rjmp	.+574    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    205e:	c1 15       	cp	r28, r1
    2060:	82 e0       	ldi	r24, 0x02	; 2
    2062:	d8 07       	cpc	r29, r24
    2064:	29 f4       	brne	.+10     	; 0x2070 <usart_init_rs232+0xa0>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    2066:	62 e0       	ldi	r22, 0x02	; 2
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    206e:	16 c1       	rjmp	.+556    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    2070:	c0 34       	cpi	r28, 0x40	; 64
    2072:	e2 e0       	ldi	r30, 0x02	; 2
    2074:	de 07       	cpc	r29, r30
    2076:	29 f4       	brne	.+10     	; 0x2082 <usart_init_rs232+0xb2>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    2078:	62 e0       	ldi	r22, 0x02	; 2
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2080:	0d c1       	rjmp	.+538    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    2082:	c1 15       	cp	r28, r1
    2084:	f3 e0       	ldi	r31, 0x03	; 3
    2086:	df 07       	cpc	r29, r31
    2088:	29 f4       	brne	.+10     	; 0x2094 <usart_init_rs232+0xc4>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    208a:	64 e0       	ldi	r22, 0x04	; 4
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2092:	04 c1       	rjmp	.+520    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    2094:	c0 32       	cpi	r28, 0x20	; 32
    2096:	83 e0       	ldi	r24, 0x03	; 3
    2098:	d8 07       	cpc	r29, r24
    209a:	29 f4       	brne	.+10     	; 0x20a6 <usart_init_rs232+0xd6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    209c:	64 e0       	ldi	r22, 0x04	; 4
    209e:	82 e0       	ldi	r24, 0x02	; 2
    20a0:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    20a4:	fb c0       	rjmp	.+502    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    20a6:	c1 15       	cp	r28, r1
    20a8:	e8 e0       	ldi	r30, 0x08	; 8
    20aa:	de 07       	cpc	r29, r30
    20ac:	29 f4       	brne	.+10     	; 0x20b8 <usart_init_rs232+0xe8>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    20ae:	61 e0       	ldi	r22, 0x01	; 1
    20b0:	83 e0       	ldi	r24, 0x03	; 3
    20b2:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    20b6:	f2 c0       	rjmp	.+484    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    20b8:	c1 15       	cp	r28, r1
    20ba:	f9 e0       	ldi	r31, 0x09	; 9
    20bc:	df 07       	cpc	r29, r31
    20be:	29 f4       	brne	.+10     	; 0x20ca <usart_init_rs232+0xfa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    20c0:	61 e0       	ldi	r22, 0x01	; 1
    20c2:	84 e0       	ldi	r24, 0x04	; 4
    20c4:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    20c8:	e9 c0       	rjmp	.+466    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    20ca:	c1 15       	cp	r28, r1
    20cc:	8a e0       	ldi	r24, 0x0A	; 10
    20ce:	d8 07       	cpc	r29, r24
    20d0:	29 f4       	brne	.+10     	; 0x20dc <usart_init_rs232+0x10c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    20d2:	61 e0       	ldi	r22, 0x01	; 1
    20d4:	85 e0       	ldi	r24, 0x05	; 5
    20d6:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    20da:	e0 c0       	rjmp	.+448    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    20dc:	c1 15       	cp	r28, r1
    20de:	eb e0       	ldi	r30, 0x0B	; 11
    20e0:	de 07       	cpc	r29, r30
    20e2:	29 f4       	brne	.+10     	; 0x20ee <usart_init_rs232+0x11e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    20e4:	61 e0       	ldi	r22, 0x01	; 1
    20e6:	86 e0       	ldi	r24, 0x06	; 6
    20e8:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    20ec:	d7 c0       	rjmp	.+430    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    20ee:	c0 34       	cpi	r28, 0x40	; 64
    20f0:	f8 e0       	ldi	r31, 0x08	; 8
    20f2:	df 07       	cpc	r29, r31
    20f4:	29 f4       	brne	.+10     	; 0x2100 <usart_init_rs232+0x130>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    20f6:	62 e0       	ldi	r22, 0x02	; 2
    20f8:	83 e0       	ldi	r24, 0x03	; 3
    20fa:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    20fe:	ce c0       	rjmp	.+412    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    2100:	c0 34       	cpi	r28, 0x40	; 64
    2102:	89 e0       	ldi	r24, 0x09	; 9
    2104:	d8 07       	cpc	r29, r24
    2106:	29 f4       	brne	.+10     	; 0x2112 <usart_init_rs232+0x142>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    2108:	62 e0       	ldi	r22, 0x02	; 2
    210a:	84 e0       	ldi	r24, 0x04	; 4
    210c:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2110:	c5 c0       	rjmp	.+394    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    2112:	c0 34       	cpi	r28, 0x40	; 64
    2114:	ea e0       	ldi	r30, 0x0A	; 10
    2116:	de 07       	cpc	r29, r30
    2118:	29 f4       	brne	.+10     	; 0x2124 <usart_init_rs232+0x154>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    211a:	62 e0       	ldi	r22, 0x02	; 2
    211c:	85 e0       	ldi	r24, 0x05	; 5
    211e:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2122:	bc c0       	rjmp	.+376    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    2124:	c0 34       	cpi	r28, 0x40	; 64
    2126:	fb e0       	ldi	r31, 0x0B	; 11
    2128:	df 07       	cpc	r29, r31
    212a:	29 f4       	brne	.+10     	; 0x2136 <usart_init_rs232+0x166>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    212c:	62 e0       	ldi	r22, 0x02	; 2
    212e:	86 e0       	ldi	r24, 0x06	; 6
    2130:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2134:	b3 c0       	rjmp	.+358    	; 0x229c <usart_init_rs232+0x2cc>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    2136:	c0 39       	cpi	r28, 0x90	; 144
    2138:	88 e0       	ldi	r24, 0x08	; 8
    213a:	d8 07       	cpc	r29, r24
    213c:	29 f4       	brne	.+10     	; 0x2148 <usart_init_rs232+0x178>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    213e:	64 e0       	ldi	r22, 0x04	; 4
    2140:	83 e0       	ldi	r24, 0x03	; 3
    2142:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2146:	aa c0       	rjmp	.+340    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    2148:	c0 39       	cpi	r28, 0x90	; 144
    214a:	e9 e0       	ldi	r30, 0x09	; 9
    214c:	de 07       	cpc	r29, r30
    214e:	29 f4       	brne	.+10     	; 0x215a <usart_init_rs232+0x18a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    2150:	64 e0       	ldi	r22, 0x04	; 4
    2152:	84 e0       	ldi	r24, 0x04	; 4
    2154:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2158:	a1 c0       	rjmp	.+322    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    215a:	c0 39       	cpi	r28, 0x90	; 144
    215c:	fa e0       	ldi	r31, 0x0A	; 10
    215e:	df 07       	cpc	r29, r31
    2160:	29 f4       	brne	.+10     	; 0x216c <usart_init_rs232+0x19c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    2162:	64 e0       	ldi	r22, 0x04	; 4
    2164:	85 e0       	ldi	r24, 0x05	; 5
    2166:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    216a:	98 c0       	rjmp	.+304    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    216c:	c0 39       	cpi	r28, 0x90	; 144
    216e:	8b e0       	ldi	r24, 0x0B	; 11
    2170:	d8 07       	cpc	r29, r24
    2172:	29 f4       	brne	.+10     	; 0x217e <usart_init_rs232+0x1ae>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    2174:	64 e0       	ldi	r22, 0x04	; 4
    2176:	86 e0       	ldi	r24, 0x06	; 6
    2178:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    217c:	8f c0       	rjmp	.+286    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    217e:	c0 3c       	cpi	r28, 0xC0	; 192
    2180:	e8 e0       	ldi	r30, 0x08	; 8
    2182:	de 07       	cpc	r29, r30
    2184:	29 f4       	brne	.+10     	; 0x2190 <usart_init_rs232+0x1c0>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    2186:	68 e0       	ldi	r22, 0x08	; 8
    2188:	83 e0       	ldi	r24, 0x03	; 3
    218a:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    218e:	86 c0       	rjmp	.+268    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    2190:	c0 3c       	cpi	r28, 0xC0	; 192
    2192:	f9 e0       	ldi	r31, 0x09	; 9
    2194:	df 07       	cpc	r29, r31
    2196:	29 f4       	brne	.+10     	; 0x21a2 <usart_init_rs232+0x1d2>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    2198:	68 e0       	ldi	r22, 0x08	; 8
    219a:	84 e0       	ldi	r24, 0x04	; 4
    219c:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    21a0:	7d c0       	rjmp	.+250    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    21a2:	c0 3c       	cpi	r28, 0xC0	; 192
    21a4:	8a e0       	ldi	r24, 0x0A	; 10
    21a6:	d8 07       	cpc	r29, r24
    21a8:	29 f4       	brne	.+10     	; 0x21b4 <usart_init_rs232+0x1e4>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    21aa:	68 e0       	ldi	r22, 0x08	; 8
    21ac:	85 e0       	ldi	r24, 0x05	; 5
    21ae:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    21b2:	74 c0       	rjmp	.+232    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    21b4:	c0 3c       	cpi	r28, 0xC0	; 192
    21b6:	eb e0       	ldi	r30, 0x0B	; 11
    21b8:	de 07       	cpc	r29, r30
    21ba:	29 f4       	brne	.+10     	; 0x21c6 <usart_init_rs232+0x1f6>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    21bc:	68 e0       	ldi	r22, 0x08	; 8
    21be:	86 e0       	ldi	r24, 0x06	; 6
    21c0:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    21c4:	6b c0       	rjmp	.+214    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    21c6:	c0 3a       	cpi	r28, 0xA0	; 160
    21c8:	f8 e0       	ldi	r31, 0x08	; 8
    21ca:	df 07       	cpc	r29, r31
    21cc:	29 f4       	brne	.+10     	; 0x21d8 <usart_init_rs232+0x208>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    21ce:	60 e1       	ldi	r22, 0x10	; 16
    21d0:	83 e0       	ldi	r24, 0x03	; 3
    21d2:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    21d6:	62 c0       	rjmp	.+196    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    21d8:	c0 3a       	cpi	r28, 0xA0	; 160
    21da:	89 e0       	ldi	r24, 0x09	; 9
    21dc:	d8 07       	cpc	r29, r24
    21de:	29 f4       	brne	.+10     	; 0x21ea <usart_init_rs232+0x21a>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    21e0:	60 e1       	ldi	r22, 0x10	; 16
    21e2:	84 e0       	ldi	r24, 0x04	; 4
    21e4:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    21e8:	59 c0       	rjmp	.+178    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    21ea:	c0 3a       	cpi	r28, 0xA0	; 160
    21ec:	ea e0       	ldi	r30, 0x0A	; 10
    21ee:	de 07       	cpc	r29, r30
    21f0:	29 f4       	brne	.+10     	; 0x21fc <usart_init_rs232+0x22c>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    21f2:	60 e1       	ldi	r22, 0x10	; 16
    21f4:	85 e0       	ldi	r24, 0x05	; 5
    21f6:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    21fa:	50 c0       	rjmp	.+160    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    21fc:	c0 3a       	cpi	r28, 0xA0	; 160
    21fe:	fb e0       	ldi	r31, 0x0B	; 11
    2200:	df 07       	cpc	r29, r31
    2202:	29 f4       	brne	.+10     	; 0x220e <usart_init_rs232+0x23e>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    2204:	60 e1       	ldi	r22, 0x10	; 16
    2206:	86 e0       	ldi	r24, 0x06	; 6
    2208:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    220c:	47 c0       	rjmp	.+142    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    220e:	c0 3b       	cpi	r28, 0xB0	; 176
    2210:	88 e0       	ldi	r24, 0x08	; 8
    2212:	d8 07       	cpc	r29, r24
    2214:	29 f4       	brne	.+10     	; 0x2220 <usart_init_rs232+0x250>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    2216:	60 e2       	ldi	r22, 0x20	; 32
    2218:	83 e0       	ldi	r24, 0x03	; 3
    221a:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    221e:	3e c0       	rjmp	.+124    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    2220:	c0 3b       	cpi	r28, 0xB0	; 176
    2222:	e9 e0       	ldi	r30, 0x09	; 9
    2224:	de 07       	cpc	r29, r30
    2226:	29 f4       	brne	.+10     	; 0x2232 <usart_init_rs232+0x262>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    2228:	60 e2       	ldi	r22, 0x20	; 32
    222a:	84 e0       	ldi	r24, 0x04	; 4
    222c:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2230:	35 c0       	rjmp	.+106    	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    2232:	c0 3b       	cpi	r28, 0xB0	; 176
    2234:	fa e0       	ldi	r31, 0x0A	; 10
    2236:	df 07       	cpc	r29, r31
    2238:	29 f4       	brne	.+10     	; 0x2244 <usart_init_rs232+0x274>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    223a:	60 e2       	ldi	r22, 0x20	; 32
    223c:	85 e0       	ldi	r24, 0x05	; 5
    223e:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2242:	2c c0       	rjmp	.+88     	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    2244:	c0 3b       	cpi	r28, 0xB0	; 176
    2246:	8b e0       	ldi	r24, 0x0B	; 11
    2248:	d8 07       	cpc	r29, r24
    224a:	29 f4       	brne	.+10     	; 0x2256 <usart_init_rs232+0x286>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    224c:	60 e2       	ldi	r22, 0x20	; 32
    224e:	86 e0       	ldi	r24, 0x06	; 6
    2250:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2254:	23 c0       	rjmp	.+70     	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    2256:	c0 38       	cpi	r28, 0x80	; 128
    2258:	e4 e0       	ldi	r30, 0x04	; 4
    225a:	de 07       	cpc	r29, r30
    225c:	29 f4       	brne	.+10     	; 0x2268 <usart_init_rs232+0x298>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    225e:	60 e4       	ldi	r22, 0x40	; 64
    2260:	83 e0       	ldi	r24, 0x03	; 3
    2262:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2266:	1a c0       	rjmp	.+52     	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    2268:	c0 39       	cpi	r28, 0x90	; 144
    226a:	f4 e0       	ldi	r31, 0x04	; 4
    226c:	df 07       	cpc	r29, r31
    226e:	29 f4       	brne	.+10     	; 0x227a <usart_init_rs232+0x2aa>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    2270:	60 e4       	ldi	r22, 0x40	; 64
    2272:	84 e0       	ldi	r24, 0x04	; 4
    2274:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    2278:	11 c0       	rjmp	.+34     	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    227a:	c0 3a       	cpi	r28, 0xA0	; 160
    227c:	84 e0       	ldi	r24, 0x04	; 4
    227e:	d8 07       	cpc	r29, r24
    2280:	29 f4       	brne	.+10     	; 0x228c <usart_init_rs232+0x2bc>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    2282:	60 e4       	ldi	r22, 0x40	; 64
    2284:	85 e0       	ldi	r24, 0x05	; 5
    2286:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    228a:	08 c0       	rjmp	.+16     	; 0x229c <usart_init_rs232+0x2cc>
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    228c:	c0 3b       	cpi	r28, 0xB0	; 176
    228e:	e4 e0       	ldi	r30, 0x04	; 4
    2290:	de 07       	cpc	r29, r30
    2292:	21 f4       	brne	.+8      	; 0x229c <usart_init_rs232+0x2cc>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    2294:	60 e4       	ldi	r22, 0x40	; 64
    2296:	86 e0       	ldi	r24, 0x06	; 6
    2298:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	8f 73       	andi	r24, 0x3F	; 63
    22a0:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
    22a2:	f8 01       	movw	r30, r16
    22a4:	95 81       	ldd	r25, Z+5	; 0x05
    22a6:	84 81       	ldd	r24, Z+4	; 0x04
    22a8:	89 2b       	or	r24, r25
    22aa:	96 81       	ldd	r25, Z+6	; 0x06
    22ac:	91 11       	cpse	r25, r1
    22ae:	98 e0       	ldi	r25, 0x08	; 8
    22b0:	89 2b       	or	r24, r25
    22b2:	8d 83       	std	Y+5, r24	; 0x05
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
    22b4:	f8 01       	movw	r30, r16
    22b6:	40 81       	ld	r20, Z
    22b8:	51 81       	ldd	r21, Z+1	; 0x01
    22ba:	62 81       	ldd	r22, Z+2	; 0x02
    22bc:	73 81       	ldd	r23, Z+3	; 0x03
    22be:	00 e0       	ldi	r16, 0x00	; 0
    22c0:	18 e4       	ldi	r17, 0x48	; 72
    22c2:	28 ee       	ldi	r18, 0xE8	; 232
    22c4:	31 e0       	ldi	r19, 0x01	; 1
    22c6:	ce 01       	movw	r24, r28
    22c8:	70 dd       	rcall	.-1312   	; 0x1daa <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	98 60       	ori	r25, 0x08	; 8
    22ce:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
    22d0:	9c 81       	ldd	r25, Y+4	; 0x04
    22d2:	90 61       	ori	r25, 0x10	; 16
    22d4:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	08 95       	ret

000022e0 <Get_altitude>:
#include "thermistor.h"
#include <math.h>

extern int32_t TEMP;

float Get_altitude(uint32_t initial, uint32_t pressure, uint32_t temperature){
    22e0:	4f 92       	push	r4
    22e2:	5f 92       	push	r5
    22e4:	6f 92       	push	r6
    22e6:	7f 92       	push	r7
    22e8:	8f 92       	push	r8
    22ea:	9f 92       	push	r9
    22ec:	af 92       	push	r10
    22ee:	bf 92       	push	r11
    22f0:	cf 92       	push	r12
    22f2:	df 92       	push	r13
    22f4:	ef 92       	push	r14
    22f6:	ff 92       	push	r15
    22f8:	0f 93       	push	r16
    22fa:	1f 93       	push	r17
    22fc:	cf 93       	push	r28
    22fe:	df 93       	push	r29
    2300:	00 d0       	rcall	.+0      	; 0x2302 <Get_altitude+0x22>
    2302:	1f 92       	push	r1
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	49 01       	movw	r8, r18
    230a:	5a 01       	movw	r10, r20
    230c:	27 01       	movw	r4, r14
    230e:	38 01       	movw	r6, r16
	//printf("Initial Pressure = %lu\n", initial);
	//printf("pressure = %lu \n", pressure);
	//printf("temperature = %lu \n", temperature);
	//float altitude = (((287.058 * (((float)(TEMP)/100)+273.15)/9.8))*log((float)initial/get_pressure())*3.28);	Not this one, this one's bad
	float altitude = (pow(((initial/100)/(pressure/100)),(1/5.257))-1)*((temperature/100)+273.15)/.0065; //This is now right, just gotta use the thermistor
    2310:	0f 2e       	mov	r0, r31
    2312:	f4 e6       	ldi	r31, 0x64	; 100
    2314:	cf 2e       	mov	r12, r31
    2316:	d1 2c       	mov	r13, r1
    2318:	e1 2c       	mov	r14, r1
    231a:	f1 2c       	mov	r15, r1
    231c:	f0 2d       	mov	r31, r0
    231e:	a7 01       	movw	r20, r14
    2320:	96 01       	movw	r18, r12
    2322:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__udivmodsi4>
    2326:	29 83       	std	Y+1, r18	; 0x01
    2328:	3a 83       	std	Y+2, r19	; 0x02
    232a:	4b 83       	std	Y+3, r20	; 0x03
    232c:	5c 83       	std	Y+4, r21	; 0x04
    232e:	c5 01       	movw	r24, r10
    2330:	b4 01       	movw	r22, r8
    2332:	a7 01       	movw	r20, r14
    2334:	96 01       	movw	r18, r12
    2336:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__udivmodsi4>
    233a:	69 81       	ldd	r22, Y+1	; 0x01
    233c:	7a 81       	ldd	r23, Y+2	; 0x02
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__udivmodsi4>
    2346:	ca 01       	movw	r24, r20
    2348:	b9 01       	movw	r22, r18
    234a:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__floatunsisf>
    234e:	24 eb       	ldi	r18, 0xB4	; 180
    2350:	39 ec       	ldi	r19, 0xC9	; 201
    2352:	42 e4       	ldi	r20, 0x42	; 66
    2354:	5e e3       	ldi	r21, 0x3E	; 62
    2356:	0e 94 33 1e 	call	0x3c66	; 0x3c66 <pow>
    235a:	4b 01       	movw	r8, r22
    235c:	5c 01       	movw	r10, r24
	//printf("altitude = %f \n", (float)altitude);
	return altitude;
    235e:	c3 01       	movw	r24, r6
    2360:	b2 01       	movw	r22, r4
    2362:	a7 01       	movw	r20, r14
    2364:	96 01       	movw	r18, r12
    2366:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__udivmodsi4>
    236a:	ca 01       	movw	r24, r20
    236c:	b9 01       	movw	r22, r18
    236e:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__floatunsisf>
    2372:	23 e3       	ldi	r18, 0x33	; 51
    2374:	33 e9       	ldi	r19, 0x93	; 147
    2376:	48 e8       	ldi	r20, 0x88	; 136
    2378:	53 e4       	ldi	r21, 0x43	; 67
    237a:	0e 94 00 1c 	call	0x3800	; 0x3800 <__addsf3>
    237e:	6b 01       	movw	r12, r22
    2380:	7c 01       	movw	r14, r24
    2382:	20 e0       	ldi	r18, 0x00	; 0
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e8       	ldi	r20, 0x80	; 128
    2388:	5f e3       	ldi	r21, 0x3F	; 63
    238a:	c5 01       	movw	r24, r10
    238c:	b4 01       	movw	r22, r8
    238e:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__subsf3>
    2392:	9b 01       	movw	r18, r22
    2394:	ac 01       	movw	r20, r24
    2396:	c7 01       	movw	r24, r14
    2398:	b6 01       	movw	r22, r12
    239a:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    239e:	24 ef       	ldi	r18, 0xF4	; 244
    23a0:	3d ef       	ldi	r19, 0xFD	; 253
    23a2:	44 ed       	ldi	r20, 0xD4	; 212
    23a4:	5b e3       	ldi	r21, 0x3B	; 59
    23a6:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <__divsf3>
}
    23aa:	24 96       	adiw	r28, 0x04	; 4
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	de bf       	out	0x3e, r29	; 62
    23b0:	df 91       	pop	r29
    23b2:	cf 91       	pop	r28
    23b4:	1f 91       	pop	r17
    23b6:	0f 91       	pop	r16
    23b8:	ff 90       	pop	r15
    23ba:	ef 90       	pop	r14
    23bc:	df 90       	pop	r13
    23be:	cf 90       	pop	r12
    23c0:	bf 90       	pop	r11
    23c2:	af 90       	pop	r10
    23c4:	9f 90       	pop	r9
    23c6:	8f 90       	pop	r8
    23c8:	7f 90       	pop	r7
    23ca:	6f 90       	pop	r6
    23cc:	5f 90       	pop	r5
    23ce:	4f 90       	pop	r4
    23d0:	08 95       	ret

000023d2 <startswith>:
		{
			return i;
		}
	}
	return i+1;
}
    23d2:	dc 01       	movw	r26, r24
    23d4:	fb 01       	movw	r30, r22
    23d6:	80 81       	ld	r24, Z
    23d8:	88 23       	and	r24, r24
    23da:	01 f1       	breq	.+64     	; 0x241c <startswith+0x4a>
    23dc:	08 2e       	mov	r0, r24
    23de:	00 0c       	add	r0, r0
    23e0:	99 0b       	sbc	r25, r25
    23e2:	2c 91       	ld	r18, X
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	82 17       	cp	r24, r18
    23e8:	93 07       	cpc	r25, r19
    23ea:	d1 f4       	brne	.+52     	; 0x2420 <startswith+0x4e>
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	0b c0       	rjmp	.+22     	; 0x2406 <startswith+0x34>
    23f0:	02 2e       	mov	r0, r18
    23f2:	00 0c       	add	r0, r0
    23f4:	33 0b       	sbc	r19, r19
    23f6:	fd 01       	movw	r30, r26
    23f8:	e4 0f       	add	r30, r20
    23fa:	f5 1f       	adc	r31, r21
    23fc:	40 81       	ld	r20, Z
    23fe:	50 e0       	ldi	r21, 0x00	; 0
    2400:	24 17       	cp	r18, r20
    2402:	35 07       	cpc	r19, r21
    2404:	79 f4       	brne	.+30     	; 0x2424 <startswith+0x52>
    2406:	9f 5f       	subi	r25, 0xFF	; 255
    2408:	49 2f       	mov	r20, r25
    240a:	50 e0       	ldi	r21, 0x00	; 0
    240c:	fb 01       	movw	r30, r22
    240e:	e4 0f       	add	r30, r20
    2410:	f5 1f       	adc	r31, r21
    2412:	20 81       	ld	r18, Z
    2414:	21 11       	cpse	r18, r1
    2416:	ec cf       	rjmp	.-40     	; 0x23f0 <startswith+0x1e>
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	08 95       	ret
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	08 95       	ret
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	08 95       	ret
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	08 95       	ret

00002428 <getGPSDatafromNMEA>:

GPS_data_t getGPSDatafromNMEA(uint8_t* NMEA_sentence, uint8_t sentencelength)
{
    2428:	2f 92       	push	r2
    242a:	3f 92       	push	r3
    242c:	4f 92       	push	r4
    242e:	5f 92       	push	r5
    2430:	6f 92       	push	r6
    2432:	7f 92       	push	r7
    2434:	8f 92       	push	r8
    2436:	9f 92       	push	r9
    2438:	af 92       	push	r10
    243a:	bf 92       	push	r11
    243c:	cf 92       	push	r12
    243e:	df 92       	push	r13
    2440:	ef 92       	push	r14
    2442:	ff 92       	push	r15
    2444:	0f 93       	push	r16
    2446:	1f 93       	push	r17
    2448:	cf 93       	push	r28
    244a:	df 93       	push	r29
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	a2 97       	sbiw	r28, 0x22	; 34
    2452:	cd bf       	out	0x3d, r28	; 61
    2454:	de bf       	out	0x3e, r29	; 62
    2456:	4c 01       	movw	r8, r24
    2458:	69 83       	std	Y+1, r22	; 0x01
    245a:	7a 83       	std	Y+2, r23	; 0x02
    245c:	24 2e       	mov	r2, r20
	uint8_t speedwritten=0;
	uint8_t heightwritten=0;
	uint8_t no_of_sateliiteswritten=0;
	uint8_t comma_position=0;
	int a=0;
	if (startswith(NMEA_sentence, "$GPGGA"))
    245e:	64 e1       	ldi	r22, 0x14	; 20
    2460:	70 e2       	ldi	r23, 0x20	; 32
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	9a 81       	ldd	r25, Y+2	; 0x02
    2466:	b5 df       	rcall	.-150    	; 0x23d2 <startswith>
    2468:	88 23       	and	r24, r24
    246a:	09 f4       	brne	.+2      	; 0x246e <getGPSDatafromNMEA+0x46>
    246c:	47 c2       	rjmp	.+1166   	; 0x28fc <getGPSDatafromNMEA+0x4d4>
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    246e:	31 2c       	mov	r3, r1
    2470:	12 14       	cp	r1, r2
    2472:	13 04       	cpc	r1, r3
    2474:	0c f0       	brlt	.+2      	; 0x2478 <getGPSDatafromNMEA+0x50>
    2476:	42 c2       	rjmp	.+1156   	; 0x28fc <getGPSDatafromNMEA+0x4d4>
    2478:	49 80       	ldd	r4, Y+1	; 0x01
    247a:	5a 80       	ldd	r5, Y+2	; 0x02
    247c:	00 e0       	ldi	r16, 0x00	; 0
    247e:	10 e0       	ldi	r17, 0x00	; 0
    2480:	f1 2c       	mov	r15, r1
										 + 1000l*(NMEA_sentence[a+7] - '0')
										  + 100l*(NMEA_sentence[a+8] - '0')
										   + 10l*(NMEA_sentence[a+9] - '0')
										       + (NMEA_sentence[a+10] - '0');
					//printf("%lu\n",GPSData.lonminutes);
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
    2482:	df 2c       	mov	r13, r15
    2484:	48 a2       	std	Y+32, r4	; 0x20
    2486:	59 a2       	std	Y+33, r5	; 0x21
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
		{
			//printf("hate6");
			if (NMEA_sentence[a]==',')
    2488:	a8 a1       	ldd	r26, Y+32	; 0x20
    248a:	b9 a1       	ldd	r27, Y+33	; 0x21
    248c:	8d 91       	ld	r24, X+
    248e:	a8 a3       	std	Y+32, r26	; 0x20
    2490:	b9 a3       	std	Y+33, r27	; 0x21
    2492:	8c 32       	cpi	r24, 0x2C	; 44
    2494:	09 f0       	breq	.+2      	; 0x2498 <getGPSDatafromNMEA+0x70>
    2496:	2c c2       	rjmp	.+1112   	; 0x28f0 <getGPSDatafromNMEA+0x4c8>
			{
				//printf("gfhghhf");
				countcommas++;
    2498:	d3 94       	inc	r13
				if (countcommas == 1)
    249a:	b1 e0       	ldi	r27, 0x01	; 1
    249c:	db 12       	cpse	r13, r27
    249e:	23 c0       	rjmp	.+70     	; 0x24e6 <getGPSDatafromNMEA+0xbe>
				{
					//printf("Begin %u, end %u\n", NMEA_sentence[a + 1] - '0', NMEA_sentence[a + 2] - '0');
					GPSData.hour = 10 * (NMEA_sentence[a + 1] - (uint8_t)'0') + (NMEA_sentence[a + 2] - (uint8_t)'0');
    24a0:	e8 a1       	ldd	r30, Y+32	; 0x20
    24a2:	f9 a1       	ldd	r31, Y+33	; 0x21
    24a4:	80 81       	ld	r24, Z
    24a6:	88 0f       	add	r24, r24
    24a8:	80 56       	subi	r24, 0x60	; 96
    24aa:	98 2f       	mov	r25, r24
    24ac:	99 0f       	add	r25, r25
    24ae:	99 0f       	add	r25, r25
    24b0:	89 0f       	add	r24, r25
    24b2:	91 81       	ldd	r25, Z+1	; 0x01
    24b4:	90 53       	subi	r25, 0x30	; 48
    24b6:	89 0f       	add	r24, r25
    24b8:	8d 87       	std	Y+13, r24	; 0x0d
					GPSData.minutes = 10 * (NMEA_sentence[a + 3] - '0') + NMEA_sentence[a + 4] - '0';
    24ba:	82 81       	ldd	r24, Z+2	; 0x02
    24bc:	88 0f       	add	r24, r24
    24be:	80 56       	subi	r24, 0x60	; 96
    24c0:	98 2f       	mov	r25, r24
    24c2:	99 0f       	add	r25, r25
    24c4:	99 0f       	add	r25, r25
    24c6:	89 0f       	add	r24, r25
    24c8:	93 81       	ldd	r25, Z+3	; 0x03
    24ca:	90 53       	subi	r25, 0x30	; 48
    24cc:	89 0f       	add	r24, r25
    24ce:	8e 87       	std	Y+14, r24	; 0x0e
					GPSData.seconds = 10 * (NMEA_sentence[a + 5] - '0') + NMEA_sentence[a + 6] - '0';
    24d0:	84 81       	ldd	r24, Z+4	; 0x04
    24d2:	88 0f       	add	r24, r24
    24d4:	80 56       	subi	r24, 0x60	; 96
    24d6:	a8 2e       	mov	r10, r24
    24d8:	aa 0c       	add	r10, r10
    24da:	aa 0c       	add	r10, r10
    24dc:	a8 0e       	add	r10, r24
    24de:	95 81       	ldd	r25, Z+5	; 0x05
    24e0:	90 53       	subi	r25, 0x30	; 48
    24e2:	a9 0e       	add	r10, r25
    24e4:	05 c2       	rjmp	.+1034   	; 0x28f0 <getGPSDatafromNMEA+0x4c8>
				}
				else if (countcommas == 2 && NMEA_sentence[a+1] != ',')
    24e6:	f2 e0       	ldi	r31, 0x02	; 2
    24e8:	df 12       	cpse	r13, r31
    24ea:	bb c0       	rjmp	.+374    	; 0x2662 <getGPSDatafromNMEA+0x23a>
    24ec:	a8 a1       	ldd	r26, Y+32	; 0x20
    24ee:	b9 a1       	ldd	r27, Y+33	; 0x21
    24f0:	8c 91       	ld	r24, X
    24f2:	8c 32       	cpi	r24, 0x2C	; 44
    24f4:	09 f4       	brne	.+2      	; 0x24f8 <getGPSDatafromNMEA+0xd0>
    24f6:	ee c1       	rjmp	.+988    	; 0x28d4 <getGPSDatafromNMEA+0x4ac>
				{
					GPSData.latdegrees = 10*(NMEA_sentence[a+1] - '0') + (NMEA_sentence[a+2] - '0');
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	c0 97       	sbiw	r24, 0x30	; 48
    24fc:	9c 01       	movw	r18, r24
    24fe:	22 0f       	add	r18, r18
    2500:	33 1f       	adc	r19, r19
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	88 0f       	add	r24, r24
    2508:	99 1f       	adc	r25, r25
    250a:	88 0f       	add	r24, r24
    250c:	99 1f       	adc	r25, r25
    250e:	82 0f       	add	r24, r18
    2510:	93 1f       	adc	r25, r19
    2512:	11 96       	adiw	r26, 0x01	; 1
    2514:	2c 91       	ld	r18, X
    2516:	11 97       	sbiw	r26, 0x01	; 1
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	20 53       	subi	r18, 0x30	; 48
    251c:	31 09       	sbc	r19, r1
    251e:	2c 01       	movw	r4, r24
    2520:	42 0e       	add	r4, r18
    2522:	53 1e       	adc	r5, r19
    2524:	4b 86       	std	Y+11, r4	; 0x0b
    2526:	5c 86       	std	Y+12, r5	; 0x0c
					//printf("%u\n",GPSData.latdegrees);
					GPSData.latminutes = 100000l*(NMEA_sentence[a+3] - '0') + 10000l*(NMEA_sentence[a+4] - '0') + 1000l*(NMEA_sentence[a+6] - '0') + 100l*(NMEA_sentence[a+7] - '0') + 10l*(NMEA_sentence[a+8] - '0') + (NMEA_sentence[a+9] - '0');
    2528:	12 96       	adiw	r26, 0x02	; 2
    252a:	ac 91       	ld	r26, X
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	d0 97       	sbiw	r26, 0x30	; 48
    2530:	20 ea       	ldi	r18, 0xA0	; 160
    2532:	36 e8       	ldi	r19, 0x86	; 134
    2534:	41 e0       	ldi	r20, 0x01	; 1
    2536:	50 e0       	ldi	r21, 0x00	; 0
    2538:	0e 94 11 23 	call	0x4622	; 0x4622 <__mulshisi3>
    253c:	2b 01       	movw	r4, r22
    253e:	3c 01       	movw	r6, r24
    2540:	e8 a1       	ldd	r30, Y+32	; 0x20
    2542:	f9 a1       	ldd	r31, Y+33	; 0x21
    2544:	a3 81       	ldd	r26, Z+3	; 0x03
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	d0 97       	sbiw	r26, 0x30	; 48
    254a:	20 e1       	ldi	r18, 0x10	; 16
    254c:	37 e2       	ldi	r19, 0x27	; 39
    254e:	0e 94 01 23 	call	0x4602	; 0x4602 <__usmulhisi3>
    2552:	46 0e       	add	r4, r22
    2554:	57 1e       	adc	r5, r23
    2556:	68 1e       	adc	r6, r24
    2558:	79 1e       	adc	r7, r25
    255a:	a5 81       	ldd	r26, Z+5	; 0x05
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	d0 97       	sbiw	r26, 0x30	; 48
    2560:	28 ee       	ldi	r18, 0xE8	; 232
    2562:	33 e0       	ldi	r19, 0x03	; 3
    2564:	0e 94 01 23 	call	0x4602	; 0x4602 <__usmulhisi3>
    2568:	46 0e       	add	r4, r22
    256a:	57 1e       	adc	r5, r23
    256c:	68 1e       	adc	r6, r24
    256e:	79 1e       	adc	r7, r25
    2570:	a6 81       	ldd	r26, Z+6	; 0x06
    2572:	b0 e0       	ldi	r27, 0x00	; 0
    2574:	d0 97       	sbiw	r26, 0x30	; 48
    2576:	24 e6       	ldi	r18, 0x64	; 100
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	0e 94 01 23 	call	0x4602	; 0x4602 <__usmulhisi3>
    257e:	ab 01       	movw	r20, r22
    2580:	bc 01       	movw	r22, r24
    2582:	44 0d       	add	r20, r4
    2584:	55 1d       	adc	r21, r5
    2586:	66 1d       	adc	r22, r6
    2588:	77 1d       	adc	r23, r7
    258a:	97 81       	ldd	r25, Z+7	; 0x07
    258c:	89 2f       	mov	r24, r25
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	c0 97       	sbiw	r24, 0x30	; 48
    2592:	09 2e       	mov	r0, r25
    2594:	00 0c       	add	r0, r0
    2596:	aa 0b       	sbc	r26, r26
    2598:	bb 0b       	sbc	r27, r27
    259a:	88 0f       	add	r24, r24
    259c:	99 1f       	adc	r25, r25
    259e:	aa 1f       	adc	r26, r26
    25a0:	bb 1f       	adc	r27, r27
    25a2:	2c 01       	movw	r4, r24
    25a4:	3d 01       	movw	r6, r26
    25a6:	44 0c       	add	r4, r4
    25a8:	55 1c       	adc	r5, r5
    25aa:	66 1c       	adc	r6, r6
    25ac:	77 1c       	adc	r7, r7
    25ae:	44 0c       	add	r4, r4
    25b0:	55 1c       	adc	r5, r5
    25b2:	66 1c       	adc	r6, r6
    25b4:	77 1c       	adc	r7, r7
    25b6:	84 0d       	add	r24, r4
    25b8:	95 1d       	adc	r25, r5
    25ba:	a6 1d       	adc	r26, r6
    25bc:	b7 1d       	adc	r27, r7
    25be:	84 0f       	add	r24, r20
    25c0:	95 1f       	adc	r25, r21
    25c2:	a6 1f       	adc	r26, r22
    25c4:	b7 1f       	adc	r27, r23
    25c6:	40 85       	ldd	r20, Z+8	; 0x08
    25c8:	50 e0       	ldi	r21, 0x00	; 0
    25ca:	40 53       	subi	r20, 0x30	; 48
    25cc:	51 09       	sbc	r21, r1
    25ce:	05 2e       	mov	r0, r21
    25d0:	00 0c       	add	r0, r0
    25d2:	66 0b       	sbc	r22, r22
    25d4:	77 0b       	sbc	r23, r23
    25d6:	2c 01       	movw	r4, r24
    25d8:	3d 01       	movw	r6, r26
    25da:	44 0e       	add	r4, r20
    25dc:	55 1e       	adc	r5, r21
    25de:	66 1e       	adc	r6, r22
    25e0:	77 1e       	adc	r7, r23
    25e2:	4f 82       	std	Y+7, r4	; 0x07
    25e4:	58 86       	std	Y+8, r5	; 0x08
    25e6:	69 86       	std	Y+9, r6	; 0x09
    25e8:	7a 86       	std	Y+10, r7	; 0x0a
					//printf("%lu\n",GPSData.latminutes);

					GPSData.latdecimal = (NMEA_sentence[a+11] == 'N' ? 1.0 : -1.0) * ((double)GPSData.latdegrees + ((double)GPSData.latminutes/(60.0*10000.0)));
    25ea:	82 85       	ldd	r24, Z+10	; 0x0a
    25ec:	8e 34       	cpi	r24, 0x4E	; 78
    25ee:	51 f0       	breq	.+20     	; 0x2604 <getGPSDatafromNMEA+0x1dc>
    25f0:	b1 2c       	mov	r11, r1
    25f2:	c1 2c       	mov	r12, r1
    25f4:	68 94       	set
    25f6:	ee 24       	eor	r14, r14
    25f8:	e7 f8       	bld	r14, 7
    25fa:	0f 2e       	mov	r0, r31
    25fc:	ff eb       	ldi	r31, 0xBF	; 191
    25fe:	ff 2e       	mov	r15, r31
    2600:	f0 2d       	mov	r31, r0
    2602:	09 c0       	rjmp	.+18     	; 0x2616 <getGPSDatafromNMEA+0x1ee>
    2604:	b1 2c       	mov	r11, r1
    2606:	c1 2c       	mov	r12, r1
    2608:	68 94       	set
    260a:	ee 24       	eor	r14, r14
    260c:	e7 f8       	bld	r14, 7
    260e:	0f 2e       	mov	r0, r31
    2610:	ff e3       	ldi	r31, 0x3F	; 63
    2612:	ff 2e       	mov	r15, r31
    2614:	f0 2d       	mov	r31, r0
    2616:	6f 81       	ldd	r22, Y+7	; 0x07
    2618:	78 85       	ldd	r23, Y+8	; 0x08
    261a:	89 85       	ldd	r24, Y+9	; 0x09
    261c:	9a 85       	ldd	r25, Y+10	; 0x0a
    261e:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__floatunsisf>
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	3c e7       	ldi	r19, 0x7C	; 124
    2626:	42 e1       	ldi	r20, 0x12	; 18
    2628:	59 e4       	ldi	r21, 0x49	; 73
    262a:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <__divsf3>
    262e:	2b 01       	movw	r4, r22
    2630:	3c 01       	movw	r6, r24
    2632:	2b 85       	ldd	r18, Y+11	; 0x0b
    2634:	3c 85       	ldd	r19, Y+12	; 0x0c
    2636:	b9 01       	movw	r22, r18
    2638:	80 e0       	ldi	r24, 0x00	; 0
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__floatunsisf>
    2640:	9b 01       	movw	r18, r22
    2642:	ac 01       	movw	r20, r24
    2644:	c3 01       	movw	r24, r6
    2646:	b2 01       	movw	r22, r4
    2648:	0e 94 00 1c 	call	0x3800	; 0x3800 <__addsf3>
    264c:	2b 2d       	mov	r18, r11
    264e:	3c 2d       	mov	r19, r12
    2650:	4e 2d       	mov	r20, r14
    2652:	5f 2d       	mov	r21, r15
    2654:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    2658:	6f 87       	std	Y+15, r22	; 0x0f
    265a:	78 8b       	std	Y+16, r23	; 0x10
    265c:	89 8b       	std	Y+17, r24	; 0x11
    265e:	9a 8b       	std	Y+18, r25	; 0x12
    2660:	47 c1       	rjmp	.+654    	; 0x28f0 <getGPSDatafromNMEA+0x4c8>
				}
				else if (countcommas == 2)
				{
					GPSData.latdecimal = 0.0;
				}
				else if (countcommas == 4 && NMEA_sentence[a+1] != ',')
    2662:	34 e0       	ldi	r19, 0x04	; 4
    2664:	d3 12       	cpse	r13, r19
    2666:	c5 c0       	rjmp	.+394    	; 0x27f2 <getGPSDatafromNMEA+0x3ca>
    2668:	a8 a1       	ldd	r26, Y+32	; 0x20
    266a:	b9 a1       	ldd	r27, Y+33	; 0x21
    266c:	2c 91       	ld	r18, X
    266e:	2c 32       	cpi	r18, 0x2C	; 44
    2670:	09 f4       	brne	.+2      	; 0x2674 <getGPSDatafromNMEA+0x24c>
    2672:	35 c1       	rjmp	.+618    	; 0x28de <getGPSDatafromNMEA+0x4b6>
				{
					GPSData.londegrees = 100*(NMEA_sentence[a+1] - '0') +10*(NMEA_sentence[a+2] - '0') + (NMEA_sentence[a+3] - '0');
    2674:	11 96       	adiw	r26, 0x01	; 1
    2676:	8c 91       	ld	r24, X
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	c0 97       	sbiw	r24, 0x30	; 48
    267c:	ac 01       	movw	r20, r24
    267e:	44 0f       	add	r20, r20
    2680:	55 1f       	adc	r21, r21
    2682:	88 0f       	add	r24, r24
    2684:	99 1f       	adc	r25, r25
    2686:	88 0f       	add	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	88 0f       	add	r24, r24
    268c:	99 1f       	adc	r25, r25
    268e:	84 0f       	add	r24, r20
    2690:	95 1f       	adc	r25, r21
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	20 53       	subi	r18, 0x30	; 48
    2696:	31 09       	sbc	r19, r1
    2698:	b4 e6       	ldi	r27, 0x64	; 100
    269a:	b2 9f       	mul	r27, r18
    269c:	a0 01       	movw	r20, r0
    269e:	b3 9f       	mul	r27, r19
    26a0:	50 0d       	add	r21, r0
    26a2:	11 24       	eor	r1, r1
    26a4:	84 0f       	add	r24, r20
    26a6:	95 1f       	adc	r25, r21
    26a8:	e8 a1       	ldd	r30, Y+32	; 0x20
    26aa:	f9 a1       	ldd	r31, Y+33	; 0x21
    26ac:	22 81       	ldd	r18, Z+2	; 0x02
    26ae:	30 e0       	ldi	r19, 0x00	; 0
    26b0:	20 53       	subi	r18, 0x30	; 48
    26b2:	31 09       	sbc	r19, r1
    26b4:	2c 01       	movw	r4, r24
    26b6:	42 0e       	add	r4, r18
    26b8:	53 1e       	adc	r5, r19
    26ba:	4f 8a       	std	Y+23, r4	; 0x17
    26bc:	58 8e       	std	Y+24, r5	; 0x18
					//printf("%u\n",GPSData.londegrees);
					GPSData.lonminutes = 100000l*(NMEA_sentence[a+4] - '0')
    26be:	a3 81       	ldd	r26, Z+3	; 0x03
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	d0 97       	sbiw	r26, 0x30	; 48
    26c4:	20 ea       	ldi	r18, 0xA0	; 160
    26c6:	36 e8       	ldi	r19, 0x86	; 134
    26c8:	41 e0       	ldi	r20, 0x01	; 1
    26ca:	50 e0       	ldi	r21, 0x00	; 0
    26cc:	0e 94 11 23 	call	0x4622	; 0x4622 <__mulshisi3>
    26d0:	2b 01       	movw	r4, r22
    26d2:	3c 01       	movw	r6, r24
    26d4:	a4 81       	ldd	r26, Z+4	; 0x04
    26d6:	b0 e0       	ldi	r27, 0x00	; 0
    26d8:	d0 97       	sbiw	r26, 0x30	; 48
    26da:	20 e1       	ldi	r18, 0x10	; 16
    26dc:	37 e2       	ldi	r19, 0x27	; 39
    26de:	0e 94 01 23 	call	0x4602	; 0x4602 <__usmulhisi3>
    26e2:	46 0e       	add	r4, r22
    26e4:	57 1e       	adc	r5, r23
    26e6:	68 1e       	adc	r6, r24
    26e8:	79 1e       	adc	r7, r25
    26ea:	a6 81       	ldd	r26, Z+6	; 0x06
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	d0 97       	sbiw	r26, 0x30	; 48
    26f0:	28 ee       	ldi	r18, 0xE8	; 232
    26f2:	33 e0       	ldi	r19, 0x03	; 3
    26f4:	0e 94 01 23 	call	0x4602	; 0x4602 <__usmulhisi3>
    26f8:	46 0e       	add	r4, r22
    26fa:	57 1e       	adc	r5, r23
    26fc:	68 1e       	adc	r6, r24
    26fe:	79 1e       	adc	r7, r25
    2700:	a7 81       	ldd	r26, Z+7	; 0x07
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	d0 97       	sbiw	r26, 0x30	; 48
    2706:	24 e6       	ldi	r18, 0x64	; 100
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	0e 94 01 23 	call	0x4602	; 0x4602 <__usmulhisi3>
    270e:	ab 01       	movw	r20, r22
    2710:	bc 01       	movw	r22, r24
    2712:	44 0d       	add	r20, r4
    2714:	55 1d       	adc	r21, r5
    2716:	66 1d       	adc	r22, r6
    2718:	77 1d       	adc	r23, r7
    271a:	90 85       	ldd	r25, Z+8	; 0x08
    271c:	89 2f       	mov	r24, r25
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	c0 97       	sbiw	r24, 0x30	; 48
    2722:	09 2e       	mov	r0, r25
    2724:	00 0c       	add	r0, r0
    2726:	aa 0b       	sbc	r26, r26
    2728:	bb 0b       	sbc	r27, r27
    272a:	88 0f       	add	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	aa 1f       	adc	r26, r26
    2730:	bb 1f       	adc	r27, r27
    2732:	2c 01       	movw	r4, r24
    2734:	3d 01       	movw	r6, r26
    2736:	44 0c       	add	r4, r4
    2738:	55 1c       	adc	r5, r5
    273a:	66 1c       	adc	r6, r6
    273c:	77 1c       	adc	r7, r7
    273e:	44 0c       	add	r4, r4
    2740:	55 1c       	adc	r5, r5
    2742:	66 1c       	adc	r6, r6
    2744:	77 1c       	adc	r7, r7
    2746:	84 0d       	add	r24, r4
    2748:	95 1d       	adc	r25, r5
    274a:	a6 1d       	adc	r26, r6
    274c:	b7 1d       	adc	r27, r7
    274e:	84 0f       	add	r24, r20
    2750:	95 1f       	adc	r25, r21
    2752:	a6 1f       	adc	r26, r22
    2754:	b7 1f       	adc	r27, r23
    2756:	41 85       	ldd	r20, Z+9	; 0x09
    2758:	50 e0       	ldi	r21, 0x00	; 0
    275a:	40 53       	subi	r20, 0x30	; 48
    275c:	51 09       	sbc	r21, r1
    275e:	05 2e       	mov	r0, r21
    2760:	00 0c       	add	r0, r0
    2762:	66 0b       	sbc	r22, r22
    2764:	77 0b       	sbc	r23, r23
    2766:	2c 01       	movw	r4, r24
    2768:	3d 01       	movw	r6, r26
    276a:	44 0e       	add	r4, r20
    276c:	55 1e       	adc	r5, r21
    276e:	66 1e       	adc	r6, r22
    2770:	77 1e       	adc	r7, r23
    2772:	4b 8a       	std	Y+19, r4	; 0x13
    2774:	5c 8a       	std	Y+20, r5	; 0x14
    2776:	6d 8a       	std	Y+21, r6	; 0x15
    2778:	7e 8a       	std	Y+22, r7	; 0x16
										 + 1000l*(NMEA_sentence[a+7] - '0')
										  + 100l*(NMEA_sentence[a+8] - '0')
										   + 10l*(NMEA_sentence[a+9] - '0')
										       + (NMEA_sentence[a+10] - '0');
					//printf("%lu\n",GPSData.lonminutes);
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
    277a:	83 85       	ldd	r24, Z+11	; 0x0b
    277c:	85 34       	cpi	r24, 0x45	; 69
    277e:	51 f0       	breq	.+20     	; 0x2794 <getGPSDatafromNMEA+0x36c>
    2780:	b1 2c       	mov	r11, r1
    2782:	c1 2c       	mov	r12, r1
    2784:	68 94       	set
    2786:	ee 24       	eor	r14, r14
    2788:	e7 f8       	bld	r14, 7
    278a:	0f 2e       	mov	r0, r31
    278c:	ff eb       	ldi	r31, 0xBF	; 191
    278e:	ff 2e       	mov	r15, r31
    2790:	f0 2d       	mov	r31, r0
    2792:	09 c0       	rjmp	.+18     	; 0x27a6 <getGPSDatafromNMEA+0x37e>
    2794:	b1 2c       	mov	r11, r1
    2796:	c1 2c       	mov	r12, r1
    2798:	68 94       	set
    279a:	ee 24       	eor	r14, r14
    279c:	e7 f8       	bld	r14, 7
    279e:	0f 2e       	mov	r0, r31
    27a0:	ff e3       	ldi	r31, 0x3F	; 63
    27a2:	ff 2e       	mov	r15, r31
    27a4:	f0 2d       	mov	r31, r0
    27a6:	6b 89       	ldd	r22, Y+19	; 0x13
    27a8:	7c 89       	ldd	r23, Y+20	; 0x14
    27aa:	8d 89       	ldd	r24, Y+21	; 0x15
    27ac:	9e 89       	ldd	r25, Y+22	; 0x16
    27ae:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__floatunsisf>
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	3c e7       	ldi	r19, 0x7C	; 124
    27b6:	42 e1       	ldi	r20, 0x12	; 18
    27b8:	59 e4       	ldi	r21, 0x49	; 73
    27ba:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <__divsf3>
    27be:	2b 01       	movw	r4, r22
    27c0:	3c 01       	movw	r6, r24
    27c2:	2f 89       	ldd	r18, Y+23	; 0x17
    27c4:	38 8d       	ldd	r19, Y+24	; 0x18
    27c6:	b9 01       	movw	r22, r18
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	90 e0       	ldi	r25, 0x00	; 0
    27cc:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <__floatunsisf>
    27d0:	9b 01       	movw	r18, r22
    27d2:	ac 01       	movw	r20, r24
    27d4:	c3 01       	movw	r24, r6
    27d6:	b2 01       	movw	r22, r4
    27d8:	0e 94 00 1c 	call	0x3800	; 0x3800 <__addsf3>
    27dc:	2b 2d       	mov	r18, r11
    27de:	3c 2d       	mov	r19, r12
    27e0:	4e 2d       	mov	r20, r14
    27e2:	5f 2d       	mov	r21, r15
    27e4:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    27e8:	69 8f       	std	Y+25, r22	; 0x19
    27ea:	7a 8f       	std	Y+26, r23	; 0x1a
    27ec:	8b 8f       	std	Y+27, r24	; 0x1b
    27ee:	9c 8f       	std	Y+28, r25	; 0x1c
    27f0:	7f c0       	rjmp	.+254    	; 0x28f0 <getGPSDatafromNMEA+0x4c8>
				}
				else if(countcommas == 4)
				{
					GPSData.londecimal = 0.0;
				}
				else if (countcommas == 6)
    27f2:	36 e0       	ldi	r19, 0x06	; 6
    27f4:	d3 12       	cpse	r13, r19
    27f6:	06 c0       	rjmp	.+12     	; 0x2804 <getGPSDatafromNMEA+0x3dc>
				{
					GPSData.fix_status = NMEA_sentence[a + 1] - '0';
    27f8:	a8 a1       	ldd	r26, Y+32	; 0x20
    27fa:	b9 a1       	ldd	r27, Y+33	; 0x21
    27fc:	8c 91       	ld	r24, X
    27fe:	80 53       	subi	r24, 0x30	; 48
    2800:	8d 8f       	std	Y+29, r24	; 0x1d
    2802:	76 c0       	rjmp	.+236    	; 0x28f0 <getGPSDatafromNMEA+0x4c8>
				}
				else if (countcommas == 9)
    2804:	b9 e0       	ldi	r27, 0x09	; 9
    2806:	db 12       	cpse	r13, r27
    2808:	73 c0       	rjmp	.+230    	; 0x28f0 <getGPSDatafromNMEA+0x4c8>
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    280a:	e8 a1       	ldd	r30, Y+32	; 0x20
    280c:	f9 a1       	ldd	r31, Y+33	; 0x21
    280e:	c0 80       	ld	r12, Z
    2810:	fc e2       	ldi	r31, 0x2C	; 44
    2812:	cf 16       	cp	r12, r31
    2814:	09 f4       	brne	.+2      	; 0x2818 <getGPSDatafromNMEA+0x3f0>
    2816:	68 c0       	rjmp	.+208    	; 0x28e8 <getGPSDatafromNMEA+0x4c0>
    2818:	b1 2c       	mov	r11, r1
    281a:	1b 82       	std	Y+3, r1	; 0x03
    281c:	1c 82       	std	Y+4, r1	; 0x04
    281e:	1d 82       	std	Y+5, r1	; 0x05
    2820:	1e 82       	std	Y+6, r1	; 0x06
    2822:	71 2c       	mov	r7, r1
    2824:	e9 80       	ldd	r14, Y+1	; 0x01
    2826:	fa 80       	ldd	r15, Y+2	; 0x02
    2828:	e0 0e       	add	r14, r16
    282a:	f1 1e       	adc	r15, r17
    282c:	0e 8f       	std	Y+30, r16	; 0x1e
    282e:	1f 8f       	std	Y+31, r17	; 0x1f
    2830:	1c 2d       	mov	r17, r12
    2832:	7a a2       	std	Y+34, r7	; 0x22
					{
						if (NMEA_sentence[a + inc + 1] == '.')
    2834:	1e 32       	cpi	r17, 0x2E	; 46
    2836:	09 f4       	brne	.+2      	; 0x283a <getGPSDatafromNMEA+0x412>
    2838:	40 c0       	rjmp	.+128    	; 0x28ba <getGPSDatafromNMEA+0x492>
						{
							period_reached = 1;
							period_counter = 1;
						}
						else if (!period_reached)
    283a:	5a a0       	ldd	r5, Y+34	; 0x22
    283c:	51 10       	cpse	r5, r1
    283e:	1e c0       	rjmp	.+60     	; 0x287c <getGPSDatafromNMEA+0x454>
						{
							altitude *= 10;
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e2       	ldi	r20, 0x20	; 32
    2846:	51 e4       	ldi	r21, 0x41	; 65
    2848:	6b 81       	ldd	r22, Y+3	; 0x03
    284a:	7c 81       	ldd	r23, Y+4	; 0x04
    284c:	8d 81       	ldd	r24, Y+5	; 0x05
    284e:	9e 81       	ldd	r25, Y+6	; 0x06
    2850:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <__mulsf3>
    2854:	2b 01       	movw	r4, r22
    2856:	3c 01       	movw	r6, r24
							altitude += (float)(NMEA_sentence[a + inc + 1] - '0');
    2858:	61 2f       	mov	r22, r17
    285a:	70 e0       	ldi	r23, 0x00	; 0
    285c:	60 53       	subi	r22, 0x30	; 48
    285e:	71 09       	sbc	r23, r1
    2860:	07 2e       	mov	r0, r23
    2862:	00 0c       	add	r0, r0
    2864:	88 0b       	sbc	r24, r24
    2866:	99 0b       	sbc	r25, r25
    2868:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <__floatsisf>
    286c:	a3 01       	movw	r20, r6
    286e:	92 01       	movw	r18, r4
    2870:	c7 d7       	rcall	.+3982   	; 0x3800 <__addsf3>
    2872:	6b 83       	std	Y+3, r22	; 0x03
    2874:	7c 83       	std	Y+4, r23	; 0x04
    2876:	8d 83       	std	Y+5, r24	; 0x05
    2878:	9e 83       	std	Y+6, r25	; 0x06
    287a:	21 c0       	rjmp	.+66     	; 0x28be <getGPSDatafromNMEA+0x496>
    287c:	c1 2e       	mov	r12, r17
    287e:	0e 8d       	ldd	r16, Y+30	; 0x1e
    2880:	1f 8d       	ldd	r17, Y+31	; 0x1f
						}
						else if (period_reached && period_counter == 1)
						{
							altitude += ((float)(NMEA_sentence[a + inc + 1] - '0')) / 10.0;
    2882:	6c 2d       	mov	r22, r12
    2884:	70 e0       	ldi	r23, 0x00	; 0
    2886:	60 53       	subi	r22, 0x30	; 48
    2888:	71 09       	sbc	r23, r1
    288a:	07 2e       	mov	r0, r23
    288c:	00 0c       	add	r0, r0
    288e:	88 0b       	sbc	r24, r24
    2890:	99 0b       	sbc	r25, r25
    2892:	0e 94 ff 1c 	call	0x39fe	; 0x39fe <__floatsisf>
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e2       	ldi	r20, 0x20	; 32
    289c:	51 e4       	ldi	r21, 0x41	; 65
    289e:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <__divsf3>
    28a2:	9b 01       	movw	r18, r22
    28a4:	ac 01       	movw	r20, r24
    28a6:	6b 81       	ldd	r22, Y+3	; 0x03
    28a8:	7c 81       	ldd	r23, Y+4	; 0x04
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	9e 81       	ldd	r25, Y+6	; 0x06
    28ae:	a8 d7       	rcall	.+3920   	; 0x3800 <__addsf3>
    28b0:	6b 83       	std	Y+3, r22	; 0x03
    28b2:	7c 83       	std	Y+4, r23	; 0x04
    28b4:	8d 83       	std	Y+5, r24	; 0x05
    28b6:	9e 83       	std	Y+6, r25	; 0x06
							break;
    28b8:	1b c0       	rjmp	.+54     	; 0x28f0 <getGPSDatafromNMEA+0x4c8>
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
					{
						if (NMEA_sentence[a + inc + 1] == '.')
						{
							period_reached = 1;
    28ba:	21 e0       	ldi	r18, 0x01	; 1
    28bc:	2a a3       	std	Y+34, r18	; 0x22
						{
							altitude += ((float)(NMEA_sentence[a + inc + 1] - '0')) / 10.0;
							break;
						}
						
						inc++;
    28be:	b3 94       	inc	r11
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    28c0:	f7 01       	movw	r30, r14
    28c2:	eb 0d       	add	r30, r11
    28c4:	f1 1d       	adc	r31, r1
    28c6:	11 81       	ldd	r17, Z+1	; 0x01
    28c8:	1c 32       	cpi	r17, 0x2C	; 44
    28ca:	09 f0       	breq	.+2      	; 0x28ce <getGPSDatafromNMEA+0x4a6>
    28cc:	b3 cf       	rjmp	.-154    	; 0x2834 <getGPSDatafromNMEA+0x40c>
    28ce:	0e 8d       	ldd	r16, Y+30	; 0x1e
    28d0:	1f 8d       	ldd	r17, Y+31	; 0x1f
    28d2:	0e c0       	rjmp	.+28     	; 0x28f0 <getGPSDatafromNMEA+0x4c8>

					//printf("%f\n",GPSData.latdecimal);
				}
				else if (countcommas == 2)
				{
					GPSData.latdecimal = 0.0;
    28d4:	1f 86       	std	Y+15, r1	; 0x0f
    28d6:	18 8a       	std	Y+16, r1	; 0x10
    28d8:	19 8a       	std	Y+17, r1	; 0x11
    28da:	1a 8a       	std	Y+18, r1	; 0x12
    28dc:	09 c0       	rjmp	.+18     	; 0x28f0 <getGPSDatafromNMEA+0x4c8>
					GPSData.londecimal = (NMEA_sentence[a+12] == 'E' ? 1.0 : -1.0) * ((double)GPSData.londegrees + ((double)GPSData.lonminutes/(60.0*10000.0)));
					//printf("%f\n",GPSData.londecimal);
				}
				else if(countcommas == 4)
				{
					GPSData.londecimal = 0.0;
    28de:	19 8e       	std	Y+25, r1	; 0x19
    28e0:	1a 8e       	std	Y+26, r1	; 0x1a
    28e2:	1b 8e       	std	Y+27, r1	; 0x1b
    28e4:	1c 8e       	std	Y+28, r1	; 0x1c
    28e6:	04 c0       	rjmp	.+8      	; 0x28f0 <getGPSDatafromNMEA+0x4c8>
				{
					uint8_t period_reached = 0;
					uint8_t period_counter;
					float altitude = 0;
					uint8_t inc = 0;
					while (NMEA_sentence[a + inc + 1] != ',')
    28e8:	1b 82       	std	Y+3, r1	; 0x03
    28ea:	1c 82       	std	Y+4, r1	; 0x04
    28ec:	1d 82       	std	Y+5, r1	; 0x05
    28ee:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t comma_position=0;
	int a=0;
	if (startswith(NMEA_sentence, "$GPGGA"))
	{
		//printf("Parsing GPGGA with len %u\n", sentencelength);
		for (a=0;a<sentencelength; a++)
    28f0:	0f 5f       	subi	r16, 0xFF	; 255
    28f2:	1f 4f       	sbci	r17, 0xFF	; 255
    28f4:	02 15       	cp	r16, r2
    28f6:	13 05       	cpc	r17, r3
    28f8:	09 f0       	breq	.+2      	; 0x28fc <getGPSDatafromNMEA+0x4d4>
    28fa:	c6 cd       	rjmp	.-1140   	; 0x2488 <getGPSDatafromNMEA+0x60>
	
	
	
//printf("GPSDATA altitude test %s \n ", GPSData.altitude);
//printf("GPS no of satellites test= %s \n", GPSData.noofsatellites);
return GPSData;
    28fc:	4b 84       	ldd	r4, Y+11	; 0x0b
    28fe:	5c 84       	ldd	r5, Y+12	; 0x0c
    2900:	d4 01       	movw	r26, r8
    2902:	4d 92       	st	X+, r4
    2904:	5c 92       	st	X, r5
    2906:	11 97       	sbiw	r26, 0x01	; 1
    2908:	4f 80       	ldd	r4, Y+7	; 0x07
    290a:	58 84       	ldd	r5, Y+8	; 0x08
    290c:	69 84       	ldd	r6, Y+9	; 0x09
    290e:	7a 84       	ldd	r7, Y+10	; 0x0a
    2910:	12 96       	adiw	r26, 0x02	; 2
    2912:	4d 92       	st	X+, r4
    2914:	5d 92       	st	X+, r5
    2916:	6d 92       	st	X+, r6
    2918:	7c 92       	st	X, r7
    291a:	15 97       	sbiw	r26, 0x05	; 5
    291c:	8f 85       	ldd	r24, Y+15	; 0x0f
    291e:	98 89       	ldd	r25, Y+16	; 0x10
    2920:	a9 89       	ldd	r26, Y+17	; 0x11
    2922:	ba 89       	ldd	r27, Y+18	; 0x12
    2924:	f4 01       	movw	r30, r8
    2926:	87 83       	std	Z+7, r24	; 0x07
    2928:	90 87       	std	Z+8, r25	; 0x08
    292a:	a1 87       	std	Z+9, r26	; 0x09
    292c:	b2 87       	std	Z+10, r27	; 0x0a
    292e:	4f 88       	ldd	r4, Y+23	; 0x17
    2930:	58 8c       	ldd	r5, Y+24	; 0x18
    2932:	43 86       	std	Z+11, r4	; 0x0b
    2934:	54 86       	std	Z+12, r5	; 0x0c
    2936:	4b 88       	ldd	r4, Y+19	; 0x13
    2938:	5c 88       	ldd	r5, Y+20	; 0x14
    293a:	6d 88       	ldd	r6, Y+21	; 0x15
    293c:	7e 88       	ldd	r7, Y+22	; 0x16
    293e:	45 86       	std	Z+13, r4	; 0x0d
    2940:	56 86       	std	Z+14, r5	; 0x0e
    2942:	67 86       	std	Z+15, r6	; 0x0f
    2944:	70 8a       	std	Z+16, r7	; 0x10
    2946:	89 8d       	ldd	r24, Y+25	; 0x19
    2948:	9a 8d       	ldd	r25, Y+26	; 0x1a
    294a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    294c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    294e:	82 8b       	std	Z+18, r24	; 0x12
    2950:	93 8b       	std	Z+19, r25	; 0x13
    2952:	a4 8b       	std	Z+20, r26	; 0x14
    2954:	b5 8b       	std	Z+21, r27	; 0x15
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	9c 81       	ldd	r25, Y+4	; 0x04
    295a:	ad 81       	ldd	r26, Y+5	; 0x05
    295c:	be 81       	ldd	r27, Y+6	; 0x06
    295e:	86 8b       	std	Z+22, r24	; 0x16
    2960:	97 8b       	std	Z+23, r25	; 0x17
    2962:	a0 8f       	std	Z+24, r26	; 0x18
    2964:	b1 8f       	std	Z+25, r27	; 0x19
    2966:	4d 84       	ldd	r4, Y+13	; 0x0d
    2968:	42 8e       	std	Z+26, r4	; 0x1a
    296a:	5e 84       	ldd	r5, Y+14	; 0x0e
    296c:	53 8e       	std	Z+27, r5	; 0x1b
    296e:	a4 8e       	std	Z+28, r10	; 0x1c
    2970:	6d 8c       	ldd	r6, Y+29	; 0x1d
    2972:	65 8e       	std	Z+29, r6	; 0x1d


}
    2974:	c4 01       	movw	r24, r8
    2976:	a2 96       	adiw	r28, 0x22	; 34
    2978:	cd bf       	out	0x3d, r28	; 61
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	1f 91       	pop	r17
    2982:	0f 91       	pop	r16
    2984:	ff 90       	pop	r15
    2986:	ef 90       	pop	r14
    2988:	df 90       	pop	r13
    298a:	cf 90       	pop	r12
    298c:	bf 90       	pop	r11
    298e:	af 90       	pop	r10
    2990:	9f 90       	pop	r9
    2992:	8f 90       	pop	r8
    2994:	7f 90       	pop	r7
    2996:	6f 90       	pop	r6
    2998:	5f 90       	pop	r5
    299a:	4f 90       	pop	r4
    299c:	3f 90       	pop	r3
    299e:	2f 90       	pop	r2
    29a0:	08 95       	ret

000029a2 <__portable_avr_delay_cycles>:
	PORTE.OUTSET = 0b00000001;
}*/

void heatshield_solenoid(PORT_t* port){
	(*port).DIRSET = 0b10000000;
	(*port).OUTSET = 0b10000000;
    29a2:	04 c0       	rjmp	.+8      	; 0x29ac <__portable_avr_delay_cycles+0xa>
    29a4:	61 50       	subi	r22, 0x01	; 1
    29a6:	71 09       	sbc	r23, r1
    29a8:	81 09       	sbc	r24, r1
    29aa:	91 09       	sbc	r25, r1
    29ac:	61 15       	cp	r22, r1
    29ae:	71 05       	cpc	r23, r1
    29b0:	81 05       	cpc	r24, r1
    29b2:	91 05       	cpc	r25, r1
    29b4:	b9 f7       	brne	.-18     	; 0x29a4 <__portable_avr_delay_cycles+0x2>
    29b6:	08 95       	ret

000029b8 <heatshield_hotwire>:
}

void heatshield_hotwire (void){
    29b8:	cf 93       	push	r28
    29ba:	df 93       	push	r29
	PORTD.DIR |= 0b00000010;
    29bc:	c0 e6       	ldi	r28, 0x60	; 96
    29be:	d6 e0       	ldi	r29, 0x06	; 6
    29c0:	88 81       	ld	r24, Y
    29c2:	82 60       	ori	r24, 0x02	; 2
    29c4:	88 83       	st	Y, r24
	PORTD.OUT |= 0b00000010; //TODO: fix these port addresses
    29c6:	8c 81       	ldd	r24, Y+4	; 0x04
    29c8:	82 60       	ori	r24, 0x02	; 2
    29ca:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(4000);
    29cc:	66 e5       	ldi	r22, 0x56	; 86
    29ce:	75 e8       	ldi	r23, 0x85	; 133
    29d0:	85 e4       	ldi	r24, 0x45	; 69
    29d2:	91 e0       	ldi	r25, 0x01	; 1
    29d4:	e6 df       	rcall	.-52     	; 0x29a2 <__portable_avr_delay_cycles>
	PORTD.OUT &= 0b11111101;
    29d6:	8c 81       	ldd	r24, Y+4	; 0x04
    29d8:	8d 7f       	andi	r24, 0xFD	; 253
    29da:	8c 83       	std	Y+4, r24	; 0x04
}
    29dc:	df 91       	pop	r29
    29de:	cf 91       	pop	r28
    29e0:	08 95       	ret

000029e2 <parachute_hotwire>:

void parachute_hotwire (void) {
    29e2:	cf 93       	push	r28
    29e4:	df 93       	push	r29
	PORTD.DIR |= 0b00000010;
    29e6:	c0 e6       	ldi	r28, 0x60	; 96
    29e8:	d6 e0       	ldi	r29, 0x06	; 6
    29ea:	88 81       	ld	r24, Y
    29ec:	82 60       	ori	r24, 0x02	; 2
    29ee:	88 83       	st	Y, r24
	PORTD.OUT |= 0b00000010; //TODO: fix these port addresses
    29f0:	8c 81       	ldd	r24, Y+4	; 0x04
    29f2:	82 60       	ori	r24, 0x02	; 2
    29f4:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(4000);
    29f6:	66 e5       	ldi	r22, 0x56	; 86
    29f8:	75 e8       	ldi	r23, 0x85	; 133
    29fa:	85 e4       	ldi	r24, 0x45	; 69
    29fc:	91 e0       	ldi	r25, 0x01	; 1
    29fe:	d1 df       	rcall	.-94     	; 0x29a2 <__portable_avr_delay_cycles>
	PORTD.OUT &= 0b11111101;
    2a00:	8c 81       	ldd	r24, Y+4	; 0x04
    2a02:	8d 7f       	andi	r24, 0xFD	; 253
    2a04:	8c 83       	std	Y+4, r24	; 0x04
}
    2a06:	df 91       	pop	r29
    2a08:	cf 91       	pop	r28
    2a0a:	08 95       	ret

00002a0c <heatshield_detatch_hotwire>:

void heatshield_detatch_hotwire(void){
    2a0c:	cf 93       	push	r28
    2a0e:	df 93       	push	r29
	PORTD.DIR |= 0b00000010;
    2a10:	c0 e6       	ldi	r28, 0x60	; 96
    2a12:	d6 e0       	ldi	r29, 0x06	; 6
    2a14:	88 81       	ld	r24, Y
    2a16:	82 60       	ori	r24, 0x02	; 2
    2a18:	88 83       	st	Y, r24
	PORTD.OUT |= 0b00000010; //TODO: fix these port addresses
    2a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a1c:	82 60       	ori	r24, 0x02	; 2
    2a1e:	8c 83       	std	Y+4, r24	; 0x04
	delay_ms(4000);
    2a20:	66 e5       	ldi	r22, 0x56	; 86
    2a22:	75 e8       	ldi	r23, 0x85	; 133
    2a24:	85 e4       	ldi	r24, 0x45	; 69
    2a26:	91 e0       	ldi	r25, 0x01	; 1
    2a28:	bc df       	rcall	.-136    	; 0x29a2 <__portable_avr_delay_cycles>
	PORTD.OUT &= 0b11111101;	
    2a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2c:	8d 7f       	andi	r24, 0xFD	; 253
    2a2e:	8c 83       	std	Y+4, r24	; 0x04
}
    2a30:	df 91       	pop	r29
    2a32:	cf 91       	pop	r28
    2a34:	08 95       	ret

00002a36 <buzzer_on>:

void buzzer_on(void){
	PORTA.DIR |= 0b00001000;
    2a36:	e0 e0       	ldi	r30, 0x00	; 0
    2a38:	f6 e0       	ldi	r31, 0x06	; 6
    2a3a:	80 81       	ld	r24, Z
    2a3c:	88 60       	ori	r24, 0x08	; 8
    2a3e:	80 83       	st	Z, r24
	PORTA.OUT |= 0b00001000;
    2a40:	84 81       	ldd	r24, Z+4	; 0x04
    2a42:	88 60       	ori	r24, 0x08	; 8
    2a44:	84 83       	std	Z+4, r24	; 0x04
    2a46:	08 95       	ret

00002a48 <buzzer_off>:
	
}
void buzzer_off(void){
	PORTA.DIR |= 0b00001000;
    2a48:	e0 e0       	ldi	r30, 0x00	; 0
    2a4a:	f6 e0       	ldi	r31, 0x06	; 6
    2a4c:	80 81       	ld	r24, Z
    2a4e:	88 60       	ori	r24, 0x08	; 8
    2a50:	80 83       	st	Z, r24
	PORTA.OUT &= 0b11110111;
    2a52:	84 81       	ldd	r24, Z+4	; 0x04
    2a54:	87 7f       	andi	r24, 0xF7	; 247
    2a56:	84 83       	std	Z+4, r24	; 0x04
    2a58:	08 95       	ret

00002a5a <camera_on>:
	
}
void camera_on(void){
	PORTE.DIR |= 0b01000000;
    2a5a:	e0 e8       	ldi	r30, 0x80	; 128
    2a5c:	f6 e0       	ldi	r31, 0x06	; 6
    2a5e:	80 81       	ld	r24, Z
    2a60:	80 64       	ori	r24, 0x40	; 64
    2a62:	80 83       	st	Z, r24
	PORTE.OUT |= 0b01000000;
    2a64:	84 81       	ldd	r24, Z+4	; 0x04
    2a66:	80 64       	ori	r24, 0x40	; 64
    2a68:	84 83       	std	Z+4, r24	; 0x04
    2a6a:	08 95       	ret

00002a6c <__vector_2>:
		return 0;
	}
}

ISR(MPU9250_INT_vect)
{
    2a6c:	1f 92       	push	r1
    2a6e:	0f 92       	push	r0
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	0f 92       	push	r0
    2a74:	11 24       	eor	r1, r1
    2a76:	08 b6       	in	r0, 0x38	; 56
    2a78:	0f 92       	push	r0
    2a7a:	18 be       	out	0x38, r1	; 56
    2a7c:	09 b6       	in	r0, 0x39	; 57
    2a7e:	0f 92       	push	r0
    2a80:	19 be       	out	0x39, r1	; 57
    2a82:	8f 93       	push	r24
    2a84:	9f 93       	push	r25
    2a86:	af 93       	push	r26
    2a88:	bf 93       	push	r27
	data_rdy_flag = 1;
    2a8a:	81 e0       	ldi	r24, 0x01	; 1
    2a8c:	80 93 e4 20 	sts	0x20E4, r24	; 0x8020e4 <data_rdy_flag>
	timerflag = 1;
    2a90:	80 93 e3 20 	sts	0x20E3, r24	; 0x8020e3 <timerflag>
	time++;
    2a94:	80 91 df 20 	lds	r24, 0x20DF	; 0x8020df <time>
    2a98:	90 91 e0 20 	lds	r25, 0x20E0	; 0x8020e0 <time+0x1>
    2a9c:	a0 91 e1 20 	lds	r26, 0x20E1	; 0x8020e1 <time+0x2>
    2aa0:	b0 91 e2 20 	lds	r27, 0x20E2	; 0x8020e2 <time+0x3>
    2aa4:	01 96       	adiw	r24, 0x01	; 1
    2aa6:	a1 1d       	adc	r26, r1
    2aa8:	b1 1d       	adc	r27, r1
    2aaa:	80 93 df 20 	sts	0x20DF, r24	; 0x8020df <time>
    2aae:	90 93 e0 20 	sts	0x20E0, r25	; 0x8020e0 <time+0x1>
    2ab2:	a0 93 e1 20 	sts	0x20E1, r26	; 0x8020e1 <time+0x2>
    2ab6:	b0 93 e2 20 	sts	0x20E2, r27	; 0x8020e2 <time+0x3>
}
    2aba:	bf 91       	pop	r27
    2abc:	af 91       	pop	r26
    2abe:	9f 91       	pop	r25
    2ac0:	8f 91       	pop	r24
    2ac2:	0f 90       	pop	r0
    2ac4:	09 be       	out	0x39, r0	; 57
    2ac6:	0f 90       	pop	r0
    2ac8:	08 be       	out	0x38, r0	; 56
    2aca:	0f 90       	pop	r0
    2acc:	0f be       	out	0x3f, r0	; 63
    2ace:	0f 90       	pop	r0
    2ad0:	1f 90       	pop	r1
    2ad2:	18 95       	reti

00002ad4 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    2ad4:	04 c0       	rjmp	.+8      	; 0x2ade <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    2ad6:	61 50       	subi	r22, 0x01	; 1
    2ad8:	71 09       	sbc	r23, r1
    2ada:	81 09       	sbc	r24, r1
    2adc:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    2ade:	61 15       	cp	r22, r1
    2ae0:	71 05       	cpc	r23, r1
    2ae2:	81 05       	cpc	r24, r1
    2ae4:	91 05       	cpc	r25, r1
    2ae6:	b9 f7       	brne	.-18     	; 0x2ad6 <__portable_avr_delay_cycles+0x2>
    2ae8:	08 95       	ret

00002aea <SPI_init>:
uint16_t c5;
uint16_t c6;


void SPI_init(void){
	PORTC.DIRSET = 0b10110000;
    2aea:	e0 e4       	ldi	r30, 0x40	; 64
    2aec:	f6 e0       	ldi	r31, 0x06	; 6
    2aee:	80 eb       	ldi	r24, 0xB0	; 176
    2af0:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRCLR = 0b01000000;
    2af2:	90 e4       	ldi	r25, 0x40	; 64
    2af4:	92 83       	std	Z+2, r25	; 0x02
	PORTC.OUTSET = 0b10110000;
    2af6:	85 83       	std	Z+5, r24	; 0x05
	SPIC.CTRL = 0b01010011;
    2af8:	83 e5       	ldi	r24, 0x53	; 83
    2afa:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <__TEXT_REGION_LENGTH__+0x7008c0>
    2afe:	08 95       	ret

00002b00 <SPI_write>:
}

void SPI_write(uint8_t data){
	SPIC.DATA = data;
    2b00:	80 93 c3 08 	sts	0x08C3, r24	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
	while(!(SPIC.STATUS>>7));
    2b04:	e0 ec       	ldi	r30, 0xC0	; 192
    2b06:	f8 e0       	ldi	r31, 0x08	; 8
    2b08:	82 81       	ldd	r24, Z+2	; 0x02
    2b0a:	88 23       	and	r24, r24
    2b0c:	ec f7       	brge	.-6      	; 0x2b08 <SPI_write+0x8>
}
    2b0e:	08 95       	ret

00002b10 <spi_read>:

uint8_t spi_read (void){
	SPI_write(0xFF);
    2b10:	8f ef       	ldi	r24, 0xFF	; 255
    2b12:	f6 df       	rcall	.-20     	; 0x2b00 <SPI_write>
	return SPIC.DATA;
    2b14:	80 91 c3 08 	lds	r24, 0x08C3	; 0x8008c3 <__TEXT_REGION_LENGTH__+0x7008c3>
}
    2b18:	08 95       	ret

00002b1a <prom_read>:
	//printf("c5: %u \n", c5);
	c6 = prom_read(0xAC);
	//printf("c6: %u \n", c6);
}

uint16_t prom_read(uint8_t command){
    2b1a:	ff 92       	push	r15
    2b1c:	0f 93       	push	r16
    2b1e:	1f 93       	push	r17
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
	uint16_t data;
	PORTC.OUTCLR = 0b00010000;
    2b24:	00 e4       	ldi	r16, 0x40	; 64
    2b26:	16 e0       	ldi	r17, 0x06	; 6
    2b28:	68 94       	set
    2b2a:	ff 24       	eor	r15, r15
    2b2c:	f4 f8       	bld	r15, 4
    2b2e:	f8 01       	movw	r30, r16
	SPI_write(command);
	data = ((uint16_t)spi_read())<<8;	//Bitshifting
    2b30:	f6 82       	std	Z+6, r15	; 0x06
    2b32:	e6 df       	rcall	.-52     	; 0x2b00 <SPI_write>
    2b34:	ed df       	rcall	.-38     	; 0x2b10 <spi_read>
    2b36:	c8 2f       	mov	r28, r24
    2b38:	d0 e0       	ldi	r29, 0x00	; 0
	data += spi_read();
    2b3a:	dc 2f       	mov	r29, r28
    2b3c:	cc 27       	eor	r28, r28
    2b3e:	e8 df       	rcall	.-48     	; 0x2b10 <spi_read>
    2b40:	c8 0f       	add	r28, r24
	PORTC.OUTSET = 0b00010000;
    2b42:	d1 1d       	adc	r29, r1
    2b44:	f8 01       	movw	r30, r16
	delay_ms(1);
    2b46:	f5 82       	std	Z+5, r15	; 0x05
    2b48:	66 ed       	ldi	r22, 0xD6	; 214
    2b4a:	74 e1       	ldi	r23, 0x14	; 20
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
	//printf("data: %lu \n", data);
	return data;
}
    2b50:	c1 df       	rcall	.-126    	; 0x2ad4 <__portable_avr_delay_cycles>
    2b52:	ce 01       	movw	r24, r28
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	1f 91       	pop	r17
    2b5a:	0f 91       	pop	r16
    2b5c:	ff 90       	pop	r15
    2b5e:	08 95       	ret

00002b60 <ms5607_init>:
uint8_t spi_read (void){
	SPI_write(0xFF);
	return SPIC.DATA;
}

void ms5607_init(void){
    2b60:	1f 93       	push	r17
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
	PORTC.OUTCLR = 0b00010000;
    2b66:	c0 e4       	ldi	r28, 0x40	; 64
    2b68:	d6 e0       	ldi	r29, 0x06	; 6
    2b6a:	10 e1       	ldi	r17, 0x10	; 16
    2b6c:	1e 83       	std	Y+6, r17	; 0x06
	SPI_write(0x1E);
    2b6e:	8e e1       	ldi	r24, 0x1E	; 30
    2b70:	c7 df       	rcall	.-114    	; 0x2b00 <SPI_write>
	PORTC.OUTSET = 0b00010000;
    2b72:	1d 83       	std	Y+5, r17	; 0x05
	delay_ms(10);
    2b74:	66 e5       	ldi	r22, 0x56	; 86
    2b76:	70 ed       	ldi	r23, 0xD0	; 208
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
	c1 = prom_read(0xA2);
    2b7c:	ab df       	rcall	.-170    	; 0x2ad4 <__portable_avr_delay_cycles>
    2b7e:	82 ea       	ldi	r24, 0xA2	; 162
    2b80:	cc df       	rcall	.-104    	; 0x2b1a <prom_read>
    2b82:	80 93 a6 23 	sts	0x23A6, r24	; 0x8023a6 <c1>
    2b86:	90 93 a7 23 	sts	0x23A7, r25	; 0x8023a7 <c1+0x1>
	//printf("c1: %u \n", c1);
	c2 = prom_read(0xA4);
    2b8a:	84 ea       	ldi	r24, 0xA4	; 164
    2b8c:	c6 df       	rcall	.-116    	; 0x2b1a <prom_read>
    2b8e:	80 93 a2 23 	sts	0x23A2, r24	; 0x8023a2 <c2>
    2b92:	90 93 a3 23 	sts	0x23A3, r25	; 0x8023a3 <c2+0x1>
	//printf("c2: %u \n", c2);
	c3 = prom_read(0xA6);
    2b96:	86 ea       	ldi	r24, 0xA6	; 166
    2b98:	c0 df       	rcall	.-128    	; 0x2b1a <prom_read>
    2b9a:	80 93 a8 23 	sts	0x23A8, r24	; 0x8023a8 <c3>
    2b9e:	90 93 a9 23 	sts	0x23A9, r25	; 0x8023a9 <c3+0x1>
	//printf("c3: %u \n", c3);
	c4 = prom_read(0xA8);
    2ba2:	88 ea       	ldi	r24, 0xA8	; 168
    2ba4:	ba df       	rcall	.-140    	; 0x2b1a <prom_read>
    2ba6:	80 93 a0 23 	sts	0x23A0, r24	; 0x8023a0 <c4>
    2baa:	90 93 a1 23 	sts	0x23A1, r25	; 0x8023a1 <c4+0x1>
	//printf("c4: %u \n", c4);
	c5 = prom_read(0xAA);
    2bae:	8a ea       	ldi	r24, 0xAA	; 170
    2bb0:	b4 df       	rcall	.-152    	; 0x2b1a <prom_read>
    2bb2:	80 93 a4 23 	sts	0x23A4, r24	; 0x8023a4 <c5>
    2bb6:	90 93 a5 23 	sts	0x23A5, r25	; 0x8023a5 <c5+0x1>
	//printf("c5: %u \n", c5);
	c6 = prom_read(0xAC);
    2bba:	8c ea       	ldi	r24, 0xAC	; 172
    2bbc:	ae df       	rcall	.-164    	; 0x2b1a <prom_read>
    2bbe:	80 93 9e 23 	sts	0x239E, r24	; 0x80239e <c6>
    2bc2:	90 93 9f 23 	sts	0x239F, r25	; 0x80239f <c6+0x1>
	//printf("c6: %u \n", c6);
}
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	1f 91       	pop	r17
    2bcc:	08 95       	ret

00002bce <data_read>:
	delay_ms(1);
	//printf("data: %lu \n", data);
	return data;
}

uint32_t data_read(uint8_t command){
    2bce:	8f 92       	push	r8
    2bd0:	9f 92       	push	r9
    2bd2:	af 92       	push	r10
    2bd4:	bf 92       	push	r11
    2bd6:	cf 92       	push	r12
    2bd8:	df 92       	push	r13
    2bda:	ef 92       	push	r14
    2bdc:	ff 92       	push	r15
    2bde:	1f 93       	push	r17
    2be0:	cf 93       	push	r28
    2be2:	df 93       	push	r29
	uint32_t data;
	PORTC.OUTCLR = 0b00010000;
    2be4:	c0 e4       	ldi	r28, 0x40	; 64
    2be6:	d6 e0       	ldi	r29, 0x06	; 6
    2be8:	10 e1       	ldi	r17, 0x10	; 16
	SPI_write(command);
    2bea:	1e 83       	std	Y+6, r17	; 0x06
	PORTC.OUTSET = 0b00010000;
    2bec:	89 df       	rcall	.-238    	; 0x2b00 <SPI_write>
	delay_ms(9);
    2bee:	1d 83       	std	Y+5, r17	; 0x05
    2bf0:	61 e8       	ldi	r22, 0x81	; 129
    2bf2:	7b eb       	ldi	r23, 0xBB	; 187
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
	PORTC.OUTCLR = 0b00010000;
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	6d df       	rcall	.-294    	; 0x2ad4 <__portable_avr_delay_cycles>
    2bfa:	1e 83       	std	Y+6, r17	; 0x06
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	80 df       	rcall	.-256    	; 0x2b00 <SPI_write>
    2c00:	87 df       	rcall	.-242    	; 0x2b10 <spi_read>
    2c02:	c8 2e       	mov	r12, r24
    2c04:	d1 2c       	mov	r13, r1
    2c06:	e1 2c       	mov	r14, r1
    2c08:	f1 2c       	mov	r15, r1
    2c0a:	56 01       	movw	r10, r12
    2c0c:	99 24       	eor	r9, r9
    2c0e:	88 24       	eor	r8, r8
    2c10:	7f df       	rcall	.-258    	; 0x2b10 <spi_read>
    2c12:	c8 2e       	mov	r12, r24
    2c14:	d1 2c       	mov	r13, r1
    2c16:	e1 2c       	mov	r14, r1
    2c18:	f1 2c       	mov	r15, r1
    2c1a:	fe 2c       	mov	r15, r14
    2c1c:	ed 2c       	mov	r14, r13
    2c1e:	dc 2c       	mov	r13, r12
    2c20:	cc 24       	eor	r12, r12
    2c22:	c8 0c       	add	r12, r8
    2c24:	d9 1c       	adc	r13, r9
    2c26:	ea 1c       	adc	r14, r10
    2c28:	fb 1c       	adc	r15, r11
    2c2a:	72 df       	rcall	.-284    	; 0x2b10 <spi_read>
    2c2c:	1d 83       	std	Y+5, r17	; 0x05
    2c2e:	a7 01       	movw	r20, r14
    2c30:	96 01       	movw	r18, r12
    2c32:	28 0f       	add	r18, r24
    2c34:	31 1d       	adc	r19, r1
    2c36:	41 1d       	adc	r20, r1
    2c38:	51 1d       	adc	r21, r1
    2c3a:	ca 01       	movw	r24, r20
    2c3c:	b9 01       	movw	r22, r18
    2c3e:	df 91       	pop	r29
    2c40:	cf 91       	pop	r28
    2c42:	1f 91       	pop	r17
    2c44:	ff 90       	pop	r15
    2c46:	ef 90       	pop	r14
    2c48:	df 90       	pop	r13
    2c4a:	cf 90       	pop	r12
    2c4c:	bf 90       	pop	r11
    2c4e:	af 90       	pop	r10
    2c50:	9f 90       	pop	r9
    2c52:	8f 90       	pop	r8
    2c54:	08 95       	ret

00002c56 <get_pressure>:
    2c56:	2f 92       	push	r2
    2c58:	3f 92       	push	r3
    2c5a:	4f 92       	push	r4
    2c5c:	5f 92       	push	r5
    2c5e:	6f 92       	push	r6
    2c60:	7f 92       	push	r7
    2c62:	8f 92       	push	r8
    2c64:	9f 92       	push	r9
    2c66:	af 92       	push	r10
    2c68:	bf 92       	push	r11
    2c6a:	cf 92       	push	r12
    2c6c:	df 92       	push	r13
    2c6e:	ef 92       	push	r14
    2c70:	ff 92       	push	r15
    2c72:	0f 93       	push	r16
    2c74:	1f 93       	push	r17
    2c76:	cf 93       	push	r28
    2c78:	df 93       	push	r29
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	61 97       	sbiw	r28, 0x11	; 17
    2c80:	cd bf       	out	0x3d, r28	; 61
    2c82:	de bf       	out	0x3e, r29	; 62
    2c84:	88 e4       	ldi	r24, 0x48	; 72
    2c86:	a3 df       	rcall	.-186    	; 0x2bce <data_read>
    2c88:	6d 83       	std	Y+5, r22	; 0x05
    2c8a:	7e 83       	std	Y+6, r23	; 0x06
    2c8c:	8f 83       	std	Y+7, r24	; 0x07
    2c8e:	98 87       	std	Y+8, r25	; 0x08
    2c90:	88 e5       	ldi	r24, 0x58	; 88
    2c92:	9d df       	rcall	.-198    	; 0x2bce <data_read>
    2c94:	20 91 a4 23 	lds	r18, 0x23A4	; 0x8023a4 <c5>
    2c98:	30 91 a5 23 	lds	r19, 0x23A5	; 0x8023a5 <c5+0x1>
    2c9c:	89 01       	movw	r16, r18
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	32 2f       	mov	r19, r18
    2ca4:	21 2f       	mov	r18, r17
    2ca6:	10 2f       	mov	r17, r16
    2ca8:	00 27       	eor	r16, r16
    2caa:	6b 01       	movw	r12, r22
    2cac:	7c 01       	movw	r14, r24
    2cae:	c0 1a       	sub	r12, r16
    2cb0:	d1 0a       	sbc	r13, r17
    2cb2:	e2 0a       	sbc	r14, r18
    2cb4:	f3 0a       	sbc	r15, r19
    2cb6:	c9 82       	std	Y+1, r12	; 0x01
    2cb8:	da 82       	std	Y+2, r13	; 0x02
    2cba:	eb 82       	std	Y+3, r14	; 0x03
    2cbc:	fc 82       	std	Y+4, r15	; 0x04
    2cbe:	20 90 9e 23 	lds	r2, 0x239E	; 0x80239e <c6>
    2cc2:	30 90 9f 23 	lds	r3, 0x239F	; 0x80239f <c6+0x1>
    2cc6:	d7 01       	movw	r26, r14
    2cc8:	c6 01       	movw	r24, r12
    2cca:	bb 0f       	add	r27, r27
    2ccc:	88 0b       	sbc	r24, r24
    2cce:	98 2f       	mov	r25, r24
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	a9 80       	ldd	r10, Y+1	; 0x01
    2cd4:	ba 80       	ldd	r11, Y+2	; 0x02
    2cd6:	cb 80       	ldd	r12, Y+3	; 0x03
    2cd8:	dc 80       	ldd	r13, Y+4	; 0x04
    2cda:	e8 2e       	mov	r14, r24
    2cdc:	f8 2e       	mov	r15, r24
    2cde:	08 2f       	mov	r16, r24
    2ce0:	18 2f       	mov	r17, r24
    2ce2:	22 2d       	mov	r18, r2
    2ce4:	33 2d       	mov	r19, r3
    2ce6:	40 e0       	ldi	r20, 0x00	; 0
    2ce8:	50 e0       	ldi	r21, 0x00	; 0
    2cea:	60 e0       	ldi	r22, 0x00	; 0
    2cec:	70 e0       	ldi	r23, 0x00	; 0
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	90 e0       	ldi	r25, 0x00	; 0
    2cf2:	0e 94 17 23 	call	0x462e	; 0x462e <__muldi3>
    2cf6:	89 8b       	std	Y+17, r24	; 0x11
    2cf8:	b2 2f       	mov	r27, r18
    2cfa:	f3 2f       	mov	r31, r19
    2cfc:	e4 2f       	mov	r30, r20
    2cfe:	95 2e       	mov	r9, r21
    2d00:	86 2e       	mov	r8, r22
    2d02:	77 2e       	mov	r7, r23
    2d04:	a8 2e       	mov	r10, r24
    2d06:	b9 2e       	mov	r11, r25
    2d08:	a0 e0       	ldi	r26, 0x00	; 0
    2d0a:	0e 94 b1 23 	call	0x4762	; 0x4762 <__cmpdi2_s8>
    2d0e:	84 f4       	brge	.+32     	; 0x2d30 <get_pressure+0xda>
    2d10:	21 50       	subi	r18, 0x01	; 1
    2d12:	31 09       	sbc	r19, r1
    2d14:	40 48       	sbci	r20, 0x80	; 128
    2d16:	5f 4f       	sbci	r21, 0xFF	; 255
    2d18:	6f 4f       	sbci	r22, 0xFF	; 255
    2d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d20:	b2 2f       	mov	r27, r18
    2d22:	f3 2f       	mov	r31, r19
    2d24:	e4 2f       	mov	r30, r20
    2d26:	95 2e       	mov	r9, r21
    2d28:	86 2e       	mov	r8, r22
    2d2a:	77 2e       	mov	r7, r23
    2d2c:	a8 2e       	mov	r10, r24
    2d2e:	b9 2e       	mov	r11, r25
    2d30:	2b 2f       	mov	r18, r27
    2d32:	3f 2f       	mov	r19, r31
    2d34:	4e 2f       	mov	r20, r30
    2d36:	59 2d       	mov	r21, r9
    2d38:	68 2d       	mov	r22, r8
    2d3a:	77 2d       	mov	r23, r7
    2d3c:	8a 2d       	mov	r24, r10
    2d3e:	9b 2d       	mov	r25, r11
    2d40:	07 e1       	ldi	r16, 0x17	; 23
    2d42:	0e 94 81 23 	call	0x4702	; 0x4702 <__ashrdi3>
    2d46:	82 2e       	mov	r8, r18
    2d48:	93 2e       	mov	r9, r19
    2d4a:	00 e3       	ldi	r16, 0x30	; 48
    2d4c:	80 1a       	sub	r8, r16
    2d4e:	08 ef       	ldi	r16, 0xF8	; 248
    2d50:	90 0a       	sbc	r9, r16
    2d52:	09 2c       	mov	r0, r9
    2d54:	00 0c       	add	r0, r0
    2d56:	aa 08       	sbc	r10, r10
    2d58:	bb 08       	sbc	r11, r11
    2d5a:	80 92 ef 20 	sts	0x20EF, r8	; 0x8020ef <TEMP>
    2d5e:	90 92 f0 20 	sts	0x20F0, r9	; 0x8020f0 <TEMP+0x1>
    2d62:	a0 92 f1 20 	sts	0x20F1, r10	; 0x8020f1 <TEMP+0x2>
    2d66:	b0 92 f2 20 	sts	0x20F2, r11	; 0x8020f2 <TEMP+0x3>
    2d6a:	a0 91 a8 23 	lds	r26, 0x23A8	; 0x8023a8 <c3>
    2d6e:	b0 91 a9 23 	lds	r27, 0x23A9	; 0x8023a9 <c3+0x1>
    2d72:	29 81       	ldd	r18, Y+1	; 0x01
    2d74:	3a 81       	ldd	r19, Y+2	; 0x02
    2d76:	4b 81       	ldd	r20, Y+3	; 0x03
    2d78:	5c 81       	ldd	r21, Y+4	; 0x04
    2d7a:	0e 94 07 23 	call	0x460e	; 0x460e <__muluhisi3>
    2d7e:	4b 01       	movw	r8, r22
    2d80:	5c 01       	movw	r10, r24
    2d82:	99 23       	and	r25, r25
    2d84:	2c f4       	brge	.+10     	; 0x2d90 <get_pressure+0x13a>
    2d86:	1f e7       	ldi	r17, 0x7F	; 127
    2d88:	81 0e       	add	r8, r17
    2d8a:	91 1c       	adc	r9, r1
    2d8c:	a1 1c       	adc	r10, r1
    2d8e:	b1 1c       	adc	r11, r1
    2d90:	24 01       	movw	r4, r8
    2d92:	35 01       	movw	r6, r10
    2d94:	68 94       	set
    2d96:	16 f8       	bld	r1, 6
    2d98:	75 94       	asr	r7
    2d9a:	67 94       	ror	r6
    2d9c:	57 94       	ror	r5
    2d9e:	47 94       	ror	r4
    2da0:	16 94       	lsr	r1
    2da2:	d1 f7       	brne	.-12     	; 0x2d98 <get_pressure+0x142>
    2da4:	bb 0c       	add	r11, r11
    2da6:	88 08       	sbc	r8, r8
    2da8:	98 2c       	mov	r9, r8
    2daa:	54 01       	movw	r10, r8
    2dac:	80 91 a6 23 	lds	r24, 0x23A6	; 0x8023a6 <c1>
    2db0:	90 91 a7 23 	lds	r25, 0x23A7	; 0x8023a7 <c1+0x1>
    2db4:	6c 01       	movw	r12, r24
    2db6:	e1 2c       	mov	r14, r1
    2db8:	f1 2c       	mov	r15, r1
    2dba:	00 e0       	ldi	r16, 0x00	; 0
    2dbc:	10 e0       	ldi	r17, 0x00	; 0
    2dbe:	98 01       	movw	r18, r16
    2dc0:	89 87       	std	Y+9, r24	; 0x09
    2dc2:	da 86       	std	Y+10, r13	; 0x0a
    2dc4:	eb 86       	std	Y+11, r14	; 0x0b
    2dc6:	fc 86       	std	Y+12, r15	; 0x0c
    2dc8:	0d 87       	std	Y+13, r16	; 0x0d
    2dca:	1e 87       	std	Y+14, r17	; 0x0e
    2dcc:	2f 87       	std	Y+15, r18	; 0x0f
    2dce:	38 8b       	std	Y+16, r19	; 0x10
    2dd0:	28 2f       	mov	r18, r24
    2dd2:	3d 2d       	mov	r19, r13
    2dd4:	40 e0       	ldi	r20, 0x00	; 0
    2dd6:	50 e0       	ldi	r21, 0x00	; 0
    2dd8:	60 e0       	ldi	r22, 0x00	; 0
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	00 e1       	ldi	r16, 0x10	; 16
    2de2:	0e 94 68 23 	call	0x46d0	; 0x46d0 <__ashldi3>
    2de6:	f2 2f       	mov	r31, r18
    2de8:	e3 2f       	mov	r30, r19
    2dea:	c4 2e       	mov	r12, r20
    2dec:	d5 2e       	mov	r13, r21
    2dee:	e6 2e       	mov	r14, r22
    2df0:	f7 2e       	mov	r15, r23
    2df2:	08 2f       	mov	r16, r24
    2df4:	19 2f       	mov	r17, r25
    2df6:	24 2d       	mov	r18, r4
    2df8:	35 2d       	mov	r19, r5
    2dfa:	46 2d       	mov	r20, r6
    2dfc:	57 2d       	mov	r21, r7
    2dfe:	68 2d       	mov	r22, r8
    2e00:	78 2d       	mov	r23, r8
    2e02:	88 2d       	mov	r24, r8
    2e04:	98 2d       	mov	r25, r8
    2e06:	af 2e       	mov	r10, r31
    2e08:	be 2e       	mov	r11, r30
    2e0a:	0e 94 9f 23 	call	0x473e	; 0x473e <__adddi3>
    2e0e:	ed 80       	ldd	r14, Y+5	; 0x05
    2e10:	fe 80       	ldd	r15, Y+6	; 0x06
    2e12:	0f 81       	ldd	r16, Y+7	; 0x07
    2e14:	18 85       	ldd	r17, Y+8	; 0x08
    2e16:	17 01       	movw	r2, r14
    2e18:	28 01       	movw	r4, r16
    2e1a:	ae 2c       	mov	r10, r14
    2e1c:	b3 2c       	mov	r11, r3
    2e1e:	c4 2c       	mov	r12, r4
    2e20:	d5 2c       	mov	r13, r5
    2e22:	e1 2c       	mov	r14, r1
    2e24:	f1 2c       	mov	r15, r1
    2e26:	00 e0       	ldi	r16, 0x00	; 0
    2e28:	10 e0       	ldi	r17, 0x00	; 0
    2e2a:	0e 94 17 23 	call	0x462e	; 0x462e <__muldi3>
    2e2e:	12 2f       	mov	r17, r18
    2e30:	39 87       	std	Y+9, r19	; 0x09
    2e32:	4d 83       	std	Y+5, r20	; 0x05
    2e34:	b5 2f       	mov	r27, r21
    2e36:	f6 2f       	mov	r31, r22
    2e38:	e7 2f       	mov	r30, r23
    2e3a:	78 2e       	mov	r7, r24
    2e3c:	89 2e       	mov	r8, r25
    2e3e:	a0 e0       	ldi	r26, 0x00	; 0
    2e40:	0e 94 b1 23 	call	0x4762	; 0x4762 <__cmpdi2_s8>
    2e44:	84 f4       	brge	.+32     	; 0x2e66 <get_pressure+0x210>
    2e46:	21 50       	subi	r18, 0x01	; 1
    2e48:	31 09       	sbc	r19, r1
    2e4a:	40 4e       	sbci	r20, 0xE0	; 224
    2e4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e4e:	6f 4f       	sbci	r22, 0xFF	; 255
    2e50:	7f 4f       	sbci	r23, 0xFF	; 255
    2e52:	8f 4f       	sbci	r24, 0xFF	; 255
    2e54:	9f 4f       	sbci	r25, 0xFF	; 255
    2e56:	12 2f       	mov	r17, r18
    2e58:	39 87       	std	Y+9, r19	; 0x09
    2e5a:	4d 83       	std	Y+5, r20	; 0x05
    2e5c:	b5 2f       	mov	r27, r21
    2e5e:	f6 2f       	mov	r31, r22
    2e60:	e7 2f       	mov	r30, r23
    2e62:	78 2e       	mov	r7, r24
    2e64:	89 2e       	mov	r8, r25
    2e66:	21 2f       	mov	r18, r17
    2e68:	39 85       	ldd	r19, Y+9	; 0x09
    2e6a:	4d 81       	ldd	r20, Y+5	; 0x05
    2e6c:	5b 2f       	mov	r21, r27
    2e6e:	6f 2f       	mov	r22, r31
    2e70:	7e 2f       	mov	r23, r30
    2e72:	87 2d       	mov	r24, r7
    2e74:	98 2d       	mov	r25, r8
    2e76:	05 e1       	ldi	r16, 0x15	; 21
    2e78:	0e 94 81 23 	call	0x4702	; 0x4702 <__ashrdi3>
    2e7c:	52 2e       	mov	r5, r18
    2e7e:	63 2e       	mov	r6, r19
    2e80:	74 2e       	mov	r7, r20
    2e82:	59 8b       	std	Y+17, r21	; 0x11
    2e84:	69 87       	std	Y+9, r22	; 0x09
    2e86:	f7 2f       	mov	r31, r23
    2e88:	e8 2f       	mov	r30, r24
    2e8a:	49 2e       	mov	r4, r25
    2e8c:	a0 91 a0 23 	lds	r26, 0x23A0	; 0x8023a0 <c4>
    2e90:	b0 91 a1 23 	lds	r27, 0x23A1	; 0x8023a1 <c4+0x1>
    2e94:	29 81       	ldd	r18, Y+1	; 0x01
    2e96:	3a 81       	ldd	r19, Y+2	; 0x02
    2e98:	4b 81       	ldd	r20, Y+3	; 0x03
    2e9a:	5c 81       	ldd	r21, Y+4	; 0x04
    2e9c:	0e 94 07 23 	call	0x460e	; 0x460e <__muluhisi3>
    2ea0:	4b 01       	movw	r8, r22
    2ea2:	5c 01       	movw	r10, r24
    2ea4:	99 23       	and	r25, r25
    2ea6:	2c f4       	brge	.+10     	; 0x2eb2 <get_pressure+0x25c>
    2ea8:	0f e3       	ldi	r16, 0x3F	; 63
    2eaa:	80 0e       	add	r8, r16
    2eac:	91 1c       	adc	r9, r1
    2eae:	a1 1c       	adc	r10, r1
    2eb0:	b1 1c       	adc	r11, r1
    2eb2:	75 01       	movw	r14, r10
    2eb4:	64 01       	movw	r12, r8
    2eb6:	68 94       	set
    2eb8:	15 f8       	bld	r1, 5
    2eba:	f5 94       	asr	r15
    2ebc:	e7 94       	ror	r14
    2ebe:	d7 94       	ror	r13
    2ec0:	c7 94       	ror	r12
    2ec2:	16 94       	lsr	r1
    2ec4:	d1 f7       	brne	.-12     	; 0x2eba <get_pressure+0x264>
    2ec6:	bb 0c       	add	r11, r11
    2ec8:	88 08       	sbc	r8, r8
    2eca:	98 2c       	mov	r9, r8
    2ecc:	54 01       	movw	r10, r8
    2ece:	20 91 a2 23 	lds	r18, 0x23A2	; 0x8023a2 <c2>
    2ed2:	30 91 a3 23 	lds	r19, 0x23A3	; 0x8023a3 <c2+0x1>
    2ed6:	a9 01       	movw	r20, r18
    2ed8:	35 2f       	mov	r19, r21
    2eda:	40 e0       	ldi	r20, 0x00	; 0
    2edc:	50 e0       	ldi	r21, 0x00	; 0
    2ede:	60 e0       	ldi	r22, 0x00	; 0
    2ee0:	70 e0       	ldi	r23, 0x00	; 0
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	01 e1       	ldi	r16, 0x11	; 17
    2ee8:	0e 94 68 23 	call	0x46d0	; 0x46d0 <__ashldi3>
    2eec:	22 2e       	mov	r2, r18
    2eee:	33 2e       	mov	r3, r19
    2ef0:	49 83       	std	Y+1, r20	; 0x01
    2ef2:	5d 83       	std	Y+5, r21	; 0x05
    2ef4:	b6 2f       	mov	r27, r22
    2ef6:	a7 2f       	mov	r26, r23
    2ef8:	08 2f       	mov	r16, r24
    2efa:	19 2f       	mov	r17, r25
    2efc:	2c 2d       	mov	r18, r12
    2efe:	3d 2d       	mov	r19, r13
    2f00:	4e 2d       	mov	r20, r14
    2f02:	5f 2d       	mov	r21, r15
    2f04:	68 2d       	mov	r22, r8
    2f06:	78 2d       	mov	r23, r8
    2f08:	88 2d       	mov	r24, r8
    2f0a:	98 2d       	mov	r25, r8
    2f0c:	a2 2c       	mov	r10, r2
    2f0e:	b3 2c       	mov	r11, r3
    2f10:	c9 80       	ldd	r12, Y+1	; 0x01
    2f12:	dd 80       	ldd	r13, Y+5	; 0x05
    2f14:	eb 2e       	mov	r14, r27
    2f16:	fa 2e       	mov	r15, r26
    2f18:	0e 94 9f 23 	call	0x473e	; 0x473e <__adddi3>
    2f1c:	a2 2e       	mov	r10, r18
    2f1e:	b3 2e       	mov	r11, r19
    2f20:	c4 2e       	mov	r12, r20
    2f22:	d5 2e       	mov	r13, r21
    2f24:	e6 2e       	mov	r14, r22
    2f26:	f7 2e       	mov	r15, r23
    2f28:	08 2f       	mov	r16, r24
    2f2a:	19 2f       	mov	r17, r25
    2f2c:	25 2d       	mov	r18, r5
    2f2e:	36 2d       	mov	r19, r6
    2f30:	47 2d       	mov	r20, r7
    2f32:	59 89       	ldd	r21, Y+17	; 0x11
    2f34:	69 85       	ldd	r22, Y+9	; 0x09
    2f36:	7f 2f       	mov	r23, r31
    2f38:	8e 2f       	mov	r24, r30
    2f3a:	94 2d       	mov	r25, r4
    2f3c:	0e 94 a8 23 	call	0x4750	; 0x4750 <__subdi3>
    2f40:	12 2f       	mov	r17, r18
    2f42:	3d 83       	std	Y+5, r19	; 0x05
    2f44:	49 83       	std	Y+1, r20	; 0x01
    2f46:	b5 2f       	mov	r27, r21
    2f48:	f6 2f       	mov	r31, r22
    2f4a:	e7 2f       	mov	r30, r23
    2f4c:	78 2e       	mov	r7, r24
    2f4e:	89 2e       	mov	r8, r25
    2f50:	a0 e0       	ldi	r26, 0x00	; 0
    2f52:	0e 94 b1 23 	call	0x4762	; 0x4762 <__cmpdi2_s8>
    2f56:	84 f4       	brge	.+32     	; 0x2f78 <get_pressure+0x322>
    2f58:	21 50       	subi	r18, 0x01	; 1
    2f5a:	30 48       	sbci	r19, 0x80	; 128
    2f5c:	4f 4f       	sbci	r20, 0xFF	; 255
    2f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f60:	6f 4f       	sbci	r22, 0xFF	; 255
    2f62:	7f 4f       	sbci	r23, 0xFF	; 255
    2f64:	8f 4f       	sbci	r24, 0xFF	; 255
    2f66:	9f 4f       	sbci	r25, 0xFF	; 255
    2f68:	12 2f       	mov	r17, r18
    2f6a:	3d 83       	std	Y+5, r19	; 0x05
    2f6c:	49 83       	std	Y+1, r20	; 0x01
    2f6e:	b5 2f       	mov	r27, r21
    2f70:	f6 2f       	mov	r31, r22
    2f72:	e7 2f       	mov	r30, r23
    2f74:	78 2e       	mov	r7, r24
    2f76:	89 2e       	mov	r8, r25
    2f78:	21 2f       	mov	r18, r17
    2f7a:	3d 81       	ldd	r19, Y+5	; 0x05
    2f7c:	49 81       	ldd	r20, Y+1	; 0x01
    2f7e:	5b 2f       	mov	r21, r27
    2f80:	6f 2f       	mov	r22, r31
    2f82:	7e 2f       	mov	r23, r30
    2f84:	87 2d       	mov	r24, r7
    2f86:	98 2d       	mov	r25, r8
    2f88:	0f e0       	ldi	r16, 0x0F	; 15
    2f8a:	0e 94 81 23 	call	0x4702	; 0x4702 <__ashrdi3>
    2f8e:	62 2f       	mov	r22, r18
    2f90:	73 2f       	mov	r23, r19
    2f92:	84 2f       	mov	r24, r20
    2f94:	95 2f       	mov	r25, r21
    2f96:	61 96       	adiw	r28, 0x11	; 17
    2f98:	cd bf       	out	0x3d, r28	; 61
    2f9a:	de bf       	out	0x3e, r29	; 62
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	ff 90       	pop	r15
    2fa6:	ef 90       	pop	r14
    2fa8:	df 90       	pop	r13
    2faa:	cf 90       	pop	r12
    2fac:	bf 90       	pop	r11
    2fae:	af 90       	pop	r10
    2fb0:	9f 90       	pop	r9
    2fb2:	8f 90       	pop	r8
    2fb4:	7f 90       	pop	r7
    2fb6:	6f 90       	pop	r6
    2fb8:	5f 90       	pop	r5
    2fba:	4f 90       	pop	r4
    2fbc:	3f 90       	pop	r3
    2fbe:	2f 90       	pop	r2
    2fc0:	08 95       	ret

00002fc2 <adc_init>:
#include <asf.h>
#include <math.h>
#include "thermistor.h"


void adc_init(void){	//This is for PA0... mostly
    2fc2:	ff 92       	push	r15
    2fc4:	0f 93       	push	r16
    2fc6:	1f 93       	push	r17
    2fc8:	cf 93       	push	r28
    2fca:	df 93       	push	r29
	PORTA.DIRCLR = 0b00000001;
    2fcc:	e0 e0       	ldi	r30, 0x00	; 0
    2fce:	f6 e0       	ldi	r31, 0x06	; 6
    2fd0:	ff 24       	eor	r15, r15
    2fd2:	f3 94       	inc	r15
    2fd4:	f2 82       	std	Z+2, r15	; 0x02
	PORTA.DIR = 0b11111110;
    2fd6:	8e ef       	ldi	r24, 0xFE	; 254
    2fd8:	80 83       	st	Z, r24
	ADCA.CTRLA = 0b00000001;
    2fda:	c0 e0       	ldi	r28, 0x00	; 0
    2fdc:	d2 e0       	ldi	r29, 0x02	; 2
    2fde:	f8 82       	st	Y, r15
	ADCA.CTRLB = 0b00000000;
    2fe0:	19 82       	std	Y+1, r1	; 0x01
	ADCA.REFCTRL = 0b00010000;
    2fe2:	80 e1       	ldi	r24, 0x10	; 16
    2fe4:	8a 83       	std	Y+2, r24	; 0x02
	ADCA.PRESCALER = 0b00000101;
    2fe6:	85 e0       	ldi	r24, 0x05	; 5
    2fe8:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param address Byte offset into the signature row
 */
static inline uint8_t nvm_read_production_signature_row(uint8_t address)
{
	return nvm_read_byte(NVM_CMD_READ_CALIB_ROW_gc, address);
    2fea:	61 e2       	ldi	r22, 0x21	; 33
    2fec:	70 e0       	ldi	r23, 0x00	; 0
    2fee:	82 e0       	ldi	r24, 0x02	; 2
    2ff0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <nvm_read_byte>
	uint16_t data;

	switch (cal) {
#ifdef ADCA
	case ADC_CAL_ADCA:
		data = nvm_read_production_signature_row(ADCACAL1);
    2ff4:	08 2f       	mov	r16, r24
    2ff6:	10 e0       	ldi	r17, 0x00	; 0
		data <<= 8;
    2ff8:	10 2f       	mov	r17, r16
    2ffa:	00 27       	eor	r16, r16
    2ffc:	60 e2       	ldi	r22, 0x20	; 32
    2ffe:	70 e0       	ldi	r23, 0x00	; 0
    3000:	82 e0       	ldi	r24, 0x02	; 2
    3002:	0e 94 fd 05 	call	0xbfa	; 0xbfa <nvm_read_byte>
		data |= nvm_read_production_signature_row(ADCACAL0);
    3006:	08 2b       	or	r16, r24
	ADCA.CAL = adc_get_calibration_data(ADC_CAL_ADCA);
    3008:	0c 87       	std	Y+12, r16	; 0x0c
    300a:	1d 87       	std	Y+13, r17	; 0x0d
	
	ADCA.CH0.CTRL = 0b00000001;
    300c:	f8 a2       	std	Y+32, r15	; 0x20
	ADCA.CH0.MUXCTRL = 0b00000000;
    300e:	19 a2       	std	Y+33, r1	; 0x21
}
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	1f 91       	pop	r17
    3016:	0f 91       	pop	r16
    3018:	ff 90       	pop	r15
    301a:	08 95       	ret

0000301c <getVoltage>:


float getVoltage(void){
	ADCA.CH0.CTRL  |= 0b10000000;
    301c:	e0 e0       	ldi	r30, 0x00	; 0
    301e:	f2 e0       	ldi	r31, 0x02	; 2
    3020:	80 a1       	ldd	r24, Z+32	; 0x20
    3022:	80 68       	ori	r24, 0x80	; 128
    3024:	80 a3       	std	Z+32, r24	; 0x20
	//printf("one");
	while(ADCA.CH0.INTFLAGS == 0);
    3026:	83 a1       	ldd	r24, Z+35	; 0x23
    3028:	88 23       	and	r24, r24
    302a:	e9 f3       	breq	.-6      	; 0x3026 <getVoltage+0xa>
	//printf("two");
	//ADCA.CH0.INTFLAGS = 0;
	//printf("three");
	uint16_t adcReading = ADCA.CH0.RES;
    302c:	60 91 24 02 	lds	r22, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
    3030:	70 91 25 02 	lds	r23, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
	//printf("ADC reading = %u\n", adcReading);
	float voltage = 0.0004899 * (float)(adcReading) - 0.0856326;	//We have to find these numbers by applying differing voltage, printing ADC readings, and solve equation
	//printf("voltage: %f \n", voltage);
	return voltage;
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	e0 d4       	rcall	.+2496   	; 0x39fa <__floatunsisf>
    303a:	22 ea       	ldi	r18, 0xA2	; 162
    303c:	3c e6       	ldi	r19, 0x6C	; 108
    303e:	40 e0       	ldi	r20, 0x00	; 0
    3040:	5a e3       	ldi	r21, 0x3A	; 58
    3042:	ae d5       	rcall	.+2908   	; 0x3ba0 <__mulsf3>
    3044:	25 e2       	ldi	r18, 0x25	; 37
    3046:	30 e6       	ldi	r19, 0x60	; 96
    3048:	4f ea       	ldi	r20, 0xAF	; 175
    304a:	5d e3       	ldi	r21, 0x3D	; 61
	
}
    304c:	d8 c3       	rjmp	.+1968   	; 0x37fe <__subsf3>

0000304e <getTemperature>:
	uint16_t voltage = getVoltage();
	uint16_t current = (voltage/10000);
	return current;
}
*/
float getTemperature(void){
    304e:	8f 92       	push	r8
    3050:	9f 92       	push	r9
    3052:	af 92       	push	r10
    3054:	bf 92       	push	r11
    3056:	cf 92       	push	r12
    3058:	df 92       	push	r13
    305a:	ef 92       	push	r14
	float voltage = getVoltage();
    305c:	ff 92       	push	r15
    305e:	de df       	rcall	.-68     	; 0x301c <getVoltage>
    3060:	6b 01       	movw	r12, r22
	//uint16_t current = getCurrent();
	//uint16_t resistance = voltage/current;
	float resistance = (voltage*10000)/(voltage-3.3);
	//printf("resistance = %f \n", resistance);
	uint32_t temperature = 3977.0/(log(resistance/(10000.0*pow(2.71828,(-3977.0/298.15)))));
    3062:	7c 01       	movw	r14, r24
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e4       	ldi	r19, 0x40	; 64
    3068:	4c e1       	ldi	r20, 0x1C	; 28
    306a:	56 e4       	ldi	r21, 0x46	; 70
    306c:	99 d5       	rcall	.+2866   	; 0x3ba0 <__mulsf3>
    306e:	4b 01       	movw	r8, r22
    3070:	5c 01       	movw	r10, r24
    3072:	23 e3       	ldi	r18, 0x33	; 51
    3074:	33 e3       	ldi	r19, 0x33	; 51
    3076:	43 e5       	ldi	r20, 0x53	; 83
    3078:	50 e4       	ldi	r21, 0x40	; 64
    307a:	c7 01       	movw	r24, r14
    307c:	b6 01       	movw	r22, r12
    307e:	bf d3       	rcall	.+1918   	; 0x37fe <__subsf3>
    3080:	9b 01       	movw	r18, r22
    3082:	ac 01       	movw	r20, r24
    3084:	c5 01       	movw	r24, r10
    3086:	b4 01       	movw	r22, r8
    3088:	1f d4       	rcall	.+2110   	; 0x38c8 <__divsf3>
    308a:	2b e5       	ldi	r18, 0x5B	; 91
    308c:	30 ef       	ldi	r19, 0xF0	; 240
    308e:	43 e8       	ldi	r20, 0x83	; 131
    3090:	5c e3       	ldi	r21, 0x3C	; 60
	//float temperature = pow((.003351016+.0002569850*log(resistance/10000)+.000002620131*pow(log(resistance/10000),2)),-1);
	return temperature;
    3092:	1a d4       	rcall	.+2100   	; 0x38c8 <__divsf3>
    3094:	45 d5       	rcall	.+2698   	; 0x3b20 <log>
    3096:	9b 01       	movw	r18, r22
    3098:	ac 01       	movw	r20, r24
    309a:	60 e0       	ldi	r22, 0x00	; 0
    309c:	70 e9       	ldi	r23, 0x90	; 144
    309e:	88 e7       	ldi	r24, 0x78	; 120
    30a0:	95 e4       	ldi	r25, 0x45	; 69
    30a2:	12 d4       	rcall	.+2084   	; 0x38c8 <__divsf3>
	
	
	
    30a4:	7e d4       	rcall	.+2300   	; 0x39a2 <__fixunssfsi>
    30a6:	a9 d4       	rcall	.+2386   	; 0x39fa <__floatunsisf>
    30a8:	ff 90       	pop	r15
    30aa:	ef 90       	pop	r14
    30ac:	df 90       	pop	r13
    30ae:	cf 90       	pop	r12
    30b0:	bf 90       	pop	r11
    30b2:	af 90       	pop	r10
    30b4:	9f 90       	pop	r9
    30b6:	8f 90       	pop	r8
    30b8:	08 95       	ret

000030ba <usart_serial_getchar>:
		read_buffer[loc] = usart_getchar(usart_channel);
		loc++;
		
	}
	return read_buffer;
}
    30ba:	cf 93       	push	r28
    30bc:	df 93       	push	r29
    30be:	eb 01       	movw	r28, r22
    30c0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart_getchar>
    30c4:	88 83       	st	Y, r24
    30c6:	df 91       	pop	r29
    30c8:	cf 91       	pop	r28
    30ca:	08 95       	ret

000030cc <usart_serial_putchar>:
    30cc:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <usart_putchar>
    30d0:	08 95       	ret

000030d2 <usart_init>:
    30d2:	cf 93       	push	r28
    30d4:	df 93       	push	r29
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
    30da:	27 97       	sbiw	r28, 0x07	; 7
    30dc:	cd bf       	out	0x3d, r28	; 61
    30de:	de bf       	out	0x3e, r29	; 62
    30e0:	e0 e4       	ldi	r30, 0x40	; 64
    30e2:	f6 e0       	ldi	r31, 0x06	; 6
    30e4:	88 e0       	ldi	r24, 0x08	; 8
    30e6:	81 83       	std	Z+1, r24	; 0x01
    30e8:	85 83       	std	Z+5, r24	; 0x05
    30ea:	e0 e6       	ldi	r30, 0x60	; 96
    30ec:	f6 e0       	ldi	r31, 0x06	; 6
    30ee:	81 83       	std	Z+1, r24	; 0x01
    30f0:	85 83       	std	Z+5, r24	; 0x05
    30f2:	80 ea       	ldi	r24, 0xA0	; 160
    30f4:	98 e0       	ldi	r25, 0x08	; 8
    30f6:	80 93 e9 20 	sts	0x20E9, r24	; 0x8020e9 <stdio_base>
    30fa:	90 93 ea 20 	sts	0x20EA, r25	; 0x8020ea <stdio_base+0x1>
    30fe:	86 e6       	ldi	r24, 0x66	; 102
    3100:	98 e1       	ldi	r25, 0x18	; 24
    3102:	80 93 e7 20 	sts	0x20E7, r24	; 0x8020e7 <ptr_put>
    3106:	90 93 e8 20 	sts	0x20E8, r25	; 0x8020e8 <ptr_put+0x1>
    310a:	8d e5       	ldi	r24, 0x5D	; 93
    310c:	98 e1       	ldi	r25, 0x18	; 24
    310e:	80 93 e5 20 	sts	0x20E5, r24	; 0x8020e5 <ptr_get>
    3112:	90 93 e6 20 	sts	0x20E6, r25	; 0x8020e6 <ptr_get+0x1>
    3116:	ed e0       	ldi	r30, 0x0D	; 13
    3118:	f0 e2       	ldi	r31, 0x20	; 32
    311a:	84 81       	ldd	r24, Z+4	; 0x04
    311c:	8d 83       	std	Y+5, r24	; 0x05
    311e:	85 81       	ldd	r24, Z+5	; 0x05
    3120:	8e 83       	std	Y+6, r24	; 0x06
    3122:	86 81       	ldd	r24, Z+6	; 0x06
    3124:	8f 83       	std	Y+7, r24	; 0x07
    3126:	80 81       	ld	r24, Z
    3128:	91 81       	ldd	r25, Z+1	; 0x01
    312a:	a2 81       	ldd	r26, Z+2	; 0x02
    312c:	b3 81       	ldd	r27, Z+3	; 0x03
    312e:	89 83       	std	Y+1, r24	; 0x01
    3130:	9a 83       	std	Y+2, r25	; 0x02
    3132:	ab 83       	std	Y+3, r26	; 0x03
    3134:	bc 83       	std	Y+4, r27	; 0x04
    3136:	60 e1       	ldi	r22, 0x10	; 16
    3138:	83 e0       	ldi	r24, 0x03	; 3
    313a:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    313e:	be 01       	movw	r22, r28
    3140:	6f 5f       	subi	r22, 0xFF	; 255
    3142:	7f 4f       	sbci	r23, 0xFF	; 255
    3144:	80 ea       	ldi	r24, 0xA0	; 160
    3146:	98 e0       	ldi	r25, 0x08	; 8
    3148:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <usart_init_rs232>
    314c:	64 ee       	ldi	r22, 0xE4	; 228
    314e:	73 e0       	ldi	r23, 0x03	; 3
    3150:	8d ef       	ldi	r24, 0xFD	; 253
    3152:	93 e0       	ldi	r25, 0x03	; 3
    3154:	0e 94 ba 24 	call	0x4974	; 0x4974 <fdevopen>
    3158:	e6 e0       	ldi	r30, 0x06	; 6
    315a:	f0 e2       	ldi	r31, 0x20	; 32
    315c:	84 81       	ldd	r24, Z+4	; 0x04
    315e:	8d 83       	std	Y+5, r24	; 0x05
    3160:	85 81       	ldd	r24, Z+5	; 0x05
    3162:	8e 83       	std	Y+6, r24	; 0x06
    3164:	86 81       	ldd	r24, Z+6	; 0x06
    3166:	8f 83       	std	Y+7, r24	; 0x07
    3168:	80 81       	ld	r24, Z
    316a:	91 81       	ldd	r25, Z+1	; 0x01
    316c:	a2 81       	ldd	r26, Z+2	; 0x02
    316e:	b3 81       	ldd	r27, Z+3	; 0x03
    3170:	89 83       	std	Y+1, r24	; 0x01
    3172:	9a 83       	std	Y+2, r25	; 0x02
    3174:	ab 83       	std	Y+3, r26	; 0x03
    3176:	bc 83       	std	Y+4, r27	; 0x04
    3178:	60 e1       	ldi	r22, 0x10	; 16
    317a:	84 e0       	ldi	r24, 0x04	; 4
    317c:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    3180:	be 01       	movw	r22, r28
    3182:	6f 5f       	subi	r22, 0xFF	; 255
    3184:	7f 4f       	sbci	r23, 0xFF	; 255
    3186:	80 ea       	ldi	r24, 0xA0	; 160
    3188:	99 e0       	ldi	r25, 0x09	; 9
    318a:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <usart_init_rs232>
    318e:	27 96       	adiw	r28, 0x07	; 7
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	df 91       	pop	r29
    3196:	cf 91       	pop	r28
    3198:	08 95       	ret

0000319a <__vector_25>:
	
ISR(USARTC0_RXC_vect){
    319a:	1f 92       	push	r1
    319c:	0f 92       	push	r0
    319e:	0f b6       	in	r0, 0x3f	; 63
    31a0:	0f 92       	push	r0
    31a2:	11 24       	eor	r1, r1
    31a4:	08 b6       	in	r0, 0x38	; 56
    31a6:	0f 92       	push	r0
    31a8:	18 be       	out	0x38, r1	; 56
    31aa:	09 b6       	in	r0, 0x39	; 57
    31ac:	0f 92       	push	r0
    31ae:	19 be       	out	0x39, r1	; 57
    31b0:	0b b6       	in	r0, 0x3b	; 59
    31b2:	0f 92       	push	r0
    31b4:	1b be       	out	0x3b, r1	; 59
    31b6:	2f 93       	push	r18
    31b8:	3f 93       	push	r19
    31ba:	4f 93       	push	r20
    31bc:	5f 93       	push	r21
    31be:	6f 93       	push	r22
    31c0:	7f 93       	push	r23
    31c2:	8f 93       	push	r24
    31c4:	9f 93       	push	r25
    31c6:	af 93       	push	r26
    31c8:	bf 93       	push	r27
    31ca:	ef 93       	push	r30
    31cc:	ff 93       	push	r31
	//If we send reset things to the board
	xbee_rx_temporary = usart_getchar(&USARTC0);
    31ce:	80 ea       	ldi	r24, 0xA0	; 160
    31d0:	98 e0       	ldi	r25, 0x08	; 8
    31d2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <usart_getchar>
    31d6:	80 93 aa 23 	sts	0x23AA, r24	; 0x8023aa <xbee_rx_temporary>
	
	switch(xbee_rx_temporary){
    31da:	e0 91 aa 23 	lds	r30, 0x23AA	; 0x8023aa <xbee_rx_temporary>
    31de:	8e 2f       	mov	r24, r30
    31e0:	ee 0f       	add	r30, r30
    31e2:	99 0b       	sbc	r25, r25
    31e4:	aa 0b       	sbc	r26, r26
    31e6:	bb 0b       	sbc	r27, r27
    31e8:	fc 01       	movw	r30, r24
    31ea:	b1 97       	sbiw	r30, 0x21	; 33
    31ec:	ef 33       	cpi	r30, 0x3F	; 63
    31ee:	f1 05       	cpc	r31, r1
    31f0:	a0 f4       	brcc	.+40     	; 0x321a <__vector_25+0x80>
    31f2:	88 27       	eor	r24, r24
    31f4:	e2 50       	subi	r30, 0x02	; 2
    31f6:	ff 4f       	sbci	r31, 0xFF	; 255
    31f8:	8f 4f       	sbci	r24, 0xFF	; 255
    31fa:	0c 94 f8 22 	jmp	0x45f0	; 0x45f0 <__tablejump2__>
		case '!':						//reset MCU 
			wdt_reset_mcu();
    31fe:	0e 94 85 03 	call	0x70a	; 0x70a <wdt_reset_mcu>
			break;
		case '^':						//deploy heatshield
			heatshield_hotwire();
			break;
		case '&':						//deploy parachute
			parachute_hotwire();
    3202:	0b c0       	rjmp	.+22     	; 0x321a <__vector_25+0x80>
			break;
		case '*':						//detatching heatshield
			heatshield_detatch_hotwire();
			break;
		case '(':						//buzzer on
			buzzer_on();
    3204:	d9 db       	rcall	.-2126   	; 0x29b8 <heatshield_hotwire>
			break;
    3206:	09 c0       	rjmp	.+18     	; 0x321a <__vector_25+0x80>
		case ')':						//buzzer off
			buzzer_off();
    3208:	ec db       	rcall	.-2088   	; 0x29e2 <parachute_hotwire>
    320a:	07 c0       	rjmp	.+14     	; 0x321a <__vector_25+0x80>
			break;
    320c:	ff db       	rcall	.-2050   	; 0x2a0c <heatshield_detatch_hotwire>
		case '_':						//camera on
			camera_on();
    320e:	05 c0       	rjmp	.+10     	; 0x321a <__vector_25+0x80>
    3210:	12 dc       	rcall	.-2012   	; 0x2a36 <buzzer_on>
			break;
	}
	
}
    3212:	03 c0       	rjmp	.+6      	; 0x321a <__vector_25+0x80>
    3214:	19 dc       	rcall	.-1998   	; 0x2a48 <buzzer_off>
    3216:	01 c0       	rjmp	.+2      	; 0x321a <__vector_25+0x80>
    3218:	20 dc       	rcall	.-1984   	; 0x2a5a <camera_on>
    321a:	ff 91       	pop	r31
    321c:	ef 91       	pop	r30
    321e:	bf 91       	pop	r27
    3220:	af 91       	pop	r26
    3222:	9f 91       	pop	r25
    3224:	8f 91       	pop	r24
    3226:	7f 91       	pop	r23
    3228:	6f 91       	pop	r22
    322a:	5f 91       	pop	r21
    322c:	4f 91       	pop	r20
    322e:	3f 91       	pop	r19
    3230:	2f 91       	pop	r18
    3232:	0f 90       	pop	r0
    3234:	0b be       	out	0x3b, r0	; 59
    3236:	0f 90       	pop	r0
    3238:	09 be       	out	0x39, r0	; 57
    323a:	0f 90       	pop	r0
    323c:	08 be       	out	0x38, r0	; 56
    323e:	0f 90       	pop	r0
    3240:	0f be       	out	0x3f, r0	; 63
    3242:	0f 90       	pop	r0
    3244:	1f 90       	pop	r1
    3246:	18 95       	reti

00003248 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    3248:	04 c0       	rjmp	.+8      	; 0x3252 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    324a:	61 50       	subi	r22, 0x01	; 1
    324c:	71 09       	sbc	r23, r1
    324e:	81 09       	sbc	r24, r1
    3250:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    3252:	61 15       	cp	r22, r1
    3254:	71 05       	cpc	r23, r1
    3256:	81 05       	cpc	r24, r1
    3258:	91 05       	cpc	r25, r1
    325a:	b9 f7       	brne	.-18     	; 0x324a <__portable_avr_delay_cycles+0x2>
    325c:	08 95       	ret

0000325e <sysclk_enable_peripheral_clock>:
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
    325e:	00 97       	sbiw	r24, 0x00	; 0
    3260:	09 f4       	brne	.+2      	; 0x3264 <sysclk_enable_peripheral_clock+0x6>
    3262:	5c c1       	rjmp	.+696    	; 0x351c <sysclk_enable_peripheral_clock+0x2be>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
    3264:	80 3c       	cpi	r24, 0xC0	; 192
    3266:	91 05       	cpc	r25, r1
    3268:	29 f4       	brne	.+10     	; 0x3274 <sysclk_enable_peripheral_clock+0x16>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
    326a:	60 e1       	ldi	r22, 0x10	; 16
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    3272:	08 95       	ret
	}
#endif
#ifdef EBI
	else if (module == &EBI) {
    3274:	80 34       	cpi	r24, 0x40	; 64
    3276:	24 e0       	ldi	r18, 0x04	; 4
    3278:	92 07       	cpc	r25, r18
    327a:	29 f4       	brne	.+10     	; 0x3286 <sysclk_enable_peripheral_clock+0x28>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
    327c:	68 e0       	ldi	r22, 0x08	; 8
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    3284:	08 95       	ret
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
    3286:	81 15       	cp	r24, r1
    3288:	24 e0       	ldi	r18, 0x04	; 4
    328a:	92 07       	cpc	r25, r18
    328c:	29 f4       	brne	.+10     	; 0x3298 <sysclk_enable_peripheral_clock+0x3a>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
    328e:	64 e0       	ldi	r22, 0x04	; 4
    3290:	80 e0       	ldi	r24, 0x00	; 0
    3292:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    3296:	08 95       	ret
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
    3298:	80 38       	cpi	r24, 0x80	; 128
    329a:	21 e0       	ldi	r18, 0x01	; 1
    329c:	92 07       	cpc	r25, r18
    329e:	29 f4       	brne	.+10     	; 0x32aa <sysclk_enable_peripheral_clock+0x4c>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
    32a0:	62 e0       	ldi	r22, 0x02	; 2
    32a2:	80 e0       	ldi	r24, 0x00	; 0
    32a4:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    32a8:	08 95       	ret
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
    32aa:	81 15       	cp	r24, r1
    32ac:	21 e0       	ldi	r18, 0x01	; 1
    32ae:	92 07       	cpc	r25, r18
    32b0:	29 f4       	brne	.+10     	; 0x32bc <sysclk_enable_peripheral_clock+0x5e>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
    32b2:	61 e0       	ldi	r22, 0x01	; 1
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    32ba:	08 95       	ret
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
    32bc:	80 38       	cpi	r24, 0x80	; 128
    32be:	23 e0       	ldi	r18, 0x03	; 3
    32c0:	92 07       	cpc	r25, r18
    32c2:	29 f4       	brne	.+10     	; 0x32ce <sysclk_enable_peripheral_clock+0x70>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
    32c4:	61 e0       	ldi	r22, 0x01	; 1
    32c6:	81 e0       	ldi	r24, 0x01	; 1
    32c8:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    32cc:	08 95       	ret
	}
#endif
#ifdef ACB
	else if (module == &ACB) {
    32ce:	80 39       	cpi	r24, 0x90	; 144
    32d0:	23 e0       	ldi	r18, 0x03	; 3
    32d2:	92 07       	cpc	r25, r18
    32d4:	29 f4       	brne	.+10     	; 0x32e0 <sysclk_enable_peripheral_clock+0x82>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
    32d6:	61 e0       	ldi	r22, 0x01	; 1
    32d8:	82 e0       	ldi	r24, 0x02	; 2
    32da:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    32de:	08 95       	ret
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
    32e0:	81 15       	cp	r24, r1
    32e2:	22 e0       	ldi	r18, 0x02	; 2
    32e4:	92 07       	cpc	r25, r18
    32e6:	29 f4       	brne	.+10     	; 0x32f2 <sysclk_enable_peripheral_clock+0x94>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
    32e8:	62 e0       	ldi	r22, 0x02	; 2
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    32f0:	08 95       	ret
	}
#endif
#ifdef ADCB
	else if (module == &ADCB) {
    32f2:	80 34       	cpi	r24, 0x40	; 64
    32f4:	22 e0       	ldi	r18, 0x02	; 2
    32f6:	92 07       	cpc	r25, r18
    32f8:	29 f4       	brne	.+10     	; 0x3304 <sysclk_enable_peripheral_clock+0xa6>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_ADC);
    32fa:	62 e0       	ldi	r22, 0x02	; 2
    32fc:	82 e0       	ldi	r24, 0x02	; 2
    32fe:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    3302:	08 95       	ret
	}
#endif
#ifdef DACA
	else if (module == &DACA) {
    3304:	81 15       	cp	r24, r1
    3306:	23 e0       	ldi	r18, 0x03	; 3
    3308:	92 07       	cpc	r25, r18
    330a:	29 f4       	brne	.+10     	; 0x3316 <sysclk_enable_peripheral_clock+0xb8>
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_DAC);
    330c:	64 e0       	ldi	r22, 0x04	; 4
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    3314:	08 95       	ret
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
    3316:	80 32       	cpi	r24, 0x20	; 32
    3318:	23 e0       	ldi	r18, 0x03	; 3
    331a:	92 07       	cpc	r25, r18
    331c:	29 f4       	brne	.+10     	; 0x3328 <sysclk_enable_peripheral_clock+0xca>
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
    331e:	64 e0       	ldi	r22, 0x04	; 4
    3320:	82 e0       	ldi	r24, 0x02	; 2
    3322:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    3326:	08 95       	ret
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
    3328:	81 15       	cp	r24, r1
    332a:	28 e0       	ldi	r18, 0x08	; 8
    332c:	92 07       	cpc	r25, r18
    332e:	29 f4       	brne	.+10     	; 0x333a <sysclk_enable_peripheral_clock+0xdc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    3330:	61 e0       	ldi	r22, 0x01	; 1
    3332:	83 e0       	ldi	r24, 0x03	; 3
    3334:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    3338:	08 95       	ret
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
    333a:	81 15       	cp	r24, r1
    333c:	29 e0       	ldi	r18, 0x09	; 9
    333e:	92 07       	cpc	r25, r18
    3340:	29 f4       	brne	.+10     	; 0x334c <sysclk_enable_peripheral_clock+0xee>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    3342:	61 e0       	ldi	r22, 0x01	; 1
    3344:	84 e0       	ldi	r24, 0x04	; 4
    3346:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    334a:	08 95       	ret
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
    334c:	81 15       	cp	r24, r1
    334e:	2a e0       	ldi	r18, 0x0A	; 10
    3350:	92 07       	cpc	r25, r18
    3352:	29 f4       	brne	.+10     	; 0x335e <sysclk_enable_peripheral_clock+0x100>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    3354:	61 e0       	ldi	r22, 0x01	; 1
    3356:	85 e0       	ldi	r24, 0x05	; 5
    3358:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    335c:	08 95       	ret
	}
#endif
#ifdef TCF0
	else if (module == &TCF0) {
    335e:	81 15       	cp	r24, r1
    3360:	2b e0       	ldi	r18, 0x0B	; 11
    3362:	92 07       	cpc	r25, r18
    3364:	29 f4       	brne	.+10     	; 0x3370 <sysclk_enable_peripheral_clock+0x112>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
    3366:	61 e0       	ldi	r22, 0x01	; 1
    3368:	86 e0       	ldi	r24, 0x06	; 6
    336a:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    336e:	08 95       	ret
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
    3370:	80 34       	cpi	r24, 0x40	; 64
    3372:	28 e0       	ldi	r18, 0x08	; 8
    3374:	92 07       	cpc	r25, r18
    3376:	29 f4       	brne	.+10     	; 0x3382 <sysclk_enable_peripheral_clock+0x124>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    3378:	62 e0       	ldi	r22, 0x02	; 2
    337a:	83 e0       	ldi	r24, 0x03	; 3
    337c:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    3380:	08 95       	ret
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
    3382:	80 34       	cpi	r24, 0x40	; 64
    3384:	29 e0       	ldi	r18, 0x09	; 9
    3386:	92 07       	cpc	r25, r18
    3388:	29 f4       	brne	.+10     	; 0x3394 <sysclk_enable_peripheral_clock+0x136>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    338a:	62 e0       	ldi	r22, 0x02	; 2
    338c:	84 e0       	ldi	r24, 0x04	; 4
    338e:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    3392:	08 95       	ret
	}
#endif
#ifdef TCE1
	else if (module == &TCE1) {
    3394:	80 34       	cpi	r24, 0x40	; 64
    3396:	2a e0       	ldi	r18, 0x0A	; 10
    3398:	92 07       	cpc	r25, r18
    339a:	29 f4       	brne	.+10     	; 0x33a6 <sysclk_enable_peripheral_clock+0x148>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC1);
    339c:	62 e0       	ldi	r22, 0x02	; 2
    339e:	85 e0       	ldi	r24, 0x05	; 5
    33a0:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    33a4:	08 95       	ret
	}
#endif
#ifdef TCF1
	else if (module == &TCF1) {
    33a6:	80 34       	cpi	r24, 0x40	; 64
    33a8:	2b e0       	ldi	r18, 0x0B	; 11
    33aa:	92 07       	cpc	r25, r18
    33ac:	29 f4       	brne	.+10     	; 0x33b8 <sysclk_enable_peripheral_clock+0x15a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC1);
    33ae:	62 e0       	ldi	r22, 0x02	; 2
    33b0:	86 e0       	ldi	r24, 0x06	; 6
    33b2:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    33b6:	08 95       	ret
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
    33b8:	80 39       	cpi	r24, 0x90	; 144
    33ba:	28 e0       	ldi	r18, 0x08	; 8
    33bc:	92 07       	cpc	r25, r18
    33be:	29 f4       	brne	.+10     	; 0x33ca <sysclk_enable_peripheral_clock+0x16c>
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    33c0:	64 e0       	ldi	r22, 0x04	; 4
    33c2:	83 e0       	ldi	r24, 0x03	; 3
    33c4:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    33c8:	08 95       	ret
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
    33ca:	80 39       	cpi	r24, 0x90	; 144
    33cc:	29 e0       	ldi	r18, 0x09	; 9
    33ce:	92 07       	cpc	r25, r18
    33d0:	29 f4       	brne	.+10     	; 0x33dc <sysclk_enable_peripheral_clock+0x17e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    33d2:	64 e0       	ldi	r22, 0x04	; 4
    33d4:	84 e0       	ldi	r24, 0x04	; 4
    33d6:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    33da:	08 95       	ret
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
    33dc:	80 39       	cpi	r24, 0x90	; 144
    33de:	2a e0       	ldi	r18, 0x0A	; 10
    33e0:	92 07       	cpc	r25, r18
    33e2:	29 f4       	brne	.+10     	; 0x33ee <sysclk_enable_peripheral_clock+0x190>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    33e4:	64 e0       	ldi	r22, 0x04	; 4
    33e6:	85 e0       	ldi	r24, 0x05	; 5
    33e8:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    33ec:	08 95       	ret
	}
#endif
#ifdef HIRESF
	else if (module == &HIRESF) {
    33ee:	80 39       	cpi	r24, 0x90	; 144
    33f0:	2b e0       	ldi	r18, 0x0B	; 11
    33f2:	92 07       	cpc	r25, r18
    33f4:	29 f4       	brne	.+10     	; 0x3400 <sysclk_enable_peripheral_clock+0x1a2>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
    33f6:	64 e0       	ldi	r22, 0x04	; 4
    33f8:	86 e0       	ldi	r24, 0x06	; 6
    33fa:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    33fe:	08 95       	ret
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
    3400:	80 3c       	cpi	r24, 0xC0	; 192
    3402:	28 e0       	ldi	r18, 0x08	; 8
    3404:	92 07       	cpc	r25, r18
    3406:	29 f4       	brne	.+10     	; 0x3412 <sysclk_enable_peripheral_clock+0x1b4>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
    3408:	68 e0       	ldi	r22, 0x08	; 8
    340a:	83 e0       	ldi	r24, 0x03	; 3
    340c:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    3410:	08 95       	ret
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
    3412:	80 3c       	cpi	r24, 0xC0	; 192
    3414:	29 e0       	ldi	r18, 0x09	; 9
    3416:	92 07       	cpc	r25, r18
    3418:	29 f4       	brne	.+10     	; 0x3424 <sysclk_enable_peripheral_clock+0x1c6>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
    341a:	68 e0       	ldi	r22, 0x08	; 8
    341c:	84 e0       	ldi	r24, 0x04	; 4
    341e:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    3422:	08 95       	ret
	}
#endif
#ifdef SPIE
	else if (module == &SPIE) {
    3424:	80 3c       	cpi	r24, 0xC0	; 192
    3426:	2a e0       	ldi	r18, 0x0A	; 10
    3428:	92 07       	cpc	r25, r18
    342a:	29 f4       	brne	.+10     	; 0x3436 <sysclk_enable_peripheral_clock+0x1d8>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_SPI);
    342c:	68 e0       	ldi	r22, 0x08	; 8
    342e:	85 e0       	ldi	r24, 0x05	; 5
    3430:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    3434:	08 95       	ret
	}
#endif
#ifdef SPIF
	else if (module == &SPIF) {
    3436:	80 3c       	cpi	r24, 0xC0	; 192
    3438:	2b e0       	ldi	r18, 0x0B	; 11
    343a:	92 07       	cpc	r25, r18
    343c:	29 f4       	brne	.+10     	; 0x3448 <sysclk_enable_peripheral_clock+0x1ea>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
    343e:	68 e0       	ldi	r22, 0x08	; 8
    3440:	86 e0       	ldi	r24, 0x06	; 6
    3442:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    3446:	08 95       	ret
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
    3448:	80 3a       	cpi	r24, 0xA0	; 160
    344a:	28 e0       	ldi	r18, 0x08	; 8
    344c:	92 07       	cpc	r25, r18
    344e:	29 f4       	brne	.+10     	; 0x345a <sysclk_enable_peripheral_clock+0x1fc>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
    3450:	60 e1       	ldi	r22, 0x10	; 16
    3452:	83 e0       	ldi	r24, 0x03	; 3
    3454:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    3458:	08 95       	ret
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
    345a:	80 3a       	cpi	r24, 0xA0	; 160
    345c:	29 e0       	ldi	r18, 0x09	; 9
    345e:	92 07       	cpc	r25, r18
    3460:	29 f4       	brne	.+10     	; 0x346c <sysclk_enable_peripheral_clock+0x20e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
    3462:	60 e1       	ldi	r22, 0x10	; 16
    3464:	84 e0       	ldi	r24, 0x04	; 4
    3466:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    346a:	08 95       	ret
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
    346c:	80 3a       	cpi	r24, 0xA0	; 160
    346e:	2a e0       	ldi	r18, 0x0A	; 10
    3470:	92 07       	cpc	r25, r18
    3472:	29 f4       	brne	.+10     	; 0x347e <sysclk_enable_peripheral_clock+0x220>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
    3474:	60 e1       	ldi	r22, 0x10	; 16
    3476:	85 e0       	ldi	r24, 0x05	; 5
    3478:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    347c:	08 95       	ret
	}
#endif
#ifdef USARTF0
	else if (module == &USARTF0) {
    347e:	80 3a       	cpi	r24, 0xA0	; 160
    3480:	2b e0       	ldi	r18, 0x0B	; 11
    3482:	92 07       	cpc	r25, r18
    3484:	29 f4       	brne	.+10     	; 0x3490 <sysclk_enable_peripheral_clock+0x232>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
    3486:	60 e1       	ldi	r22, 0x10	; 16
    3488:	86 e0       	ldi	r24, 0x06	; 6
    348a:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    348e:	08 95       	ret
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
    3490:	80 3b       	cpi	r24, 0xB0	; 176
    3492:	28 e0       	ldi	r18, 0x08	; 8
    3494:	92 07       	cpc	r25, r18
    3496:	29 f4       	brne	.+10     	; 0x34a2 <sysclk_enable_peripheral_clock+0x244>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
    3498:	60 e2       	ldi	r22, 0x20	; 32
    349a:	83 e0       	ldi	r24, 0x03	; 3
    349c:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    34a0:	08 95       	ret
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
    34a2:	80 3b       	cpi	r24, 0xB0	; 176
    34a4:	29 e0       	ldi	r18, 0x09	; 9
    34a6:	92 07       	cpc	r25, r18
    34a8:	29 f4       	brne	.+10     	; 0x34b4 <sysclk_enable_peripheral_clock+0x256>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
    34aa:	60 e2       	ldi	r22, 0x20	; 32
    34ac:	84 e0       	ldi	r24, 0x04	; 4
    34ae:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    34b2:	08 95       	ret
	}
#endif
#ifdef USARTE1
	else if (module == &USARTE1) {
    34b4:	80 3b       	cpi	r24, 0xB0	; 176
    34b6:	2a e0       	ldi	r18, 0x0A	; 10
    34b8:	92 07       	cpc	r25, r18
    34ba:	29 f4       	brne	.+10     	; 0x34c6 <sysclk_enable_peripheral_clock+0x268>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART1);
    34bc:	60 e2       	ldi	r22, 0x20	; 32
    34be:	85 e0       	ldi	r24, 0x05	; 5
    34c0:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    34c4:	08 95       	ret
	}
#endif
#ifdef USARTF1
	else if (module == &USARTF1) {
    34c6:	80 3b       	cpi	r24, 0xB0	; 176
    34c8:	2b e0       	ldi	r18, 0x0B	; 11
    34ca:	92 07       	cpc	r25, r18
    34cc:	29 f4       	brne	.+10     	; 0x34d8 <sysclk_enable_peripheral_clock+0x27a>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
    34ce:	60 e2       	ldi	r22, 0x20	; 32
    34d0:	86 e0       	ldi	r24, 0x06	; 6
    34d2:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    34d6:	08 95       	ret
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
    34d8:	80 38       	cpi	r24, 0x80	; 128
    34da:	24 e0       	ldi	r18, 0x04	; 4
    34dc:	92 07       	cpc	r25, r18
    34de:	29 f4       	brne	.+10     	; 0x34ea <sysclk_enable_peripheral_clock+0x28c>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
    34e0:	60 e4       	ldi	r22, 0x40	; 64
    34e2:	83 e0       	ldi	r24, 0x03	; 3
    34e4:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    34e8:	08 95       	ret
	}
#endif
#ifdef TWID
	else if (module == &TWID) {
    34ea:	80 39       	cpi	r24, 0x90	; 144
    34ec:	24 e0       	ldi	r18, 0x04	; 4
    34ee:	92 07       	cpc	r25, r18
    34f0:	29 f4       	brne	.+10     	; 0x34fc <sysclk_enable_peripheral_clock+0x29e>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
    34f2:	60 e4       	ldi	r22, 0x40	; 64
    34f4:	84 e0       	ldi	r24, 0x04	; 4
    34f6:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    34fa:	08 95       	ret
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
    34fc:	80 3a       	cpi	r24, 0xA0	; 160
    34fe:	24 e0       	ldi	r18, 0x04	; 4
    3500:	92 07       	cpc	r25, r18
    3502:	29 f4       	brne	.+10     	; 0x350e <sysclk_enable_peripheral_clock+0x2b0>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
    3504:	60 e4       	ldi	r22, 0x40	; 64
    3506:	85 e0       	ldi	r24, 0x05	; 5
    3508:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    350c:	08 95       	ret
	}
#endif
#ifdef TWIF
	else if (module == &TWIF) {
    350e:	80 3b       	cpi	r24, 0xB0	; 176
    3510:	94 40       	sbci	r25, 0x04	; 4
    3512:	21 f4       	brne	.+8      	; 0x351c <sysclk_enable_peripheral_clock+0x2be>
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TWI);
    3514:	60 e4       	ldi	r22, 0x40	; 64
    3516:	86 e0       	ldi	r24, 0x06	; 6
    3518:	0c 94 ce 03 	jmp	0x79c	; 0x79c <sysclk_enable_module>
    351c:	08 95       	ret

0000351e <packetlen>:
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
	{
		if (buff[i] == '\n')
    351e:	fc 01       	movw	r30, r24
    3520:	20 81       	ld	r18, Z
    3522:	2a 30       	cpi	r18, 0x0A	; 10
    3524:	79 f0       	breq	.+30     	; 0x3544 <packetlen+0x26>
    3526:	31 96       	adiw	r30, 0x01	; 1
extern uint8_t state;
//void blink (int, int);
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
    3528:	21 e0       	ldi	r18, 0x01	; 1
    352a:	30 e0       	ldi	r19, 0x00	; 0
	{
		if (buff[i] == '\n')
    352c:	81 91       	ld	r24, Z+
    352e:	8a 30       	cpi	r24, 0x0A	; 10
    3530:	61 f0       	breq	.+24     	; 0x354a <packetlen+0x2c>
extern uint8_t state;
//void blink (int, int);
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
    3532:	2f 5f       	subi	r18, 0xFF	; 255
    3534:	3f 4f       	sbci	r19, 0xFF	; 255
    3536:	21 15       	cp	r18, r1
    3538:	84 e0       	ldi	r24, 0x04	; 4
    353a:	38 07       	cpc	r19, r24
    353c:	b9 f7       	brne	.-18     	; 0x352c <packetlen+0xe>
	{
		if (buff[i] == '\n')
		return i;
	}
	return 1024;
    353e:	80 e0       	ldi	r24, 0x00	; 0
    3540:	94 e0       	ldi	r25, 0x04	; 4
    3542:	08 95       	ret
extern uint8_t state;
//void blink (int, int);
uint16_t packetlen(const uint8_t* buff)
{
	uint16_t i = 0;
	for (i = 0; i < 1024; i++)
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	08 95       	ret
    354a:	82 2f       	mov	r24, r18
    354c:	93 2f       	mov	r25, r19
	{
		if (buff[i] == '\n')
		return i;
	}
	return 1024;
}
    354e:	08 95       	ret

00003550 <main>:
    3550:	cf 93       	push	r28
    3552:	df 93       	push	r29
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
    3558:	cc 57       	subi	r28, 0x7C	; 124
    355a:	d1 09       	sbc	r29, r1
    355c:	cd bf       	out	0x3d, r28	; 61
    355e:	de bf       	out	0x3e, r29	; 62
    3560:	0e 94 99 03 	call	0x732	; 0x732 <sysclk_init>
    3564:	80 e0       	ldi	r24, 0x00	; 0
    3566:	9b e0       	ldi	r25, 0x0B	; 11
    3568:	7a de       	rcall	.-780    	; 0x325e <sysclk_enable_peripheral_clock>
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	99 e0       	ldi	r25, 0x09	; 9
    356e:	77 de       	rcall	.-786    	; 0x325e <sysclk_enable_peripheral_clock>
    3570:	64 e0       	ldi	r22, 0x04	; 4
    3572:	86 e0       	ldi	r24, 0x06	; 6
    3574:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    3578:	64 e0       	ldi	r22, 0x04	; 4
    357a:	84 e0       	ldi	r24, 0x04	; 4
    357c:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    3580:	68 e0       	ldi	r22, 0x08	; 8
    3582:	83 e0       	ldi	r24, 0x03	; 3
    3584:	0e 94 ce 03 	call	0x79c	; 0x79c <sysclk_enable_module>
    3588:	e0 ea       	ldi	r30, 0xA0	; 160
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	87 e0       	ldi	r24, 0x07	; 7
    358e:	82 83       	std	Z+2, r24	; 0x02
    3590:	82 83       	std	Z+2, r24	; 0x02
    3592:	78 94       	sei
    3594:	80 ea       	ldi	r24, 0xA0	; 160
    3596:	98 e0       	ldi	r25, 0x08	; 8
    3598:	62 de       	rcall	.-828    	; 0x325e <sysclk_enable_peripheral_clock>
    359a:	9b dd       	rcall	.-1226   	; 0x30d2 <usart_init>
    359c:	80 ec       	ldi	r24, 0xC0	; 192
    359e:	98 e0       	ldi	r25, 0x08	; 8
    35a0:	5e de       	rcall	.-836    	; 0x325e <sysclk_enable_peripheral_clock>
    35a2:	a3 da       	rcall	.-2746   	; 0x2aea <SPI_init>
    35a4:	dd da       	rcall	.-2630   	; 0x2b60 <ms5607_init>
    35a6:	80 e0       	ldi	r24, 0x00	; 0
    35a8:	92 e0       	ldi	r25, 0x02	; 2
    35aa:	59 de       	rcall	.-846    	; 0x325e <sysclk_enable_peripheral_clock>
    35ac:	0a dd       	rcall	.-1516   	; 0x2fc2 <adc_init>
    35ae:	53 db       	rcall	.-2394   	; 0x2c56 <get_pressure>
    35b0:	ed 96       	adiw	r28, 0x3d	; 61
    35b2:	6c af       	std	Y+60, r22	; 0x3c
    35b4:	7d af       	std	Y+61, r23	; 0x3d
    35b6:	8e af       	std	Y+62, r24	; 0x3e
    35b8:	9f af       	std	Y+63, r25	; 0x3f
    35ba:	ed 97       	sbiw	r28, 0x3d	; 61
    35bc:	e5 96       	adiw	r28, 0x35	; 53
    35be:	1f ae       	std	Y+63, r1	; 0x3f
    35c0:	e5 97       	sbiw	r28, 0x35	; 53
    35c2:	81 2c       	mov	r8, r1
    35c4:	91 2c       	mov	r9, r1
    35c6:	54 01       	movw	r10, r8
    35c8:	ce 01       	movw	r24, r28
    35ca:	01 96       	adiw	r24, 0x01	; 1
    35cc:	6c 01       	movw	r12, r24
    35ce:	0f 2e       	mov	r0, r31
    35d0:	f6 e2       	ldi	r31, 0x26	; 38
    35d2:	2f 2e       	mov	r2, r31
    35d4:	f0 e2       	ldi	r31, 0x20	; 32
    35d6:	3f 2e       	mov	r3, r31
    35d8:	f0 2d       	mov	r31, r0
    35da:	0e c0       	rjmp	.+28     	; 0x35f8 <main+0xa8>
    35dc:	91 e0       	ldi	r25, 0x01	; 1
    35de:	e5 96       	adiw	r28, 0x35	; 53
    35e0:	9f af       	std	Y+63, r25	; 0x3f
    35e2:	e5 97       	sbiw	r28, 0x35	; 53
    35e4:	09 c0       	rjmp	.+18     	; 0x35f8 <main+0xa8>
    35e6:	e2 e0       	ldi	r30, 0x02	; 2
    35e8:	e5 96       	adiw	r28, 0x35	; 53
    35ea:	ef af       	std	Y+63, r30	; 0x3f
    35ec:	e5 97       	sbiw	r28, 0x35	; 53
    35ee:	04 c0       	rjmp	.+8      	; 0x35f8 <main+0xa8>
    35f0:	f2 e0       	ldi	r31, 0x02	; 2
    35f2:	e5 96       	adiw	r28, 0x35	; 53
    35f4:	ff af       	std	Y+63, r31	; 0x3f
    35f6:	e5 97       	sbiw	r28, 0x35	; 53
    35f8:	2e db       	rcall	.-2468   	; 0x2c56 <get_pressure>
    35fa:	2b 01       	movw	r4, r22
    35fc:	3c 01       	movw	r6, r24
    35fe:	27 dd       	rcall	.-1458   	; 0x304e <getTemperature>
    3600:	d0 d1       	rcall	.+928    	; 0x39a2 <__fixunssfsi>
    3602:	7b 01       	movw	r14, r22
    3604:	8c 01       	movw	r16, r24
    3606:	a3 01       	movw	r20, r6
    3608:	92 01       	movw	r18, r4
    360a:	ed 96       	adiw	r28, 0x3d	; 61
    360c:	6c ad       	ldd	r22, Y+60	; 0x3c
    360e:	7d ad       	ldd	r23, Y+61	; 0x3d
    3610:	8e ad       	ldd	r24, Y+62	; 0x3e
    3612:	9f ad       	ldd	r25, Y+63	; 0x3f
    3614:	ed 97       	sbiw	r28, 0x3d	; 61
    3616:	0e 94 70 11 	call	0x22e0	; 0x22e0 <Get_altitude>
    361a:	be d1       	rcall	.+892    	; 0x3998 <__fixsfsi>
    361c:	2b 01       	movw	r4, r22
    361e:	3c 01       	movw	r6, r24
    3620:	ee d1       	rcall	.+988    	; 0x39fe <__floatsisf>
    3622:	26 e6       	ldi	r18, 0x66	; 102
    3624:	36 e6       	ldi	r19, 0x66	; 102
    3626:	46 e6       	ldi	r20, 0x66	; 102
    3628:	5f e3       	ldi	r21, 0x3F	; 63
    362a:	ba d2       	rcall	.+1396   	; 0x3ba0 <__mulsf3>
    362c:	e9 96       	adiw	r28, 0x39	; 57
    362e:	6c af       	std	Y+60, r22	; 0x3c
    3630:	7d af       	std	Y+61, r23	; 0x3d
    3632:	8e af       	std	Y+62, r24	; 0x3e
    3634:	9f af       	std	Y+63, r25	; 0x3f
    3636:	e9 97       	sbiw	r28, 0x39	; 57
    3638:	c5 01       	movw	r24, r10
    363a:	b4 01       	movw	r22, r8
    363c:	e0 d1       	rcall	.+960    	; 0x39fe <__floatsisf>
    363e:	20 ed       	ldi	r18, 0xD0	; 208
    3640:	3c ec       	ldi	r19, 0xCC	; 204
    3642:	4c ec       	ldi	r20, 0xCC	; 204
    3644:	5d e3       	ldi	r21, 0x3D	; 61
    3646:	ac d2       	rcall	.+1368   	; 0x3ba0 <__mulsf3>
    3648:	9b 01       	movw	r18, r22
    364a:	ac 01       	movw	r20, r24
    364c:	e9 96       	adiw	r28, 0x39	; 57
    364e:	6c ad       	ldd	r22, Y+60	; 0x3c
    3650:	7d ad       	ldd	r23, Y+61	; 0x3d
    3652:	8e ad       	ldd	r24, Y+62	; 0x3e
    3654:	9f ad       	ldd	r25, Y+63	; 0x3f
    3656:	e9 97       	sbiw	r28, 0x39	; 57
    3658:	d3 d0       	rcall	.+422    	; 0x3800 <__addsf3>
    365a:	9e d1       	rcall	.+828    	; 0x3998 <__fixsfsi>
    365c:	4b 01       	movw	r8, r22
    365e:	5c 01       	movw	r10, r24
    3660:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <last_finished>
    3664:	88 23       	and	r24, r24
    3666:	09 f4       	brne	.+2      	; 0x366a <main+0x11a>
    3668:	3f c0       	rjmp	.+126    	; 0x36e8 <main+0x198>
    366a:	8b e1       	ldi	r24, 0x1B	; 27
    366c:	90 e2       	ldi	r25, 0x20	; 32
    366e:	9f 93       	push	r25
    3670:	8f 93       	push	r24
    3672:	0e 94 40 25 	call	0x4a80	; 0x4a80 <printf>
    3676:	0f 90       	pop	r0
    3678:	0f 90       	pop	r0
    367a:	80 91 a7 21 	lds	r24, 0x21A7	; 0x8021a7 <last_finished>
    367e:	81 30       	cpi	r24, 0x01	; 1
    3680:	99 f5       	brne	.+102    	; 0x36e8 <main+0x198>
    3682:	9f b7       	in	r25, 0x3f	; 63
    3684:	f8 94       	cli
    3686:	85 e5       	ldi	r24, 0x55	; 85
    3688:	e7 e4       	ldi	r30, 0x47	; 71
    368a:	f3 e2       	ldi	r31, 0x23	; 35
    368c:	d6 01       	movw	r26, r12
    368e:	01 90       	ld	r0, Z+
    3690:	0d 92       	st	X+, r0
    3692:	8a 95       	dec	r24
    3694:	e1 f7       	brne	.-8      	; 0x368e <main+0x13e>
    3696:	9f bf       	out	0x3f, r25	; 63
    3698:	c6 01       	movw	r24, r12
    369a:	41 df       	rcall	.-382    	; 0x351e <packetlen>
    369c:	8c 0d       	add	r24, r12
    369e:	9d 1d       	adc	r25, r13
    36a0:	fc 01       	movw	r30, r24
    36a2:	10 82       	st	Z, r1
    36a4:	df 92       	push	r13
    36a6:	cf 92       	push	r12
    36a8:	3f 92       	push	r3
    36aa:	2f 92       	push	r2
    36ac:	0e 94 40 25 	call	0x4a80	; 0x4a80 <printf>
    36b0:	f6 01       	movw	r30, r12
    36b2:	01 90       	ld	r0, Z+
    36b4:	00 20       	and	r0, r0
    36b6:	e9 f7       	brne	.-6      	; 0x36b2 <main+0x162>
    36b8:	31 97       	sbiw	r30, 0x01	; 1
    36ba:	af 01       	movw	r20, r30
    36bc:	4c 19       	sub	r20, r12
    36be:	5d 09       	sbc	r21, r13
    36c0:	b6 01       	movw	r22, r12
    36c2:	ce 01       	movw	r24, r28
    36c4:	8a 5a       	subi	r24, 0xAA	; 170
    36c6:	9f 4f       	sbci	r25, 0xFF	; 255
    36c8:	0e 94 14 12 	call	0x2428	; 0x2428 <getGPSDatafromNMEA>
    36cc:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <last_finished>
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	e4 96       	adiw	r28, 0x34	; 52
    36da:	8f ad       	ldd	r24, Y+63	; 0x3f
    36dc:	e4 97       	sbiw	r28, 0x34	; 52
    36de:	88 23       	and	r24, r24
    36e0:	19 f0       	breq	.+6      	; 0x36e8 <main+0x198>
    36e2:	8f b7       	in	r24, 0x3f	; 63
    36e4:	f8 94       	cli
    36e6:	8f bf       	out	0x3f, r24	; 63
    36e8:	66 e5       	ldi	r22, 0x56	; 86
    36ea:	71 e6       	ldi	r23, 0x61	; 97
    36ec:	81 e5       	ldi	r24, 0x51	; 81
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	ab dd       	rcall	.-1194   	; 0x3248 <__portable_avr_delay_cycles>
    36f2:	1f 92       	push	r1
    36f4:	1f 92       	push	r1
    36f6:	1f 92       	push	r1
    36f8:	1f 92       	push	r1
    36fa:	1f 92       	push	r1
    36fc:	1f 92       	push	r1
    36fe:	1f 92       	push	r1
    3700:	1f 92       	push	r1
    3702:	1f 92       	push	r1
    3704:	1f 92       	push	r1
    3706:	1f 92       	push	r1
    3708:	1f 92       	push	r1
    370a:	1f 92       	push	r1
    370c:	1f 92       	push	r1
    370e:	1f 92       	push	r1
    3710:	1f 92       	push	r1
    3712:	1f 92       	push	r1
    3714:	1f 92       	push	r1
    3716:	1f 92       	push	r1
    3718:	1f 92       	push	r1
    371a:	82 e3       	ldi	r24, 0x32	; 50
    371c:	90 e2       	ldi	r25, 0x20	; 32
    371e:	9f 93       	push	r25
    3720:	8f 93       	push	r24
    3722:	0e 94 40 25 	call	0x4a80	; 0x4a80 <printf>
    3726:	cd bf       	out	0x3d, r28	; 61
    3728:	de bf       	out	0x3e, r29	; 62
    372a:	e5 96       	adiw	r28, 0x35	; 53
    372c:	9f ad       	ldd	r25, Y+63	; 0x3f
    372e:	e5 97       	sbiw	r28, 0x35	; 53
    3730:	91 11       	cpse	r25, r1
    3732:	22 c0       	rjmp	.+68     	; 0x3778 <main+0x228>
    3734:	e5 e5       	ldi	r30, 0x55	; 85
    3736:	e0 93 81 06 	sts	0x0681, r30	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    373a:	e0 93 85 06 	sts	0x0685, r30	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    373e:	f8 e0       	ldi	r31, 0x08	; 8
    3740:	f0 93 04 06 	sts	0x0604, r31	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
    3744:	d5 01       	movw	r26, r10
    3746:	c4 01       	movw	r24, r8
    3748:	84 19       	sub	r24, r4
    374a:	95 09       	sbc	r25, r5
    374c:	a6 09       	sbc	r26, r6
    374e:	b7 09       	sbc	r27, r7
    3750:	0a f0       	brmi	.+2      	; 0x3754 <main+0x204>
    3752:	52 cf       	rjmp	.-348    	; 0x35f8 <main+0xa8>
    3754:	d5 01       	movw	r26, r10
    3756:	c4 01       	movw	r24, r8
    3758:	89 55       	subi	r24, 0x59	; 89
    375a:	92 40       	sbci	r25, 0x02	; 2
    375c:	a1 09       	sbc	r26, r1
    375e:	b1 09       	sbc	r27, r1
    3760:	87 3c       	cpi	r24, 0xC7	; 199
    3762:	91 05       	cpc	r25, r1
    3764:	a1 05       	cpc	r26, r1
    3766:	b1 05       	cpc	r27, r1
    3768:	08 f0       	brcs	.+2      	; 0x376c <main+0x21c>
    376a:	46 cf       	rjmp	.-372    	; 0x35f8 <main+0xa8>
    376c:	81 e0       	ldi	r24, 0x01	; 1
    376e:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    3772:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    3776:	05 c0       	rjmp	.+10     	; 0x3782 <main+0x232>
    3778:	e5 96       	adiw	r28, 0x35	; 53
    377a:	2f ad       	ldd	r18, Y+63	; 0x3f
    377c:	e5 97       	sbiw	r28, 0x35	; 53
    377e:	21 30       	cpi	r18, 0x01	; 1
    3780:	b9 f4       	brne	.+46     	; 0x37b0 <main+0x260>
    3782:	84 e6       	ldi	r24, 0x64	; 100
    3784:	90 e2       	ldi	r25, 0x20	; 32
    3786:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <puts>
    378a:	8c e2       	ldi	r24, 0x2C	; 44
    378c:	88 16       	cp	r8, r24
    378e:	81 e0       	ldi	r24, 0x01	; 1
    3790:	98 06       	cpc	r9, r24
    3792:	a1 04       	cpc	r10, r1
    3794:	b1 04       	cpc	r11, r1
    3796:	0c f0       	brlt	.+2      	; 0x379a <main+0x24a>
    3798:	21 cf       	rjmp	.-446    	; 0x35dc <main+0x8c>
    379a:	82 e0       	ldi	r24, 0x02	; 2
    379c:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    37a0:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    37a4:	90 e8       	ldi	r25, 0x80	; 128
    37a6:	90 93 01 06 	sts	0x0601, r25	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    37aa:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    37ae:	06 c0       	rjmp	.+12     	; 0x37bc <main+0x26c>
    37b0:	e5 96       	adiw	r28, 0x35	; 53
    37b2:	ef ad       	ldd	r30, Y+63	; 0x3f
    37b4:	e5 97       	sbiw	r28, 0x35	; 53
    37b6:	e2 30       	cpi	r30, 0x02	; 2
    37b8:	09 f0       	breq	.+2      	; 0x37bc <main+0x26c>
    37ba:	1e cf       	rjmp	.-452    	; 0x35f8 <main+0xa8>
    37bc:	84 e7       	ldi	r24, 0x74	; 116
    37be:	90 e2       	ldi	r25, 0x20	; 32
    37c0:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <puts>
    37c4:	d5 01       	movw	r26, r10
    37c6:	c4 01       	movw	r24, r8
    37c8:	84 19       	sub	r24, r4
    37ca:	95 09       	sbc	r25, r5
    37cc:	a6 09       	sbc	r26, r6
    37ce:	b7 09       	sbc	r27, r7
    37d0:	18 16       	cp	r1, r24
    37d2:	19 06       	cpc	r1, r25
    37d4:	1a 06       	cpc	r1, r26
    37d6:	1b 06       	cpc	r1, r27
    37d8:	0c f4       	brge	.+2      	; 0x37dc <main+0x28c>
    37da:	05 cf       	rjmp	.-502    	; 0x35e6 <main+0x96>
    37dc:	f4 e6       	ldi	r31, 0x64	; 100
    37de:	4f 16       	cp	r4, r31
    37e0:	51 04       	cpc	r5, r1
    37e2:	61 04       	cpc	r6, r1
    37e4:	71 04       	cpc	r7, r1
    37e6:	0c f0       	brlt	.+2      	; 0x37ea <main+0x29a>
    37e8:	03 cf       	rjmp	.-506    	; 0x35f0 <main+0xa0>
    37ea:	28 e0       	ldi	r18, 0x08	; 8
    37ec:	20 93 01 06 	sts	0x0601, r18	; 0x800601 <__TEXT_REGION_LENGTH__+0x700601>
    37f0:	20 93 05 06 	sts	0x0605, r18	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
    37f4:	83 e0       	ldi	r24, 0x03	; 3
    37f6:	e5 96       	adiw	r28, 0x35	; 53
    37f8:	8f af       	std	Y+63, r24	; 0x3f
    37fa:	e5 97       	sbiw	r28, 0x35	; 53
    37fc:	fd ce       	rjmp	.-518    	; 0x35f8 <main+0xa8>

000037fe <__subsf3>:
    37fe:	50 58       	subi	r21, 0x80	; 128

00003800 <__addsf3>:
    3800:	bb 27       	eor	r27, r27
    3802:	aa 27       	eor	r26, r26
    3804:	0e d0       	rcall	.+28     	; 0x3822 <__addsf3x>
    3806:	4d c1       	rjmp	.+666    	; 0x3aa2 <__fp_round>
    3808:	3e d1       	rcall	.+636    	; 0x3a86 <__fp_pscA>
    380a:	30 f0       	brcs	.+12     	; 0x3818 <__addsf3+0x18>
    380c:	43 d1       	rcall	.+646    	; 0x3a94 <__fp_pscB>
    380e:	20 f0       	brcs	.+8      	; 0x3818 <__addsf3+0x18>
    3810:	31 f4       	brne	.+12     	; 0x381e <__addsf3+0x1e>
    3812:	9f 3f       	cpi	r25, 0xFF	; 255
    3814:	11 f4       	brne	.+4      	; 0x381a <__addsf3+0x1a>
    3816:	1e f4       	brtc	.+6      	; 0x381e <__addsf3+0x1e>
    3818:	33 c1       	rjmp	.+614    	; 0x3a80 <__fp_nan>
    381a:	0e f4       	brtc	.+2      	; 0x381e <__addsf3+0x1e>
    381c:	e0 95       	com	r30
    381e:	e7 fb       	bst	r30, 7
    3820:	29 c1       	rjmp	.+594    	; 0x3a74 <__fp_inf>

00003822 <__addsf3x>:
    3822:	e9 2f       	mov	r30, r25
    3824:	4f d1       	rcall	.+670    	; 0x3ac4 <__fp_split3>
    3826:	80 f3       	brcs	.-32     	; 0x3808 <__addsf3+0x8>
    3828:	ba 17       	cp	r27, r26
    382a:	62 07       	cpc	r22, r18
    382c:	73 07       	cpc	r23, r19
    382e:	84 07       	cpc	r24, r20
    3830:	95 07       	cpc	r25, r21
    3832:	18 f0       	brcs	.+6      	; 0x383a <__addsf3x+0x18>
    3834:	71 f4       	brne	.+28     	; 0x3852 <__addsf3x+0x30>
    3836:	9e f5       	brtc	.+102    	; 0x389e <__addsf3x+0x7c>
    3838:	67 c1       	rjmp	.+718    	; 0x3b08 <__fp_zero>
    383a:	0e f4       	brtc	.+2      	; 0x383e <__addsf3x+0x1c>
    383c:	e0 95       	com	r30
    383e:	0b 2e       	mov	r0, r27
    3840:	ba 2f       	mov	r27, r26
    3842:	a0 2d       	mov	r26, r0
    3844:	0b 01       	movw	r0, r22
    3846:	b9 01       	movw	r22, r18
    3848:	90 01       	movw	r18, r0
    384a:	0c 01       	movw	r0, r24
    384c:	ca 01       	movw	r24, r20
    384e:	a0 01       	movw	r20, r0
    3850:	11 24       	eor	r1, r1
    3852:	ff 27       	eor	r31, r31
    3854:	59 1b       	sub	r21, r25
    3856:	99 f0       	breq	.+38     	; 0x387e <__addsf3x+0x5c>
    3858:	59 3f       	cpi	r21, 0xF9	; 249
    385a:	50 f4       	brcc	.+20     	; 0x3870 <__addsf3x+0x4e>
    385c:	50 3e       	cpi	r21, 0xE0	; 224
    385e:	68 f1       	brcs	.+90     	; 0x38ba <__addsf3x+0x98>
    3860:	1a 16       	cp	r1, r26
    3862:	f0 40       	sbci	r31, 0x00	; 0
    3864:	a2 2f       	mov	r26, r18
    3866:	23 2f       	mov	r18, r19
    3868:	34 2f       	mov	r19, r20
    386a:	44 27       	eor	r20, r20
    386c:	58 5f       	subi	r21, 0xF8	; 248
    386e:	f3 cf       	rjmp	.-26     	; 0x3856 <__addsf3x+0x34>
    3870:	46 95       	lsr	r20
    3872:	37 95       	ror	r19
    3874:	27 95       	ror	r18
    3876:	a7 95       	ror	r26
    3878:	f0 40       	sbci	r31, 0x00	; 0
    387a:	53 95       	inc	r21
    387c:	c9 f7       	brne	.-14     	; 0x3870 <__addsf3x+0x4e>
    387e:	7e f4       	brtc	.+30     	; 0x389e <__addsf3x+0x7c>
    3880:	1f 16       	cp	r1, r31
    3882:	ba 0b       	sbc	r27, r26
    3884:	62 0b       	sbc	r22, r18
    3886:	73 0b       	sbc	r23, r19
    3888:	84 0b       	sbc	r24, r20
    388a:	ba f0       	brmi	.+46     	; 0x38ba <__addsf3x+0x98>
    388c:	91 50       	subi	r25, 0x01	; 1
    388e:	a1 f0       	breq	.+40     	; 0x38b8 <__addsf3x+0x96>
    3890:	ff 0f       	add	r31, r31
    3892:	bb 1f       	adc	r27, r27
    3894:	66 1f       	adc	r22, r22
    3896:	77 1f       	adc	r23, r23
    3898:	88 1f       	adc	r24, r24
    389a:	c2 f7       	brpl	.-16     	; 0x388c <__addsf3x+0x6a>
    389c:	0e c0       	rjmp	.+28     	; 0x38ba <__addsf3x+0x98>
    389e:	ba 0f       	add	r27, r26
    38a0:	62 1f       	adc	r22, r18
    38a2:	73 1f       	adc	r23, r19
    38a4:	84 1f       	adc	r24, r20
    38a6:	48 f4       	brcc	.+18     	; 0x38ba <__addsf3x+0x98>
    38a8:	87 95       	ror	r24
    38aa:	77 95       	ror	r23
    38ac:	67 95       	ror	r22
    38ae:	b7 95       	ror	r27
    38b0:	f7 95       	ror	r31
    38b2:	9e 3f       	cpi	r25, 0xFE	; 254
    38b4:	08 f0       	brcs	.+2      	; 0x38b8 <__addsf3x+0x96>
    38b6:	b3 cf       	rjmp	.-154    	; 0x381e <__addsf3+0x1e>
    38b8:	93 95       	inc	r25
    38ba:	88 0f       	add	r24, r24
    38bc:	08 f0       	brcs	.+2      	; 0x38c0 <__addsf3x+0x9e>
    38be:	99 27       	eor	r25, r25
    38c0:	ee 0f       	add	r30, r30
    38c2:	97 95       	ror	r25
    38c4:	87 95       	ror	r24
    38c6:	08 95       	ret

000038c8 <__divsf3>:
    38c8:	0c d0       	rcall	.+24     	; 0x38e2 <__divsf3x>
    38ca:	eb c0       	rjmp	.+470    	; 0x3aa2 <__fp_round>
    38cc:	e3 d0       	rcall	.+454    	; 0x3a94 <__fp_pscB>
    38ce:	40 f0       	brcs	.+16     	; 0x38e0 <__divsf3+0x18>
    38d0:	da d0       	rcall	.+436    	; 0x3a86 <__fp_pscA>
    38d2:	30 f0       	brcs	.+12     	; 0x38e0 <__divsf3+0x18>
    38d4:	21 f4       	brne	.+8      	; 0x38de <__divsf3+0x16>
    38d6:	5f 3f       	cpi	r21, 0xFF	; 255
    38d8:	19 f0       	breq	.+6      	; 0x38e0 <__divsf3+0x18>
    38da:	cc c0       	rjmp	.+408    	; 0x3a74 <__fp_inf>
    38dc:	51 11       	cpse	r21, r1
    38de:	15 c1       	rjmp	.+554    	; 0x3b0a <__fp_szero>
    38e0:	cf c0       	rjmp	.+414    	; 0x3a80 <__fp_nan>

000038e2 <__divsf3x>:
    38e2:	f0 d0       	rcall	.+480    	; 0x3ac4 <__fp_split3>
    38e4:	98 f3       	brcs	.-26     	; 0x38cc <__divsf3+0x4>

000038e6 <__divsf3_pse>:
    38e6:	99 23       	and	r25, r25
    38e8:	c9 f3       	breq	.-14     	; 0x38dc <__divsf3+0x14>
    38ea:	55 23       	and	r21, r21
    38ec:	b1 f3       	breq	.-20     	; 0x38da <__divsf3+0x12>
    38ee:	95 1b       	sub	r25, r21
    38f0:	55 0b       	sbc	r21, r21
    38f2:	bb 27       	eor	r27, r27
    38f4:	aa 27       	eor	r26, r26
    38f6:	62 17       	cp	r22, r18
    38f8:	73 07       	cpc	r23, r19
    38fa:	84 07       	cpc	r24, r20
    38fc:	38 f0       	brcs	.+14     	; 0x390c <__divsf3_pse+0x26>
    38fe:	9f 5f       	subi	r25, 0xFF	; 255
    3900:	5f 4f       	sbci	r21, 0xFF	; 255
    3902:	22 0f       	add	r18, r18
    3904:	33 1f       	adc	r19, r19
    3906:	44 1f       	adc	r20, r20
    3908:	aa 1f       	adc	r26, r26
    390a:	a9 f3       	breq	.-22     	; 0x38f6 <__divsf3_pse+0x10>
    390c:	33 d0       	rcall	.+102    	; 0x3974 <__divsf3_pse+0x8e>
    390e:	0e 2e       	mov	r0, r30
    3910:	3a f0       	brmi	.+14     	; 0x3920 <__divsf3_pse+0x3a>
    3912:	e0 e8       	ldi	r30, 0x80	; 128
    3914:	30 d0       	rcall	.+96     	; 0x3976 <__divsf3_pse+0x90>
    3916:	91 50       	subi	r25, 0x01	; 1
    3918:	50 40       	sbci	r21, 0x00	; 0
    391a:	e6 95       	lsr	r30
    391c:	00 1c       	adc	r0, r0
    391e:	ca f7       	brpl	.-14     	; 0x3912 <__divsf3_pse+0x2c>
    3920:	29 d0       	rcall	.+82     	; 0x3974 <__divsf3_pse+0x8e>
    3922:	fe 2f       	mov	r31, r30
    3924:	27 d0       	rcall	.+78     	; 0x3974 <__divsf3_pse+0x8e>
    3926:	66 0f       	add	r22, r22
    3928:	77 1f       	adc	r23, r23
    392a:	88 1f       	adc	r24, r24
    392c:	bb 1f       	adc	r27, r27
    392e:	26 17       	cp	r18, r22
    3930:	37 07       	cpc	r19, r23
    3932:	48 07       	cpc	r20, r24
    3934:	ab 07       	cpc	r26, r27
    3936:	b0 e8       	ldi	r27, 0x80	; 128
    3938:	09 f0       	breq	.+2      	; 0x393c <__divsf3_pse+0x56>
    393a:	bb 0b       	sbc	r27, r27
    393c:	80 2d       	mov	r24, r0
    393e:	bf 01       	movw	r22, r30
    3940:	ff 27       	eor	r31, r31
    3942:	93 58       	subi	r25, 0x83	; 131
    3944:	5f 4f       	sbci	r21, 0xFF	; 255
    3946:	2a f0       	brmi	.+10     	; 0x3952 <__divsf3_pse+0x6c>
    3948:	9e 3f       	cpi	r25, 0xFE	; 254
    394a:	51 05       	cpc	r21, r1
    394c:	68 f0       	brcs	.+26     	; 0x3968 <__divsf3_pse+0x82>
    394e:	92 c0       	rjmp	.+292    	; 0x3a74 <__fp_inf>
    3950:	dc c0       	rjmp	.+440    	; 0x3b0a <__fp_szero>
    3952:	5f 3f       	cpi	r21, 0xFF	; 255
    3954:	ec f3       	brlt	.-6      	; 0x3950 <__divsf3_pse+0x6a>
    3956:	98 3e       	cpi	r25, 0xE8	; 232
    3958:	dc f3       	brlt	.-10     	; 0x3950 <__divsf3_pse+0x6a>
    395a:	86 95       	lsr	r24
    395c:	77 95       	ror	r23
    395e:	67 95       	ror	r22
    3960:	b7 95       	ror	r27
    3962:	f7 95       	ror	r31
    3964:	9f 5f       	subi	r25, 0xFF	; 255
    3966:	c9 f7       	brne	.-14     	; 0x395a <__divsf3_pse+0x74>
    3968:	88 0f       	add	r24, r24
    396a:	91 1d       	adc	r25, r1
    396c:	96 95       	lsr	r25
    396e:	87 95       	ror	r24
    3970:	97 f9       	bld	r25, 7
    3972:	08 95       	ret
    3974:	e1 e0       	ldi	r30, 0x01	; 1
    3976:	66 0f       	add	r22, r22
    3978:	77 1f       	adc	r23, r23
    397a:	88 1f       	adc	r24, r24
    397c:	bb 1f       	adc	r27, r27
    397e:	62 17       	cp	r22, r18
    3980:	73 07       	cpc	r23, r19
    3982:	84 07       	cpc	r24, r20
    3984:	ba 07       	cpc	r27, r26
    3986:	20 f0       	brcs	.+8      	; 0x3990 <__divsf3_pse+0xaa>
    3988:	62 1b       	sub	r22, r18
    398a:	73 0b       	sbc	r23, r19
    398c:	84 0b       	sbc	r24, r20
    398e:	ba 0b       	sbc	r27, r26
    3990:	ee 1f       	adc	r30, r30
    3992:	88 f7       	brcc	.-30     	; 0x3976 <__divsf3_pse+0x90>
    3994:	e0 95       	com	r30
    3996:	08 95       	ret

00003998 <__fixsfsi>:
    3998:	04 d0       	rcall	.+8      	; 0x39a2 <__fixunssfsi>
    399a:	68 94       	set
    399c:	b1 11       	cpse	r27, r1
    399e:	b5 c0       	rjmp	.+362    	; 0x3b0a <__fp_szero>
    39a0:	08 95       	ret

000039a2 <__fixunssfsi>:
    39a2:	98 d0       	rcall	.+304    	; 0x3ad4 <__fp_splitA>
    39a4:	88 f0       	brcs	.+34     	; 0x39c8 <__fixunssfsi+0x26>
    39a6:	9f 57       	subi	r25, 0x7F	; 127
    39a8:	90 f0       	brcs	.+36     	; 0x39ce <__fixunssfsi+0x2c>
    39aa:	b9 2f       	mov	r27, r25
    39ac:	99 27       	eor	r25, r25
    39ae:	b7 51       	subi	r27, 0x17	; 23
    39b0:	a0 f0       	brcs	.+40     	; 0x39da <__fixunssfsi+0x38>
    39b2:	d1 f0       	breq	.+52     	; 0x39e8 <__fixunssfsi+0x46>
    39b4:	66 0f       	add	r22, r22
    39b6:	77 1f       	adc	r23, r23
    39b8:	88 1f       	adc	r24, r24
    39ba:	99 1f       	adc	r25, r25
    39bc:	1a f0       	brmi	.+6      	; 0x39c4 <__fixunssfsi+0x22>
    39be:	ba 95       	dec	r27
    39c0:	c9 f7       	brne	.-14     	; 0x39b4 <__fixunssfsi+0x12>
    39c2:	12 c0       	rjmp	.+36     	; 0x39e8 <__fixunssfsi+0x46>
    39c4:	b1 30       	cpi	r27, 0x01	; 1
    39c6:	81 f0       	breq	.+32     	; 0x39e8 <__fixunssfsi+0x46>
    39c8:	9f d0       	rcall	.+318    	; 0x3b08 <__fp_zero>
    39ca:	b1 e0       	ldi	r27, 0x01	; 1
    39cc:	08 95       	ret
    39ce:	9c c0       	rjmp	.+312    	; 0x3b08 <__fp_zero>
    39d0:	67 2f       	mov	r22, r23
    39d2:	78 2f       	mov	r23, r24
    39d4:	88 27       	eor	r24, r24
    39d6:	b8 5f       	subi	r27, 0xF8	; 248
    39d8:	39 f0       	breq	.+14     	; 0x39e8 <__fixunssfsi+0x46>
    39da:	b9 3f       	cpi	r27, 0xF9	; 249
    39dc:	cc f3       	brlt	.-14     	; 0x39d0 <__fixunssfsi+0x2e>
    39de:	86 95       	lsr	r24
    39e0:	77 95       	ror	r23
    39e2:	67 95       	ror	r22
    39e4:	b3 95       	inc	r27
    39e6:	d9 f7       	brne	.-10     	; 0x39de <__fixunssfsi+0x3c>
    39e8:	3e f4       	brtc	.+14     	; 0x39f8 <__fixunssfsi+0x56>
    39ea:	90 95       	com	r25
    39ec:	80 95       	com	r24
    39ee:	70 95       	com	r23
    39f0:	61 95       	neg	r22
    39f2:	7f 4f       	sbci	r23, 0xFF	; 255
    39f4:	8f 4f       	sbci	r24, 0xFF	; 255
    39f6:	9f 4f       	sbci	r25, 0xFF	; 255
    39f8:	08 95       	ret

000039fa <__floatunsisf>:
    39fa:	e8 94       	clt
    39fc:	09 c0       	rjmp	.+18     	; 0x3a10 <__floatsisf+0x12>

000039fe <__floatsisf>:
    39fe:	97 fb       	bst	r25, 7
    3a00:	3e f4       	brtc	.+14     	; 0x3a10 <__floatsisf+0x12>
    3a02:	90 95       	com	r25
    3a04:	80 95       	com	r24
    3a06:	70 95       	com	r23
    3a08:	61 95       	neg	r22
    3a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a0c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a10:	99 23       	and	r25, r25
    3a12:	a9 f0       	breq	.+42     	; 0x3a3e <__floatsisf+0x40>
    3a14:	f9 2f       	mov	r31, r25
    3a16:	96 e9       	ldi	r25, 0x96	; 150
    3a18:	bb 27       	eor	r27, r27
    3a1a:	93 95       	inc	r25
    3a1c:	f6 95       	lsr	r31
    3a1e:	87 95       	ror	r24
    3a20:	77 95       	ror	r23
    3a22:	67 95       	ror	r22
    3a24:	b7 95       	ror	r27
    3a26:	f1 11       	cpse	r31, r1
    3a28:	f8 cf       	rjmp	.-16     	; 0x3a1a <__floatsisf+0x1c>
    3a2a:	fa f4       	brpl	.+62     	; 0x3a6a <__floatsisf+0x6c>
    3a2c:	bb 0f       	add	r27, r27
    3a2e:	11 f4       	brne	.+4      	; 0x3a34 <__floatsisf+0x36>
    3a30:	60 ff       	sbrs	r22, 0
    3a32:	1b c0       	rjmp	.+54     	; 0x3a6a <__floatsisf+0x6c>
    3a34:	6f 5f       	subi	r22, 0xFF	; 255
    3a36:	7f 4f       	sbci	r23, 0xFF	; 255
    3a38:	8f 4f       	sbci	r24, 0xFF	; 255
    3a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a3c:	16 c0       	rjmp	.+44     	; 0x3a6a <__floatsisf+0x6c>
    3a3e:	88 23       	and	r24, r24
    3a40:	11 f0       	breq	.+4      	; 0x3a46 <__floatsisf+0x48>
    3a42:	96 e9       	ldi	r25, 0x96	; 150
    3a44:	11 c0       	rjmp	.+34     	; 0x3a68 <__floatsisf+0x6a>
    3a46:	77 23       	and	r23, r23
    3a48:	21 f0       	breq	.+8      	; 0x3a52 <__floatsisf+0x54>
    3a4a:	9e e8       	ldi	r25, 0x8E	; 142
    3a4c:	87 2f       	mov	r24, r23
    3a4e:	76 2f       	mov	r23, r22
    3a50:	05 c0       	rjmp	.+10     	; 0x3a5c <__floatsisf+0x5e>
    3a52:	66 23       	and	r22, r22
    3a54:	71 f0       	breq	.+28     	; 0x3a72 <__floatsisf+0x74>
    3a56:	96 e8       	ldi	r25, 0x86	; 134
    3a58:	86 2f       	mov	r24, r22
    3a5a:	70 e0       	ldi	r23, 0x00	; 0
    3a5c:	60 e0       	ldi	r22, 0x00	; 0
    3a5e:	2a f0       	brmi	.+10     	; 0x3a6a <__floatsisf+0x6c>
    3a60:	9a 95       	dec	r25
    3a62:	66 0f       	add	r22, r22
    3a64:	77 1f       	adc	r23, r23
    3a66:	88 1f       	adc	r24, r24
    3a68:	da f7       	brpl	.-10     	; 0x3a60 <__floatsisf+0x62>
    3a6a:	88 0f       	add	r24, r24
    3a6c:	96 95       	lsr	r25
    3a6e:	87 95       	ror	r24
    3a70:	97 f9       	bld	r25, 7
    3a72:	08 95       	ret

00003a74 <__fp_inf>:
    3a74:	97 f9       	bld	r25, 7
    3a76:	9f 67       	ori	r25, 0x7F	; 127
    3a78:	80 e8       	ldi	r24, 0x80	; 128
    3a7a:	70 e0       	ldi	r23, 0x00	; 0
    3a7c:	60 e0       	ldi	r22, 0x00	; 0
    3a7e:	08 95       	ret

00003a80 <__fp_nan>:
    3a80:	9f ef       	ldi	r25, 0xFF	; 255
    3a82:	80 ec       	ldi	r24, 0xC0	; 192
    3a84:	08 95       	ret

00003a86 <__fp_pscA>:
    3a86:	00 24       	eor	r0, r0
    3a88:	0a 94       	dec	r0
    3a8a:	16 16       	cp	r1, r22
    3a8c:	17 06       	cpc	r1, r23
    3a8e:	18 06       	cpc	r1, r24
    3a90:	09 06       	cpc	r0, r25
    3a92:	08 95       	ret

00003a94 <__fp_pscB>:
    3a94:	00 24       	eor	r0, r0
    3a96:	0a 94       	dec	r0
    3a98:	12 16       	cp	r1, r18
    3a9a:	13 06       	cpc	r1, r19
    3a9c:	14 06       	cpc	r1, r20
    3a9e:	05 06       	cpc	r0, r21
    3aa0:	08 95       	ret

00003aa2 <__fp_round>:
    3aa2:	09 2e       	mov	r0, r25
    3aa4:	03 94       	inc	r0
    3aa6:	00 0c       	add	r0, r0
    3aa8:	11 f4       	brne	.+4      	; 0x3aae <__fp_round+0xc>
    3aaa:	88 23       	and	r24, r24
    3aac:	52 f0       	brmi	.+20     	; 0x3ac2 <__fp_round+0x20>
    3aae:	bb 0f       	add	r27, r27
    3ab0:	40 f4       	brcc	.+16     	; 0x3ac2 <__fp_round+0x20>
    3ab2:	bf 2b       	or	r27, r31
    3ab4:	11 f4       	brne	.+4      	; 0x3aba <__fp_round+0x18>
    3ab6:	60 ff       	sbrs	r22, 0
    3ab8:	04 c0       	rjmp	.+8      	; 0x3ac2 <__fp_round+0x20>
    3aba:	6f 5f       	subi	r22, 0xFF	; 255
    3abc:	7f 4f       	sbci	r23, 0xFF	; 255
    3abe:	8f 4f       	sbci	r24, 0xFF	; 255
    3ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    3ac2:	08 95       	ret

00003ac4 <__fp_split3>:
    3ac4:	57 fd       	sbrc	r21, 7
    3ac6:	90 58       	subi	r25, 0x80	; 128
    3ac8:	44 0f       	add	r20, r20
    3aca:	55 1f       	adc	r21, r21
    3acc:	59 f0       	breq	.+22     	; 0x3ae4 <__fp_splitA+0x10>
    3ace:	5f 3f       	cpi	r21, 0xFF	; 255
    3ad0:	71 f0       	breq	.+28     	; 0x3aee <__fp_splitA+0x1a>
    3ad2:	47 95       	ror	r20

00003ad4 <__fp_splitA>:
    3ad4:	88 0f       	add	r24, r24
    3ad6:	97 fb       	bst	r25, 7
    3ad8:	99 1f       	adc	r25, r25
    3ada:	61 f0       	breq	.+24     	; 0x3af4 <__fp_splitA+0x20>
    3adc:	9f 3f       	cpi	r25, 0xFF	; 255
    3ade:	79 f0       	breq	.+30     	; 0x3afe <__fp_splitA+0x2a>
    3ae0:	87 95       	ror	r24
    3ae2:	08 95       	ret
    3ae4:	12 16       	cp	r1, r18
    3ae6:	13 06       	cpc	r1, r19
    3ae8:	14 06       	cpc	r1, r20
    3aea:	55 1f       	adc	r21, r21
    3aec:	f2 cf       	rjmp	.-28     	; 0x3ad2 <__fp_split3+0xe>
    3aee:	46 95       	lsr	r20
    3af0:	f1 df       	rcall	.-30     	; 0x3ad4 <__fp_splitA>
    3af2:	08 c0       	rjmp	.+16     	; 0x3b04 <__fp_splitA+0x30>
    3af4:	16 16       	cp	r1, r22
    3af6:	17 06       	cpc	r1, r23
    3af8:	18 06       	cpc	r1, r24
    3afa:	99 1f       	adc	r25, r25
    3afc:	f1 cf       	rjmp	.-30     	; 0x3ae0 <__fp_splitA+0xc>
    3afe:	86 95       	lsr	r24
    3b00:	71 05       	cpc	r23, r1
    3b02:	61 05       	cpc	r22, r1
    3b04:	08 94       	sec
    3b06:	08 95       	ret

00003b08 <__fp_zero>:
    3b08:	e8 94       	clt

00003b0a <__fp_szero>:
    3b0a:	bb 27       	eor	r27, r27
    3b0c:	66 27       	eor	r22, r22
    3b0e:	77 27       	eor	r23, r23
    3b10:	cb 01       	movw	r24, r22
    3b12:	97 f9       	bld	r25, 7
    3b14:	08 95       	ret
    3b16:	0e f0       	brts	.+2      	; 0x3b1a <__fp_szero+0x10>
    3b18:	23 c1       	rjmp	.+582    	; 0x3d60 <__fp_mpack>
    3b1a:	b2 cf       	rjmp	.-156    	; 0x3a80 <__fp_nan>
    3b1c:	68 94       	set
    3b1e:	aa cf       	rjmp	.-172    	; 0x3a74 <__fp_inf>

00003b20 <log>:
    3b20:	d9 df       	rcall	.-78     	; 0x3ad4 <__fp_splitA>
    3b22:	c8 f3       	brcs	.-14     	; 0x3b16 <__fp_szero+0xc>
    3b24:	99 23       	and	r25, r25
    3b26:	d1 f3       	breq	.-12     	; 0x3b1c <__fp_szero+0x12>
    3b28:	c6 f3       	brts	.-16     	; 0x3b1a <__fp_szero+0x10>
    3b2a:	df 93       	push	r29
    3b2c:	cf 93       	push	r28
    3b2e:	1f 93       	push	r17
    3b30:	0f 93       	push	r16
    3b32:	ff 92       	push	r15
    3b34:	c9 2f       	mov	r28, r25
    3b36:	dd 27       	eor	r29, r29
    3b38:	88 23       	and	r24, r24
    3b3a:	2a f0       	brmi	.+10     	; 0x3b46 <log+0x26>
    3b3c:	21 97       	sbiw	r28, 0x01	; 1
    3b3e:	66 0f       	add	r22, r22
    3b40:	77 1f       	adc	r23, r23
    3b42:	88 1f       	adc	r24, r24
    3b44:	da f7       	brpl	.-10     	; 0x3b3c <log+0x1c>
    3b46:	20 e0       	ldi	r18, 0x00	; 0
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	40 e8       	ldi	r20, 0x80	; 128
    3b4c:	5f eb       	ldi	r21, 0xBF	; 191
    3b4e:	9f e3       	ldi	r25, 0x3F	; 63
    3b50:	88 39       	cpi	r24, 0x98	; 152
    3b52:	20 f0       	brcs	.+8      	; 0x3b5c <log+0x3c>
    3b54:	80 3e       	cpi	r24, 0xE0	; 224
    3b56:	30 f0       	brcs	.+12     	; 0x3b64 <log+0x44>
    3b58:	21 96       	adiw	r28, 0x01	; 1
    3b5a:	8f 77       	andi	r24, 0x7F	; 127
    3b5c:	51 de       	rcall	.-862    	; 0x3800 <__addsf3>
    3b5e:	ea e7       	ldi	r30, 0x7A	; 122
    3b60:	f2 e0       	ldi	r31, 0x02	; 2
    3b62:	03 c0       	rjmp	.+6      	; 0x3b6a <log+0x4a>
    3b64:	4d de       	rcall	.-870    	; 0x3800 <__addsf3>
    3b66:	e7 ea       	ldi	r30, 0xA7	; 167
    3b68:	f2 e0       	ldi	r31, 0x02	; 2
    3b6a:	08 d1       	rcall	.+528    	; 0x3d7c <__fp_powser>
    3b6c:	8b 01       	movw	r16, r22
    3b6e:	be 01       	movw	r22, r28
    3b70:	ec 01       	movw	r28, r24
    3b72:	fb 2e       	mov	r15, r27
    3b74:	6f 57       	subi	r22, 0x7F	; 127
    3b76:	71 09       	sbc	r23, r1
    3b78:	75 95       	asr	r23
    3b7a:	77 1f       	adc	r23, r23
    3b7c:	88 0b       	sbc	r24, r24
    3b7e:	99 0b       	sbc	r25, r25
    3b80:	3e df       	rcall	.-388    	; 0x39fe <__floatsisf>
    3b82:	28 e1       	ldi	r18, 0x18	; 24
    3b84:	32 e7       	ldi	r19, 0x72	; 114
    3b86:	41 e3       	ldi	r20, 0x31	; 49
    3b88:	5f e3       	ldi	r21, 0x3F	; 63
    3b8a:	16 d0       	rcall	.+44     	; 0x3bb8 <__mulsf3x>
    3b8c:	af 2d       	mov	r26, r15
    3b8e:	98 01       	movw	r18, r16
    3b90:	ae 01       	movw	r20, r28
    3b92:	ff 90       	pop	r15
    3b94:	0f 91       	pop	r16
    3b96:	1f 91       	pop	r17
    3b98:	cf 91       	pop	r28
    3b9a:	df 91       	pop	r29
    3b9c:	42 de       	rcall	.-892    	; 0x3822 <__addsf3x>
    3b9e:	81 cf       	rjmp	.-254    	; 0x3aa2 <__fp_round>

00003ba0 <__mulsf3>:
    3ba0:	0b d0       	rcall	.+22     	; 0x3bb8 <__mulsf3x>
    3ba2:	7f cf       	rjmp	.-258    	; 0x3aa2 <__fp_round>
    3ba4:	70 df       	rcall	.-288    	; 0x3a86 <__fp_pscA>
    3ba6:	28 f0       	brcs	.+10     	; 0x3bb2 <__mulsf3+0x12>
    3ba8:	75 df       	rcall	.-278    	; 0x3a94 <__fp_pscB>
    3baa:	18 f0       	brcs	.+6      	; 0x3bb2 <__mulsf3+0x12>
    3bac:	95 23       	and	r25, r21
    3bae:	09 f0       	breq	.+2      	; 0x3bb2 <__mulsf3+0x12>
    3bb0:	61 cf       	rjmp	.-318    	; 0x3a74 <__fp_inf>
    3bb2:	66 cf       	rjmp	.-308    	; 0x3a80 <__fp_nan>
    3bb4:	11 24       	eor	r1, r1
    3bb6:	a9 cf       	rjmp	.-174    	; 0x3b0a <__fp_szero>

00003bb8 <__mulsf3x>:
    3bb8:	85 df       	rcall	.-246    	; 0x3ac4 <__fp_split3>
    3bba:	a0 f3       	brcs	.-24     	; 0x3ba4 <__mulsf3+0x4>

00003bbc <__mulsf3_pse>:
    3bbc:	95 9f       	mul	r25, r21
    3bbe:	d1 f3       	breq	.-12     	; 0x3bb4 <__mulsf3+0x14>
    3bc0:	95 0f       	add	r25, r21
    3bc2:	50 e0       	ldi	r21, 0x00	; 0
    3bc4:	55 1f       	adc	r21, r21
    3bc6:	62 9f       	mul	r22, r18
    3bc8:	f0 01       	movw	r30, r0
    3bca:	72 9f       	mul	r23, r18
    3bcc:	bb 27       	eor	r27, r27
    3bce:	f0 0d       	add	r31, r0
    3bd0:	b1 1d       	adc	r27, r1
    3bd2:	63 9f       	mul	r22, r19
    3bd4:	aa 27       	eor	r26, r26
    3bd6:	f0 0d       	add	r31, r0
    3bd8:	b1 1d       	adc	r27, r1
    3bda:	aa 1f       	adc	r26, r26
    3bdc:	64 9f       	mul	r22, r20
    3bde:	66 27       	eor	r22, r22
    3be0:	b0 0d       	add	r27, r0
    3be2:	a1 1d       	adc	r26, r1
    3be4:	66 1f       	adc	r22, r22
    3be6:	82 9f       	mul	r24, r18
    3be8:	22 27       	eor	r18, r18
    3bea:	b0 0d       	add	r27, r0
    3bec:	a1 1d       	adc	r26, r1
    3bee:	62 1f       	adc	r22, r18
    3bf0:	73 9f       	mul	r23, r19
    3bf2:	b0 0d       	add	r27, r0
    3bf4:	a1 1d       	adc	r26, r1
    3bf6:	62 1f       	adc	r22, r18
    3bf8:	83 9f       	mul	r24, r19
    3bfa:	a0 0d       	add	r26, r0
    3bfc:	61 1d       	adc	r22, r1
    3bfe:	22 1f       	adc	r18, r18
    3c00:	74 9f       	mul	r23, r20
    3c02:	33 27       	eor	r19, r19
    3c04:	a0 0d       	add	r26, r0
    3c06:	61 1d       	adc	r22, r1
    3c08:	23 1f       	adc	r18, r19
    3c0a:	84 9f       	mul	r24, r20
    3c0c:	60 0d       	add	r22, r0
    3c0e:	21 1d       	adc	r18, r1
    3c10:	82 2f       	mov	r24, r18
    3c12:	76 2f       	mov	r23, r22
    3c14:	6a 2f       	mov	r22, r26
    3c16:	11 24       	eor	r1, r1
    3c18:	9f 57       	subi	r25, 0x7F	; 127
    3c1a:	50 40       	sbci	r21, 0x00	; 0
    3c1c:	8a f0       	brmi	.+34     	; 0x3c40 <__mulsf3_pse+0x84>
    3c1e:	e1 f0       	breq	.+56     	; 0x3c58 <__mulsf3_pse+0x9c>
    3c20:	88 23       	and	r24, r24
    3c22:	4a f0       	brmi	.+18     	; 0x3c36 <__mulsf3_pse+0x7a>
    3c24:	ee 0f       	add	r30, r30
    3c26:	ff 1f       	adc	r31, r31
    3c28:	bb 1f       	adc	r27, r27
    3c2a:	66 1f       	adc	r22, r22
    3c2c:	77 1f       	adc	r23, r23
    3c2e:	88 1f       	adc	r24, r24
    3c30:	91 50       	subi	r25, 0x01	; 1
    3c32:	50 40       	sbci	r21, 0x00	; 0
    3c34:	a9 f7       	brne	.-22     	; 0x3c20 <__mulsf3_pse+0x64>
    3c36:	9e 3f       	cpi	r25, 0xFE	; 254
    3c38:	51 05       	cpc	r21, r1
    3c3a:	70 f0       	brcs	.+28     	; 0x3c58 <__mulsf3_pse+0x9c>
    3c3c:	1b cf       	rjmp	.-458    	; 0x3a74 <__fp_inf>
    3c3e:	65 cf       	rjmp	.-310    	; 0x3b0a <__fp_szero>
    3c40:	5f 3f       	cpi	r21, 0xFF	; 255
    3c42:	ec f3       	brlt	.-6      	; 0x3c3e <__mulsf3_pse+0x82>
    3c44:	98 3e       	cpi	r25, 0xE8	; 232
    3c46:	dc f3       	brlt	.-10     	; 0x3c3e <__mulsf3_pse+0x82>
    3c48:	86 95       	lsr	r24
    3c4a:	77 95       	ror	r23
    3c4c:	67 95       	ror	r22
    3c4e:	b7 95       	ror	r27
    3c50:	f7 95       	ror	r31
    3c52:	e7 95       	ror	r30
    3c54:	9f 5f       	subi	r25, 0xFF	; 255
    3c56:	c1 f7       	brne	.-16     	; 0x3c48 <__mulsf3_pse+0x8c>
    3c58:	fe 2b       	or	r31, r30
    3c5a:	88 0f       	add	r24, r24
    3c5c:	91 1d       	adc	r25, r1
    3c5e:	96 95       	lsr	r25
    3c60:	87 95       	ror	r24
    3c62:	97 f9       	bld	r25, 7
    3c64:	08 95       	ret

00003c66 <pow>:
    3c66:	fa 01       	movw	r30, r20
    3c68:	ee 0f       	add	r30, r30
    3c6a:	ff 1f       	adc	r31, r31
    3c6c:	30 96       	adiw	r30, 0x00	; 0
    3c6e:	21 05       	cpc	r18, r1
    3c70:	31 05       	cpc	r19, r1
    3c72:	99 f1       	breq	.+102    	; 0x3cda <pow+0x74>
    3c74:	61 15       	cp	r22, r1
    3c76:	71 05       	cpc	r23, r1
    3c78:	61 f4       	brne	.+24     	; 0x3c92 <pow+0x2c>
    3c7a:	80 38       	cpi	r24, 0x80	; 128
    3c7c:	bf e3       	ldi	r27, 0x3F	; 63
    3c7e:	9b 07       	cpc	r25, r27
    3c80:	49 f1       	breq	.+82     	; 0x3cd4 <pow+0x6e>
    3c82:	68 94       	set
    3c84:	90 38       	cpi	r25, 0x80	; 128
    3c86:	81 05       	cpc	r24, r1
    3c88:	61 f0       	breq	.+24     	; 0x3ca2 <pow+0x3c>
    3c8a:	80 38       	cpi	r24, 0x80	; 128
    3c8c:	bf ef       	ldi	r27, 0xFF	; 255
    3c8e:	9b 07       	cpc	r25, r27
    3c90:	41 f0       	breq	.+16     	; 0x3ca2 <pow+0x3c>
    3c92:	99 23       	and	r25, r25
    3c94:	42 f5       	brpl	.+80     	; 0x3ce6 <pow+0x80>
    3c96:	ff 3f       	cpi	r31, 0xFF	; 255
    3c98:	e1 05       	cpc	r30, r1
    3c9a:	31 05       	cpc	r19, r1
    3c9c:	21 05       	cpc	r18, r1
    3c9e:	11 f1       	breq	.+68     	; 0x3ce4 <pow+0x7e>
    3ca0:	e8 94       	clt
    3ca2:	08 94       	sec
    3ca4:	e7 95       	ror	r30
    3ca6:	d9 01       	movw	r26, r18
    3ca8:	aa 23       	and	r26, r26
    3caa:	29 f4       	brne	.+10     	; 0x3cb6 <pow+0x50>
    3cac:	ab 2f       	mov	r26, r27
    3cae:	be 2f       	mov	r27, r30
    3cb0:	f8 5f       	subi	r31, 0xF8	; 248
    3cb2:	d0 f3       	brcs	.-12     	; 0x3ca8 <pow+0x42>
    3cb4:	10 c0       	rjmp	.+32     	; 0x3cd6 <pow+0x70>
    3cb6:	ff 5f       	subi	r31, 0xFF	; 255
    3cb8:	70 f4       	brcc	.+28     	; 0x3cd6 <pow+0x70>
    3cba:	a6 95       	lsr	r26
    3cbc:	e0 f7       	brcc	.-8      	; 0x3cb6 <pow+0x50>
    3cbe:	f7 39       	cpi	r31, 0x97	; 151
    3cc0:	50 f0       	brcs	.+20     	; 0x3cd6 <pow+0x70>
    3cc2:	19 f0       	breq	.+6      	; 0x3cca <pow+0x64>
    3cc4:	ff 3a       	cpi	r31, 0xAF	; 175
    3cc6:	38 f4       	brcc	.+14     	; 0x3cd6 <pow+0x70>
    3cc8:	9f 77       	andi	r25, 0x7F	; 127
    3cca:	9f 93       	push	r25
    3ccc:	0c d0       	rcall	.+24     	; 0x3ce6 <pow+0x80>
    3cce:	0f 90       	pop	r0
    3cd0:	07 fc       	sbrc	r0, 7
    3cd2:	90 58       	subi	r25, 0x80	; 128
    3cd4:	08 95       	ret
    3cd6:	3e f0       	brts	.+14     	; 0x3ce6 <pow+0x80>
    3cd8:	d3 ce       	rjmp	.-602    	; 0x3a80 <__fp_nan>
    3cda:	60 e0       	ldi	r22, 0x00	; 0
    3cdc:	70 e0       	ldi	r23, 0x00	; 0
    3cde:	80 e8       	ldi	r24, 0x80	; 128
    3ce0:	9f e3       	ldi	r25, 0x3F	; 63
    3ce2:	08 95       	ret
    3ce4:	4f e7       	ldi	r20, 0x7F	; 127
    3ce6:	9f 77       	andi	r25, 0x7F	; 127
    3ce8:	5f 93       	push	r21
    3cea:	4f 93       	push	r20
    3cec:	3f 93       	push	r19
    3cee:	2f 93       	push	r18
    3cf0:	17 df       	rcall	.-466    	; 0x3b20 <log>
    3cf2:	2f 91       	pop	r18
    3cf4:	3f 91       	pop	r19
    3cf6:	4f 91       	pop	r20
    3cf8:	5f 91       	pop	r21
    3cfa:	52 df       	rcall	.-348    	; 0x3ba0 <__mulsf3>
    3cfc:	05 c0       	rjmp	.+10     	; 0x3d08 <exp>
    3cfe:	19 f4       	brne	.+6      	; 0x3d06 <pow+0xa0>
    3d00:	0e f0       	brts	.+2      	; 0x3d04 <pow+0x9e>
    3d02:	b8 ce       	rjmp	.-656    	; 0x3a74 <__fp_inf>
    3d04:	01 cf       	rjmp	.-510    	; 0x3b08 <__fp_zero>
    3d06:	bc ce       	rjmp	.-648    	; 0x3a80 <__fp_nan>

00003d08 <exp>:
    3d08:	e5 de       	rcall	.-566    	; 0x3ad4 <__fp_splitA>
    3d0a:	c8 f3       	brcs	.-14     	; 0x3cfe <pow+0x98>
    3d0c:	96 38       	cpi	r25, 0x86	; 134
    3d0e:	c0 f7       	brcc	.-16     	; 0x3d00 <pow+0x9a>
    3d10:	07 f8       	bld	r0, 7
    3d12:	0f 92       	push	r0
    3d14:	e8 94       	clt
    3d16:	2b e3       	ldi	r18, 0x3B	; 59
    3d18:	3a ea       	ldi	r19, 0xAA	; 170
    3d1a:	48 eb       	ldi	r20, 0xB8	; 184
    3d1c:	5f e7       	ldi	r21, 0x7F	; 127
    3d1e:	4e df       	rcall	.-356    	; 0x3bbc <__mulsf3_pse>
    3d20:	0f 92       	push	r0
    3d22:	0f 92       	push	r0
    3d24:	0f 92       	push	r0
    3d26:	4d b7       	in	r20, 0x3d	; 61
    3d28:	5e b7       	in	r21, 0x3e	; 62
    3d2a:	0f 92       	push	r0
    3d2c:	89 d0       	rcall	.+274    	; 0x3e40 <modf>
    3d2e:	e4 ed       	ldi	r30, 0xD4	; 212
    3d30:	f2 e0       	ldi	r31, 0x02	; 2
    3d32:	24 d0       	rcall	.+72     	; 0x3d7c <__fp_powser>
    3d34:	4f 91       	pop	r20
    3d36:	5f 91       	pop	r21
    3d38:	ef 91       	pop	r30
    3d3a:	ff 91       	pop	r31
    3d3c:	e5 95       	asr	r30
    3d3e:	ee 1f       	adc	r30, r30
    3d40:	ff 1f       	adc	r31, r31
    3d42:	49 f0       	breq	.+18     	; 0x3d56 <exp+0x4e>
    3d44:	fe 57       	subi	r31, 0x7E	; 126
    3d46:	e0 68       	ori	r30, 0x80	; 128
    3d48:	44 27       	eor	r20, r20
    3d4a:	ee 0f       	add	r30, r30
    3d4c:	44 1f       	adc	r20, r20
    3d4e:	fa 95       	dec	r31
    3d50:	e1 f7       	brne	.-8      	; 0x3d4a <exp+0x42>
    3d52:	41 95       	neg	r20
    3d54:	55 0b       	sbc	r21, r21
    3d56:	40 d0       	rcall	.+128    	; 0x3dd8 <ldexp>
    3d58:	0f 90       	pop	r0
    3d5a:	07 fe       	sbrs	r0, 7
    3d5c:	34 c0       	rjmp	.+104    	; 0x3dc6 <inverse>
    3d5e:	08 95       	ret

00003d60 <__fp_mpack>:
    3d60:	9f 3f       	cpi	r25, 0xFF	; 255
    3d62:	31 f0       	breq	.+12     	; 0x3d70 <__fp_mpack_finite+0xc>

00003d64 <__fp_mpack_finite>:
    3d64:	91 50       	subi	r25, 0x01	; 1
    3d66:	20 f4       	brcc	.+8      	; 0x3d70 <__fp_mpack_finite+0xc>
    3d68:	87 95       	ror	r24
    3d6a:	77 95       	ror	r23
    3d6c:	67 95       	ror	r22
    3d6e:	b7 95       	ror	r27
    3d70:	88 0f       	add	r24, r24
    3d72:	91 1d       	adc	r25, r1
    3d74:	96 95       	lsr	r25
    3d76:	87 95       	ror	r24
    3d78:	97 f9       	bld	r25, 7
    3d7a:	08 95       	ret

00003d7c <__fp_powser>:
    3d7c:	df 93       	push	r29
    3d7e:	cf 93       	push	r28
    3d80:	1f 93       	push	r17
    3d82:	0f 93       	push	r16
    3d84:	ff 92       	push	r15
    3d86:	ef 92       	push	r14
    3d88:	df 92       	push	r13
    3d8a:	7b 01       	movw	r14, r22
    3d8c:	8c 01       	movw	r16, r24
    3d8e:	68 94       	set
    3d90:	05 c0       	rjmp	.+10     	; 0x3d9c <__fp_powser+0x20>
    3d92:	da 2e       	mov	r13, r26
    3d94:	ef 01       	movw	r28, r30
    3d96:	10 df       	rcall	.-480    	; 0x3bb8 <__mulsf3x>
    3d98:	fe 01       	movw	r30, r28
    3d9a:	e8 94       	clt
    3d9c:	a5 91       	lpm	r26, Z+
    3d9e:	25 91       	lpm	r18, Z+
    3da0:	35 91       	lpm	r19, Z+
    3da2:	45 91       	lpm	r20, Z+
    3da4:	55 91       	lpm	r21, Z+
    3da6:	ae f3       	brts	.-22     	; 0x3d92 <__fp_powser+0x16>
    3da8:	ef 01       	movw	r28, r30
    3daa:	3b dd       	rcall	.-1418   	; 0x3822 <__addsf3x>
    3dac:	fe 01       	movw	r30, r28
    3dae:	97 01       	movw	r18, r14
    3db0:	a8 01       	movw	r20, r16
    3db2:	da 94       	dec	r13
    3db4:	79 f7       	brne	.-34     	; 0x3d94 <__fp_powser+0x18>
    3db6:	df 90       	pop	r13
    3db8:	ef 90       	pop	r14
    3dba:	ff 90       	pop	r15
    3dbc:	0f 91       	pop	r16
    3dbe:	1f 91       	pop	r17
    3dc0:	cf 91       	pop	r28
    3dc2:	df 91       	pop	r29
    3dc4:	08 95       	ret

00003dc6 <inverse>:
    3dc6:	9b 01       	movw	r18, r22
    3dc8:	ac 01       	movw	r20, r24
    3dca:	60 e0       	ldi	r22, 0x00	; 0
    3dcc:	70 e0       	ldi	r23, 0x00	; 0
    3dce:	80 e8       	ldi	r24, 0x80	; 128
    3dd0:	9f e3       	ldi	r25, 0x3F	; 63
    3dd2:	7a cd       	rjmp	.-1292   	; 0x38c8 <__divsf3>
    3dd4:	4f ce       	rjmp	.-866    	; 0x3a74 <__fp_inf>
    3dd6:	c4 cf       	rjmp	.-120    	; 0x3d60 <__fp_mpack>

00003dd8 <ldexp>:
    3dd8:	7d de       	rcall	.-774    	; 0x3ad4 <__fp_splitA>
    3dda:	e8 f3       	brcs	.-6      	; 0x3dd6 <inverse+0x10>
    3ddc:	99 23       	and	r25, r25
    3dde:	d9 f3       	breq	.-10     	; 0x3dd6 <inverse+0x10>
    3de0:	94 0f       	add	r25, r20
    3de2:	51 1d       	adc	r21, r1
    3de4:	bb f3       	brvs	.-18     	; 0x3dd4 <inverse+0xe>
    3de6:	91 50       	subi	r25, 0x01	; 1
    3de8:	50 40       	sbci	r21, 0x00	; 0
    3dea:	94 f0       	brlt	.+36     	; 0x3e10 <ldexp+0x38>
    3dec:	59 f0       	breq	.+22     	; 0x3e04 <ldexp+0x2c>
    3dee:	88 23       	and	r24, r24
    3df0:	32 f0       	brmi	.+12     	; 0x3dfe <ldexp+0x26>
    3df2:	66 0f       	add	r22, r22
    3df4:	77 1f       	adc	r23, r23
    3df6:	88 1f       	adc	r24, r24
    3df8:	91 50       	subi	r25, 0x01	; 1
    3dfa:	50 40       	sbci	r21, 0x00	; 0
    3dfc:	c1 f7       	brne	.-16     	; 0x3dee <ldexp+0x16>
    3dfe:	9e 3f       	cpi	r25, 0xFE	; 254
    3e00:	51 05       	cpc	r21, r1
    3e02:	44 f7       	brge	.-48     	; 0x3dd4 <inverse+0xe>
    3e04:	88 0f       	add	r24, r24
    3e06:	91 1d       	adc	r25, r1
    3e08:	96 95       	lsr	r25
    3e0a:	87 95       	ror	r24
    3e0c:	97 f9       	bld	r25, 7
    3e0e:	08 95       	ret
    3e10:	5f 3f       	cpi	r21, 0xFF	; 255
    3e12:	ac f0       	brlt	.+42     	; 0x3e3e <ldexp+0x66>
    3e14:	98 3e       	cpi	r25, 0xE8	; 232
    3e16:	9c f0       	brlt	.+38     	; 0x3e3e <ldexp+0x66>
    3e18:	bb 27       	eor	r27, r27
    3e1a:	86 95       	lsr	r24
    3e1c:	77 95       	ror	r23
    3e1e:	67 95       	ror	r22
    3e20:	b7 95       	ror	r27
    3e22:	08 f4       	brcc	.+2      	; 0x3e26 <ldexp+0x4e>
    3e24:	b1 60       	ori	r27, 0x01	; 1
    3e26:	93 95       	inc	r25
    3e28:	c1 f7       	brne	.-16     	; 0x3e1a <ldexp+0x42>
    3e2a:	bb 0f       	add	r27, r27
    3e2c:	58 f7       	brcc	.-42     	; 0x3e04 <ldexp+0x2c>
    3e2e:	11 f4       	brne	.+4      	; 0x3e34 <ldexp+0x5c>
    3e30:	60 ff       	sbrs	r22, 0
    3e32:	e8 cf       	rjmp	.-48     	; 0x3e04 <ldexp+0x2c>
    3e34:	6f 5f       	subi	r22, 0xFF	; 255
    3e36:	7f 4f       	sbci	r23, 0xFF	; 255
    3e38:	8f 4f       	sbci	r24, 0xFF	; 255
    3e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e3c:	e3 cf       	rjmp	.-58     	; 0x3e04 <ldexp+0x2c>
    3e3e:	65 ce       	rjmp	.-822    	; 0x3b0a <__fp_szero>

00003e40 <modf>:
    3e40:	fa 01       	movw	r30, r20
    3e42:	dc 01       	movw	r26, r24
    3e44:	aa 0f       	add	r26, r26
    3e46:	bb 1f       	adc	r27, r27
    3e48:	9b 01       	movw	r18, r22
    3e4a:	ac 01       	movw	r20, r24
    3e4c:	bf 57       	subi	r27, 0x7F	; 127
    3e4e:	28 f4       	brcc	.+10     	; 0x3e5a <modf+0x1a>
    3e50:	22 27       	eor	r18, r18
    3e52:	33 27       	eor	r19, r19
    3e54:	44 27       	eor	r20, r20
    3e56:	50 78       	andi	r21, 0x80	; 128
    3e58:	1f c0       	rjmp	.+62     	; 0x3e98 <modf+0x58>
    3e5a:	b7 51       	subi	r27, 0x17	; 23
    3e5c:	88 f4       	brcc	.+34     	; 0x3e80 <modf+0x40>
    3e5e:	ab 2f       	mov	r26, r27
    3e60:	00 24       	eor	r0, r0
    3e62:	46 95       	lsr	r20
    3e64:	37 95       	ror	r19
    3e66:	27 95       	ror	r18
    3e68:	01 1c       	adc	r0, r1
    3e6a:	a3 95       	inc	r26
    3e6c:	d2 f3       	brmi	.-12     	; 0x3e62 <modf+0x22>
    3e6e:	00 20       	and	r0, r0
    3e70:	69 f0       	breq	.+26     	; 0x3e8c <modf+0x4c>
    3e72:	22 0f       	add	r18, r18
    3e74:	33 1f       	adc	r19, r19
    3e76:	44 1f       	adc	r20, r20
    3e78:	b3 95       	inc	r27
    3e7a:	da f3       	brmi	.-10     	; 0x3e72 <modf+0x32>
    3e7c:	0d d0       	rcall	.+26     	; 0x3e98 <modf+0x58>
    3e7e:	bf cc       	rjmp	.-1666   	; 0x37fe <__subsf3>
    3e80:	61 30       	cpi	r22, 0x01	; 1
    3e82:	71 05       	cpc	r23, r1
    3e84:	a0 e8       	ldi	r26, 0x80	; 128
    3e86:	8a 07       	cpc	r24, r26
    3e88:	b9 46       	sbci	r27, 0x69	; 105
    3e8a:	30 f4       	brcc	.+12     	; 0x3e98 <modf+0x58>
    3e8c:	9b 01       	movw	r18, r22
    3e8e:	ac 01       	movw	r20, r24
    3e90:	66 27       	eor	r22, r22
    3e92:	77 27       	eor	r23, r23
    3e94:	88 27       	eor	r24, r24
    3e96:	90 78       	andi	r25, 0x80	; 128
    3e98:	30 96       	adiw	r30, 0x00	; 0
    3e9a:	21 f0       	breq	.+8      	; 0x3ea4 <modf+0x64>
    3e9c:	20 83       	st	Z, r18
    3e9e:	31 83       	std	Z+1, r19	; 0x01
    3ea0:	42 83       	std	Z+2, r20	; 0x02
    3ea2:	53 83       	std	Z+3, r21	; 0x03
    3ea4:	08 95       	ret

00003ea6 <vfprintf>:
    3ea6:	2f 92       	push	r2
    3ea8:	3f 92       	push	r3
    3eaa:	4f 92       	push	r4
    3eac:	5f 92       	push	r5
    3eae:	6f 92       	push	r6
    3eb0:	7f 92       	push	r7
    3eb2:	8f 92       	push	r8
    3eb4:	9f 92       	push	r9
    3eb6:	af 92       	push	r10
    3eb8:	bf 92       	push	r11
    3eba:	cf 92       	push	r12
    3ebc:	df 92       	push	r13
    3ebe:	ef 92       	push	r14
    3ec0:	ff 92       	push	r15
    3ec2:	0f 93       	push	r16
    3ec4:	1f 93       	push	r17
    3ec6:	cf 93       	push	r28
    3ec8:	df 93       	push	r29
    3eca:	cd b7       	in	r28, 0x3d	; 61
    3ecc:	de b7       	in	r29, 0x3e	; 62
    3ece:	60 97       	sbiw	r28, 0x10	; 16
    3ed0:	cd bf       	out	0x3d, r28	; 61
    3ed2:	de bf       	out	0x3e, r29	; 62
    3ed4:	7c 01       	movw	r14, r24
    3ed6:	1b 01       	movw	r2, r22
    3ed8:	6a 01       	movw	r12, r20
    3eda:	fc 01       	movw	r30, r24
    3edc:	16 82       	std	Z+6, r1	; 0x06
    3ede:	17 82       	std	Z+7, r1	; 0x07
    3ee0:	83 81       	ldd	r24, Z+3	; 0x03
    3ee2:	81 ff       	sbrs	r24, 1
    3ee4:	2a c3       	rjmp	.+1620   	; 0x453a <__stack+0x53b>
    3ee6:	9e 01       	movw	r18, r28
    3ee8:	2f 5f       	subi	r18, 0xFF	; 255
    3eea:	3f 4f       	sbci	r19, 0xFF	; 255
    3eec:	39 01       	movw	r6, r18
    3eee:	f7 01       	movw	r30, r14
    3ef0:	93 81       	ldd	r25, Z+3	; 0x03
    3ef2:	f1 01       	movw	r30, r2
    3ef4:	93 fd       	sbrc	r25, 3
    3ef6:	85 91       	lpm	r24, Z+
    3ef8:	93 ff       	sbrs	r25, 3
    3efa:	81 91       	ld	r24, Z+
    3efc:	1f 01       	movw	r2, r30
    3efe:	88 23       	and	r24, r24
    3f00:	09 f4       	brne	.+2      	; 0x3f04 <vfprintf+0x5e>
    3f02:	17 c3       	rjmp	.+1582   	; 0x4532 <__stack+0x533>
    3f04:	85 32       	cpi	r24, 0x25	; 37
    3f06:	39 f4       	brne	.+14     	; 0x3f16 <vfprintf+0x70>
    3f08:	93 fd       	sbrc	r25, 3
    3f0a:	85 91       	lpm	r24, Z+
    3f0c:	93 ff       	sbrs	r25, 3
    3f0e:	81 91       	ld	r24, Z+
    3f10:	1f 01       	movw	r2, r30
    3f12:	85 32       	cpi	r24, 0x25	; 37
    3f14:	31 f4       	brne	.+12     	; 0x3f22 <vfprintf+0x7c>
    3f16:	b7 01       	movw	r22, r14
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	76 d5       	rcall	.+2796   	; 0x4a08 <fputc>
    3f1c:	56 01       	movw	r10, r12
    3f1e:	65 01       	movw	r12, r10
    3f20:	e6 cf       	rjmp	.-52     	; 0x3eee <vfprintf+0x48>
    3f22:	10 e0       	ldi	r17, 0x00	; 0
    3f24:	51 2c       	mov	r5, r1
    3f26:	91 2c       	mov	r9, r1
    3f28:	ff e1       	ldi	r31, 0x1F	; 31
    3f2a:	f9 15       	cp	r31, r9
    3f2c:	d8 f0       	brcs	.+54     	; 0x3f64 <vfprintf+0xbe>
    3f2e:	8b 32       	cpi	r24, 0x2B	; 43
    3f30:	79 f0       	breq	.+30     	; 0x3f50 <vfprintf+0xaa>
    3f32:	38 f4       	brcc	.+14     	; 0x3f42 <vfprintf+0x9c>
    3f34:	80 32       	cpi	r24, 0x20	; 32
    3f36:	79 f0       	breq	.+30     	; 0x3f56 <vfprintf+0xb0>
    3f38:	83 32       	cpi	r24, 0x23	; 35
    3f3a:	a1 f4       	brne	.+40     	; 0x3f64 <vfprintf+0xbe>
    3f3c:	f9 2d       	mov	r31, r9
    3f3e:	f0 61       	ori	r31, 0x10	; 16
    3f40:	2e c0       	rjmp	.+92     	; 0x3f9e <vfprintf+0xf8>
    3f42:	8d 32       	cpi	r24, 0x2D	; 45
    3f44:	61 f0       	breq	.+24     	; 0x3f5e <vfprintf+0xb8>
    3f46:	80 33       	cpi	r24, 0x30	; 48
    3f48:	69 f4       	brne	.+26     	; 0x3f64 <vfprintf+0xbe>
    3f4a:	29 2d       	mov	r18, r9
    3f4c:	21 60       	ori	r18, 0x01	; 1
    3f4e:	2d c0       	rjmp	.+90     	; 0x3faa <vfprintf+0x104>
    3f50:	39 2d       	mov	r19, r9
    3f52:	32 60       	ori	r19, 0x02	; 2
    3f54:	93 2e       	mov	r9, r19
    3f56:	89 2d       	mov	r24, r9
    3f58:	84 60       	ori	r24, 0x04	; 4
    3f5a:	98 2e       	mov	r9, r24
    3f5c:	2a c0       	rjmp	.+84     	; 0x3fb2 <vfprintf+0x10c>
    3f5e:	e9 2d       	mov	r30, r9
    3f60:	e8 60       	ori	r30, 0x08	; 8
    3f62:	15 c0       	rjmp	.+42     	; 0x3f8e <vfprintf+0xe8>
    3f64:	97 fc       	sbrc	r9, 7
    3f66:	2d c0       	rjmp	.+90     	; 0x3fc2 <vfprintf+0x11c>
    3f68:	20 ed       	ldi	r18, 0xD0	; 208
    3f6a:	28 0f       	add	r18, r24
    3f6c:	2a 30       	cpi	r18, 0x0A	; 10
    3f6e:	88 f4       	brcc	.+34     	; 0x3f92 <vfprintf+0xec>
    3f70:	96 fe       	sbrs	r9, 6
    3f72:	06 c0       	rjmp	.+12     	; 0x3f80 <vfprintf+0xda>
    3f74:	3a e0       	ldi	r19, 0x0A	; 10
    3f76:	13 9f       	mul	r17, r19
    3f78:	20 0d       	add	r18, r0
    3f7a:	11 24       	eor	r1, r1
    3f7c:	12 2f       	mov	r17, r18
    3f7e:	19 c0       	rjmp	.+50     	; 0x3fb2 <vfprintf+0x10c>
    3f80:	8a e0       	ldi	r24, 0x0A	; 10
    3f82:	58 9e       	mul	r5, r24
    3f84:	20 0d       	add	r18, r0
    3f86:	11 24       	eor	r1, r1
    3f88:	52 2e       	mov	r5, r18
    3f8a:	e9 2d       	mov	r30, r9
    3f8c:	e0 62       	ori	r30, 0x20	; 32
    3f8e:	9e 2e       	mov	r9, r30
    3f90:	10 c0       	rjmp	.+32     	; 0x3fb2 <vfprintf+0x10c>
    3f92:	8e 32       	cpi	r24, 0x2E	; 46
    3f94:	31 f4       	brne	.+12     	; 0x3fa2 <vfprintf+0xfc>
    3f96:	96 fc       	sbrc	r9, 6
    3f98:	cc c2       	rjmp	.+1432   	; 0x4532 <__stack+0x533>
    3f9a:	f9 2d       	mov	r31, r9
    3f9c:	f0 64       	ori	r31, 0x40	; 64
    3f9e:	9f 2e       	mov	r9, r31
    3fa0:	08 c0       	rjmp	.+16     	; 0x3fb2 <vfprintf+0x10c>
    3fa2:	8c 36       	cpi	r24, 0x6C	; 108
    3fa4:	21 f4       	brne	.+8      	; 0x3fae <vfprintf+0x108>
    3fa6:	29 2d       	mov	r18, r9
    3fa8:	20 68       	ori	r18, 0x80	; 128
    3faa:	92 2e       	mov	r9, r18
    3fac:	02 c0       	rjmp	.+4      	; 0x3fb2 <vfprintf+0x10c>
    3fae:	88 36       	cpi	r24, 0x68	; 104
    3fb0:	41 f4       	brne	.+16     	; 0x3fc2 <vfprintf+0x11c>
    3fb2:	f1 01       	movw	r30, r2
    3fb4:	93 fd       	sbrc	r25, 3
    3fb6:	85 91       	lpm	r24, Z+
    3fb8:	93 ff       	sbrs	r25, 3
    3fba:	81 91       	ld	r24, Z+
    3fbc:	1f 01       	movw	r2, r30
    3fbe:	81 11       	cpse	r24, r1
    3fc0:	b3 cf       	rjmp	.-154    	; 0x3f28 <vfprintf+0x82>
    3fc2:	9b eb       	ldi	r25, 0xBB	; 187
    3fc4:	98 0f       	add	r25, r24
    3fc6:	93 30       	cpi	r25, 0x03	; 3
    3fc8:	20 f4       	brcc	.+8      	; 0x3fd2 <vfprintf+0x12c>
    3fca:	99 2d       	mov	r25, r9
    3fcc:	90 61       	ori	r25, 0x10	; 16
    3fce:	80 5e       	subi	r24, 0xE0	; 224
    3fd0:	07 c0       	rjmp	.+14     	; 0x3fe0 <vfprintf+0x13a>
    3fd2:	9b e9       	ldi	r25, 0x9B	; 155
    3fd4:	98 0f       	add	r25, r24
    3fd6:	93 30       	cpi	r25, 0x03	; 3
    3fd8:	08 f0       	brcs	.+2      	; 0x3fdc <vfprintf+0x136>
    3fda:	59 c1       	rjmp	.+690    	; 0x428e <__stack+0x28f>
    3fdc:	99 2d       	mov	r25, r9
    3fde:	9f 7e       	andi	r25, 0xEF	; 239
    3fe0:	96 ff       	sbrs	r25, 6
    3fe2:	16 e0       	ldi	r17, 0x06	; 6
    3fe4:	9f 73       	andi	r25, 0x3F	; 63
    3fe6:	99 2e       	mov	r9, r25
    3fe8:	85 36       	cpi	r24, 0x65	; 101
    3fea:	19 f4       	brne	.+6      	; 0x3ff2 <vfprintf+0x14c>
    3fec:	90 64       	ori	r25, 0x40	; 64
    3fee:	99 2e       	mov	r9, r25
    3ff0:	08 c0       	rjmp	.+16     	; 0x4002 <__stack+0x3>
    3ff2:	86 36       	cpi	r24, 0x66	; 102
    3ff4:	21 f4       	brne	.+8      	; 0x3ffe <vfprintf+0x158>
    3ff6:	39 2f       	mov	r19, r25
    3ff8:	30 68       	ori	r19, 0x80	; 128
    3ffa:	93 2e       	mov	r9, r19
    3ffc:	02 c0       	rjmp	.+4      	; 0x4002 <__stack+0x3>
    3ffe:	11 11       	cpse	r17, r1
    4000:	11 50       	subi	r17, 0x01	; 1
    4002:	97 fe       	sbrs	r9, 7
    4004:	07 c0       	rjmp	.+14     	; 0x4014 <__stack+0x15>
    4006:	1c 33       	cpi	r17, 0x3C	; 60
    4008:	50 f4       	brcc	.+20     	; 0x401e <__stack+0x1f>
    400a:	44 24       	eor	r4, r4
    400c:	43 94       	inc	r4
    400e:	41 0e       	add	r4, r17
    4010:	27 e0       	ldi	r18, 0x07	; 7
    4012:	0b c0       	rjmp	.+22     	; 0x402a <__stack+0x2b>
    4014:	18 30       	cpi	r17, 0x08	; 8
    4016:	38 f0       	brcs	.+14     	; 0x4026 <__stack+0x27>
    4018:	27 e0       	ldi	r18, 0x07	; 7
    401a:	17 e0       	ldi	r17, 0x07	; 7
    401c:	05 c0       	rjmp	.+10     	; 0x4028 <__stack+0x29>
    401e:	27 e0       	ldi	r18, 0x07	; 7
    4020:	9c e3       	ldi	r25, 0x3C	; 60
    4022:	49 2e       	mov	r4, r25
    4024:	02 c0       	rjmp	.+4      	; 0x402a <__stack+0x2b>
    4026:	21 2f       	mov	r18, r17
    4028:	41 2c       	mov	r4, r1
    402a:	56 01       	movw	r10, r12
    402c:	84 e0       	ldi	r24, 0x04	; 4
    402e:	a8 0e       	add	r10, r24
    4030:	b1 1c       	adc	r11, r1
    4032:	f6 01       	movw	r30, r12
    4034:	60 81       	ld	r22, Z
    4036:	71 81       	ldd	r23, Z+1	; 0x01
    4038:	82 81       	ldd	r24, Z+2	; 0x02
    403a:	93 81       	ldd	r25, Z+3	; 0x03
    403c:	04 2d       	mov	r16, r4
    403e:	a3 01       	movw	r20, r6
    4040:	ab d3       	rcall	.+1878   	; 0x4798 <__ftoa_engine>
    4042:	6c 01       	movw	r12, r24
    4044:	f9 81       	ldd	r31, Y+1	; 0x01
    4046:	fc 87       	std	Y+12, r31	; 0x0c
    4048:	f0 ff       	sbrs	r31, 0
    404a:	02 c0       	rjmp	.+4      	; 0x4050 <__stack+0x51>
    404c:	f3 ff       	sbrs	r31, 3
    404e:	06 c0       	rjmp	.+12     	; 0x405c <__stack+0x5d>
    4050:	91 fc       	sbrc	r9, 1
    4052:	06 c0       	rjmp	.+12     	; 0x4060 <__stack+0x61>
    4054:	92 fe       	sbrs	r9, 2
    4056:	06 c0       	rjmp	.+12     	; 0x4064 <__stack+0x65>
    4058:	00 e2       	ldi	r16, 0x20	; 32
    405a:	05 c0       	rjmp	.+10     	; 0x4066 <__stack+0x67>
    405c:	0d e2       	ldi	r16, 0x2D	; 45
    405e:	03 c0       	rjmp	.+6      	; 0x4066 <__stack+0x67>
    4060:	0b e2       	ldi	r16, 0x2B	; 43
    4062:	01 c0       	rjmp	.+2      	; 0x4066 <__stack+0x67>
    4064:	00 e0       	ldi	r16, 0x00	; 0
    4066:	8c 85       	ldd	r24, Y+12	; 0x0c
    4068:	8c 70       	andi	r24, 0x0C	; 12
    406a:	19 f0       	breq	.+6      	; 0x4072 <__stack+0x73>
    406c:	01 11       	cpse	r16, r1
    406e:	43 c2       	rjmp	.+1158   	; 0x44f6 <__stack+0x4f7>
    4070:	80 c2       	rjmp	.+1280   	; 0x4572 <__stack+0x573>
    4072:	97 fe       	sbrs	r9, 7
    4074:	10 c0       	rjmp	.+32     	; 0x4096 <__stack+0x97>
    4076:	4c 0c       	add	r4, r12
    4078:	fc 85       	ldd	r31, Y+12	; 0x0c
    407a:	f4 ff       	sbrs	r31, 4
    407c:	04 c0       	rjmp	.+8      	; 0x4086 <__stack+0x87>
    407e:	8a 81       	ldd	r24, Y+2	; 0x02
    4080:	81 33       	cpi	r24, 0x31	; 49
    4082:	09 f4       	brne	.+2      	; 0x4086 <__stack+0x87>
    4084:	4a 94       	dec	r4
    4086:	14 14       	cp	r1, r4
    4088:	74 f5       	brge	.+92     	; 0x40e6 <__stack+0xe7>
    408a:	28 e0       	ldi	r18, 0x08	; 8
    408c:	24 15       	cp	r18, r4
    408e:	78 f5       	brcc	.+94     	; 0x40ee <__stack+0xef>
    4090:	88 e0       	ldi	r24, 0x08	; 8
    4092:	48 2e       	mov	r4, r24
    4094:	2c c0       	rjmp	.+88     	; 0x40ee <__stack+0xef>
    4096:	96 fc       	sbrc	r9, 6
    4098:	2a c0       	rjmp	.+84     	; 0x40ee <__stack+0xef>
    409a:	81 2f       	mov	r24, r17
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	8c 15       	cp	r24, r12
    40a0:	9d 05       	cpc	r25, r13
    40a2:	9c f0       	brlt	.+38     	; 0x40ca <__stack+0xcb>
    40a4:	3c ef       	ldi	r19, 0xFC	; 252
    40a6:	c3 16       	cp	r12, r19
    40a8:	3f ef       	ldi	r19, 0xFF	; 255
    40aa:	d3 06       	cpc	r13, r19
    40ac:	74 f0       	brlt	.+28     	; 0x40ca <__stack+0xcb>
    40ae:	89 2d       	mov	r24, r9
    40b0:	80 68       	ori	r24, 0x80	; 128
    40b2:	98 2e       	mov	r9, r24
    40b4:	0a c0       	rjmp	.+20     	; 0x40ca <__stack+0xcb>
    40b6:	e2 e0       	ldi	r30, 0x02	; 2
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	ec 0f       	add	r30, r28
    40bc:	fd 1f       	adc	r31, r29
    40be:	e1 0f       	add	r30, r17
    40c0:	f1 1d       	adc	r31, r1
    40c2:	80 81       	ld	r24, Z
    40c4:	80 33       	cpi	r24, 0x30	; 48
    40c6:	19 f4       	brne	.+6      	; 0x40ce <__stack+0xcf>
    40c8:	11 50       	subi	r17, 0x01	; 1
    40ca:	11 11       	cpse	r17, r1
    40cc:	f4 cf       	rjmp	.-24     	; 0x40b6 <__stack+0xb7>
    40ce:	97 fe       	sbrs	r9, 7
    40d0:	0e c0       	rjmp	.+28     	; 0x40ee <__stack+0xef>
    40d2:	44 24       	eor	r4, r4
    40d4:	43 94       	inc	r4
    40d6:	41 0e       	add	r4, r17
    40d8:	81 2f       	mov	r24, r17
    40da:	90 e0       	ldi	r25, 0x00	; 0
    40dc:	c8 16       	cp	r12, r24
    40de:	d9 06       	cpc	r13, r25
    40e0:	2c f4       	brge	.+10     	; 0x40ec <__stack+0xed>
    40e2:	1c 19       	sub	r17, r12
    40e4:	04 c0       	rjmp	.+8      	; 0x40ee <__stack+0xef>
    40e6:	44 24       	eor	r4, r4
    40e8:	43 94       	inc	r4
    40ea:	01 c0       	rjmp	.+2      	; 0x40ee <__stack+0xef>
    40ec:	10 e0       	ldi	r17, 0x00	; 0
    40ee:	97 fe       	sbrs	r9, 7
    40f0:	06 c0       	rjmp	.+12     	; 0x40fe <__stack+0xff>
    40f2:	1c 14       	cp	r1, r12
    40f4:	1d 04       	cpc	r1, r13
    40f6:	34 f4       	brge	.+12     	; 0x4104 <__stack+0x105>
    40f8:	c6 01       	movw	r24, r12
    40fa:	01 96       	adiw	r24, 0x01	; 1
    40fc:	05 c0       	rjmp	.+10     	; 0x4108 <__stack+0x109>
    40fe:	85 e0       	ldi	r24, 0x05	; 5
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	02 c0       	rjmp	.+4      	; 0x4108 <__stack+0x109>
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	01 11       	cpse	r16, r1
    410a:	01 96       	adiw	r24, 0x01	; 1
    410c:	11 23       	and	r17, r17
    410e:	31 f0       	breq	.+12     	; 0x411c <__stack+0x11d>
    4110:	21 2f       	mov	r18, r17
    4112:	30 e0       	ldi	r19, 0x00	; 0
    4114:	2f 5f       	subi	r18, 0xFF	; 255
    4116:	3f 4f       	sbci	r19, 0xFF	; 255
    4118:	82 0f       	add	r24, r18
    411a:	93 1f       	adc	r25, r19
    411c:	25 2d       	mov	r18, r5
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	82 17       	cp	r24, r18
    4122:	93 07       	cpc	r25, r19
    4124:	14 f4       	brge	.+4      	; 0x412a <__stack+0x12b>
    4126:	58 1a       	sub	r5, r24
    4128:	01 c0       	rjmp	.+2      	; 0x412c <__stack+0x12d>
    412a:	51 2c       	mov	r5, r1
    412c:	89 2d       	mov	r24, r9
    412e:	89 70       	andi	r24, 0x09	; 9
    4130:	41 f4       	brne	.+16     	; 0x4142 <__stack+0x143>
    4132:	55 20       	and	r5, r5
    4134:	31 f0       	breq	.+12     	; 0x4142 <__stack+0x143>
    4136:	b7 01       	movw	r22, r14
    4138:	80 e2       	ldi	r24, 0x20	; 32
    413a:	90 e0       	ldi	r25, 0x00	; 0
    413c:	65 d4       	rcall	.+2250   	; 0x4a08 <fputc>
    413e:	5a 94       	dec	r5
    4140:	f8 cf       	rjmp	.-16     	; 0x4132 <__stack+0x133>
    4142:	00 23       	and	r16, r16
    4144:	21 f0       	breq	.+8      	; 0x414e <__stack+0x14f>
    4146:	b7 01       	movw	r22, r14
    4148:	80 2f       	mov	r24, r16
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	5d d4       	rcall	.+2234   	; 0x4a08 <fputc>
    414e:	93 fc       	sbrc	r9, 3
    4150:	08 c0       	rjmp	.+16     	; 0x4162 <__stack+0x163>
    4152:	55 20       	and	r5, r5
    4154:	31 f0       	breq	.+12     	; 0x4162 <__stack+0x163>
    4156:	b7 01       	movw	r22, r14
    4158:	80 e3       	ldi	r24, 0x30	; 48
    415a:	90 e0       	ldi	r25, 0x00	; 0
    415c:	55 d4       	rcall	.+2218   	; 0x4a08 <fputc>
    415e:	5a 94       	dec	r5
    4160:	f8 cf       	rjmp	.-16     	; 0x4152 <__stack+0x153>
    4162:	97 fe       	sbrs	r9, 7
    4164:	4a c0       	rjmp	.+148    	; 0x41fa <__stack+0x1fb>
    4166:	46 01       	movw	r8, r12
    4168:	d7 fe       	sbrs	r13, 7
    416a:	02 c0       	rjmp	.+4      	; 0x4170 <__stack+0x171>
    416c:	81 2c       	mov	r8, r1
    416e:	91 2c       	mov	r9, r1
    4170:	c6 01       	movw	r24, r12
    4172:	88 19       	sub	r24, r8
    4174:	99 09       	sbc	r25, r9
    4176:	f3 01       	movw	r30, r6
    4178:	e8 0f       	add	r30, r24
    417a:	f9 1f       	adc	r31, r25
    417c:	ed 87       	std	Y+13, r30	; 0x0d
    417e:	fe 87       	std	Y+14, r31	; 0x0e
    4180:	96 01       	movw	r18, r12
    4182:	24 19       	sub	r18, r4
    4184:	31 09       	sbc	r19, r1
    4186:	2f 87       	std	Y+15, r18	; 0x0f
    4188:	38 8b       	std	Y+16, r19	; 0x10
    418a:	01 2f       	mov	r16, r17
    418c:	10 e0       	ldi	r17, 0x00	; 0
    418e:	11 95       	neg	r17
    4190:	01 95       	neg	r16
    4192:	11 09       	sbc	r17, r1
    4194:	3f ef       	ldi	r19, 0xFF	; 255
    4196:	83 16       	cp	r8, r19
    4198:	93 06       	cpc	r9, r19
    419a:	21 f4       	brne	.+8      	; 0x41a4 <__stack+0x1a5>
    419c:	b7 01       	movw	r22, r14
    419e:	8e e2       	ldi	r24, 0x2E	; 46
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	32 d4       	rcall	.+2148   	; 0x4a08 <fputc>
    41a4:	c8 14       	cp	r12, r8
    41a6:	d9 04       	cpc	r13, r9
    41a8:	4c f0       	brlt	.+18     	; 0x41bc <__stack+0x1bd>
    41aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ac:	98 89       	ldd	r25, Y+16	; 0x10
    41ae:	88 15       	cp	r24, r8
    41b0:	99 05       	cpc	r25, r9
    41b2:	24 f4       	brge	.+8      	; 0x41bc <__stack+0x1bd>
    41b4:	ed 85       	ldd	r30, Y+13	; 0x0d
    41b6:	fe 85       	ldd	r31, Y+14	; 0x0e
    41b8:	81 81       	ldd	r24, Z+1	; 0x01
    41ba:	01 c0       	rjmp	.+2      	; 0x41be <__stack+0x1bf>
    41bc:	80 e3       	ldi	r24, 0x30	; 48
    41be:	f1 e0       	ldi	r31, 0x01	; 1
    41c0:	8f 1a       	sub	r8, r31
    41c2:	91 08       	sbc	r9, r1
    41c4:	2d 85       	ldd	r18, Y+13	; 0x0d
    41c6:	3e 85       	ldd	r19, Y+14	; 0x0e
    41c8:	2f 5f       	subi	r18, 0xFF	; 255
    41ca:	3f 4f       	sbci	r19, 0xFF	; 255
    41cc:	2d 87       	std	Y+13, r18	; 0x0d
    41ce:	3e 87       	std	Y+14, r19	; 0x0e
    41d0:	80 16       	cp	r8, r16
    41d2:	91 06       	cpc	r9, r17
    41d4:	24 f0       	brlt	.+8      	; 0x41de <__stack+0x1df>
    41d6:	b7 01       	movw	r22, r14
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	16 d4       	rcall	.+2092   	; 0x4a08 <fputc>
    41dc:	db cf       	rjmp	.-74     	; 0x4194 <__stack+0x195>
    41de:	c8 14       	cp	r12, r8
    41e0:	d9 04       	cpc	r13, r9
    41e2:	41 f4       	brne	.+16     	; 0x41f4 <__stack+0x1f5>
    41e4:	9a 81       	ldd	r25, Y+2	; 0x02
    41e6:	96 33       	cpi	r25, 0x36	; 54
    41e8:	20 f4       	brcc	.+8      	; 0x41f2 <__stack+0x1f3>
    41ea:	95 33       	cpi	r25, 0x35	; 53
    41ec:	19 f4       	brne	.+6      	; 0x41f4 <__stack+0x1f5>
    41ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    41f0:	34 ff       	sbrs	r19, 4
    41f2:	81 e3       	ldi	r24, 0x31	; 49
    41f4:	b7 01       	movw	r22, r14
    41f6:	90 e0       	ldi	r25, 0x00	; 0
    41f8:	48 c0       	rjmp	.+144    	; 0x428a <__stack+0x28b>
    41fa:	8a 81       	ldd	r24, Y+2	; 0x02
    41fc:	81 33       	cpi	r24, 0x31	; 49
    41fe:	19 f0       	breq	.+6      	; 0x4206 <__stack+0x207>
    4200:	9c 85       	ldd	r25, Y+12	; 0x0c
    4202:	9f 7e       	andi	r25, 0xEF	; 239
    4204:	9c 87       	std	Y+12, r25	; 0x0c
    4206:	b7 01       	movw	r22, r14
    4208:	90 e0       	ldi	r25, 0x00	; 0
    420a:	fe d3       	rcall	.+2044   	; 0x4a08 <fputc>
    420c:	11 11       	cpse	r17, r1
    420e:	05 c0       	rjmp	.+10     	; 0x421a <__stack+0x21b>
    4210:	94 fc       	sbrc	r9, 4
    4212:	16 c0       	rjmp	.+44     	; 0x4240 <__stack+0x241>
    4214:	85 e6       	ldi	r24, 0x65	; 101
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	15 c0       	rjmp	.+42     	; 0x4244 <__stack+0x245>
    421a:	b7 01       	movw	r22, r14
    421c:	8e e2       	ldi	r24, 0x2E	; 46
    421e:	90 e0       	ldi	r25, 0x00	; 0
    4220:	f3 d3       	rcall	.+2022   	; 0x4a08 <fputc>
    4222:	1e 5f       	subi	r17, 0xFE	; 254
    4224:	82 e0       	ldi	r24, 0x02	; 2
    4226:	01 e0       	ldi	r16, 0x01	; 1
    4228:	08 0f       	add	r16, r24
    422a:	f3 01       	movw	r30, r6
    422c:	e8 0f       	add	r30, r24
    422e:	f1 1d       	adc	r31, r1
    4230:	80 81       	ld	r24, Z
    4232:	b7 01       	movw	r22, r14
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	e8 d3       	rcall	.+2000   	; 0x4a08 <fputc>
    4238:	80 2f       	mov	r24, r16
    423a:	01 13       	cpse	r16, r17
    423c:	f4 cf       	rjmp	.-24     	; 0x4226 <__stack+0x227>
    423e:	e8 cf       	rjmp	.-48     	; 0x4210 <__stack+0x211>
    4240:	85 e4       	ldi	r24, 0x45	; 69
    4242:	90 e0       	ldi	r25, 0x00	; 0
    4244:	b7 01       	movw	r22, r14
    4246:	e0 d3       	rcall	.+1984   	; 0x4a08 <fputc>
    4248:	d7 fc       	sbrc	r13, 7
    424a:	06 c0       	rjmp	.+12     	; 0x4258 <__stack+0x259>
    424c:	c1 14       	cp	r12, r1
    424e:	d1 04       	cpc	r13, r1
    4250:	41 f4       	brne	.+16     	; 0x4262 <__stack+0x263>
    4252:	ec 85       	ldd	r30, Y+12	; 0x0c
    4254:	e4 ff       	sbrs	r30, 4
    4256:	05 c0       	rjmp	.+10     	; 0x4262 <__stack+0x263>
    4258:	d1 94       	neg	r13
    425a:	c1 94       	neg	r12
    425c:	d1 08       	sbc	r13, r1
    425e:	8d e2       	ldi	r24, 0x2D	; 45
    4260:	01 c0       	rjmp	.+2      	; 0x4264 <__stack+0x265>
    4262:	8b e2       	ldi	r24, 0x2B	; 43
    4264:	b7 01       	movw	r22, r14
    4266:	90 e0       	ldi	r25, 0x00	; 0
    4268:	cf d3       	rcall	.+1950   	; 0x4a08 <fputc>
    426a:	80 e3       	ldi	r24, 0x30	; 48
    426c:	2a e0       	ldi	r18, 0x0A	; 10
    426e:	c2 16       	cp	r12, r18
    4270:	d1 04       	cpc	r13, r1
    4272:	2c f0       	brlt	.+10     	; 0x427e <__stack+0x27f>
    4274:	8f 5f       	subi	r24, 0xFF	; 255
    4276:	fa e0       	ldi	r31, 0x0A	; 10
    4278:	cf 1a       	sub	r12, r31
    427a:	d1 08       	sbc	r13, r1
    427c:	f7 cf       	rjmp	.-18     	; 0x426c <__stack+0x26d>
    427e:	b7 01       	movw	r22, r14
    4280:	90 e0       	ldi	r25, 0x00	; 0
    4282:	c2 d3       	rcall	.+1924   	; 0x4a08 <fputc>
    4284:	b7 01       	movw	r22, r14
    4286:	c6 01       	movw	r24, r12
    4288:	c0 96       	adiw	r24, 0x30	; 48
    428a:	be d3       	rcall	.+1916   	; 0x4a08 <fputc>
    428c:	49 c1       	rjmp	.+658    	; 0x4520 <__stack+0x521>
    428e:	83 36       	cpi	r24, 0x63	; 99
    4290:	31 f0       	breq	.+12     	; 0x429e <__stack+0x29f>
    4292:	83 37       	cpi	r24, 0x73	; 115
    4294:	79 f0       	breq	.+30     	; 0x42b4 <__stack+0x2b5>
    4296:	83 35       	cpi	r24, 0x53	; 83
    4298:	09 f0       	breq	.+2      	; 0x429c <__stack+0x29d>
    429a:	52 c0       	rjmp	.+164    	; 0x4340 <__stack+0x341>
    429c:	1f c0       	rjmp	.+62     	; 0x42dc <__stack+0x2dd>
    429e:	56 01       	movw	r10, r12
    42a0:	32 e0       	ldi	r19, 0x02	; 2
    42a2:	a3 0e       	add	r10, r19
    42a4:	b1 1c       	adc	r11, r1
    42a6:	f6 01       	movw	r30, r12
    42a8:	80 81       	ld	r24, Z
    42aa:	89 83       	std	Y+1, r24	; 0x01
    42ac:	01 e0       	ldi	r16, 0x01	; 1
    42ae:	10 e0       	ldi	r17, 0x00	; 0
    42b0:	63 01       	movw	r12, r6
    42b2:	11 c0       	rjmp	.+34     	; 0x42d6 <__stack+0x2d7>
    42b4:	56 01       	movw	r10, r12
    42b6:	f2 e0       	ldi	r31, 0x02	; 2
    42b8:	af 0e       	add	r10, r31
    42ba:	b1 1c       	adc	r11, r1
    42bc:	f6 01       	movw	r30, r12
    42be:	c0 80       	ld	r12, Z
    42c0:	d1 80       	ldd	r13, Z+1	; 0x01
    42c2:	96 fe       	sbrs	r9, 6
    42c4:	03 c0       	rjmp	.+6      	; 0x42cc <__stack+0x2cd>
    42c6:	61 2f       	mov	r22, r17
    42c8:	70 e0       	ldi	r23, 0x00	; 0
    42ca:	02 c0       	rjmp	.+4      	; 0x42d0 <__stack+0x2d1>
    42cc:	6f ef       	ldi	r22, 0xFF	; 255
    42ce:	7f ef       	ldi	r23, 0xFF	; 255
    42d0:	c6 01       	movw	r24, r12
    42d2:	45 d3       	rcall	.+1674   	; 0x495e <strnlen>
    42d4:	8c 01       	movw	r16, r24
    42d6:	f9 2d       	mov	r31, r9
    42d8:	ff 77       	andi	r31, 0x7F	; 127
    42da:	13 c0       	rjmp	.+38     	; 0x4302 <__stack+0x303>
    42dc:	56 01       	movw	r10, r12
    42de:	22 e0       	ldi	r18, 0x02	; 2
    42e0:	a2 0e       	add	r10, r18
    42e2:	b1 1c       	adc	r11, r1
    42e4:	f6 01       	movw	r30, r12
    42e6:	c0 80       	ld	r12, Z
    42e8:	d1 80       	ldd	r13, Z+1	; 0x01
    42ea:	96 fe       	sbrs	r9, 6
    42ec:	03 c0       	rjmp	.+6      	; 0x42f4 <__stack+0x2f5>
    42ee:	61 2f       	mov	r22, r17
    42f0:	70 e0       	ldi	r23, 0x00	; 0
    42f2:	02 c0       	rjmp	.+4      	; 0x42f8 <__stack+0x2f9>
    42f4:	6f ef       	ldi	r22, 0xFF	; 255
    42f6:	7f ef       	ldi	r23, 0xFF	; 255
    42f8:	c6 01       	movw	r24, r12
    42fa:	26 d3       	rcall	.+1612   	; 0x4948 <strnlen_P>
    42fc:	8c 01       	movw	r16, r24
    42fe:	f9 2d       	mov	r31, r9
    4300:	f0 68       	ori	r31, 0x80	; 128
    4302:	9f 2e       	mov	r9, r31
    4304:	f3 fd       	sbrc	r31, 3
    4306:	18 c0       	rjmp	.+48     	; 0x4338 <__stack+0x339>
    4308:	85 2d       	mov	r24, r5
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	08 17       	cp	r16, r24
    430e:	19 07       	cpc	r17, r25
    4310:	98 f4       	brcc	.+38     	; 0x4338 <__stack+0x339>
    4312:	b7 01       	movw	r22, r14
    4314:	80 e2       	ldi	r24, 0x20	; 32
    4316:	90 e0       	ldi	r25, 0x00	; 0
    4318:	77 d3       	rcall	.+1774   	; 0x4a08 <fputc>
    431a:	5a 94       	dec	r5
    431c:	f5 cf       	rjmp	.-22     	; 0x4308 <__stack+0x309>
    431e:	f6 01       	movw	r30, r12
    4320:	97 fc       	sbrc	r9, 7
    4322:	85 91       	lpm	r24, Z+
    4324:	97 fe       	sbrs	r9, 7
    4326:	81 91       	ld	r24, Z+
    4328:	6f 01       	movw	r12, r30
    432a:	b7 01       	movw	r22, r14
    432c:	90 e0       	ldi	r25, 0x00	; 0
    432e:	6c d3       	rcall	.+1752   	; 0x4a08 <fputc>
    4330:	51 10       	cpse	r5, r1
    4332:	5a 94       	dec	r5
    4334:	01 50       	subi	r16, 0x01	; 1
    4336:	11 09       	sbc	r17, r1
    4338:	01 15       	cp	r16, r1
    433a:	11 05       	cpc	r17, r1
    433c:	81 f7       	brne	.-32     	; 0x431e <__stack+0x31f>
    433e:	f0 c0       	rjmp	.+480    	; 0x4520 <__stack+0x521>
    4340:	84 36       	cpi	r24, 0x64	; 100
    4342:	11 f0       	breq	.+4      	; 0x4348 <__stack+0x349>
    4344:	89 36       	cpi	r24, 0x69	; 105
    4346:	59 f5       	brne	.+86     	; 0x439e <__stack+0x39f>
    4348:	56 01       	movw	r10, r12
    434a:	97 fe       	sbrs	r9, 7
    434c:	09 c0       	rjmp	.+18     	; 0x4360 <__stack+0x361>
    434e:	24 e0       	ldi	r18, 0x04	; 4
    4350:	a2 0e       	add	r10, r18
    4352:	b1 1c       	adc	r11, r1
    4354:	f6 01       	movw	r30, r12
    4356:	60 81       	ld	r22, Z
    4358:	71 81       	ldd	r23, Z+1	; 0x01
    435a:	82 81       	ldd	r24, Z+2	; 0x02
    435c:	93 81       	ldd	r25, Z+3	; 0x03
    435e:	0a c0       	rjmp	.+20     	; 0x4374 <__stack+0x375>
    4360:	f2 e0       	ldi	r31, 0x02	; 2
    4362:	af 0e       	add	r10, r31
    4364:	b1 1c       	adc	r11, r1
    4366:	f6 01       	movw	r30, r12
    4368:	60 81       	ld	r22, Z
    436a:	71 81       	ldd	r23, Z+1	; 0x01
    436c:	07 2e       	mov	r0, r23
    436e:	00 0c       	add	r0, r0
    4370:	88 0b       	sbc	r24, r24
    4372:	99 0b       	sbc	r25, r25
    4374:	f9 2d       	mov	r31, r9
    4376:	ff 76       	andi	r31, 0x6F	; 111
    4378:	9f 2e       	mov	r9, r31
    437a:	97 ff       	sbrs	r25, 7
    437c:	09 c0       	rjmp	.+18     	; 0x4390 <__stack+0x391>
    437e:	90 95       	com	r25
    4380:	80 95       	com	r24
    4382:	70 95       	com	r23
    4384:	61 95       	neg	r22
    4386:	7f 4f       	sbci	r23, 0xFF	; 255
    4388:	8f 4f       	sbci	r24, 0xFF	; 255
    438a:	9f 4f       	sbci	r25, 0xFF	; 255
    438c:	f0 68       	ori	r31, 0x80	; 128
    438e:	9f 2e       	mov	r9, r31
    4390:	2a e0       	ldi	r18, 0x0A	; 10
    4392:	30 e0       	ldi	r19, 0x00	; 0
    4394:	a3 01       	movw	r20, r6
    4396:	b7 d3       	rcall	.+1902   	; 0x4b06 <__ultoa_invert>
    4398:	c8 2e       	mov	r12, r24
    439a:	c6 18       	sub	r12, r6
    439c:	3e c0       	rjmp	.+124    	; 0x441a <__stack+0x41b>
    439e:	09 2d       	mov	r16, r9
    43a0:	85 37       	cpi	r24, 0x75	; 117
    43a2:	21 f4       	brne	.+8      	; 0x43ac <__stack+0x3ad>
    43a4:	0f 7e       	andi	r16, 0xEF	; 239
    43a6:	2a e0       	ldi	r18, 0x0A	; 10
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	1d c0       	rjmp	.+58     	; 0x43e6 <__stack+0x3e7>
    43ac:	09 7f       	andi	r16, 0xF9	; 249
    43ae:	8f 36       	cpi	r24, 0x6F	; 111
    43b0:	91 f0       	breq	.+36     	; 0x43d6 <__stack+0x3d7>
    43b2:	18 f4       	brcc	.+6      	; 0x43ba <__stack+0x3bb>
    43b4:	88 35       	cpi	r24, 0x58	; 88
    43b6:	59 f0       	breq	.+22     	; 0x43ce <__stack+0x3cf>
    43b8:	bc c0       	rjmp	.+376    	; 0x4532 <__stack+0x533>
    43ba:	80 37       	cpi	r24, 0x70	; 112
    43bc:	19 f0       	breq	.+6      	; 0x43c4 <__stack+0x3c5>
    43be:	88 37       	cpi	r24, 0x78	; 120
    43c0:	11 f0       	breq	.+4      	; 0x43c6 <__stack+0x3c7>
    43c2:	b7 c0       	rjmp	.+366    	; 0x4532 <__stack+0x533>
    43c4:	00 61       	ori	r16, 0x10	; 16
    43c6:	04 ff       	sbrs	r16, 4
    43c8:	09 c0       	rjmp	.+18     	; 0x43dc <__stack+0x3dd>
    43ca:	04 60       	ori	r16, 0x04	; 4
    43cc:	07 c0       	rjmp	.+14     	; 0x43dc <__stack+0x3dd>
    43ce:	94 fe       	sbrs	r9, 4
    43d0:	08 c0       	rjmp	.+16     	; 0x43e2 <__stack+0x3e3>
    43d2:	06 60       	ori	r16, 0x06	; 6
    43d4:	06 c0       	rjmp	.+12     	; 0x43e2 <__stack+0x3e3>
    43d6:	28 e0       	ldi	r18, 0x08	; 8
    43d8:	30 e0       	ldi	r19, 0x00	; 0
    43da:	05 c0       	rjmp	.+10     	; 0x43e6 <__stack+0x3e7>
    43dc:	20 e1       	ldi	r18, 0x10	; 16
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	02 c0       	rjmp	.+4      	; 0x43e6 <__stack+0x3e7>
    43e2:	20 e1       	ldi	r18, 0x10	; 16
    43e4:	32 e0       	ldi	r19, 0x02	; 2
    43e6:	56 01       	movw	r10, r12
    43e8:	07 ff       	sbrs	r16, 7
    43ea:	09 c0       	rjmp	.+18     	; 0x43fe <__stack+0x3ff>
    43ec:	84 e0       	ldi	r24, 0x04	; 4
    43ee:	a8 0e       	add	r10, r24
    43f0:	b1 1c       	adc	r11, r1
    43f2:	f6 01       	movw	r30, r12
    43f4:	60 81       	ld	r22, Z
    43f6:	71 81       	ldd	r23, Z+1	; 0x01
    43f8:	82 81       	ldd	r24, Z+2	; 0x02
    43fa:	93 81       	ldd	r25, Z+3	; 0x03
    43fc:	08 c0       	rjmp	.+16     	; 0x440e <__stack+0x40f>
    43fe:	f2 e0       	ldi	r31, 0x02	; 2
    4400:	af 0e       	add	r10, r31
    4402:	b1 1c       	adc	r11, r1
    4404:	f6 01       	movw	r30, r12
    4406:	60 81       	ld	r22, Z
    4408:	71 81       	ldd	r23, Z+1	; 0x01
    440a:	80 e0       	ldi	r24, 0x00	; 0
    440c:	90 e0       	ldi	r25, 0x00	; 0
    440e:	a3 01       	movw	r20, r6
    4410:	7a d3       	rcall	.+1780   	; 0x4b06 <__ultoa_invert>
    4412:	c8 2e       	mov	r12, r24
    4414:	c6 18       	sub	r12, r6
    4416:	0f 77       	andi	r16, 0x7F	; 127
    4418:	90 2e       	mov	r9, r16
    441a:	96 fe       	sbrs	r9, 6
    441c:	0b c0       	rjmp	.+22     	; 0x4434 <__stack+0x435>
    441e:	09 2d       	mov	r16, r9
    4420:	0e 7f       	andi	r16, 0xFE	; 254
    4422:	c1 16       	cp	r12, r17
    4424:	50 f4       	brcc	.+20     	; 0x443a <__stack+0x43b>
    4426:	94 fe       	sbrs	r9, 4
    4428:	0a c0       	rjmp	.+20     	; 0x443e <__stack+0x43f>
    442a:	92 fc       	sbrc	r9, 2
    442c:	08 c0       	rjmp	.+16     	; 0x443e <__stack+0x43f>
    442e:	09 2d       	mov	r16, r9
    4430:	0e 7e       	andi	r16, 0xEE	; 238
    4432:	05 c0       	rjmp	.+10     	; 0x443e <__stack+0x43f>
    4434:	dc 2c       	mov	r13, r12
    4436:	09 2d       	mov	r16, r9
    4438:	03 c0       	rjmp	.+6      	; 0x4440 <__stack+0x441>
    443a:	dc 2c       	mov	r13, r12
    443c:	01 c0       	rjmp	.+2      	; 0x4440 <__stack+0x441>
    443e:	d1 2e       	mov	r13, r17
    4440:	04 ff       	sbrs	r16, 4
    4442:	0d c0       	rjmp	.+26     	; 0x445e <__stack+0x45f>
    4444:	fe 01       	movw	r30, r28
    4446:	ec 0d       	add	r30, r12
    4448:	f1 1d       	adc	r31, r1
    444a:	80 81       	ld	r24, Z
    444c:	80 33       	cpi	r24, 0x30	; 48
    444e:	11 f4       	brne	.+4      	; 0x4454 <__stack+0x455>
    4450:	09 7e       	andi	r16, 0xE9	; 233
    4452:	09 c0       	rjmp	.+18     	; 0x4466 <__stack+0x467>
    4454:	02 ff       	sbrs	r16, 2
    4456:	06 c0       	rjmp	.+12     	; 0x4464 <__stack+0x465>
    4458:	d3 94       	inc	r13
    445a:	d3 94       	inc	r13
    445c:	04 c0       	rjmp	.+8      	; 0x4466 <__stack+0x467>
    445e:	80 2f       	mov	r24, r16
    4460:	86 78       	andi	r24, 0x86	; 134
    4462:	09 f0       	breq	.+2      	; 0x4466 <__stack+0x467>
    4464:	d3 94       	inc	r13
    4466:	03 fd       	sbrc	r16, 3
    4468:	10 c0       	rjmp	.+32     	; 0x448a <__stack+0x48b>
    446a:	00 ff       	sbrs	r16, 0
    446c:	06 c0       	rjmp	.+12     	; 0x447a <__stack+0x47b>
    446e:	1c 2d       	mov	r17, r12
    4470:	d5 14       	cp	r13, r5
    4472:	78 f4       	brcc	.+30     	; 0x4492 <__stack+0x493>
    4474:	15 0d       	add	r17, r5
    4476:	1d 19       	sub	r17, r13
    4478:	0c c0       	rjmp	.+24     	; 0x4492 <__stack+0x493>
    447a:	d5 14       	cp	r13, r5
    447c:	50 f4       	brcc	.+20     	; 0x4492 <__stack+0x493>
    447e:	b7 01       	movw	r22, r14
    4480:	80 e2       	ldi	r24, 0x20	; 32
    4482:	90 e0       	ldi	r25, 0x00	; 0
    4484:	c1 d2       	rcall	.+1410   	; 0x4a08 <fputc>
    4486:	d3 94       	inc	r13
    4488:	f8 cf       	rjmp	.-16     	; 0x447a <__stack+0x47b>
    448a:	d5 14       	cp	r13, r5
    448c:	10 f4       	brcc	.+4      	; 0x4492 <__stack+0x493>
    448e:	5d 18       	sub	r5, r13
    4490:	01 c0       	rjmp	.+2      	; 0x4494 <__stack+0x495>
    4492:	51 2c       	mov	r5, r1
    4494:	04 ff       	sbrs	r16, 4
    4496:	0f c0       	rjmp	.+30     	; 0x44b6 <__stack+0x4b7>
    4498:	b7 01       	movw	r22, r14
    449a:	80 e3       	ldi	r24, 0x30	; 48
    449c:	90 e0       	ldi	r25, 0x00	; 0
    449e:	b4 d2       	rcall	.+1384   	; 0x4a08 <fputc>
    44a0:	02 ff       	sbrs	r16, 2
    44a2:	16 c0       	rjmp	.+44     	; 0x44d0 <__stack+0x4d1>
    44a4:	01 fd       	sbrc	r16, 1
    44a6:	03 c0       	rjmp	.+6      	; 0x44ae <__stack+0x4af>
    44a8:	88 e7       	ldi	r24, 0x78	; 120
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	02 c0       	rjmp	.+4      	; 0x44b2 <__stack+0x4b3>
    44ae:	88 e5       	ldi	r24, 0x58	; 88
    44b0:	90 e0       	ldi	r25, 0x00	; 0
    44b2:	b7 01       	movw	r22, r14
    44b4:	0c c0       	rjmp	.+24     	; 0x44ce <__stack+0x4cf>
    44b6:	80 2f       	mov	r24, r16
    44b8:	86 78       	andi	r24, 0x86	; 134
    44ba:	51 f0       	breq	.+20     	; 0x44d0 <__stack+0x4d1>
    44bc:	01 ff       	sbrs	r16, 1
    44be:	02 c0       	rjmp	.+4      	; 0x44c4 <__stack+0x4c5>
    44c0:	8b e2       	ldi	r24, 0x2B	; 43
    44c2:	01 c0       	rjmp	.+2      	; 0x44c6 <__stack+0x4c7>
    44c4:	80 e2       	ldi	r24, 0x20	; 32
    44c6:	07 fd       	sbrc	r16, 7
    44c8:	8d e2       	ldi	r24, 0x2D	; 45
    44ca:	b7 01       	movw	r22, r14
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	9c d2       	rcall	.+1336   	; 0x4a08 <fputc>
    44d0:	c1 16       	cp	r12, r17
    44d2:	30 f4       	brcc	.+12     	; 0x44e0 <__stack+0x4e1>
    44d4:	b7 01       	movw	r22, r14
    44d6:	80 e3       	ldi	r24, 0x30	; 48
    44d8:	90 e0       	ldi	r25, 0x00	; 0
    44da:	96 d2       	rcall	.+1324   	; 0x4a08 <fputc>
    44dc:	11 50       	subi	r17, 0x01	; 1
    44de:	f8 cf       	rjmp	.-16     	; 0x44d0 <__stack+0x4d1>
    44e0:	ca 94       	dec	r12
    44e2:	f3 01       	movw	r30, r6
    44e4:	ec 0d       	add	r30, r12
    44e6:	f1 1d       	adc	r31, r1
    44e8:	80 81       	ld	r24, Z
    44ea:	b7 01       	movw	r22, r14
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	8c d2       	rcall	.+1304   	; 0x4a08 <fputc>
    44f0:	c1 10       	cpse	r12, r1
    44f2:	f6 cf       	rjmp	.-20     	; 0x44e0 <__stack+0x4e1>
    44f4:	15 c0       	rjmp	.+42     	; 0x4520 <__stack+0x521>
    44f6:	f4 e0       	ldi	r31, 0x04	; 4
    44f8:	f5 15       	cp	r31, r5
    44fa:	50 f5       	brcc	.+84     	; 0x4550 <__stack+0x551>
    44fc:	84 e0       	ldi	r24, 0x04	; 4
    44fe:	58 1a       	sub	r5, r24
    4500:	93 fe       	sbrs	r9, 3
    4502:	1e c0       	rjmp	.+60     	; 0x4540 <__stack+0x541>
    4504:	01 11       	cpse	r16, r1
    4506:	25 c0       	rjmp	.+74     	; 0x4552 <__stack+0x553>
    4508:	2c 85       	ldd	r18, Y+12	; 0x0c
    450a:	23 ff       	sbrs	r18, 3
    450c:	27 c0       	rjmp	.+78     	; 0x455c <__stack+0x55d>
    450e:	0c ef       	ldi	r16, 0xFC	; 252
    4510:	12 e0       	ldi	r17, 0x02	; 2
    4512:	39 2d       	mov	r19, r9
    4514:	30 71       	andi	r19, 0x10	; 16
    4516:	93 2e       	mov	r9, r19
    4518:	f8 01       	movw	r30, r16
    451a:	84 91       	lpm	r24, Z
    451c:	81 11       	cpse	r24, r1
    451e:	21 c0       	rjmp	.+66     	; 0x4562 <__stack+0x563>
    4520:	55 20       	and	r5, r5
    4522:	09 f4       	brne	.+2      	; 0x4526 <__stack+0x527>
    4524:	fc cc       	rjmp	.-1544   	; 0x3f1e <vfprintf+0x78>
    4526:	b7 01       	movw	r22, r14
    4528:	80 e2       	ldi	r24, 0x20	; 32
    452a:	90 e0       	ldi	r25, 0x00	; 0
    452c:	6d d2       	rcall	.+1242   	; 0x4a08 <fputc>
    452e:	5a 94       	dec	r5
    4530:	f7 cf       	rjmp	.-18     	; 0x4520 <__stack+0x521>
    4532:	f7 01       	movw	r30, r14
    4534:	86 81       	ldd	r24, Z+6	; 0x06
    4536:	97 81       	ldd	r25, Z+7	; 0x07
    4538:	23 c0       	rjmp	.+70     	; 0x4580 <__stack+0x581>
    453a:	8f ef       	ldi	r24, 0xFF	; 255
    453c:	9f ef       	ldi	r25, 0xFF	; 255
    453e:	20 c0       	rjmp	.+64     	; 0x4580 <__stack+0x581>
    4540:	b7 01       	movw	r22, r14
    4542:	80 e2       	ldi	r24, 0x20	; 32
    4544:	90 e0       	ldi	r25, 0x00	; 0
    4546:	60 d2       	rcall	.+1216   	; 0x4a08 <fputc>
    4548:	5a 94       	dec	r5
    454a:	51 10       	cpse	r5, r1
    454c:	f9 cf       	rjmp	.-14     	; 0x4540 <__stack+0x541>
    454e:	da cf       	rjmp	.-76     	; 0x4504 <__stack+0x505>
    4550:	51 2c       	mov	r5, r1
    4552:	b7 01       	movw	r22, r14
    4554:	80 2f       	mov	r24, r16
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	57 d2       	rcall	.+1198   	; 0x4a08 <fputc>
    455a:	d6 cf       	rjmp	.-84     	; 0x4508 <__stack+0x509>
    455c:	00 e0       	ldi	r16, 0x00	; 0
    455e:	13 e0       	ldi	r17, 0x03	; 3
    4560:	d8 cf       	rjmp	.-80     	; 0x4512 <__stack+0x513>
    4562:	91 10       	cpse	r9, r1
    4564:	80 52       	subi	r24, 0x20	; 32
    4566:	b7 01       	movw	r22, r14
    4568:	90 e0       	ldi	r25, 0x00	; 0
    456a:	4e d2       	rcall	.+1180   	; 0x4a08 <fputc>
    456c:	0f 5f       	subi	r16, 0xFF	; 255
    456e:	1f 4f       	sbci	r17, 0xFF	; 255
    4570:	d3 cf       	rjmp	.-90     	; 0x4518 <__stack+0x519>
    4572:	23 e0       	ldi	r18, 0x03	; 3
    4574:	25 15       	cp	r18, r5
    4576:	10 f4       	brcc	.+4      	; 0x457c <__stack+0x57d>
    4578:	83 e0       	ldi	r24, 0x03	; 3
    457a:	c1 cf       	rjmp	.-126    	; 0x44fe <__stack+0x4ff>
    457c:	51 2c       	mov	r5, r1
    457e:	c4 cf       	rjmp	.-120    	; 0x4508 <__stack+0x509>
    4580:	60 96       	adiw	r28, 0x10	; 16
    4582:	cd bf       	out	0x3d, r28	; 61
    4584:	de bf       	out	0x3e, r29	; 62
    4586:	df 91       	pop	r29
    4588:	cf 91       	pop	r28
    458a:	1f 91       	pop	r17
    458c:	0f 91       	pop	r16
    458e:	ff 90       	pop	r15
    4590:	ef 90       	pop	r14
    4592:	df 90       	pop	r13
    4594:	cf 90       	pop	r12
    4596:	bf 90       	pop	r11
    4598:	af 90       	pop	r10
    459a:	9f 90       	pop	r9
    459c:	8f 90       	pop	r8
    459e:	7f 90       	pop	r7
    45a0:	6f 90       	pop	r6
    45a2:	5f 90       	pop	r5
    45a4:	4f 90       	pop	r4
    45a6:	3f 90       	pop	r3
    45a8:	2f 90       	pop	r2
    45aa:	08 95       	ret

000045ac <__udivmodsi4>:
    45ac:	a1 e2       	ldi	r26, 0x21	; 33
    45ae:	1a 2e       	mov	r1, r26
    45b0:	aa 1b       	sub	r26, r26
    45b2:	bb 1b       	sub	r27, r27
    45b4:	fd 01       	movw	r30, r26
    45b6:	0d c0       	rjmp	.+26     	; 0x45d2 <__udivmodsi4_ep>

000045b8 <__udivmodsi4_loop>:
    45b8:	aa 1f       	adc	r26, r26
    45ba:	bb 1f       	adc	r27, r27
    45bc:	ee 1f       	adc	r30, r30
    45be:	ff 1f       	adc	r31, r31
    45c0:	a2 17       	cp	r26, r18
    45c2:	b3 07       	cpc	r27, r19
    45c4:	e4 07       	cpc	r30, r20
    45c6:	f5 07       	cpc	r31, r21
    45c8:	20 f0       	brcs	.+8      	; 0x45d2 <__udivmodsi4_ep>
    45ca:	a2 1b       	sub	r26, r18
    45cc:	b3 0b       	sbc	r27, r19
    45ce:	e4 0b       	sbc	r30, r20
    45d0:	f5 0b       	sbc	r31, r21

000045d2 <__udivmodsi4_ep>:
    45d2:	66 1f       	adc	r22, r22
    45d4:	77 1f       	adc	r23, r23
    45d6:	88 1f       	adc	r24, r24
    45d8:	99 1f       	adc	r25, r25
    45da:	1a 94       	dec	r1
    45dc:	69 f7       	brne	.-38     	; 0x45b8 <__udivmodsi4_loop>
    45de:	60 95       	com	r22
    45e0:	70 95       	com	r23
    45e2:	80 95       	com	r24
    45e4:	90 95       	com	r25
    45e6:	9b 01       	movw	r18, r22
    45e8:	ac 01       	movw	r20, r24
    45ea:	bd 01       	movw	r22, r26
    45ec:	cf 01       	movw	r24, r30
    45ee:	08 95       	ret

000045f0 <__tablejump2__>:
    45f0:	ee 0f       	add	r30, r30
    45f2:	ff 1f       	adc	r31, r31
    45f4:	88 1f       	adc	r24, r24
    45f6:	8b bf       	out	0x3b, r24	; 59
    45f8:	07 90       	elpm	r0, Z+
    45fa:	f6 91       	elpm	r31, Z
    45fc:	e0 2d       	mov	r30, r0
    45fe:	1b be       	out	0x3b, r1	; 59
    4600:	19 94       	eijmp

00004602 <__usmulhisi3>:
    4602:	bb d0       	rcall	.+374    	; 0x477a <__umulhisi3>

00004604 <__usmulhisi3_tail>:
    4604:	b7 ff       	sbrs	r27, 7
    4606:	08 95       	ret
    4608:	82 1b       	sub	r24, r18
    460a:	93 0b       	sbc	r25, r19
    460c:	08 95       	ret

0000460e <__muluhisi3>:
    460e:	b5 d0       	rcall	.+362    	; 0x477a <__umulhisi3>
    4610:	a5 9f       	mul	r26, r21
    4612:	90 0d       	add	r25, r0
    4614:	b4 9f       	mul	r27, r20
    4616:	90 0d       	add	r25, r0
    4618:	a4 9f       	mul	r26, r20
    461a:	80 0d       	add	r24, r0
    461c:	91 1d       	adc	r25, r1
    461e:	11 24       	eor	r1, r1
    4620:	08 95       	ret

00004622 <__mulshisi3>:
    4622:	b7 ff       	sbrs	r27, 7
    4624:	f4 cf       	rjmp	.-24     	; 0x460e <__muluhisi3>

00004626 <__mulohisi3>:
    4626:	f3 df       	rcall	.-26     	; 0x460e <__muluhisi3>
    4628:	82 1b       	sub	r24, r18
    462a:	93 0b       	sbc	r25, r19
    462c:	08 95       	ret

0000462e <__muldi3>:
    462e:	df 93       	push	r29
    4630:	cf 93       	push	r28
    4632:	1f 93       	push	r17
    4634:	0f 93       	push	r16
    4636:	9a 9d       	mul	r25, r10
    4638:	f0 2d       	mov	r31, r0
    463a:	21 9f       	mul	r18, r17
    463c:	f0 0d       	add	r31, r0
    463e:	8b 9d       	mul	r24, r11
    4640:	f0 0d       	add	r31, r0
    4642:	8a 9d       	mul	r24, r10
    4644:	e0 2d       	mov	r30, r0
    4646:	f1 0d       	add	r31, r1
    4648:	03 9f       	mul	r16, r19
    464a:	f0 0d       	add	r31, r0
    464c:	02 9f       	mul	r16, r18
    464e:	e0 0d       	add	r30, r0
    4650:	f1 1d       	adc	r31, r1
    4652:	4e 9d       	mul	r20, r14
    4654:	e0 0d       	add	r30, r0
    4656:	f1 1d       	adc	r31, r1
    4658:	5e 9d       	mul	r21, r14
    465a:	f0 0d       	add	r31, r0
    465c:	4f 9d       	mul	r20, r15
    465e:	f0 0d       	add	r31, r0
    4660:	7f 93       	push	r23
    4662:	6f 93       	push	r22
    4664:	bf 92       	push	r11
    4666:	af 92       	push	r10
    4668:	5f 93       	push	r21
    466a:	4f 93       	push	r20
    466c:	d5 01       	movw	r26, r10
    466e:	85 d0       	rcall	.+266    	; 0x477a <__umulhisi3>
    4670:	8b 01       	movw	r16, r22
    4672:	ac 01       	movw	r20, r24
    4674:	d7 01       	movw	r26, r14
    4676:	81 d0       	rcall	.+258    	; 0x477a <__umulhisi3>
    4678:	eb 01       	movw	r28, r22
    467a:	e8 0f       	add	r30, r24
    467c:	f9 1f       	adc	r31, r25
    467e:	d6 01       	movw	r26, r12
    4680:	1f d0       	rcall	.+62     	; 0x46c0 <__muldi3_6>
    4682:	2f 91       	pop	r18
    4684:	3f 91       	pop	r19
    4686:	d6 01       	movw	r26, r12
    4688:	78 d0       	rcall	.+240    	; 0x477a <__umulhisi3>
    468a:	c6 0f       	add	r28, r22
    468c:	d7 1f       	adc	r29, r23
    468e:	e8 1f       	adc	r30, r24
    4690:	f9 1f       	adc	r31, r25
    4692:	af 91       	pop	r26
    4694:	bf 91       	pop	r27
    4696:	14 d0       	rcall	.+40     	; 0x46c0 <__muldi3_6>
    4698:	2f 91       	pop	r18
    469a:	3f 91       	pop	r19
    469c:	6e d0       	rcall	.+220    	; 0x477a <__umulhisi3>
    469e:	c6 0f       	add	r28, r22
    46a0:	d7 1f       	adc	r29, r23
    46a2:	e8 1f       	adc	r30, r24
    46a4:	f9 1f       	adc	r31, r25
    46a6:	d6 01       	movw	r26, r12
    46a8:	68 d0       	rcall	.+208    	; 0x477a <__umulhisi3>
    46aa:	e6 0f       	add	r30, r22
    46ac:	f7 1f       	adc	r31, r23
    46ae:	98 01       	movw	r18, r16
    46b0:	be 01       	movw	r22, r28
    46b2:	cf 01       	movw	r24, r30
    46b4:	11 24       	eor	r1, r1
    46b6:	0f 91       	pop	r16
    46b8:	1f 91       	pop	r17
    46ba:	cf 91       	pop	r28
    46bc:	df 91       	pop	r29
    46be:	08 95       	ret

000046c0 <__muldi3_6>:
    46c0:	5c d0       	rcall	.+184    	; 0x477a <__umulhisi3>
    46c2:	46 0f       	add	r20, r22
    46c4:	57 1f       	adc	r21, r23
    46c6:	c8 1f       	adc	r28, r24
    46c8:	d9 1f       	adc	r29, r25
    46ca:	08 f4       	brcc	.+2      	; 0x46ce <__muldi3_6+0xe>
    46cc:	31 96       	adiw	r30, 0x01	; 1
    46ce:	08 95       	ret

000046d0 <__ashldi3>:
    46d0:	0f 93       	push	r16
    46d2:	08 30       	cpi	r16, 0x08	; 8
    46d4:	90 f0       	brcs	.+36     	; 0x46fa <__ashldi3+0x2a>
    46d6:	98 2f       	mov	r25, r24
    46d8:	87 2f       	mov	r24, r23
    46da:	76 2f       	mov	r23, r22
    46dc:	65 2f       	mov	r22, r21
    46de:	54 2f       	mov	r21, r20
    46e0:	43 2f       	mov	r20, r19
    46e2:	32 2f       	mov	r19, r18
    46e4:	22 27       	eor	r18, r18
    46e6:	08 50       	subi	r16, 0x08	; 8
    46e8:	f4 cf       	rjmp	.-24     	; 0x46d2 <__ashldi3+0x2>
    46ea:	22 0f       	add	r18, r18
    46ec:	33 1f       	adc	r19, r19
    46ee:	44 1f       	adc	r20, r20
    46f0:	55 1f       	adc	r21, r21
    46f2:	66 1f       	adc	r22, r22
    46f4:	77 1f       	adc	r23, r23
    46f6:	88 1f       	adc	r24, r24
    46f8:	99 1f       	adc	r25, r25
    46fa:	0a 95       	dec	r16
    46fc:	b2 f7       	brpl	.-20     	; 0x46ea <__ashldi3+0x1a>
    46fe:	0f 91       	pop	r16
    4700:	08 95       	ret

00004702 <__ashrdi3>:
    4702:	97 fb       	bst	r25, 7
    4704:	10 f8       	bld	r1, 0

00004706 <__lshrdi3>:
    4706:	16 94       	lsr	r1
    4708:	00 08       	sbc	r0, r0
    470a:	0f 93       	push	r16
    470c:	08 30       	cpi	r16, 0x08	; 8
    470e:	98 f0       	brcs	.+38     	; 0x4736 <__lshrdi3+0x30>
    4710:	08 50       	subi	r16, 0x08	; 8
    4712:	23 2f       	mov	r18, r19
    4714:	34 2f       	mov	r19, r20
    4716:	45 2f       	mov	r20, r21
    4718:	56 2f       	mov	r21, r22
    471a:	67 2f       	mov	r22, r23
    471c:	78 2f       	mov	r23, r24
    471e:	89 2f       	mov	r24, r25
    4720:	90 2d       	mov	r25, r0
    4722:	f4 cf       	rjmp	.-24     	; 0x470c <__lshrdi3+0x6>
    4724:	05 94       	asr	r0
    4726:	97 95       	ror	r25
    4728:	87 95       	ror	r24
    472a:	77 95       	ror	r23
    472c:	67 95       	ror	r22
    472e:	57 95       	ror	r21
    4730:	47 95       	ror	r20
    4732:	37 95       	ror	r19
    4734:	27 95       	ror	r18
    4736:	0a 95       	dec	r16
    4738:	aa f7       	brpl	.-22     	; 0x4724 <__lshrdi3+0x1e>
    473a:	0f 91       	pop	r16
    473c:	08 95       	ret

0000473e <__adddi3>:
    473e:	2a 0d       	add	r18, r10
    4740:	3b 1d       	adc	r19, r11
    4742:	4c 1d       	adc	r20, r12
    4744:	5d 1d       	adc	r21, r13
    4746:	6e 1d       	adc	r22, r14
    4748:	7f 1d       	adc	r23, r15
    474a:	80 1f       	adc	r24, r16
    474c:	91 1f       	adc	r25, r17
    474e:	08 95       	ret

00004750 <__subdi3>:
    4750:	2a 19       	sub	r18, r10
    4752:	3b 09       	sbc	r19, r11
    4754:	4c 09       	sbc	r20, r12
    4756:	5d 09       	sbc	r21, r13
    4758:	6e 09       	sbc	r22, r14
    475a:	7f 09       	sbc	r23, r15
    475c:	80 0b       	sbc	r24, r16
    475e:	91 0b       	sbc	r25, r17
    4760:	08 95       	ret

00004762 <__cmpdi2_s8>:
    4762:	00 24       	eor	r0, r0
    4764:	a7 fd       	sbrc	r26, 7
    4766:	00 94       	com	r0
    4768:	2a 17       	cp	r18, r26
    476a:	30 05       	cpc	r19, r0
    476c:	40 05       	cpc	r20, r0
    476e:	50 05       	cpc	r21, r0
    4770:	60 05       	cpc	r22, r0
    4772:	70 05       	cpc	r23, r0
    4774:	80 05       	cpc	r24, r0
    4776:	90 05       	cpc	r25, r0
    4778:	08 95       	ret

0000477a <__umulhisi3>:
    477a:	a2 9f       	mul	r26, r18
    477c:	b0 01       	movw	r22, r0
    477e:	b3 9f       	mul	r27, r19
    4780:	c0 01       	movw	r24, r0
    4782:	a3 9f       	mul	r26, r19
    4784:	70 0d       	add	r23, r0
    4786:	81 1d       	adc	r24, r1
    4788:	11 24       	eor	r1, r1
    478a:	91 1d       	adc	r25, r1
    478c:	b2 9f       	mul	r27, r18
    478e:	70 0d       	add	r23, r0
    4790:	81 1d       	adc	r24, r1
    4792:	11 24       	eor	r1, r1
    4794:	91 1d       	adc	r25, r1
    4796:	08 95       	ret

00004798 <__ftoa_engine>:
    4798:	28 30       	cpi	r18, 0x08	; 8
    479a:	08 f0       	brcs	.+2      	; 0x479e <__ftoa_engine+0x6>
    479c:	27 e0       	ldi	r18, 0x07	; 7
    479e:	33 27       	eor	r19, r19
    47a0:	da 01       	movw	r26, r20
    47a2:	99 0f       	add	r25, r25
    47a4:	31 1d       	adc	r19, r1
    47a6:	87 fd       	sbrc	r24, 7
    47a8:	91 60       	ori	r25, 0x01	; 1
    47aa:	00 96       	adiw	r24, 0x00	; 0
    47ac:	61 05       	cpc	r22, r1
    47ae:	71 05       	cpc	r23, r1
    47b0:	39 f4       	brne	.+14     	; 0x47c0 <__ftoa_engine+0x28>
    47b2:	32 60       	ori	r19, 0x02	; 2
    47b4:	2e 5f       	subi	r18, 0xFE	; 254
    47b6:	3d 93       	st	X+, r19
    47b8:	30 e3       	ldi	r19, 0x30	; 48
    47ba:	2a 95       	dec	r18
    47bc:	e1 f7       	brne	.-8      	; 0x47b6 <__ftoa_engine+0x1e>
    47be:	08 95       	ret
    47c0:	9f 3f       	cpi	r25, 0xFF	; 255
    47c2:	30 f0       	brcs	.+12     	; 0x47d0 <__ftoa_engine+0x38>
    47c4:	80 38       	cpi	r24, 0x80	; 128
    47c6:	71 05       	cpc	r23, r1
    47c8:	61 05       	cpc	r22, r1
    47ca:	09 f0       	breq	.+2      	; 0x47ce <__ftoa_engine+0x36>
    47cc:	3c 5f       	subi	r19, 0xFC	; 252
    47ce:	3c 5f       	subi	r19, 0xFC	; 252
    47d0:	3d 93       	st	X+, r19
    47d2:	91 30       	cpi	r25, 0x01	; 1
    47d4:	08 f0       	brcs	.+2      	; 0x47d8 <__ftoa_engine+0x40>
    47d6:	80 68       	ori	r24, 0x80	; 128
    47d8:	91 1d       	adc	r25, r1
    47da:	df 93       	push	r29
    47dc:	cf 93       	push	r28
    47de:	1f 93       	push	r17
    47e0:	0f 93       	push	r16
    47e2:	ff 92       	push	r15
    47e4:	ef 92       	push	r14
    47e6:	19 2f       	mov	r17, r25
    47e8:	98 7f       	andi	r25, 0xF8	; 248
    47ea:	96 95       	lsr	r25
    47ec:	e9 2f       	mov	r30, r25
    47ee:	96 95       	lsr	r25
    47f0:	96 95       	lsr	r25
    47f2:	e9 0f       	add	r30, r25
    47f4:	ff 27       	eor	r31, r31
    47f6:	e2 5a       	subi	r30, 0xA2	; 162
    47f8:	fc 4f       	sbci	r31, 0xFC	; 252
    47fa:	99 27       	eor	r25, r25
    47fc:	33 27       	eor	r19, r19
    47fe:	ee 24       	eor	r14, r14
    4800:	ff 24       	eor	r15, r15
    4802:	a7 01       	movw	r20, r14
    4804:	e7 01       	movw	r28, r14
    4806:	05 90       	lpm	r0, Z+
    4808:	08 94       	sec
    480a:	07 94       	ror	r0
    480c:	28 f4       	brcc	.+10     	; 0x4818 <__ftoa_engine+0x80>
    480e:	36 0f       	add	r19, r22
    4810:	e7 1e       	adc	r14, r23
    4812:	f8 1e       	adc	r15, r24
    4814:	49 1f       	adc	r20, r25
    4816:	51 1d       	adc	r21, r1
    4818:	66 0f       	add	r22, r22
    481a:	77 1f       	adc	r23, r23
    481c:	88 1f       	adc	r24, r24
    481e:	99 1f       	adc	r25, r25
    4820:	06 94       	lsr	r0
    4822:	a1 f7       	brne	.-24     	; 0x480c <__ftoa_engine+0x74>
    4824:	05 90       	lpm	r0, Z+
    4826:	07 94       	ror	r0
    4828:	28 f4       	brcc	.+10     	; 0x4834 <__ftoa_engine+0x9c>
    482a:	e7 0e       	add	r14, r23
    482c:	f8 1e       	adc	r15, r24
    482e:	49 1f       	adc	r20, r25
    4830:	56 1f       	adc	r21, r22
    4832:	c1 1d       	adc	r28, r1
    4834:	77 0f       	add	r23, r23
    4836:	88 1f       	adc	r24, r24
    4838:	99 1f       	adc	r25, r25
    483a:	66 1f       	adc	r22, r22
    483c:	06 94       	lsr	r0
    483e:	a1 f7       	brne	.-24     	; 0x4828 <__ftoa_engine+0x90>
    4840:	05 90       	lpm	r0, Z+
    4842:	07 94       	ror	r0
    4844:	28 f4       	brcc	.+10     	; 0x4850 <__ftoa_engine+0xb8>
    4846:	f8 0e       	add	r15, r24
    4848:	49 1f       	adc	r20, r25
    484a:	56 1f       	adc	r21, r22
    484c:	c7 1f       	adc	r28, r23
    484e:	d1 1d       	adc	r29, r1
    4850:	88 0f       	add	r24, r24
    4852:	99 1f       	adc	r25, r25
    4854:	66 1f       	adc	r22, r22
    4856:	77 1f       	adc	r23, r23
    4858:	06 94       	lsr	r0
    485a:	a1 f7       	brne	.-24     	; 0x4844 <__ftoa_engine+0xac>
    485c:	05 90       	lpm	r0, Z+
    485e:	07 94       	ror	r0
    4860:	20 f4       	brcc	.+8      	; 0x486a <__ftoa_engine+0xd2>
    4862:	49 0f       	add	r20, r25
    4864:	56 1f       	adc	r21, r22
    4866:	c7 1f       	adc	r28, r23
    4868:	d8 1f       	adc	r29, r24
    486a:	99 0f       	add	r25, r25
    486c:	66 1f       	adc	r22, r22
    486e:	77 1f       	adc	r23, r23
    4870:	88 1f       	adc	r24, r24
    4872:	06 94       	lsr	r0
    4874:	a9 f7       	brne	.-22     	; 0x4860 <__ftoa_engine+0xc8>
    4876:	84 91       	lpm	r24, Z
    4878:	10 95       	com	r17
    487a:	17 70       	andi	r17, 0x07	; 7
    487c:	41 f0       	breq	.+16     	; 0x488e <__ftoa_engine+0xf6>
    487e:	d6 95       	lsr	r29
    4880:	c7 95       	ror	r28
    4882:	57 95       	ror	r21
    4884:	47 95       	ror	r20
    4886:	f7 94       	ror	r15
    4888:	e7 94       	ror	r14
    488a:	1a 95       	dec	r17
    488c:	c1 f7       	brne	.-16     	; 0x487e <__ftoa_engine+0xe6>
    488e:	e4 e0       	ldi	r30, 0x04	; 4
    4890:	f3 e0       	ldi	r31, 0x03	; 3
    4892:	68 94       	set
    4894:	15 90       	lpm	r1, Z+
    4896:	15 91       	lpm	r17, Z+
    4898:	35 91       	lpm	r19, Z+
    489a:	65 91       	lpm	r22, Z+
    489c:	95 91       	lpm	r25, Z+
    489e:	05 90       	lpm	r0, Z+
    48a0:	7f e2       	ldi	r23, 0x2F	; 47
    48a2:	73 95       	inc	r23
    48a4:	e1 18       	sub	r14, r1
    48a6:	f1 0a       	sbc	r15, r17
    48a8:	43 0b       	sbc	r20, r19
    48aa:	56 0b       	sbc	r21, r22
    48ac:	c9 0b       	sbc	r28, r25
    48ae:	d0 09       	sbc	r29, r0
    48b0:	c0 f7       	brcc	.-16     	; 0x48a2 <__ftoa_engine+0x10a>
    48b2:	e1 0c       	add	r14, r1
    48b4:	f1 1e       	adc	r15, r17
    48b6:	43 1f       	adc	r20, r19
    48b8:	56 1f       	adc	r21, r22
    48ba:	c9 1f       	adc	r28, r25
    48bc:	d0 1d       	adc	r29, r0
    48be:	7e f4       	brtc	.+30     	; 0x48de <__ftoa_engine+0x146>
    48c0:	70 33       	cpi	r23, 0x30	; 48
    48c2:	11 f4       	brne	.+4      	; 0x48c8 <__ftoa_engine+0x130>
    48c4:	8a 95       	dec	r24
    48c6:	e6 cf       	rjmp	.-52     	; 0x4894 <__ftoa_engine+0xfc>
    48c8:	e8 94       	clt
    48ca:	01 50       	subi	r16, 0x01	; 1
    48cc:	30 f0       	brcs	.+12     	; 0x48da <__ftoa_engine+0x142>
    48ce:	08 0f       	add	r16, r24
    48d0:	0a f4       	brpl	.+2      	; 0x48d4 <__ftoa_engine+0x13c>
    48d2:	00 27       	eor	r16, r16
    48d4:	02 17       	cp	r16, r18
    48d6:	08 f4       	brcc	.+2      	; 0x48da <__ftoa_engine+0x142>
    48d8:	20 2f       	mov	r18, r16
    48da:	23 95       	inc	r18
    48dc:	02 2f       	mov	r16, r18
    48de:	7a 33       	cpi	r23, 0x3A	; 58
    48e0:	28 f0       	brcs	.+10     	; 0x48ec <__ftoa_engine+0x154>
    48e2:	79 e3       	ldi	r23, 0x39	; 57
    48e4:	7d 93       	st	X+, r23
    48e6:	2a 95       	dec	r18
    48e8:	e9 f7       	brne	.-6      	; 0x48e4 <__ftoa_engine+0x14c>
    48ea:	10 c0       	rjmp	.+32     	; 0x490c <__ftoa_engine+0x174>
    48ec:	7d 93       	st	X+, r23
    48ee:	2a 95       	dec	r18
    48f0:	89 f6       	brne	.-94     	; 0x4894 <__ftoa_engine+0xfc>
    48f2:	06 94       	lsr	r0
    48f4:	97 95       	ror	r25
    48f6:	67 95       	ror	r22
    48f8:	37 95       	ror	r19
    48fa:	17 95       	ror	r17
    48fc:	17 94       	ror	r1
    48fe:	e1 18       	sub	r14, r1
    4900:	f1 0a       	sbc	r15, r17
    4902:	43 0b       	sbc	r20, r19
    4904:	56 0b       	sbc	r21, r22
    4906:	c9 0b       	sbc	r28, r25
    4908:	d0 09       	sbc	r29, r0
    490a:	98 f0       	brcs	.+38     	; 0x4932 <__ftoa_engine+0x19a>
    490c:	23 95       	inc	r18
    490e:	7e 91       	ld	r23, -X
    4910:	73 95       	inc	r23
    4912:	7a 33       	cpi	r23, 0x3A	; 58
    4914:	08 f0       	brcs	.+2      	; 0x4918 <__ftoa_engine+0x180>
    4916:	70 e3       	ldi	r23, 0x30	; 48
    4918:	7c 93       	st	X, r23
    491a:	20 13       	cpse	r18, r16
    491c:	b8 f7       	brcc	.-18     	; 0x490c <__ftoa_engine+0x174>
    491e:	7e 91       	ld	r23, -X
    4920:	70 61       	ori	r23, 0x10	; 16
    4922:	7d 93       	st	X+, r23
    4924:	30 f0       	brcs	.+12     	; 0x4932 <__ftoa_engine+0x19a>
    4926:	83 95       	inc	r24
    4928:	71 e3       	ldi	r23, 0x31	; 49
    492a:	7d 93       	st	X+, r23
    492c:	70 e3       	ldi	r23, 0x30	; 48
    492e:	2a 95       	dec	r18
    4930:	e1 f7       	brne	.-8      	; 0x492a <__ftoa_engine+0x192>
    4932:	11 24       	eor	r1, r1
    4934:	ef 90       	pop	r14
    4936:	ff 90       	pop	r15
    4938:	0f 91       	pop	r16
    493a:	1f 91       	pop	r17
    493c:	cf 91       	pop	r28
    493e:	df 91       	pop	r29
    4940:	99 27       	eor	r25, r25
    4942:	87 fd       	sbrc	r24, 7
    4944:	90 95       	com	r25
    4946:	08 95       	ret

00004948 <strnlen_P>:
    4948:	fc 01       	movw	r30, r24
    494a:	05 90       	lpm	r0, Z+
    494c:	61 50       	subi	r22, 0x01	; 1
    494e:	70 40       	sbci	r23, 0x00	; 0
    4950:	01 10       	cpse	r0, r1
    4952:	d8 f7       	brcc	.-10     	; 0x494a <strnlen_P+0x2>
    4954:	80 95       	com	r24
    4956:	90 95       	com	r25
    4958:	8e 0f       	add	r24, r30
    495a:	9f 1f       	adc	r25, r31
    495c:	08 95       	ret

0000495e <strnlen>:
    495e:	fc 01       	movw	r30, r24
    4960:	61 50       	subi	r22, 0x01	; 1
    4962:	70 40       	sbci	r23, 0x00	; 0
    4964:	01 90       	ld	r0, Z+
    4966:	01 10       	cpse	r0, r1
    4968:	d8 f7       	brcc	.-10     	; 0x4960 <strnlen+0x2>
    496a:	80 95       	com	r24
    496c:	90 95       	com	r25
    496e:	8e 0f       	add	r24, r30
    4970:	9f 1f       	adc	r25, r31
    4972:	08 95       	ret

00004974 <fdevopen>:
    4974:	0f 93       	push	r16
    4976:	1f 93       	push	r17
    4978:	cf 93       	push	r28
    497a:	df 93       	push	r29
    497c:	00 97       	sbiw	r24, 0x00	; 0
    497e:	31 f4       	brne	.+12     	; 0x498c <fdevopen+0x18>
    4980:	61 15       	cp	r22, r1
    4982:	71 05       	cpc	r23, r1
    4984:	19 f4       	brne	.+6      	; 0x498c <fdevopen+0x18>
    4986:	80 e0       	ldi	r24, 0x00	; 0
    4988:	90 e0       	ldi	r25, 0x00	; 0
    498a:	39 c0       	rjmp	.+114    	; 0x49fe <fdevopen+0x8a>
    498c:	8b 01       	movw	r16, r22
    498e:	ec 01       	movw	r28, r24
    4990:	6e e0       	ldi	r22, 0x0E	; 14
    4992:	70 e0       	ldi	r23, 0x00	; 0
    4994:	81 e0       	ldi	r24, 0x01	; 1
    4996:	90 e0       	ldi	r25, 0x00	; 0
    4998:	14 d1       	rcall	.+552    	; 0x4bc2 <calloc>
    499a:	fc 01       	movw	r30, r24
    499c:	89 2b       	or	r24, r25
    499e:	99 f3       	breq	.-26     	; 0x4986 <fdevopen+0x12>
    49a0:	80 e8       	ldi	r24, 0x80	; 128
    49a2:	83 83       	std	Z+3, r24	; 0x03
    49a4:	01 15       	cp	r16, r1
    49a6:	11 05       	cpc	r17, r1
    49a8:	71 f0       	breq	.+28     	; 0x49c6 <fdevopen+0x52>
    49aa:	02 87       	std	Z+10, r16	; 0x0a
    49ac:	13 87       	std	Z+11, r17	; 0x0b
    49ae:	81 e8       	ldi	r24, 0x81	; 129
    49b0:	83 83       	std	Z+3, r24	; 0x03
    49b2:	80 91 ab 23 	lds	r24, 0x23AB	; 0x8023ab <__iob>
    49b6:	90 91 ac 23 	lds	r25, 0x23AC	; 0x8023ac <__iob+0x1>
    49ba:	89 2b       	or	r24, r25
    49bc:	21 f4       	brne	.+8      	; 0x49c6 <fdevopen+0x52>
    49be:	e0 93 ab 23 	sts	0x23AB, r30	; 0x8023ab <__iob>
    49c2:	f0 93 ac 23 	sts	0x23AC, r31	; 0x8023ac <__iob+0x1>
    49c6:	20 97       	sbiw	r28, 0x00	; 0
    49c8:	c9 f0       	breq	.+50     	; 0x49fc <fdevopen+0x88>
    49ca:	c0 87       	std	Z+8, r28	; 0x08
    49cc:	d1 87       	std	Z+9, r29	; 0x09
    49ce:	83 81       	ldd	r24, Z+3	; 0x03
    49d0:	82 60       	ori	r24, 0x02	; 2
    49d2:	83 83       	std	Z+3, r24	; 0x03
    49d4:	80 91 ad 23 	lds	r24, 0x23AD	; 0x8023ad <__iob+0x2>
    49d8:	90 91 ae 23 	lds	r25, 0x23AE	; 0x8023ae <__iob+0x3>
    49dc:	89 2b       	or	r24, r25
    49de:	71 f4       	brne	.+28     	; 0x49fc <fdevopen+0x88>
    49e0:	e0 93 ad 23 	sts	0x23AD, r30	; 0x8023ad <__iob+0x2>
    49e4:	f0 93 ae 23 	sts	0x23AE, r31	; 0x8023ae <__iob+0x3>
    49e8:	80 91 af 23 	lds	r24, 0x23AF	; 0x8023af <__iob+0x4>
    49ec:	90 91 b0 23 	lds	r25, 0x23B0	; 0x8023b0 <__iob+0x5>
    49f0:	89 2b       	or	r24, r25
    49f2:	21 f4       	brne	.+8      	; 0x49fc <fdevopen+0x88>
    49f4:	e0 93 af 23 	sts	0x23AF, r30	; 0x8023af <__iob+0x4>
    49f8:	f0 93 b0 23 	sts	0x23B0, r31	; 0x8023b0 <__iob+0x5>
    49fc:	cf 01       	movw	r24, r30
    49fe:	df 91       	pop	r29
    4a00:	cf 91       	pop	r28
    4a02:	1f 91       	pop	r17
    4a04:	0f 91       	pop	r16
    4a06:	08 95       	ret

00004a08 <fputc>:
    4a08:	0f 93       	push	r16
    4a0a:	1f 93       	push	r17
    4a0c:	cf 93       	push	r28
    4a0e:	df 93       	push	r29
    4a10:	fb 01       	movw	r30, r22
    4a12:	23 81       	ldd	r18, Z+3	; 0x03
    4a14:	21 fd       	sbrc	r18, 1
    4a16:	03 c0       	rjmp	.+6      	; 0x4a1e <fputc+0x16>
    4a18:	8f ef       	ldi	r24, 0xFF	; 255
    4a1a:	9f ef       	ldi	r25, 0xFF	; 255
    4a1c:	2c c0       	rjmp	.+88     	; 0x4a76 <fputc+0x6e>
    4a1e:	22 ff       	sbrs	r18, 2
    4a20:	16 c0       	rjmp	.+44     	; 0x4a4e <fputc+0x46>
    4a22:	46 81       	ldd	r20, Z+6	; 0x06
    4a24:	57 81       	ldd	r21, Z+7	; 0x07
    4a26:	24 81       	ldd	r18, Z+4	; 0x04
    4a28:	35 81       	ldd	r19, Z+5	; 0x05
    4a2a:	42 17       	cp	r20, r18
    4a2c:	53 07       	cpc	r21, r19
    4a2e:	44 f4       	brge	.+16     	; 0x4a40 <fputc+0x38>
    4a30:	a0 81       	ld	r26, Z
    4a32:	b1 81       	ldd	r27, Z+1	; 0x01
    4a34:	9d 01       	movw	r18, r26
    4a36:	2f 5f       	subi	r18, 0xFF	; 255
    4a38:	3f 4f       	sbci	r19, 0xFF	; 255
    4a3a:	20 83       	st	Z, r18
    4a3c:	31 83       	std	Z+1, r19	; 0x01
    4a3e:	8c 93       	st	X, r24
    4a40:	26 81       	ldd	r18, Z+6	; 0x06
    4a42:	37 81       	ldd	r19, Z+7	; 0x07
    4a44:	2f 5f       	subi	r18, 0xFF	; 255
    4a46:	3f 4f       	sbci	r19, 0xFF	; 255
    4a48:	26 83       	std	Z+6, r18	; 0x06
    4a4a:	37 83       	std	Z+7, r19	; 0x07
    4a4c:	14 c0       	rjmp	.+40     	; 0x4a76 <fputc+0x6e>
    4a4e:	8b 01       	movw	r16, r22
    4a50:	ec 01       	movw	r28, r24
    4a52:	fb 01       	movw	r30, r22
    4a54:	00 84       	ldd	r0, Z+8	; 0x08
    4a56:	f1 85       	ldd	r31, Z+9	; 0x09
    4a58:	e0 2d       	mov	r30, r0
    4a5a:	19 95       	eicall
    4a5c:	89 2b       	or	r24, r25
    4a5e:	e1 f6       	brne	.-72     	; 0x4a18 <fputc+0x10>
    4a60:	d8 01       	movw	r26, r16
    4a62:	16 96       	adiw	r26, 0x06	; 6
    4a64:	8d 91       	ld	r24, X+
    4a66:	9c 91       	ld	r25, X
    4a68:	17 97       	sbiw	r26, 0x07	; 7
    4a6a:	01 96       	adiw	r24, 0x01	; 1
    4a6c:	16 96       	adiw	r26, 0x06	; 6
    4a6e:	8d 93       	st	X+, r24
    4a70:	9c 93       	st	X, r25
    4a72:	17 97       	sbiw	r26, 0x07	; 7
    4a74:	ce 01       	movw	r24, r28
    4a76:	df 91       	pop	r29
    4a78:	cf 91       	pop	r28
    4a7a:	1f 91       	pop	r17
    4a7c:	0f 91       	pop	r16
    4a7e:	08 95       	ret

00004a80 <printf>:
    4a80:	cf 93       	push	r28
    4a82:	df 93       	push	r29
    4a84:	cd b7       	in	r28, 0x3d	; 61
    4a86:	de b7       	in	r29, 0x3e	; 62
    4a88:	ae 01       	movw	r20, r28
    4a8a:	4a 5f       	subi	r20, 0xFA	; 250
    4a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    4a8e:	fa 01       	movw	r30, r20
    4a90:	61 91       	ld	r22, Z+
    4a92:	71 91       	ld	r23, Z+
    4a94:	af 01       	movw	r20, r30
    4a96:	80 91 ad 23 	lds	r24, 0x23AD	; 0x8023ad <__iob+0x2>
    4a9a:	90 91 ae 23 	lds	r25, 0x23AE	; 0x8023ae <__iob+0x3>
    4a9e:	03 da       	rcall	.-3066   	; 0x3ea6 <vfprintf>
    4aa0:	df 91       	pop	r29
    4aa2:	cf 91       	pop	r28
    4aa4:	08 95       	ret

00004aa6 <puts>:
    4aa6:	0f 93       	push	r16
    4aa8:	1f 93       	push	r17
    4aaa:	cf 93       	push	r28
    4aac:	df 93       	push	r29
    4aae:	e0 91 ad 23 	lds	r30, 0x23AD	; 0x8023ad <__iob+0x2>
    4ab2:	f0 91 ae 23 	lds	r31, 0x23AE	; 0x8023ae <__iob+0x3>
    4ab6:	23 81       	ldd	r18, Z+3	; 0x03
    4ab8:	21 ff       	sbrs	r18, 1
    4aba:	1b c0       	rjmp	.+54     	; 0x4af2 <puts+0x4c>
    4abc:	8c 01       	movw	r16, r24
    4abe:	d0 e0       	ldi	r29, 0x00	; 0
    4ac0:	c0 e0       	ldi	r28, 0x00	; 0
    4ac2:	f8 01       	movw	r30, r16
    4ac4:	81 91       	ld	r24, Z+
    4ac6:	8f 01       	movw	r16, r30
    4ac8:	60 91 ad 23 	lds	r22, 0x23AD	; 0x8023ad <__iob+0x2>
    4acc:	70 91 ae 23 	lds	r23, 0x23AE	; 0x8023ae <__iob+0x3>
    4ad0:	db 01       	movw	r26, r22
    4ad2:	18 96       	adiw	r26, 0x08	; 8
    4ad4:	ed 91       	ld	r30, X+
    4ad6:	fc 91       	ld	r31, X
    4ad8:	19 97       	sbiw	r26, 0x09	; 9
    4ada:	88 23       	and	r24, r24
    4adc:	31 f0       	breq	.+12     	; 0x4aea <puts+0x44>
    4ade:	19 95       	eicall
    4ae0:	89 2b       	or	r24, r25
    4ae2:	79 f3       	breq	.-34     	; 0x4ac2 <puts+0x1c>
    4ae4:	df ef       	ldi	r29, 0xFF	; 255
    4ae6:	cf ef       	ldi	r28, 0xFF	; 255
    4ae8:	ec cf       	rjmp	.-40     	; 0x4ac2 <puts+0x1c>
    4aea:	8a e0       	ldi	r24, 0x0A	; 10
    4aec:	19 95       	eicall
    4aee:	89 2b       	or	r24, r25
    4af0:	19 f0       	breq	.+6      	; 0x4af8 <puts+0x52>
    4af2:	8f ef       	ldi	r24, 0xFF	; 255
    4af4:	9f ef       	ldi	r25, 0xFF	; 255
    4af6:	02 c0       	rjmp	.+4      	; 0x4afc <puts+0x56>
    4af8:	8d 2f       	mov	r24, r29
    4afa:	9c 2f       	mov	r25, r28
    4afc:	df 91       	pop	r29
    4afe:	cf 91       	pop	r28
    4b00:	1f 91       	pop	r17
    4b02:	0f 91       	pop	r16
    4b04:	08 95       	ret

00004b06 <__ultoa_invert>:
    4b06:	fa 01       	movw	r30, r20
    4b08:	aa 27       	eor	r26, r26
    4b0a:	28 30       	cpi	r18, 0x08	; 8
    4b0c:	51 f1       	breq	.+84     	; 0x4b62 <__ultoa_invert+0x5c>
    4b0e:	20 31       	cpi	r18, 0x10	; 16
    4b10:	81 f1       	breq	.+96     	; 0x4b72 <__ultoa_invert+0x6c>
    4b12:	e8 94       	clt
    4b14:	6f 93       	push	r22
    4b16:	6e 7f       	andi	r22, 0xFE	; 254
    4b18:	6e 5f       	subi	r22, 0xFE	; 254
    4b1a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b1c:	8f 4f       	sbci	r24, 0xFF	; 255
    4b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    4b20:	af 4f       	sbci	r26, 0xFF	; 255
    4b22:	b1 e0       	ldi	r27, 0x01	; 1
    4b24:	3e d0       	rcall	.+124    	; 0x4ba2 <__ultoa_invert+0x9c>
    4b26:	b4 e0       	ldi	r27, 0x04	; 4
    4b28:	3c d0       	rcall	.+120    	; 0x4ba2 <__ultoa_invert+0x9c>
    4b2a:	67 0f       	add	r22, r23
    4b2c:	78 1f       	adc	r23, r24
    4b2e:	89 1f       	adc	r24, r25
    4b30:	9a 1f       	adc	r25, r26
    4b32:	a1 1d       	adc	r26, r1
    4b34:	68 0f       	add	r22, r24
    4b36:	79 1f       	adc	r23, r25
    4b38:	8a 1f       	adc	r24, r26
    4b3a:	91 1d       	adc	r25, r1
    4b3c:	a1 1d       	adc	r26, r1
    4b3e:	6a 0f       	add	r22, r26
    4b40:	71 1d       	adc	r23, r1
    4b42:	81 1d       	adc	r24, r1
    4b44:	91 1d       	adc	r25, r1
    4b46:	a1 1d       	adc	r26, r1
    4b48:	20 d0       	rcall	.+64     	; 0x4b8a <__ultoa_invert+0x84>
    4b4a:	09 f4       	brne	.+2      	; 0x4b4e <__ultoa_invert+0x48>
    4b4c:	68 94       	set
    4b4e:	3f 91       	pop	r19
    4b50:	2a e0       	ldi	r18, 0x0A	; 10
    4b52:	26 9f       	mul	r18, r22
    4b54:	11 24       	eor	r1, r1
    4b56:	30 19       	sub	r19, r0
    4b58:	30 5d       	subi	r19, 0xD0	; 208
    4b5a:	31 93       	st	Z+, r19
    4b5c:	de f6       	brtc	.-74     	; 0x4b14 <__ultoa_invert+0xe>
    4b5e:	cf 01       	movw	r24, r30
    4b60:	08 95       	ret
    4b62:	46 2f       	mov	r20, r22
    4b64:	47 70       	andi	r20, 0x07	; 7
    4b66:	40 5d       	subi	r20, 0xD0	; 208
    4b68:	41 93       	st	Z+, r20
    4b6a:	b3 e0       	ldi	r27, 0x03	; 3
    4b6c:	0f d0       	rcall	.+30     	; 0x4b8c <__ultoa_invert+0x86>
    4b6e:	c9 f7       	brne	.-14     	; 0x4b62 <__ultoa_invert+0x5c>
    4b70:	f6 cf       	rjmp	.-20     	; 0x4b5e <__ultoa_invert+0x58>
    4b72:	46 2f       	mov	r20, r22
    4b74:	4f 70       	andi	r20, 0x0F	; 15
    4b76:	40 5d       	subi	r20, 0xD0	; 208
    4b78:	4a 33       	cpi	r20, 0x3A	; 58
    4b7a:	18 f0       	brcs	.+6      	; 0x4b82 <__ultoa_invert+0x7c>
    4b7c:	49 5d       	subi	r20, 0xD9	; 217
    4b7e:	31 fd       	sbrc	r19, 1
    4b80:	40 52       	subi	r20, 0x20	; 32
    4b82:	41 93       	st	Z+, r20
    4b84:	02 d0       	rcall	.+4      	; 0x4b8a <__ultoa_invert+0x84>
    4b86:	a9 f7       	brne	.-22     	; 0x4b72 <__ultoa_invert+0x6c>
    4b88:	ea cf       	rjmp	.-44     	; 0x4b5e <__ultoa_invert+0x58>
    4b8a:	b4 e0       	ldi	r27, 0x04	; 4
    4b8c:	a6 95       	lsr	r26
    4b8e:	97 95       	ror	r25
    4b90:	87 95       	ror	r24
    4b92:	77 95       	ror	r23
    4b94:	67 95       	ror	r22
    4b96:	ba 95       	dec	r27
    4b98:	c9 f7       	brne	.-14     	; 0x4b8c <__ultoa_invert+0x86>
    4b9a:	00 97       	sbiw	r24, 0x00	; 0
    4b9c:	61 05       	cpc	r22, r1
    4b9e:	71 05       	cpc	r23, r1
    4ba0:	08 95       	ret
    4ba2:	9b 01       	movw	r18, r22
    4ba4:	ac 01       	movw	r20, r24
    4ba6:	0a 2e       	mov	r0, r26
    4ba8:	06 94       	lsr	r0
    4baa:	57 95       	ror	r21
    4bac:	47 95       	ror	r20
    4bae:	37 95       	ror	r19
    4bb0:	27 95       	ror	r18
    4bb2:	ba 95       	dec	r27
    4bb4:	c9 f7       	brne	.-14     	; 0x4ba8 <__ultoa_invert+0xa2>
    4bb6:	62 0f       	add	r22, r18
    4bb8:	73 1f       	adc	r23, r19
    4bba:	84 1f       	adc	r24, r20
    4bbc:	95 1f       	adc	r25, r21
    4bbe:	a0 1d       	adc	r26, r0
    4bc0:	08 95       	ret

00004bc2 <calloc>:
    4bc2:	0f 93       	push	r16
    4bc4:	1f 93       	push	r17
    4bc6:	cf 93       	push	r28
    4bc8:	df 93       	push	r29
    4bca:	86 9f       	mul	r24, r22
    4bcc:	80 01       	movw	r16, r0
    4bce:	87 9f       	mul	r24, r23
    4bd0:	10 0d       	add	r17, r0
    4bd2:	96 9f       	mul	r25, r22
    4bd4:	10 0d       	add	r17, r0
    4bd6:	11 24       	eor	r1, r1
    4bd8:	c8 01       	movw	r24, r16
    4bda:	0d d0       	rcall	.+26     	; 0x4bf6 <malloc>
    4bdc:	ec 01       	movw	r28, r24
    4bde:	00 97       	sbiw	r24, 0x00	; 0
    4be0:	21 f0       	breq	.+8      	; 0x4bea <calloc+0x28>
    4be2:	a8 01       	movw	r20, r16
    4be4:	60 e0       	ldi	r22, 0x00	; 0
    4be6:	70 e0       	ldi	r23, 0x00	; 0
    4be8:	27 d1       	rcall	.+590    	; 0x4e38 <memset>
    4bea:	ce 01       	movw	r24, r28
    4bec:	df 91       	pop	r29
    4bee:	cf 91       	pop	r28
    4bf0:	1f 91       	pop	r17
    4bf2:	0f 91       	pop	r16
    4bf4:	08 95       	ret

00004bf6 <malloc>:
    4bf6:	0f 93       	push	r16
    4bf8:	1f 93       	push	r17
    4bfa:	cf 93       	push	r28
    4bfc:	df 93       	push	r29
    4bfe:	82 30       	cpi	r24, 0x02	; 2
    4c00:	91 05       	cpc	r25, r1
    4c02:	10 f4       	brcc	.+4      	; 0x4c08 <malloc+0x12>
    4c04:	82 e0       	ldi	r24, 0x02	; 2
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	e0 91 b3 23 	lds	r30, 0x23B3	; 0x8023b3 <__flp>
    4c0c:	f0 91 b4 23 	lds	r31, 0x23B4	; 0x8023b4 <__flp+0x1>
    4c10:	20 e0       	ldi	r18, 0x00	; 0
    4c12:	30 e0       	ldi	r19, 0x00	; 0
    4c14:	a0 e0       	ldi	r26, 0x00	; 0
    4c16:	b0 e0       	ldi	r27, 0x00	; 0
    4c18:	30 97       	sbiw	r30, 0x00	; 0
    4c1a:	19 f1       	breq	.+70     	; 0x4c62 <malloc+0x6c>
    4c1c:	40 81       	ld	r20, Z
    4c1e:	51 81       	ldd	r21, Z+1	; 0x01
    4c20:	02 81       	ldd	r16, Z+2	; 0x02
    4c22:	13 81       	ldd	r17, Z+3	; 0x03
    4c24:	48 17       	cp	r20, r24
    4c26:	59 07       	cpc	r21, r25
    4c28:	c8 f0       	brcs	.+50     	; 0x4c5c <malloc+0x66>
    4c2a:	84 17       	cp	r24, r20
    4c2c:	95 07       	cpc	r25, r21
    4c2e:	69 f4       	brne	.+26     	; 0x4c4a <malloc+0x54>
    4c30:	10 97       	sbiw	r26, 0x00	; 0
    4c32:	31 f0       	breq	.+12     	; 0x4c40 <malloc+0x4a>
    4c34:	12 96       	adiw	r26, 0x02	; 2
    4c36:	0c 93       	st	X, r16
    4c38:	12 97       	sbiw	r26, 0x02	; 2
    4c3a:	13 96       	adiw	r26, 0x03	; 3
    4c3c:	1c 93       	st	X, r17
    4c3e:	27 c0       	rjmp	.+78     	; 0x4c8e <malloc+0x98>
    4c40:	00 93 b3 23 	sts	0x23B3, r16	; 0x8023b3 <__flp>
    4c44:	10 93 b4 23 	sts	0x23B4, r17	; 0x8023b4 <__flp+0x1>
    4c48:	22 c0       	rjmp	.+68     	; 0x4c8e <malloc+0x98>
    4c4a:	21 15       	cp	r18, r1
    4c4c:	31 05       	cpc	r19, r1
    4c4e:	19 f0       	breq	.+6      	; 0x4c56 <malloc+0x60>
    4c50:	42 17       	cp	r20, r18
    4c52:	53 07       	cpc	r21, r19
    4c54:	18 f4       	brcc	.+6      	; 0x4c5c <malloc+0x66>
    4c56:	9a 01       	movw	r18, r20
    4c58:	bd 01       	movw	r22, r26
    4c5a:	ef 01       	movw	r28, r30
    4c5c:	df 01       	movw	r26, r30
    4c5e:	f8 01       	movw	r30, r16
    4c60:	db cf       	rjmp	.-74     	; 0x4c18 <malloc+0x22>
    4c62:	21 15       	cp	r18, r1
    4c64:	31 05       	cpc	r19, r1
    4c66:	f9 f0       	breq	.+62     	; 0x4ca6 <malloc+0xb0>
    4c68:	28 1b       	sub	r18, r24
    4c6a:	39 0b       	sbc	r19, r25
    4c6c:	24 30       	cpi	r18, 0x04	; 4
    4c6e:	31 05       	cpc	r19, r1
    4c70:	80 f4       	brcc	.+32     	; 0x4c92 <malloc+0x9c>
    4c72:	8a 81       	ldd	r24, Y+2	; 0x02
    4c74:	9b 81       	ldd	r25, Y+3	; 0x03
    4c76:	61 15       	cp	r22, r1
    4c78:	71 05       	cpc	r23, r1
    4c7a:	21 f0       	breq	.+8      	; 0x4c84 <malloc+0x8e>
    4c7c:	fb 01       	movw	r30, r22
    4c7e:	82 83       	std	Z+2, r24	; 0x02
    4c80:	93 83       	std	Z+3, r25	; 0x03
    4c82:	04 c0       	rjmp	.+8      	; 0x4c8c <malloc+0x96>
    4c84:	80 93 b3 23 	sts	0x23B3, r24	; 0x8023b3 <__flp>
    4c88:	90 93 b4 23 	sts	0x23B4, r25	; 0x8023b4 <__flp+0x1>
    4c8c:	fe 01       	movw	r30, r28
    4c8e:	32 96       	adiw	r30, 0x02	; 2
    4c90:	44 c0       	rjmp	.+136    	; 0x4d1a <malloc+0x124>
    4c92:	fe 01       	movw	r30, r28
    4c94:	e2 0f       	add	r30, r18
    4c96:	f3 1f       	adc	r31, r19
    4c98:	81 93       	st	Z+, r24
    4c9a:	91 93       	st	Z+, r25
    4c9c:	22 50       	subi	r18, 0x02	; 2
    4c9e:	31 09       	sbc	r19, r1
    4ca0:	28 83       	st	Y, r18
    4ca2:	39 83       	std	Y+1, r19	; 0x01
    4ca4:	3a c0       	rjmp	.+116    	; 0x4d1a <malloc+0x124>
    4ca6:	20 91 b1 23 	lds	r18, 0x23B1	; 0x8023b1 <__brkval>
    4caa:	30 91 b2 23 	lds	r19, 0x23B2	; 0x8023b2 <__brkval+0x1>
    4cae:	23 2b       	or	r18, r19
    4cb0:	41 f4       	brne	.+16     	; 0x4cc2 <malloc+0xcc>
    4cb2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    4cb6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    4cba:	20 93 b1 23 	sts	0x23B1, r18	; 0x8023b1 <__brkval>
    4cbe:	30 93 b2 23 	sts	0x23B2, r19	; 0x8023b2 <__brkval+0x1>
    4cc2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    4cc6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    4cca:	21 15       	cp	r18, r1
    4ccc:	31 05       	cpc	r19, r1
    4cce:	41 f4       	brne	.+16     	; 0x4ce0 <malloc+0xea>
    4cd0:	2d b7       	in	r18, 0x3d	; 61
    4cd2:	3e b7       	in	r19, 0x3e	; 62
    4cd4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    4cd8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    4cdc:	24 1b       	sub	r18, r20
    4cde:	35 0b       	sbc	r19, r21
    4ce0:	e0 91 b1 23 	lds	r30, 0x23B1	; 0x8023b1 <__brkval>
    4ce4:	f0 91 b2 23 	lds	r31, 0x23B2	; 0x8023b2 <__brkval+0x1>
    4ce8:	e2 17       	cp	r30, r18
    4cea:	f3 07       	cpc	r31, r19
    4cec:	a0 f4       	brcc	.+40     	; 0x4d16 <malloc+0x120>
    4cee:	2e 1b       	sub	r18, r30
    4cf0:	3f 0b       	sbc	r19, r31
    4cf2:	28 17       	cp	r18, r24
    4cf4:	39 07       	cpc	r19, r25
    4cf6:	78 f0       	brcs	.+30     	; 0x4d16 <malloc+0x120>
    4cf8:	ac 01       	movw	r20, r24
    4cfa:	4e 5f       	subi	r20, 0xFE	; 254
    4cfc:	5f 4f       	sbci	r21, 0xFF	; 255
    4cfe:	24 17       	cp	r18, r20
    4d00:	35 07       	cpc	r19, r21
    4d02:	48 f0       	brcs	.+18     	; 0x4d16 <malloc+0x120>
    4d04:	4e 0f       	add	r20, r30
    4d06:	5f 1f       	adc	r21, r31
    4d08:	40 93 b1 23 	sts	0x23B1, r20	; 0x8023b1 <__brkval>
    4d0c:	50 93 b2 23 	sts	0x23B2, r21	; 0x8023b2 <__brkval+0x1>
    4d10:	81 93       	st	Z+, r24
    4d12:	91 93       	st	Z+, r25
    4d14:	02 c0       	rjmp	.+4      	; 0x4d1a <malloc+0x124>
    4d16:	e0 e0       	ldi	r30, 0x00	; 0
    4d18:	f0 e0       	ldi	r31, 0x00	; 0
    4d1a:	cf 01       	movw	r24, r30
    4d1c:	df 91       	pop	r29
    4d1e:	cf 91       	pop	r28
    4d20:	1f 91       	pop	r17
    4d22:	0f 91       	pop	r16
    4d24:	08 95       	ret

00004d26 <free>:
    4d26:	cf 93       	push	r28
    4d28:	df 93       	push	r29
    4d2a:	00 97       	sbiw	r24, 0x00	; 0
    4d2c:	09 f4       	brne	.+2      	; 0x4d30 <free+0xa>
    4d2e:	81 c0       	rjmp	.+258    	; 0x4e32 <free+0x10c>
    4d30:	fc 01       	movw	r30, r24
    4d32:	32 97       	sbiw	r30, 0x02	; 2
    4d34:	12 82       	std	Z+2, r1	; 0x02
    4d36:	13 82       	std	Z+3, r1	; 0x03
    4d38:	a0 91 b3 23 	lds	r26, 0x23B3	; 0x8023b3 <__flp>
    4d3c:	b0 91 b4 23 	lds	r27, 0x23B4	; 0x8023b4 <__flp+0x1>
    4d40:	10 97       	sbiw	r26, 0x00	; 0
    4d42:	81 f4       	brne	.+32     	; 0x4d64 <free+0x3e>
    4d44:	20 81       	ld	r18, Z
    4d46:	31 81       	ldd	r19, Z+1	; 0x01
    4d48:	82 0f       	add	r24, r18
    4d4a:	93 1f       	adc	r25, r19
    4d4c:	20 91 b1 23 	lds	r18, 0x23B1	; 0x8023b1 <__brkval>
    4d50:	30 91 b2 23 	lds	r19, 0x23B2	; 0x8023b2 <__brkval+0x1>
    4d54:	28 17       	cp	r18, r24
    4d56:	39 07       	cpc	r19, r25
    4d58:	51 f5       	brne	.+84     	; 0x4dae <free+0x88>
    4d5a:	e0 93 b1 23 	sts	0x23B1, r30	; 0x8023b1 <__brkval>
    4d5e:	f0 93 b2 23 	sts	0x23B2, r31	; 0x8023b2 <__brkval+0x1>
    4d62:	67 c0       	rjmp	.+206    	; 0x4e32 <free+0x10c>
    4d64:	ed 01       	movw	r28, r26
    4d66:	20 e0       	ldi	r18, 0x00	; 0
    4d68:	30 e0       	ldi	r19, 0x00	; 0
    4d6a:	ce 17       	cp	r28, r30
    4d6c:	df 07       	cpc	r29, r31
    4d6e:	40 f4       	brcc	.+16     	; 0x4d80 <free+0x5a>
    4d70:	4a 81       	ldd	r20, Y+2	; 0x02
    4d72:	5b 81       	ldd	r21, Y+3	; 0x03
    4d74:	9e 01       	movw	r18, r28
    4d76:	41 15       	cp	r20, r1
    4d78:	51 05       	cpc	r21, r1
    4d7a:	f1 f0       	breq	.+60     	; 0x4db8 <free+0x92>
    4d7c:	ea 01       	movw	r28, r20
    4d7e:	f5 cf       	rjmp	.-22     	; 0x4d6a <free+0x44>
    4d80:	c2 83       	std	Z+2, r28	; 0x02
    4d82:	d3 83       	std	Z+3, r29	; 0x03
    4d84:	40 81       	ld	r20, Z
    4d86:	51 81       	ldd	r21, Z+1	; 0x01
    4d88:	84 0f       	add	r24, r20
    4d8a:	95 1f       	adc	r25, r21
    4d8c:	c8 17       	cp	r28, r24
    4d8e:	d9 07       	cpc	r29, r25
    4d90:	59 f4       	brne	.+22     	; 0x4da8 <free+0x82>
    4d92:	88 81       	ld	r24, Y
    4d94:	99 81       	ldd	r25, Y+1	; 0x01
    4d96:	84 0f       	add	r24, r20
    4d98:	95 1f       	adc	r25, r21
    4d9a:	02 96       	adiw	r24, 0x02	; 2
    4d9c:	80 83       	st	Z, r24
    4d9e:	91 83       	std	Z+1, r25	; 0x01
    4da0:	8a 81       	ldd	r24, Y+2	; 0x02
    4da2:	9b 81       	ldd	r25, Y+3	; 0x03
    4da4:	82 83       	std	Z+2, r24	; 0x02
    4da6:	93 83       	std	Z+3, r25	; 0x03
    4da8:	21 15       	cp	r18, r1
    4daa:	31 05       	cpc	r19, r1
    4dac:	29 f4       	brne	.+10     	; 0x4db8 <free+0x92>
    4dae:	e0 93 b3 23 	sts	0x23B3, r30	; 0x8023b3 <__flp>
    4db2:	f0 93 b4 23 	sts	0x23B4, r31	; 0x8023b4 <__flp+0x1>
    4db6:	3d c0       	rjmp	.+122    	; 0x4e32 <free+0x10c>
    4db8:	e9 01       	movw	r28, r18
    4dba:	ea 83       	std	Y+2, r30	; 0x02
    4dbc:	fb 83       	std	Y+3, r31	; 0x03
    4dbe:	49 91       	ld	r20, Y+
    4dc0:	59 91       	ld	r21, Y+
    4dc2:	c4 0f       	add	r28, r20
    4dc4:	d5 1f       	adc	r29, r21
    4dc6:	ec 17       	cp	r30, r28
    4dc8:	fd 07       	cpc	r31, r29
    4dca:	61 f4       	brne	.+24     	; 0x4de4 <free+0xbe>
    4dcc:	80 81       	ld	r24, Z
    4dce:	91 81       	ldd	r25, Z+1	; 0x01
    4dd0:	84 0f       	add	r24, r20
    4dd2:	95 1f       	adc	r25, r21
    4dd4:	02 96       	adiw	r24, 0x02	; 2
    4dd6:	e9 01       	movw	r28, r18
    4dd8:	88 83       	st	Y, r24
    4dda:	99 83       	std	Y+1, r25	; 0x01
    4ddc:	82 81       	ldd	r24, Z+2	; 0x02
    4dde:	93 81       	ldd	r25, Z+3	; 0x03
    4de0:	8a 83       	std	Y+2, r24	; 0x02
    4de2:	9b 83       	std	Y+3, r25	; 0x03
    4de4:	e0 e0       	ldi	r30, 0x00	; 0
    4de6:	f0 e0       	ldi	r31, 0x00	; 0
    4de8:	12 96       	adiw	r26, 0x02	; 2
    4dea:	8d 91       	ld	r24, X+
    4dec:	9c 91       	ld	r25, X
    4dee:	13 97       	sbiw	r26, 0x03	; 3
    4df0:	00 97       	sbiw	r24, 0x00	; 0
    4df2:	19 f0       	breq	.+6      	; 0x4dfa <free+0xd4>
    4df4:	fd 01       	movw	r30, r26
    4df6:	dc 01       	movw	r26, r24
    4df8:	f7 cf       	rjmp	.-18     	; 0x4de8 <free+0xc2>
    4dfa:	8d 91       	ld	r24, X+
    4dfc:	9c 91       	ld	r25, X
    4dfe:	11 97       	sbiw	r26, 0x01	; 1
    4e00:	9d 01       	movw	r18, r26
    4e02:	2e 5f       	subi	r18, 0xFE	; 254
    4e04:	3f 4f       	sbci	r19, 0xFF	; 255
    4e06:	82 0f       	add	r24, r18
    4e08:	93 1f       	adc	r25, r19
    4e0a:	20 91 b1 23 	lds	r18, 0x23B1	; 0x8023b1 <__brkval>
    4e0e:	30 91 b2 23 	lds	r19, 0x23B2	; 0x8023b2 <__brkval+0x1>
    4e12:	28 17       	cp	r18, r24
    4e14:	39 07       	cpc	r19, r25
    4e16:	69 f4       	brne	.+26     	; 0x4e32 <free+0x10c>
    4e18:	30 97       	sbiw	r30, 0x00	; 0
    4e1a:	29 f4       	brne	.+10     	; 0x4e26 <free+0x100>
    4e1c:	10 92 b3 23 	sts	0x23B3, r1	; 0x8023b3 <__flp>
    4e20:	10 92 b4 23 	sts	0x23B4, r1	; 0x8023b4 <__flp+0x1>
    4e24:	02 c0       	rjmp	.+4      	; 0x4e2a <free+0x104>
    4e26:	12 82       	std	Z+2, r1	; 0x02
    4e28:	13 82       	std	Z+3, r1	; 0x03
    4e2a:	a0 93 b1 23 	sts	0x23B1, r26	; 0x8023b1 <__brkval>
    4e2e:	b0 93 b2 23 	sts	0x23B2, r27	; 0x8023b2 <__brkval+0x1>
    4e32:	df 91       	pop	r29
    4e34:	cf 91       	pop	r28
    4e36:	08 95       	ret

00004e38 <memset>:
    4e38:	dc 01       	movw	r26, r24
    4e3a:	01 c0       	rjmp	.+2      	; 0x4e3e <memset+0x6>
    4e3c:	6d 93       	st	X+, r22
    4e3e:	41 50       	subi	r20, 0x01	; 1
    4e40:	50 40       	sbci	r21, 0x00	; 0
    4e42:	e0 f7       	brcc	.-8      	; 0x4e3c <memset+0x4>
    4e44:	08 95       	ret

00004e46 <_exit>:
    4e46:	f8 94       	cli

00004e48 <__stop_program>:
    4e48:	ff cf       	rjmp	.-2      	; 0x4e48 <__stop_program>
